
tutrc_lib_encoder_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000142b0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a9c  08014550  08014550  00024550  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014fec  08014fec  00024fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000010  08014ff4  08014ff4  00024ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000010  08015004  08015004  00025004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e0  24000000  08015014  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000081c  240001e0  080151f4  000301e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240009fc  080151f4  000309fc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0004e200  00000000  00000000  0003020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000058cd  00000000  00000000  0007e40e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002ae8  00000000  00000000  00083ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000029b8  00000000  00000000  000867c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003eba4  00000000  00000000  00089180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00025554  00000000  00000000  000c7d24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001ae299  00000000  00000000  000ed278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0029b511  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000d380  00000000  00000000  0029b564  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e0 	.word	0x240001e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08014538 	.word	0x08014538

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e4 	.word	0x240001e4
 80002dc:	08014538 	.word	0x08014538

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_frsub>:
 8000390:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__addsf3>
 8000396:	bf00      	nop

08000398 <__aeabi_fsub>:
 8000398:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800039c <__addsf3>:
 800039c:	0042      	lsls	r2, r0, #1
 800039e:	bf1f      	itttt	ne
 80003a0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80003a4:	ea92 0f03 	teqne	r2, r3
 80003a8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80003ac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003b0:	d06a      	beq.n	8000488 <__addsf3+0xec>
 80003b2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80003b6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80003ba:	bfc1      	itttt	gt
 80003bc:	18d2      	addgt	r2, r2, r3
 80003be:	4041      	eorgt	r1, r0
 80003c0:	4048      	eorgt	r0, r1
 80003c2:	4041      	eorgt	r1, r0
 80003c4:	bfb8      	it	lt
 80003c6:	425b      	neglt	r3, r3
 80003c8:	2b19      	cmp	r3, #25
 80003ca:	bf88      	it	hi
 80003cc:	4770      	bxhi	lr
 80003ce:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80003d2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003d6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80003da:	bf18      	it	ne
 80003dc:	4240      	negne	r0, r0
 80003de:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003e2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80003e6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80003ea:	bf18      	it	ne
 80003ec:	4249      	negne	r1, r1
 80003ee:	ea92 0f03 	teq	r2, r3
 80003f2:	d03f      	beq.n	8000474 <__addsf3+0xd8>
 80003f4:	f1a2 0201 	sub.w	r2, r2, #1
 80003f8:	fa41 fc03 	asr.w	ip, r1, r3
 80003fc:	eb10 000c 	adds.w	r0, r0, ip
 8000400:	f1c3 0320 	rsb	r3, r3, #32
 8000404:	fa01 f103 	lsl.w	r1, r1, r3
 8000408:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800040c:	d502      	bpl.n	8000414 <__addsf3+0x78>
 800040e:	4249      	negs	r1, r1
 8000410:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000414:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000418:	d313      	bcc.n	8000442 <__addsf3+0xa6>
 800041a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800041e:	d306      	bcc.n	800042e <__addsf3+0x92>
 8000420:	0840      	lsrs	r0, r0, #1
 8000422:	ea4f 0131 	mov.w	r1, r1, rrx
 8000426:	f102 0201 	add.w	r2, r2, #1
 800042a:	2afe      	cmp	r2, #254	; 0xfe
 800042c:	d251      	bcs.n	80004d2 <__addsf3+0x136>
 800042e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000432:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000436:	bf08      	it	eq
 8000438:	f020 0001 	biceq.w	r0, r0, #1
 800043c:	ea40 0003 	orr.w	r0, r0, r3
 8000440:	4770      	bx	lr
 8000442:	0049      	lsls	r1, r1, #1
 8000444:	eb40 0000 	adc.w	r0, r0, r0
 8000448:	3a01      	subs	r2, #1
 800044a:	bf28      	it	cs
 800044c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000450:	d2ed      	bcs.n	800042e <__addsf3+0x92>
 8000452:	fab0 fc80 	clz	ip, r0
 8000456:	f1ac 0c08 	sub.w	ip, ip, #8
 800045a:	ebb2 020c 	subs.w	r2, r2, ip
 800045e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000462:	bfaa      	itet	ge
 8000464:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000468:	4252      	neglt	r2, r2
 800046a:	4318      	orrge	r0, r3
 800046c:	bfbc      	itt	lt
 800046e:	40d0      	lsrlt	r0, r2
 8000470:	4318      	orrlt	r0, r3
 8000472:	4770      	bx	lr
 8000474:	f092 0f00 	teq	r2, #0
 8000478:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800047c:	bf06      	itte	eq
 800047e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000482:	3201      	addeq	r2, #1
 8000484:	3b01      	subne	r3, #1
 8000486:	e7b5      	b.n	80003f4 <__addsf3+0x58>
 8000488:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800048c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000490:	bf18      	it	ne
 8000492:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000496:	d021      	beq.n	80004dc <__addsf3+0x140>
 8000498:	ea92 0f03 	teq	r2, r3
 800049c:	d004      	beq.n	80004a8 <__addsf3+0x10c>
 800049e:	f092 0f00 	teq	r2, #0
 80004a2:	bf08      	it	eq
 80004a4:	4608      	moveq	r0, r1
 80004a6:	4770      	bx	lr
 80004a8:	ea90 0f01 	teq	r0, r1
 80004ac:	bf1c      	itt	ne
 80004ae:	2000      	movne	r0, #0
 80004b0:	4770      	bxne	lr
 80004b2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80004b6:	d104      	bne.n	80004c2 <__addsf3+0x126>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	bf28      	it	cs
 80004bc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80004c0:	4770      	bx	lr
 80004c2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80004c6:	bf3c      	itt	cc
 80004c8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80004cc:	4770      	bxcc	lr
 80004ce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80004d2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80004d6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004da:	4770      	bx	lr
 80004dc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80004e0:	bf16      	itet	ne
 80004e2:	4608      	movne	r0, r1
 80004e4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80004e8:	4601      	movne	r1, r0
 80004ea:	0242      	lsls	r2, r0, #9
 80004ec:	bf06      	itte	eq
 80004ee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80004f2:	ea90 0f01 	teqeq	r0, r1
 80004f6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80004fa:	4770      	bx	lr

080004fc <__aeabi_ui2f>:
 80004fc:	f04f 0300 	mov.w	r3, #0
 8000500:	e004      	b.n	800050c <__aeabi_i2f+0x8>
 8000502:	bf00      	nop

08000504 <__aeabi_i2f>:
 8000504:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000508:	bf48      	it	mi
 800050a:	4240      	negmi	r0, r0
 800050c:	ea5f 0c00 	movs.w	ip, r0
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000518:	4601      	mov	r1, r0
 800051a:	f04f 0000 	mov.w	r0, #0
 800051e:	e01c      	b.n	800055a <__aeabi_l2f+0x2a>

08000520 <__aeabi_ul2f>:
 8000520:	ea50 0201 	orrs.w	r2, r0, r1
 8000524:	bf08      	it	eq
 8000526:	4770      	bxeq	lr
 8000528:	f04f 0300 	mov.w	r3, #0
 800052c:	e00a      	b.n	8000544 <__aeabi_l2f+0x14>
 800052e:	bf00      	nop

08000530 <__aeabi_l2f>:
 8000530:	ea50 0201 	orrs.w	r2, r0, r1
 8000534:	bf08      	it	eq
 8000536:	4770      	bxeq	lr
 8000538:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800053c:	d502      	bpl.n	8000544 <__aeabi_l2f+0x14>
 800053e:	4240      	negs	r0, r0
 8000540:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000544:	ea5f 0c01 	movs.w	ip, r1
 8000548:	bf02      	ittt	eq
 800054a:	4684      	moveq	ip, r0
 800054c:	4601      	moveq	r1, r0
 800054e:	2000      	moveq	r0, #0
 8000550:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000554:	bf08      	it	eq
 8000556:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800055a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800055e:	fabc f28c 	clz	r2, ip
 8000562:	3a08      	subs	r2, #8
 8000564:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000568:	db10      	blt.n	800058c <__aeabi_l2f+0x5c>
 800056a:	fa01 fc02 	lsl.w	ip, r1, r2
 800056e:	4463      	add	r3, ip
 8000570:	fa00 fc02 	lsl.w	ip, r0, r2
 8000574:	f1c2 0220 	rsb	r2, r2, #32
 8000578:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800057c:	fa20 f202 	lsr.w	r2, r0, r2
 8000580:	eb43 0002 	adc.w	r0, r3, r2
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f102 0220 	add.w	r2, r2, #32
 8000590:	fa01 fc02 	lsl.w	ip, r1, r2
 8000594:	f1c2 0220 	rsb	r2, r2, #32
 8000598:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800059c:	fa21 f202 	lsr.w	r2, r1, r2
 80005a0:	eb43 0002 	adc.w	r0, r3, r2
 80005a4:	bf08      	it	eq
 80005a6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80005aa:	4770      	bx	lr

080005ac <__aeabi_uldivmod>:
 80005ac:	b953      	cbnz	r3, 80005c4 <__aeabi_uldivmod+0x18>
 80005ae:	b94a      	cbnz	r2, 80005c4 <__aeabi_uldivmod+0x18>
 80005b0:	2900      	cmp	r1, #0
 80005b2:	bf08      	it	eq
 80005b4:	2800      	cmpeq	r0, #0
 80005b6:	bf1c      	itt	ne
 80005b8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80005bc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80005c0:	f000 b974 	b.w	80008ac <__aeabi_idiv0>
 80005c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80005c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80005cc:	f000 f806 	bl	80005dc <__udivmoddi4>
 80005d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80005d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005d8:	b004      	add	sp, #16
 80005da:	4770      	bx	lr

080005dc <__udivmoddi4>:
 80005dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005e0:	9d08      	ldr	r5, [sp, #32]
 80005e2:	4604      	mov	r4, r0
 80005e4:	468e      	mov	lr, r1
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d14d      	bne.n	8000686 <__udivmoddi4+0xaa>
 80005ea:	428a      	cmp	r2, r1
 80005ec:	4694      	mov	ip, r2
 80005ee:	d969      	bls.n	80006c4 <__udivmoddi4+0xe8>
 80005f0:	fab2 f282 	clz	r2, r2
 80005f4:	b152      	cbz	r2, 800060c <__udivmoddi4+0x30>
 80005f6:	fa01 f302 	lsl.w	r3, r1, r2
 80005fa:	f1c2 0120 	rsb	r1, r2, #32
 80005fe:	fa20 f101 	lsr.w	r1, r0, r1
 8000602:	fa0c fc02 	lsl.w	ip, ip, r2
 8000606:	ea41 0e03 	orr.w	lr, r1, r3
 800060a:	4094      	lsls	r4, r2
 800060c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000610:	0c21      	lsrs	r1, r4, #16
 8000612:	fbbe f6f8 	udiv	r6, lr, r8
 8000616:	fa1f f78c 	uxth.w	r7, ip
 800061a:	fb08 e316 	mls	r3, r8, r6, lr
 800061e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000622:	fb06 f107 	mul.w	r1, r6, r7
 8000626:	4299      	cmp	r1, r3
 8000628:	d90a      	bls.n	8000640 <__udivmoddi4+0x64>
 800062a:	eb1c 0303 	adds.w	r3, ip, r3
 800062e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000632:	f080 811f 	bcs.w	8000874 <__udivmoddi4+0x298>
 8000636:	4299      	cmp	r1, r3
 8000638:	f240 811c 	bls.w	8000874 <__udivmoddi4+0x298>
 800063c:	3e02      	subs	r6, #2
 800063e:	4463      	add	r3, ip
 8000640:	1a5b      	subs	r3, r3, r1
 8000642:	b2a4      	uxth	r4, r4
 8000644:	fbb3 f0f8 	udiv	r0, r3, r8
 8000648:	fb08 3310 	mls	r3, r8, r0, r3
 800064c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000650:	fb00 f707 	mul.w	r7, r0, r7
 8000654:	42a7      	cmp	r7, r4
 8000656:	d90a      	bls.n	800066e <__udivmoddi4+0x92>
 8000658:	eb1c 0404 	adds.w	r4, ip, r4
 800065c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000660:	f080 810a 	bcs.w	8000878 <__udivmoddi4+0x29c>
 8000664:	42a7      	cmp	r7, r4
 8000666:	f240 8107 	bls.w	8000878 <__udivmoddi4+0x29c>
 800066a:	4464      	add	r4, ip
 800066c:	3802      	subs	r0, #2
 800066e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000672:	1be4      	subs	r4, r4, r7
 8000674:	2600      	movs	r6, #0
 8000676:	b11d      	cbz	r5, 8000680 <__udivmoddi4+0xa4>
 8000678:	40d4      	lsrs	r4, r2
 800067a:	2300      	movs	r3, #0
 800067c:	e9c5 4300 	strd	r4, r3, [r5]
 8000680:	4631      	mov	r1, r6
 8000682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000686:	428b      	cmp	r3, r1
 8000688:	d909      	bls.n	800069e <__udivmoddi4+0xc2>
 800068a:	2d00      	cmp	r5, #0
 800068c:	f000 80ef 	beq.w	800086e <__udivmoddi4+0x292>
 8000690:	2600      	movs	r6, #0
 8000692:	e9c5 0100 	strd	r0, r1, [r5]
 8000696:	4630      	mov	r0, r6
 8000698:	4631      	mov	r1, r6
 800069a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800069e:	fab3 f683 	clz	r6, r3
 80006a2:	2e00      	cmp	r6, #0
 80006a4:	d14a      	bne.n	800073c <__udivmoddi4+0x160>
 80006a6:	428b      	cmp	r3, r1
 80006a8:	d302      	bcc.n	80006b0 <__udivmoddi4+0xd4>
 80006aa:	4282      	cmp	r2, r0
 80006ac:	f200 80f9 	bhi.w	80008a2 <__udivmoddi4+0x2c6>
 80006b0:	1a84      	subs	r4, r0, r2
 80006b2:	eb61 0303 	sbc.w	r3, r1, r3
 80006b6:	2001      	movs	r0, #1
 80006b8:	469e      	mov	lr, r3
 80006ba:	2d00      	cmp	r5, #0
 80006bc:	d0e0      	beq.n	8000680 <__udivmoddi4+0xa4>
 80006be:	e9c5 4e00 	strd	r4, lr, [r5]
 80006c2:	e7dd      	b.n	8000680 <__udivmoddi4+0xa4>
 80006c4:	b902      	cbnz	r2, 80006c8 <__udivmoddi4+0xec>
 80006c6:	deff      	udf	#255	; 0xff
 80006c8:	fab2 f282 	clz	r2, r2
 80006cc:	2a00      	cmp	r2, #0
 80006ce:	f040 8092 	bne.w	80007f6 <__udivmoddi4+0x21a>
 80006d2:	eba1 010c 	sub.w	r1, r1, ip
 80006d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006da:	fa1f fe8c 	uxth.w	lr, ip
 80006de:	2601      	movs	r6, #1
 80006e0:	0c20      	lsrs	r0, r4, #16
 80006e2:	fbb1 f3f7 	udiv	r3, r1, r7
 80006e6:	fb07 1113 	mls	r1, r7, r3, r1
 80006ea:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80006ee:	fb0e f003 	mul.w	r0, lr, r3
 80006f2:	4288      	cmp	r0, r1
 80006f4:	d908      	bls.n	8000708 <__udivmoddi4+0x12c>
 80006f6:	eb1c 0101 	adds.w	r1, ip, r1
 80006fa:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80006fe:	d202      	bcs.n	8000706 <__udivmoddi4+0x12a>
 8000700:	4288      	cmp	r0, r1
 8000702:	f200 80cb 	bhi.w	800089c <__udivmoddi4+0x2c0>
 8000706:	4643      	mov	r3, r8
 8000708:	1a09      	subs	r1, r1, r0
 800070a:	b2a4      	uxth	r4, r4
 800070c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000710:	fb07 1110 	mls	r1, r7, r0, r1
 8000714:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000718:	fb0e fe00 	mul.w	lr, lr, r0
 800071c:	45a6      	cmp	lr, r4
 800071e:	d908      	bls.n	8000732 <__udivmoddi4+0x156>
 8000720:	eb1c 0404 	adds.w	r4, ip, r4
 8000724:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000728:	d202      	bcs.n	8000730 <__udivmoddi4+0x154>
 800072a:	45a6      	cmp	lr, r4
 800072c:	f200 80bb 	bhi.w	80008a6 <__udivmoddi4+0x2ca>
 8000730:	4608      	mov	r0, r1
 8000732:	eba4 040e 	sub.w	r4, r4, lr
 8000736:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800073a:	e79c      	b.n	8000676 <__udivmoddi4+0x9a>
 800073c:	f1c6 0720 	rsb	r7, r6, #32
 8000740:	40b3      	lsls	r3, r6
 8000742:	fa22 fc07 	lsr.w	ip, r2, r7
 8000746:	ea4c 0c03 	orr.w	ip, ip, r3
 800074a:	fa20 f407 	lsr.w	r4, r0, r7
 800074e:	fa01 f306 	lsl.w	r3, r1, r6
 8000752:	431c      	orrs	r4, r3
 8000754:	40f9      	lsrs	r1, r7
 8000756:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800075a:	fa00 f306 	lsl.w	r3, r0, r6
 800075e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000762:	0c20      	lsrs	r0, r4, #16
 8000764:	fa1f fe8c 	uxth.w	lr, ip
 8000768:	fb09 1118 	mls	r1, r9, r8, r1
 800076c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000770:	fb08 f00e 	mul.w	r0, r8, lr
 8000774:	4288      	cmp	r0, r1
 8000776:	fa02 f206 	lsl.w	r2, r2, r6
 800077a:	d90b      	bls.n	8000794 <__udivmoddi4+0x1b8>
 800077c:	eb1c 0101 	adds.w	r1, ip, r1
 8000780:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000784:	f080 8088 	bcs.w	8000898 <__udivmoddi4+0x2bc>
 8000788:	4288      	cmp	r0, r1
 800078a:	f240 8085 	bls.w	8000898 <__udivmoddi4+0x2bc>
 800078e:	f1a8 0802 	sub.w	r8, r8, #2
 8000792:	4461      	add	r1, ip
 8000794:	1a09      	subs	r1, r1, r0
 8000796:	b2a4      	uxth	r4, r4
 8000798:	fbb1 f0f9 	udiv	r0, r1, r9
 800079c:	fb09 1110 	mls	r1, r9, r0, r1
 80007a0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80007a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80007a8:	458e      	cmp	lr, r1
 80007aa:	d908      	bls.n	80007be <__udivmoddi4+0x1e2>
 80007ac:	eb1c 0101 	adds.w	r1, ip, r1
 80007b0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80007b4:	d26c      	bcs.n	8000890 <__udivmoddi4+0x2b4>
 80007b6:	458e      	cmp	lr, r1
 80007b8:	d96a      	bls.n	8000890 <__udivmoddi4+0x2b4>
 80007ba:	3802      	subs	r0, #2
 80007bc:	4461      	add	r1, ip
 80007be:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80007c2:	fba0 9402 	umull	r9, r4, r0, r2
 80007c6:	eba1 010e 	sub.w	r1, r1, lr
 80007ca:	42a1      	cmp	r1, r4
 80007cc:	46c8      	mov	r8, r9
 80007ce:	46a6      	mov	lr, r4
 80007d0:	d356      	bcc.n	8000880 <__udivmoddi4+0x2a4>
 80007d2:	d053      	beq.n	800087c <__udivmoddi4+0x2a0>
 80007d4:	b15d      	cbz	r5, 80007ee <__udivmoddi4+0x212>
 80007d6:	ebb3 0208 	subs.w	r2, r3, r8
 80007da:	eb61 010e 	sbc.w	r1, r1, lr
 80007de:	fa01 f707 	lsl.w	r7, r1, r7
 80007e2:	fa22 f306 	lsr.w	r3, r2, r6
 80007e6:	40f1      	lsrs	r1, r6
 80007e8:	431f      	orrs	r7, r3
 80007ea:	e9c5 7100 	strd	r7, r1, [r5]
 80007ee:	2600      	movs	r6, #0
 80007f0:	4631      	mov	r1, r6
 80007f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007f6:	f1c2 0320 	rsb	r3, r2, #32
 80007fa:	40d8      	lsrs	r0, r3
 80007fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000800:	fa21 f303 	lsr.w	r3, r1, r3
 8000804:	4091      	lsls	r1, r2
 8000806:	4301      	orrs	r1, r0
 8000808:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800080c:	fa1f fe8c 	uxth.w	lr, ip
 8000810:	fbb3 f0f7 	udiv	r0, r3, r7
 8000814:	fb07 3610 	mls	r6, r7, r0, r3
 8000818:	0c0b      	lsrs	r3, r1, #16
 800081a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800081e:	fb00 f60e 	mul.w	r6, r0, lr
 8000822:	429e      	cmp	r6, r3
 8000824:	fa04 f402 	lsl.w	r4, r4, r2
 8000828:	d908      	bls.n	800083c <__udivmoddi4+0x260>
 800082a:	eb1c 0303 	adds.w	r3, ip, r3
 800082e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000832:	d22f      	bcs.n	8000894 <__udivmoddi4+0x2b8>
 8000834:	429e      	cmp	r6, r3
 8000836:	d92d      	bls.n	8000894 <__udivmoddi4+0x2b8>
 8000838:	3802      	subs	r0, #2
 800083a:	4463      	add	r3, ip
 800083c:	1b9b      	subs	r3, r3, r6
 800083e:	b289      	uxth	r1, r1
 8000840:	fbb3 f6f7 	udiv	r6, r3, r7
 8000844:	fb07 3316 	mls	r3, r7, r6, r3
 8000848:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800084c:	fb06 f30e 	mul.w	r3, r6, lr
 8000850:	428b      	cmp	r3, r1
 8000852:	d908      	bls.n	8000866 <__udivmoddi4+0x28a>
 8000854:	eb1c 0101 	adds.w	r1, ip, r1
 8000858:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800085c:	d216      	bcs.n	800088c <__udivmoddi4+0x2b0>
 800085e:	428b      	cmp	r3, r1
 8000860:	d914      	bls.n	800088c <__udivmoddi4+0x2b0>
 8000862:	3e02      	subs	r6, #2
 8000864:	4461      	add	r1, ip
 8000866:	1ac9      	subs	r1, r1, r3
 8000868:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800086c:	e738      	b.n	80006e0 <__udivmoddi4+0x104>
 800086e:	462e      	mov	r6, r5
 8000870:	4628      	mov	r0, r5
 8000872:	e705      	b.n	8000680 <__udivmoddi4+0xa4>
 8000874:	4606      	mov	r6, r0
 8000876:	e6e3      	b.n	8000640 <__udivmoddi4+0x64>
 8000878:	4618      	mov	r0, r3
 800087a:	e6f8      	b.n	800066e <__udivmoddi4+0x92>
 800087c:	454b      	cmp	r3, r9
 800087e:	d2a9      	bcs.n	80007d4 <__udivmoddi4+0x1f8>
 8000880:	ebb9 0802 	subs.w	r8, r9, r2
 8000884:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000888:	3801      	subs	r0, #1
 800088a:	e7a3      	b.n	80007d4 <__udivmoddi4+0x1f8>
 800088c:	4646      	mov	r6, r8
 800088e:	e7ea      	b.n	8000866 <__udivmoddi4+0x28a>
 8000890:	4620      	mov	r0, r4
 8000892:	e794      	b.n	80007be <__udivmoddi4+0x1e2>
 8000894:	4640      	mov	r0, r8
 8000896:	e7d1      	b.n	800083c <__udivmoddi4+0x260>
 8000898:	46d0      	mov	r8, sl
 800089a:	e77b      	b.n	8000794 <__udivmoddi4+0x1b8>
 800089c:	3b02      	subs	r3, #2
 800089e:	4461      	add	r1, ip
 80008a0:	e732      	b.n	8000708 <__udivmoddi4+0x12c>
 80008a2:	4630      	mov	r0, r6
 80008a4:	e709      	b.n	80006ba <__udivmoddi4+0xde>
 80008a6:	4464      	add	r4, ip
 80008a8:	3802      	subs	r0, #2
 80008aa:	e742      	b.n	8000732 <__udivmoddi4+0x156>

080008ac <__aeabi_idiv0>:
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop

080008b0 <_ZSt17__size_to_integerj>:

  // Used by fill_n, generate_n, etc. to convert _Size to an integral type:
  inline _GLIBCXX_CONSTEXPR int
  __size_to_integer(int __n) { return __n; }
  inline _GLIBCXX_CONSTEXPR unsigned
  __size_to_integer(unsigned __n) { return __n; }
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	4618      	mov	r0, r3
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr

080008c6 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80008c6:	b480      	push	{r7}
 80008c8:	b083      	sub	sp, #12
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	6078      	str	r0, [r7, #4]
 80008ce:	6039      	str	r1, [r7, #0]
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	4618      	mov	r0, r3
 80008d4:	370c      	adds	r7, #12
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr

080008de <_ZN18tutrc_harurobo_lib4UARTC1EP20__UART_HandleTypeDefj>:

namespace tutrc_harurobo_lib {

class UART {
public:
  UART(UART_HandleTypeDef *huart, size_t rx_buf_size = 64)
 80008de:	b5b0      	push	{r4, r5, r7, lr}
 80008e0:	b086      	sub	sp, #24
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	60f8      	str	r0, [r7, #12]
 80008e6:	60b9      	str	r1, [r7, #8]
 80008e8:	607a      	str	r2, [r7, #4]
      : huart_(huart), buf_(rx_buf_size) {
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	68ba      	ldr	r2, [r7, #8]
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	1d1c      	adds	r4, r3, #4
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	4618      	mov	r0, r3
 80008fa:	f001 f923 	bl	8001b44 <_ZNSaIhEC1Ev>
 80008fe:	f107 0314 	add.w	r3, r7, #20
 8000902:	461a      	mov	r2, r3
 8000904:	6879      	ldr	r1, [r7, #4]
 8000906:	4620      	mov	r0, r4
 8000908:	f001 f934 	bl	8001b74 <_ZNSt6vectorIhSaIhEEC1EjRKS0_>
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	4618      	mov	r0, r3
 8000912:	f001 f923 	bl	8001b5c <_ZNSaIhED1Ev>
    HAL_UART_Receive_DMA(huart_, buf_.data(), buf_.size());
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	681c      	ldr	r4, [r3, #0]
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	3304      	adds	r3, #4
 800091e:	4618      	mov	r0, r3
 8000920:	f001 f942 	bl	8001ba8 <_ZNSt6vectorIhSaIhEE4dataEv>
 8000924:	4605      	mov	r5, r0
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	3304      	adds	r3, #4
 800092a:	4618      	mov	r0, r3
 800092c:	f001 f94b 	bl	8001bc6 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8000930:	4603      	mov	r3, r0
 8000932:	b29b      	uxth	r3, r3
 8000934:	461a      	mov	r2, r3
 8000936:	4629      	mov	r1, r5
 8000938:	4620      	mov	r0, r4
 800093a:	f00e fb73 	bl	800f024 <HAL_UART_Receive_DMA>
  }
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	4618      	mov	r0, r3
 8000942:	3718      	adds	r7, #24
 8000944:	46bd      	mov	sp, r7
 8000946:	bdb0      	pop	{r4, r5, r7, pc}

08000948 <_ZN18tutrc_harurobo_lib4UART9availableEv>:

  size_t available() {
 8000948:	b590      	push	{r4, r7, lr}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
    size_t write_idx = buf_.size() - __HAL_DMA_GET_COUNTER(huart_->hdmarx);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	3304      	adds	r3, #4
 8000954:	4618      	mov	r0, r3
 8000956:	f001 f936 	bl	8001bc6 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 800095a:	4602      	mov	r2, r0
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4949      	ldr	r1, [pc, #292]	; (8000a8c <_ZN18tutrc_harurobo_lib4UART9availableEv+0x144>)
 8000966:	428b      	cmp	r3, r1
 8000968:	d068      	beq.n	8000a3c <_ZN18tutrc_harurobo_lib4UART9availableEv+0xf4>
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4947      	ldr	r1, [pc, #284]	; (8000a90 <_ZN18tutrc_harurobo_lib4UART9availableEv+0x148>)
 8000974:	428b      	cmp	r3, r1
 8000976:	d061      	beq.n	8000a3c <_ZN18tutrc_harurobo_lib4UART9availableEv+0xf4>
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4944      	ldr	r1, [pc, #272]	; (8000a94 <_ZN18tutrc_harurobo_lib4UART9availableEv+0x14c>)
 8000982:	428b      	cmp	r3, r1
 8000984:	d05a      	beq.n	8000a3c <_ZN18tutrc_harurobo_lib4UART9availableEv+0xf4>
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4942      	ldr	r1, [pc, #264]	; (8000a98 <_ZN18tutrc_harurobo_lib4UART9availableEv+0x150>)
 8000990:	428b      	cmp	r3, r1
 8000992:	d053      	beq.n	8000a3c <_ZN18tutrc_harurobo_lib4UART9availableEv+0xf4>
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	493f      	ldr	r1, [pc, #252]	; (8000a9c <_ZN18tutrc_harurobo_lib4UART9availableEv+0x154>)
 800099e:	428b      	cmp	r3, r1
 80009a0:	d04c      	beq.n	8000a3c <_ZN18tutrc_harurobo_lib4UART9availableEv+0xf4>
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	493d      	ldr	r1, [pc, #244]	; (8000aa0 <_ZN18tutrc_harurobo_lib4UART9availableEv+0x158>)
 80009ac:	428b      	cmp	r3, r1
 80009ae:	d045      	beq.n	8000a3c <_ZN18tutrc_harurobo_lib4UART9availableEv+0xf4>
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	493a      	ldr	r1, [pc, #232]	; (8000aa4 <_ZN18tutrc_harurobo_lib4UART9availableEv+0x15c>)
 80009ba:	428b      	cmp	r3, r1
 80009bc:	d03e      	beq.n	8000a3c <_ZN18tutrc_harurobo_lib4UART9availableEv+0xf4>
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4938      	ldr	r1, [pc, #224]	; (8000aa8 <_ZN18tutrc_harurobo_lib4UART9availableEv+0x160>)
 80009c8:	428b      	cmp	r3, r1
 80009ca:	d037      	beq.n	8000a3c <_ZN18tutrc_harurobo_lib4UART9availableEv+0xf4>
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4935      	ldr	r1, [pc, #212]	; (8000aac <_ZN18tutrc_harurobo_lib4UART9availableEv+0x164>)
 80009d6:	428b      	cmp	r3, r1
 80009d8:	d030      	beq.n	8000a3c <_ZN18tutrc_harurobo_lib4UART9availableEv+0xf4>
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4933      	ldr	r1, [pc, #204]	; (8000ab0 <_ZN18tutrc_harurobo_lib4UART9availableEv+0x168>)
 80009e4:	428b      	cmp	r3, r1
 80009e6:	d029      	beq.n	8000a3c <_ZN18tutrc_harurobo_lib4UART9availableEv+0xf4>
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4930      	ldr	r1, [pc, #192]	; (8000ab4 <_ZN18tutrc_harurobo_lib4UART9availableEv+0x16c>)
 80009f2:	428b      	cmp	r3, r1
 80009f4:	d022      	beq.n	8000a3c <_ZN18tutrc_harurobo_lib4UART9availableEv+0xf4>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	492e      	ldr	r1, [pc, #184]	; (8000ab8 <_ZN18tutrc_harurobo_lib4UART9availableEv+0x170>)
 8000a00:	428b      	cmp	r3, r1
 8000a02:	d01b      	beq.n	8000a3c <_ZN18tutrc_harurobo_lib4UART9availableEv+0xf4>
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	492b      	ldr	r1, [pc, #172]	; (8000abc <_ZN18tutrc_harurobo_lib4UART9availableEv+0x174>)
 8000a0e:	428b      	cmp	r3, r1
 8000a10:	d014      	beq.n	8000a3c <_ZN18tutrc_harurobo_lib4UART9availableEv+0xf4>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4929      	ldr	r1, [pc, #164]	; (8000ac0 <_ZN18tutrc_harurobo_lib4UART9availableEv+0x178>)
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	d00d      	beq.n	8000a3c <_ZN18tutrc_harurobo_lib4UART9availableEv+0xf4>
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4926      	ldr	r1, [pc, #152]	; (8000ac4 <_ZN18tutrc_harurobo_lib4UART9availableEv+0x17c>)
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	d006      	beq.n	8000a3c <_ZN18tutrc_harurobo_lib4UART9availableEv+0xf4>
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4924      	ldr	r1, [pc, #144]	; (8000ac8 <_ZN18tutrc_harurobo_lib4UART9availableEv+0x180>)
 8000a38:	428b      	cmp	r3, r1
 8000a3a:	d105      	bne.n	8000a48 <_ZN18tutrc_harurobo_lib4UART9availableEv+0x100>
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	e004      	b.n	8000a52 <_ZN18tutrc_harurobo_lib4UART9availableEv+0x10a>
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	1ad3      	subs	r3, r2, r3
 8000a54:	60fb      	str	r3, [r7, #12]
    return (buf_.size() + write_idx - read_idx_) % buf_.size();
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	3304      	adds	r3, #4
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f001 f8b3 	bl	8001bc6 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8000a60:	4602      	mov	r2, r0
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	441a      	add	r2, r3
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	691b      	ldr	r3, [r3, #16]
 8000a6a:	1ad4      	subs	r4, r2, r3
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	3304      	adds	r3, #4
 8000a70:	4618      	mov	r0, r3
 8000a72:	f001 f8a8 	bl	8001bc6 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8000a76:	4603      	mov	r3, r0
 8000a78:	fbb4 f2f3 	udiv	r2, r4, r3
 8000a7c:	fb02 f303 	mul.w	r3, r2, r3
 8000a80:	1ae3      	subs	r3, r4, r3
  }
 8000a82:	4618      	mov	r0, r3
 8000a84:	3714      	adds	r7, #20
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd90      	pop	{r4, r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40020010 	.word	0x40020010
 8000a90:	40020028 	.word	0x40020028
 8000a94:	40020040 	.word	0x40020040
 8000a98:	40020058 	.word	0x40020058
 8000a9c:	40020070 	.word	0x40020070
 8000aa0:	40020088 	.word	0x40020088
 8000aa4:	400200a0 	.word	0x400200a0
 8000aa8:	400200b8 	.word	0x400200b8
 8000aac:	40020410 	.word	0x40020410
 8000ab0:	40020428 	.word	0x40020428
 8000ab4:	40020440 	.word	0x40020440
 8000ab8:	40020458 	.word	0x40020458
 8000abc:	40020470 	.word	0x40020470
 8000ac0:	40020488 	.word	0x40020488
 8000ac4:	400204a0 	.word	0x400204a0
 8000ac8:	400204b8 	.word	0x400204b8

08000acc <_ZN18tutrc_harurobo_lib4UART5flushEv>:

  void flush() { read_idx_ = (read_idx_ + available()) % buf_.size(); }
 8000acc:	b590      	push	{r4, r7, lr}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	691c      	ldr	r4, [r3, #16]
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f7ff ff35 	bl	8000948 <_ZN18tutrc_harurobo_lib4UART9availableEv>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	441c      	add	r4, r3
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	3304      	adds	r3, #4
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f001 f86d 	bl	8001bc6 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8000aec:	4603      	mov	r3, r0
 8000aee:	fbb4 f2f3 	udiv	r2, r4, r3
 8000af2:	fb02 f303 	mul.w	r3, r2, r3
 8000af6:	1ae2      	subs	r2, r4, r3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	611a      	str	r2, [r3, #16]
 8000afc:	bf00      	nop
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd90      	pop	{r4, r7, pc}

08000b04 <_ZN18tutrc_harurobo_lib4UART8transmitEPhj>:

  HAL_StatusTypeDef transmit(uint8_t *data, size_t size) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60f8      	str	r0, [r7, #12]
 8000b0c:	60b9      	str	r1, [r7, #8]
 8000b0e:	607a      	str	r2, [r7, #4]
    return HAL_UART_Transmit(huart_, data, size, HAL_MAX_DELAY);
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	6818      	ldr	r0, [r3, #0]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	b29a      	uxth	r2, r3
 8000b18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b1c:	68b9      	ldr	r1, [r7, #8]
 8000b1e:	f00e f9eb 	bl	800eef8 <HAL_UART_Transmit>
 8000b22:	4603      	mov	r3, r0
  }
 8000b24:	4618      	mov	r0, r3
 8000b26:	3710      	adds	r7, #16
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <_ZN18tutrc_harurobo_lib4UART7receiveEPhj>:

  void receive(uint8_t *data, size_t size) {
 8000b2c:	b590      	push	{r4, r7, lr}
 8000b2e:	b087      	sub	sp, #28
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
    for (size_t i = 0; i < size; ++i) {
 8000b38:	2300      	movs	r3, #0
 8000b3a:	617b      	str	r3, [r7, #20]
 8000b3c:	697a      	ldr	r2, [r7, #20]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d221      	bcs.n	8000b88 <_ZN18tutrc_harurobo_lib4UART7receiveEPhj+0x5c>
      data[i] = buf_[read_idx_];
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	1d1a      	adds	r2, r3, #4
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	691b      	ldr	r3, [r3, #16]
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4610      	mov	r0, r2
 8000b50:	f001 f848 	bl	8001be4 <_ZNSt6vectorIhSaIhEEixEj>
 8000b54:	4601      	mov	r1, r0
 8000b56:	68ba      	ldr	r2, [r7, #8]
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	780a      	ldrb	r2, [r1, #0]
 8000b5e:	701a      	strb	r2, [r3, #0]
      read_idx_ = (read_idx_ + 1) % buf_.size();
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	691b      	ldr	r3, [r3, #16]
 8000b64:	1c5c      	adds	r4, r3, #1
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	3304      	adds	r3, #4
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f001 f82b 	bl	8001bc6 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8000b70:	4603      	mov	r3, r0
 8000b72:	fbb4 f2f3 	udiv	r2, r4, r3
 8000b76:	fb02 f303 	mul.w	r3, r2, r3
 8000b7a:	1ae2      	subs	r2, r4, r3
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
    for (size_t i = 0; i < size; ++i) {
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	3301      	adds	r3, #1
 8000b84:	617b      	str	r3, [r7, #20]
 8000b86:	e7d9      	b.n	8000b3c <_ZN18tutrc_harurobo_lib4UART7receiveEPhj+0x10>
    }
  }
 8000b88:	bf00      	nop
 8000b8a:	371c      	adds	r7, #28
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd90      	pop	{r4, r7, pc}

08000b90 <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 8000ba6:	b480      	push	{r7}
 8000ba8:	b083      	sub	sp, #12
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	609a      	str	r2, [r3, #8]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	689b      	ldr	r3, [r3, #8]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d005      	beq.n	8000bf4 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	689b      	ldr	r3, [r3, #8]
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	6879      	ldr	r1, [r7, #4]
 8000bf0:	2203      	movs	r2, #3
 8000bf2:	4798      	blx	r3
    }
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <_ZNSt8__detail15_Hash_node_baseC1Ev>:
   */
  struct _Hash_node_base
  {
    _Hash_node_base* _M_nxt;

    _Hash_node_base() noexcept : _M_nxt() { }
 8000bfe:	b480      	push	{r7}
 8000c00:	b083      	sub	sp, #12
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	4618      	mov	r0, r3
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <_ZNKSt8__detail18_Mod_range_hashingclEjj>:
    typedef std::size_t first_argument_type;
    typedef std::size_t second_argument_type;
    typedef std::size_t result_type;

    result_type
    operator()(first_argument_type __num,
 8000c1a:	b480      	push	{r7}
 8000c1c:	b085      	sub	sp, #20
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	60f8      	str	r0, [r7, #12]
 8000c22:	60b9      	str	r1, [r7, #8]
 8000c24:	607a      	str	r2, [r7, #4]
	       second_argument_type __den) const noexcept
    { return __num % __den; }
 8000c26:	68bb      	ldr	r3, [r7, #8]
 8000c28:	687a      	ldr	r2, [r7, #4]
 8000c2a:	fbb3 f2f2 	udiv	r2, r3, r2
 8000c2e:	6879      	ldr	r1, [r7, #4]
 8000c30:	fb01 f202 	mul.w	r2, r1, r2
 8000c34:	1a9b      	subs	r3, r3, r2
 8000c36:	4618      	mov	r0, r3
 8000c38:	3714      	adds	r7, #20
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr

08000c42 <_ZNKSt8__detail20_Prime_rehash_policy8_M_stateEv>:
		   std::size_t __n_ins) const;

    typedef std::size_t _State;

    _State
    _M_state() const
 8000c42:	b480      	push	{r7}
 8000c44:	b083      	sub	sp, #12
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
    { return _M_next_resize; }
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	4618      	mov	r0, r3
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr

08000c5a <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8000c5a:	b480      	push	{r7}
 8000c5c:	b083      	sub	sp, #12
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
 8000c62:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d201      	bcs.n	8000c74 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	e000      	b.n	8000c76 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8000c74:	687b      	ldr	r3, [r7, #4]
    }
 8000c76:	4618      	mov	r0, r3
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <_ZN18tutrc_harurobo_lib3CANC1EP19FDCAN_HandleTypeDefmm>:

namespace tutrc_harurobo_lib {

class CAN {
public:
  CAN(FDCAN_HandleTypeDef *hfdcan, uint32_t filter_id = 0,
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b08e      	sub	sp, #56	; 0x38
 8000c86:	af02      	add	r7, sp, #8
 8000c88:	60f8      	str	r0, [r7, #12]
 8000c8a:	60b9      	str	r1, [r7, #8]
 8000c8c:	607a      	str	r2, [r7, #4]
 8000c8e:	603b      	str	r3, [r7, #0]
      uint32_t filter_mask = 0)
      : hfdcan_(hfdcan) {
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	68ba      	ldr	r2, [r7, #8]
 8000c94:	601a      	str	r2, [r3, #0]
    if (hfdcan_->State == HAL_FDCAN_STATE_READY) {
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	bf0c      	ite	eq
 8000ca4:	2301      	moveq	r3, #1
 8000ca6:	2300      	movne	r3, #0
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d050      	beq.n	8000d50 <_ZN18tutrc_harurobo_lib3CANC1EP19FDCAN_HandleTypeDefmm+0xce>
      FDCAN_FilterTypeDef filter;
      filter.IdType = FDCAN_STANDARD_ID;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	613b      	str	r3, [r7, #16]
      filter.FilterIndex = 0;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	617b      	str	r3, [r7, #20]
      filter.FilterType = FDCAN_FILTER_MASK;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	61bb      	str	r3, [r7, #24]
      filter.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	61fb      	str	r3, [r7, #28]
      filter.FilterID1 = filter_id;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	623b      	str	r3, [r7, #32]
      filter.FilterID2 = filter_mask;
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24

      if (HAL_FDCAN_ConfigFilter(hfdcan_, &filter) != HAL_OK) {
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f107 0210 	add.w	r2, r7, #16
 8000cce:	4611      	mov	r1, r2
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f009 fc0d 	bl	800a4f0 <HAL_FDCAN_ConfigFilter>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	bf14      	ite	ne
 8000cdc:	2301      	movne	r3, #1
 8000cde:	2300      	moveq	r3, #0
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <_ZN18tutrc_harurobo_lib3CANC1EP19FDCAN_HandleTypeDefmm+0x68>
        Error_Handler();
 8000ce6:	f004 fce5 	bl	80056b4 <Error_Handler>
      }

      if (HAL_FDCAN_ConfigGlobalFilter(hfdcan_, FDCAN_REJECT, FDCAN_REJECT,
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	6818      	ldr	r0, [r3, #0]
 8000cee:	2301      	movs	r3, #1
 8000cf0:	9300      	str	r3, [sp, #0]
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	2202      	movs	r2, #2
 8000cf6:	2102      	movs	r1, #2
 8000cf8:	f009 fc70 	bl	800a5dc <HAL_FDCAN_ConfigGlobalFilter>
 8000cfc:	4603      	mov	r3, r0
                                       FDCAN_REJECT_REMOTE,
                                       FDCAN_REJECT_REMOTE) != HAL_OK) {
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	bf14      	ite	ne
 8000d02:	2301      	movne	r3, #1
 8000d04:	2300      	moveq	r3, #0
 8000d06:	b2db      	uxtb	r3, r3
      if (HAL_FDCAN_ConfigGlobalFilter(hfdcan_, FDCAN_REJECT, FDCAN_REJECT,
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <_ZN18tutrc_harurobo_lib3CANC1EP19FDCAN_HandleTypeDefmm+0x8e>
        Error_Handler();
 8000d0c:	f004 fcd2 	bl	80056b4 <Error_Handler>
      }

      if (HAL_FDCAN_ActivateNotification(hfdcan_, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2200      	movs	r2, #0
 8000d16:	2101      	movs	r1, #1
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f009 fe81 	bl	800aa20 <HAL_FDCAN_ActivateNotification>
 8000d1e:	4603      	mov	r3, r0
                                         0) != HAL_OK) {
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	bf14      	ite	ne
 8000d24:	2301      	movne	r3, #1
 8000d26:	2300      	moveq	r3, #0
 8000d28:	b2db      	uxtb	r3, r3
      if (HAL_FDCAN_ActivateNotification(hfdcan_, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <_ZN18tutrc_harurobo_lib3CANC1EP19FDCAN_HandleTypeDefmm+0xb0>
        Error_Handler();
 8000d2e:	f004 fcc1 	bl	80056b4 <Error_Handler>
      }

      if (HAL_FDCAN_Start(hfdcan_) != HAL_OK) {
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4618      	mov	r0, r3
 8000d38:	f009 fc7d 	bl	800a636 <HAL_FDCAN_Start>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	bf14      	ite	ne
 8000d42:	2301      	movne	r3, #1
 8000d44:	2300      	moveq	r3, #0
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <_ZN18tutrc_harurobo_lib3CANC1EP19FDCAN_HandleTypeDefmm+0xce>
        Error_Handler();
 8000d4c:	f004 fcb2 	bl	80056b4 <Error_Handler>
      }
    }
  }
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	4618      	mov	r0, r3
 8000d54:	3730      	adds	r7, #48	; 0x30
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <_ZN18tutrc_harurobo_lib3CAN8transmitEmPhj>:

  HAL_StatusTypeDef transmit(uint32_t id, uint8_t *data, size_t size) {
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b08e      	sub	sp, #56	; 0x38
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	60f8      	str	r0, [r7, #12]
 8000d62:	60b9      	str	r1, [r7, #8]
 8000d64:	607a      	str	r2, [r7, #4]
 8000d66:	603b      	str	r3, [r7, #0]
    FDCAN_TxHeaderTypeDef tx_header;
    tx_header.Identifier = id;
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	617b      	str	r3, [r7, #20]
    tx_header.IdType = FDCAN_STANDARD_ID;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	61bb      	str	r3, [r7, #24]
    tx_header.TxFrameType = FDCAN_DATA_FRAME;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61fb      	str	r3, [r7, #28]
    tx_header.DataLength = (size > 8 ? 8 : size) << 16;
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	2b08      	cmp	r3, #8
 8000d78:	bf28      	it	cs
 8000d7a:	2308      	movcs	r3, #8
 8000d7c:	041b      	lsls	r3, r3, #16
 8000d7e:	623b      	str	r3, [r7, #32]
    tx_header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000d80:	2300      	movs	r3, #0
 8000d82:	627b      	str	r3, [r7, #36]	; 0x24
    tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 8000d84:	2300      	movs	r3, #0
 8000d86:	62bb      	str	r3, [r7, #40]	; 0x28
    tx_header.FDFormat = FDCAN_CLASSIC_CAN;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    tx_header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	633b      	str	r3, [r7, #48]	; 0x30
    tx_header.MessageMarker = 0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	637b      	str	r3, [r7, #52]	; 0x34

    return HAL_FDCAN_AddMessageToTxFifoQ(hfdcan_, &tx_header, data);
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f107 0114 	add.w	r1, r7, #20
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f009 fc74 	bl	800a68c <HAL_FDCAN_AddMessageToTxFifoQ>
 8000da4:	4603      	mov	r3, r0
  }
 8000da6:	4618      	mov	r0, r3
 8000da8:	3738      	adds	r7, #56	; 0x38
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
	...

08000db0 <_ZN18tutrc_harurobo_lib3CAN15set_rx_callbackEOSt8functionIFvmPhjEE>:

  void
  set_rx_callback(std::function<void(uint32_t, uint8_t *, size_t)> &&callback) {
 8000db0:	b590      	push	{r4, r7, lr}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	6039      	str	r1, [r7, #0]
    rx_callbacks_[hfdcan_] = std::move(callback);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4808      	ldr	r0, [pc, #32]	; (8000de0 <_ZN18tutrc_harurobo_lib3CAN15set_rx_callbackEOSt8functionIFvmPhjEE+0x30>)
 8000dc0:	f000 ff1f 	bl	8001c02 <_ZNSt13unordered_mapIP19FDCAN_HandleTypeDefSt8functionIFvmPhjEESt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_S5_EEEixERSB_>
 8000dc4:	4604      	mov	r4, r0
 8000dc6:	6838      	ldr	r0, [r7, #0]
 8000dc8:	f000 ff2a 	bl	8001c20 <_ZSt4moveIRSt8functionIFvmPhjEEEONSt16remove_referenceIT_E4typeEOS6_>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4620      	mov	r0, r4
 8000dd2:	f000 ff30 	bl	8001c36 <_ZNSt8functionIFvmPhjEEaSEOS2_>
  }
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd90      	pop	{r4, r7, pc}
 8000dde:	bf00      	nop
 8000de0:	24000990 	.word	0x24000990

08000de4 <_ZN18tutrc_harurobo_lib3PS3C1EP20__UART_HandleTypeDef>:
    R2,
    START,
    SELECT,
  };

  PS3(UART_HandleTypeDef *huart) : huart_(huart) {
 8000de4:	b5b0      	push	{r4, r5, r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	6039      	str	r1, [r7, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	683a      	ldr	r2, [r7, #0]
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	3304      	adds	r3, #4
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	330c      	adds	r3, #12
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]
 8000e0a:	60da      	str	r2, [r3, #12]
    HAL_UART_Receive_DMA(huart_, buf_.data(), buf_.size());
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681c      	ldr	r4, [r3, #0]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3304      	adds	r3, #4
 8000e14:	4618      	mov	r0, r3
 8000e16:	f000 ff2d 	bl	8001c74 <_ZNSt5arrayIhLj8EE4dataEv>
 8000e1a:	4605      	mov	r5, r0
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3304      	adds	r3, #4
 8000e20:	4618      	mov	r0, r3
 8000e22:	f000 ff34 	bl	8001c8e <_ZNKSt5arrayIhLj8EE4sizeEv>
 8000e26:	4603      	mov	r3, r0
 8000e28:	b29b      	uxth	r3, r3
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	4629      	mov	r1, r5
 8000e2e:	4620      	mov	r0, r4
 8000e30:	f00e f8f8 	bl	800f024 <HAL_UART_Receive_DMA>
  }
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	4618      	mov	r0, r3
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000e40 <_ZN18tutrc_harurobo_lib3PS36updateEv>:

  void update() {
 8000e40:	b590      	push	{r4, r7, lr}
 8000e42:	ed2d 8b02 	vpush	{d8}
 8000e46:	b087      	sub	sp, #28
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
    uint8_t checksum = 0;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	75fb      	strb	r3, [r7, #23]

    for (size_t i = 0; i < 8; ++i) {
 8000e50:	2300      	movs	r3, #0
 8000e52:	613b      	str	r3, [r7, #16]
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	2b07      	cmp	r3, #7
 8000e58:	f200 80b6 	bhi.w	8000fc8 <_ZN18tutrc_harurobo_lib3PS36updateEv+0x188>
      if (buf_[i] == 0x80) {
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	3304      	adds	r3, #4
 8000e60:	6939      	ldr	r1, [r7, #16]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f000 ff1e 	bl	8001ca4 <_ZNSt5arrayIhLj8EEixEj>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	2b80      	cmp	r3, #128	; 0x80
 8000e6e:	bf0c      	ite	eq
 8000e70:	2301      	moveq	r3, #1
 8000e72:	2300      	movne	r3, #0
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	f000 80a1 	beq.w	8000fbe <_ZN18tutrc_harurobo_lib3PS36updateEv+0x17e>
        for (size_t j = 1; j < 7; ++j) {
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	2b06      	cmp	r3, #6
 8000e84:	d812      	bhi.n	8000eac <_ZN18tutrc_harurobo_lib3PS36updateEv+0x6c>
          checksum += buf_[(i + j) % 8];
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	1d18      	adds	r0, r3, #4
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	4413      	add	r3, r2
 8000e90:	f003 0307 	and.w	r3, r3, #7
 8000e94:	4619      	mov	r1, r3
 8000e96:	f000 ff05 	bl	8001ca4 <_ZNSt5arrayIhLj8EEixEj>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	781a      	ldrb	r2, [r3, #0]
 8000e9e:	7dfb      	ldrb	r3, [r7, #23]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	75fb      	strb	r3, [r7, #23]
        for (size_t j = 1; j < 7; ++j) {
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	e7e9      	b.n	8000e80 <_ZN18tutrc_harurobo_lib3PS36updateEv+0x40>
        }
        if ((checksum & 0x7F) == buf_[(i + 7) % 8]) {
 8000eac:	7dfb      	ldrb	r3, [r7, #23]
 8000eae:	f003 047f 	and.w	r4, r3, #127	; 0x7f
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	1d1a      	adds	r2, r3, #4
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	3307      	adds	r3, #7
 8000eba:	f003 0307 	and.w	r3, r3, #7
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	f000 feef 	bl	8001ca4 <_ZNSt5arrayIhLj8EEixEj>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	429c      	cmp	r4, r3
 8000ecc:	bf0c      	ite	eq
 8000ece:	2301      	moveq	r3, #1
 8000ed0:	2300      	movne	r3, #0
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d076      	beq.n	8000fc6 <_ZN18tutrc_harurobo_lib3PS36updateEv+0x186>
          keys_ = (buf_[(i + 1) % 8] << 8) | buf_[(i + 2) % 8];
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	1d1a      	adds	r2, r3, #4
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	f003 0307 	and.w	r3, r3, #7
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4610      	mov	r0, r2
 8000ee8:	f000 fedc 	bl	8001ca4 <_ZNSt5arrayIhLj8EEixEj>
 8000eec:	4603      	mov	r3, r0
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	021b      	lsls	r3, r3, #8
 8000ef2:	b21c      	sxth	r4, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	1d1a      	adds	r2, r3, #4
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	3302      	adds	r3, #2
 8000efc:	f003 0307 	and.w	r3, r3, #7
 8000f00:	4619      	mov	r1, r3
 8000f02:	4610      	mov	r0, r2
 8000f04:	f000 fece 	bl	8001ca4 <_ZNSt5arrayIhLj8EEixEj>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	b21b      	sxth	r3, r3
 8000f0e:	4323      	orrs	r3, r4
 8000f10:	b21b      	sxth	r3, r3
 8000f12:	b29a      	uxth	r2, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	839a      	strh	r2, [r3, #28]
          if ((keys_ & 0x03) == 0x03) {
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	8b9b      	ldrh	r3, [r3, #28]
 8000f1c:	f003 0303 	and.w	r3, r3, #3
 8000f20:	2b03      	cmp	r3, #3
 8000f22:	d10d      	bne.n	8000f40 <_ZN18tutrc_harurobo_lib3PS36updateEv+0x100>
            keys_ &= ~0x03;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	8b9b      	ldrh	r3, [r3, #28]
 8000f28:	f023 0303 	bic.w	r3, r3, #3
 8000f2c:	b29a      	uxth	r2, r3
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	839a      	strh	r2, [r3, #28]
            keys_ |= 1 << 13;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	8b9b      	ldrh	r3, [r3, #28]
 8000f36:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	839a      	strh	r2, [r3, #28]
          }
          if ((keys_ & 0x0C) == 0x0C) {
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	8b9b      	ldrh	r3, [r3, #28]
 8000f44:	f003 030c 	and.w	r3, r3, #12
 8000f48:	2b0c      	cmp	r3, #12
 8000f4a:	d10d      	bne.n	8000f68 <_ZN18tutrc_harurobo_lib3PS36updateEv+0x128>
            keys_ &= ~0x0C;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	8b9b      	ldrh	r3, [r3, #28]
 8000f50:	f023 030c 	bic.w	r3, r3, #12
 8000f54:	b29a      	uxth	r2, r3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	839a      	strh	r2, [r3, #28]
            keys_ |= 1 << 14;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	8b9b      	ldrh	r3, [r3, #28]
 8000f5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f62:	b29a      	uxth	r2, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	839a      	strh	r2, [r3, #28]
          }

          for (size_t j = 0; j < 4; ++j) {
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	2b03      	cmp	r3, #3
 8000f70:	d829      	bhi.n	8000fc6 <_ZN18tutrc_harurobo_lib3PS36updateEv+0x186>
            axes_[j] = ((float)buf_[(i + j + 3) % 8] - 64) / 64;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	1d18      	adds	r0, r3, #4
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	3303      	adds	r3, #3
 8000f7e:	f003 0307 	and.w	r3, r3, #7
 8000f82:	4619      	mov	r1, r3
 8000f84:	f000 fe8e 	bl	8001ca4 <_ZNSt5arrayIhLj8EEixEj>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	ee07 3a90 	vmov	s15, r3
 8000f90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f94:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000fd4 <_ZN18tutrc_harurobo_lib3PS36updateEv+0x194>
 8000f98:	ee37 8ac7 	vsub.f32	s16, s15, s14
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	330c      	adds	r3, #12
 8000fa0:	68b9      	ldr	r1, [r7, #8]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f000 fe8d 	bl	8001cc2 <_ZNSt5arrayIfLj4EEixEj>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8000fd4 <_ZN18tutrc_harurobo_lib3PS36updateEv+0x194>
 8000fae:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8000fb2:	edc3 7a00 	vstr	s15, [r3]
          for (size_t j = 0; j < 4; ++j) {
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	60bb      	str	r3, [r7, #8]
 8000fbc:	e7d6      	b.n	8000f6c <_ZN18tutrc_harurobo_lib3PS36updateEv+0x12c>
    for (size_t i = 0; i < 8; ++i) {
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	613b      	str	r3, [r7, #16]
 8000fc4:	e746      	b.n	8000e54 <_ZN18tutrc_harurobo_lib3PS36updateEv+0x14>
          }
        }
        return;
 8000fc6:	bf00      	nop
      }
    }
  }
 8000fc8:	371c      	adds	r7, #28
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	ecbd 8b02 	vpop	{d8}
 8000fd0:	bd90      	pop	{r4, r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	42800000 	.word	0x42800000

08000fd8 <_ZN18tutrc_harurobo_lib13to_underlyingINS_3PS34AxisEEENSt15underlying_typeIT_E4typeES4_>:
#include <string>
#include <type_traits>

namespace tutrc_harurobo_lib {

template <class T> constexpr std::underlying_type_t<T> to_underlying(T value) {
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  return static_cast<std::underlying_type_t<T>>(value);
 8000fe0:	687b      	ldr	r3, [r7, #4]
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <_ZN18tutrc_harurobo_lib3PS38get_axisENS0_4AxisE>:

  float get_axis(Axis axis) { return axes_[to_underlying(axis)]; }
 8000fee:	b590      	push	{r4, r7, lr}
 8000ff0:	b083      	sub	sp, #12
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
 8000ff6:	6039      	str	r1, [r7, #0]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f103 040c 	add.w	r4, r3, #12
 8000ffe:	6838      	ldr	r0, [r7, #0]
 8001000:	f7ff ffea 	bl	8000fd8 <_ZN18tutrc_harurobo_lib13to_underlyingINS_3PS34AxisEEENSt15underlying_typeIT_E4typeES4_>
 8001004:	4603      	mov	r3, r0
 8001006:	4619      	mov	r1, r3
 8001008:	4620      	mov	r0, r4
 800100a:	f000 fe5a 	bl	8001cc2 <_ZNSt5arrayIfLj4EEixEj>
 800100e:	4603      	mov	r3, r0
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	ee07 3a90 	vmov	s15, r3
 8001016:	eeb0 0a67 	vmov.f32	s0, s15
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	bd90      	pop	{r4, r7, pc}

08001020 <_ZN18tutrc_harurobo_lib3PS37get_keyENS0_3KeyE>:

  bool get_key(Key key) { return (keys_ & (1 << to_underlying(key))) != 0; }
 8001020:	b590      	push	{r4, r7, lr}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	8b9b      	ldrh	r3, [r3, #28]
 800102e:	461c      	mov	r4, r3
 8001030:	6838      	ldr	r0, [r7, #0]
 8001032:	f000 fe55 	bl	8001ce0 <_ZN18tutrc_harurobo_lib13to_underlyingINS_3PS33KeyEEENSt15underlying_typeIT_E4typeES4_>
 8001036:	4603      	mov	r3, r0
 8001038:	fa44 f303 	asr.w	r3, r4, r3
 800103c:	f003 0301 	and.w	r3, r3, #1
 8001040:	2b00      	cmp	r3, #0
 8001042:	bf14      	ite	ne
 8001044:	2301      	movne	r3, #1
 8001046:	2300      	moveq	r3, #0
 8001048:	b2db      	uxtb	r3, r3
 800104a:	4618      	mov	r0, r3
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	bd90      	pop	{r4, r7, pc}

08001052 <_ZZN18tutrc_harurobo_lib4C610C4ERNS_3CANEENKUlmPhjE_clEmS3_j>:
    ID7,
    ID8,
  };

  C610(CAN &can) : can_(can) {
    can_.set_rx_callback([this](uint32_t id, uint8_t *data, size_t size) {
 8001052:	b5b0      	push	{r4, r5, r7, lr}
 8001054:	b086      	sub	sp, #24
 8001056:	af00      	add	r7, sp, #0
 8001058:	60f8      	str	r0, [r7, #12]
 800105a:	60b9      	str	r1, [r7, #8]
 800105c:	607a      	str	r2, [r7, #4]
 800105e:	603b      	str	r3, [r7, #0]
      for (size_t i = 0; i < 8; ++i) {
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	2b07      	cmp	r3, #7
 8001068:	d820      	bhi.n	80010ac <_ZZN18tutrc_harurobo_lib4C610C4ERNS_3CANEENKUlmPhjE_clEmS3_j+0x5a>
        if (id == 0x201 + i) {
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	f203 2301 	addw	r3, r3, #513	; 0x201
 8001070:	68ba      	ldr	r2, [r7, #8]
 8001072:	429a      	cmp	r2, r3
 8001074:	d116      	bne.n	80010a4 <_ZZN18tutrc_harurobo_lib4C610C4ERNS_3CANEENKUlmPhjE_clEmS3_j+0x52>
          rpm_[i] = static_cast<int16_t>(data[2] << 8 | data[3]);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	3302      	adds	r3, #2
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	021b      	lsls	r3, r3, #8
 800107e:	b21d      	sxth	r5, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3303      	adds	r3, #3
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	b21c      	sxth	r4, r3
    can_.set_rx_callback([this](uint32_t id, uint8_t *data, size_t size) {
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	681b      	ldr	r3, [r3, #0]
          rpm_[i] = static_cast<int16_t>(data[2] << 8 | data[3]);
 800108c:	3304      	adds	r3, #4
 800108e:	6979      	ldr	r1, [r7, #20]
 8001090:	4618      	mov	r0, r3
 8001092:	f000 fe30 	bl	8001cf6 <_ZNSt5arrayIsLj8EEixEj>
 8001096:	4603      	mov	r3, r0
 8001098:	ea45 0204 	orr.w	r2, r5, r4
 800109c:	b212      	sxth	r2, r2
 800109e:	801a      	strh	r2, [r3, #0]
          break;
 80010a0:	bf00      	nop
        }
      }
    });
 80010a2:	e003      	b.n	80010ac <_ZZN18tutrc_harurobo_lib4C610C4ERNS_3CANEENKUlmPhjE_clEmS3_j+0x5a>
      for (size_t i = 0; i < 8; ++i) {
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	3301      	adds	r3, #1
 80010a8:	617b      	str	r3, [r7, #20]
 80010aa:	e7db      	b.n	8001064 <_ZZN18tutrc_harurobo_lib4C610C4ERNS_3CANEENKUlmPhjE_clEmS3_j+0x12>
    });
 80010ac:	bf00      	nop
 80010ae:	3718      	adds	r7, #24
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bdb0      	pop	{r4, r5, r7, pc}

080010b4 <_ZNSt8functionIFvmPhjEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff fd8a 	bl	8000bd8 <_ZNSt14_Function_baseD1Ev>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <_ZN18tutrc_harurobo_lib4C610C1ERNS_3CANE>:
  C610(CAN &can) : can_(can) {
 80010ce:	b590      	push	{r4, r7, lr}
 80010d0:	b087      	sub	sp, #28
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
 80010d6:	6039      	str	r1, [r7, #0]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	683a      	ldr	r2, [r7, #0]
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	3304      	adds	r3, #4
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	609a      	str	r2, [r3, #8]
 80010ea:	60da      	str	r2, [r3, #12]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3314      	adds	r3, #20
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
    can_.set_rx_callback([this](uint32_t id, uint8_t *data, size_t size) {
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681c      	ldr	r4, [r3, #0]
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	f107 0308 	add.w	r3, r7, #8
 8001104:	4611      	mov	r1, r2
 8001106:	4618      	mov	r0, r3
 8001108:	f000 fe04 	bl	8001d14 <_ZNSt8functionIFvmPhjEEC1IZN18tutrc_harurobo_lib4C610C4ERNS4_3CANEEUlmS0_jE_vvEET_>
 800110c:	f107 0308 	add.w	r3, r7, #8
 8001110:	4619      	mov	r1, r3
 8001112:	4620      	mov	r0, r4
 8001114:	f7ff fe4c 	bl	8000db0 <_ZN18tutrc_harurobo_lib3CAN15set_rx_callbackEOSt8functionIFvmPhjEE>
 8001118:	f107 0308 	add.w	r3, r7, #8
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ffc9 	bl	80010b4 <_ZNSt8functionIFvmPhjEED1Ev>
  }
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4618      	mov	r0, r3
 8001126:	371c      	adds	r7, #28
 8001128:	46bd      	mov	sp, r7
 800112a:	bd90      	pop	{r4, r7, pc}

0800112c <_ZN18tutrc_harurobo_lib13to_underlyingINS_4C6102IDEEENSt15underlying_typeIT_E4typeES4_>:
template <class T> constexpr std::underlying_type_t<T> to_underlying(T value) {
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  return static_cast<std::underlying_type_t<T>>(value);
 8001134:	687b      	ldr	r3, [r7, #4]
}
 8001136:	4618      	mov	r0, r3
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <_ZN18tutrc_harurobo_lib4C6107get_rpmENS0_2IDE>:

  int16_t get_rpm(ID id) { return rpm_[to_underlying(id)]; }
 8001142:	b590      	push	{r4, r7, lr}
 8001144:	b083      	sub	sp, #12
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
 800114a:	6039      	str	r1, [r7, #0]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	1d1c      	adds	r4, r3, #4
 8001150:	6838      	ldr	r0, [r7, #0]
 8001152:	f7ff ffeb 	bl	800112c <_ZN18tutrc_harurobo_lib13to_underlyingINS_4C6102IDEEENSt15underlying_typeIT_E4typeES4_>
 8001156:	4603      	mov	r3, r0
 8001158:	4619      	mov	r1, r3
 800115a:	4620      	mov	r0, r4
 800115c:	f000 fdcb 	bl	8001cf6 <_ZNSt5arrayIsLj8EEixEj>
 8001160:	4603      	mov	r3, r0
 8001162:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001166:	4618      	mov	r0, r3
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	bd90      	pop	{r4, r7, pc}
	...

08001170 <_ZN18tutrc_harurobo_lib4C6107get_rpsENS0_2IDE>:

  float get_rps(ID id) { return get_rpm(id) / 60.0f; }
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
 800117a:	6839      	ldr	r1, [r7, #0]
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff ffe0 	bl	8001142 <_ZN18tutrc_harurobo_lib4C6107get_rpmENS0_2IDE>
 8001182:	4603      	mov	r3, r0
 8001184:	ee07 3a90 	vmov	s15, r3
 8001188:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800118c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80011a4 <_ZN18tutrc_harurobo_lib4C6107get_rpsENS0_2IDE+0x34>
 8001190:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001194:	eef0 7a66 	vmov.f32	s15, s13
 8001198:	eeb0 0a67 	vmov.f32	s0, s15
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	42700000 	.word	0x42700000

080011a8 <_ZN18tutrc_harurobo_lib4C61011set_currentENS0_2IDEs>:

  // -10000 ~ 10000 mA の間で指定
  void set_current(ID id, int16_t current) {
 80011a8:	b590      	push	{r4, r7, lr}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	4613      	mov	r3, r2
 80011b4:	80fb      	strh	r3, [r7, #6]
    current_[to_underlying(id)] = current;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	f103 0414 	add.w	r4, r3, #20
 80011bc:	68b8      	ldr	r0, [r7, #8]
 80011be:	f7ff ffb5 	bl	800112c <_ZN18tutrc_harurobo_lib13to_underlyingINS_4C6102IDEEENSt15underlying_typeIT_E4typeES4_>
 80011c2:	4603      	mov	r3, r0
 80011c4:	4619      	mov	r1, r3
 80011c6:	4620      	mov	r0, r4
 80011c8:	f000 fd95 	bl	8001cf6 <_ZNSt5arrayIsLj8EEixEj>
 80011cc:	4602      	mov	r2, r0
 80011ce:	88fb      	ldrh	r3, [r7, #6]
 80011d0:	8013      	strh	r3, [r2, #0]
  }
 80011d2:	bf00      	nop
 80011d4:	3714      	adds	r7, #20
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd90      	pop	{r4, r7, pc}

080011da <_ZN18tutrc_harurobo_lib4C6108transmitEv>:

  void transmit() {
 80011da:	b5b0      	push	{r4, r5, r7, lr}
 80011dc:	b086      	sub	sp, #24
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
    std::array<uint8_t, 8> data;
    for (size_t i = 0; i < 4; ++i) {
 80011e2:	2300      	movs	r3, #0
 80011e4:	617b      	str	r3, [r7, #20]
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	2b03      	cmp	r3, #3
 80011ea:	d82e      	bhi.n	800124a <_ZN18tutrc_harurobo_lib4C6108transmitEv+0x70>
      data[i * 2] = current_[i] >> 8;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3314      	adds	r3, #20
 80011f0:	6979      	ldr	r1, [r7, #20]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 fd7f 	bl	8001cf6 <_ZNSt5arrayIsLj8EEixEj>
 80011f8:	4603      	mov	r3, r0
 80011fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011fe:	121b      	asrs	r3, r3, #8
 8001200:	b21c      	sxth	r4, r3
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	005a      	lsls	r2, r3, #1
 8001206:	f107 0308 	add.w	r3, r7, #8
 800120a:	4611      	mov	r1, r2
 800120c:	4618      	mov	r0, r3
 800120e:	f000 fd49 	bl	8001ca4 <_ZNSt5arrayIhLj8EEixEj>
 8001212:	4603      	mov	r3, r0
 8001214:	b2e2      	uxtb	r2, r4
 8001216:	701a      	strb	r2, [r3, #0]
      data[i * 2 + 1] = current_[i];
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3314      	adds	r3, #20
 800121c:	6979      	ldr	r1, [r7, #20]
 800121e:	4618      	mov	r0, r3
 8001220:	f000 fd69 	bl	8001cf6 <_ZNSt5arrayIsLj8EEixEj>
 8001224:	4603      	mov	r3, r0
 8001226:	f9b3 4000 	ldrsh.w	r4, [r3]
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	1c5a      	adds	r2, r3, #1
 8001230:	f107 0308 	add.w	r3, r7, #8
 8001234:	4611      	mov	r1, r2
 8001236:	4618      	mov	r0, r3
 8001238:	f000 fd34 	bl	8001ca4 <_ZNSt5arrayIhLj8EEixEj>
 800123c:	4603      	mov	r3, r0
 800123e:	b2e2      	uxtb	r2, r4
 8001240:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < 4; ++i) {
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	3301      	adds	r3, #1
 8001246:	617b      	str	r3, [r7, #20]
 8001248:	e7cd      	b.n	80011e6 <_ZN18tutrc_harurobo_lib4C6108transmitEv+0xc>
    }
    can_.transmit(0x200, data.data(), data.size());
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681c      	ldr	r4, [r3, #0]
 800124e:	f107 0308 	add.w	r3, r7, #8
 8001252:	4618      	mov	r0, r3
 8001254:	f000 fd0e 	bl	8001c74 <_ZNSt5arrayIhLj8EE4dataEv>
 8001258:	4605      	mov	r5, r0
 800125a:	f107 0308 	add.w	r3, r7, #8
 800125e:	4618      	mov	r0, r3
 8001260:	f000 fd15 	bl	8001c8e <_ZNKSt5arrayIhLj8EE4sizeEv>
 8001264:	4603      	mov	r3, r0
 8001266:	462a      	mov	r2, r5
 8001268:	f44f 7100 	mov.w	r1, #512	; 0x200
 800126c:	4620      	mov	r0, r4
 800126e:	f7ff fd74 	bl	8000d5a <_ZN18tutrc_harurobo_lib3CAN8transmitEmPhj>
    for (size_t i = 0; i < 4; ++i) {
 8001272:	2300      	movs	r3, #0
 8001274:	613b      	str	r3, [r7, #16]
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	2b03      	cmp	r3, #3
 800127a:	d834      	bhi.n	80012e6 <_ZN18tutrc_harurobo_lib4C6108transmitEv+0x10c>
      data[i * 2] = current_[i + 4] >> 8;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f103 0214 	add.w	r2, r3, #20
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	3304      	adds	r3, #4
 8001286:	4619      	mov	r1, r3
 8001288:	4610      	mov	r0, r2
 800128a:	f000 fd34 	bl	8001cf6 <_ZNSt5arrayIsLj8EEixEj>
 800128e:	4603      	mov	r3, r0
 8001290:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001294:	121b      	asrs	r3, r3, #8
 8001296:	b21c      	sxth	r4, r3
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	005a      	lsls	r2, r3, #1
 800129c:	f107 0308 	add.w	r3, r7, #8
 80012a0:	4611      	mov	r1, r2
 80012a2:	4618      	mov	r0, r3
 80012a4:	f000 fcfe 	bl	8001ca4 <_ZNSt5arrayIhLj8EEixEj>
 80012a8:	4603      	mov	r3, r0
 80012aa:	b2e2      	uxtb	r2, r4
 80012ac:	701a      	strb	r2, [r3, #0]
      data[i * 2 + 1] = current_[i + 4];
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f103 0214 	add.w	r2, r3, #20
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	3304      	adds	r3, #4
 80012b8:	4619      	mov	r1, r3
 80012ba:	4610      	mov	r0, r2
 80012bc:	f000 fd1b 	bl	8001cf6 <_ZNSt5arrayIsLj8EEixEj>
 80012c0:	4603      	mov	r3, r0
 80012c2:	f9b3 4000 	ldrsh.w	r4, [r3]
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	1c5a      	adds	r2, r3, #1
 80012cc:	f107 0308 	add.w	r3, r7, #8
 80012d0:	4611      	mov	r1, r2
 80012d2:	4618      	mov	r0, r3
 80012d4:	f000 fce6 	bl	8001ca4 <_ZNSt5arrayIhLj8EEixEj>
 80012d8:	4603      	mov	r3, r0
 80012da:	b2e2      	uxtb	r2, r4
 80012dc:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < 4; ++i) {
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	3301      	adds	r3, #1
 80012e2:	613b      	str	r3, [r7, #16]
 80012e4:	e7c7      	b.n	8001276 <_ZN18tutrc_harurobo_lib4C6108transmitEv+0x9c>
    }
    can_.transmit(0x1FF, data.data(), data.size());
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681c      	ldr	r4, [r3, #0]
 80012ea:	f107 0308 	add.w	r3, r7, #8
 80012ee:	4618      	mov	r0, r3
 80012f0:	f000 fcc0 	bl	8001c74 <_ZNSt5arrayIhLj8EE4dataEv>
 80012f4:	4605      	mov	r5, r0
 80012f6:	f107 0308 	add.w	r3, r7, #8
 80012fa:	4618      	mov	r0, r3
 80012fc:	f000 fcc7 	bl	8001c8e <_ZNKSt5arrayIhLj8EE4sizeEv>
 8001300:	4603      	mov	r3, r0
 8001302:	462a      	mov	r2, r5
 8001304:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001308:	4620      	mov	r0, r4
 800130a:	f7ff fd26 	bl	8000d5a <_ZN18tutrc_harurobo_lib3CAN8transmitEmPhj>
  }
 800130e:	bf00      	nop
 8001310:	3718      	adds	r7, #24
 8001312:	46bd      	mov	sp, r7
 8001314:	bdb0      	pop	{r4, r5, r7, pc}

08001316 <_ZN18tutrc_harurobo_lib5TimerC1EP17TIM_HandleTypeDef>:

namespace tutrc_harurobo_lib {

class Timer {
public:
  Timer(TIM_HandleTypeDef *htim) : htim_(htim) { HAL_TIM_Base_Start_IT(htim_); }
 8001316:	b580      	push	{r7, lr}
 8001318:	b082      	sub	sp, #8
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
 800131e:	6039      	str	r1, [r7, #0]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	683a      	ldr	r2, [r7, #0]
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4618      	mov	r0, r3
 800132c:	f00c ff9e 	bl	800e26c <HAL_TIM_Base_Start_IT>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4618      	mov	r0, r3
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
	...

0800133c <_ZN18tutrc_harurobo_lib5Timer18set_timer_callbackEOSt8functionIFvvEE>:

  uint32_t get_counter() { return __HAL_TIM_GET_COUNTER(htim_); }

  void set_counter(uint32_t counter) { __HAL_TIM_SET_COUNTER(htim_, counter); }

  void set_timer_callback(std::function<void()> &&callback) {
 800133c:	b590      	push	{r4, r7, lr}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	6039      	str	r1, [r7, #0]
    timer_callbacks_[htim_] = std::move(callback);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4619      	mov	r1, r3
 800134a:	4808      	ldr	r0, [pc, #32]	; (800136c <_ZN18tutrc_harurobo_lib5Timer18set_timer_callbackEOSt8functionIFvvEE+0x30>)
 800134c:	f000 fd0c 	bl	8001d68 <_ZNSt13unordered_mapIP17TIM_HandleTypeDefSt8functionIFvvEESt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_S4_EEEixERSA_>
 8001350:	4604      	mov	r4, r0
 8001352:	6838      	ldr	r0, [r7, #0]
 8001354:	f000 fd17 	bl	8001d86 <_ZSt4moveIRSt8functionIFvvEEEONSt16remove_referenceIT_E4typeEOS5_>
 8001358:	4603      	mov	r3, r0
 800135a:	4619      	mov	r1, r3
 800135c:	4620      	mov	r0, r4
 800135e:	f000 fd1d 	bl	8001d9c <_ZNSt8functionIFvvEEaSEOS1_>
  }
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	bd90      	pop	{r4, r7, pc}
 800136a:	bf00      	nop
 800136c:	240009c8 	.word	0x240009c8

08001370 <_ZN18tutrc_harurobo_lib7EncoderC1EP17TIM_HandleTypeDeftf>:

namespace tutrc_harurobo_lib {

class Encoder {
public:
  Encoder(TIM_HandleTypeDef *htim, uint16_t ppr, float period)
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	4613      	mov	r3, r2
 800137c:	ed87 0a00 	vstr	s0, [r7]
 8001380:	80fb      	strh	r3, [r7, #6]
      : htim_(htim), ppr_(ppr), period_(period) {
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	68ba      	ldr	r2, [r7, #8]
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	88fa      	ldrh	r2, [r7, #6]
 800138c:	809a      	strh	r2, [r3, #4]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	683a      	ldr	r2, [r7, #0]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	68f9      	ldr	r1, [r7, #12]
 8001396:	f04f 0200 	mov.w	r2, #0
 800139a:	f04f 0300 	mov.w	r3, #0
 800139e:	e9c1 2304 	strd	r2, r3, [r1, #16]
    HAL_TIM_Encoder_Start(htim_, TIM_CHANNEL_ALL);
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	213c      	movs	r1, #60	; 0x3c
 80013a8:	4618      	mov	r0, r3
 80013aa:	f00d f87d 	bl	800e4a8 <HAL_TIM_Encoder_Start>
  }
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	4618      	mov	r0, r3
 80013b2:	3710      	adds	r7, #16
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <_ZN18tutrc_harurobo_lib7Encoder6updateEv>:

  void update() {
 80013b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013bc:	b084      	sub	sp, #16
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
    int16_t delta = __HAL_TIM_GET_COUNTER(htim_);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ca:	81fb      	strh	r3, [r7, #14]
    __HAL_TIM_SET_COUNTER(htim_, 0);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2200      	movs	r2, #0
 80013d4:	625a      	str	r2, [r3, #36]	; 0x24

    float cpr = ppr_ * 4;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	889b      	ldrh	r3, [r3, #4]
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	ee07 3a90 	vmov	s15, r3
 80013e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013e4:	edc7 7a02 	vstr	s15, [r7, #8]
    count_ += delta;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80013ee:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80013f2:	17c8      	asrs	r0, r1, #31
 80013f4:	460c      	mov	r4, r1
 80013f6:	4605      	mov	r5, r0
 80013f8:	eb12 0804 	adds.w	r8, r2, r4
 80013fc:	eb43 0905 	adc.w	r9, r3, r5
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	e9c3 8904 	strd	r8, r9, [r3, #16]
    rps_ = delta / period_ / cpr;
 8001406:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800140a:	ee07 3a90 	vmov	s15, r3
 800140e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	edd3 7a02 	vldr	s15, [r3, #8]
 8001418:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800141c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001420:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	edc3 7a06 	vstr	s15, [r3, #24]
    position_ = count_ / cpr;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001430:	4610      	mov	r0, r2
 8001432:	4619      	mov	r1, r3
 8001434:	f7ff f87c 	bl	8000530 <__aeabi_l2f>
 8001438:	ee06 0a90 	vmov	s13, r0
 800143c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001440:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	edc3 7a07 	vstr	s15, [r3, #28]
  }
 800144a:	bf00      	nop
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001454 <_ZN18tutrc_harurobo_lib6BNO055C1ERNS_4UARTE>:

namespace tutrc_harurobo_lib {

class BNO055 {
public:
  BNO055(UART &uart) : uart_(uart) {
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	683a      	ldr	r2, [r7, #0]
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3304      	adds	r3, #4
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	809a      	strh	r2, [r3, #4]
    int start = HAL_GetTick();
 800146e:	f005 fed9 	bl	8007224 <HAL_GetTick>
 8001472:	4603      	mov	r3, r0
 8001474:	60fb      	str	r3, [r7, #12]
    while (HAL_GetTick() - start < 500) {
 8001476:	f005 fed5 	bl	8007224 <HAL_GetTick>
 800147a:	4602      	mov	r2, r0
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001484:	4293      	cmp	r3, r2
 8001486:	bf94      	ite	ls
 8001488:	2301      	movls	r3, #1
 800148a:	2300      	movhi	r3, #0
 800148c:	b2db      	uxtb	r3, r3
 800148e:	2b00      	cmp	r3, #0
 8001490:	d009      	beq.n	80014a6 <_ZN18tutrc_harurobo_lib6BNO055C1ERNS_4UARTE+0x52>
    	uint8_t data = 0x08;
 8001492:	2308      	movs	r3, #8
 8001494:	72fb      	strb	r3, [r7, #11]
      write(0x3D, &data, 1);
 8001496:	f107 020b 	add.w	r2, r7, #11
 800149a:	2301      	movs	r3, #1
 800149c:	213d      	movs	r1, #61	; 0x3d
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f000 f831 	bl	8001506 <_ZN18tutrc_harurobo_lib6BNO0555writeEhPhj>
    while (HAL_GetTick() - start < 500) {
 80014a4:	e7e7      	b.n	8001476 <_ZN18tutrc_harurobo_lib6BNO055C1ERNS_4UARTE+0x22>
    }
  }
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4618      	mov	r0, r3
 80014aa:	3710      	adds	r7, #16
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <_ZN18tutrc_harurobo_lib6BNO0556updateEv>:

  void update() { read(0x1A, reinterpret_cast<uint8_t *>(euler_.data()), 6); }
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3304      	adds	r3, #4
 80014bc:	4618      	mov	r0, r3
 80014be:	f000 fc8c 	bl	8001dda <_ZNSt5arrayIsLj3EE4dataEv>
 80014c2:	4602      	mov	r2, r0
 80014c4:	2306      	movs	r3, #6
 80014c6:	211a      	movs	r1, #26
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f000 f86a 	bl	80015a2 <_ZN18tutrc_harurobo_lib6BNO0554readEhPhj>
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <_ZN18tutrc_harurobo_lib6BNO05511get_euler_xEv>:

  float get_euler_x() { return to_rad(euler_[0]); }
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b082      	sub	sp, #8
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	3304      	adds	r3, #4
 80014e2:	2100      	movs	r1, #0
 80014e4:	4618      	mov	r0, r3
 80014e6:	f000 fc85 	bl	8001df4 <_ZNSt5arrayIsLj3EEixEj>
 80014ea:	4603      	mov	r3, r0
 80014ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014f0:	4619      	mov	r1, r3
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f000 f8c0 	bl	8001678 <_ZN18tutrc_harurobo_lib6BNO0556to_radEs>
 80014f8:	eef0 7a40 	vmov.f32	s15, s0
 80014fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <_ZN18tutrc_harurobo_lib6BNO0555writeEhPhj>:

private:
  UART &uart_;
  std::array<int16_t, 3> euler_ = {};

  bool write(uint8_t addr, uint8_t *data, size_t size) {
 8001506:	b590      	push	{r4, r7, lr}
 8001508:	b087      	sub	sp, #28
 800150a:	af00      	add	r7, sp, #0
 800150c:	60f8      	str	r0, [r7, #12]
 800150e:	607a      	str	r2, [r7, #4]
 8001510:	603b      	str	r3, [r7, #0]
 8001512:	460b      	mov	r3, r1
 8001514:	72fb      	strb	r3, [r7, #11]
    std::array<uint8_t, 4> buf = {0xAA, 0x00, addr, size};
 8001516:	2300      	movs	r3, #0
 8001518:	617b      	str	r3, [r7, #20]
 800151a:	23aa      	movs	r3, #170	; 0xaa
 800151c:	753b      	strb	r3, [r7, #20]
 800151e:	7afb      	ldrb	r3, [r7, #11]
 8001520:	75bb      	strb	r3, [r7, #22]
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	b2db      	uxtb	r3, r3
 8001526:	75fb      	strb	r3, [r7, #23]
    uart_.flush();
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff facd 	bl	8000acc <_ZN18tutrc_harurobo_lib4UART5flushEv>
    uart_.transmit(buf.data(), 4);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681c      	ldr	r4, [r3, #0]
 8001536:	f107 0314 	add.w	r3, r7, #20
 800153a:	4618      	mov	r0, r3
 800153c:	f000 fc69 	bl	8001e12 <_ZNSt5arrayIhLj4EE4dataEv>
 8001540:	4603      	mov	r3, r0
 8001542:	2204      	movs	r2, #4
 8001544:	4619      	mov	r1, r3
 8001546:	4620      	mov	r0, r4
 8001548:	f7ff fadc 	bl	8000b04 <_ZN18tutrc_harurobo_lib4UART8transmitEPhj>
    uart_.transmit(data, size);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	683a      	ldr	r2, [r7, #0]
 8001552:	6879      	ldr	r1, [r7, #4]
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff fad5 	bl	8000b04 <_ZN18tutrc_harurobo_lib4UART8transmitEPhj>
    HAL_Delay(5);
 800155a:	2005      	movs	r0, #5
 800155c:	f005 fe6e 	bl	800723c <HAL_Delay>
    if (uart_.available() < 2) {
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff f9ef 	bl	8000948 <_ZN18tutrc_harurobo_lib4UART9availableEv>
 800156a:	4603      	mov	r3, r0
 800156c:	2b01      	cmp	r3, #1
 800156e:	bf94      	ite	ls
 8001570:	2301      	movls	r3, #1
 8001572:	2300      	movhi	r3, #0
 8001574:	b2db      	uxtb	r3, r3
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <_ZN18tutrc_harurobo_lib6BNO0555writeEhPhj+0x78>
      return false;
 800157a:	2300      	movs	r3, #0
 800157c:	e00d      	b.n	800159a <_ZN18tutrc_harurobo_lib6BNO0555writeEhPhj+0x94>
    }
    uart_.receive(buf.data(), 2);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681c      	ldr	r4, [r3, #0]
 8001582:	f107 0314 	add.w	r3, r7, #20
 8001586:	4618      	mov	r0, r3
 8001588:	f000 fc43 	bl	8001e12 <_ZNSt5arrayIhLj4EE4dataEv>
 800158c:	4603      	mov	r3, r0
 800158e:	2202      	movs	r2, #2
 8001590:	4619      	mov	r1, r3
 8001592:	4620      	mov	r0, r4
 8001594:	f7ff faca 	bl	8000b2c <_ZN18tutrc_harurobo_lib4UART7receiveEPhj>
    return true; // TODO: ステータスチェック
 8001598:	2301      	movs	r3, #1
  }
 800159a:	4618      	mov	r0, r3
 800159c:	371c      	adds	r7, #28
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd90      	pop	{r4, r7, pc}

080015a2 <_ZN18tutrc_harurobo_lib6BNO0554readEhPhj>:

  bool read(uint8_t addr, uint8_t *data, size_t size) {
 80015a2:	b590      	push	{r4, r7, lr}
 80015a4:	b087      	sub	sp, #28
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	60f8      	str	r0, [r7, #12]
 80015aa:	607a      	str	r2, [r7, #4]
 80015ac:	603b      	str	r3, [r7, #0]
 80015ae:	460b      	mov	r3, r1
 80015b0:	72fb      	strb	r3, [r7, #11]
    std::array<uint8_t, 4> buf = {0xAA, 0x01, addr, size};
 80015b2:	2300      	movs	r3, #0
 80015b4:	617b      	str	r3, [r7, #20]
 80015b6:	23aa      	movs	r3, #170	; 0xaa
 80015b8:	753b      	strb	r3, [r7, #20]
 80015ba:	2301      	movs	r3, #1
 80015bc:	757b      	strb	r3, [r7, #21]
 80015be:	7afb      	ldrb	r3, [r7, #11]
 80015c0:	75bb      	strb	r3, [r7, #22]
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	75fb      	strb	r3, [r7, #23]
    uart_.flush();
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff fa7d 	bl	8000acc <_ZN18tutrc_harurobo_lib4UART5flushEv>
    uart_.transmit(buf.data(), 4);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681c      	ldr	r4, [r3, #0]
 80015d6:	f107 0314 	add.w	r3, r7, #20
 80015da:	4618      	mov	r0, r3
 80015dc:	f000 fc19 	bl	8001e12 <_ZNSt5arrayIhLj4EE4dataEv>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2204      	movs	r2, #4
 80015e4:	4619      	mov	r1, r3
 80015e6:	4620      	mov	r0, r4
 80015e8:	f7ff fa8c 	bl	8000b04 <_ZN18tutrc_harurobo_lib4UART8transmitEPhj>
    HAL_Delay(5);
 80015ec:	2005      	movs	r0, #5
 80015ee:	f005 fe25 	bl	800723c <HAL_Delay>
    if (uart_.available() < 2) {
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff f9a6 	bl	8000948 <_ZN18tutrc_harurobo_lib4UART9availableEv>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b01      	cmp	r3, #1
 8001600:	bf94      	ite	ls
 8001602:	2301      	movls	r3, #1
 8001604:	2300      	movhi	r3, #0
 8001606:	b2db      	uxtb	r3, r3
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <_ZN18tutrc_harurobo_lib6BNO0554readEhPhj+0x6e>
      return false;
 800160c:	2300      	movs	r3, #0
 800160e:	e02e      	b.n	800166e <_ZN18tutrc_harurobo_lib6BNO0554readEhPhj+0xcc>
    }
    uart_.receive(buf.data(), 2);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681c      	ldr	r4, [r3, #0]
 8001614:	f107 0314 	add.w	r3, r7, #20
 8001618:	4618      	mov	r0, r3
 800161a:	f000 fbfa 	bl	8001e12 <_ZNSt5arrayIhLj4EE4dataEv>
 800161e:	4603      	mov	r3, r0
 8001620:	2202      	movs	r2, #2
 8001622:	4619      	mov	r1, r3
 8001624:	4620      	mov	r0, r4
 8001626:	f7ff fa81 	bl	8000b2c <_ZN18tutrc_harurobo_lib4UART7receiveEPhj>
    if (buf[0] == 0xEE || uart_.available() < size) {
 800162a:	f107 0314 	add.w	r3, r7, #20
 800162e:	2100      	movs	r1, #0
 8001630:	4618      	mov	r0, r3
 8001632:	f000 fbfb 	bl	8001e2c <_ZNSt5arrayIhLj4EEixEj>
 8001636:	4603      	mov	r3, r0
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	2bee      	cmp	r3, #238	; 0xee
 800163c:	d008      	beq.n	8001650 <_ZN18tutrc_harurobo_lib6BNO0554readEhPhj+0xae>
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff f980 	bl	8000948 <_ZN18tutrc_harurobo_lib4UART9availableEv>
 8001648:	4602      	mov	r2, r0
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	4293      	cmp	r3, r2
 800164e:	d901      	bls.n	8001654 <_ZN18tutrc_harurobo_lib6BNO0554readEhPhj+0xb2>
 8001650:	2301      	movs	r3, #1
 8001652:	e000      	b.n	8001656 <_ZN18tutrc_harurobo_lib6BNO0554readEhPhj+0xb4>
 8001654:	2300      	movs	r3, #0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <_ZN18tutrc_harurobo_lib6BNO0554readEhPhj+0xbc>
      return false;
 800165a:	2300      	movs	r3, #0
 800165c:	e007      	b.n	800166e <_ZN18tutrc_harurobo_lib6BNO0554readEhPhj+0xcc>
    }
    uart_.receive(data, size);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	683a      	ldr	r2, [r7, #0]
 8001664:	6879      	ldr	r1, [r7, #4]
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff fa60 	bl	8000b2c <_ZN18tutrc_harurobo_lib4UART7receiveEPhj>
    return true;
 800166c:	2301      	movs	r3, #1
  }
 800166e:	4618      	mov	r0, r3
 8001670:	371c      	adds	r7, #28
 8001672:	46bd      	mov	sp, r7
 8001674:	bd90      	pop	{r4, r7, pc}
	...

08001678 <_ZN18tutrc_harurobo_lib6BNO0556to_radEs>:

  float to_rad(int16_t x) { return x * 2 * M_PI / (360 * 16); }
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	460b      	mov	r3, r1
 8001682:	807b      	strh	r3, [r7, #2]
 8001684:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	ee07 3a90 	vmov	s15, r3
 800168e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001692:	ed9f 6b09 	vldr	d6, [pc, #36]	; 80016b8 <_ZN18tutrc_harurobo_lib6BNO0556to_radEs+0x40>
 8001696:	ee27 6b06 	vmul.f64	d6, d7, d6
 800169a:	ed9f 5b09 	vldr	d5, [pc, #36]	; 80016c0 <_ZN18tutrc_harurobo_lib6BNO0556to_radEs+0x48>
 800169e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80016a2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80016a6:	eeb0 0a67 	vmov.f32	s0, s15
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	f3af 8000 	nop.w
 80016b8:	54442d18 	.word	0x54442d18
 80016bc:	400921fb 	.word	0x400921fb
 80016c0:	00000000 	.word	0x00000000
 80016c4:	40b68000 	.word	0x40b68000

080016c8 <_Z5clampiii>:
extern TIM_HandleTypeDef htim3;

using namespace std;
using namespace tutrc_harurobo_lib;

int clamp(int x, int a, int b) {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
	return min(max(x, a), b);
 80016d4:	f107 0208 	add.w	r2, r7, #8
 80016d8:	f107 030c 	add.w	r3, r7, #12
 80016dc:	4611      	mov	r1, r2
 80016de:	4618      	mov	r0, r3
 80016e0:	f000 fbb3 	bl	8001e4a <_ZSt3maxIiERKT_S2_S2_>
 80016e4:	4602      	mov	r2, r0
 80016e6:	1d3b      	adds	r3, r7, #4
 80016e8:	4619      	mov	r1, r3
 80016ea:	4610      	mov	r0, r2
 80016ec:	f000 fbc1 	bl	8001e72 <_ZSt3minIiERKT_S2_S2_>
 80016f0:	4603      	mov	r3, r0
 80016f2:	681b      	ldr	r3, [r3, #0]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3710      	adds	r7, #16
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	0000      	movs	r0, r0
	...

08001700 <_ZZ7cppmainENKUlvE_clEv>:
	Timer timer(&htim5);
	BNO055 bno(uart3);

	Encoder enc(&htim3, 2048, 0.01);

	timer.set_timer_callback([&]() {
 8001700:	b580      	push	{r7, lr}
 8001702:	ed2d 8b02 	vpush	{d8}
 8001706:	b09c      	sub	sp, #112	; 0x70
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
		ps3.update();
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff fb95 	bl	8000e40 <_ZN18tutrc_harurobo_lib3PS36updateEv>
		enc.update();
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff fe4c 	bl	80013b8 <_ZN18tutrc_harurobo_lib7Encoder6updateEv>
		ps3.update();
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]

		double vx = ps3.get_axis(PS3::Axis::LEFT_X);
 8001724:	2100      	movs	r1, #0
 8001726:	4618      	mov	r0, r3
 8001728:	f7ff fc61 	bl	8000fee <_ZN18tutrc_harurobo_lib3PS38get_axisENS0_4AxisE>
 800172c:	eef0 7a40 	vmov.f32	s15, s0
 8001730:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001734:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
		ps3.update();
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
		double vy = -ps3.get_axis(PS3::Axis::LEFT_Y);
 800173c:	2101      	movs	r1, #1
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff fc55 	bl	8000fee <_ZN18tutrc_harurobo_lib3PS38get_axisENS0_4AxisE>
 8001744:	eef0 7a40 	vmov.f32	s15, s0
 8001748:	eef1 7a67 	vneg.f32	s15, s15
 800174c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001750:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48

		double R = -bno.get_euler_x() - M_PI * 1 / 3;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff febc 	bl	80014d6 <_ZN18tutrc_harurobo_lib6BNO05511get_euler_xEv>
 800175e:	eef0 7a40 	vmov.f32	s15, s0
 8001762:	eef1 7a67 	vneg.f32	s15, s15
 8001766:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800176a:	ed9f 6ba5 	vldr	d6, [pc, #660]	; 8001a00 <_ZZ7cppmainENKUlvE_clEv+0x300>
 800176e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001772:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
		//double R = 0;

		double v1 = 200 * (vx * cos(0 + R) + vy * sin(0 + R));
 8001776:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800177a:	ed9f 6ba3 	vldr	d6, [pc, #652]	; 8001a08 <_ZZ7cppmainENKUlvE_clEv+0x308>
 800177e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001782:	eeb0 0b47 	vmov.f64	d0, d7
 8001786:	f00f fbeb 	bl	8010f60 <cos>
 800178a:	eeb0 6b40 	vmov.f64	d6, d0
 800178e:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8001792:	ee26 8b07 	vmul.f64	d8, d6, d7
 8001796:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800179a:	ed9f 6b9b 	vldr	d6, [pc, #620]	; 8001a08 <_ZZ7cppmainENKUlvE_clEv+0x308>
 800179e:	ee37 7b06 	vadd.f64	d7, d7, d6
 80017a2:	eeb0 0b47 	vmov.f64	d0, d7
 80017a6:	f00f fc27 	bl	8010ff8 <sin>
 80017aa:	eeb0 6b40 	vmov.f64	d6, d0
 80017ae:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 80017b2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80017b6:	ee38 7b07 	vadd.f64	d7, d8, d7
 80017ba:	ed9f 6b95 	vldr	d6, [pc, #596]	; 8001a10 <_ZZ7cppmainENKUlvE_clEv+0x310>
 80017be:	ee27 7b06 	vmul.f64	d7, d7, d6
 80017c2:	ed87 7b1a 	vstr	d7, [r7, #104]	; 0x68
		double v2 = 200 * (vx * cos((M_PI * 2 / 3) + R) + vy * sin((M_PI * 2 / 3)+ R));
 80017c6:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 80017ca:	ed9f 6b93 	vldr	d6, [pc, #588]	; 8001a18 <_ZZ7cppmainENKUlvE_clEv+0x318>
 80017ce:	ee37 7b06 	vadd.f64	d7, d7, d6
 80017d2:	eeb0 0b47 	vmov.f64	d0, d7
 80017d6:	f00f fbc3 	bl	8010f60 <cos>
 80017da:	eeb0 6b40 	vmov.f64	d6, d0
 80017de:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 80017e2:	ee26 8b07 	vmul.f64	d8, d6, d7
 80017e6:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 80017ea:	ed9f 6b8b 	vldr	d6, [pc, #556]	; 8001a18 <_ZZ7cppmainENKUlvE_clEv+0x318>
 80017ee:	ee37 7b06 	vadd.f64	d7, d7, d6
 80017f2:	eeb0 0b47 	vmov.f64	d0, d7
 80017f6:	f00f fbff 	bl	8010ff8 <sin>
 80017fa:	eeb0 6b40 	vmov.f64	d6, d0
 80017fe:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8001802:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001806:	ee38 7b07 	vadd.f64	d7, d8, d7
 800180a:	ed9f 6b81 	vldr	d6, [pc, #516]	; 8001a10 <_ZZ7cppmainENKUlvE_clEv+0x310>
 800180e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001812:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
		double v3 = 200
				* (vx * cos((M_PI * 4 / 3) + R) + vy * sin((M_PI * 4 / 3) + R));
 8001816:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800181a:	ed9f 6b81 	vldr	d6, [pc, #516]	; 8001a20 <_ZZ7cppmainENKUlvE_clEv+0x320>
 800181e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001822:	eeb0 0b47 	vmov.f64	d0, d7
 8001826:	f00f fb9b 	bl	8010f60 <cos>
 800182a:	eeb0 6b40 	vmov.f64	d6, d0
 800182e:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8001832:	ee26 8b07 	vmul.f64	d8, d6, d7
 8001836:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800183a:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8001a20 <_ZZ7cppmainENKUlvE_clEv+0x320>
 800183e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001842:	eeb0 0b47 	vmov.f64	d0, d7
 8001846:	f00f fbd7 	bl	8010ff8 <sin>
 800184a:	eeb0 6b40 	vmov.f64	d6, d0
 800184e:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8001852:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001856:	ee38 7b07 	vadd.f64	d7, d8, d7
		double v3 = 200
 800185a:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8001a10 <_ZZ7cppmainENKUlvE_clEv+0x310>
 800185e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001862:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
		ps3.update();
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]

		if (ps3.get_key(PS3::Key::L1)) {
 800186a:	2109      	movs	r1, #9
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff fbd7 	bl	8001020 <_ZN18tutrc_harurobo_lib3PS37get_keyENS0_3KeyE>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d017      	beq.n	80018a8 <_ZZ7cppmainENKUlvE_clEv+0x1a8>
			v1 -= 40;
 8001878:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 800187c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8001a28 <_ZZ7cppmainENKUlvE_clEv+0x328>
 8001880:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001884:	ed87 7b1a 	vstr	d7, [r7, #104]	; 0x68
			v2 -= 40;
 8001888:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 800188c:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8001a28 <_ZZ7cppmainENKUlvE_clEv+0x328>
 8001890:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001894:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
			v3 -= 40;
 8001898:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 800189c:	ed9f 6b62 	vldr	d6, [pc, #392]	; 8001a28 <_ZZ7cppmainENKUlvE_clEv+0x328>
 80018a0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80018a4:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
		ps3.update();
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
		}

		if (ps3.get_key(PS3::Key::R1)) {
 80018ac:	210b      	movs	r1, #11
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff fbb6 	bl	8001020 <_ZN18tutrc_harurobo_lib3PS37get_keyENS0_3KeyE>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d017      	beq.n	80018ea <_ZZ7cppmainENKUlvE_clEv+0x1ea>
			v1 += 40;
 80018ba:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 80018be:	ed9f 6b5a 	vldr	d6, [pc, #360]	; 8001a28 <_ZZ7cppmainENKUlvE_clEv+0x328>
 80018c2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80018c6:	ed87 7b1a 	vstr	d7, [r7, #104]	; 0x68
			v2 += 40;
 80018ca:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 80018ce:	ed9f 6b56 	vldr	d6, [pc, #344]	; 8001a28 <_ZZ7cppmainENKUlvE_clEv+0x328>
 80018d2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80018d6:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
			v3 += 40;
 80018da:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 80018de:	ed9f 6b52 	vldr	d6, [pc, #328]	; 8001a28 <_ZZ7cppmainENKUlvE_clEv+0x328>
 80018e2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80018e6:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
		}

		double K = 100;
 80018ea:	f04f 0200 	mov.w	r2, #0
 80018ee:	4b50      	ldr	r3, [pc, #320]	; (8001a30 <_ZZ7cppmainENKUlvE_clEv+0x330>)
 80018f0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
		double e1 = v1 - c610.get_rps(C610::ID::ID1);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	2100      	movs	r1, #0
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff fc38 	bl	8001170 <_ZN18tutrc_harurobo_lib4C6107get_rpsENS0_2IDE>
 8001900:	eef0 7a40 	vmov.f32	s15, s0
 8001904:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001908:	ed97 6b1a 	vldr	d6, [r7, #104]	; 0x68
 800190c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001910:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
		int c1 = clamp(K * e1, -4000, 4000);
 8001914:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 8001918:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800191c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001920:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001924:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001928:	4942      	ldr	r1, [pc, #264]	; (8001a34 <_ZZ7cppmainENKUlvE_clEv+0x334>)
 800192a:	ee17 0a90 	vmov	r0, s15
 800192e:	f7ff fecb 	bl	80016c8 <_Z5clampiii>
 8001932:	62f8      	str	r0, [r7, #44]	; 0x2c
		double e1 = v1 - c610.get_rps(C610::ID::ID1);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	68db      	ldr	r3, [r3, #12]

		double e2 = v2 - c610.get_rps(C610::ID::ID2);
 8001938:	2101      	movs	r1, #1
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff fc18 	bl	8001170 <_ZN18tutrc_harurobo_lib4C6107get_rpsENS0_2IDE>
 8001940:	eef0 7a40 	vmov.f32	s15, s0
 8001944:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001948:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 800194c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001950:	ed87 7b08 	vstr	d7, [r7, #32]
		int c2 = clamp(K * e2, -4000, 4000);
 8001954:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 8001958:	ed97 7b08 	vldr	d7, [r7, #32]
 800195c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001960:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001964:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001968:	4932      	ldr	r1, [pc, #200]	; (8001a34 <_ZZ7cppmainENKUlvE_clEv+0x334>)
 800196a:	ee17 0a90 	vmov	r0, s15
 800196e:	f7ff feab 	bl	80016c8 <_Z5clampiii>
 8001972:	61f8      	str	r0, [r7, #28]
		double e1 = v1 - c610.get_rps(C610::ID::ID1);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	68db      	ldr	r3, [r3, #12]

		double e3 = v3 - c610.get_rps(C610::ID::ID3);
 8001978:	2102      	movs	r1, #2
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff fbf8 	bl	8001170 <_ZN18tutrc_harurobo_lib4C6107get_rpsENS0_2IDE>
 8001980:	eef0 7a40 	vmov.f32	s15, s0
 8001984:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001988:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
 800198c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001990:	ed87 7b04 	vstr	d7, [r7, #16]
		int c3 = clamp(K * e3, -4000, 4000); //P制御
 8001994:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 8001998:	ed97 7b04 	vldr	d7, [r7, #16]
 800199c:	ee26 7b07 	vmul.f64	d7, d6, d7
 80019a0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80019a4:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80019a8:	4922      	ldr	r1, [pc, #136]	; (8001a34 <_ZZ7cppmainENKUlvE_clEv+0x334>)
 80019aa:	ee17 0a90 	vmov	r0, s15
 80019ae:	f7ff fe8b 	bl	80016c8 <_Z5clampiii>
 80019b2:	60f8      	str	r0, [r7, #12]
		double e1 = v1 - c610.get_rps(C610::ID::ID1);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	68db      	ldr	r3, [r3, #12]

		c610.set_current(C610::ID::ID1, c1);
 80019b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019ba:	b212      	sxth	r2, r2
 80019bc:	2100      	movs	r1, #0
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff fbf2 	bl	80011a8 <_ZN18tutrc_harurobo_lib4C61011set_currentENS0_2IDEs>
		double e1 = v1 - c610.get_rps(C610::ID::ID1);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	68db      	ldr	r3, [r3, #12]
		c610.set_current(C610::ID::ID2, c2);
 80019c8:	69fa      	ldr	r2, [r7, #28]
 80019ca:	b212      	sxth	r2, r2
 80019cc:	2101      	movs	r1, #1
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff fbea 	bl	80011a8 <_ZN18tutrc_harurobo_lib4C61011set_currentENS0_2IDEs>
		double e1 = v1 - c610.get_rps(C610::ID::ID1);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	68db      	ldr	r3, [r3, #12]
		c610.set_current(C610::ID::ID3, c3); //モーターを動かす
 80019d8:	68fa      	ldr	r2, [r7, #12]
 80019da:	b212      	sxth	r2, r2
 80019dc:	2102      	movs	r1, #2
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff fbe2 	bl	80011a8 <_ZN18tutrc_harurobo_lib4C61011set_currentENS0_2IDEs>
		double e1 = v1 - c610.get_rps(C610::ID::ID1);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	68db      	ldr	r3, [r3, #12]

		c610.transmit();
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff fbf6 	bl	80011da <_ZN18tutrc_harurobo_lib4C6108transmitEv>
		//debug.printf("%f\t%f\t%f\t%f\t%f\r\n", vx, vy, v1, v2, v3);
	});
 80019ee:	bf00      	nop
 80019f0:	3770      	adds	r7, #112	; 0x70
 80019f2:	46bd      	mov	sp, r7
 80019f4:	ecbd 8b02 	vpop	{d8}
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	f3af 8000 	nop.w
 8001a00:	382d7365 	.word	0x382d7365
 8001a04:	3ff0c152 	.word	0x3ff0c152
	...
 8001a14:	40690000 	.word	0x40690000
 8001a18:	382d7365 	.word	0x382d7365
 8001a1c:	4000c152 	.word	0x4000c152
 8001a20:	382d7365 	.word	0x382d7365
 8001a24:	4010c152 	.word	0x4010c152
 8001a28:	00000000 	.word	0x00000000
 8001a2c:	40440000 	.word	0x40440000
 8001a30:	40590000 	.word	0x40590000
 8001a34:	fffff060 	.word	0xfffff060

08001a38 <_ZNSt8functionIFvvEED1Ev>:
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff f8c8 	bl	8000bd8 <_ZNSt14_Function_baseD1Ev>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
	...

08001a54 <cppmain>:
extern "C" void cppmain() {
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b0b2      	sub	sp, #200	; 0xc8
 8001a58:	af02      	add	r7, sp, #8
	UART debug(&huart2);
 8001a5a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001a5e:	2240      	movs	r2, #64	; 0x40
 8001a60:	4931      	ldr	r1, [pc, #196]	; (8001b28 <cppmain+0xd4>)
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7fe ff3b 	bl	80008de <_ZN18tutrc_harurobo_lib4UARTC1EP20__UART_HandleTypeDefj>
	UART uart3(&huart3);
 8001a68:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001a6c:	2240      	movs	r2, #64	; 0x40
 8001a6e:	492f      	ldr	r1, [pc, #188]	; (8001b2c <cppmain+0xd8>)
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7fe ff34 	bl	80008de <_ZN18tutrc_harurobo_lib4UARTC1EP20__UART_HandleTypeDefj>
	CAN can(&hfdcan1);
 8001a76:	f107 0074 	add.w	r0, r7, #116	; 0x74
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	492c      	ldr	r1, [pc, #176]	; (8001b30 <cppmain+0xdc>)
 8001a80:	f7ff f8ff 	bl	8000c82 <_ZN18tutrc_harurobo_lib3CANC1EP19FDCAN_HandleTypeDefmm>
	PS3 ps3(&huart1);
 8001a84:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a88:	492a      	ldr	r1, [pc, #168]	; (8001b34 <cppmain+0xe0>)
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff f9aa 	bl	8000de4 <_ZN18tutrc_harurobo_lib3PS3C1EP20__UART_HandleTypeDef>
	C610 c610(can);
 8001a90:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8001a94:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a98:	4611      	mov	r1, r2
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff fb17 	bl	80010ce <_ZN18tutrc_harurobo_lib4C610C1ERNS_3CANE>
	Timer timer(&htim5);
 8001aa0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aa4:	4924      	ldr	r1, [pc, #144]	; (8001b38 <cppmain+0xe4>)
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff fc35 	bl	8001316 <_ZN18tutrc_harurobo_lib5TimerC1EP17TIM_HandleTypeDef>
	BNO055 bno(uart3);
 8001aac:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001ab0:	f107 0320 	add.w	r3, r7, #32
 8001ab4:	4611      	mov	r1, r2
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff fccc 	bl	8001454 <_ZN18tutrc_harurobo_lib6BNO055C1ERNS_4UARTE>
	Encoder enc(&htim3, 2048, 0.01);
 8001abc:	463b      	mov	r3, r7
 8001abe:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8001b3c <cppmain+0xe8>
 8001ac2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ac6:	491e      	ldr	r1, [pc, #120]	; (8001b40 <cppmain+0xec>)
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff fc51 	bl	8001370 <_ZN18tutrc_harurobo_lib7EncoderC1EP17TIM_HandleTypeDeftf>
	timer.set_timer_callback([&]() {
 8001ace:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ad2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001ad6:	463b      	mov	r3, r7
 8001ad8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001adc:	f107 0320 	add.w	r3, r7, #32
 8001ae0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001ae4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ae8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001aec:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 8001af0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001af4:	9300      	str	r3, [sp, #0]
 8001af6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001afa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001afc:	f000 f9ce 	bl	8001e9c <_ZNSt8functionIFvvEEC1IZ7cppmainEUlvE_vvEET_>
 8001b00:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8001b04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b08:	4611      	mov	r1, r2
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff fc16 	bl	800133c <_ZN18tutrc_harurobo_lib5Timer18set_timer_callbackEOSt8functionIFvvEE>
 8001b10:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff ff8f 	bl	8001a38 <_ZNSt8functionIFvvEED1Ev>

	while (true) {
		bno.update();
 8001b1a:	f107 0320 	add.w	r3, r7, #32
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff fcc6 	bl	80014b0 <_ZN18tutrc_harurobo_lib6BNO0556updateEv>
 8001b24:	e7f9      	b.n	8001b1a <cppmain+0xc6>
 8001b26:	bf00      	nop
 8001b28:	24000700 	.word	0x24000700
 8001b2c:	24000790 	.word	0x24000790
 8001b30:	240001fc 	.word	0x240001fc
 8001b34:	24000670 	.word	0x24000670
 8001b38:	240004f4 	.word	0x240004f4
 8001b3c:	3c23d70a 	.word	0x3c23d70a
 8001b40:	2400045c 	.word	0x2400045c

08001b44 <_ZNSaIhEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f000 f9d7 	bl	8001f00 <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4618      	mov	r0, r3
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <_ZNSaIhED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f000 f9d6 	bl	8001f16 <_ZN9__gnu_cxx13new_allocatorIhED1Ev>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <_ZNSt6vectorIhSaIhEEC1EjRKS0_>:
       *
       *  This constructor fills the %vector with @a __n default
       *  constructed elements.
       */
      explicit
      vector(size_type __n, const allocator_type& __a = allocator_type())
 8001b74:	b590      	push	{r4, r7, lr}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
      : _Base(_S_check_init_len(__n, __a), __a)
 8001b80:	68fc      	ldr	r4, [r7, #12]
 8001b82:	6879      	ldr	r1, [r7, #4]
 8001b84:	68b8      	ldr	r0, [r7, #8]
 8001b86:	f000 f9d1 	bl	8001f2c <_ZNSt6vectorIhSaIhEE17_S_check_init_lenEjRKS0_>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4620      	mov	r0, r4
 8001b92:	f000 f9f3 	bl	8001f7c <_ZNSt12_Vector_baseIhSaIhEEC1EjRKS0_>
      { _M_default_initialize(__n); }
 8001b96:	68b9      	ldr	r1, [r7, #8]
 8001b98:	68f8      	ldr	r0, [r7, #12]
 8001b9a:	f000 fa03 	bl	8001fa4 <_ZNSt6vectorIhSaIhEE21_M_default_initializeEj>
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3714      	adds	r7, #20
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd90      	pop	{r4, r7, pc}

08001ba8 <_ZNSt6vectorIhSaIhEE4dataEv>:
      /**
       *   Returns a pointer such that [data(), data() + size()) is a valid
       *   range.  For a non-empty %vector, data() == &front().
       */
      _Tp*
      data() _GLIBCXX_NOEXCEPT
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
      { return _M_data_ptr(this->_M_impl._M_start); }
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 fa17 	bl	8001fea <_ZNKSt6vectorIhSaIhEE11_M_data_ptrIhEEPT_S4_>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <_ZNKSt6vectorIhSaIhEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8001bc6:	b480      	push	{r7}
 8001bc8:	b083      	sub	sp, #12
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685a      	ldr	r2, [r3, #4]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	4618      	mov	r0, r3
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <_ZNSt6vectorIhSaIhEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	4413      	add	r3, r2
      }
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <_ZNSt13unordered_mapIP19FDCAN_HandleTypeDefSt8functionIFvmPhjEESt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_S5_EEEixERSB_>:
       *  is then returned.
       *
       *  Lookup requires constant time.
       */
      mapped_type&
      operator[](const key_type& __k)
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b082      	sub	sp, #8
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
 8001c0a:	6039      	str	r1, [r7, #0]
      { return _M_h[__k]; }
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6839      	ldr	r1, [r7, #0]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f000 fa01 	bl	8002018 <_ZNSt8__detail9_Map_baseIP19FDCAN_HandleTypeDefSt4pairIKS2_St8functionIFvmPhjEEESaIS9_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEELb1EEixERS4_>
 8001c16:	4603      	mov	r3, r0
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <_ZSt4moveIRSt8functionIFvmPhjEEEONSt16remove_referenceIT_E4typeEOS6_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <_ZNSt8functionIFvmPhjEEaSEOS2_>:
       *
       *  If @a __x targets a function pointer or a reference to a function
       *  object, then this operation will not throw an %exception.
       */
      function&
      operator=(function&& __x) noexcept
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b086      	sub	sp, #24
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
 8001c3e:	6039      	str	r1, [r7, #0]
      {
	function(std::move(__x)).swap(*this);
 8001c40:	6838      	ldr	r0, [r7, #0]
 8001c42:	f7ff ffed 	bl	8001c20 <_ZSt4moveIRSt8functionIFvmPhjEEEONSt16remove_referenceIT_E4typeEOS6_>
 8001c46:	4602      	mov	r2, r0
 8001c48:	f107 0308 	add.w	r3, r7, #8
 8001c4c:	4611      	mov	r1, r2
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f000 fa38 	bl	80020c4 <_ZNSt8functionIFvmPhjEEC1EOS2_>
 8001c54:	f107 0308 	add.w	r3, r7, #8
 8001c58:	6879      	ldr	r1, [r7, #4]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f000 fa44 	bl	80020e8 <_ZNSt8functionIFvmPhjEE4swapERS2_>
 8001c60:	f107 0308 	add.w	r3, r7, #8
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff fa25 	bl	80010b4 <_ZNSt8functionIFvmPhjEED1Ev>
	return *this;
 8001c6a:	687b      	ldr	r3, [r7, #4]
      }
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3718      	adds	r7, #24
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <_ZNSt5arrayIhLj8EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f000 fa53 	bl	800212a <_ZNSt14__array_traitsIhLj8EE6_S_ptrERA8_Kh>
 8001c84:	4603      	mov	r3, r0
 8001c86:	4618      	mov	r0, r3
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <_ZNKSt5arrayIhLj8EE4sizeEv>:
      size() const noexcept { return _Nm; }
 8001c8e:	b480      	push	{r7}
 8001c90:	b083      	sub	sp, #12
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
 8001c96:	2308      	movs	r3, #8
 8001c98:	4618      	mov	r0, r3
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <_ZNSt5arrayIhLj8EEixEj>:
      operator[](size_type __n) noexcept
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6839      	ldr	r1, [r7, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f000 fa44 	bl	8002140 <_ZNSt14__array_traitsIhLj8EE6_S_refERA8_Khj>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <_ZNSt5arrayIfLj4EEixEj>:
      operator[](size_type __n) noexcept
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b082      	sub	sp, #8
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
 8001cca:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6839      	ldr	r1, [r7, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f000 fa43 	bl	800215c <_ZNSt14__array_traitsIfLj4EE6_S_refERA4_Kfj>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3708      	adds	r7, #8
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <_ZN18tutrc_harurobo_lib13to_underlyingINS_3PS33KeyEEENSt15underlying_typeIT_E4typeES4_>:
template <class T> constexpr std::underlying_type_t<T> to_underlying(T value) {
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  return static_cast<std::underlying_type_t<T>>(value);
 8001ce8:	687b      	ldr	r3, [r7, #4]
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <_ZNSt5arrayIsLj8EEixEj>:
      operator[](size_type __n) noexcept
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b082      	sub	sp, #8
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
 8001cfe:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6839      	ldr	r1, [r7, #0]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f000 fa38 	bl	800217a <_ZNSt14__array_traitsIsLj8EE6_S_refERA8_Ksj>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <_ZNSt8functionIFvmPhjEEC1IZN18tutrc_harurobo_lib4C610C4ERNS4_3CANEEUlmS0_jE_vvEET_>:
	}
    }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor, typename, typename>
      function<_Res(_ArgTypes...)>::
 8001d14:	b590      	push	{r4, r7, lr}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
      function(_Functor __f)
      : _Function_base()
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7fe ff4b 	bl	8000bbc <_ZNSt14_Function_baseC1Ev>
      {
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
 8001d26:	463b      	mov	r3, r7
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f000 fa35 	bl	8002198 <_ZNSt14_Function_base13_Base_managerIZN18tutrc_harurobo_lib4C610C4ERNS1_3CANEEUlmPhjE_E21_M_not_empty_functionIS6_EEbRKT_>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d00f      	beq.n	8001d54 <_ZNSt8functionIFvmPhjEEC1IZN18tutrc_harurobo_lib4C610C4ERNS4_3CANEEUlmS0_jE_vvEET_+0x40>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8001d34:	687c      	ldr	r4, [r7, #4]
 8001d36:	463b      	mov	r3, r7
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f000 fa38 	bl	80021ae <_ZSt4moveIRZN18tutrc_harurobo_lib4C610C4ERNS0_3CANEEUlmPhjE_EONSt16remove_referenceIT_E4typeEOS8_>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	4619      	mov	r1, r3
 8001d42:	4620      	mov	r0, r4
 8001d44:	f000 fa3e 	bl	80021c4 <_ZNSt14_Function_base13_Base_managerIZN18tutrc_harurobo_lib4C610C4ERNS1_3CANEEUlmPhjE_E15_M_init_functorERSt9_Any_dataOS6_>
	    _M_invoker = &_My_handler::_M_invoke;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4a05      	ldr	r2, [pc, #20]	; (8001d60 <_ZNSt8functionIFvmPhjEEC1IZN18tutrc_harurobo_lib4C610C4ERNS4_3CANEEUlmS0_jE_vvEET_+0x4c>)
 8001d4c:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a04      	ldr	r2, [pc, #16]	; (8001d64 <_ZNSt8functionIFvmPhjEEC1IZN18tutrc_harurobo_lib4C610C4ERNS4_3CANEEUlmS0_jE_vvEET_+0x50>)
 8001d52:	609a      	str	r2, [r3, #8]
	  }
      }
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4618      	mov	r0, r3
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd90      	pop	{r4, r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	080021e9 	.word	0x080021e9
 8001d64:	08002229 	.word	0x08002229

08001d68 <_ZNSt13unordered_mapIP17TIM_HandleTypeDefSt8functionIFvvEESt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_S4_EEEixERSA_>:
      operator[](const key_type& __k)
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
      { return _M_h[__k]; }
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6839      	ldr	r1, [r7, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f000 fa76 	bl	8002268 <_ZNSt8__detail9_Map_baseIP17TIM_HandleTypeDefSt4pairIKS2_St8functionIFvvEEESaIS8_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEELb1EEixERS4_>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <_ZSt4moveIRSt8functionIFvvEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8001d86:	b480      	push	{r7}
 8001d88:	b083      	sub	sp, #12
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4618      	mov	r0, r3
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <_ZNSt8functionIFvvEEaSEOS1_>:
      operator=(function&& __x) noexcept
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
	function(std::move(__x)).swap(*this);
 8001da6:	6838      	ldr	r0, [r7, #0]
 8001da8:	f7ff ffed 	bl	8001d86 <_ZSt4moveIRSt8functionIFvvEEEONSt16remove_referenceIT_E4typeEOS5_>
 8001dac:	4602      	mov	r2, r0
 8001dae:	f107 0308 	add.w	r3, r7, #8
 8001db2:	4611      	mov	r1, r2
 8001db4:	4618      	mov	r0, r3
 8001db6:	f000 faad 	bl	8002314 <_ZNSt8functionIFvvEEC1EOS1_>
 8001dba:	f107 0308 	add.w	r3, r7, #8
 8001dbe:	6879      	ldr	r1, [r7, #4]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f000 fab9 	bl	8002338 <_ZNSt8functionIFvvEE4swapERS1_>
 8001dc6:	f107 0308 	add.w	r3, r7, #8
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff fe34 	bl	8001a38 <_ZNSt8functionIFvvEED1Ev>
	return *this;
 8001dd0:	687b      	ldr	r3, [r7, #4]
      }
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3718      	adds	r7, #24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <_ZNSt5arrayIsLj3EE4dataEv>:
      data() noexcept
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b082      	sub	sp, #8
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f000 fac8 	bl	800237a <_ZNSt14__array_traitsIsLj3EE6_S_ptrERA3_Ks>
 8001dea:	4603      	mov	r3, r0
 8001dec:	4618      	mov	r0, r3
 8001dee:	3708      	adds	r7, #8
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <_ZNSt5arrayIsLj3EEixEj>:
      operator[](size_type __n) noexcept
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6839      	ldr	r1, [r7, #0]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f000 fac4 	bl	8002390 <_ZNSt14__array_traitsIsLj3EE6_S_refERA3_Ksj>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <_ZNSt5arrayIhLj4EE4dataEv>:
      data() noexcept
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b082      	sub	sp, #8
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f000 fac6 	bl	80023ae <_ZNSt14__array_traitsIhLj4EE6_S_ptrERA4_Kh>
 8001e22:	4603      	mov	r3, r0
 8001e24:	4618      	mov	r0, r3
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <_ZNSt5arrayIhLj4EEixEj>:
      operator[](size_type __n) noexcept
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6839      	ldr	r1, [r7, #0]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f000 fac2 	bl	80023c4 <_ZNSt14__array_traitsIhLj4EE6_S_refERA4_Khj>
 8001e40:	4603      	mov	r3, r0
 8001e42:	4618      	mov	r0, r3
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <_ZSt3maxIiERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8001e4a:	b480      	push	{r7}
 8001e4c:	b083      	sub	sp, #12
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
 8001e52:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	da01      	bge.n	8001e64 <_ZSt3maxIiERKT_S2_S2_+0x1a>
	return __b;
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	e000      	b.n	8001e66 <_ZSt3maxIiERKT_S2_S2_+0x1c>
      return __a;
 8001e64:	687b      	ldr	r3, [r7, #4]
    }
 8001e66:	4618      	mov	r0, r3
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <_ZSt3minIiERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8001e72:	b480      	push	{r7}
 8001e74:	b083      	sub	sp, #12
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
 8001e7a:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	da01      	bge.n	8001e8c <_ZSt3minIiERKT_S2_S2_+0x1a>
	return __b;
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	e000      	b.n	8001e8e <_ZSt3minIiERKT_S2_S2_+0x1c>
      return __a;
 8001e8c:	687b      	ldr	r3, [r7, #4]
    }
 8001e8e:	4618      	mov	r0, r3
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
	...

08001e9c <_ZNSt8functionIFvvEEC1IZ7cppmainEUlvE_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8001e9c:	b084      	sub	sp, #16
 8001e9e:	b590      	push	{r4, r7, lr}
 8001ea0:	b083      	sub	sp, #12
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
 8001ea6:	f107 001c 	add.w	r0, r7, #28
 8001eaa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
      : _Function_base()
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7fe fe83 	bl	8000bbc <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 8001eb6:	f107 031c 	add.w	r3, r7, #28
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f000 fa90 	bl	80023e0 <_ZNSt14_Function_base13_Base_managerIZ7cppmainEUlvE_E21_M_not_empty_functionIS1_EEbRKT_>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d010      	beq.n	8001ee8 <_ZNSt8functionIFvvEEC1IZ7cppmainEUlvE_vvEET_+0x4c>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8001ec6:	687c      	ldr	r4, [r7, #4]
 8001ec8:	f107 031c 	add.w	r3, r7, #28
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f000 fa92 	bl	80023f6 <_ZSt4moveIRZ7cppmainEUlvE_EONSt16remove_referenceIT_E4typeEOS3_>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4620      	mov	r0, r4
 8001ed8:	f000 fa98 	bl	800240c <_ZNSt14_Function_base13_Base_managerIZ7cppmainEUlvE_E15_M_init_functorERSt9_Any_dataOS1_>
	    _M_invoker = &_My_handler::_M_invoke;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a06      	ldr	r2, [pc, #24]	; (8001ef8 <_ZNSt8functionIFvvEEC1IZ7cppmainEUlvE_vvEET_+0x5c>)
 8001ee0:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a05      	ldr	r2, [pc, #20]	; (8001efc <_ZNSt8functionIFvvEEC1IZ7cppmainEUlvE_vvEET_+0x60>)
 8001ee6:	609a      	str	r2, [r3, #8]
      }
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4618      	mov	r0, r3
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001ef4:	b004      	add	sp, #16
 8001ef6:	4770      	bx	lr
 8001ef8:	08002431 	.word	0x08002431
 8001efc:	0800244f 	.word	0x0800244f

08001f00 <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr

08001f16 <_ZN9__gnu_cxx13new_allocatorIhED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001f16:	b480      	push	{r7}
 8001f18:	b083      	sub	sp, #12
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4618      	mov	r0, r3
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <_ZNSt6vectorIhSaIhEE17_S_check_init_lenEjRKS0_>:
	return (__len < size() || __len > max_size()) ? max_size() : __len;
      }

      // Called by constructors to check initial size.
      static size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
 8001f2c:	b590      	push	{r4, r7, lr}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8001f36:	f107 030c 	add.w	r3, r7, #12
 8001f3a:	6839      	ldr	r1, [r7, #0]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f000 fabf 	bl	80024c0 <_ZNSaIhEC1ERKS_>
 8001f42:	f107 030c 	add.w	r3, r7, #12
 8001f46:	4618      	mov	r0, r3
 8001f48:	f000 faa0 	bl	800248c <_ZNSt6vectorIhSaIhEE11_S_max_sizeERKS0_>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4293      	cmp	r3, r2
 8001f52:	bf8c      	ite	hi
 8001f54:	2301      	movhi	r3, #1
 8001f56:	2300      	movls	r3, #0
 8001f58:	b2dc      	uxtb	r4, r3
 8001f5a:	f107 030c 	add.w	r3, r7, #12
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff fdfc 	bl	8001b5c <_ZNSaIhED1Ev>
 8001f64:	2c00      	cmp	r4, #0
 8001f66:	d002      	beq.n	8001f6e <_ZNSt6vectorIhSaIhEE17_S_check_init_lenEjRKS0_+0x42>
	  __throw_length_error(
 8001f68:	4803      	ldr	r0, [pc, #12]	; (8001f78 <_ZNSt6vectorIhSaIhEE17_S_check_init_lenEjRKS0_+0x4c>)
 8001f6a:	f00e ff57 	bl	8010e1c <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
 8001f6e:	687b      	ldr	r3, [r7, #4]
      }
 8001f70:	4618      	mov	r0, r3
 8001f72:	3714      	adds	r7, #20
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd90      	pop	{r4, r7, pc}
 8001f78:	08014550 	.word	0x08014550

08001f7c <_ZNSt12_Vector_baseIhSaIhEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6879      	ldr	r1, [r7, #4]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f000 faa5 	bl	80024dc <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 8001f92:	68b9      	ldr	r1, [r7, #8]
 8001f94:	68f8      	ldr	r0, [r7, #12]
 8001f96:	f000 fab3 	bl	8002500 <_ZNSt12_Vector_baseIhSaIhEE17_M_create_storageEj>
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3710      	adds	r7, #16
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <_ZNSt6vectorIhSaIhEE21_M_default_initializeEj>:
      _M_default_initialize(size_type __n)
 8001fa4:	b590      	push	{r4, r7, lr}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681c      	ldr	r4, [r3, #0]
					   _M_get_Tp_allocator());
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f000 f80d 	bl	8001fd4 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8001fba:	4603      	mov	r3, r0
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	6839      	ldr	r1, [r7, #0]
 8001fc0:	4620      	mov	r0, r4
 8001fc2:	f000 fab7 	bl	8002534 <_ZSt27__uninitialized_default_n_aIPhjhET_S1_T0_RSaIT1_E>
 8001fc6:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	605a      	str	r2, [r3, #4]
      }
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd90      	pop	{r4, r7, pc}

08001fd4 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr

08001fea <_ZNKSt6vectorIhSaIhEE11_M_data_ptrIhEEPT_S4_>:
      }
#endif

      template<typename _Up>
	_Up*
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
 8001fea:	b480      	push	{r7}
 8001fec:	b083      	sub	sp, #12
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
 8001ff2:	6039      	str	r1, [r7, #0]
	{ return __ptr; }
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr

08002002 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002002:	b480      	push	{r7}
 8002004:	b083      	sub	sp, #12
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4618      	mov	r0, r3
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <_ZNSt8__detail9_Map_baseIP19FDCAN_HandleTypeDefSt4pairIKS2_St8functionIFvmPhjEEESaIS9_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEELb1EEixERS4_>:

  template<typename _Key, typename _Pair, typename _Alloc, typename _Equal,
	   typename _H1, typename _H2, typename _Hash,
	   typename _RehashPolicy, typename _Traits>
    auto
    _Map_base<_Key, _Pair, _Alloc, _Select1st, _Equal,
 8002018:	b590      	push	{r4, r7, lr}
 800201a:	b08f      	sub	sp, #60	; 0x3c
 800201c:	af02      	add	r7, sp, #8
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
	      _H1, _H2, _Hash, _RehashPolicy, _Traits, true>::
    operator[](const key_type& __k)
    -> mapped_type&
    {
      __hashtable* __h = static_cast<__hashtable*>(this);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	62fb      	str	r3, [r7, #44]	; 0x2c
      __hash_code __code = __h->_M_hash_code(__k);
 8002026:	6839      	ldr	r1, [r7, #0]
 8002028:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800202a:	f000 fa92 	bl	8002552 <_ZNKSt8__detail15_Hash_code_baseIP19FDCAN_HandleTypeDefSt4pairIKS2_St8functionIFvmPhjEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS4_>
 800202e:	62b8      	str	r0, [r7, #40]	; 0x28
      std::size_t __bkt = __h->_M_bucket_index(__k, __code);
 8002030:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002032:	6839      	ldr	r1, [r7, #0]
 8002034:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002036:	f000 faa0 	bl	800257a <_ZNKSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERS3_j>
 800203a:	6278      	str	r0, [r7, #36]	; 0x24
      if (__node_type* __node = __h->_M_find_node(__bkt, __k, __code))
 800203c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002042:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002044:	f000 faab 	bl	800259e <_ZNKSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS3_j>
 8002048:	6238      	str	r0, [r7, #32]
 800204a:	6a3b      	ldr	r3, [r7, #32]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d006      	beq.n	800205e <_ZNSt8__detail9_Map_baseIP19FDCAN_HandleTypeDefSt4pairIKS2_St8functionIFvmPhjEEESaIS9_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEELb1EEixERS4_+0x46>
	return __node->_M_v().second;
 8002050:	6a3b      	ldr	r3, [r7, #32]
 8002052:	4618      	mov	r0, r3
 8002054:	f000 fabc 	bl	80025d0 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEE4_M_vEv>
 8002058:	4603      	mov	r3, r0
 800205a:	1d1c      	adds	r4, r3, #4
 800205c:	e02b      	b.n	80020b6 <_ZNSt8__detail9_Map_baseIP19FDCAN_HandleTypeDefSt4pairIKS2_St8functionIFvmPhjEEESaIS9_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEELb1EEixERS4_+0x9e>

      typename __hashtable::_Scoped_node __node {
	__h,
	std::piecewise_construct,
	std::tuple<const key_type&>(__k),
 800205e:	f107 0318 	add.w	r3, r7, #24
 8002062:	6839      	ldr	r1, [r7, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f000 fabf 	bl	80025e8 <_ZNSt5tupleIJRKP19FDCAN_HandleTypeDefEEC1ILb1ELb1EEES3_>
      typename __hashtable::_Scoped_node __node {
 800206a:	f107 0218 	add.w	r2, r7, #24
 800206e:	f107 0010 	add.w	r0, r7, #16
 8002072:	f107 031c 	add.w	r3, r7, #28
 8002076:	9300      	str	r3, [sp, #0]
 8002078:	4613      	mov	r3, r2
 800207a:	4a11      	ldr	r2, [pc, #68]	; (80020c0 <_ZNSt8__detail9_Map_baseIP19FDCAN_HandleTypeDefSt4pairIKS2_St8functionIFvmPhjEEESaIS9_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEELb1EEixERS4_+0xa8>)
 800207c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800207e:	f000 fac2 	bl	8002606 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJRS3_EESR_IJEEEEEPNSA_16_Hashtable_allocISaINSA_10_Hash_nodeIS8_Lb0EEEEEEDpOT_>
	std::tuple<>()
      };
      auto __pos
	= __h->_M_insert_unique_node(__k, __bkt, __code, __node._M_node);
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	2201      	movs	r2, #1
 8002086:	9201      	str	r2, [sp, #4]
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800208c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800208e:	6839      	ldr	r1, [r7, #0]
 8002090:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002092:	f000 faf0 	bl	8002676 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_insert_unique_nodeERS3_jjPNSA_10_Hash_nodeIS8_Lb0EEEj>
 8002096:	4603      	mov	r3, r0
 8002098:	60fb      	str	r3, [r7, #12]
      __node._M_node = nullptr;
 800209a:	2300      	movs	r3, #0
 800209c:	617b      	str	r3, [r7, #20]
      return __pos->second;
 800209e:	f107 030c 	add.w	r3, r7, #12
 80020a2:	4618      	mov	r0, r3
 80020a4:	f000 fb2f 	bl	8002706 <_ZNKSt8__detail14_Node_iteratorISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0ELb0EEptEv>
 80020a8:	4603      	mov	r3, r0
 80020aa:	1d1c      	adds	r4, r3, #4
      typename __hashtable::_Scoped_node __node {
 80020ac:	f107 0310 	add.w	r3, r7, #16
 80020b0:	4618      	mov	r0, r3
 80020b2:	f000 facb 	bl	800264c <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeD1Ev>
    }
 80020b6:	4623      	mov	r3, r4
 80020b8:	4618      	mov	r0, r3
 80020ba:	3734      	adds	r7, #52	; 0x34
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd90      	pop	{r4, r7, pc}
 80020c0:	080145d0 	.word	0x080145d0

080020c4 <_ZNSt8functionIFvmPhjEEC1EOS2_>:
      function(function&& __x) noexcept : _Function_base()
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7fe fd73 	bl	8000bbc <_ZNSt14_Function_baseC1Ev>
	__x.swap(*this);
 80020d6:	6879      	ldr	r1, [r7, #4]
 80020d8:	6838      	ldr	r0, [r7, #0]
 80020da:	f000 f805 	bl	80020e8 <_ZNSt8functionIFvmPhjEE4swapERS2_>
      }
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4618      	mov	r0, r3
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <_ZNSt8functionIFvmPhjEE4swapERS2_>:
      void swap(function& __x) noexcept
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	4611      	mov	r1, r2
 80020f8:	4618      	mov	r0, r3
 80020fa:	f000 fb1d 	bl	8002738 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f103 0208 	add.w	r2, r3, #8
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	3308      	adds	r3, #8
 8002108:	4619      	mov	r1, r3
 800210a:	4610      	mov	r0, r2
 800210c:	f000 fb46 	bl	800279c <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f103 020c 	add.w	r2, r3, #12
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	330c      	adds	r3, #12
 800211a:	4619      	mov	r1, r3
 800211c:	4610      	mov	r0, r2
 800211e:	f000 fb67 	bl	80027f0 <_ZSt4swapIPFvRKSt9_Any_dataOmOPhOjEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISD_ESt18is_move_assignableISD_EEE5valueEvE4typeERSD_SN_>
      }
 8002122:	bf00      	nop
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <_ZNSt14__array_traitsIhLj8EE6_S_ptrERA8_Kh>:
      _S_ptr(const _Type& __t) noexcept
 800212a:	b480      	push	{r7}
 800212c:	b083      	sub	sp, #12
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4618      	mov	r0, r3
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <_ZNSt14__array_traitsIhLj8EE6_S_refERA8_Khj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	4413      	add	r3, r2
 8002150:	4618      	mov	r0, r3
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <_ZNSt14__array_traitsIfLj4EE6_S_refERA4_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	4413      	add	r3, r2
 800216e:	4618      	mov	r0, r3
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr

0800217a <_ZNSt14__array_traitsIsLj8EE6_S_refERA8_Ksj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800217a:	b480      	push	{r7}
 800217c:	b083      	sub	sp, #12
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
 8002182:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	4413      	add	r3, r2
 800218c:	4618      	mov	r0, r3
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <_ZNSt14_Function_base13_Base_managerIZN18tutrc_harurobo_lib4C610C4ERNS1_3CANEEUlmPhjE_E21_M_not_empty_functionIS6_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
	  { return true; }
 80021a0:	2301      	movs	r3, #1
 80021a2:	4618      	mov	r0, r3
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr

080021ae <_ZSt4moveIRZN18tutrc_harurobo_lib4C610C4ERNS0_3CANEEUlmPhjE_EONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 80021ae:	b480      	push	{r7}
 80021b0:	b083      	sub	sp, #12
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4618      	mov	r0, r3
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <_ZNSt14_Function_base13_Base_managerIZN18tutrc_harurobo_lib4C610C4ERNS1_3CANEEUlmPhjE_E15_M_init_functorERSt9_Any_dataOS6_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 80021c4:	b590      	push	{r4, r7, lr}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 80021ce:	6838      	ldr	r0, [r7, #0]
 80021d0:	f7ff ffed 	bl	80021ae <_ZSt4moveIRZN18tutrc_harurobo_lib4C610C4ERNS0_3CANEEUlmPhjE_EONSt16remove_referenceIT_E4typeEOS8_>
 80021d4:	4603      	mov	r3, r0
 80021d6:	4622      	mov	r2, r4
 80021d8:	4619      	mov	r1, r3
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 fb27 	bl	800282e <_ZNSt14_Function_base13_Base_managerIZN18tutrc_harurobo_lib4C610C4ERNS1_3CANEEUlmPhjE_E15_M_init_functorERSt9_Any_dataOS6_St17integral_constantIbLb1EE>
 80021e0:	bf00      	nop
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd90      	pop	{r4, r7, pc}

080021e8 <_ZNSt17_Function_handlerIFvmPhjEZN18tutrc_harurobo_lib4C610C4ERNS2_3CANEEUlmS0_jE_E9_M_invokeERKSt9_Any_dataOmOS0_Oj>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80021e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
 80021f4:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 80021f6:	68f8      	ldr	r0, [r7, #12]
 80021f8:	f000 fb32 	bl	8002860 <_ZNSt14_Function_base13_Base_managerIZN18tutrc_harurobo_lib4C610C4ERNS1_3CANEEUlmPhjE_E14_M_get_pointerERKSt9_Any_data>
 80021fc:	4604      	mov	r4, r0
 80021fe:	68b8      	ldr	r0, [r7, #8]
 8002200:	f000 fb3f 	bl	8002882 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 8002204:	4605      	mov	r5, r0
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 fb46 	bl	8002898 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 800220c:	4606      	mov	r6, r0
 800220e:	6838      	ldr	r0, [r7, #0]
 8002210:	f7ff fef7 	bl	8002002 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8002214:	4603      	mov	r3, r0
 8002216:	4632      	mov	r2, r6
 8002218:	4629      	mov	r1, r5
 800221a:	4620      	mov	r0, r4
 800221c:	f000 fb47 	bl	80028ae <_ZSt10__invoke_rIvRZN18tutrc_harurobo_lib4C610C4ERNS0_3CANEEUlmPhjE_JmS4_jEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueESA_E4typeEOSD_DpOSE_>
				     std::forward<_ArgTypes>(__args)...);
 8002220:	bf00      	nop
      }
 8002222:	3714      	adds	r7, #20
 8002224:	46bd      	mov	sp, r7
 8002226:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002228 <_ZNSt17_Function_handlerIFvmPhjEZN18tutrc_harurobo_lib4C610C4ERNS2_3CANEEUlmS0_jE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8002228:	b590      	push	{r4, r7, lr}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	4613      	mov	r3, r2
 8002234:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8002236:	79fb      	ldrb	r3, [r7, #7]
 8002238:	2b01      	cmp	r3, #1
 800223a:	d109      	bne.n	8002250 <_ZNSt17_Function_handlerIFvmPhjEZN18tutrc_harurobo_lib4C610C4ERNS2_3CANEEUlmS0_jE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800223c:	68f8      	ldr	r0, [r7, #12]
 800223e:	f000 fb5a 	bl	80028f6 <_ZNSt9_Any_data9_M_accessIPZN18tutrc_harurobo_lib4C610C4ERNS1_3CANEEUlmPhjE_EERT_v>
 8002242:	4604      	mov	r4, r0
 8002244:	68b8      	ldr	r0, [r7, #8]
 8002246:	f000 fb0b 	bl	8002860 <_ZNSt14_Function_base13_Base_managerIZN18tutrc_harurobo_lib4C610C4ERNS1_3CANEEUlmPhjE_E14_M_get_pointerERKSt9_Any_data>
 800224a:	4603      	mov	r3, r0
 800224c:	6023      	str	r3, [r4, #0]
	    break;
 800224e:	e005      	b.n	800225c <_ZNSt17_Function_handlerIFvmPhjEZN18tutrc_harurobo_lib4C610C4ERNS2_3CANEEUlmS0_jE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8002250:	79fb      	ldrb	r3, [r7, #7]
 8002252:	461a      	mov	r2, r3
 8002254:	68b9      	ldr	r1, [r7, #8]
 8002256:	68f8      	ldr	r0, [r7, #12]
 8002258:	f000 fb59 	bl	800290e <_ZNSt14_Function_base13_Base_managerIZN18tutrc_harurobo_lib4C610C4ERNS1_3CANEEUlmPhjE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>
	return false;
 800225c:	2300      	movs	r3, #0
      }
 800225e:	4618      	mov	r0, r3
 8002260:	3714      	adds	r7, #20
 8002262:	46bd      	mov	sp, r7
 8002264:	bd90      	pop	{r4, r7, pc}
	...

08002268 <_ZNSt8__detail9_Map_baseIP17TIM_HandleTypeDefSt4pairIKS2_St8functionIFvvEEESaIS8_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEELb1EEixERS4_>:
    _Map_base<_Key, _Pair, _Alloc, _Select1st, _Equal,
 8002268:	b590      	push	{r4, r7, lr}
 800226a:	b08f      	sub	sp, #60	; 0x3c
 800226c:	af02      	add	r7, sp, #8
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
      __hashtable* __h = static_cast<__hashtable*>(this);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	62fb      	str	r3, [r7, #44]	; 0x2c
      __hash_code __code = __h->_M_hash_code(__k);
 8002276:	6839      	ldr	r1, [r7, #0]
 8002278:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800227a:	f000 fb73 	bl	8002964 <_ZNKSt8__detail15_Hash_code_baseIP17TIM_HandleTypeDefSt4pairIKS2_St8functionIFvvEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS4_>
 800227e:	62b8      	str	r0, [r7, #40]	; 0x28
      std::size_t __bkt = __h->_M_bucket_index(__k, __code);
 8002280:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002282:	6839      	ldr	r1, [r7, #0]
 8002284:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002286:	f000 fb81 	bl	800298c <_ZNKSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERS3_j>
 800228a:	6278      	str	r0, [r7, #36]	; 0x24
      if (__node_type* __node = __h->_M_find_node(__bkt, __k, __code))
 800228c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002292:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002294:	f000 fb8c 	bl	80029b0 <_ZNKSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS3_j>
 8002298:	6238      	str	r0, [r7, #32]
 800229a:	6a3b      	ldr	r3, [r7, #32]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d006      	beq.n	80022ae <_ZNSt8__detail9_Map_baseIP17TIM_HandleTypeDefSt4pairIKS2_St8functionIFvvEEESaIS8_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEELb1EEixERS4_+0x46>
	return __node->_M_v().second;
 80022a0:	6a3b      	ldr	r3, [r7, #32]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f000 fb9d 	bl	80029e2 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEEE4_M_vEv>
 80022a8:	4603      	mov	r3, r0
 80022aa:	1d1c      	adds	r4, r3, #4
 80022ac:	e02b      	b.n	8002306 <_ZNSt8__detail9_Map_baseIP17TIM_HandleTypeDefSt4pairIKS2_St8functionIFvvEEESaIS8_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEELb1EEixERS4_+0x9e>
	std::tuple<const key_type&>(__k),
 80022ae:	f107 0318 	add.w	r3, r7, #24
 80022b2:	6839      	ldr	r1, [r7, #0]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f000 fba0 	bl	80029fa <_ZNSt5tupleIJRKP17TIM_HandleTypeDefEEC1ILb1ELb1EEES3_>
      typename __hashtable::_Scoped_node __node {
 80022ba:	f107 0218 	add.w	r2, r7, #24
 80022be:	f107 0010 	add.w	r0, r7, #16
 80022c2:	f107 031c 	add.w	r3, r7, #28
 80022c6:	9300      	str	r3, [sp, #0]
 80022c8:	4613      	mov	r3, r2
 80022ca:	4a11      	ldr	r2, [pc, #68]	; (8002310 <_ZNSt8__detail9_Map_baseIP17TIM_HandleTypeDefSt4pairIKS2_St8functionIFvvEEESaIS8_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEELb1EEixERS4_+0xa8>)
 80022cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80022ce:	f000 fba3 	bl	8002a18 <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJRS3_EESQ_IJEEEEEPNS9_16_Hashtable_allocISaINS9_10_Hash_nodeIS7_Lb0EEEEEEDpOT_>
	= __h->_M_insert_unique_node(__k, __bkt, __code, __node._M_node);
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	2201      	movs	r2, #1
 80022d6:	9201      	str	r2, [sp, #4]
 80022d8:	9300      	str	r3, [sp, #0]
 80022da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022de:	6839      	ldr	r1, [r7, #0]
 80022e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80022e2:	f000 fbd1 	bl	8002a88 <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_insert_unique_nodeERS3_jjPNS9_10_Hash_nodeIS7_Lb0EEEj>
 80022e6:	4603      	mov	r3, r0
 80022e8:	60fb      	str	r3, [r7, #12]
      __node._M_node = nullptr;
 80022ea:	2300      	movs	r3, #0
 80022ec:	617b      	str	r3, [r7, #20]
      return __pos->second;
 80022ee:	f107 030c 	add.w	r3, r7, #12
 80022f2:	4618      	mov	r0, r3
 80022f4:	f000 fc10 	bl	8002b18 <_ZNKSt8__detail14_Node_iteratorISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0ELb0EEptEv>
 80022f8:	4603      	mov	r3, r0
 80022fa:	1d1c      	adds	r4, r3, #4
      typename __hashtable::_Scoped_node __node {
 80022fc:	f107 0310 	add.w	r3, r7, #16
 8002300:	4618      	mov	r0, r3
 8002302:	f000 fbac 	bl	8002a5e <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeD1Ev>
    }
 8002306:	4623      	mov	r3, r4
 8002308:	4618      	mov	r0, r3
 800230a:	3734      	adds	r7, #52	; 0x34
 800230c:	46bd      	mov	sp, r7
 800230e:	bd90      	pop	{r4, r7, pc}
 8002310:	080145d0 	.word	0x080145d0

08002314 <_ZNSt8functionIFvvEEC1EOS1_>:
      function(function&& __x) noexcept : _Function_base()
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4618      	mov	r0, r3
 8002322:	f7fe fc4b 	bl	8000bbc <_ZNSt14_Function_baseC1Ev>
	__x.swap(*this);
 8002326:	6879      	ldr	r1, [r7, #4]
 8002328:	6838      	ldr	r0, [r7, #0]
 800232a:	f000 f805 	bl	8002338 <_ZNSt8functionIFvvEE4swapERS1_>
      }
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4618      	mov	r0, r3
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <_ZNSt8functionIFvvEE4swapERS1_>:
      void swap(function& __x) noexcept
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	4611      	mov	r1, r2
 8002348:	4618      	mov	r0, r3
 800234a:	f000 f9f5 	bl	8002738 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f103 0208 	add.w	r2, r3, #8
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	3308      	adds	r3, #8
 8002358:	4619      	mov	r1, r3
 800235a:	4610      	mov	r0, r2
 800235c:	f000 fa1e 	bl	800279c <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f103 020c 	add.w	r2, r3, #12
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	330c      	adds	r3, #12
 800236a:	4619      	mov	r1, r3
 800236c:	4610      	mov	r0, r2
 800236e:	f000 fbec 	bl	8002b4a <_ZSt4swapIPFvRKSt9_Any_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>
      }
 8002372:	bf00      	nop
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <_ZNSt14__array_traitsIsLj3EE6_S_ptrERA3_Ks>:
      _S_ptr(const _Type& __t) noexcept
 800237a:	b480      	push	{r7}
 800237c:	b083      	sub	sp, #12
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4618      	mov	r0, r3
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <_ZNSt14__array_traitsIsLj3EE6_S_refERA3_Ksj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	4413      	add	r3, r2
 80023a2:	4618      	mov	r0, r3
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr

080023ae <_ZNSt14__array_traitsIhLj4EE6_S_ptrERA4_Kh>:
      _S_ptr(const _Type& __t) noexcept
 80023ae:	b480      	push	{r7}
 80023b0:	b083      	sub	sp, #12
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4618      	mov	r0, r3
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <_ZNSt14__array_traitsIhLj4EE6_S_refERA4_Khj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	4413      	add	r3, r2
 80023d4:	4618      	mov	r0, r3
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <_ZNSt14_Function_base13_Base_managerIZ7cppmainEUlvE_E21_M_not_empty_functionIS1_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
	  { return true; }
 80023e8:	2301      	movs	r3, #1
 80023ea:	4618      	mov	r0, r3
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr

080023f6 <_ZSt4moveIRZ7cppmainEUlvE_EONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 80023f6:	b480      	push	{r7}
 80023f8:	b083      	sub	sp, #12
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4618      	mov	r0, r3
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <_ZNSt14_Function_base13_Base_managerIZ7cppmainEUlvE_E15_M_init_functorERSt9_Any_dataOS1_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 800240c:	b590      	push	{r4, r7, lr}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8002416:	6838      	ldr	r0, [r7, #0]
 8002418:	f7ff ffed 	bl	80023f6 <_ZSt4moveIRZ7cppmainEUlvE_EONSt16remove_referenceIT_E4typeEOS3_>
 800241c:	4603      	mov	r3, r0
 800241e:	4622      	mov	r2, r4
 8002420:	4619      	mov	r1, r3
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 fbb0 	bl	8002b88 <_ZNSt14_Function_base13_Base_managerIZ7cppmainEUlvE_E15_M_init_functorERSt9_Any_dataOS1_St17integral_constantIbLb0EE>
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	bd90      	pop	{r4, r7, pc}

08002430 <_ZNSt17_Function_handlerIFvvEZ7cppmainEUlvE_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f000 fbc2 	bl	8002bc2 <_ZNSt14_Function_base13_Base_managerIZ7cppmainEUlvE_E14_M_get_pointerERKSt9_Any_data>
 800243e:	4603      	mov	r3, r0
 8002440:	4618      	mov	r0, r3
 8002442:	f000 fbcb 	bl	8002bdc <_ZSt10__invoke_rIvRZ7cppmainEUlvE_JEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES5_E4typeEOS8_DpOS9_>
				     std::forward<_ArgTypes>(__args)...);
 8002446:	bf00      	nop
      }
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <_ZNSt17_Function_handlerIFvvEZ7cppmainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800244e:	b590      	push	{r4, r7, lr}
 8002450:	b085      	sub	sp, #20
 8002452:	af00      	add	r7, sp, #0
 8002454:	60f8      	str	r0, [r7, #12]
 8002456:	60b9      	str	r1, [r7, #8]
 8002458:	4613      	mov	r3, r2
 800245a:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800245c:	79fb      	ldrb	r3, [r7, #7]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d109      	bne.n	8002476 <_ZNSt17_Function_handlerIFvvEZ7cppmainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8002462:	68f8      	ldr	r0, [r7, #12]
 8002464:	f000 fbca 	bl	8002bfc <_ZNSt9_Any_data9_M_accessIPZ7cppmainEUlvE_EERT_v>
 8002468:	4604      	mov	r4, r0
 800246a:	68b8      	ldr	r0, [r7, #8]
 800246c:	f000 fba9 	bl	8002bc2 <_ZNSt14_Function_base13_Base_managerIZ7cppmainEUlvE_E14_M_get_pointerERKSt9_Any_data>
 8002470:	4603      	mov	r3, r0
 8002472:	6023      	str	r3, [r4, #0]
	    break;
 8002474:	e005      	b.n	8002482 <_ZNSt17_Function_handlerIFvvEZ7cppmainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8002476:	79fb      	ldrb	r3, [r7, #7]
 8002478:	461a      	mov	r2, r3
 800247a:	68b9      	ldr	r1, [r7, #8]
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	f000 fbc9 	bl	8002c14 <_ZNSt14_Function_base13_Base_managerIZ7cppmainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>
	return false;
 8002482:	2300      	movs	r3, #0
      }
 8002484:	4618      	mov	r0, r3
 8002486:	3714      	adds	r7, #20
 8002488:	46bd      	mov	sp, r7
 800248a:	bd90      	pop	{r4, r7, pc}

0800248c <_ZNSt6vectorIhSaIhEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8002494:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8002498:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 fbe5 	bl	8002c6a <_ZNSt16allocator_traitsISaIhEE8max_sizeERKS0_>
 80024a0:	4603      	mov	r3, r0
 80024a2:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80024a4:	f107 0208 	add.w	r2, r7, #8
 80024a8:	f107 030c 	add.w	r3, r7, #12
 80024ac:	4611      	mov	r1, r2
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7fe fbd3 	bl	8000c5a <_ZSt3minIjERKT_S2_S2_>
 80024b4:	4603      	mov	r3, r0
 80024b6:	681b      	ldr	r3, [r3, #0]
      }
 80024b8:	4618      	mov	r0, r3
 80024ba:	3710      	adds	r7, #16
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <_ZNSaIhEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80024ca:	6839      	ldr	r1, [r7, #0]
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f000 fbd8 	bl	8002c82 <_ZN9__gnu_cxx13new_allocatorIhEC1ERKS1_>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4618      	mov	r0, r3
 80024d6:	3708      	adds	r7, #8
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 80024e6:	6839      	ldr	r1, [r7, #0]
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f7ff ffe9 	bl	80024c0 <_ZNSaIhEC1ERKS_>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f000 fbd2 	bl	8002c9a <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>
	{ }
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4618      	mov	r0, r3
 80024fa:	3708      	adds	r7, #8
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <_ZNSt12_Vector_baseIhSaIhEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 800250a:	6839      	ldr	r1, [r7, #0]
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f000 fbd8 	bl	8002cc2 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 8002512:	4602      	mov	r2, r0
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	441a      	add	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	609a      	str	r2, [r3, #8]
      }
 800252c:	bf00      	nop
 800252e:	3708      	adds	r7, #8
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <_ZSt27__uninitialized_default_n_aIPhjhET_S1_T0_RSaIT1_E>:
	}
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline _ForwardIterator
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n, 
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
				allocator<_Tp>&)
    { return std::__uninitialized_default_n(__first, __n); }
 8002540:	68b9      	ldr	r1, [r7, #8]
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	f000 fbd1 	bl	8002cea <_ZSt25__uninitialized_default_nIPhjET_S1_T0_>
 8002548:	4603      	mov	r3, r0
 800254a:	4618      	mov	r0, r3
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <_ZNKSt8__detail15_Hash_code_baseIP19FDCAN_HandleTypeDefSt4pairIKS2_St8functionIFvmPhjEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS4_>:
		      const _H1& __h1, const _H2& __h2,
		      const _Default_ranged_hash&)
      : __ebo_extract_key(__ex), __ebo_h1(__h1), __ebo_h2(__h2) { }

      __hash_code
      _M_hash_code(const _Key& __k) const
 8002552:	b580      	push	{r7, lr}
 8002554:	b082      	sub	sp, #8
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
 800255a:	6039      	str	r1, [r7, #0]
      {
	static_assert(__is_invocable<const _H1&, const _Key&>{},
	    "hash function must be invocable with an argument of key type");
	return _M_h1()(__k);
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f000 fbd4 	bl	8002d0a <_ZNKSt8__detail15_Hash_code_baseIP19FDCAN_HandleTypeDefSt4pairIKS2_St8functionIFvmPhjEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE5_M_h1Ev>
 8002562:	4602      	mov	r2, r0
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4619      	mov	r1, r3
 800256a:	4610      	mov	r0, r2
 800256c:	f000 fbd9 	bl	8002d22 <_ZNKSt4hashIP19FDCAN_HandleTypeDefEclES1_>
 8002570:	4603      	mov	r3, r0
      }
 8002572:	4618      	mov	r0, r3
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <_ZNKSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERS3_j>:
      size_type
      _M_bucket_index(__node_type* __n) const noexcept
      { return __hash_code_base::_M_bucket_index(__n, _M_bucket_count); }

      size_type
      _M_bucket_index(const key_type& __k, __hash_code __c) const
 800257a:	b580      	push	{r7, lr}
 800257c:	b084      	sub	sp, #16
 800257e:	af00      	add	r7, sp, #0
 8002580:	60f8      	str	r0, [r7, #12]
 8002582:	60b9      	str	r1, [r7, #8]
 8002584:	607a      	str	r2, [r7, #4]
      { return __hash_code_base::_M_bucket_index(__k, __c, _M_bucket_count); }
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	68b9      	ldr	r1, [r7, #8]
 800258e:	68f8      	ldr	r0, [r7, #12]
 8002590:	f000 fbd3 	bl	8002d3a <_ZNKSt8__detail15_Hash_code_baseIP19FDCAN_HandleTypeDefSt4pairIKS2_St8functionIFvmPhjEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexERS4_jj>
 8002594:	4603      	mov	r3, r0
 8002596:	4618      	mov	r0, r3
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <_ZNKSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS3_j>:
      // Find the node before the one matching the criteria.
      __node_base*
      _M_find_before_node(size_type, const key_type&, __hash_code) const;

      __node_type*
      _M_find_node(size_type __bkt, const key_type& __key,
 800259e:	b580      	push	{r7, lr}
 80025a0:	b086      	sub	sp, #24
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	60f8      	str	r0, [r7, #12]
 80025a6:	60b9      	str	r1, [r7, #8]
 80025a8:	607a      	str	r2, [r7, #4]
 80025aa:	603b      	str	r3, [r7, #0]
		   __hash_code __c) const
      {
	__node_base* __before_n = _M_find_before_node(__bkt, __key, __c);
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	68b9      	ldr	r1, [r7, #8]
 80025b2:	68f8      	ldr	r0, [r7, #12]
 80025b4:	f000 fbd6 	bl	8002d64 <_ZNKSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j>
 80025b8:	6178      	str	r0, [r7, #20]
	if (__before_n)
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d002      	beq.n	80025c6 <_ZNKSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS3_j+0x28>
	  return static_cast<__node_type*>(__before_n->_M_nxt);
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	e000      	b.n	80025c8 <_ZNKSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS3_j+0x2a>
	return nullptr;
 80025c6:	2300      	movs	r3, #0
      }
 80025c8:	4618      	mov	r0, r3
 80025ca:	3718      	adds	r7, #24
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEE4_M_vEv>:
      _M_v() noexcept
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
      { return *_M_valptr(); }
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f000 fc06 	bl	8002dea <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEE9_M_valptrEv>
 80025de:	4603      	mov	r3, r0
 80025e0:	4618      	mov	r0, r3
 80025e2:	3708      	adds	r7, #8
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <_ZNSt5tupleIJRKP19FDCAN_HandleTypeDefEEC1ILb1ELb1EEES3_>:
	: _Inherited() { }

      template<bool _NotEmpty = (sizeof...(_Elements) >= 1),
	       _ImplicitCtor<_NotEmpty, const _Elements&...> = true>
	constexpr
	tuple(const _Elements&... __elements)
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
	noexcept(__nothrow_constructible<const _Elements&...>())
	: _Inherited(__elements...) { }
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6839      	ldr	r1, [r7, #0]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f000 fc05 	bl	8002e06 <_ZNSt11_Tuple_implILj0EJRKP19FDCAN_HandleTypeDefEEC1ES3_>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4618      	mov	r0, r3
 8002600:	3708      	adds	r7, #8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJRS3_EESR_IJEEEEEPNSA_16_Hashtable_allocISaINSA_10_Hash_nodeIS8_Lb0EEEEEEDpOT_>:
	  _Scoped_node(__hashtable_alloc* __h, _Args&&... __args)
 8002606:	b5b0      	push	{r4, r5, r7, lr}
 8002608:	b084      	sub	sp, #16
 800260a:	af00      	add	r7, sp, #0
 800260c:	60f8      	str	r0, [r7, #12]
 800260e:	60b9      	str	r1, [r7, #8]
 8002610:	607a      	str	r2, [r7, #4]
 8002612:	603b      	str	r3, [r7, #0]
	    _M_node(__h->_M_allocate_node(std::forward<_Args>(__args)...))
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	68ba      	ldr	r2, [r7, #8]
 8002618:	601a      	str	r2, [r3, #0]
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 fc02 	bl	8002e24 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8002620:	4604      	mov	r4, r0
 8002622:	6838      	ldr	r0, [r7, #0]
 8002624:	f000 fc09 	bl	8002e3a <_ZSt7forwardISt5tupleIJRKP19FDCAN_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8002628:	4605      	mov	r5, r0
 800262a:	6a38      	ldr	r0, [r7, #32]
 800262c:	f000 fc10 	bl	8002e50 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8002630:	4603      	mov	r3, r0
 8002632:	462a      	mov	r2, r5
 8002634:	4621      	mov	r1, r4
 8002636:	68b8      	ldr	r0, [r7, #8]
 8002638:	f000 fc2f 	bl	8002e9a <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEE16_M_allocate_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS5_EESI_IJEEEEEPSB_DpOT_>
 800263c:	4602      	mov	r2, r0
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	605a      	str	r2, [r3, #4]
	  { }
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	4618      	mov	r0, r3
 8002646:	3710      	adds	r7, #16
 8002648:	46bd      	mov	sp, r7
 800264a:	bdb0      	pop	{r4, r5, r7, pc}

0800264c <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeD1Ev>:
	~_Scoped_node() { if (_M_node) _M_h->_M_deallocate_node(_M_node); };
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d007      	beq.n	800266c <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeD1Ev+0x20>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	4619      	mov	r1, r3
 8002666:	4610      	mov	r0, r2
 8002668:	f000 fc57 	bl	8002f1a <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEE18_M_deallocate_nodeEPSB_>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4618      	mov	r0, r3
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_insert_unique_nodeERS3_jjPNSA_10_Hash_nodeIS8_Lb0EEEj>:
  template<typename _Key, typename _Value,
	   typename _Alloc, typename _ExtractKey, typename _Equal,
	   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
	   typename _Traits>
    auto
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8002676:	b590      	push	{r4, r7, lr}
 8002678:	b08d      	sub	sp, #52	; 0x34
 800267a:	af02      	add	r7, sp, #8
 800267c:	60f8      	str	r0, [r7, #12]
 800267e:	60b9      	str	r1, [r7, #8]
 8002680:	607a      	str	r2, [r7, #4]
 8002682:	603b      	str	r3, [r7, #0]
    _M_insert_unique_node(const key_type& __k, size_type __bkt,
			  __hash_code __code, __node_type* __node,
			  size_type __n_elt)
    -> iterator
    {
      const __rehash_state& __saved_state = _M_rehash_policy._M_state();
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	3310      	adds	r3, #16
 8002688:	4618      	mov	r0, r3
 800268a:	f7fe fada 	bl	8000c42 <_ZNKSt8__detail20_Prime_rehash_policy8_M_stateEv>
 800268e:	4603      	mov	r3, r0
 8002690:	61fb      	str	r3, [r7, #28]
 8002692:	f107 031c 	add.w	r3, r7, #28
 8002696:	627b      	str	r3, [r7, #36]	; 0x24
      std::pair<bool, std::size_t> __do_rehash
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count,
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f103 0110 	add.w	r1, r3, #16
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	685a      	ldr	r2, [r3, #4]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	68dc      	ldr	r4, [r3, #12]
 80026a6:	f107 0014 	add.w	r0, r7, #20
 80026aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026ac:	9300      	str	r3, [sp, #0]
 80026ae:	4623      	mov	r3, r4
 80026b0:	f00e fc06 	bl	8010ec0 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj>
					  __n_elt);

      if (__do_rehash.first)
 80026b4:	7d3b      	ldrb	r3, [r7, #20]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00b      	beq.n	80026d2 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_insert_unique_nodeERS3_jjPNSA_10_Hash_nodeIS8_Lb0EEEj+0x5c>
	{
	  _M_rehash(__do_rehash.second, __saved_state);
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026be:	4619      	mov	r1, r3
 80026c0:	68f8      	ldr	r0, [r7, #12]
 80026c2:	f000 fc44 	bl	8002f4e <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_rehashEjRKj>
	  __bkt = _M_bucket_index(__k, __code);
 80026c6:	683a      	ldr	r2, [r7, #0]
 80026c8:	68b9      	ldr	r1, [r7, #8]
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	f7ff ff55 	bl	800257a <_ZNKSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERS3_j>
 80026d0:	6078      	str	r0, [r7, #4]
	}

      this->_M_store_code(__node, __code);
 80026d2:	683a      	ldr	r2, [r7, #0]
 80026d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80026d6:	68f8      	ldr	r0, [r7, #12]
 80026d8:	f000 fc48 	bl	8002f6c <_ZNKSt8__detail15_Hash_code_baseIP19FDCAN_HandleTypeDefSt4pairIKS2_St8functionIFvmPhjEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE13_M_store_codeEPNS_10_Hash_nodeIS9_Lb0EEEj>

      // Always insert at the beginning of the bucket.
      _M_insert_bucket_begin(__bkt, __node);
 80026dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026de:	6879      	ldr	r1, [r7, #4]
 80026e0:	68f8      	ldr	r0, [r7, #12]
 80026e2:	f000 fc4f 	bl	8002f84 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNSA_10_Hash_nodeIS8_Lb0EEE>
      ++_M_element_count;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	1c5a      	adds	r2, r3, #1
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	60da      	str	r2, [r3, #12]
      return iterator(__node);
 80026f0:	f107 0320 	add.w	r3, r7, #32
 80026f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80026f6:	4618      	mov	r0, r3
 80026f8:	f000 fc8a 	bl	8003010 <_ZNSt8__detail14_Node_iteratorISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0ELb0EEC1EPNS_10_Hash_nodeIS9_Lb0EEE>
 80026fc:	6a3b      	ldr	r3, [r7, #32]
    }
 80026fe:	4618      	mov	r0, r3
 8002700:	372c      	adds	r7, #44	; 0x2c
 8002702:	46bd      	mov	sp, r7
 8002704:	bd90      	pop	{r4, r7, pc}

08002706 <_ZNKSt8__detail14_Node_iteratorISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0ELb0EEptEv>:
      operator->() const noexcept
 8002706:	b580      	push	{r7, lr}
 8002708:	b082      	sub	sp, #8
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
      { return this->_M_cur->_M_valptr(); }
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f000 fb69 	bl	8002dea <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEE9_M_valptrEv>
 8002718:	4603      	mov	r3, r0
 800271a:	4618      	mov	r0, r3
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8002722:	b480      	push	{r7}
 8002724:	b083      	sub	sp, #12
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4618      	mov	r0, r3
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f7ff ffed 	bl	8002722 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8002748:	4602      	mov	r2, r0
 800274a:	f107 0308 	add.w	r3, r7, #8
 800274e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002752:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8002756:	6838      	ldr	r0, [r7, #0]
 8002758:	f7ff ffe3 	bl	8002722 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800275c:	4602      	mov	r2, r0
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002764:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8002768:	f107 0308 	add.w	r3, r7, #8
 800276c:	4618      	mov	r0, r3
 800276e:	f7ff ffd8 	bl	8002722 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8002772:	4602      	mov	r2, r0
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	e892 0003 	ldmia.w	r2, {r0, r1}
 800277a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800277e:	bf00      	nop
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8002786:	b480      	push	{r7}
 8002788:	b083      	sub	sp, #12
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4618      	mov	r0, r3
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f7ff ffed 	bl	8002786 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80027ac:	4603      	mov	r3, r0
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80027b2:	6838      	ldr	r0, [r7, #0]
 80027b4:	f7ff ffe7 	bl	8002786 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80027b8:	4603      	mov	r3, r0
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80027c0:	f107 030c 	add.w	r3, r7, #12
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7ff ffde 	bl	8002786 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80027ca:	4603      	mov	r3, r0
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	601a      	str	r2, [r3, #0]
    }
 80027d2:	bf00      	nop
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <_ZSt4moveIRPFvRKSt9_Any_dataOmOPhOjEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 80027da:	b480      	push	{r7}
 80027dc:	b083      	sub	sp, #12
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4618      	mov	r0, r3
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <_ZSt4swapIPFvRKSt9_Any_dataOmOPhOjEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISD_ESt18is_move_assignableISD_EEE5valueEvE4typeERSD_SN_>:
    swap(_Tp& __a, _Tp& __b)
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f7ff ffed 	bl	80027da <_ZSt4moveIRPFvRKSt9_Any_dataOmOPhOjEEONSt16remove_referenceIT_E4typeEOSB_>
 8002800:	4603      	mov	r3, r0
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8002806:	6838      	ldr	r0, [r7, #0]
 8002808:	f7ff ffe7 	bl	80027da <_ZSt4moveIRPFvRKSt9_Any_dataOmOPhOjEEONSt16remove_referenceIT_E4typeEOSB_>
 800280c:	4603      	mov	r3, r0
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8002814:	f107 030c 	add.w	r3, r7, #12
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff ffde 	bl	80027da <_ZSt4moveIRPFvRKSt9_Any_dataOmOPhOjEEONSt16remove_referenceIT_E4typeEOSB_>
 800281e:	4603      	mov	r3, r0
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	601a      	str	r2, [r3, #0]
    }
 8002826:	bf00      	nop
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <_ZNSt14_Function_base13_Base_managerIZN18tutrc_harurobo_lib4C610C4ERNS1_3CANEEUlmPhjE_E15_M_init_functorERSt9_Any_dataOS6_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 800282e:	b590      	push	{r4, r7, lr}
 8002830:	b085      	sub	sp, #20
 8002832:	af00      	add	r7, sp, #0
 8002834:	60f8      	str	r0, [r7, #12]
 8002836:	60b9      	str	r1, [r7, #8]
 8002838:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 800283a:	68b8      	ldr	r0, [r7, #8]
 800283c:	f7ff fcb7 	bl	80021ae <_ZSt4moveIRZN18tutrc_harurobo_lib4C610C4ERNS0_3CANEEUlmPhjE_EONSt16remove_referenceIT_E4typeEOS8_>
 8002840:	4604      	mov	r4, r0
 8002842:	68f8      	ldr	r0, [r7, #12]
 8002844:	f7fe f9a4 	bl	8000b90 <_ZNSt9_Any_data9_M_accessEv>
 8002848:	4603      	mov	r3, r0
 800284a:	4619      	mov	r1, r3
 800284c:	2004      	movs	r0, #4
 800284e:	f7fe f83a 	bl	80008c6 <_ZnwjPv>
 8002852:	4602      	mov	r2, r0
 8002854:	6823      	ldr	r3, [r4, #0]
 8002856:	6013      	str	r3, [r2, #0]
 8002858:	bf00      	nop
 800285a:	3714      	adds	r7, #20
 800285c:	46bd      	mov	sp, r7
 800285e:	bd90      	pop	{r4, r7, pc}

08002860 <_ZNSt14_Function_base13_Base_managerIZN18tutrc_harurobo_lib4C610C4ERNS1_3CANEEUlmPhjE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f000 fbe0 	bl	800302e <_ZNKSt9_Any_data9_M_accessIZN18tutrc_harurobo_lib4C610C4ERNS1_3CANEEUlmPhjE_EERKT_v>
 800286e:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8002870:	68f8      	ldr	r0, [r7, #12]
 8002872:	f000 fbe8 	bl	8003046 <_ZSt11__addressofIKZN18tutrc_harurobo_lib4C610C4ERNS0_3CANEEUlmPhjE_EPT_RS7_>
 8002876:	4603      	mov	r3, r0
 8002878:	bf00      	nop
	}
 800287a:	4618      	mov	r0, r3
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002882:	b480      	push	{r7}
 8002884:	b083      	sub	sp, #12
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4618      	mov	r0, r3
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4618      	mov	r0, r3
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr

080028ae <_ZSt10__invoke_rIvRZN18tutrc_harurobo_lib4C610C4ERNS0_3CANEEUlmPhjE_JmS4_jEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueESA_E4typeEOSD_DpOSE_>:
    }

  // INVOKE<R> when R is cv void
  template<typename _Res, typename _Callable, typename... _Args>
    _GLIBCXX14_CONSTEXPR __can_invoke_as_void<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 80028ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af02      	add	r7, sp, #8
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
 80028bc:	603b      	str	r3, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 80028be:	68f8      	ldr	r0, [r7, #12]
 80028c0:	f000 fbcc 	bl	800305c <_ZSt7forwardIRZN18tutrc_harurobo_lib4C610C4ERNS0_3CANEEUlmPhjE_EOT_RNSt16remove_referenceIS7_E4typeE>
 80028c4:	4604      	mov	r4, r0
 80028c6:	68b8      	ldr	r0, [r7, #8]
 80028c8:	f7ff ffdb 	bl	8002882 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 80028cc:	4605      	mov	r5, r0
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f7ff ffe2 	bl	8002898 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 80028d4:	4606      	mov	r6, r0
 80028d6:	6838      	ldr	r0, [r7, #0]
 80028d8:	f7ff fb93 	bl	8002002 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80028dc:	4603      	mov	r3, r0
 80028de:	9300      	str	r3, [sp, #0]
 80028e0:	4633      	mov	r3, r6
 80028e2:	462a      	mov	r2, r5
 80028e4:	4621      	mov	r1, r4
 80028e6:	4640      	mov	r0, r8
 80028e8:	f000 fbc3 	bl	8003072 <_ZSt13__invoke_implIvRZN18tutrc_harurobo_lib4C610C4ERNS0_3CANEEUlmPhjE_JmS4_jEET_St14__invoke_otherOT0_DpOT1_>
				 std::forward<_Args>(__args)...);
    }
 80028ec:	bf00      	nop
 80028ee:	3710      	adds	r7, #16
 80028f0:	46bd      	mov	sp, r7
 80028f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080028f6 <_ZNSt9_Any_data9_M_accessIPZN18tutrc_harurobo_lib4C610C4ERNS1_3CANEEUlmPhjE_EERT_v>:
      _M_access()
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b082      	sub	sp, #8
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7fe f946 	bl	8000b90 <_ZNSt9_Any_data9_M_accessEv>
 8002904:	4603      	mov	r3, r0
 8002906:	4618      	mov	r0, r3
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <_ZNSt14_Function_base13_Base_managerIZN18tutrc_harurobo_lib4C610C4ERNS1_3CANEEUlmPhjE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 800290e:	b5b0      	push	{r4, r5, r7, lr}
 8002910:	b084      	sub	sp, #16
 8002912:	af00      	add	r7, sp, #0
 8002914:	60f8      	str	r0, [r7, #12]
 8002916:	60b9      	str	r1, [r7, #8]
 8002918:	4613      	mov	r3, r2
 800291a:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800291c:	79fb      	ldrb	r3, [r7, #7]
 800291e:	2b03      	cmp	r3, #3
 8002920:	d016      	beq.n	8002950 <_ZNSt14_Function_base13_Base_managerIZN18tutrc_harurobo_lib4C610C4ERNS1_3CANEEUlmPhjE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x42>
 8002922:	2b03      	cmp	r3, #3
 8002924:	dc19      	bgt.n	800295a <_ZNSt14_Function_base13_Base_managerIZN18tutrc_harurobo_lib4C610C4ERNS1_3CANEEUlmPhjE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x4c>
 8002926:	2b01      	cmp	r3, #1
 8002928:	d002      	beq.n	8002930 <_ZNSt14_Function_base13_Base_managerIZN18tutrc_harurobo_lib4C610C4ERNS1_3CANEEUlmPhjE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x22>
 800292a:	2b02      	cmp	r3, #2
 800292c:	d00a      	beq.n	8002944 <_ZNSt14_Function_base13_Base_managerIZN18tutrc_harurobo_lib4C610C4ERNS1_3CANEEUlmPhjE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x36>
 800292e:	e014      	b.n	800295a <_ZNSt14_Function_base13_Base_managerIZN18tutrc_harurobo_lib4C610C4ERNS1_3CANEEUlmPhjE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8002930:	68f8      	ldr	r0, [r7, #12]
 8002932:	f7ff ffe0 	bl	80028f6 <_ZNSt9_Any_data9_M_accessIPZN18tutrc_harurobo_lib4C610C4ERNS1_3CANEEUlmPhjE_EERT_v>
 8002936:	4604      	mov	r4, r0
 8002938:	68b8      	ldr	r0, [r7, #8]
 800293a:	f7ff ff91 	bl	8002860 <_ZNSt14_Function_base13_Base_managerIZN18tutrc_harurobo_lib4C610C4ERNS1_3CANEEUlmPhjE_E14_M_get_pointerERKSt9_Any_data>
 800293e:	4603      	mov	r3, r0
 8002940:	6023      	str	r3, [r4, #0]
	      break;
 8002942:	e00a      	b.n	800295a <_ZNSt14_Function_base13_Base_managerIZN18tutrc_harurobo_lib4C610C4ERNS1_3CANEEUlmPhjE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8002944:	462a      	mov	r2, r5
 8002946:	68b9      	ldr	r1, [r7, #8]
 8002948:	68f8      	ldr	r0, [r7, #12]
 800294a:	f000 fbb5 	bl	80030b8 <_ZNSt14_Function_base13_Base_managerIZN18tutrc_harurobo_lib4C610C4ERNS1_3CANEEUlmPhjE_E8_M_cloneERSt9_Any_dataRKS8_St17integral_constantIbLb1EE>
	      break;
 800294e:	e004      	b.n	800295a <_ZNSt14_Function_base13_Base_managerIZN18tutrc_harurobo_lib4C610C4ERNS1_3CANEEUlmPhjE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8002950:	4621      	mov	r1, r4
 8002952:	68f8      	ldr	r0, [r7, #12]
 8002954:	f000 fbc9 	bl	80030ea <_ZNSt14_Function_base13_Base_managerIZN18tutrc_harurobo_lib4C610C4ERNS1_3CANEEUlmPhjE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8002958:	bf00      	nop
	  return false;
 800295a:	2300      	movs	r3, #0
	}
 800295c:	4618      	mov	r0, r3
 800295e:	3710      	adds	r7, #16
 8002960:	46bd      	mov	sp, r7
 8002962:	bdb0      	pop	{r4, r5, r7, pc}

08002964 <_ZNKSt8__detail15_Hash_code_baseIP17TIM_HandleTypeDefSt4pairIKS2_St8functionIFvvEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS4_>:
      _M_hash_code(const _Key& __k) const
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
	return _M_h1()(__k);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 fbc7 	bl	8003102 <_ZNKSt8__detail15_Hash_code_baseIP17TIM_HandleTypeDefSt4pairIKS2_St8functionIFvvEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE5_M_h1Ev>
 8002974:	4602      	mov	r2, r0
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4619      	mov	r1, r3
 800297c:	4610      	mov	r0, r2
 800297e:	f000 fbcc 	bl	800311a <_ZNKSt4hashIP17TIM_HandleTypeDefEclES1_>
 8002982:	4603      	mov	r3, r0
      }
 8002984:	4618      	mov	r0, r3
 8002986:	3708      	adds	r7, #8
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <_ZNKSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERS3_j>:
      _M_bucket_index(const key_type& __k, __hash_code __c) const
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
      { return __hash_code_base::_M_bucket_index(__k, __c, _M_bucket_count); }
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	68b9      	ldr	r1, [r7, #8]
 80029a0:	68f8      	ldr	r0, [r7, #12]
 80029a2:	f000 fbc6 	bl	8003132 <_ZNKSt8__detail15_Hash_code_baseIP17TIM_HandleTypeDefSt4pairIKS2_St8functionIFvvEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexERS4_jj>
 80029a6:	4603      	mov	r3, r0
 80029a8:	4618      	mov	r0, r3
 80029aa:	3710      	adds	r7, #16
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <_ZNKSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS3_j>:
      _M_find_node(size_type __bkt, const key_type& __key,
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
 80029bc:	603b      	str	r3, [r7, #0]
	__node_base* __before_n = _M_find_before_node(__bkt, __key, __c);
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	68b9      	ldr	r1, [r7, #8]
 80029c4:	68f8      	ldr	r0, [r7, #12]
 80029c6:	f000 fbc9 	bl	800315c <_ZNKSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j>
 80029ca:	6178      	str	r0, [r7, #20]
	if (__before_n)
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d002      	beq.n	80029d8 <_ZNKSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS3_j+0x28>
	  return static_cast<__node_type*>(__before_n->_M_nxt);
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	e000      	b.n	80029da <_ZNKSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS3_j+0x2a>
	return nullptr;
 80029d8:	2300      	movs	r3, #0
      }
 80029da:	4618      	mov	r0, r3
 80029dc:	3718      	adds	r7, #24
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEEE4_M_vEv>:
      _M_v() noexcept
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b082      	sub	sp, #8
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
      { return *_M_valptr(); }
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 fbf9 	bl	80031e2 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEEE9_M_valptrEv>
 80029f0:	4603      	mov	r3, r0
 80029f2:	4618      	mov	r0, r3
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <_ZNSt5tupleIJRKP17TIM_HandleTypeDefEEC1ILb1ELb1EEES3_>:
	tuple(const _Elements&... __elements)
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b082      	sub	sp, #8
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
 8002a02:	6039      	str	r1, [r7, #0]
	: _Inherited(__elements...) { }
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6839      	ldr	r1, [r7, #0]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f000 fbf8 	bl	80031fe <_ZNSt11_Tuple_implILj0EJRKP17TIM_HandleTypeDefEEC1ES3_>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4618      	mov	r0, r3
 8002a12:	3708      	adds	r7, #8
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJRS3_EESQ_IJEEEEEPNS9_16_Hashtable_allocISaINS9_10_Hash_nodeIS7_Lb0EEEEEEDpOT_>:
	  _Scoped_node(__hashtable_alloc* __h, _Args&&... __args)
 8002a18:	b5b0      	push	{r4, r5, r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]
 8002a24:	603b      	str	r3, [r7, #0]
	    _M_node(__h->_M_allocate_node(std::forward<_Args>(__args)...))
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	68ba      	ldr	r2, [r7, #8]
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 f9f9 	bl	8002e24 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8002a32:	4604      	mov	r4, r0
 8002a34:	6838      	ldr	r0, [r7, #0]
 8002a36:	f000 fbf1 	bl	800321c <_ZSt7forwardISt5tupleIJRKP17TIM_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8002a3a:	4605      	mov	r5, r0
 8002a3c:	6a38      	ldr	r0, [r7, #32]
 8002a3e:	f000 fa07 	bl	8002e50 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8002a42:	4603      	mov	r3, r0
 8002a44:	462a      	mov	r2, r5
 8002a46:	4621      	mov	r1, r4
 8002a48:	68b8      	ldr	r0, [r7, #8]
 8002a4a:	f000 fc0c 	bl	8003266 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEE16_M_allocate_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS5_EESH_IJEEEEEPSA_DpOT_>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	605a      	str	r2, [r3, #4]
	  { }
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	4618      	mov	r0, r3
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bdb0      	pop	{r4, r5, r7, pc}

08002a5e <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeD1Ev>:
	~_Scoped_node() { if (_M_node) _M_h->_M_deallocate_node(_M_node); };
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b082      	sub	sp, #8
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d007      	beq.n	8002a7e <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeD1Ev+0x20>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	4619      	mov	r1, r3
 8002a78:	4610      	mov	r0, r2
 8002a7a:	f000 fc34 	bl	80032e6 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEE18_M_deallocate_nodeEPSA_>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4618      	mov	r0, r3
 8002a82:	3708      	adds	r7, #8
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_insert_unique_nodeERS3_jjPNS9_10_Hash_nodeIS7_Lb0EEEj>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8002a88:	b590      	push	{r4, r7, lr}
 8002a8a:	b08d      	sub	sp, #52	; 0x34
 8002a8c:	af02      	add	r7, sp, #8
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
 8002a94:	603b      	str	r3, [r7, #0]
      const __rehash_state& __saved_state = _M_rehash_policy._M_state();
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	3310      	adds	r3, #16
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7fe f8d1 	bl	8000c42 <_ZNKSt8__detail20_Prime_rehash_policy8_M_stateEv>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	61fb      	str	r3, [r7, #28]
 8002aa4:	f107 031c 	add.w	r3, r7, #28
 8002aa8:	627b      	str	r3, [r7, #36]	; 0x24
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count,
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f103 0110 	add.w	r1, r3, #16
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	685a      	ldr	r2, [r3, #4]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	68dc      	ldr	r4, [r3, #12]
 8002ab8:	f107 0014 	add.w	r0, r7, #20
 8002abc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002abe:	9300      	str	r3, [sp, #0]
 8002ac0:	4623      	mov	r3, r4
 8002ac2:	f00e f9fd 	bl	8010ec0 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj>
      if (__do_rehash.first)
 8002ac6:	7d3b      	ldrb	r3, [r7, #20]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d00b      	beq.n	8002ae4 <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_insert_unique_nodeERS3_jjPNS9_10_Hash_nodeIS7_Lb0EEEj+0x5c>
	  _M_rehash(__do_rehash.second, __saved_state);
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	68f8      	ldr	r0, [r7, #12]
 8002ad4:	f000 fc21 	bl	800331a <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_rehashEjRKj>
	  __bkt = _M_bucket_index(__k, __code);
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	68b9      	ldr	r1, [r7, #8]
 8002adc:	68f8      	ldr	r0, [r7, #12]
 8002ade:	f7ff ff55 	bl	800298c <_ZNKSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERS3_j>
 8002ae2:	6078      	str	r0, [r7, #4]
      this->_M_store_code(__node, __code);
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	f000 fc25 	bl	8003338 <_ZNKSt8__detail15_Hash_code_baseIP17TIM_HandleTypeDefSt4pairIKS2_St8functionIFvvEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE13_M_store_codeEPNS_10_Hash_nodeIS8_Lb0EEEj>
      _M_insert_bucket_begin(__bkt, __node);
 8002aee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002af0:	6879      	ldr	r1, [r7, #4]
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	f000 fc2c 	bl	8003350 <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS9_10_Hash_nodeIS7_Lb0EEE>
      ++_M_element_count;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	1c5a      	adds	r2, r3, #1
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	60da      	str	r2, [r3, #12]
      return iterator(__node);
 8002b02:	f107 0320 	add.w	r3, r7, #32
 8002b06:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f000 fc67 	bl	80033dc <_ZNSt8__detail14_Node_iteratorISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0ELb0EEC1EPNS_10_Hash_nodeIS8_Lb0EEE>
 8002b0e:	6a3b      	ldr	r3, [r7, #32]
    }
 8002b10:	4618      	mov	r0, r3
 8002b12:	372c      	adds	r7, #44	; 0x2c
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd90      	pop	{r4, r7, pc}

08002b18 <_ZNKSt8__detail14_Node_iteratorISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0ELb0EEptEv>:
      operator->() const noexcept
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
      { return this->_M_cur->_M_valptr(); }
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f000 fb5c 	bl	80031e2 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEEE9_M_valptrEv>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3708      	adds	r7, #8
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr

08002b4a <_ZSt4swapIPFvRKSt9_Any_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>:
    swap(_Tp& __a, _Tp& __b)
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b084      	sub	sp, #16
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
 8002b52:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f7ff ffed 	bl	8002b34 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8002b60:	6838      	ldr	r0, [r7, #0]
 8002b62:	f7ff ffe7 	bl	8002b34 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8002b66:	4603      	mov	r3, r0
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8002b6e:	f107 030c 	add.w	r3, r7, #12
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7ff ffde 	bl	8002b34 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	601a      	str	r2, [r3, #0]
    }
 8002b80:	bf00      	nop
 8002b82:	3710      	adds	r7, #16
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <_ZNSt14_Function_base13_Base_managerIZ7cppmainEUlvE_E15_M_init_functorERSt9_Any_dataOS1_St17integral_constantIbLb0EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
 8002b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	713a      	strb	r2, [r7, #4]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8002b94:	68b8      	ldr	r0, [r7, #8]
 8002b96:	f7ff fc2e 	bl	80023f6 <_ZSt4moveIRZ7cppmainEUlvE_EONSt16remove_referenceIT_E4typeEOS3_>
 8002b9a:	4606      	mov	r6, r0
 8002b9c:	2010      	movs	r0, #16
 8002b9e:	f00e f929 	bl	8010df4 <_Znwj>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	461d      	mov	r5, r3
 8002ba6:	462c      	mov	r4, r5
 8002ba8:	4633      	mov	r3, r6
 8002baa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002bb0:	68f8      	ldr	r0, [r7, #12]
 8002bb2:	f000 f823 	bl	8002bfc <_ZNSt9_Any_data9_M_accessIPZ7cppmainEUlvE_EERT_v>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	601d      	str	r5, [r3, #0]
 8002bba:	bf00      	nop
 8002bbc:	3714      	adds	r7, #20
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002bc2 <_ZNSt14_Function_base13_Base_managerIZ7cppmainEUlvE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b082      	sub	sp, #8
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
	    return __source._M_access<_Functor*>();
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 fc15 	bl	80033fa <_ZNKSt9_Any_data9_M_accessIPZ7cppmainEUlvE_EERKT_v>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	681b      	ldr	r3, [r3, #0]
	}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3708      	adds	r7, #8
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <_ZSt10__invoke_rIvRZ7cppmainEUlvE_JEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES5_E4typeEOS8_DpOS9_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8002bdc:	b590      	push	{r4, r7, lr}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f000 fc14 	bl	8003412 <_ZSt7forwardIRZ7cppmainEUlvE_EOT_RNSt16remove_referenceIS2_E4typeE>
 8002bea:	4603      	mov	r3, r0
 8002bec:	4619      	mov	r1, r3
 8002bee:	4620      	mov	r0, r4
 8002bf0:	f000 fc1a 	bl	8003428 <_ZSt13__invoke_implIvRZ7cppmainEUlvE_JEET_St14__invoke_otherOT0_DpOT1_>
    }
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd90      	pop	{r4, r7, pc}

08002bfc <_ZNSt9_Any_data9_M_accessIPZ7cppmainEUlvE_EERT_v>:
      _M_access()
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f7fd ffc3 	bl	8000b90 <_ZNSt9_Any_data9_M_accessEv>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3708      	adds	r7, #8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <_ZNSt14_Function_base13_Base_managerIZ7cppmainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8002c14:	b5b0      	push	{r4, r5, r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8002c22:	79fb      	ldrb	r3, [r7, #7]
 8002c24:	2b03      	cmp	r3, #3
 8002c26:	d016      	beq.n	8002c56 <_ZNSt14_Function_base13_Base_managerIZ7cppmainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x42>
 8002c28:	2b03      	cmp	r3, #3
 8002c2a:	dc19      	bgt.n	8002c60 <_ZNSt14_Function_base13_Base_managerIZ7cppmainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x4c>
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d002      	beq.n	8002c36 <_ZNSt14_Function_base13_Base_managerIZ7cppmainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x22>
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d00a      	beq.n	8002c4a <_ZNSt14_Function_base13_Base_managerIZ7cppmainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x36>
 8002c34:	e014      	b.n	8002c60 <_ZNSt14_Function_base13_Base_managerIZ7cppmainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f7ff ffe0 	bl	8002bfc <_ZNSt9_Any_data9_M_accessIPZ7cppmainEUlvE_EERT_v>
 8002c3c:	4604      	mov	r4, r0
 8002c3e:	68b8      	ldr	r0, [r7, #8]
 8002c40:	f7ff ffbf 	bl	8002bc2 <_ZNSt14_Function_base13_Base_managerIZ7cppmainEUlvE_E14_M_get_pointerERKSt9_Any_data>
 8002c44:	4603      	mov	r3, r0
 8002c46:	6023      	str	r3, [r4, #0]
	      break;
 8002c48:	e00a      	b.n	8002c60 <_ZNSt14_Function_base13_Base_managerIZ7cppmainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8002c4a:	462a      	mov	r2, r5
 8002c4c:	68b9      	ldr	r1, [r7, #8]
 8002c4e:	68f8      	ldr	r0, [r7, #12]
 8002c50:	f000 fbfa 	bl	8003448 <_ZNSt14_Function_base13_Base_managerIZ7cppmainEUlvE_E8_M_cloneERSt9_Any_dataRKS3_St17integral_constantIbLb0EE>
	      break;
 8002c54:	e004      	b.n	8002c60 <_ZNSt14_Function_base13_Base_managerIZ7cppmainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8002c56:	4621      	mov	r1, r4
 8002c58:	68f8      	ldr	r0, [r7, #12]
 8002c5a:	f000 fc13 	bl	8003484 <_ZNSt14_Function_base13_Base_managerIZ7cppmainEUlvE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>
	      break;
 8002c5e:	bf00      	nop
	  return false;
 8002c60:	2300      	movs	r3, #0
	}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bdb0      	pop	{r4, r5, r7, pc}

08002c6a <_ZNSt16allocator_traitsISaIhEE8max_sizeERKS0_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static _GLIBCXX20_CONSTEXPR size_type
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b082      	sub	sp, #8
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
      {
#if __cplusplus <= 201703L
	return __a.max_size();
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 fc1a 	bl	80034ac <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>
 8002c78:	4603      	mov	r3, r0
#else
	return size_t(-1) / sizeof(value_type);
#endif
      }
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <_ZN9__gnu_cxx13new_allocatorIhEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8002c82:	b480      	push	{r7}
 8002c84:	b083      	sub	sp, #12
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
 8002c8a:	6039      	str	r1, [r7, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8002c9a:	b480      	push	{r7}
 8002c9c:	b083      	sub	sp, #12
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	605a      	str	r2, [r3, #4]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	609a      	str	r2, [r3, #8]
	{ }
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr

08002cc2 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b082      	sub	sp, #8
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
 8002cca:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d006      	beq.n	8002ce0 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x1e>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6839      	ldr	r1, [r7, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f000 fbf4 	bl	80034c4 <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	e000      	b.n	8002ce2 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x20>
 8002ce0:	2300      	movs	r3, #0
      }
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <_ZSt25__uninitialized_default_nIPhjET_S1_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b084      	sub	sp, #16
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
 8002cf2:	6039      	str	r1, [r7, #0]
      const bool __assignable = is_copy_assignable<_ValueType>::value;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	73fb      	strb	r3, [r7, #15]
	__uninit_default_n(__first, __n);
 8002cf8:	6839      	ldr	r1, [r7, #0]
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 fbf1 	bl	80034e2 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPhjEET_S3_T0_>
 8002d00:	4603      	mov	r3, r0
    }
 8002d02:	4618      	mov	r0, r3
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <_ZNKSt8__detail15_Hash_code_baseIP19FDCAN_HandleTypeDefSt4pairIKS2_St8functionIFvmPhjEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE5_M_h1Ev>:

      const _ExtractKey&
      _M_extract() const { return __ebo_extract_key::_M_cget(); }

      const _H1&
      _M_h1() const { return __ebo_h1::_M_cget(); }
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b082      	sub	sp, #8
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 fbf8 	bl	8003508 <_ZNKSt8__detail21_Hashtable_ebo_helperILi1ESt4hashIP19FDCAN_HandleTypeDefELb1EE7_M_cgetEv>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <_ZNKSt4hashIP19FDCAN_HandleTypeDefEclES1_>:
  /// Partial specializations for pointer types.
  template<typename _Tp>
    struct hash<_Tp*> : public __hash_base<size_t, _Tp*>
    {
      size_t
      operator()(_Tp* __p) const noexcept
 8002d22:	b480      	push	{r7}
 8002d24:	b083      	sub	sp, #12
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
 8002d2a:	6039      	str	r1, [r7, #0]
      { return reinterpret_cast<size_t>(__p); }
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr

08002d3a <_ZNKSt8__detail15_Hash_code_baseIP19FDCAN_HandleTypeDefSt4pairIKS2_St8functionIFvmPhjEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexERS4_jj>:
      _M_bucket_index(const _Key&, __hash_code __c,
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b084      	sub	sp, #16
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	60f8      	str	r0, [r7, #12]
 8002d42:	60b9      	str	r1, [r7, #8]
 8002d44:	607a      	str	r2, [r7, #4]
 8002d46:	603b      	str	r3, [r7, #0]
      { return _M_h2()(__c, __bkt_count); }
 8002d48:	68f8      	ldr	r0, [r7, #12]
 8002d4a:	f000 fbe8 	bl	800351e <_ZNKSt8__detail15_Hash_code_baseIP19FDCAN_HandleTypeDefSt4pairIKS2_St8functionIFvmPhjEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE5_M_h2Ev>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	6879      	ldr	r1, [r7, #4]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7fd ff60 	bl	8000c1a <_ZNKSt8__detail18_Mod_range_hashingclEjj>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3710      	adds	r7, #16
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <_ZNKSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b086      	sub	sp, #24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
 8002d70:	603b      	str	r3, [r7, #0]
      __node_base* __prev_p = _M_buckets[__bkt];
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	4413      	add	r3, r2
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	617b      	str	r3, [r7, #20]
      if (!__prev_p)
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <_ZNKSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x26>
	return nullptr;
 8002d86:	2300      	movs	r3, #0
 8002d88:	e02b      	b.n	8002de2 <_ZNKSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x7e>
      for (__node_type* __p = static_cast<__node_type*>(__prev_p->_M_nxt);;
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	613b      	str	r3, [r7, #16]
	  if (this->_M_equals(__k, __code, __p))
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	683a      	ldr	r2, [r7, #0]
 8002d94:	6879      	ldr	r1, [r7, #4]
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f000 fbd9 	bl	800354e <_ZNKSt8__detail15_Hashtable_baseIP19FDCAN_HandleTypeDefSt4pairIKS2_St8functionIFvmPhjEEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS4_jPNS_10_Hash_nodeIS9_Lb0EEE>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <_ZNKSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x42>
	    return __prev_p;
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	e01d      	b.n	8002de2 <_ZNKSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x7e>
	  if (!__p->_M_nxt || _M_bucket_index(__p->_M_next()) != __bkt)
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00b      	beq.n	8002dc6 <_ZNKSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x62>
 8002dae:	6938      	ldr	r0, [r7, #16]
 8002db0:	f000 fbc1 	bl	8003536 <_ZNKSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EE7_M_nextEv>
 8002db4:	4603      	mov	r3, r0
 8002db6:	4619      	mov	r1, r3
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	f000 fbf7 	bl	80035ac <_ZNKSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEPNSA_10_Hash_nodeIS8_Lb0EEE>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d001      	beq.n	8002dca <_ZNKSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x66>
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e000      	b.n	8002dcc <_ZNKSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x68>
 8002dca:	2300      	movs	r3, #0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d106      	bne.n	8002dde <_ZNKSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x7a>
	  __prev_p = __p;
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	617b      	str	r3, [r7, #20]
	   __p = __p->_M_next())
 8002dd4:	6938      	ldr	r0, [r7, #16]
 8002dd6:	f000 fbae 	bl	8003536 <_ZNKSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EE7_M_nextEv>
 8002dda:	6138      	str	r0, [r7, #16]
	  if (this->_M_equals(__k, __code, __p))
 8002ddc:	e7d8      	b.n	8002d90 <_ZNKSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x2c>
	    break;
 8002dde:	bf00      	nop
      return nullptr;
 8002de0:	2300      	movs	r3, #0
    }
 8002de2:	4618      	mov	r0, r3
 8002de4:	3718      	adds	r7, #24
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEE9_M_valptrEv>:
      _M_valptr() noexcept
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b082      	sub	sp, #8
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	3304      	adds	r3, #4
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 fbe9 	bl	80035ce <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEE6_M_ptrEv>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <_ZNSt11_Tuple_implILj0EJRKP19FDCAN_HandleTypeDefEEC1ES3_>:
      constexpr _Tuple_impl(const _Head& __head)
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b082      	sub	sp, #8
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
 8002e0e:	6039      	str	r1, [r7, #0]
      : _Base(__head) { }
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6839      	ldr	r1, [r7, #0]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f000 fbe6 	bl	80035e6 <_ZNSt10_Head_baseILj0ERKP19FDCAN_HandleTypeDefLb0EEC1ES3_>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3708      	adds	r7, #8
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr

08002e3a <_ZSt7forwardISt5tupleIJRKP19FDCAN_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002e3a:	b480      	push	{r7}
 8002e3c:	b083      	sub	sp, #12
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4618      	mov	r0, r3
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr

08002e66 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEEC1Ev>:
    struct _Hash_node_value_base : _Hash_node_base
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b082      	sub	sp, #8
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7fd fec4 	bl	8000bfe <_ZNSt8__detail15_Hash_node_baseC1Ev>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3708      	adds	r7, #8
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <_ZNSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEC1Ev>:
    struct _Hash_node<_Value, false> : _Hash_node_value_base<_Value>
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7ff ffeb 	bl	8002e66 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEEC1Ev>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4618      	mov	r0, r3
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEE16_M_allocate_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS5_EESI_IJEEEEEPSB_DpOT_>:
  // Definitions of class template _Hashtable_alloc's out-of-line member
  // functions.
  template<typename _NodeAlloc>
    template<typename... _Args>
      auto
      _Hashtable_alloc<_NodeAlloc>::_M_allocate_node(_Args&&... __args)
 8002e9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e9e:	b088      	sub	sp, #32
 8002ea0:	af02      	add	r7, sp, #8
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
 8002ea8:	603b      	str	r3, [r7, #0]
      -> __node_type*
      {
	auto __nptr = __node_alloc_traits::allocate(_M_node_allocator(), 1);
 8002eaa:	68f8      	ldr	r0, [r7, #12]
 8002eac:	f000 fbaa 	bl	8003604 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEE17_M_node_allocatorEv>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2101      	movs	r1, #1
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f000 fbb1 	bl	800361c <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEE8allocateERSC_j>
 8002eba:	6178      	str	r0, [r7, #20]
	__node_type* __n = std::__to_address(__nptr);
 8002ebc:	6978      	ldr	r0, [r7, #20]
 8002ebe:	f000 fbbc 	bl	800363a <_ZSt12__to_addressINSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEPT_SD_>
 8002ec2:	6138      	str	r0, [r7, #16]
	__try
	  {
	    ::new ((void*)__n) __node_type;
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	2018      	movs	r0, #24
 8002eca:	f7fd fcfc 	bl	80008c6 <_ZnwjPv>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff ffd5 	bl	8002e80 <_ZNSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEC1Ev>
	    __node_alloc_traits::construct(_M_node_allocator(),
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f000 fb94 	bl	8003604 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEE17_M_node_allocatorEv>
 8002edc:	4604      	mov	r4, r0
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7ff ff82 	bl	8002dea <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEE9_M_valptrEv>
 8002ee6:	4605      	mov	r5, r0
 8002ee8:	68b8      	ldr	r0, [r7, #8]
 8002eea:	f7ff ff9b 	bl	8002e24 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8002eee:	4606      	mov	r6, r0
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f7ff ffa2 	bl	8002e3a <_ZSt7forwardISt5tupleIJRKP19FDCAN_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8002ef6:	4680      	mov	r8, r0
 8002ef8:	6838      	ldr	r0, [r7, #0]
 8002efa:	f7ff ffa9 	bl	8002e50 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8002efe:	4603      	mov	r3, r0
 8002f00:	9300      	str	r3, [sp, #0]
 8002f02:	4643      	mov	r3, r8
 8002f04:	4632      	mov	r2, r6
 8002f06:	4629      	mov	r1, r5
 8002f08:	4620      	mov	r0, r4
 8002f0a:	f000 fba1 	bl	8003650 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEE9constructISA_JRKSt21piecewise_construct_tSt5tupleIJRS5_EESI_IJEEEEEvRSC_PT_DpOT0_>
					   __n->_M_valptr(),
					   std::forward<_Args>(__args)...);
	    return __n;
 8002f0e:	693b      	ldr	r3, [r7, #16]
	__catch(...)
	  {
	    __node_alloc_traits::deallocate(_M_node_allocator(), __nptr, 1);
	    __throw_exception_again;
	  }
      }
 8002f10:	4618      	mov	r0, r3
 8002f12:	3718      	adds	r7, #24
 8002f14:	46bd      	mov	sp, r7
 8002f16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002f1a <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEE18_M_deallocate_nodeEPSB_>:

  template<typename _NodeAlloc>
    void
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node(__node_type* __n)
 8002f1a:	b590      	push	{r4, r7, lr}
 8002f1c:	b083      	sub	sp, #12
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
 8002f22:	6039      	str	r1, [r7, #0]
    {
      __node_alloc_traits::destroy(_M_node_allocator(), __n->_M_valptr());
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f000 fb6d 	bl	8003604 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEE17_M_node_allocatorEv>
 8002f2a:	4604      	mov	r4, r0
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7ff ff5b 	bl	8002dea <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEE9_M_valptrEv>
 8002f34:	4603      	mov	r3, r0
 8002f36:	4619      	mov	r1, r3
 8002f38:	4620      	mov	r0, r4
 8002f3a:	f000 fbb6 	bl	80036aa <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEE7destroyISA_EEvRSC_PT_>
      _M_deallocate_node_ptr(__n);
 8002f3e:	6839      	ldr	r1, [r7, #0]
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 fbbf 	bl	80036c4 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEE22_M_deallocate_node_ptrEPSB_>
    }
 8002f46:	bf00      	nop
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd90      	pop	{r4, r7, pc}

08002f4e <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_rehashEjRKj>:
  template<typename _Key, typename _Value,
	   typename _Alloc, typename _ExtractKey, typename _Equal,
	   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
	   typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b084      	sub	sp, #16
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	60f8      	str	r0, [r7, #12]
 8002f56:	60b9      	str	r1, [r7, #8]
 8002f58:	607a      	str	r2, [r7, #4]
	       _H1, _H2, _Hash, _RehashPolicy, _Traits>::
    _M_rehash(size_type __bkt_count, const __rehash_state& __state)
    {
      __try
	{
	  _M_rehash_aux(__bkt_count, __unique_keys());
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	68b9      	ldr	r1, [r7, #8]
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f000 fbc6 	bl	80036f0 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE>
	  // A failure here means that buckets allocation failed.  We only
	  // have to restore hash policy previous state.
	  _M_rehash_policy._M_reset(__state);
	  __throw_exception_again;
	}
    }
 8002f64:	bf00      	nop
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <_ZNKSt8__detail15_Hash_code_baseIP19FDCAN_HandleTypeDefSt4pairIKS2_St8functionIFvmPhjEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE13_M_store_codeEPNS_10_Hash_nodeIS9_Lb0EEEj>:
      _M_store_code(__node_type*, __hash_code) const
 8002f6c:	b480      	push	{r7}
 8002f6e:	b085      	sub	sp, #20
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
      { }
 8002f78:	bf00      	nop
 8002f7a:	3714      	adds	r7, #20
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNSA_10_Hash_nodeIS8_Lb0EEE>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8002f84:	b590      	push	{r4, r7, lr}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]
      if (_M_buckets[__bkt])
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	4413      	add	r3, r2
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d011      	beq.n	8002fc4 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNSA_10_Hash_nodeIS8_Lb0EEE+0x40>
	  __node->_M_nxt = _M_buckets[__bkt]->_M_nxt;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	4413      	add	r3, r2
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	601a      	str	r2, [r3, #0]
	  _M_buckets[__bkt]->_M_nxt = __node;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	4413      	add	r3, r2
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	601a      	str	r2, [r3, #0]
    }
 8002fc2:	e021      	b.n	8003008 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNSA_10_Hash_nodeIS8_Lb0EEE+0x84>
	  __node->_M_nxt = _M_before_begin._M_nxt;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	689a      	ldr	r2, [r3, #8]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	601a      	str	r2, [r3, #0]
	  _M_before_begin._M_nxt = __node;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	609a      	str	r2, [r3, #8]
	  if (__node->_M_nxt)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00e      	beq.n	8002ff8 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNSA_10_Hash_nodeIS8_Lb0EEE+0x74>
	    _M_buckets[_M_bucket_index(__node->_M_next())] = __node;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681c      	ldr	r4, [r3, #0]
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 faa9 	bl	8003536 <_ZNKSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EE7_M_nextEv>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	68f8      	ldr	r0, [r7, #12]
 8002fea:	f000 fadf 	bl	80035ac <_ZNKSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEPNSA_10_Hash_nodeIS8_Lb0EEE>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	4423      	add	r3, r4
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	601a      	str	r2, [r3, #0]
	  _M_buckets[__bkt] = &_M_before_begin;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	4413      	add	r3, r2
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	3208      	adds	r2, #8
 8003006:	601a      	str	r2, [r3, #0]
    }
 8003008:	bf00      	nop
 800300a:	3714      	adds	r7, #20
 800300c:	46bd      	mov	sp, r7
 800300e:	bd90      	pop	{r4, r7, pc}

08003010 <_ZNSt8__detail14_Node_iteratorISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0ELb0EEC1EPNS_10_Hash_nodeIS9_Lb0EEE>:
      _Node_iterator(__node_type* __p) noexcept
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
      : __base_type(__p) { }
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6839      	ldr	r1, [r7, #0]
 800301e:	4618      	mov	r0, r3
 8003020:	f000 fbc8 	bl	80037b4 <_ZNSt8__detail19_Node_iterator_baseISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEC1EPNS_10_Hash_nodeIS9_Lb0EEE>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4618      	mov	r0, r3
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <_ZNKSt9_Any_data9_M_accessIZN18tutrc_harurobo_lib4C610C4ERNS1_3CANEEUlmPhjE_EERKT_v>:
      _M_access() const
 800302e:	b580      	push	{r7, lr}
 8003030:	b082      	sub	sp, #8
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f7fd fdb5 	bl	8000ba6 <_ZNKSt9_Any_data9_M_accessEv>
 800303c:	4603      	mov	r3, r0
 800303e:	4618      	mov	r0, r3
 8003040:	3708      	adds	r7, #8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <_ZSt11__addressofIKZN18tutrc_harurobo_lib4C610C4ERNS0_3CANEEUlmPhjE_EPT_RS7_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8003046:	b480      	push	{r7}
 8003048:	b083      	sub	sp, #12
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4618      	mov	r0, r3
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <_ZSt7forwardIRZN18tutrc_harurobo_lib4C610C4ERNS0_3CANEEUlmPhjE_EOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4618      	mov	r0, r3
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr

08003072 <_ZSt13__invoke_implIvRZN18tutrc_harurobo_lib4C610C4ERNS0_3CANEEUlmPhjE_JmS4_jEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8003072:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003074:	b085      	sub	sp, #20
 8003076:	af00      	add	r7, sp, #0
 8003078:	7338      	strb	r0, [r7, #12]
 800307a:	60b9      	str	r1, [r7, #8]
 800307c:	607a      	str	r2, [r7, #4]
 800307e:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8003080:	68b8      	ldr	r0, [r7, #8]
 8003082:	f7ff ffeb 	bl	800305c <_ZSt7forwardIRZN18tutrc_harurobo_lib4C610C4ERNS0_3CANEEUlmPhjE_EOT_RNSt16remove_referenceIS7_E4typeE>
 8003086:	4606      	mov	r6, r0
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f7ff fbfa 	bl	8002882 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 800308e:	4603      	mov	r3, r0
 8003090:	681c      	ldr	r4, [r3, #0]
 8003092:	6838      	ldr	r0, [r7, #0]
 8003094:	f7ff fc00 	bl	8002898 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 8003098:	4603      	mov	r3, r0
 800309a:	681d      	ldr	r5, [r3, #0]
 800309c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800309e:	f7fe ffb0 	bl	8002002 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80030a2:	4603      	mov	r3, r0
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	462a      	mov	r2, r5
 80030a8:	4621      	mov	r1, r4
 80030aa:	4630      	mov	r0, r6
 80030ac:	f7fd ffd1 	bl	8001052 <_ZZN18tutrc_harurobo_lib4C610C4ERNS_3CANEENKUlmPhjE_clEmS3_j>
 80030b0:	bf00      	nop
 80030b2:	3714      	adds	r7, #20
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080030b8 <_ZNSt14_Function_base13_Base_managerIZN18tutrc_harurobo_lib4C610C4ERNS1_3CANEEUlmPhjE_E8_M_cloneERSt9_Any_dataRKS8_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 80030b8:	b590      	push	{r4, r7, lr}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80030c4:	68b8      	ldr	r0, [r7, #8]
 80030c6:	f7ff ffb2 	bl	800302e <_ZNKSt9_Any_data9_M_accessIZN18tutrc_harurobo_lib4C610C4ERNS1_3CANEEUlmPhjE_EERKT_v>
 80030ca:	4604      	mov	r4, r0
 80030cc:	68f8      	ldr	r0, [r7, #12]
 80030ce:	f7fd fd5f 	bl	8000b90 <_ZNSt9_Any_data9_M_accessEv>
 80030d2:	4603      	mov	r3, r0
 80030d4:	4619      	mov	r1, r3
 80030d6:	2004      	movs	r0, #4
 80030d8:	f7fd fbf5 	bl	80008c6 <_ZnwjPv>
 80030dc:	4602      	mov	r2, r0
 80030de:	6823      	ldr	r3, [r4, #0]
 80030e0:	6013      	str	r3, [r2, #0]
	}
 80030e2:	bf00      	nop
 80030e4:	3714      	adds	r7, #20
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd90      	pop	{r4, r7, pc}

080030ea <_ZNSt14_Function_base13_Base_managerIZN18tutrc_harurobo_lib4C610C4ERNS1_3CANEEUlmPhjE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b082      	sub	sp, #8
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
 80030f2:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f000 fb6c 	bl	80037d2 <_ZNSt9_Any_data9_M_accessIZN18tutrc_harurobo_lib4C610C4ERNS1_3CANEEUlmPhjE_EERT_v>
	}
 80030fa:	bf00      	nop
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <_ZNKSt8__detail15_Hash_code_baseIP17TIM_HandleTypeDefSt4pairIKS2_St8functionIFvvEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE5_M_h1Ev>:
      _M_h1() const { return __ebo_h1::_M_cget(); }
 8003102:	b580      	push	{r7, lr}
 8003104:	b082      	sub	sp, #8
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 fb6d 	bl	80037ea <_ZNKSt8__detail21_Hashtable_ebo_helperILi1ESt4hashIP17TIM_HandleTypeDefELb1EE7_M_cgetEv>
 8003110:	4603      	mov	r3, r0
 8003112:	4618      	mov	r0, r3
 8003114:	3708      	adds	r7, #8
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <_ZNKSt4hashIP17TIM_HandleTypeDefEclES1_>:
      operator()(_Tp* __p) const noexcept
 800311a:	b480      	push	{r7}
 800311c:	b083      	sub	sp, #12
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
 8003122:	6039      	str	r1, [r7, #0]
      { return reinterpret_cast<size_t>(__p); }
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	4618      	mov	r0, r3
 8003128:	370c      	adds	r7, #12
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr

08003132 <_ZNKSt8__detail15_Hash_code_baseIP17TIM_HandleTypeDefSt4pairIKS2_St8functionIFvvEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexERS4_jj>:
      _M_bucket_index(const _Key&, __hash_code __c,
 8003132:	b580      	push	{r7, lr}
 8003134:	b084      	sub	sp, #16
 8003136:	af00      	add	r7, sp, #0
 8003138:	60f8      	str	r0, [r7, #12]
 800313a:	60b9      	str	r1, [r7, #8]
 800313c:	607a      	str	r2, [r7, #4]
 800313e:	603b      	str	r3, [r7, #0]
      { return _M_h2()(__c, __bkt_count); }
 8003140:	68f8      	ldr	r0, [r7, #12]
 8003142:	f000 fb5d 	bl	8003800 <_ZNKSt8__detail15_Hash_code_baseIP17TIM_HandleTypeDefSt4pairIKS2_St8functionIFvvEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE5_M_h2Ev>
 8003146:	4603      	mov	r3, r0
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	6879      	ldr	r1, [r7, #4]
 800314c:	4618      	mov	r0, r3
 800314e:	f7fd fd64 	bl	8000c1a <_ZNKSt8__detail18_Mod_range_hashingclEjj>
 8003152:	4603      	mov	r3, r0
 8003154:	4618      	mov	r0, r3
 8003156:	3710      	adds	r7, #16
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <_ZNKSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
 8003168:	603b      	str	r3, [r7, #0]
      __node_base* __prev_p = _M_buckets[__bkt];
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	4413      	add	r3, r2
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	617b      	str	r3, [r7, #20]
      if (!__prev_p)
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <_ZNKSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x26>
	return nullptr;
 800317e:	2300      	movs	r3, #0
 8003180:	e02b      	b.n	80031da <_ZNKSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x7e>
      for (__node_type* __p = static_cast<__node_type*>(__prev_p->_M_nxt);;
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	613b      	str	r3, [r7, #16]
	  if (this->_M_equals(__k, __code, __p))
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	6879      	ldr	r1, [r7, #4]
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f000 fb4e 	bl	8003830 <_ZNKSt8__detail15_Hashtable_baseIP17TIM_HandleTypeDefSt4pairIKS2_St8functionIFvvEEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS4_jPNS_10_Hash_nodeIS8_Lb0EEE>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <_ZNKSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x42>
	    return __prev_p;
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	e01d      	b.n	80031da <_ZNKSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x7e>
	  if (!__p->_M_nxt || _M_bucket_index(__p->_M_next()) != __bkt)
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00b      	beq.n	80031be <_ZNKSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x62>
 80031a6:	6938      	ldr	r0, [r7, #16]
 80031a8:	f000 fb36 	bl	8003818 <_ZNKSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EE7_M_nextEv>
 80031ac:	4603      	mov	r3, r0
 80031ae:	4619      	mov	r1, r3
 80031b0:	68f8      	ldr	r0, [r7, #12]
 80031b2:	f000 fb6c 	bl	800388e <_ZNKSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEPNS9_10_Hash_nodeIS7_Lb0EEE>
 80031b6:	4602      	mov	r2, r0
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d001      	beq.n	80031c2 <_ZNKSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x66>
 80031be:	2301      	movs	r3, #1
 80031c0:	e000      	b.n	80031c4 <_ZNKSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x68>
 80031c2:	2300      	movs	r3, #0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d106      	bne.n	80031d6 <_ZNKSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x7a>
	  __prev_p = __p;
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	617b      	str	r3, [r7, #20]
	   __p = __p->_M_next())
 80031cc:	6938      	ldr	r0, [r7, #16]
 80031ce:	f000 fb23 	bl	8003818 <_ZNKSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EE7_M_nextEv>
 80031d2:	6138      	str	r0, [r7, #16]
	  if (this->_M_equals(__k, __code, __p))
 80031d4:	e7d8      	b.n	8003188 <_ZNKSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x2c>
	    break;
 80031d6:	bf00      	nop
      return nullptr;
 80031d8:	2300      	movs	r3, #0
    }
 80031da:	4618      	mov	r0, r3
 80031dc:	3718      	adds	r7, #24
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEEE9_M_valptrEv>:
      _M_valptr() noexcept
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b082      	sub	sp, #8
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	3304      	adds	r3, #4
 80031ee:	4618      	mov	r0, r3
 80031f0:	f000 fb5e 	bl	80038b0 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEEE6_M_ptrEv>
 80031f4:	4603      	mov	r3, r0
 80031f6:	4618      	mov	r0, r3
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <_ZNSt11_Tuple_implILj0EJRKP17TIM_HandleTypeDefEEC1ES3_>:
      constexpr _Tuple_impl(const _Head& __head)
 80031fe:	b580      	push	{r7, lr}
 8003200:	b082      	sub	sp, #8
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
 8003206:	6039      	str	r1, [r7, #0]
      : _Base(__head) { }
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6839      	ldr	r1, [r7, #0]
 800320c:	4618      	mov	r0, r3
 800320e:	f000 fb5b 	bl	80038c8 <_ZNSt10_Head_baseILj0ERKP17TIM_HandleTypeDefLb0EEC1ES3_>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4618      	mov	r0, r3
 8003216:	3708      	adds	r7, #8
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <_ZSt7forwardISt5tupleIJRKP17TIM_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4618      	mov	r0, r3
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr

08003232 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEEEC1Ev>:
    struct _Hash_node_value_base : _Hash_node_base
 8003232:	b580      	push	{r7, lr}
 8003234:	b082      	sub	sp, #8
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4618      	mov	r0, r3
 800323e:	f7fd fcde 	bl	8000bfe <_ZNSt8__detail15_Hash_node_baseC1Ev>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4618      	mov	r0, r3
 8003246:	3708      	adds	r7, #8
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <_ZNSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEC1Ev>:
    struct _Hash_node<_Value, false> : _Hash_node_value_base<_Value>
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4618      	mov	r0, r3
 8003258:	f7ff ffeb 	bl	8003232 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEEEC1Ev>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4618      	mov	r0, r3
 8003260:	3708      	adds	r7, #8
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEE16_M_allocate_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS5_EESH_IJEEEEEPSA_DpOT_>:
      _Hashtable_alloc<_NodeAlloc>::_M_allocate_node(_Args&&... __args)
 8003266:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800326a:	b088      	sub	sp, #32
 800326c:	af02      	add	r7, sp, #8
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	607a      	str	r2, [r7, #4]
 8003274:	603b      	str	r3, [r7, #0]
	auto __nptr = __node_alloc_traits::allocate(_M_node_allocator(), 1);
 8003276:	68f8      	ldr	r0, [r7, #12]
 8003278:	f000 fb35 	bl	80038e6 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEE17_M_node_allocatorEv>
 800327c:	4603      	mov	r3, r0
 800327e:	2101      	movs	r1, #1
 8003280:	4618      	mov	r0, r3
 8003282:	f000 fb3c 	bl	80038fe <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEE8allocateERSB_j>
 8003286:	6178      	str	r0, [r7, #20]
	__node_type* __n = std::__to_address(__nptr);
 8003288:	6978      	ldr	r0, [r7, #20]
 800328a:	f000 fb47 	bl	800391c <_ZSt12__to_addressINSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEPT_SC_>
 800328e:	6138      	str	r0, [r7, #16]
	    ::new ((void*)__n) __node_type;
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	4619      	mov	r1, r3
 8003294:	2018      	movs	r0, #24
 8003296:	f7fd fb16 	bl	80008c6 <_ZnwjPv>
 800329a:	4603      	mov	r3, r0
 800329c:	4618      	mov	r0, r3
 800329e:	f7ff ffd5 	bl	800324c <_ZNSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEC1Ev>
	    __node_alloc_traits::construct(_M_node_allocator(),
 80032a2:	68f8      	ldr	r0, [r7, #12]
 80032a4:	f000 fb1f 	bl	80038e6 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEE17_M_node_allocatorEv>
 80032a8:	4604      	mov	r4, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7ff ff98 	bl	80031e2 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEEE9_M_valptrEv>
 80032b2:	4605      	mov	r5, r0
 80032b4:	68b8      	ldr	r0, [r7, #8]
 80032b6:	f7ff fdb5 	bl	8002e24 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80032ba:	4606      	mov	r6, r0
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f7ff ffad 	bl	800321c <_ZSt7forwardISt5tupleIJRKP17TIM_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80032c2:	4680      	mov	r8, r0
 80032c4:	6838      	ldr	r0, [r7, #0]
 80032c6:	f7ff fdc3 	bl	8002e50 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80032ca:	4603      	mov	r3, r0
 80032cc:	9300      	str	r3, [sp, #0]
 80032ce:	4643      	mov	r3, r8
 80032d0:	4632      	mov	r2, r6
 80032d2:	4629      	mov	r1, r5
 80032d4:	4620      	mov	r0, r4
 80032d6:	f000 fb2c 	bl	8003932 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEE9constructIS9_JRKSt21piecewise_construct_tSt5tupleIJRS5_EESH_IJEEEEEvRSB_PT_DpOT0_>
	    return __n;
 80032da:	693b      	ldr	r3, [r7, #16]
      }
 80032dc:	4618      	mov	r0, r3
 80032de:	3718      	adds	r7, #24
 80032e0:	46bd      	mov	sp, r7
 80032e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080032e6 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEE18_M_deallocate_nodeEPSA_>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node(__node_type* __n)
 80032e6:	b590      	push	{r4, r7, lr}
 80032e8:	b083      	sub	sp, #12
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
 80032ee:	6039      	str	r1, [r7, #0]
      __node_alloc_traits::destroy(_M_node_allocator(), __n->_M_valptr());
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f000 faf8 	bl	80038e6 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEE17_M_node_allocatorEv>
 80032f6:	4604      	mov	r4, r0
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7ff ff71 	bl	80031e2 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEEE9_M_valptrEv>
 8003300:	4603      	mov	r3, r0
 8003302:	4619      	mov	r1, r3
 8003304:	4620      	mov	r0, r4
 8003306:	f000 fb41 	bl	800398c <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEE7destroyIS9_EEvRSB_PT_>
      _M_deallocate_node_ptr(__n);
 800330a:	6839      	ldr	r1, [r7, #0]
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f000 fb4a 	bl	80039a6 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEE22_M_deallocate_node_ptrEPSA_>
    }
 8003312:	bf00      	nop
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	bd90      	pop	{r4, r7, pc}

0800331a <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_rehashEjRKj>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 800331a:	b580      	push	{r7, lr}
 800331c:	b084      	sub	sp, #16
 800331e:	af00      	add	r7, sp, #0
 8003320:	60f8      	str	r0, [r7, #12]
 8003322:	60b9      	str	r1, [r7, #8]
 8003324:	607a      	str	r2, [r7, #4]
	  _M_rehash_aux(__bkt_count, __unique_keys());
 8003326:	461a      	mov	r2, r3
 8003328:	68b9      	ldr	r1, [r7, #8]
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f000 fb51 	bl	80039d2 <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE>
    }
 8003330:	bf00      	nop
 8003332:	3710      	adds	r7, #16
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <_ZNKSt8__detail15_Hash_code_baseIP17TIM_HandleTypeDefSt4pairIKS2_St8functionIFvvEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE13_M_store_codeEPNS_10_Hash_nodeIS8_Lb0EEEj>:
      _M_store_code(__node_type*, __hash_code) const
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]
      { }
 8003344:	bf00      	nop
 8003346:	3714      	adds	r7, #20
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS9_10_Hash_nodeIS7_Lb0EEE>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8003350:	b590      	push	{r4, r7, lr}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
      if (_M_buckets[__bkt])
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4413      	add	r3, r2
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d011      	beq.n	8003390 <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS9_10_Hash_nodeIS7_Lb0EEE+0x40>
	  __node->_M_nxt = _M_buckets[__bkt]->_M_nxt;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	4413      	add	r3, r2
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	601a      	str	r2, [r3, #0]
	  _M_buckets[__bkt]->_M_nxt = __node;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	4413      	add	r3, r2
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	601a      	str	r2, [r3, #0]
    }
 800338e:	e021      	b.n	80033d4 <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS9_10_Hash_nodeIS7_Lb0EEE+0x84>
	  __node->_M_nxt = _M_before_begin._M_nxt;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	689a      	ldr	r2, [r3, #8]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	601a      	str	r2, [r3, #0]
	  _M_before_begin._M_nxt = __node;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	609a      	str	r2, [r3, #8]
	  if (__node->_M_nxt)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00e      	beq.n	80033c4 <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS9_10_Hash_nodeIS7_Lb0EEE+0x74>
	    _M_buckets[_M_bucket_index(__node->_M_next())] = __node;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681c      	ldr	r4, [r3, #0]
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 fa34 	bl	8003818 <_ZNKSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EE7_M_nextEv>
 80033b0:	4603      	mov	r3, r0
 80033b2:	4619      	mov	r1, r3
 80033b4:	68f8      	ldr	r0, [r7, #12]
 80033b6:	f000 fa6a 	bl	800388e <_ZNKSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEPNS9_10_Hash_nodeIS7_Lb0EEE>
 80033ba:	4603      	mov	r3, r0
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	4423      	add	r3, r4
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	601a      	str	r2, [r3, #0]
	  _M_buckets[__bkt] = &_M_before_begin;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	4413      	add	r3, r2
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	3208      	adds	r2, #8
 80033d2:	601a      	str	r2, [r3, #0]
    }
 80033d4:	bf00      	nop
 80033d6:	3714      	adds	r7, #20
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd90      	pop	{r4, r7, pc}

080033dc <_ZNSt8__detail14_Node_iteratorISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0ELb0EEC1EPNS_10_Hash_nodeIS8_Lb0EEE>:
      _Node_iterator(__node_type* __p) noexcept
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
      : __base_type(__p) { }
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6839      	ldr	r1, [r7, #0]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f000 fb53 	bl	8003a96 <_ZNSt8__detail19_Node_iterator_baseISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEC1EPNS_10_Hash_nodeIS8_Lb0EEE>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4618      	mov	r0, r3
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <_ZNKSt9_Any_data9_M_accessIPZ7cppmainEUlvE_EERKT_v>:
      _M_access() const
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b082      	sub	sp, #8
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f7fd fbcf 	bl	8000ba6 <_ZNKSt9_Any_data9_M_accessEv>
 8003408:	4603      	mov	r3, r0
 800340a:	4618      	mov	r0, r3
 800340c:	3708      	adds	r7, #8
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <_ZSt7forwardIRZ7cppmainEUlvE_EOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003412:	b480      	push	{r7}
 8003414:	b083      	sub	sp, #12
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4618      	mov	r0, r3
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <_ZSt13__invoke_implIvRZ7cppmainEUlvE_JEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	7138      	strb	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8003432:	6838      	ldr	r0, [r7, #0]
 8003434:	f7ff ffed 	bl	8003412 <_ZSt7forwardIRZ7cppmainEUlvE_EOT_RNSt16remove_referenceIS2_E4typeE>
 8003438:	4603      	mov	r3, r0
 800343a:	4618      	mov	r0, r3
 800343c:	f7fe f960 	bl	8001700 <_ZZ7cppmainENKUlvE_clEv>
 8003440:	bf00      	nop
 8003442:	3708      	adds	r7, #8
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <_ZNSt14_Function_base13_Base_managerIZ7cppmainEUlvE_E8_M_cloneERSt9_Any_dataRKS3_St17integral_constantIbLb0EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
 8003448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	713a      	strb	r2, [r7, #4]
	    new _Functor(*__source._M_access<const _Functor*>());
 8003454:	68b8      	ldr	r0, [r7, #8]
 8003456:	f000 fb2d 	bl	8003ab4 <_ZNKSt9_Any_data9_M_accessIPKZ7cppmainEUlvE_EERKT_v>
 800345a:	4603      	mov	r3, r0
	  __dest._M_access<_Functor*>() =
 800345c:	681e      	ldr	r6, [r3, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 800345e:	2010      	movs	r0, #16
 8003460:	f00d fcc8 	bl	8010df4 <_Znwj>
 8003464:	4603      	mov	r3, r0
 8003466:	461d      	mov	r5, r3
	  __dest._M_access<_Functor*>() =
 8003468:	462c      	mov	r4, r5
 800346a:	4633      	mov	r3, r6
 800346c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800346e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f7ff fbc2 	bl	8002bfc <_ZNSt9_Any_data9_M_accessIPZ7cppmainEUlvE_EERT_v>
 8003478:	4603      	mov	r3, r0
 800347a:	601d      	str	r5, [r3, #0]
	}
 800347c:	bf00      	nop
 800347e:	3714      	adds	r7, #20
 8003480:	46bd      	mov	sp, r7
 8003482:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003484 <_ZNSt14_Function_base13_Base_managerIZ7cppmainEUlvE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>:
	_M_destroy(_Any_data& __victim, false_type)
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	7039      	strb	r1, [r7, #0]
	  delete __victim._M_access<_Functor*>();
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f7ff fbb4 	bl	8002bfc <_ZNSt9_Any_data9_M_accessIPZ7cppmainEUlvE_EERT_v>
 8003494:	4603      	mov	r3, r0
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d003      	beq.n	80034a4 <_ZNSt14_Function_base13_Base_managerIZ7cppmainEUlvE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE+0x20>
 800349c:	2110      	movs	r1, #16
 800349e:	4618      	mov	r0, r3
 80034a0:	f00d fca6 	bl	8010df0 <_ZdlPvj>
	}
 80034a4:	bf00      	nop
 80034a6:	3708      	adds	r7, #8
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>:
			 );
      }

#if __cplusplus <= 201703L
      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 fb09 	bl	8003acc <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>
 80034ba:	4603      	mov	r3, r0
 80034bc:	4618      	mov	r0, r3
 80034be:	3708      	adds	r7, #8
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80034ce:	2200      	movs	r2, #0
 80034d0:	6839      	ldr	r1, [r7, #0]
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 fb06 	bl	8003ae4 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>
 80034d8:	4603      	mov	r3, r0
 80034da:	4618      	mov	r0, r3
 80034dc:	3708      	adds	r7, #8
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPhjEET_S3_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b084      	sub	sp, #16
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
 80034ea:	6039      	str	r1, [r7, #0]
	  return std::fill_n(__first, __n, _ValueType());
 80034ec:	2300      	movs	r3, #0
 80034ee:	73fb      	strb	r3, [r7, #15]
 80034f0:	f107 030f 	add.w	r3, r7, #15
 80034f4:	461a      	mov	r2, r3
 80034f6:	6839      	ldr	r1, [r7, #0]
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 fb0f 	bl	8003b1c <_ZSt6fill_nIPhjhET_S1_T0_RKT1_>
 80034fe:	4603      	mov	r3, r0
	}
 8003500:	4618      	mov	r0, r3
 8003502:	3710      	adds	r7, #16
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <_ZNKSt8__detail21_Hashtable_ebo_helperILi1ESt4hashIP19FDCAN_HandleTypeDefELb1EE7_M_cgetEv>:
      const _Tp& _M_cget() const { return static_cast<const _Tp&>(*this); }
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4618      	mov	r0, r3
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr

0800351e <_ZNKSt8__detail15_Hash_code_baseIP19FDCAN_HandleTypeDefSt4pairIKS2_St8functionIFvmPhjEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE5_M_h2Ev>:
      _M_h2() const { return __ebo_h2::_M_cget(); }
 800351e:	b580      	push	{r7, lr}
 8003520:	b082      	sub	sp, #8
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 fb13 	bl	8003b52 <_ZNKSt8__detail21_Hashtable_ebo_helperILi2ENS_18_Mod_range_hashingELb1EE7_M_cgetEv>
 800352c:	4603      	mov	r3, r0
 800352e:	4618      	mov	r0, r3
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <_ZNKSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EE7_M_nextEv>:
      _M_next() const noexcept
 8003536:	b480      	push	{r7}
 8003538:	b083      	sub	sp, #12
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Hash_node*>(this->_M_nxt); }
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4618      	mov	r0, r3
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr

0800354e <_ZNKSt8__detail15_Hashtable_baseIP19FDCAN_HandleTypeDefSt4pairIKS2_St8functionIFvmPhjEEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS4_jPNS_10_Hash_nodeIS9_Lb0EEE>:
    _M_equals(const _Key& __k, __hash_code __c, __node_type* __n) const
 800354e:	b5b0      	push	{r4, r5, r7, lr}
 8003550:	b084      	sub	sp, #16
 8003552:	af00      	add	r7, sp, #0
 8003554:	60f8      	str	r0, [r7, #12]
 8003556:	60b9      	str	r1, [r7, #8]
 8003558:	607a      	str	r2, [r7, #4]
 800355a:	603b      	str	r3, [r7, #0]
      return _Equal_hash_code<__node_type>::_S_equals(__c, *__n)
 800355c:	6839      	ldr	r1, [r7, #0]
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 fb02 	bl	8003b68 <_ZNSt8__detail15_Hashtable_baseIP19FDCAN_HandleTypeDefSt4pairIKS2_St8functionIFvmPhjEEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE16_Equal_hash_codeINS_10_Hash_nodeIS9_Lb0EEEE9_S_equalsEjRKSM_>
 8003564:	4603      	mov	r3, r0
	&& _M_eq()(__k, this->_M_extract()(__n->_M_v()));
 8003566:	2b00      	cmp	r3, #0
 8003568:	d01b      	beq.n	80035a2 <_ZNKSt8__detail15_Hashtable_baseIP19FDCAN_HandleTypeDefSt4pairIKS2_St8functionIFvmPhjEEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS4_jPNS_10_Hash_nodeIS9_Lb0EEE+0x54>
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f000 fb08 	bl	8003b80 <_ZNKSt8__detail15_Hashtable_baseIP19FDCAN_HandleTypeDefSt4pairIKS2_St8functionIFvmPhjEEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE5_M_eqEv>
 8003570:	4604      	mov	r4, r0
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f000 fb10 	bl	8003b98 <_ZNKSt8__detail15_Hash_code_baseIP19FDCAN_HandleTypeDefSt4pairIKS2_St8functionIFvmPhjEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE10_M_extractEv>
 8003578:	4605      	mov	r5, r0
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	4618      	mov	r0, r3
 800357e:	f7ff f827 	bl	80025d0 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEE4_M_vEv>
 8003582:	4603      	mov	r3, r0
 8003584:	4619      	mov	r1, r3
 8003586:	4628      	mov	r0, r5
 8003588:	f000 fb12 	bl	8003bb0 <_ZNKSt8__detail10_Select1stclIRSt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOSC_>
 800358c:	4603      	mov	r3, r0
 800358e:	461a      	mov	r2, r3
 8003590:	68b9      	ldr	r1, [r7, #8]
 8003592:	4620      	mov	r0, r4
 8003594:	f000 fb1d 	bl	8003bd2 <_ZNKSt8equal_toIP19FDCAN_HandleTypeDefEclERKS1_S4_>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <_ZNKSt8__detail15_Hashtable_baseIP19FDCAN_HandleTypeDefSt4pairIKS2_St8functionIFvmPhjEEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS4_jPNS_10_Hash_nodeIS9_Lb0EEE+0x54>
 800359e:	2301      	movs	r3, #1
 80035a0:	e000      	b.n	80035a4 <_ZNKSt8__detail15_Hashtable_baseIP19FDCAN_HandleTypeDefSt4pairIKS2_St8functionIFvmPhjEEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS4_jPNS_10_Hash_nodeIS9_Lb0EEE+0x56>
 80035a2:	2300      	movs	r3, #0
    }
 80035a4:	4618      	mov	r0, r3
 80035a6:	3710      	adds	r7, #16
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bdb0      	pop	{r4, r5, r7, pc}

080035ac <_ZNKSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEPNSA_10_Hash_nodeIS8_Lb0EEE>:
      _M_bucket_index(__node_type* __n) const noexcept
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
      { return __hash_code_base::_M_bucket_index(__n, _M_bucket_count); }
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	461a      	mov	r2, r3
 80035bc:	6839      	ldr	r1, [r7, #0]
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 fb1c 	bl	8003bfc <_ZNKSt8__detail15_Hash_code_baseIP19FDCAN_HandleTypeDefSt4pairIKS2_St8functionIFvmPhjEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexEPKNS_10_Hash_nodeIS9_Lb0EEEj>
 80035c4:	4603      	mov	r3, r0
 80035c6:	4618      	mov	r0, r3
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEE6_M_ptrEv>:
      {
        return static_cast<const void*>(&_M_storage);
      }

      _Tp*
      _M_ptr() noexcept
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b082      	sub	sp, #8
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 fb3c 	bl	8003c54 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEE7_M_addrEv>
 80035dc:	4603      	mov	r3, r0
 80035de:	4618      	mov	r0, r3
 80035e0:	3708      	adds	r7, #8
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <_ZNSt10_Head_baseILj0ERKP19FDCAN_HandleTypeDefLb0EEC1ES3_>:
      constexpr _Head_base(const _Head& __h)
 80035e6:	b480      	push	{r7}
 80035e8:	b083      	sub	sp, #12
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
 80035ee:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	683a      	ldr	r2, [r7, #0]
 80035f4:	601a      	str	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4618      	mov	r0, r3
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEE17_M_node_allocatorEv>:
      _M_node_allocator()
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
      { return __ebo_node_alloc::_M_get(); }
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 fb2c 	bl	8003c6a <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEELb1EE6_M_getEv>
 8003612:	4603      	mov	r3, r0
 8003614:	4618      	mov	r0, r3
 8003616:	3708      	adds	r7, #8
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8003626:	2200      	movs	r2, #0
 8003628:	6839      	ldr	r1, [r7, #0]
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 fb28 	bl	8003c80 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEE8allocateEjPKv>
 8003630:	4603      	mov	r3, r0
 8003632:	4618      	mov	r0, r3
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <_ZSt12__to_addressINSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEPT_SD_>:
  template<typename _Ptr, typename _Tp>
    using __ptr_rebind = typename pointer_traits<_Ptr>::template rebind<_Tp>;

  template<typename _Tp>
    constexpr _Tp*
    __to_address(_Tp* __ptr) noexcept
 800363a:	b480      	push	{r7}
 800363c:	b083      	sub	sp, #12
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
    {
      static_assert(!std::is_function<_Tp>::value, "not a function pointer");
      return __ptr;
 8003642:	687b      	ldr	r3, [r7, #4]
    }
 8003644:	4618      	mov	r0, r3
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEE9constructISA_JRKSt21piecewise_construct_tSt5tupleIJRS5_EESI_IJEEEEEvRSC_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8003650:	b5b0      	push	{r4, r5, r7, lr}
 8003652:	b086      	sub	sp, #24
 8003654:	af02      	add	r7, sp, #8
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
 800365c:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f7ff fbe0 	bl	8002e24 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8003664:	4604      	mov	r4, r0
 8003666:	6838      	ldr	r0, [r7, #0]
 8003668:	f7ff fbe7 	bl	8002e3a <_ZSt7forwardISt5tupleIJRKP19FDCAN_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800366c:	4605      	mov	r5, r0
 800366e:	6a38      	ldr	r0, [r7, #32]
 8003670:	f7ff fbee 	bl	8002e50 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003674:	4603      	mov	r3, r0
 8003676:	9300      	str	r3, [sp, #0]
 8003678:	462b      	mov	r3, r5
 800367a:	4622      	mov	r2, r4
 800367c:	68b9      	ldr	r1, [r7, #8]
 800367e:	68f8      	ldr	r0, [r7, #12]
 8003680:	f000 fb2f 	bl	8003ce2 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEE9constructISB_JRKSt21piecewise_construct_tSt5tupleIJRS6_EESI_IJEEEEEvPT_DpOT0_>
	}
 8003684:	bf00      	nop
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	bdb0      	pop	{r4, r5, r7, pc}

0800368c <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	68b9      	ldr	r1, [r7, #8]
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f000 fb47 	bl	8003d30 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEE10deallocateEPSC_j>
 80036a2:	bf00      	nop
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEE7destroyISA_EEvRSC_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b082      	sub	sp, #8
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
 80036b2:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 80036b4:	6839      	ldr	r1, [r7, #0]
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 fb5b 	bl	8003d72 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEE7destroyISB_EEvPT_>
	}
 80036bc:	bf00      	nop
 80036be:	3708      	adds	r7, #8
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEE22_M_deallocate_node_ptrEPSB_>:

  template<typename _NodeAlloc>
    void
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node_ptr(__node_type* __n)
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
    {
      typedef typename __node_alloc_traits::pointer _Ptr;
      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__n);
 80036ce:	6838      	ldr	r0, [r7, #0]
 80036d0:	f000 fb5b 	bl	8003d8a <_ZNSt14pointer_traitsIPNSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEE10pointer_toERSB_>
 80036d4:	60f8      	str	r0, [r7, #12]
      __n->~__node_type();
      __node_alloc_traits::deallocate(_M_node_allocator(), __ptr, 1);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f7ff ff94 	bl	8003604 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEE17_M_node_allocatorEv>
 80036dc:	4603      	mov	r3, r0
 80036de:	2201      	movs	r2, #1
 80036e0:	68f9      	ldr	r1, [r7, #12]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f7ff ffd2 	bl	800368c <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEE10deallocateERSC_PSB_j>
    }
 80036e8:	bf00      	nop
 80036ea:	3710      	adds	r7, #16
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE>:
  template<typename _Key, typename _Value,
	   typename _Alloc, typename _ExtractKey, typename _Equal,
	   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
	   typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b08a      	sub	sp, #40	; 0x28
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	713a      	strb	r2, [r7, #4]
	       _H1, _H2, _Hash, _RehashPolicy, _Traits>::
    _M_rehash_aux(size_type __bkt_count, true_type)
    {
      __bucket_type* __new_buckets = _M_allocate_buckets(__bkt_count);
 80036fc:	68b9      	ldr	r1, [r7, #8]
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f000 fb4f 	bl	8003da2 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj>
 8003704:	61f8      	str	r0, [r7, #28]
      __node_type* __p = _M_begin();
 8003706:	68f8      	ldr	r0, [r7, #12]
 8003708:	f000 fb68 	bl	8003ddc <_ZNKSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 800370c:	6278      	str	r0, [r7, #36]	; 0x24
      _M_before_begin._M_nxt = nullptr;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	609a      	str	r2, [r3, #8]
      std::size_t __bbegin_bkt = 0;
 8003714:	2300      	movs	r3, #0
 8003716:	623b      	str	r3, [r7, #32]
      while (__p)
 8003718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371a:	2b00      	cmp	r3, #0
 800371c:	d03d      	beq.n	800379a <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0xaa>
	{
	  __node_type* __next = __p->_M_next();
 800371e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003720:	f7ff ff09 	bl	8003536 <_ZNKSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EE7_M_nextEv>
 8003724:	61b8      	str	r0, [r7, #24]
	  std::size_t __bkt
	    = __hash_code_base::_M_bucket_index(__p, __bkt_count);
 8003726:	68ba      	ldr	r2, [r7, #8]
 8003728:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	f000 fa66 	bl	8003bfc <_ZNKSt8__detail15_Hash_code_baseIP19FDCAN_HandleTypeDefSt4pairIKS2_St8functionIFvmPhjEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexEPKNS_10_Hash_nodeIS9_Lb0EEEj>
 8003730:	6178      	str	r0, [r7, #20]
	  if (!__new_buckets[__bkt])
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	69fa      	ldr	r2, [r7, #28]
 8003738:	4413      	add	r3, r2
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d11a      	bne.n	8003776 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0x86>
	    {
	      __p->_M_nxt = _M_before_begin._M_nxt;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	689a      	ldr	r2, [r3, #8]
 8003744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003746:	601a      	str	r2, [r3, #0]
	      _M_before_begin._M_nxt = __p;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800374c:	609a      	str	r2, [r3, #8]
	      __new_buckets[__bkt] = &_M_before_begin;
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	69fa      	ldr	r2, [r7, #28]
 8003754:	4413      	add	r3, r2
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	3208      	adds	r2, #8
 800375a:	601a      	str	r2, [r3, #0]
	      if (__p->_M_nxt)
 800375c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d005      	beq.n	8003770 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0x80>
		__new_buckets[__bbegin_bkt] = __p;
 8003764:	6a3b      	ldr	r3, [r7, #32]
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	69fa      	ldr	r2, [r7, #28]
 800376a:	4413      	add	r3, r2
 800376c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800376e:	601a      	str	r2, [r3, #0]
	      __bbegin_bkt = __bkt;
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	623b      	str	r3, [r7, #32]
 8003774:	e00e      	b.n	8003794 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0xa4>
	    }
	  else
	    {
	      __p->_M_nxt = __new_buckets[__bkt]->_M_nxt;
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	69fa      	ldr	r2, [r7, #28]
 800377c:	4413      	add	r3, r2
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003784:	601a      	str	r2, [r3, #0]
	      __new_buckets[__bkt]->_M_nxt = __p;
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	69fa      	ldr	r2, [r7, #28]
 800378c:	4413      	add	r3, r2
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003792:	601a      	str	r2, [r3, #0]
	    }
	  __p = __next;
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	627b      	str	r3, [r7, #36]	; 0x24
      while (__p)
 8003798:	e7be      	b.n	8003718 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0x28>
	}

      _M_deallocate_buckets();
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	f000 fb2a 	bl	8003df4 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>
      _M_bucket_count = __bkt_count;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	68ba      	ldr	r2, [r7, #8]
 80037a4:	605a      	str	r2, [r3, #4]
      _M_buckets = __new_buckets;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	69fa      	ldr	r2, [r7, #28]
 80037aa:	601a      	str	r2, [r3, #0]
    }
 80037ac:	bf00      	nop
 80037ae:	3728      	adds	r7, #40	; 0x28
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <_ZNSt8__detail19_Node_iterator_baseISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEC1EPNS_10_Hash_nodeIS9_Lb0EEE>:
      _Node_iterator_base(__node_type* __p) noexcept
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
      : _M_cur(__p) { }
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	683a      	ldr	r2, [r7, #0]
 80037c2:	601a      	str	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4618      	mov	r0, r3
 80037c8:	370c      	adds	r7, #12
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr

080037d2 <_ZNSt9_Any_data9_M_accessIZN18tutrc_harurobo_lib4C610C4ERNS1_3CANEEUlmPhjE_EERT_v>:
      _M_access()
 80037d2:	b580      	push	{r7, lr}
 80037d4:	b082      	sub	sp, #8
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f7fd f9d8 	bl	8000b90 <_ZNSt9_Any_data9_M_accessEv>
 80037e0:	4603      	mov	r3, r0
 80037e2:	4618      	mov	r0, r3
 80037e4:	3708      	adds	r7, #8
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <_ZNKSt8__detail21_Hashtable_ebo_helperILi1ESt4hashIP17TIM_HandleTypeDefELb1EE7_M_cgetEv>:
      const _Tp& _M_cget() const { return static_cast<const _Tp&>(*this); }
 80037ea:	b480      	push	{r7}
 80037ec:	b083      	sub	sp, #12
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4618      	mov	r0, r3
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <_ZNKSt8__detail15_Hash_code_baseIP17TIM_HandleTypeDefSt4pairIKS2_St8functionIFvvEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE5_M_h2Ev>:
      _M_h2() const { return __ebo_h2::_M_cget(); }
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 f9a2 	bl	8003b52 <_ZNKSt8__detail21_Hashtable_ebo_helperILi2ENS_18_Mod_range_hashingELb1EE7_M_cgetEv>
 800380e:	4603      	mov	r3, r0
 8003810:	4618      	mov	r0, r3
 8003812:	3708      	adds	r7, #8
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <_ZNKSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EE7_M_nextEv>:
      _M_next() const noexcept
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Hash_node*>(this->_M_nxt); }
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4618      	mov	r0, r3
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <_ZNKSt8__detail15_Hashtable_baseIP17TIM_HandleTypeDefSt4pairIKS2_St8functionIFvvEEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS4_jPNS_10_Hash_nodeIS8_Lb0EEE>:
    _M_equals(const _Key& __k, __hash_code __c, __node_type* __n) const
 8003830:	b5b0      	push	{r4, r5, r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
 800383c:	603b      	str	r3, [r7, #0]
      return _Equal_hash_code<__node_type>::_S_equals(__c, *__n)
 800383e:	6839      	ldr	r1, [r7, #0]
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 fae7 	bl	8003e14 <_ZNSt8__detail15_Hashtable_baseIP17TIM_HandleTypeDefSt4pairIKS2_St8functionIFvvEEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE16_Equal_hash_codeINS_10_Hash_nodeIS8_Lb0EEEE9_S_equalsEjRKSL_>
 8003846:	4603      	mov	r3, r0
	&& _M_eq()(__k, this->_M_extract()(__n->_M_v()));
 8003848:	2b00      	cmp	r3, #0
 800384a:	d01b      	beq.n	8003884 <_ZNKSt8__detail15_Hashtable_baseIP17TIM_HandleTypeDefSt4pairIKS2_St8functionIFvvEEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS4_jPNS_10_Hash_nodeIS8_Lb0EEE+0x54>
 800384c:	68f8      	ldr	r0, [r7, #12]
 800384e:	f000 faed 	bl	8003e2c <_ZNKSt8__detail15_Hashtable_baseIP17TIM_HandleTypeDefSt4pairIKS2_St8functionIFvvEEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE5_M_eqEv>
 8003852:	4604      	mov	r4, r0
 8003854:	68f8      	ldr	r0, [r7, #12]
 8003856:	f000 faf5 	bl	8003e44 <_ZNKSt8__detail15_Hash_code_baseIP17TIM_HandleTypeDefSt4pairIKS2_St8functionIFvvEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE10_M_extractEv>
 800385a:	4605      	mov	r5, r0
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	4618      	mov	r0, r3
 8003860:	f7ff f8bf 	bl	80029e2 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEEE4_M_vEv>
 8003864:	4603      	mov	r3, r0
 8003866:	4619      	mov	r1, r3
 8003868:	4628      	mov	r0, r5
 800386a:	f000 faf7 	bl	8003e5c <_ZNKSt8__detail10_Select1stclIRSt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOSB_>
 800386e:	4603      	mov	r3, r0
 8003870:	461a      	mov	r2, r3
 8003872:	68b9      	ldr	r1, [r7, #8]
 8003874:	4620      	mov	r0, r4
 8003876:	f000 fb02 	bl	8003e7e <_ZNKSt8equal_toIP17TIM_HandleTypeDefEclERKS1_S4_>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d001      	beq.n	8003884 <_ZNKSt8__detail15_Hashtable_baseIP17TIM_HandleTypeDefSt4pairIKS2_St8functionIFvvEEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS4_jPNS_10_Hash_nodeIS8_Lb0EEE+0x54>
 8003880:	2301      	movs	r3, #1
 8003882:	e000      	b.n	8003886 <_ZNKSt8__detail15_Hashtable_baseIP17TIM_HandleTypeDefSt4pairIKS2_St8functionIFvvEEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS4_jPNS_10_Hash_nodeIS8_Lb0EEE+0x56>
 8003884:	2300      	movs	r3, #0
    }
 8003886:	4618      	mov	r0, r3
 8003888:	3710      	adds	r7, #16
 800388a:	46bd      	mov	sp, r7
 800388c:	bdb0      	pop	{r4, r5, r7, pc}

0800388e <_ZNKSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEPNS9_10_Hash_nodeIS7_Lb0EEE>:
      _M_bucket_index(__node_type* __n) const noexcept
 800388e:	b580      	push	{r7, lr}
 8003890:	b082      	sub	sp, #8
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
 8003896:	6039      	str	r1, [r7, #0]
      { return __hash_code_base::_M_bucket_index(__n, _M_bucket_count); }
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	461a      	mov	r2, r3
 800389e:	6839      	ldr	r1, [r7, #0]
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 fb01 	bl	8003ea8 <_ZNKSt8__detail15_Hash_code_baseIP17TIM_HandleTypeDefSt4pairIKS2_St8functionIFvvEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexEPKNS_10_Hash_nodeIS8_Lb0EEEj>
 80038a6:	4603      	mov	r3, r0
 80038a8:	4618      	mov	r0, r3
 80038aa:	3708      	adds	r7, #8
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEEE6_M_ptrEv>:
      _M_ptr() noexcept
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f000 fb21 	bl	8003f00 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEEE7_M_addrEv>
 80038be:	4603      	mov	r3, r0
 80038c0:	4618      	mov	r0, r3
 80038c2:	3708      	adds	r7, #8
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <_ZNSt10_Head_baseILj0ERKP17TIM_HandleTypeDefLb0EEC1ES3_>:
      constexpr _Head_base(const _Head& __h)
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	683a      	ldr	r2, [r7, #0]
 80038d6:	601a      	str	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4618      	mov	r0, r3
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEE17_M_node_allocatorEv>:
      _M_node_allocator()
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b082      	sub	sp, #8
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
      { return __ebo_node_alloc::_M_get(); }
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 fb11 	bl	8003f16 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEELb1EE6_M_getEv>
 80038f4:	4603      	mov	r3, r0
 80038f6:	4618      	mov	r0, r3
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEE8allocateERSB_j>:
      allocate(allocator_type& __a, size_type __n)
 80038fe:	b580      	push	{r7, lr}
 8003900:	b082      	sub	sp, #8
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
 8003906:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8003908:	2200      	movs	r2, #0
 800390a:	6839      	ldr	r1, [r7, #0]
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 fb0d 	bl	8003f2c <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEE8allocateEjPKv>
 8003912:	4603      	mov	r3, r0
 8003914:	4618      	mov	r0, r3
 8003916:	3708      	adds	r7, #8
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <_ZSt12__to_addressINSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEPT_SC_>:
    __to_address(_Tp* __ptr) noexcept
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
      return __ptr;
 8003924:	687b      	ldr	r3, [r7, #4]
    }
 8003926:	4618      	mov	r0, r3
 8003928:	370c      	adds	r7, #12
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr

08003932 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEE9constructIS9_JRKSt21piecewise_construct_tSt5tupleIJRS5_EESH_IJEEEEEvRSB_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8003932:	b5b0      	push	{r4, r5, r7, lr}
 8003934:	b086      	sub	sp, #24
 8003936:	af02      	add	r7, sp, #8
 8003938:	60f8      	str	r0, [r7, #12]
 800393a:	60b9      	str	r1, [r7, #8]
 800393c:	607a      	str	r2, [r7, #4]
 800393e:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f7ff fa6f 	bl	8002e24 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8003946:	4604      	mov	r4, r0
 8003948:	6838      	ldr	r0, [r7, #0]
 800394a:	f7ff fc67 	bl	800321c <_ZSt7forwardISt5tupleIJRKP17TIM_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800394e:	4605      	mov	r5, r0
 8003950:	6a38      	ldr	r0, [r7, #32]
 8003952:	f7ff fa7d 	bl	8002e50 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003956:	4603      	mov	r3, r0
 8003958:	9300      	str	r3, [sp, #0]
 800395a:	462b      	mov	r3, r5
 800395c:	4622      	mov	r2, r4
 800395e:	68b9      	ldr	r1, [r7, #8]
 8003960:	68f8      	ldr	r0, [r7, #12]
 8003962:	f000 fb14 	bl	8003f8e <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEE9constructISA_JRKSt21piecewise_construct_tSt5tupleIJRS6_EESH_IJEEEEEvPT_DpOT0_>
	}
 8003966:	bf00      	nop
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bdb0      	pop	{r4, r5, r7, pc}

0800396e <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEE10deallocateERSB_PSA_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800396e:	b580      	push	{r7, lr}
 8003970:	b084      	sub	sp, #16
 8003972:	af00      	add	r7, sp, #0
 8003974:	60f8      	str	r0, [r7, #12]
 8003976:	60b9      	str	r1, [r7, #8]
 8003978:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	68b9      	ldr	r1, [r7, #8]
 800397e:	68f8      	ldr	r0, [r7, #12]
 8003980:	f000 fb2c 	bl	8003fdc <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEE10deallocateEPSB_j>
 8003984:	bf00      	nop
 8003986:	3710      	adds	r7, #16
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEE7destroyIS9_EEvRSB_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8003996:	6839      	ldr	r1, [r7, #0]
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f000 fb40 	bl	800401e <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEE7destroyISA_EEvPT_>
	}
 800399e:	bf00      	nop
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEE22_M_deallocate_node_ptrEPSA_>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node_ptr(__node_type* __n)
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b084      	sub	sp, #16
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
 80039ae:	6039      	str	r1, [r7, #0]
      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__n);
 80039b0:	6838      	ldr	r0, [r7, #0]
 80039b2:	f000 fb40 	bl	8004036 <_ZNSt14pointer_traitsIPNSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEE10pointer_toERSA_>
 80039b6:	60f8      	str	r0, [r7, #12]
      __node_alloc_traits::deallocate(_M_node_allocator(), __ptr, 1);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f7ff ff94 	bl	80038e6 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEE17_M_node_allocatorEv>
 80039be:	4603      	mov	r3, r0
 80039c0:	2201      	movs	r2, #1
 80039c2:	68f9      	ldr	r1, [r7, #12]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7ff ffd2 	bl	800396e <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEE10deallocateERSB_PSA_j>
    }
 80039ca:	bf00      	nop
 80039cc:	3710      	adds	r7, #16
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b08a      	sub	sp, #40	; 0x28
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	60f8      	str	r0, [r7, #12]
 80039da:	60b9      	str	r1, [r7, #8]
 80039dc:	713a      	strb	r2, [r7, #4]
      __bucket_type* __new_buckets = _M_allocate_buckets(__bkt_count);
 80039de:	68b9      	ldr	r1, [r7, #8]
 80039e0:	68f8      	ldr	r0, [r7, #12]
 80039e2:	f000 fb34 	bl	800404e <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj>
 80039e6:	61f8      	str	r0, [r7, #28]
      __node_type* __p = _M_begin();
 80039e8:	68f8      	ldr	r0, [r7, #12]
 80039ea:	f000 fb4d 	bl	8004088 <_ZNKSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 80039ee:	6278      	str	r0, [r7, #36]	; 0x24
      _M_before_begin._M_nxt = nullptr;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2200      	movs	r2, #0
 80039f4:	609a      	str	r2, [r3, #8]
      std::size_t __bbegin_bkt = 0;
 80039f6:	2300      	movs	r3, #0
 80039f8:	623b      	str	r3, [r7, #32]
      while (__p)
 80039fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d03d      	beq.n	8003a7c <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0xaa>
	  __node_type* __next = __p->_M_next();
 8003a00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a02:	f7ff ff09 	bl	8003818 <_ZNKSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EE7_M_nextEv>
 8003a06:	61b8      	str	r0, [r7, #24]
	    = __hash_code_base::_M_bucket_index(__p, __bkt_count);
 8003a08:	68ba      	ldr	r2, [r7, #8]
 8003a0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a0c:	68f8      	ldr	r0, [r7, #12]
 8003a0e:	f000 fa4b 	bl	8003ea8 <_ZNKSt8__detail15_Hash_code_baseIP17TIM_HandleTypeDefSt4pairIKS2_St8functionIFvvEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexEPKNS_10_Hash_nodeIS8_Lb0EEEj>
 8003a12:	6178      	str	r0, [r7, #20]
	  if (!__new_buckets[__bkt])
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	69fa      	ldr	r2, [r7, #28]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d11a      	bne.n	8003a58 <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0x86>
	      __p->_M_nxt = _M_before_begin._M_nxt;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	689a      	ldr	r2, [r3, #8]
 8003a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a28:	601a      	str	r2, [r3, #0]
	      _M_before_begin._M_nxt = __p;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a2e:	609a      	str	r2, [r3, #8]
	      __new_buckets[__bkt] = &_M_before_begin;
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	69fa      	ldr	r2, [r7, #28]
 8003a36:	4413      	add	r3, r2
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	3208      	adds	r2, #8
 8003a3c:	601a      	str	r2, [r3, #0]
	      if (__p->_M_nxt)
 8003a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d005      	beq.n	8003a52 <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0x80>
		__new_buckets[__bbegin_bkt] = __p;
 8003a46:	6a3b      	ldr	r3, [r7, #32]
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	69fa      	ldr	r2, [r7, #28]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a50:	601a      	str	r2, [r3, #0]
	      __bbegin_bkt = __bkt;
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	623b      	str	r3, [r7, #32]
 8003a56:	e00e      	b.n	8003a76 <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0xa4>
	      __p->_M_nxt = __new_buckets[__bkt]->_M_nxt;
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	69fa      	ldr	r2, [r7, #28]
 8003a5e:	4413      	add	r3, r2
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a66:	601a      	str	r2, [r3, #0]
	      __new_buckets[__bkt]->_M_nxt = __p;
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	69fa      	ldr	r2, [r7, #28]
 8003a6e:	4413      	add	r3, r2
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a74:	601a      	str	r2, [r3, #0]
	  __p = __next;
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	627b      	str	r3, [r7, #36]	; 0x24
      while (__p)
 8003a7a:	e7be      	b.n	80039fa <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0x28>
      _M_deallocate_buckets();
 8003a7c:	68f8      	ldr	r0, [r7, #12]
 8003a7e:	f000 fb0f 	bl	80040a0 <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>
      _M_bucket_count = __bkt_count;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	68ba      	ldr	r2, [r7, #8]
 8003a86:	605a      	str	r2, [r3, #4]
      _M_buckets = __new_buckets;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	69fa      	ldr	r2, [r7, #28]
 8003a8c:	601a      	str	r2, [r3, #0]
    }
 8003a8e:	bf00      	nop
 8003a90:	3728      	adds	r7, #40	; 0x28
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <_ZNSt8__detail19_Node_iterator_baseISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEC1EPNS_10_Hash_nodeIS8_Lb0EEE>:
      _Node_iterator_base(__node_type* __p) noexcept
 8003a96:	b480      	push	{r7}
 8003a98:	b083      	sub	sp, #12
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
 8003a9e:	6039      	str	r1, [r7, #0]
      : _M_cur(__p) { }
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	683a      	ldr	r2, [r7, #0]
 8003aa4:	601a      	str	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <_ZNKSt9_Any_data9_M_accessIPKZ7cppmainEUlvE_EERKT_v>:
      _M_access() const
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f7fd f872 	bl	8000ba6 <_ZNKSt9_Any_data9_M_accessEv>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3708      	adds	r7, #8
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8003ad4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8003ad8:	4618      	mov	r0, r3
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8003af0:	68f8      	ldr	r0, [r7, #12]
 8003af2:	f7ff ffeb 	bl	8003acc <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>
 8003af6:	4602      	mov	r2, r0
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	4293      	cmp	r3, r2
 8003afc:	bf8c      	ite	hi
 8003afe:	2301      	movhi	r3, #1
 8003b00:	2300      	movls	r3, #0
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d001      	beq.n	8003b0c <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8003b08:	f00d f985 	bl	8010e16 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003b0c:	68b8      	ldr	r0, [r7, #8]
 8003b0e:	f00d f971 	bl	8010df4 <_Znwj>
 8003b12:	4603      	mov	r3, r0
      }
 8003b14:	4618      	mov	r0, r3
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <_ZSt6fill_nIPhjhET_S1_T0_RKT1_>:
  // DR 865. More algorithms that throw away information
  // DR 426. search_n(), fill_n(), and generate_n() with negative n
  template<typename _OI, typename _Size, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
 8003b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b1e:	b085      	sub	sp, #20
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_OutputIteratorConcept<_OI, _Tp>)

      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 8003b28:	68fc      	ldr	r4, [r7, #12]
 8003b2a:	68b8      	ldr	r0, [r7, #8]
 8003b2c:	f7fc fec0 	bl	80008b0 <_ZSt17__size_to_integerj>
 8003b30:	4605      	mov	r5, r0
			       std::__iterator_category(__first));
 8003b32:	f107 030c 	add.w	r3, r7, #12
 8003b36:	4618      	mov	r0, r3
 8003b38:	f000 fac2 	bl	80040c0 <_ZSt19__iterator_categoryIPhENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 8003b3c:	4633      	mov	r3, r6
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	4629      	mov	r1, r5
 8003b42:	4620      	mov	r0, r4
 8003b44:	f000 fac7 	bl	80040d6 <_ZSt10__fill_n_aIPhjhET_S1_T0_RKT1_St26random_access_iterator_tag>
 8003b48:	4603      	mov	r3, r0
    }
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3714      	adds	r7, #20
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b52 <_ZNKSt8__detail21_Hashtable_ebo_helperILi2ENS_18_Mod_range_hashingELb1EE7_M_cgetEv>:
      const _Tp& _M_cget() const { return static_cast<const _Tp&>(*this); }
 8003b52:	b480      	push	{r7}
 8003b54:	b083      	sub	sp, #12
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <_ZNSt8__detail15_Hashtable_baseIP19FDCAN_HandleTypeDefSt4pairIKS2_St8functionIFvmPhjEEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE16_Equal_hash_codeINS_10_Hash_nodeIS9_Lb0EEEE9_S_equalsEjRKSM_>:
       _S_equals(__hash_code, const _NodeT&)
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	6039      	str	r1, [r7, #0]
       { return true; }
 8003b72:	2301      	movs	r3, #1
 8003b74:	4618      	mov	r0, r3
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <_ZNKSt8__detail15_Hashtable_baseIP19FDCAN_HandleTypeDefSt4pairIKS2_St8functionIFvmPhjEEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE5_M_eqEv>:
    _M_eq() const { return _EqualEBO::_M_cget(); }
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 fabf 	bl	800410c <_ZNKSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIP19FDCAN_HandleTypeDefELb1EE7_M_cgetEv>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	4618      	mov	r0, r3
 8003b92:	3708      	adds	r7, #8
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <_ZNKSt8__detail15_Hash_code_baseIP19FDCAN_HandleTypeDefSt4pairIKS2_St8functionIFvmPhjEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE10_M_extractEv>:
      _M_extract() const { return __ebo_extract_key::_M_cget(); }
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f000 fabe 	bl	8004122 <_ZNKSt8__detail21_Hashtable_ebo_helperILi0ENS_10_Select1stELb1EE7_M_cgetEv>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3708      	adds	r7, #8
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <_ZNKSt8__detail10_Select1stclIRSt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOSC_>:
      operator()(_Tp&& __x) const
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
      { return std::get<0>(std::forward<_Tp>(__x)); }
 8003bba:	6838      	ldr	r0, [r7, #0]
 8003bbc:	f000 fabc 	bl	8004138 <_ZSt7forwardIRSt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEEOT_RNSt16remove_referenceISA_E4typeE>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f000 fac3 	bl	800414e <_ZSt3getILj0EKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEERNSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeERSB_>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3708      	adds	r7, #8
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <_ZNKSt8equal_toIP19FDCAN_HandleTypeDefEclERKS1_S4_>:
  template<typename _Tp>
    struct equal_to : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 8003bd2:	b480      	push	{r7}
 8003bd4:	b085      	sub	sp, #20
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	60f8      	str	r0, [r7, #12]
 8003bda:	60b9      	str	r1, [r7, #8]
 8003bdc:	607a      	str	r2, [r7, #4]
      { return __x == __y; }
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	bf0c      	ite	eq
 8003bea:	2301      	moveq	r3, #1
 8003bec:	2300      	movne	r3, #0
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3714      	adds	r7, #20
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <_ZNKSt8__detail15_Hash_code_baseIP19FDCAN_HandleTypeDefSt4pairIKS2_St8functionIFvmPhjEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexEPKNS_10_Hash_nodeIS9_Lb0EEEj>:
      _M_bucket_index(const __node_type* __p, std::size_t __bkt_count) const
 8003bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bfe:	b085      	sub	sp, #20
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]
      { return _M_h2()(_M_h1()(_M_extract()(__p->_M_v())), __bkt_count); }
 8003c08:	68f8      	ldr	r0, [r7, #12]
 8003c0a:	f7ff fc88 	bl	800351e <_ZNKSt8__detail15_Hash_code_baseIP19FDCAN_HandleTypeDefSt4pairIKS2_St8functionIFvmPhjEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE5_M_h2Ev>
 8003c0e:	4604      	mov	r4, r0
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f7ff f87a 	bl	8002d0a <_ZNKSt8__detail15_Hash_code_baseIP19FDCAN_HandleTypeDefSt4pairIKS2_St8functionIFvmPhjEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE5_M_h1Ev>
 8003c16:	4605      	mov	r5, r0
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f7ff ffbd 	bl	8003b98 <_ZNKSt8__detail15_Hash_code_baseIP19FDCAN_HandleTypeDefSt4pairIKS2_St8functionIFvmPhjEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE10_M_extractEv>
 8003c1e:	4606      	mov	r6, r0
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	4618      	mov	r0, r3
 8003c24:	f000 fa9f 	bl	8004166 <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEE4_M_vEv>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	4630      	mov	r0, r6
 8003c2e:	f000 faa6 	bl	800417e <_ZNKSt8__detail10_Select1stclIRKSt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOSD_>
 8003c32:	4603      	mov	r3, r0
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4619      	mov	r1, r3
 8003c38:	4628      	mov	r0, r5
 8003c3a:	f7ff f872 	bl	8002d22 <_ZNKSt4hashIP19FDCAN_HandleTypeDefEclES1_>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	4619      	mov	r1, r3
 8003c44:	4620      	mov	r0, r4
 8003c46:	f7fc ffe8 	bl	8000c1a <_ZNKSt8__detail18_Mod_range_hashingclEjj>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3714      	adds	r7, #20
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c54 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEE7_M_addrEv>:
      _M_addr() noexcept
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 8003c5c:	687b      	ldr	r3, [r7, #4]
      }
 8003c5e:	4618      	mov	r0, r3
 8003c60:	370c      	adds	r7, #12
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr

08003c6a <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEELb1EE6_M_getEv>:
      _Tp& _M_get() { return static_cast<_Tp&>(*this); }
 8003c6a:	b480      	push	{r7}
 8003c6c:	b083      	sub	sp, #12
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4618      	mov	r0, r3
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f000 fa87 	bl	80041a0 <_ZNK9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEE11_M_max_sizeEv>
 8003c92:	4602      	mov	r2, r0
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	4293      	cmp	r3, r2
 8003c98:	bf8c      	ite	hi
 8003c9a:	2301      	movhi	r3, #1
 8003c9c:	2300      	movls	r3, #0
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d001      	beq.n	8003ca8 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8003ca4:	f00d f8b7 	bl	8010e16 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003ca8:	68ba      	ldr	r2, [r7, #8]
 8003caa:	4613      	mov	r3, r2
 8003cac:	005b      	lsls	r3, r3, #1
 8003cae:	4413      	add	r3, r2
 8003cb0:	00db      	lsls	r3, r3, #3
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f00d f89e 	bl	8010df4 <_Znwj>
 8003cb8:	4603      	mov	r3, r0
      }
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <_ZNSt5tupleIJRKP19FDCAN_HandleTypeDefEEC1EOS4_>:
	noexcept(__nothrow_constructible<_UElements...>())
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b082      	sub	sp, #8
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
 8003cca:	6039      	str	r1, [r7, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	683a      	ldr	r2, [r7, #0]
 8003cd0:	4611      	mov	r1, r2
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f000 fa72 	bl	80041bc <_ZNSt11_Tuple_implILj0EJRKP19FDCAN_HandleTypeDefEEC1EOS4_>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3708      	adds	r7, #8
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEE9constructISB_JRKSt21piecewise_construct_tSt5tupleIJRS6_EESI_IJEEEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8003ce2:	b590      	push	{r4, r7, lr}
 8003ce4:	b089      	sub	sp, #36	; 0x24
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	60f8      	str	r0, [r7, #12]
 8003cea:	60b9      	str	r1, [r7, #8]
 8003cec:	607a      	str	r2, [r7, #4]
 8003cee:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f7ff f897 	bl	8002e24 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8003cf6:	6838      	ldr	r0, [r7, #0]
 8003cf8:	f7ff f89f 	bl	8002e3a <_ZSt7forwardISt5tupleIJRKP19FDCAN_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	f107 0318 	add.w	r3, r7, #24
 8003d02:	4611      	mov	r1, r2
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7ff ffdc 	bl	8003cc2 <_ZNSt5tupleIJRKP19FDCAN_HandleTypeDefEEC1EOS4_>
 8003d0a:	f107 0418 	add.w	r4, r7, #24
 8003d0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d10:	f7ff f89e 	bl	8002e50 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	4619      	mov	r1, r3
 8003d18:	2014      	movs	r0, #20
 8003d1a:	f7fc fdd4 	bl	80008c6 <_ZnwjPv>
 8003d1e:	7f3b      	ldrb	r3, [r7, #28]
 8003d20:	4622      	mov	r2, r4
 8003d22:	7d39      	ldrb	r1, [r7, #20]
 8003d24:	f000 fa61 	bl	80041ea <_ZNSt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EESB_IJDpT0_EE>
 8003d28:	bf00      	nop
 8003d2a:	3724      	adds	r7, #36	; 0x24
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd90      	pop	{r4, r7, pc}

08003d30 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEE10deallocateEPSC_j>:
      deallocate(_Tp* __p, size_type __t)
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	005b      	lsls	r3, r3, #1
 8003d42:	4413      	add	r3, r2
 8003d44:	00db      	lsls	r3, r3, #3
 8003d46:	4619      	mov	r1, r3
 8003d48:	68b8      	ldr	r0, [r7, #8]
 8003d4a:	f00d f851 	bl	8010df0 <_ZdlPvj>
      }
 8003d4e:	bf00      	nop
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <_ZNSt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEED1Ev>:
   *  @tparam _T2  Type of second object.
   *
   *  <https://gcc.gnu.org/onlinedocs/libstdc++/manual/utilities.html>
   */
  template<typename _T1, typename _T2>
    struct pair
 8003d56:	b580      	push	{r7, lr}
 8003d58:	b082      	sub	sp, #8
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	3304      	adds	r3, #4
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7fd f9a6 	bl	80010b4 <_ZNSt8functionIFvmPhjEED1Ev>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3708      	adds	r7, #8
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEE7destroyISB_EEvPT_>:
	destroy(_Up* __p)
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b082      	sub	sp, #8
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
 8003d7a:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8003d7c:	6838      	ldr	r0, [r7, #0]
 8003d7e:	f7ff ffea 	bl	8003d56 <_ZNSt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEED1Ev>
 8003d82:	bf00      	nop
 8003d84:	3708      	adds	r7, #8
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <_ZNSt14pointer_traitsIPNSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEE10pointer_toERSB_>:
      pointer_to(__make_not_void<element_type>& __r) noexcept
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b082      	sub	sp, #8
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
      { return std::addressof(__r); }
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 fa3d 	bl	8004212 <_ZSt9addressofINSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEPT_RSC_>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3708      	adds	r7, #8
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}

08003da2 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj>:
      _M_allocate_buckets(size_type __bkt_count)
 8003da2:	b580      	push	{r7, lr}
 8003da4:	b082      	sub	sp, #8
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
 8003daa:	6039      	str	r1, [r7, #0]
	if (__builtin_expect(__bkt_count == 1, false))
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	bf0c      	ite	eq
 8003db2:	2301      	moveq	r3, #1
 8003db4:	2300      	movne	r3, #0
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d005      	beq.n	8003dc8 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj+0x26>
	    _M_single_bucket = nullptr;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	619a      	str	r2, [r3, #24]
	    return &_M_single_bucket;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	3318      	adds	r3, #24
 8003dc6:	e005      	b.n	8003dd4 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj+0x32>
	return __hashtable_alloc::_M_allocate_buckets(__bkt_count);
 8003dc8:	6839      	ldr	r1, [r7, #0]
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 fa2d 	bl	800422a <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEE19_M_allocate_bucketsEj>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	bf00      	nop
      }
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3708      	adds	r7, #8
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <_ZNKSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>:
      _M_begin() const
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
      { return static_cast<__node_type*>(_M_before_begin._M_nxt); }
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	4618      	mov	r0, r3
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>:
      _M_deallocate_buckets()
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6819      	ldr	r1, [r3, #0]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	461a      	mov	r2, r3
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 fa3c 	bl	8004284 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNSA_15_Hash_node_baseEj>
 8003e0c:	bf00      	nop
 8003e0e:	3708      	adds	r7, #8
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <_ZNSt8__detail15_Hashtable_baseIP17TIM_HandleTypeDefSt4pairIKS2_St8functionIFvvEEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE16_Equal_hash_codeINS_10_Hash_nodeIS8_Lb0EEEE9_S_equalsEjRKSL_>:
       _S_equals(__hash_code, const _NodeT&)
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
       { return true; }
 8003e1e:	2301      	movs	r3, #1
 8003e20:	4618      	mov	r0, r3
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <_ZNKSt8__detail15_Hashtable_baseIP17TIM_HandleTypeDefSt4pairIKS2_St8functionIFvvEEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE5_M_eqEv>:
    _M_eq() const { return _EqualEBO::_M_cget(); }
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f000 fa3c 	bl	80042b2 <_ZNKSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIP17TIM_HandleTypeDefELb1EE7_M_cgetEv>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3708      	adds	r7, #8
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <_ZNKSt8__detail15_Hash_code_baseIP17TIM_HandleTypeDefSt4pairIKS2_St8functionIFvvEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE10_M_extractEv>:
      _M_extract() const { return __ebo_extract_key::_M_cget(); }
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f000 f968 	bl	8004122 <_ZNKSt8__detail21_Hashtable_ebo_helperILi0ENS_10_Select1stELb1EE7_M_cgetEv>
 8003e52:	4603      	mov	r3, r0
 8003e54:	4618      	mov	r0, r3
 8003e56:	3708      	adds	r7, #8
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <_ZNKSt8__detail10_Select1stclIRSt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOSB_>:
      operator()(_Tp&& __x) const
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
      { return std::get<0>(std::forward<_Tp>(__x)); }
 8003e66:	6838      	ldr	r0, [r7, #0]
 8003e68:	f000 fa2e 	bl	80042c8 <_ZSt7forwardIRSt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f000 fa35 	bl	80042de <_ZSt3getILj0EKP17TIM_HandleTypeDefSt8functionIFvvEEERNSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeERSA_>
 8003e74:	4603      	mov	r3, r0
 8003e76:	4618      	mov	r0, r3
 8003e78:	3708      	adds	r7, #8
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <_ZNKSt8equal_toIP17TIM_HandleTypeDefEclERKS1_S4_>:
      operator()(const _Tp& __x, const _Tp& __y) const
 8003e7e:	b480      	push	{r7}
 8003e80:	b085      	sub	sp, #20
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	60f8      	str	r0, [r7, #12]
 8003e86:	60b9      	str	r1, [r7, #8]
 8003e88:	607a      	str	r2, [r7, #4]
      { return __x == __y; }
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	bf0c      	ite	eq
 8003e96:	2301      	moveq	r3, #1
 8003e98:	2300      	movne	r3, #0
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3714      	adds	r7, #20
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <_ZNKSt8__detail15_Hash_code_baseIP17TIM_HandleTypeDefSt4pairIKS2_St8functionIFvvEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexEPKNS_10_Hash_nodeIS8_Lb0EEEj>:
      _M_bucket_index(const __node_type* __p, std::size_t __bkt_count) const
 8003ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003eaa:	b085      	sub	sp, #20
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	607a      	str	r2, [r7, #4]
      { return _M_h2()(_M_h1()(_M_extract()(__p->_M_v())), __bkt_count); }
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	f7ff fca3 	bl	8003800 <_ZNKSt8__detail15_Hash_code_baseIP17TIM_HandleTypeDefSt4pairIKS2_St8functionIFvvEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE5_M_h2Ev>
 8003eba:	4604      	mov	r4, r0
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f7ff f920 	bl	8003102 <_ZNKSt8__detail15_Hash_code_baseIP17TIM_HandleTypeDefSt4pairIKS2_St8functionIFvvEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE5_M_h1Ev>
 8003ec2:	4605      	mov	r5, r0
 8003ec4:	68f8      	ldr	r0, [r7, #12]
 8003ec6:	f7ff ffbd 	bl	8003e44 <_ZNKSt8__detail15_Hash_code_baseIP17TIM_HandleTypeDefSt4pairIKS2_St8functionIFvvEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE10_M_extractEv>
 8003eca:	4606      	mov	r6, r0
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f000 fa11 	bl	80042f6 <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEEE4_M_vEv>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	4630      	mov	r0, r6
 8003eda:	f000 fa18 	bl	800430e <_ZNKSt8__detail10_Select1stclIRKSt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOSC_>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	4628      	mov	r0, r5
 8003ee6:	f7ff f918 	bl	800311a <_ZNKSt4hashIP17TIM_HandleTypeDefEclES1_>
 8003eea:	4603      	mov	r3, r0
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	4619      	mov	r1, r3
 8003ef0:	4620      	mov	r0, r4
 8003ef2:	f7fc fe92 	bl	8000c1a <_ZNKSt8__detail18_Mod_range_hashingclEjj>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3714      	adds	r7, #20
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f00 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEEE7_M_addrEv>:
      _M_addr() noexcept
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 8003f08:	687b      	ldr	r3, [r7, #4]
      }
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr

08003f16 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEELb1EE6_M_getEv>:
      _Tp& _M_get() { return static_cast<_Tp&>(*this); }
 8003f16:	b480      	push	{r7}
 8003f18:	b083      	sub	sp, #12
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4618      	mov	r0, r3
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8003f38:	68f8      	ldr	r0, [r7, #12]
 8003f3a:	f000 f9f9 	bl	8004330 <_ZNK9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEE11_M_max_sizeEv>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	4293      	cmp	r3, r2
 8003f44:	bf8c      	ite	hi
 8003f46:	2301      	movhi	r3, #1
 8003f48:	2300      	movls	r3, #0
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d001      	beq.n	8003f54 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8003f50:	f00c ff61 	bl	8010e16 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003f54:	68ba      	ldr	r2, [r7, #8]
 8003f56:	4613      	mov	r3, r2
 8003f58:	005b      	lsls	r3, r3, #1
 8003f5a:	4413      	add	r3, r2
 8003f5c:	00db      	lsls	r3, r3, #3
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f00c ff48 	bl	8010df4 <_Znwj>
 8003f64:	4603      	mov	r3, r0
      }
 8003f66:	4618      	mov	r0, r3
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}

08003f6e <_ZNSt5tupleIJRKP17TIM_HandleTypeDefEEC1EOS4_>:
 8003f6e:	b580      	push	{r7, lr}
 8003f70:	b082      	sub	sp, #8
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
 8003f76:	6039      	str	r1, [r7, #0]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	683a      	ldr	r2, [r7, #0]
 8003f7c:	4611      	mov	r1, r2
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f000 f9e4 	bl	800434c <_ZNSt11_Tuple_implILj0EJRKP17TIM_HandleTypeDefEEC1EOS4_>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4618      	mov	r0, r3
 8003f88:	3708      	adds	r7, #8
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEE9constructISA_JRKSt21piecewise_construct_tSt5tupleIJRS6_EESH_IJEEEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8003f8e:	b590      	push	{r4, r7, lr}
 8003f90:	b089      	sub	sp, #36	; 0x24
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	60f8      	str	r0, [r7, #12]
 8003f96:	60b9      	str	r1, [r7, #8]
 8003f98:	607a      	str	r2, [r7, #4]
 8003f9a:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f7fe ff41 	bl	8002e24 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8003fa2:	6838      	ldr	r0, [r7, #0]
 8003fa4:	f7ff f93a 	bl	800321c <_ZSt7forwardISt5tupleIJRKP17TIM_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	f107 0318 	add.w	r3, r7, #24
 8003fae:	4611      	mov	r1, r2
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7ff ffdc 	bl	8003f6e <_ZNSt5tupleIJRKP17TIM_HandleTypeDefEEC1EOS4_>
 8003fb6:	f107 0418 	add.w	r4, r7, #24
 8003fba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fbc:	f7fe ff48 	bl	8002e50 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	2014      	movs	r0, #20
 8003fc6:	f7fc fc7e 	bl	80008c6 <_ZnwjPv>
 8003fca:	7f3b      	ldrb	r3, [r7, #28]
 8003fcc:	4622      	mov	r2, r4
 8003fce:	7d39      	ldrb	r1, [r7, #20]
 8003fd0:	f000 f9d3 	bl	800437a <_ZNSt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EESA_IJDpT0_EE>
 8003fd4:	bf00      	nop
 8003fd6:	3724      	adds	r7, #36	; 0x24
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd90      	pop	{r4, r7, pc}

08003fdc <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEE10deallocateEPSB_j>:
      deallocate(_Tp* __p, size_type __t)
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	4613      	mov	r3, r2
 8003fec:	005b      	lsls	r3, r3, #1
 8003fee:	4413      	add	r3, r2
 8003ff0:	00db      	lsls	r3, r3, #3
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	68b8      	ldr	r0, [r7, #8]
 8003ff6:	f00c fefb 	bl	8010df0 <_ZdlPvj>
      }
 8003ffa:	bf00      	nop
 8003ffc:	3710      	adds	r7, #16
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}

08004002 <_ZNSt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEED1Ev>:
 8004002:	b580      	push	{r7, lr}
 8004004:	b082      	sub	sp, #8
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	3304      	adds	r3, #4
 800400e:	4618      	mov	r0, r3
 8004010:	f7fd fd12 	bl	8001a38 <_ZNSt8functionIFvvEED1Ev>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4618      	mov	r0, r3
 8004018:	3708      	adds	r7, #8
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}

0800401e <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEE7destroyISA_EEvPT_>:
	destroy(_Up* __p)
 800401e:	b580      	push	{r7, lr}
 8004020:	b082      	sub	sp, #8
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
 8004026:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8004028:	6838      	ldr	r0, [r7, #0]
 800402a:	f7ff ffea 	bl	8004002 <_ZNSt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEED1Ev>
 800402e:	bf00      	nop
 8004030:	3708      	adds	r7, #8
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <_ZNSt14pointer_traitsIPNSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEE10pointer_toERSA_>:
      pointer_to(__make_not_void<element_type>& __r) noexcept
 8004036:	b580      	push	{r7, lr}
 8004038:	b082      	sub	sp, #8
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
      { return std::addressof(__r); }
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 f9af 	bl	80043a2 <_ZSt9addressofINSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEPT_RSB_>
 8004044:	4603      	mov	r3, r0
 8004046:	4618      	mov	r0, r3
 8004048:	3708      	adds	r7, #8
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}

0800404e <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj>:
      _M_allocate_buckets(size_type __bkt_count)
 800404e:	b580      	push	{r7, lr}
 8004050:	b082      	sub	sp, #8
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
 8004056:	6039      	str	r1, [r7, #0]
	if (__builtin_expect(__bkt_count == 1, false))
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	2b01      	cmp	r3, #1
 800405c:	bf0c      	ite	eq
 800405e:	2301      	moveq	r3, #1
 8004060:	2300      	movne	r3, #0
 8004062:	b2db      	uxtb	r3, r3
 8004064:	2b00      	cmp	r3, #0
 8004066:	d005      	beq.n	8004074 <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj+0x26>
	    _M_single_bucket = nullptr;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	619a      	str	r2, [r3, #24]
	    return &_M_single_bucket;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	3318      	adds	r3, #24
 8004072:	e005      	b.n	8004080 <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj+0x32>
	return __hashtable_alloc::_M_allocate_buckets(__bkt_count);
 8004074:	6839      	ldr	r1, [r7, #0]
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 f99f 	bl	80043ba <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEE19_M_allocate_bucketsEj>
 800407c:	4603      	mov	r3, r0
 800407e:	bf00      	nop
      }
 8004080:	4618      	mov	r0, r3
 8004082:	3708      	adds	r7, #8
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <_ZNKSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>:
      _M_begin() const
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
      { return static_cast<__node_type*>(_M_before_begin._M_nxt); }
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	4618      	mov	r0, r3
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>:
      _M_deallocate_buckets()
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6819      	ldr	r1, [r3, #0]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	461a      	mov	r2, r3
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 f9ae 	bl	8004414 <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS9_15_Hash_node_baseEj>
 80040b8:	bf00      	nop
 80040ba:	3708      	adds	r7, #8
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <_ZSt19__iterator_categoryIPhENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 80040c8:	bf00      	nop
 80040ca:	4618      	mov	r0, r3
 80040cc:	370c      	adds	r7, #12
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr

080040d6 <_ZSt10__fill_n_aIPhjhET_S1_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
 80040d6:	b580      	push	{r7, lr}
 80040d8:	b084      	sub	sp, #16
 80040da:	af00      	add	r7, sp, #0
 80040dc:	60f8      	str	r0, [r7, #12]
 80040de:	60b9      	str	r1, [r7, #8]
 80040e0:	607a      	str	r2, [r7, #4]
 80040e2:	703b      	strb	r3, [r7, #0]
      if (__n <= 0)
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <_ZSt10__fill_n_aIPhjhET_S1_T0_RKT1_St26random_access_iterator_tag+0x18>
	return __first;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	e00a      	b.n	8004104 <_ZSt10__fill_n_aIPhjhET_S1_T0_RKT1_St26random_access_iterator_tag+0x2e>
      std::__fill_a(__first, __first + __n, __value);
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	4413      	add	r3, r2
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	4619      	mov	r1, r3
 80040f8:	68f8      	ldr	r0, [r7, #12]
 80040fa:	f000 f9a2 	bl	8004442 <_ZSt8__fill_aIPhhEvT_S1_RKT0_>
      return __first + __n;
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	4413      	add	r3, r2
    }
 8004104:	4618      	mov	r0, r3
 8004106:	3710      	adds	r7, #16
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <_ZNKSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIP19FDCAN_HandleTypeDefELb1EE7_M_cgetEv>:
      const _Tp& _M_cget() const { return static_cast<const _Tp&>(*this); }
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4618      	mov	r0, r3
 8004118:	370c      	adds	r7, #12
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr

08004122 <_ZNKSt8__detail21_Hashtable_ebo_helperILi0ENS_10_Select1stELb1EE7_M_cgetEv>:
 8004122:	b480      	push	{r7}
 8004124:	b083      	sub	sp, #12
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4618      	mov	r0, r3
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <_ZSt7forwardIRSt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEEOT_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4618      	mov	r0, r3
 8004144:	370c      	adds	r7, #12
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr

0800414e <_ZSt3getILj0EKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEERNSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeERSB_>:
        { return std::forward<const _Tp2>(__pair.second); }
    };

  template<std::size_t _Int, class _Tp1, class _Tp2>
    constexpr typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&
    get(std::pair<_Tp1, _Tp2>& __in) noexcept
 800414e:	b580      	push	{r7, lr}
 8004150:	b082      	sub	sp, #8
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
    { return __pair_get<_Int>::__get(__in); }
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 f982 	bl	8004460 <_ZNSt10__pair_getILj0EE5__getIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEERT_RSt4pairIS9_T0_E>
 800415c:	4603      	mov	r3, r0
 800415e:	4618      	mov	r0, r3
 8004160:	3708      	adds	r7, #8
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}

08004166 <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEE4_M_vEv>:
      _M_v() const noexcept
 8004166:	b580      	push	{r7, lr}
 8004168:	b082      	sub	sp, #8
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
      { return *_M_valptr(); }
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 f981 	bl	8004476 <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEE9_M_valptrEv>
 8004174:	4603      	mov	r3, r0
 8004176:	4618      	mov	r0, r3
 8004178:	3708      	adds	r7, #8
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}

0800417e <_ZNKSt8__detail10_Select1stclIRKSt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOSD_>:
      operator()(_Tp&& __x) const
 800417e:	b580      	push	{r7, lr}
 8004180:	b082      	sub	sp, #8
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
 8004186:	6039      	str	r1, [r7, #0]
      { return std::get<0>(std::forward<_Tp>(__x)); }
 8004188:	6838      	ldr	r0, [r7, #0]
 800418a:	f000 f982 	bl	8004492 <_ZSt7forwardIRKSt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEEOT_RNSt16remove_referenceISB_E4typeE>
 800418e:	4603      	mov	r3, r0
 8004190:	4618      	mov	r0, r3
 8004192:	f000 f989 	bl	80044a8 <_ZSt3getILj0EKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEERKNSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeERKSB_>
 8004196:	4603      	mov	r3, r0
 8004198:	4618      	mov	r0, r3
 800419a:	3708      	adds	r7, #8
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <_ZNK9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80041a8:	4b03      	ldr	r3, [pc, #12]	; (80041b8 <_ZNK9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEE11_M_max_sizeEv+0x18>)
      }
 80041aa:	4618      	mov	r0, r3
 80041ac:	370c      	adds	r7, #12
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	05555555 	.word	0x05555555

080041bc <_ZNSt11_Tuple_implILj0EJRKP19FDCAN_HandleTypeDefEEC1EOS4_>:
      _Tuple_impl(_Tuple_impl&& __in)
 80041bc:	b590      	push	{r4, r7, lr}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 80041c6:	687c      	ldr	r4, [r7, #4]
 80041c8:	6838      	ldr	r0, [r7, #0]
 80041ca:	f000 f979 	bl	80044c0 <_ZNSt11_Tuple_implILj0EJRKP19FDCAN_HandleTypeDefEE7_M_headERS4_>
 80041ce:	4603      	mov	r3, r0
 80041d0:	4618      	mov	r0, r3
 80041d2:	f000 f982 	bl	80044da <_ZSt7forwardIRKP19FDCAN_HandleTypeDefEOT_RNSt16remove_referenceIS4_E4typeE>
 80041d6:	4603      	mov	r3, r0
 80041d8:	4619      	mov	r1, r3
 80041da:	4620      	mov	r0, r4
 80041dc:	f7ff fa03 	bl	80035e6 <_ZNSt10_Head_baseILj0ERKP19FDCAN_HandleTypeDefLb0EEC1ES3_>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4618      	mov	r0, r3
 80041e4:	370c      	adds	r7, #12
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd90      	pop	{r4, r7, pc}

080041ea <_ZNSt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EESB_IJDpT0_EE>:
  */
  template<class _T1, class _T2>
    template<typename... _Args1, typename... _Args2>
      _GLIBCXX20_CONSTEXPR
      inline
      pair<_T1, _T2>::
 80041ea:	b5b0      	push	{r4, r5, r7, lr}
 80041ec:	b086      	sub	sp, #24
 80041ee:	af02      	add	r7, sp, #8
 80041f0:	60f8      	str	r0, [r7, #12]
 80041f2:	7239      	strb	r1, [r7, #8]
 80041f4:	607a      	str	r2, [r7, #4]
 80041f6:	703b      	strb	r3, [r7, #0]
      pair(piecewise_construct_t,
	   tuple<_Args1...> __first, tuple<_Args2...> __second)
      : pair(__first, __second,
	     typename _Build_index_tuple<sizeof...(_Args1)>::__type(),
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 80041f8:	463a      	mov	r2, r7
 80041fa:	f88d 4000 	strb.w	r4, [sp]
 80041fe:	462b      	mov	r3, r5
 8004200:	6879      	ldr	r1, [r7, #4]
 8004202:	68f8      	ldr	r0, [r7, #12]
 8004204:	f000 f974 	bl	80044f0 <_ZNSt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERSA_IJDpT1_EESt12_Index_tupleIJXspT0_EEESJ_IJXspT2_EEE>
      { }
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	4618      	mov	r0, r3
 800420c:	3710      	adds	r7, #16
 800420e:	46bd      	mov	sp, r7
 8004210:	bdb0      	pop	{r4, r5, r7, pc}

08004212 <_ZSt9addressofINSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEPT_RSC_>:
    addressof(_Tp& __r) noexcept
 8004212:	b580      	push	{r7, lr}
 8004214:	b082      	sub	sp, #8
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 f984 	bl	8004528 <_ZSt11__addressofINSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEPT_RSC_>
 8004220:	4603      	mov	r3, r0
 8004222:	4618      	mov	r0, r3
 8004224:	3708      	adds	r7, #8
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}

0800422a <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEE19_M_allocate_bucketsEj>:
	}
    }

  template<typename _NodeAlloc>
    typename _Hashtable_alloc<_NodeAlloc>::__bucket_type*
    _Hashtable_alloc<_NodeAlloc>::_M_allocate_buckets(std::size_t __bkt_count)
 800422a:	b590      	push	{r4, r7, lr}
 800422c:	b087      	sub	sp, #28
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
 8004232:	6039      	str	r1, [r7, #0]
    {
      __bucket_alloc_type __alloc(_M_node_allocator());
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f7ff f9e5 	bl	8003604 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEE17_M_node_allocatorEv>
 800423a:	4602      	mov	r2, r0
 800423c:	f107 030c 	add.w	r3, r7, #12
 8004240:	4611      	mov	r1, r2
 8004242:	4618      	mov	r0, r3
 8004244:	f000 f97b 	bl	800453e <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEERKSaIT_E>

      auto __ptr = __bucket_alloc_traits::allocate(__alloc, __bkt_count);
 8004248:	f107 030c 	add.w	r3, r7, #12
 800424c:	6839      	ldr	r1, [r7, #0]
 800424e:	4618      	mov	r0, r3
 8004250:	f000 f98e 	bl	8004570 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE8allocateERS3_j>
 8004254:	6178      	str	r0, [r7, #20]
      __bucket_type* __p = std::__to_address(__ptr);
 8004256:	6978      	ldr	r0, [r7, #20]
 8004258:	f000 f999 	bl	800458e <_ZSt12__to_addressIPNSt8__detail15_Hash_node_baseEEPT_S4_>
 800425c:	6138      	str	r0, [r7, #16]
      __builtin_memset(__p, 0, __bkt_count * sizeof(__bucket_type));
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	693a      	ldr	r2, [r7, #16]
 8004264:	4610      	mov	r0, r2
 8004266:	461a      	mov	r2, r3
 8004268:	2100      	movs	r1, #0
 800426a:	f00d fd0b 	bl	8011c84 <memset>
      return __p;
 800426e:	693c      	ldr	r4, [r7, #16]
      __bucket_alloc_type __alloc(_M_node_allocator());
 8004270:	f107 030c 	add.w	r3, r7, #12
 8004274:	4618      	mov	r0, r3
 8004276:	f000 f96f 	bl	8004558 <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>
      return __p;
 800427a:	4623      	mov	r3, r4
    }
 800427c:	4618      	mov	r0, r3
 800427e:	371c      	adds	r7, #28
 8004280:	46bd      	mov	sp, r7
 8004282:	bd90      	pop	{r4, r7, pc}

08004284 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNSA_15_Hash_node_baseEj>:
      _M_deallocate_buckets(__bucket_type* __bkts, size_type __bkt_count)
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]
	if (_M_uses_single_bucket(__bkts))
 8004290:	68b9      	ldr	r1, [r7, #8]
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	f000 f986 	bl	80045a4 <_ZNKSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_uses_single_bucketEPPNSA_15_Hash_node_baseE>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d105      	bne.n	80042aa <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNSA_15_Hash_node_baseEj+0x26>
	__hashtable_alloc::_M_deallocate_buckets(__bkts, __bkt_count);
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	68b9      	ldr	r1, [r7, #8]
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	f000 f996 	bl	80045d4 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEE21_M_deallocate_bucketsEPPNS_15_Hash_node_baseEj>
 80042a8:	e000      	b.n	80042ac <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNSA_15_Hash_node_baseEj+0x28>
	  return;
 80042aa:	bf00      	nop
      }
 80042ac:	3710      	adds	r7, #16
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}

080042b2 <_ZNKSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIP17TIM_HandleTypeDefELb1EE7_M_cgetEv>:
      const _Tp& _M_cget() const { return static_cast<const _Tp&>(*this); }
 80042b2:	b480      	push	{r7}
 80042b4:	b083      	sub	sp, #12
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4618      	mov	r0, r3
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <_ZSt7forwardIRSt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4618      	mov	r0, r3
 80042d4:	370c      	adds	r7, #12
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr

080042de <_ZSt3getILj0EKP17TIM_HandleTypeDefSt8functionIFvvEEERNSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeERSA_>:
    get(std::pair<_Tp1, _Tp2>& __in) noexcept
 80042de:	b580      	push	{r7, lr}
 80042e0:	b082      	sub	sp, #8
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
    { return __pair_get<_Int>::__get(__in); }
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 f998 	bl	800461c <_ZNSt10__pair_getILj0EE5__getIKP17TIM_HandleTypeDefSt8functionIFvvEEEERT_RSt4pairIS8_T0_E>
 80042ec:	4603      	mov	r3, r0
 80042ee:	4618      	mov	r0, r3
 80042f0:	3708      	adds	r7, #8
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}

080042f6 <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEEE4_M_vEv>:
      _M_v() const noexcept
 80042f6:	b580      	push	{r7, lr}
 80042f8:	b082      	sub	sp, #8
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
      { return *_M_valptr(); }
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 f997 	bl	8004632 <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEEE9_M_valptrEv>
 8004304:	4603      	mov	r3, r0
 8004306:	4618      	mov	r0, r3
 8004308:	3708      	adds	r7, #8
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}

0800430e <_ZNKSt8__detail10_Select1stclIRKSt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOSC_>:
      operator()(_Tp&& __x) const
 800430e:	b580      	push	{r7, lr}
 8004310:	b082      	sub	sp, #8
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
 8004316:	6039      	str	r1, [r7, #0]
      { return std::get<0>(std::forward<_Tp>(__x)); }
 8004318:	6838      	ldr	r0, [r7, #0]
 800431a:	f000 f998 	bl	800464e <_ZSt7forwardIRKSt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEEEOT_RNSt16remove_referenceISA_E4typeE>
 800431e:	4603      	mov	r3, r0
 8004320:	4618      	mov	r0, r3
 8004322:	f000 f99f 	bl	8004664 <_ZSt3getILj0EKP17TIM_HandleTypeDefSt8functionIFvvEEERKNSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeERKSA_>
 8004326:	4603      	mov	r3, r0
 8004328:	4618      	mov	r0, r3
 800432a:	3708      	adds	r7, #8
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <_ZNK9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8004338:	4b03      	ldr	r3, [pc, #12]	; (8004348 <_ZNK9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEE11_M_max_sizeEv+0x18>)
      }
 800433a:	4618      	mov	r0, r3
 800433c:	370c      	adds	r7, #12
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	05555555 	.word	0x05555555

0800434c <_ZNSt11_Tuple_implILj0EJRKP17TIM_HandleTypeDefEEC1EOS4_>:
      _Tuple_impl(_Tuple_impl&& __in)
 800434c:	b590      	push	{r4, r7, lr}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 8004356:	687c      	ldr	r4, [r7, #4]
 8004358:	6838      	ldr	r0, [r7, #0]
 800435a:	f000 f98f 	bl	800467c <_ZNSt11_Tuple_implILj0EJRKP17TIM_HandleTypeDefEE7_M_headERS4_>
 800435e:	4603      	mov	r3, r0
 8004360:	4618      	mov	r0, r3
 8004362:	f000 f998 	bl	8004696 <_ZSt7forwardIRKP17TIM_HandleTypeDefEOT_RNSt16remove_referenceIS4_E4typeE>
 8004366:	4603      	mov	r3, r0
 8004368:	4619      	mov	r1, r3
 800436a:	4620      	mov	r0, r4
 800436c:	f7ff faac 	bl	80038c8 <_ZNSt10_Head_baseILj0ERKP17TIM_HandleTypeDefLb0EEC1ES3_>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4618      	mov	r0, r3
 8004374:	370c      	adds	r7, #12
 8004376:	46bd      	mov	sp, r7
 8004378:	bd90      	pop	{r4, r7, pc}

0800437a <_ZNSt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EESA_IJDpT0_EE>:
      pair<_T1, _T2>::
 800437a:	b5b0      	push	{r4, r5, r7, lr}
 800437c:	b086      	sub	sp, #24
 800437e:	af02      	add	r7, sp, #8
 8004380:	60f8      	str	r0, [r7, #12]
 8004382:	7239      	strb	r1, [r7, #8]
 8004384:	607a      	str	r2, [r7, #4]
 8004386:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8004388:	463a      	mov	r2, r7
 800438a:	f88d 4000 	strb.w	r4, [sp]
 800438e:	462b      	mov	r3, r5
 8004390:	6879      	ldr	r1, [r7, #4]
 8004392:	68f8      	ldr	r0, [r7, #12]
 8004394:	f000 f98a 	bl	80046ac <_ZNSt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS9_IJDpT1_EESt12_Index_tupleIJXspT0_EEESI_IJXspT2_EEE>
      { }
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	4618      	mov	r0, r3
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bdb0      	pop	{r4, r5, r7, pc}

080043a2 <_ZSt9addressofINSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEPT_RSB_>:
    addressof(_Tp& __r) noexcept
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b082      	sub	sp, #8
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 f99a 	bl	80046e4 <_ZSt11__addressofINSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEPT_RSB_>
 80043b0:	4603      	mov	r3, r0
 80043b2:	4618      	mov	r0, r3
 80043b4:	3708      	adds	r7, #8
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}

080043ba <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEE19_M_allocate_bucketsEj>:
    _Hashtable_alloc<_NodeAlloc>::_M_allocate_buckets(std::size_t __bkt_count)
 80043ba:	b590      	push	{r4, r7, lr}
 80043bc:	b087      	sub	sp, #28
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]
 80043c2:	6039      	str	r1, [r7, #0]
      __bucket_alloc_type __alloc(_M_node_allocator());
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f7ff fa8e 	bl	80038e6 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEE17_M_node_allocatorEv>
 80043ca:	4602      	mov	r2, r0
 80043cc:	f107 030c 	add.w	r3, r7, #12
 80043d0:	4611      	mov	r1, r2
 80043d2:	4618      	mov	r0, r3
 80043d4:	f000 f991 	bl	80046fa <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEERKSaIT_E>
      auto __ptr = __bucket_alloc_traits::allocate(__alloc, __bkt_count);
 80043d8:	f107 030c 	add.w	r3, r7, #12
 80043dc:	6839      	ldr	r1, [r7, #0]
 80043de:	4618      	mov	r0, r3
 80043e0:	f000 f8c6 	bl	8004570 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE8allocateERS3_j>
 80043e4:	6178      	str	r0, [r7, #20]
      __bucket_type* __p = std::__to_address(__ptr);
 80043e6:	6978      	ldr	r0, [r7, #20]
 80043e8:	f000 f8d1 	bl	800458e <_ZSt12__to_addressIPNSt8__detail15_Hash_node_baseEEPT_S4_>
 80043ec:	6138      	str	r0, [r7, #16]
      __builtin_memset(__p, 0, __bkt_count * sizeof(__bucket_type));
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	693a      	ldr	r2, [r7, #16]
 80043f4:	4610      	mov	r0, r2
 80043f6:	461a      	mov	r2, r3
 80043f8:	2100      	movs	r1, #0
 80043fa:	f00d fc43 	bl	8011c84 <memset>
      return __p;
 80043fe:	693c      	ldr	r4, [r7, #16]
      __bucket_alloc_type __alloc(_M_node_allocator());
 8004400:	f107 030c 	add.w	r3, r7, #12
 8004404:	4618      	mov	r0, r3
 8004406:	f000 f8a7 	bl	8004558 <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>
      return __p;
 800440a:	4623      	mov	r3, r4
    }
 800440c:	4618      	mov	r0, r3
 800440e:	371c      	adds	r7, #28
 8004410:	46bd      	mov	sp, r7
 8004412:	bd90      	pop	{r4, r7, pc}

08004414 <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS9_15_Hash_node_baseEj>:
      _M_deallocate_buckets(__bucket_type* __bkts, size_type __bkt_count)
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]
	if (_M_uses_single_bucket(__bkts))
 8004420:	68b9      	ldr	r1, [r7, #8]
 8004422:	68f8      	ldr	r0, [r7, #12]
 8004424:	f000 f976 	bl	8004714 <_ZNKSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_uses_single_bucketEPPNS9_15_Hash_node_baseE>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d105      	bne.n	800443a <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS9_15_Hash_node_baseEj+0x26>
	__hashtable_alloc::_M_deallocate_buckets(__bkts, __bkt_count);
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	68b9      	ldr	r1, [r7, #8]
 8004432:	68f8      	ldr	r0, [r7, #12]
 8004434:	f000 f986 	bl	8004744 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEE21_M_deallocate_bucketsEPPNS_15_Hash_node_baseEj>
 8004438:	e000      	b.n	800443c <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS9_15_Hash_node_baseEj+0x28>
	  return;
 800443a:	bf00      	nop
      }
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}

08004442 <_ZSt8__fill_aIPhhEvT_S1_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 8004442:	b580      	push	{r7, lr}
 8004444:	b084      	sub	sp, #16
 8004446:	af00      	add	r7, sp, #0
 8004448:	60f8      	str	r0, [r7, #12]
 800444a:	60b9      	str	r1, [r7, #8]
 800444c:	607a      	str	r2, [r7, #4]
    { std::__fill_a1(__first, __last, __value); }
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	68b9      	ldr	r1, [r7, #8]
 8004452:	68f8      	ldr	r0, [r7, #12]
 8004454:	f000 f99a 	bl	800478c <_ZSt9__fill_a1IhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>
 8004458:	bf00      	nop
 800445a:	3710      	adds	r7, #16
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <_ZNSt10__pair_getILj0EE5__getIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEERT_RSt4pairIS9_T0_E>:
        __get(std::pair<_Tp1, _Tp2>& __pair) noexcept
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
        { return __pair.first; }
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4618      	mov	r0, r3
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr

08004476 <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEE9_M_valptrEv>:
      _M_valptr() const noexcept
 8004476:	b580      	push	{r7, lr}
 8004478:	b082      	sub	sp, #8
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	3304      	adds	r3, #4
 8004482:	4618      	mov	r0, r3
 8004484:	f000 f99c 	bl	80047c0 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEE6_M_ptrEv>
 8004488:	4603      	mov	r3, r0
 800448a:	4618      	mov	r0, r3
 800448c:	3708      	adds	r7, #8
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <_ZSt7forwardIRKSt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004492:	b480      	push	{r7}
 8004494:	b083      	sub	sp, #12
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4618      	mov	r0, r3
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <_ZSt3getILj0EKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEERKNSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeERKSB_>:
    get(std::pair<_Tp1, _Tp2>&& __in) noexcept
    { return __pair_get<_Int>::__move_get(std::move(__in)); }

  template<std::size_t _Int, class _Tp1, class _Tp2>
    constexpr const typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&
    get(const std::pair<_Tp1, _Tp2>& __in) noexcept
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
    { return __pair_get<_Int>::__const_get(__in); }
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f000 f991 	bl	80047d8 <_ZNSt10__pair_getILj0EE11__const_getIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEERKT_RKSt4pairIS9_T0_E>
 80044b6:	4603      	mov	r3, r0
 80044b8:	4618      	mov	r0, r3
 80044ba:	3708      	adds	r7, #8
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <_ZNSt11_Tuple_implILj0EJRKP19FDCAN_HandleTypeDefEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4618      	mov	r0, r3
 80044cc:	f000 f98f 	bl	80047ee <_ZNSt10_Head_baseILj0ERKP19FDCAN_HandleTypeDefLb0EE7_M_headERS4_>
 80044d0:	4603      	mov	r3, r0
 80044d2:	4618      	mov	r0, r3
 80044d4:	3708      	adds	r7, #8
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}

080044da <_ZSt7forwardIRKP19FDCAN_HandleTypeDefEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80044da:	b480      	push	{r7}
 80044dc:	b083      	sub	sp, #12
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4618      	mov	r0, r3
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <_ZNSt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERSA_IJDpT1_EESt12_Index_tupleIJXspT0_EEESJ_IJXspT2_EEE>:

  template<class _T1, class _T2>
    template<typename... _Args1, std::size_t... _Indexes1,
             typename... _Args2, std::size_t... _Indexes2>
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	607a      	str	r2, [r7, #4]
 80044fc:	703b      	strb	r3, [r7, #0]
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 80044fe:	68b8      	ldr	r0, [r7, #8]
 8004500:	f000 f981 	bl	8004806 <_ZSt3getILj0EJRKP19FDCAN_HandleTypeDefEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8004504:	4603      	mov	r3, r0
 8004506:	4618      	mov	r0, r3
 8004508:	f7ff ffe7 	bl	80044da <_ZSt7forwardIRKP19FDCAN_HandleTypeDefEOT_RNSt16remove_referenceIS4_E4typeE>
 800450c:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	601a      	str	r2, [r3, #0]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	3304      	adds	r3, #4
 8004518:	4618      	mov	r0, r3
 800451a:	f000 f981 	bl	8004820 <_ZNSt8functionIFvmPhjEEC1Ev>
      { }
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	4618      	mov	r0, r3
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <_ZSt11__addressofINSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEPT_RSC_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4618      	mov	r0, r3
 8004534:	370c      	adds	r7, #12
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr

0800453e <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800453e:	b580      	push	{r7, lr}
 8004540:	b082      	sub	sp, #8
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
 8004546:	6039      	str	r1, [r7, #0]
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 f976 	bl	800483a <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEEC1Ev>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4618      	mov	r0, r3
 8004552:	3708      	adds	r7, #8
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 f975 	bl	8004850 <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEED1Ev>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4618      	mov	r0, r3
 800456a:	3708      	adds	r7, #8
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800457a:	2200      	movs	r2, #0
 800457c:	6839      	ldr	r1, [r7, #0]
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 f971 	bl	8004866 <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv>
 8004584:	4603      	mov	r3, r0
 8004586:	4618      	mov	r0, r3
 8004588:	3708      	adds	r7, #8
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}

0800458e <_ZSt12__to_addressIPNSt8__detail15_Hash_node_baseEEPT_S4_>:
    __to_address(_Tp* __ptr) noexcept
 800458e:	b480      	push	{r7}
 8004590:	b083      	sub	sp, #12
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
      return __ptr;
 8004596:	687b      	ldr	r3, [r7, #4]
    }
 8004598:	4618      	mov	r0, r3
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <_ZNKSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_uses_single_bucketEPPNSA_15_Hash_node_baseE>:
      _M_uses_single_bucket(__bucket_type* __bkts) const
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	3318      	adds	r3, #24
 80045b2:	683a      	ldr	r2, [r7, #0]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	bf0c      	ite	eq
 80045b8:	2301      	moveq	r3, #1
 80045ba:	2300      	movne	r3, #0
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	bf14      	ite	ne
 80045c2:	2301      	movne	r3, #1
 80045c4:	2300      	moveq	r3, #0
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	4618      	mov	r0, r3
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEE21_M_deallocate_bucketsEPPNS_15_Hash_node_baseEj>:

  template<typename _NodeAlloc>
    void
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_buckets(__bucket_type* __bkts,
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b086      	sub	sp, #24
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]
							std::size_t __bkt_count)
    {
      typedef typename __bucket_alloc_traits::pointer _Ptr;
      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__bkts);
 80045e0:	68b8      	ldr	r0, [r7, #8]
 80045e2:	f000 f95e 	bl	80048a2 <_ZNSt14pointer_traitsIPPNSt8__detail15_Hash_node_baseEE10pointer_toERS2_>
 80045e6:	6178      	str	r0, [r7, #20]
      __bucket_alloc_type __alloc(_M_node_allocator());
 80045e8:	68f8      	ldr	r0, [r7, #12]
 80045ea:	f7ff f80b 	bl	8003604 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEE17_M_node_allocatorEv>
 80045ee:	4602      	mov	r2, r0
 80045f0:	f107 0310 	add.w	r3, r7, #16
 80045f4:	4611      	mov	r1, r2
 80045f6:	4618      	mov	r0, r3
 80045f8:	f7ff ffa1 	bl	800453e <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEERKSaIT_E>
      __bucket_alloc_traits::deallocate(__alloc, __ptr, __bkt_count);
 80045fc:	f107 0310 	add.w	r3, r7, #16
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	6979      	ldr	r1, [r7, #20]
 8004604:	4618      	mov	r0, r3
 8004606:	f000 f958 	bl	80048ba <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE10deallocateERS3_PS2_j>
      __bucket_alloc_type __alloc(_M_node_allocator());
 800460a:	f107 0310 	add.w	r3, r7, #16
 800460e:	4618      	mov	r0, r3
 8004610:	f7ff ffa2 	bl	8004558 <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>
    }
 8004614:	bf00      	nop
 8004616:	3718      	adds	r7, #24
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <_ZNSt10__pair_getILj0EE5__getIKP17TIM_HandleTypeDefSt8functionIFvvEEEERT_RSt4pairIS8_T0_E>:
        __get(std::pair<_Tp1, _Tp2>& __pair) noexcept
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
        { return __pair.first; }
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4618      	mov	r0, r3
 8004628:	370c      	adds	r7, #12
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr

08004632 <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEEE9_M_valptrEv>:
      _M_valptr() const noexcept
 8004632:	b580      	push	{r7, lr}
 8004634:	b082      	sub	sp, #8
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	3304      	adds	r3, #4
 800463e:	4618      	mov	r0, r3
 8004640:	f000 f94a 	bl	80048d8 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEEE6_M_ptrEv>
 8004644:	4603      	mov	r3, r0
 8004646:	4618      	mov	r0, r3
 8004648:	3708      	adds	r7, #8
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}

0800464e <_ZSt7forwardIRKSt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEEEOT_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800464e:	b480      	push	{r7}
 8004650:	b083      	sub	sp, #12
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4618      	mov	r0, r3
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <_ZSt3getILj0EKP17TIM_HandleTypeDefSt8functionIFvvEEERKNSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeERKSA_>:
    get(const std::pair<_Tp1, _Tp2>& __in) noexcept
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
    { return __pair_get<_Int>::__const_get(__in); }
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 f93f 	bl	80048f0 <_ZNSt10__pair_getILj0EE11__const_getIKP17TIM_HandleTypeDefSt8functionIFvvEEEERKT_RKSt4pairIS8_T0_E>
 8004672:	4603      	mov	r3, r0
 8004674:	4618      	mov	r0, r3
 8004676:	3708      	adds	r7, #8
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <_ZNSt11_Tuple_implILj0EJRKP17TIM_HandleTypeDefEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4618      	mov	r0, r3
 8004688:	f000 f93d 	bl	8004906 <_ZNSt10_Head_baseILj0ERKP17TIM_HandleTypeDefLb0EE7_M_headERS4_>
 800468c:	4603      	mov	r3, r0
 800468e:	4618      	mov	r0, r3
 8004690:	3708      	adds	r7, #8
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <_ZSt7forwardIRKP17TIM_HandleTypeDefEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004696:	b480      	push	{r7}
 8004698:	b083      	sub	sp, #12
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4618      	mov	r0, r3
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <_ZNSt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS9_IJDpT1_EESt12_Index_tupleIJXspT0_EEESI_IJXspT2_EEE>:
      pair<_T1, _T2>::
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	607a      	str	r2, [r7, #4]
 80046b8:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 80046ba:	68b8      	ldr	r0, [r7, #8]
 80046bc:	f000 f92f 	bl	800491e <_ZSt3getILj0EJRKP17TIM_HandleTypeDefEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80046c0:	4603      	mov	r3, r0
 80046c2:	4618      	mov	r0, r3
 80046c4:	f7ff ffe7 	bl	8004696 <_ZSt7forwardIRKP17TIM_HandleTypeDefEOT_RNSt16remove_referenceIS4_E4typeE>
 80046c8:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	601a      	str	r2, [r3, #0]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	3304      	adds	r3, #4
 80046d4:	4618      	mov	r0, r3
 80046d6:	f000 f92f 	bl	8004938 <_ZNSt8functionIFvvEEC1Ev>
      { }
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	4618      	mov	r0, r3
 80046de:	3710      	adds	r7, #16
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <_ZSt11__addressofINSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEPT_RSB_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4618      	mov	r0, r3
 80046f0:	370c      	adds	r7, #12
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr

080046fa <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b082      	sub	sp, #8
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
 8004702:	6039      	str	r1, [r7, #0]
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f000 f898 	bl	800483a <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEEC1Ev>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4618      	mov	r0, r3
 800470e:	3708      	adds	r7, #8
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <_ZNKSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_uses_single_bucketEPPNS9_15_Hash_node_baseE>:
      _M_uses_single_bucket(__bucket_type* __bkts) const
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	3318      	adds	r3, #24
 8004722:	683a      	ldr	r2, [r7, #0]
 8004724:	429a      	cmp	r2, r3
 8004726:	bf0c      	ite	eq
 8004728:	2301      	moveq	r3, #1
 800472a:	2300      	movne	r3, #0
 800472c:	b2db      	uxtb	r3, r3
 800472e:	2b00      	cmp	r3, #0
 8004730:	bf14      	ite	ne
 8004732:	2301      	movne	r3, #1
 8004734:	2300      	moveq	r3, #0
 8004736:	b2db      	uxtb	r3, r3
 8004738:	4618      	mov	r0, r3
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEE21_M_deallocate_bucketsEPPNS_15_Hash_node_baseEj>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_buckets(__bucket_type* __bkts,
 8004744:	b580      	push	{r7, lr}
 8004746:	b086      	sub	sp, #24
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	607a      	str	r2, [r7, #4]
      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__bkts);
 8004750:	68b8      	ldr	r0, [r7, #8]
 8004752:	f000 f8a6 	bl	80048a2 <_ZNSt14pointer_traitsIPPNSt8__detail15_Hash_node_baseEE10pointer_toERS2_>
 8004756:	6178      	str	r0, [r7, #20]
      __bucket_alloc_type __alloc(_M_node_allocator());
 8004758:	68f8      	ldr	r0, [r7, #12]
 800475a:	f7ff f8c4 	bl	80038e6 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEE17_M_node_allocatorEv>
 800475e:	4602      	mov	r2, r0
 8004760:	f107 0310 	add.w	r3, r7, #16
 8004764:	4611      	mov	r1, r2
 8004766:	4618      	mov	r0, r3
 8004768:	f7ff ffc7 	bl	80046fa <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEERKSaIT_E>
      __bucket_alloc_traits::deallocate(__alloc, __ptr, __bkt_count);
 800476c:	f107 0310 	add.w	r3, r7, #16
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	6979      	ldr	r1, [r7, #20]
 8004774:	4618      	mov	r0, r3
 8004776:	f000 f8a0 	bl	80048ba <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE10deallocateERS3_PS2_j>
      __bucket_alloc_type __alloc(_M_node_allocator());
 800477a:	f107 0310 	add.w	r3, r7, #16
 800477e:	4618      	mov	r0, r3
 8004780:	f7ff feea 	bl	8004558 <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>
    }
 8004784:	bf00      	nop
 8004786:	3718      	adds	r7, #24
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <_ZSt9__fill_a1IhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>:
    __fill_a1(_Tp* __first, _Tp* __last, const _Tp& __c)
 800478c:	b580      	push	{r7, lr}
 800478e:	b086      	sub	sp, #24
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __c;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	75fb      	strb	r3, [r7, #23]
      if (const size_t __len = __last - __first)
 800479e:	68ba      	ldr	r2, [r7, #8]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	613b      	str	r3, [r7, #16]
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d005      	beq.n	80047b8 <_ZSt9__fill_a1IhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_+0x2c>
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 80047ac:	7dfb      	ldrb	r3, [r7, #23]
 80047ae:	693a      	ldr	r2, [r7, #16]
 80047b0:	4619      	mov	r1, r3
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f00d fa66 	bl	8011c84 <memset>
    }
 80047b8:	bf00      	nop
 80047ba:	3718      	adds	r7, #24
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f000 f8c2 	bl	8004952 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEE7_M_addrEv>
 80047ce:	4603      	mov	r3, r0
 80047d0:	4618      	mov	r0, r3
 80047d2:	3708      	adds	r7, #8
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <_ZNSt10__pair_getILj0EE11__const_getIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEERKT_RKSt4pairIS9_T0_E>:
        __const_get(const std::pair<_Tp1, _Tp2>& __pair) noexcept
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
        { return __pair.first; }
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4618      	mov	r0, r3
 80047e4:	370c      	adds	r7, #12
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr

080047ee <_ZNSt10_Head_baseILj0ERKP19FDCAN_HandleTypeDefLb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80047ee:	b480      	push	{r7}
 80047f0:	b083      	sub	sp, #12
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4618      	mov	r0, r3
 80047fc:	370c      	adds	r7, #12
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr

08004806 <_ZSt3getILj0EJRKP19FDCAN_HandleTypeDefEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8004806:	b580      	push	{r7, lr}
 8004808:	b082      	sub	sp, #8
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4618      	mov	r0, r3
 8004812:	f000 f8a9 	bl	8004968 <_ZSt12__get_helperILj0ERKP19FDCAN_HandleTypeDefJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8004816:	4603      	mov	r3, r0
 8004818:	4618      	mov	r0, r3
 800481a:	3708      	adds	r7, #8
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <_ZNSt8functionIFvmPhjEEC1Ev>:
      function() noexcept
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4618      	mov	r0, r3
 800482c:	f7fc f9c6 	bl	8000bbc <_ZNSt14_Function_baseC1Ev>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4618      	mov	r0, r3
 8004834:	3708      	adds	r7, #8
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}

0800483a <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800483a:	b480      	push	{r7}
 800483c:	b083      	sub	sp, #12
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4618      	mov	r0, r3
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4618      	mov	r0, r3
 800485c:	370c      	adds	r7, #12
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr

08004866 <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8004866:	b580      	push	{r7, lr}
 8004868:	b084      	sub	sp, #16
 800486a:	af00      	add	r7, sp, #0
 800486c:	60f8      	str	r0, [r7, #12]
 800486e:	60b9      	str	r1, [r7, #8]
 8004870:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	f000 f884 	bl	8004980 <_ZNK9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE11_M_max_sizeEv>
 8004878:	4602      	mov	r2, r0
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	4293      	cmp	r3, r2
 800487e:	bf8c      	ite	hi
 8004880:	2301      	movhi	r3, #1
 8004882:	2300      	movls	r3, #0
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d001      	beq.n	800488e <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800488a:	f00c fac4 	bl	8010e16 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	4618      	mov	r0, r3
 8004894:	f00c faae 	bl	8010df4 <_Znwj>
 8004898:	4603      	mov	r3, r0
      }
 800489a:	4618      	mov	r0, r3
 800489c:	3710      	adds	r7, #16
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}

080048a2 <_ZNSt14pointer_traitsIPPNSt8__detail15_Hash_node_baseEE10pointer_toERS2_>:
      pointer_to(__make_not_void<element_type>& __r) noexcept
 80048a2:	b580      	push	{r7, lr}
 80048a4:	b082      	sub	sp, #8
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
      { return std::addressof(__r); }
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 f874 	bl	8004998 <_ZSt9addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>
 80048b0:	4603      	mov	r3, r0
 80048b2:	4618      	mov	r0, r3
 80048b4:	3708      	adds	r7, #8
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}

080048ba <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80048ba:	b580      	push	{r7, lr}
 80048bc:	b084      	sub	sp, #16
 80048be:	af00      	add	r7, sp, #0
 80048c0:	60f8      	str	r0, [r7, #12]
 80048c2:	60b9      	str	r1, [r7, #8]
 80048c4:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	68b9      	ldr	r1, [r7, #8]
 80048ca:	68f8      	ldr	r0, [r7, #12]
 80048cc:	f000 f870 	bl	80049b0 <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE10deallocateEPS3_j>
 80048d0:	bf00      	nop
 80048d2:	3710      	adds	r7, #16
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEEE6_M_ptrEv>:
      _M_ptr() const noexcept
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f000 f875 	bl	80049d0 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEEE7_M_addrEv>
 80048e6:	4603      	mov	r3, r0
 80048e8:	4618      	mov	r0, r3
 80048ea:	3708      	adds	r7, #8
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <_ZNSt10__pair_getILj0EE11__const_getIKP17TIM_HandleTypeDefSt8functionIFvvEEEERKT_RKSt4pairIS8_T0_E>:
        __const_get(const std::pair<_Tp1, _Tp2>& __pair) noexcept
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
        { return __pair.first; }
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4618      	mov	r0, r3
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr

08004906 <_ZNSt10_Head_baseILj0ERKP17TIM_HandleTypeDefLb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8004906:	b480      	push	{r7}
 8004908:	b083      	sub	sp, #12
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4618      	mov	r0, r3
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr

0800491e <_ZSt3getILj0EJRKP17TIM_HandleTypeDefEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800491e:	b580      	push	{r7, lr}
 8004920:	b082      	sub	sp, #8
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4618      	mov	r0, r3
 800492a:	f000 f85c 	bl	80049e6 <_ZSt12__get_helperILj0ERKP17TIM_HandleTypeDefJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800492e:	4603      	mov	r3, r0
 8004930:	4618      	mov	r0, r3
 8004932:	3708      	adds	r7, #8
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <_ZNSt8functionIFvvEEC1Ev>:
      function() noexcept
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4618      	mov	r0, r3
 8004944:	f7fc f93a 	bl	8000bbc <_ZNSt14_Function_baseC1Ev>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4618      	mov	r0, r3
 800494c:	3708      	adds	r7, #8
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}

08004952 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEE7_M_addrEv>:
      _M_addr() const noexcept
 8004952:	b480      	push	{r7}
 8004954:	b083      	sub	sp, #12
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
        return static_cast<const void*>(&_M_storage);
 800495a:	687b      	ldr	r3, [r7, #4]
      }
 800495c:	4618      	mov	r0, r3
 800495e:	370c      	adds	r7, #12
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr

08004968 <_ZSt12__get_helperILj0ERKP19FDCAN_HandleTypeDefJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f7ff fda5 	bl	80044c0 <_ZNSt11_Tuple_implILj0EJRKP19FDCAN_HandleTypeDefEE7_M_headERS4_>
 8004976:	4603      	mov	r3, r0
 8004978:	4618      	mov	r0, r3
 800497a:	3708      	adds	r7, #8
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <_ZNK9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8004988:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 800498c:	4618      	mov	r0, r3
 800498e:	370c      	adds	r7, #12
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <_ZSt9addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>:
    addressof(_Tp& __r) noexcept
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f000 f82c 	bl	80049fe <_ZSt11__addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>
 80049a6:	4603      	mov	r3, r0
 80049a8:	4618      	mov	r0, r3
 80049aa:	3708      	adds	r7, #8
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE10deallocateEPS3_j>:
      deallocate(_Tp* __p, size_type __t)
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	4619      	mov	r1, r3
 80049c2:	68b8      	ldr	r0, [r7, #8]
 80049c4:	f00c fa14 	bl	8010df0 <_ZdlPvj>
      }
 80049c8:	bf00      	nop
 80049ca:	3710      	adds	r7, #16
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEEE7_M_addrEv>:
      _M_addr() const noexcept
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
        return static_cast<const void*>(&_M_storage);
 80049d8:	687b      	ldr	r3, [r7, #4]
      }
 80049da:	4618      	mov	r0, r3
 80049dc:	370c      	adds	r7, #12
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr

080049e6 <_ZSt12__get_helperILj0ERKP17TIM_HandleTypeDefJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80049e6:	b580      	push	{r7, lr}
 80049e8:	b082      	sub	sp, #8
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f7ff fe44 	bl	800467c <_ZNSt11_Tuple_implILj0EJRKP17TIM_HandleTypeDefEE7_M_headERS4_>
 80049f4:	4603      	mov	r3, r0
 80049f6:	4618      	mov	r0, r3
 80049f8:	3708      	adds	r7, #8
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}

080049fe <_ZSt11__addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80049fe:	b480      	push	{r7}
 8004a00:	b083      	sub	sp, #12
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4618      	mov	r0, r3
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004a18:	f002 fb7e 	bl	8007118 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004a1c:	f000 f826 	bl	8004a6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004a20:	f000 fd70 	bl	8005504 <MX_GPIO_Init>
  MX_DMA_Init();
 8004a24:	f000 fd3e 	bl	80054a4 <MX_DMA_Init>
  MX_FDCAN2_Init();
 8004a28:	f000 f908 	bl	8004c3c <MX_FDCAN2_Init>
  MX_TIM1_Init();
 8004a2c:	f000 f9c4 	bl	8004db8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8004a30:	f000 fa1c 	bl	8004e6c <MX_TIM2_Init>
  MX_TIM3_Init();
 8004a34:	f000 fa6e 	bl	8004f14 <MX_TIM3_Init>
  MX_TIM4_Init();
 8004a38:	f000 fac2 	bl	8004fc0 <MX_TIM4_Init>
  MX_TIM8_Init();
 8004a3c:	f000 fbd0 	bl	80051e0 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8004a40:	f000 fc98 	bl	8005374 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8004a44:	f000 fb60 	bl	8005108 <MX_TIM6_Init>
  MX_TIM7_Init();
 8004a48:	f000 fb94 	bl	8005174 <MX_TIM7_Init>
  MX_SPI1_Init();
 8004a4c:	f000 f95c 	bl	8004d08 <MX_SPI1_Init>
  MX_TIM13_Init();
 8004a50:	f000 fc20 	bl	8005294 <MX_TIM13_Init>
  MX_USART1_UART_Init();
 8004a54:	f000 fc42 	bl	80052dc <MX_USART1_UART_Init>
  MX_FDCAN1_Init();
 8004a58:	f000 f88c 	bl	8004b74 <MX_FDCAN1_Init>
  MX_USART3_UART_Init();
 8004a5c:	f000 fcd6 	bl	800540c <MX_USART3_UART_Init>
  MX_TIM5_Init();
 8004a60:	f000 fb04 	bl	800506c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
cppmain();
 8004a64:	f7fc fff6 	bl	8001a54 <cppmain>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004a68:	e7fe      	b.n	8004a68 <main+0x54>
	...

08004a6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b09c      	sub	sp, #112	; 0x70
 8004a70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004a72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a76:	224c      	movs	r2, #76	; 0x4c
 8004a78:	2100      	movs	r1, #0
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f00d f902 	bl	8011c84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004a80:	1d3b      	adds	r3, r7, #4
 8004a82:	2220      	movs	r2, #32
 8004a84:	2100      	movs	r1, #0
 8004a86:	4618      	mov	r0, r3
 8004a88:	f00d f8fc 	bl	8011c84 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8004a8c:	2002      	movs	r0, #2
 8004a8e:	f006 ff19 	bl	800b8c4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8004a92:	2300      	movs	r3, #0
 8004a94:	603b      	str	r3, [r7, #0]
 8004a96:	4b34      	ldr	r3, [pc, #208]	; (8004b68 <SystemClock_Config+0xfc>)
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	4a33      	ldr	r2, [pc, #204]	; (8004b68 <SystemClock_Config+0xfc>)
 8004a9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004aa0:	6193      	str	r3, [r2, #24]
 8004aa2:	4b31      	ldr	r3, [pc, #196]	; (8004b68 <SystemClock_Config+0xfc>)
 8004aa4:	699b      	ldr	r3, [r3, #24]
 8004aa6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004aaa:	603b      	str	r3, [r7, #0]
 8004aac:	4b2f      	ldr	r3, [pc, #188]	; (8004b6c <SystemClock_Config+0x100>)
 8004aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab0:	4a2e      	ldr	r2, [pc, #184]	; (8004b6c <SystemClock_Config+0x100>)
 8004ab2:	f043 0301 	orr.w	r3, r3, #1
 8004ab6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ab8:	4b2c      	ldr	r3, [pc, #176]	; (8004b6c <SystemClock_Config+0x100>)
 8004aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004abc:	f003 0301 	and.w	r3, r3, #1
 8004ac0:	603b      	str	r3, [r7, #0]
 8004ac2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8004ac4:	bf00      	nop
 8004ac6:	4b28      	ldr	r3, [pc, #160]	; (8004b68 <SystemClock_Config+0xfc>)
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ace:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ad2:	d1f8      	bne.n	8004ac6 <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8004ad4:	4b26      	ldr	r3, [pc, #152]	; (8004b70 <SystemClock_Config+0x104>)
 8004ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad8:	f023 0303 	bic.w	r3, r3, #3
 8004adc:	4a24      	ldr	r2, [pc, #144]	; (8004b70 <SystemClock_Config+0x104>)
 8004ade:	f043 0302 	orr.w	r3, r3, #2
 8004ae2:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004ae8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004aec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004aee:	2302      	movs	r3, #2
 8004af0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004af2:	2302      	movs	r3, #2
 8004af4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8004af6:	2302      	movs	r3, #2
 8004af8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8004afa:	233c      	movs	r3, #60	; 0x3c
 8004afc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8004afe:	2302      	movs	r3, #2
 8004b00:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 12;
 8004b02:	230c      	movs	r3, #12
 8004b04:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004b06:	2302      	movs	r3, #2
 8004b08:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8004b0a:	230c      	movs	r3, #12
 8004b0c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8004b12:	2300      	movs	r3, #0
 8004b14:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004b16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f006 ff0c 	bl	800b938 <HAL_RCC_OscConfig>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d001      	beq.n	8004b2a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8004b26:	f000 fdc5 	bl	80056b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004b2a:	233f      	movs	r3, #63	; 0x3f
 8004b2c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8004b32:	2300      	movs	r3, #0
 8004b34:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8004b36:	2308      	movs	r3, #8
 8004b38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8004b3a:	2340      	movs	r3, #64	; 0x40
 8004b3c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8004b3e:	2340      	movs	r3, #64	; 0x40
 8004b40:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8004b42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b46:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8004b48:	2340      	movs	r3, #64	; 0x40
 8004b4a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004b4c:	1d3b      	adds	r3, r7, #4
 8004b4e:	2104      	movs	r1, #4
 8004b50:	4618      	mov	r0, r3
 8004b52:	f007 fb1f 	bl	800c194 <HAL_RCC_ClockConfig>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d001      	beq.n	8004b60 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8004b5c:	f000 fdaa 	bl	80056b4 <Error_Handler>
  }
}
 8004b60:	bf00      	nop
 8004b62:	3770      	adds	r7, #112	; 0x70
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	58024800 	.word	0x58024800
 8004b6c:	58000400 	.word	0x58000400
 8004b70:	58024400 	.word	0x58024400

08004b74 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8004b78:	4b2e      	ldr	r3, [pc, #184]	; (8004c34 <MX_FDCAN1_Init+0xc0>)
 8004b7a:	4a2f      	ldr	r2, [pc, #188]	; (8004c38 <MX_FDCAN1_Init+0xc4>)
 8004b7c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8004b7e:	4b2d      	ldr	r3, [pc, #180]	; (8004c34 <MX_FDCAN1_Init+0xc0>)
 8004b80:	2200      	movs	r2, #0
 8004b82:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8004b84:	4b2b      	ldr	r3, [pc, #172]	; (8004c34 <MX_FDCAN1_Init+0xc0>)
 8004b86:	2200      	movs	r2, #0
 8004b88:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8004b8a:	4b2a      	ldr	r3, [pc, #168]	; (8004c34 <MX_FDCAN1_Init+0xc0>)
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8004b90:	4b28      	ldr	r3, [pc, #160]	; (8004c34 <MX_FDCAN1_Init+0xc0>)
 8004b92:	2200      	movs	r2, #0
 8004b94:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8004b96:	4b27      	ldr	r3, [pc, #156]	; (8004c34 <MX_FDCAN1_Init+0xc0>)
 8004b98:	2200      	movs	r2, #0
 8004b9a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 5;
 8004b9c:	4b25      	ldr	r3, [pc, #148]	; (8004c34 <MX_FDCAN1_Init+0xc0>)
 8004b9e:	2205      	movs	r2, #5
 8004ba0:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8004ba2:	4b24      	ldr	r3, [pc, #144]	; (8004c34 <MX_FDCAN1_Init+0xc0>)
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8004ba8:	4b22      	ldr	r3, [pc, #136]	; (8004c34 <MX_FDCAN1_Init+0xc0>)
 8004baa:	220d      	movs	r2, #13
 8004bac:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8004bae:	4b21      	ldr	r3, [pc, #132]	; (8004c34 <MX_FDCAN1_Init+0xc0>)
 8004bb0:	2202      	movs	r2, #2
 8004bb2:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8004bb4:	4b1f      	ldr	r3, [pc, #124]	; (8004c34 <MX_FDCAN1_Init+0xc0>)
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8004bba:	4b1e      	ldr	r3, [pc, #120]	; (8004c34 <MX_FDCAN1_Init+0xc0>)
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8004bc0:	4b1c      	ldr	r3, [pc, #112]	; (8004c34 <MX_FDCAN1_Init+0xc0>)
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8004bc6:	4b1b      	ldr	r3, [pc, #108]	; (8004c34 <MX_FDCAN1_Init+0xc0>)
 8004bc8:	2201      	movs	r2, #1
 8004bca:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8004bcc:	4b19      	ldr	r3, [pc, #100]	; (8004c34 <MX_FDCAN1_Init+0xc0>)
 8004bce:	2200      	movs	r2, #0
 8004bd0:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 128;
 8004bd2:	4b18      	ldr	r3, [pc, #96]	; (8004c34 <MX_FDCAN1_Init+0xc0>)
 8004bd4:	2280      	movs	r2, #128	; 0x80
 8004bd6:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8004bd8:	4b16      	ldr	r3, [pc, #88]	; (8004c34 <MX_FDCAN1_Init+0xc0>)
 8004bda:	2200      	movs	r2, #0
 8004bdc:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 64;
 8004bde:	4b15      	ldr	r3, [pc, #84]	; (8004c34 <MX_FDCAN1_Init+0xc0>)
 8004be0:	2240      	movs	r2, #64	; 0x40
 8004be2:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8004be4:	4b13      	ldr	r3, [pc, #76]	; (8004c34 <MX_FDCAN1_Init+0xc0>)
 8004be6:	2204      	movs	r2, #4
 8004be8:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8004bea:	4b12      	ldr	r3, [pc, #72]	; (8004c34 <MX_FDCAN1_Init+0xc0>)
 8004bec:	2200      	movs	r2, #0
 8004bee:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8004bf0:	4b10      	ldr	r3, [pc, #64]	; (8004c34 <MX_FDCAN1_Init+0xc0>)
 8004bf2:	2204      	movs	r2, #4
 8004bf4:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 64;
 8004bf6:	4b0f      	ldr	r3, [pc, #60]	; (8004c34 <MX_FDCAN1_Init+0xc0>)
 8004bf8:	2240      	movs	r2, #64	; 0x40
 8004bfa:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8004bfc:	4b0d      	ldr	r3, [pc, #52]	; (8004c34 <MX_FDCAN1_Init+0xc0>)
 8004bfe:	2204      	movs	r2, #4
 8004c00:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8004c02:	4b0c      	ldr	r3, [pc, #48]	; (8004c34 <MX_FDCAN1_Init+0xc0>)
 8004c04:	2200      	movs	r2, #0
 8004c06:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8004c08:	4b0a      	ldr	r3, [pc, #40]	; (8004c34 <MX_FDCAN1_Init+0xc0>)
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 8004c0e:	4b09      	ldr	r3, [pc, #36]	; (8004c34 <MX_FDCAN1_Init+0xc0>)
 8004c10:	2220      	movs	r2, #32
 8004c12:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8004c14:	4b07      	ldr	r3, [pc, #28]	; (8004c34 <MX_FDCAN1_Init+0xc0>)
 8004c16:	2200      	movs	r2, #0
 8004c18:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8004c1a:	4b06      	ldr	r3, [pc, #24]	; (8004c34 <MX_FDCAN1_Init+0xc0>)
 8004c1c:	2204      	movs	r2, #4
 8004c1e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8004c20:	4804      	ldr	r0, [pc, #16]	; (8004c34 <MX_FDCAN1_Init+0xc0>)
 8004c22:	f005 fa87 	bl	800a134 <HAL_FDCAN_Init>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d001      	beq.n	8004c30 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8004c2c:	f000 fd42 	bl	80056b4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8004c30:	bf00      	nop
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	240001fc 	.word	0x240001fc
 8004c38:	4000a000 	.word	0x4000a000

08004c3c <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8004c40:	4b2f      	ldr	r3, [pc, #188]	; (8004d00 <MX_FDCAN2_Init+0xc4>)
 8004c42:	4a30      	ldr	r2, [pc, #192]	; (8004d04 <MX_FDCAN2_Init+0xc8>)
 8004c44:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8004c46:	4b2e      	ldr	r3, [pc, #184]	; (8004d00 <MX_FDCAN2_Init+0xc4>)
 8004c48:	2200      	movs	r2, #0
 8004c4a:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8004c4c:	4b2c      	ldr	r3, [pc, #176]	; (8004d00 <MX_FDCAN2_Init+0xc4>)
 8004c4e:	2200      	movs	r2, #0
 8004c50:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8004c52:	4b2b      	ldr	r3, [pc, #172]	; (8004d00 <MX_FDCAN2_Init+0xc4>)
 8004c54:	2200      	movs	r2, #0
 8004c56:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8004c58:	4b29      	ldr	r3, [pc, #164]	; (8004d00 <MX_FDCAN2_Init+0xc4>)
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8004c5e:	4b28      	ldr	r3, [pc, #160]	; (8004d00 <MX_FDCAN2_Init+0xc4>)
 8004c60:	2200      	movs	r2, #0
 8004c62:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 5;
 8004c64:	4b26      	ldr	r3, [pc, #152]	; (8004d00 <MX_FDCAN2_Init+0xc4>)
 8004c66:	2205      	movs	r2, #5
 8004c68:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8004c6a:	4b25      	ldr	r3, [pc, #148]	; (8004d00 <MX_FDCAN2_Init+0xc4>)
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 13;
 8004c70:	4b23      	ldr	r3, [pc, #140]	; (8004d00 <MX_FDCAN2_Init+0xc4>)
 8004c72:	220d      	movs	r2, #13
 8004c74:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8004c76:	4b22      	ldr	r3, [pc, #136]	; (8004d00 <MX_FDCAN2_Init+0xc4>)
 8004c78:	2202      	movs	r2, #2
 8004c7a:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8004c7c:	4b20      	ldr	r3, [pc, #128]	; (8004d00 <MX_FDCAN2_Init+0xc4>)
 8004c7e:	2201      	movs	r2, #1
 8004c80:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8004c82:	4b1f      	ldr	r3, [pc, #124]	; (8004d00 <MX_FDCAN2_Init+0xc4>)
 8004c84:	2201      	movs	r2, #1
 8004c86:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8004c88:	4b1d      	ldr	r3, [pc, #116]	; (8004d00 <MX_FDCAN2_Init+0xc4>)
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8004c8e:	4b1c      	ldr	r3, [pc, #112]	; (8004d00 <MX_FDCAN2_Init+0xc4>)
 8004c90:	2201      	movs	r2, #1
 8004c92:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 2560/2;
 8004c94:	4b1a      	ldr	r3, [pc, #104]	; (8004d00 <MX_FDCAN2_Init+0xc4>)
 8004c96:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8004c9a:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 128;
 8004c9c:	4b18      	ldr	r3, [pc, #96]	; (8004d00 <MX_FDCAN2_Init+0xc4>)
 8004c9e:	2280      	movs	r2, #128	; 0x80
 8004ca0:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8004ca2:	4b17      	ldr	r3, [pc, #92]	; (8004d00 <MX_FDCAN2_Init+0xc4>)
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8004ca8:	4b15      	ldr	r3, [pc, #84]	; (8004d00 <MX_FDCAN2_Init+0xc4>)
 8004caa:	2200      	movs	r2, #0
 8004cac:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8004cae:	4b14      	ldr	r3, [pc, #80]	; (8004d00 <MX_FDCAN2_Init+0xc4>)
 8004cb0:	2204      	movs	r2, #4
 8004cb2:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 64;
 8004cb4:	4b12      	ldr	r3, [pc, #72]	; (8004d00 <MX_FDCAN2_Init+0xc4>)
 8004cb6:	2240      	movs	r2, #64	; 0x40
 8004cb8:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8004cba:	4b11      	ldr	r3, [pc, #68]	; (8004d00 <MX_FDCAN2_Init+0xc4>)
 8004cbc:	2204      	movs	r2, #4
 8004cbe:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 64;
 8004cc0:	4b0f      	ldr	r3, [pc, #60]	; (8004d00 <MX_FDCAN2_Init+0xc4>)
 8004cc2:	2240      	movs	r2, #64	; 0x40
 8004cc4:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8004cc6:	4b0e      	ldr	r3, [pc, #56]	; (8004d00 <MX_FDCAN2_Init+0xc4>)
 8004cc8:	2204      	movs	r2, #4
 8004cca:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8004ccc:	4b0c      	ldr	r3, [pc, #48]	; (8004d00 <MX_FDCAN2_Init+0xc4>)
 8004cce:	2200      	movs	r2, #0
 8004cd0:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8004cd2:	4b0b      	ldr	r3, [pc, #44]	; (8004d00 <MX_FDCAN2_Init+0xc4>)
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 32;
 8004cd8:	4b09      	ldr	r3, [pc, #36]	; (8004d00 <MX_FDCAN2_Init+0xc4>)
 8004cda:	2220      	movs	r2, #32
 8004cdc:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8004cde:	4b08      	ldr	r3, [pc, #32]	; (8004d00 <MX_FDCAN2_Init+0xc4>)
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8004ce4:	4b06      	ldr	r3, [pc, #24]	; (8004d00 <MX_FDCAN2_Init+0xc4>)
 8004ce6:	2204      	movs	r2, #4
 8004ce8:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8004cea:	4805      	ldr	r0, [pc, #20]	; (8004d00 <MX_FDCAN2_Init+0xc4>)
 8004cec:	f005 fa22 	bl	800a134 <HAL_FDCAN_Init>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d001      	beq.n	8004cfa <MX_FDCAN2_Init+0xbe>
  {
    Error_Handler();
 8004cf6:	f000 fcdd 	bl	80056b4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8004cfa:	bf00      	nop
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	2400029c 	.word	0x2400029c
 8004d04:	4000a400 	.word	0x4000a400

08004d08 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004d0c:	4b28      	ldr	r3, [pc, #160]	; (8004db0 <MX_SPI1_Init+0xa8>)
 8004d0e:	4a29      	ldr	r2, [pc, #164]	; (8004db4 <MX_SPI1_Init+0xac>)
 8004d10:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004d12:	4b27      	ldr	r3, [pc, #156]	; (8004db0 <MX_SPI1_Init+0xa8>)
 8004d14:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004d18:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004d1a:	4b25      	ldr	r3, [pc, #148]	; (8004db0 <MX_SPI1_Init+0xa8>)
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004d20:	4b23      	ldr	r3, [pc, #140]	; (8004db0 <MX_SPI1_Init+0xa8>)
 8004d22:	2207      	movs	r2, #7
 8004d24:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d26:	4b22      	ldr	r3, [pc, #136]	; (8004db0 <MX_SPI1_Init+0xa8>)
 8004d28:	2200      	movs	r2, #0
 8004d2a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004d2c:	4b20      	ldr	r3, [pc, #128]	; (8004db0 <MX_SPI1_Init+0xa8>)
 8004d2e:	2200      	movs	r2, #0
 8004d30:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004d32:	4b1f      	ldr	r3, [pc, #124]	; (8004db0 <MX_SPI1_Init+0xa8>)
 8004d34:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004d38:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d3a:	4b1d      	ldr	r3, [pc, #116]	; (8004db0 <MX_SPI1_Init+0xa8>)
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004d40:	4b1b      	ldr	r3, [pc, #108]	; (8004db0 <MX_SPI1_Init+0xa8>)
 8004d42:	2200      	movs	r2, #0
 8004d44:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004d46:	4b1a      	ldr	r3, [pc, #104]	; (8004db0 <MX_SPI1_Init+0xa8>)
 8004d48:	2200      	movs	r2, #0
 8004d4a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d4c:	4b18      	ldr	r3, [pc, #96]	; (8004db0 <MX_SPI1_Init+0xa8>)
 8004d4e:	2200      	movs	r2, #0
 8004d50:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8004d52:	4b17      	ldr	r3, [pc, #92]	; (8004db0 <MX_SPI1_Init+0xa8>)
 8004d54:	2200      	movs	r2, #0
 8004d56:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004d58:	4b15      	ldr	r3, [pc, #84]	; (8004db0 <MX_SPI1_Init+0xa8>)
 8004d5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004d5e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8004d60:	4b13      	ldr	r3, [pc, #76]	; (8004db0 <MX_SPI1_Init+0xa8>)
 8004d62:	2200      	movs	r2, #0
 8004d64:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8004d66:	4b12      	ldr	r3, [pc, #72]	; (8004db0 <MX_SPI1_Init+0xa8>)
 8004d68:	2200      	movs	r2, #0
 8004d6a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004d6c:	4b10      	ldr	r3, [pc, #64]	; (8004db0 <MX_SPI1_Init+0xa8>)
 8004d6e:	2200      	movs	r2, #0
 8004d70:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004d72:	4b0f      	ldr	r3, [pc, #60]	; (8004db0 <MX_SPI1_Init+0xa8>)
 8004d74:	2200      	movs	r2, #0
 8004d76:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8004d78:	4b0d      	ldr	r3, [pc, #52]	; (8004db0 <MX_SPI1_Init+0xa8>)
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8004d7e:	4b0c      	ldr	r3, [pc, #48]	; (8004db0 <MX_SPI1_Init+0xa8>)
 8004d80:	2200      	movs	r2, #0
 8004d82:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_ENABLE;
 8004d84:	4b0a      	ldr	r3, [pc, #40]	; (8004db0 <MX_SPI1_Init+0xa8>)
 8004d86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d8a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 8004d8c:	4b08      	ldr	r3, [pc, #32]	; (8004db0 <MX_SPI1_Init+0xa8>)
 8004d8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004d92:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_ENABLE;
 8004d94:	4b06      	ldr	r3, [pc, #24]	; (8004db0 <MX_SPI1_Init+0xa8>)
 8004d96:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004d9a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004d9c:	4804      	ldr	r0, [pc, #16]	; (8004db0 <MX_SPI1_Init+0xa8>)
 8004d9e:	f009 f8ed 	bl	800df7c <HAL_SPI_Init>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d001      	beq.n	8004dac <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 8004da8:	f000 fc84 	bl	80056b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004dac:	bf00      	nop
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	2400033c 	.word	0x2400033c
 8004db4:	40013000 	.word	0x40013000

08004db8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b08c      	sub	sp, #48	; 0x30
 8004dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004dbe:	f107 030c 	add.w	r3, r7, #12
 8004dc2:	2224      	movs	r2, #36	; 0x24
 8004dc4:	2100      	movs	r1, #0
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f00c ff5c 	bl	8011c84 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004dcc:	463b      	mov	r3, r7
 8004dce:	2200      	movs	r2, #0
 8004dd0:	601a      	str	r2, [r3, #0]
 8004dd2:	605a      	str	r2, [r3, #4]
 8004dd4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004dd6:	4b23      	ldr	r3, [pc, #140]	; (8004e64 <MX_TIM1_Init+0xac>)
 8004dd8:	4a23      	ldr	r2, [pc, #140]	; (8004e68 <MX_TIM1_Init+0xb0>)
 8004dda:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004ddc:	4b21      	ldr	r3, [pc, #132]	; (8004e64 <MX_TIM1_Init+0xac>)
 8004dde:	2200      	movs	r2, #0
 8004de0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004de2:	4b20      	ldr	r3, [pc, #128]	; (8004e64 <MX_TIM1_Init+0xac>)
 8004de4:	2200      	movs	r2, #0
 8004de6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004de8:	4b1e      	ldr	r3, [pc, #120]	; (8004e64 <MX_TIM1_Init+0xac>)
 8004dea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004dee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004df0:	4b1c      	ldr	r3, [pc, #112]	; (8004e64 <MX_TIM1_Init+0xac>)
 8004df2:	2200      	movs	r2, #0
 8004df4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004df6:	4b1b      	ldr	r3, [pc, #108]	; (8004e64 <MX_TIM1_Init+0xac>)
 8004df8:	2200      	movs	r2, #0
 8004dfa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004dfc:	4b19      	ldr	r3, [pc, #100]	; (8004e64 <MX_TIM1_Init+0xac>)
 8004dfe:	2200      	movs	r2, #0
 8004e00:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004e02:	2303      	movs	r3, #3
 8004e04:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004e06:	2300      	movs	r3, #0
 8004e08:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004e12:	2300      	movs	r3, #0
 8004e14:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004e16:	2300      	movs	r3, #0
 8004e18:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004e22:	2300      	movs	r3, #0
 8004e24:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8004e26:	f107 030c 	add.w	r3, r7, #12
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	480d      	ldr	r0, [pc, #52]	; (8004e64 <MX_TIM1_Init+0xac>)
 8004e2e:	f009 fa95 	bl	800e35c <HAL_TIM_Encoder_Init>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d001      	beq.n	8004e3c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8004e38:	f000 fc3c 	bl	80056b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004e40:	2300      	movs	r3, #0
 8004e42:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e44:	2300      	movs	r3, #0
 8004e46:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004e48:	463b      	mov	r3, r7
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	4805      	ldr	r0, [pc, #20]	; (8004e64 <MX_TIM1_Init+0xac>)
 8004e4e:	f009 ff57 	bl	800ed00 <HAL_TIMEx_MasterConfigSynchronization>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d001      	beq.n	8004e5c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8004e58:	f000 fc2c 	bl	80056b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8004e5c:	bf00      	nop
 8004e5e:	3730      	adds	r7, #48	; 0x30
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	240003c4 	.word	0x240003c4
 8004e68:	40010000 	.word	0x40010000

08004e6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b08c      	sub	sp, #48	; 0x30
 8004e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004e72:	f107 030c 	add.w	r3, r7, #12
 8004e76:	2224      	movs	r2, #36	; 0x24
 8004e78:	2100      	movs	r1, #0
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f00c ff02 	bl	8011c84 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e80:	463b      	mov	r3, r7
 8004e82:	2200      	movs	r2, #0
 8004e84:	601a      	str	r2, [r3, #0]
 8004e86:	605a      	str	r2, [r3, #4]
 8004e88:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004e8a:	4b21      	ldr	r3, [pc, #132]	; (8004f10 <MX_TIM2_Init+0xa4>)
 8004e8c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004e90:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004e92:	4b1f      	ldr	r3, [pc, #124]	; (8004f10 <MX_TIM2_Init+0xa4>)
 8004e94:	2200      	movs	r2, #0
 8004e96:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e98:	4b1d      	ldr	r3, [pc, #116]	; (8004f10 <MX_TIM2_Init+0xa4>)
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8004e9e:	4b1c      	ldr	r3, [pc, #112]	; (8004f10 <MX_TIM2_Init+0xa4>)
 8004ea0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ea4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ea6:	4b1a      	ldr	r3, [pc, #104]	; (8004f10 <MX_TIM2_Init+0xa4>)
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004eac:	4b18      	ldr	r3, [pc, #96]	; (8004f10 <MX_TIM2_Init+0xa4>)
 8004eae:	2200      	movs	r2, #0
 8004eb0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8004ed6:	f107 030c 	add.w	r3, r7, #12
 8004eda:	4619      	mov	r1, r3
 8004edc:	480c      	ldr	r0, [pc, #48]	; (8004f10 <MX_TIM2_Init+0xa4>)
 8004ede:	f009 fa3d 	bl	800e35c <HAL_TIM_Encoder_Init>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d001      	beq.n	8004eec <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8004ee8:	f000 fbe4 	bl	80056b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004eec:	2300      	movs	r3, #0
 8004eee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004ef4:	463b      	mov	r3, r7
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	4805      	ldr	r0, [pc, #20]	; (8004f10 <MX_TIM2_Init+0xa4>)
 8004efa:	f009 ff01 	bl	800ed00 <HAL_TIMEx_MasterConfigSynchronization>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d001      	beq.n	8004f08 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8004f04:	f000 fbd6 	bl	80056b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004f08:	bf00      	nop
 8004f0a:	3730      	adds	r7, #48	; 0x30
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	24000410 	.word	0x24000410

08004f14 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b08c      	sub	sp, #48	; 0x30
 8004f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004f1a:	f107 030c 	add.w	r3, r7, #12
 8004f1e:	2224      	movs	r2, #36	; 0x24
 8004f20:	2100      	movs	r1, #0
 8004f22:	4618      	mov	r0, r3
 8004f24:	f00c feae 	bl	8011c84 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f28:	463b      	mov	r3, r7
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	601a      	str	r2, [r3, #0]
 8004f2e:	605a      	str	r2, [r3, #4]
 8004f30:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004f32:	4b21      	ldr	r3, [pc, #132]	; (8004fb8 <MX_TIM3_Init+0xa4>)
 8004f34:	4a21      	ldr	r2, [pc, #132]	; (8004fbc <MX_TIM3_Init+0xa8>)
 8004f36:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004f38:	4b1f      	ldr	r3, [pc, #124]	; (8004fb8 <MX_TIM3_Init+0xa4>)
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f3e:	4b1e      	ldr	r3, [pc, #120]	; (8004fb8 <MX_TIM3_Init+0xa4>)
 8004f40:	2200      	movs	r2, #0
 8004f42:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004f44:	4b1c      	ldr	r3, [pc, #112]	; (8004fb8 <MX_TIM3_Init+0xa4>)
 8004f46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f4a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f4c:	4b1a      	ldr	r3, [pc, #104]	; (8004fb8 <MX_TIM3_Init+0xa4>)
 8004f4e:	2200      	movs	r2, #0
 8004f50:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f52:	4b19      	ldr	r3, [pc, #100]	; (8004fb8 <MX_TIM3_Init+0xa4>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004f60:	2301      	movs	r3, #1
 8004f62:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004f64:	2300      	movs	r3, #0
 8004f66:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004f70:	2301      	movs	r3, #1
 8004f72:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004f74:	2300      	movs	r3, #0
 8004f76:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8004f7c:	f107 030c 	add.w	r3, r7, #12
 8004f80:	4619      	mov	r1, r3
 8004f82:	480d      	ldr	r0, [pc, #52]	; (8004fb8 <MX_TIM3_Init+0xa4>)
 8004f84:	f009 f9ea 	bl	800e35c <HAL_TIM_Encoder_Init>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d001      	beq.n	8004f92 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8004f8e:	f000 fb91 	bl	80056b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f92:	2300      	movs	r3, #0
 8004f94:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f96:	2300      	movs	r3, #0
 8004f98:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004f9a:	463b      	mov	r3, r7
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	4806      	ldr	r0, [pc, #24]	; (8004fb8 <MX_TIM3_Init+0xa4>)
 8004fa0:	f009 feae 	bl	800ed00 <HAL_TIMEx_MasterConfigSynchronization>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d001      	beq.n	8004fae <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8004faa:	f000 fb83 	bl	80056b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004fae:	bf00      	nop
 8004fb0:	3730      	adds	r7, #48	; 0x30
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	2400045c 	.word	0x2400045c
 8004fbc:	40000400 	.word	0x40000400

08004fc0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b08c      	sub	sp, #48	; 0x30
 8004fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004fc6:	f107 030c 	add.w	r3, r7, #12
 8004fca:	2224      	movs	r2, #36	; 0x24
 8004fcc:	2100      	movs	r1, #0
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f00c fe58 	bl	8011c84 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004fd4:	463b      	mov	r3, r7
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	601a      	str	r2, [r3, #0]
 8004fda:	605a      	str	r2, [r3, #4]
 8004fdc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004fde:	4b21      	ldr	r3, [pc, #132]	; (8005064 <MX_TIM4_Init+0xa4>)
 8004fe0:	4a21      	ldr	r2, [pc, #132]	; (8005068 <MX_TIM4_Init+0xa8>)
 8004fe2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004fe4:	4b1f      	ldr	r3, [pc, #124]	; (8005064 <MX_TIM4_Init+0xa4>)
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004fea:	4b1e      	ldr	r3, [pc, #120]	; (8005064 <MX_TIM4_Init+0xa4>)
 8004fec:	2200      	movs	r2, #0
 8004fee:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8004ff0:	4b1c      	ldr	r3, [pc, #112]	; (8005064 <MX_TIM4_Init+0xa4>)
 8004ff2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ff6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ff8:	4b1a      	ldr	r3, [pc, #104]	; (8005064 <MX_TIM4_Init+0xa4>)
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ffe:	4b19      	ldr	r3, [pc, #100]	; (8005064 <MX_TIM4_Init+0xa4>)
 8005000:	2200      	movs	r2, #0
 8005002:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005004:	2303      	movs	r3, #3
 8005006:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005008:	2300      	movs	r3, #0
 800500a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800500c:	2301      	movs	r3, #1
 800500e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005010:	2300      	movs	r3, #0
 8005012:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005014:	2300      	movs	r3, #0
 8005016:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005018:	2300      	movs	r3, #0
 800501a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800501c:	2301      	movs	r3, #1
 800501e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005020:	2300      	movs	r3, #0
 8005022:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8005024:	2300      	movs	r3, #0
 8005026:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8005028:	f107 030c 	add.w	r3, r7, #12
 800502c:	4619      	mov	r1, r3
 800502e:	480d      	ldr	r0, [pc, #52]	; (8005064 <MX_TIM4_Init+0xa4>)
 8005030:	f009 f994 	bl	800e35c <HAL_TIM_Encoder_Init>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d001      	beq.n	800503e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800503a:	f000 fb3b 	bl	80056b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800503e:	2300      	movs	r3, #0
 8005040:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005042:	2300      	movs	r3, #0
 8005044:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005046:	463b      	mov	r3, r7
 8005048:	4619      	mov	r1, r3
 800504a:	4806      	ldr	r0, [pc, #24]	; (8005064 <MX_TIM4_Init+0xa4>)
 800504c:	f009 fe58 	bl	800ed00 <HAL_TIMEx_MasterConfigSynchronization>
 8005050:	4603      	mov	r3, r0
 8005052:	2b00      	cmp	r3, #0
 8005054:	d001      	beq.n	800505a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8005056:	f000 fb2d 	bl	80056b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800505a:	bf00      	nop
 800505c:	3730      	adds	r7, #48	; 0x30
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	240004a8 	.word	0x240004a8
 8005068:	40000800 	.word	0x40000800

0800506c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b088      	sub	sp, #32
 8005070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005072:	f107 0310 	add.w	r3, r7, #16
 8005076:	2200      	movs	r2, #0
 8005078:	601a      	str	r2, [r3, #0]
 800507a:	605a      	str	r2, [r3, #4]
 800507c:	609a      	str	r2, [r3, #8]
 800507e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005080:	1d3b      	adds	r3, r7, #4
 8005082:	2200      	movs	r2, #0
 8005084:	601a      	str	r2, [r3, #0]
 8005086:	605a      	str	r2, [r3, #4]
 8005088:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800508a:	4b1d      	ldr	r3, [pc, #116]	; (8005100 <MX_TIM5_Init+0x94>)
 800508c:	4a1d      	ldr	r2, [pc, #116]	; (8005104 <MX_TIM5_Init+0x98>)
 800508e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 240-1;
 8005090:	4b1b      	ldr	r3, [pc, #108]	; (8005100 <MX_TIM5_Init+0x94>)
 8005092:	22ef      	movs	r2, #239	; 0xef
 8005094:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005096:	4b1a      	ldr	r3, [pc, #104]	; (8005100 <MX_TIM5_Init+0x94>)
 8005098:	2200      	movs	r2, #0
 800509a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10000-1;
 800509c:	4b18      	ldr	r3, [pc, #96]	; (8005100 <MX_TIM5_Init+0x94>)
 800509e:	f242 720f 	movw	r2, #9999	; 0x270f
 80050a2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80050a4:	4b16      	ldr	r3, [pc, #88]	; (8005100 <MX_TIM5_Init+0x94>)
 80050a6:	2200      	movs	r2, #0
 80050a8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80050aa:	4b15      	ldr	r3, [pc, #84]	; (8005100 <MX_TIM5_Init+0x94>)
 80050ac:	2200      	movs	r2, #0
 80050ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80050b0:	4813      	ldr	r0, [pc, #76]	; (8005100 <MX_TIM5_Init+0x94>)
 80050b2:	f009 f884 	bl	800e1be <HAL_TIM_Base_Init>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d001      	beq.n	80050c0 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80050bc:	f000 fafa 	bl	80056b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80050c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80050c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80050c6:	f107 0310 	add.w	r3, r7, #16
 80050ca:	4619      	mov	r1, r3
 80050cc:	480c      	ldr	r0, [pc, #48]	; (8005100 <MX_TIM5_Init+0x94>)
 80050ce:	f009 fb99 	bl	800e804 <HAL_TIM_ConfigClockSource>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d001      	beq.n	80050dc <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80050d8:	f000 faec 	bl	80056b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80050dc:	2300      	movs	r3, #0
 80050de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80050e0:	2300      	movs	r3, #0
 80050e2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80050e4:	1d3b      	adds	r3, r7, #4
 80050e6:	4619      	mov	r1, r3
 80050e8:	4805      	ldr	r0, [pc, #20]	; (8005100 <MX_TIM5_Init+0x94>)
 80050ea:	f009 fe09 	bl	800ed00 <HAL_TIMEx_MasterConfigSynchronization>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d001      	beq.n	80050f8 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80050f4:	f000 fade 	bl	80056b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80050f8:	bf00      	nop
 80050fa:	3720      	adds	r7, #32
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	240004f4 	.word	0x240004f4
 8005104:	40000c00 	.word	0x40000c00

08005108 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800510e:	1d3b      	adds	r3, r7, #4
 8005110:	2200      	movs	r2, #0
 8005112:	601a      	str	r2, [r3, #0]
 8005114:	605a      	str	r2, [r3, #4]
 8005116:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8005118:	4b14      	ldr	r3, [pc, #80]	; (800516c <MX_TIM6_Init+0x64>)
 800511a:	4a15      	ldr	r2, [pc, #84]	; (8005170 <MX_TIM6_Init+0x68>)
 800511c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 240-1;
 800511e:	4b13      	ldr	r3, [pc, #76]	; (800516c <MX_TIM6_Init+0x64>)
 8005120:	22ef      	movs	r2, #239	; 0xef
 8005122:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005124:	4b11      	ldr	r3, [pc, #68]	; (800516c <MX_TIM6_Init+0x64>)
 8005126:	2200      	movs	r2, #0
 8005128:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800512a:	4b10      	ldr	r3, [pc, #64]	; (800516c <MX_TIM6_Init+0x64>)
 800512c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005130:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005132:	4b0e      	ldr	r3, [pc, #56]	; (800516c <MX_TIM6_Init+0x64>)
 8005134:	2200      	movs	r2, #0
 8005136:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005138:	480c      	ldr	r0, [pc, #48]	; (800516c <MX_TIM6_Init+0x64>)
 800513a:	f009 f840 	bl	800e1be <HAL_TIM_Base_Init>
 800513e:	4603      	mov	r3, r0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d001      	beq.n	8005148 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8005144:	f000 fab6 	bl	80056b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005148:	2300      	movs	r3, #0
 800514a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800514c:	2300      	movs	r3, #0
 800514e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005150:	1d3b      	adds	r3, r7, #4
 8005152:	4619      	mov	r1, r3
 8005154:	4805      	ldr	r0, [pc, #20]	; (800516c <MX_TIM6_Init+0x64>)
 8005156:	f009 fdd3 	bl	800ed00 <HAL_TIMEx_MasterConfigSynchronization>
 800515a:	4603      	mov	r3, r0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d001      	beq.n	8005164 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8005160:	f000 faa8 	bl	80056b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8005164:	bf00      	nop
 8005166:	3710      	adds	r7, #16
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}
 800516c:	24000540 	.word	0x24000540
 8005170:	40001000 	.word	0x40001000

08005174 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800517a:	1d3b      	adds	r3, r7, #4
 800517c:	2200      	movs	r2, #0
 800517e:	601a      	str	r2, [r3, #0]
 8005180:	605a      	str	r2, [r3, #4]
 8005182:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8005184:	4b14      	ldr	r3, [pc, #80]	; (80051d8 <MX_TIM7_Init+0x64>)
 8005186:	4a15      	ldr	r2, [pc, #84]	; (80051dc <MX_TIM7_Init+0x68>)
 8005188:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 240-1;
 800518a:	4b13      	ldr	r3, [pc, #76]	; (80051d8 <MX_TIM7_Init+0x64>)
 800518c:	22ef      	movs	r2, #239	; 0xef
 800518e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005190:	4b11      	ldr	r3, [pc, #68]	; (80051d8 <MX_TIM7_Init+0x64>)
 8005192:	2200      	movs	r2, #0
 8005194:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 8005196:	4b10      	ldr	r3, [pc, #64]	; (80051d8 <MX_TIM7_Init+0x64>)
 8005198:	f240 32e7 	movw	r2, #999	; 0x3e7
 800519c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800519e:	4b0e      	ldr	r3, [pc, #56]	; (80051d8 <MX_TIM7_Init+0x64>)
 80051a0:	2200      	movs	r2, #0
 80051a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80051a4:	480c      	ldr	r0, [pc, #48]	; (80051d8 <MX_TIM7_Init+0x64>)
 80051a6:	f009 f80a 	bl	800e1be <HAL_TIM_Base_Init>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d001      	beq.n	80051b4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80051b0:	f000 fa80 	bl	80056b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80051b4:	2300      	movs	r3, #0
 80051b6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80051b8:	2300      	movs	r3, #0
 80051ba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80051bc:	1d3b      	adds	r3, r7, #4
 80051be:	4619      	mov	r1, r3
 80051c0:	4805      	ldr	r0, [pc, #20]	; (80051d8 <MX_TIM7_Init+0x64>)
 80051c2:	f009 fd9d 	bl	800ed00 <HAL_TIMEx_MasterConfigSynchronization>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d001      	beq.n	80051d0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80051cc:	f000 fa72 	bl	80056b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80051d0:	bf00      	nop
 80051d2:	3710      	adds	r7, #16
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	2400058c 	.word	0x2400058c
 80051dc:	40001400 	.word	0x40001400

080051e0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b08c      	sub	sp, #48	; 0x30
 80051e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80051e6:	f107 030c 	add.w	r3, r7, #12
 80051ea:	2224      	movs	r2, #36	; 0x24
 80051ec:	2100      	movs	r1, #0
 80051ee:	4618      	mov	r0, r3
 80051f0:	f00c fd48 	bl	8011c84 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80051f4:	463b      	mov	r3, r7
 80051f6:	2200      	movs	r2, #0
 80051f8:	601a      	str	r2, [r3, #0]
 80051fa:	605a      	str	r2, [r3, #4]
 80051fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80051fe:	4b23      	ldr	r3, [pc, #140]	; (800528c <MX_TIM8_Init+0xac>)
 8005200:	4a23      	ldr	r2, [pc, #140]	; (8005290 <MX_TIM8_Init+0xb0>)
 8005202:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8005204:	4b21      	ldr	r3, [pc, #132]	; (800528c <MX_TIM8_Init+0xac>)
 8005206:	2200      	movs	r2, #0
 8005208:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800520a:	4b20      	ldr	r3, [pc, #128]	; (800528c <MX_TIM8_Init+0xac>)
 800520c:	2200      	movs	r2, #0
 800520e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8005210:	4b1e      	ldr	r3, [pc, #120]	; (800528c <MX_TIM8_Init+0xac>)
 8005212:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005216:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005218:	4b1c      	ldr	r3, [pc, #112]	; (800528c <MX_TIM8_Init+0xac>)
 800521a:	2200      	movs	r2, #0
 800521c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800521e:	4b1b      	ldr	r3, [pc, #108]	; (800528c <MX_TIM8_Init+0xac>)
 8005220:	2200      	movs	r2, #0
 8005222:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005224:	4b19      	ldr	r3, [pc, #100]	; (800528c <MX_TIM8_Init+0xac>)
 8005226:	2200      	movs	r2, #0
 8005228:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800522a:	2303      	movs	r3, #3
 800522c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800522e:	2300      	movs	r3, #0
 8005230:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005232:	2301      	movs	r3, #1
 8005234:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005236:	2300      	movs	r3, #0
 8005238:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800523a:	2300      	movs	r3, #0
 800523c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800523e:	2300      	movs	r3, #0
 8005240:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005242:	2301      	movs	r3, #1
 8005244:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005246:	2300      	movs	r3, #0
 8005248:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800524a:	2300      	movs	r3, #0
 800524c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800524e:	f107 030c 	add.w	r3, r7, #12
 8005252:	4619      	mov	r1, r3
 8005254:	480d      	ldr	r0, [pc, #52]	; (800528c <MX_TIM8_Init+0xac>)
 8005256:	f009 f881 	bl	800e35c <HAL_TIM_Encoder_Init>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d001      	beq.n	8005264 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8005260:	f000 fa28 	bl	80056b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005264:	2300      	movs	r3, #0
 8005266:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005268:	2300      	movs	r3, #0
 800526a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800526c:	2300      	movs	r3, #0
 800526e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8005270:	463b      	mov	r3, r7
 8005272:	4619      	mov	r1, r3
 8005274:	4805      	ldr	r0, [pc, #20]	; (800528c <MX_TIM8_Init+0xac>)
 8005276:	f009 fd43 	bl	800ed00 <HAL_TIMEx_MasterConfigSynchronization>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d001      	beq.n	8005284 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8005280:	f000 fa18 	bl	80056b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8005284:	bf00      	nop
 8005286:	3730      	adds	r7, #48	; 0x30
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}
 800528c:	240005d8 	.word	0x240005d8
 8005290:	40010400 	.word	0x40010400

08005294 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8005298:	4b0e      	ldr	r3, [pc, #56]	; (80052d4 <MX_TIM13_Init+0x40>)
 800529a:	4a0f      	ldr	r2, [pc, #60]	; (80052d8 <MX_TIM13_Init+0x44>)
 800529c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 240-1;
 800529e:	4b0d      	ldr	r3, [pc, #52]	; (80052d4 <MX_TIM13_Init+0x40>)
 80052a0:	22ef      	movs	r2, #239	; 0xef
 80052a2:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80052a4:	4b0b      	ldr	r3, [pc, #44]	; (80052d4 <MX_TIM13_Init+0x40>)
 80052a6:	2200      	movs	r2, #0
 80052a8:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 10000-1;
 80052aa:	4b0a      	ldr	r3, [pc, #40]	; (80052d4 <MX_TIM13_Init+0x40>)
 80052ac:	f242 720f 	movw	r2, #9999	; 0x270f
 80052b0:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80052b2:	4b08      	ldr	r3, [pc, #32]	; (80052d4 <MX_TIM13_Init+0x40>)
 80052b4:	2200      	movs	r2, #0
 80052b6:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80052b8:	4b06      	ldr	r3, [pc, #24]	; (80052d4 <MX_TIM13_Init+0x40>)
 80052ba:	2200      	movs	r2, #0
 80052bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80052be:	4805      	ldr	r0, [pc, #20]	; (80052d4 <MX_TIM13_Init+0x40>)
 80052c0:	f008 ff7d 	bl	800e1be <HAL_TIM_Base_Init>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d001      	beq.n	80052ce <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 80052ca:	f000 f9f3 	bl	80056b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80052ce:	bf00      	nop
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	24000624 	.word	0x24000624
 80052d8:	40001c00 	.word	0x40001c00

080052dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80052e0:	4b22      	ldr	r3, [pc, #136]	; (800536c <MX_USART1_UART_Init+0x90>)
 80052e2:	4a23      	ldr	r2, [pc, #140]	; (8005370 <MX_USART1_UART_Init+0x94>)
 80052e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2400;
 80052e6:	4b21      	ldr	r3, [pc, #132]	; (800536c <MX_USART1_UART_Init+0x90>)
 80052e8:	f44f 6216 	mov.w	r2, #2400	; 0x960
 80052ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80052ee:	4b1f      	ldr	r3, [pc, #124]	; (800536c <MX_USART1_UART_Init+0x90>)
 80052f0:	2200      	movs	r2, #0
 80052f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80052f4:	4b1d      	ldr	r3, [pc, #116]	; (800536c <MX_USART1_UART_Init+0x90>)
 80052f6:	2200      	movs	r2, #0
 80052f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80052fa:	4b1c      	ldr	r3, [pc, #112]	; (800536c <MX_USART1_UART_Init+0x90>)
 80052fc:	2200      	movs	r2, #0
 80052fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005300:	4b1a      	ldr	r3, [pc, #104]	; (800536c <MX_USART1_UART_Init+0x90>)
 8005302:	220c      	movs	r2, #12
 8005304:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005306:	4b19      	ldr	r3, [pc, #100]	; (800536c <MX_USART1_UART_Init+0x90>)
 8005308:	2200      	movs	r2, #0
 800530a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800530c:	4b17      	ldr	r3, [pc, #92]	; (800536c <MX_USART1_UART_Init+0x90>)
 800530e:	2200      	movs	r2, #0
 8005310:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005312:	4b16      	ldr	r3, [pc, #88]	; (800536c <MX_USART1_UART_Init+0x90>)
 8005314:	2200      	movs	r2, #0
 8005316:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005318:	4b14      	ldr	r3, [pc, #80]	; (800536c <MX_USART1_UART_Init+0x90>)
 800531a:	2200      	movs	r2, #0
 800531c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800531e:	4b13      	ldr	r3, [pc, #76]	; (800536c <MX_USART1_UART_Init+0x90>)
 8005320:	2200      	movs	r2, #0
 8005322:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005324:	4811      	ldr	r0, [pc, #68]	; (800536c <MX_USART1_UART_Init+0x90>)
 8005326:	f009 fd97 	bl	800ee58 <HAL_UART_Init>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d001      	beq.n	8005334 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8005330:	f000 f9c0 	bl	80056b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005334:	2100      	movs	r1, #0
 8005336:	480d      	ldr	r0, [pc, #52]	; (800536c <MX_USART1_UART_Init+0x90>)
 8005338:	f00b fc8f 	bl	8010c5a <HAL_UARTEx_SetTxFifoThreshold>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d001      	beq.n	8005346 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8005342:	f000 f9b7 	bl	80056b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005346:	2100      	movs	r1, #0
 8005348:	4808      	ldr	r0, [pc, #32]	; (800536c <MX_USART1_UART_Init+0x90>)
 800534a:	f00b fcc4 	bl	8010cd6 <HAL_UARTEx_SetRxFifoThreshold>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d001      	beq.n	8005358 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8005354:	f000 f9ae 	bl	80056b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8005358:	4804      	ldr	r0, [pc, #16]	; (800536c <MX_USART1_UART_Init+0x90>)
 800535a:	f00b fc45 	bl	8010be8 <HAL_UARTEx_DisableFifoMode>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d001      	beq.n	8005368 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8005364:	f000 f9a6 	bl	80056b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005368:	bf00      	nop
 800536a:	bd80      	pop	{r7, pc}
 800536c:	24000670 	.word	0x24000670
 8005370:	40011000 	.word	0x40011000

08005374 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005378:	4b22      	ldr	r3, [pc, #136]	; (8005404 <MX_USART2_UART_Init+0x90>)
 800537a:	4a23      	ldr	r2, [pc, #140]	; (8005408 <MX_USART2_UART_Init+0x94>)
 800537c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800537e:	4b21      	ldr	r3, [pc, #132]	; (8005404 <MX_USART2_UART_Init+0x90>)
 8005380:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005384:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005386:	4b1f      	ldr	r3, [pc, #124]	; (8005404 <MX_USART2_UART_Init+0x90>)
 8005388:	2200      	movs	r2, #0
 800538a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800538c:	4b1d      	ldr	r3, [pc, #116]	; (8005404 <MX_USART2_UART_Init+0x90>)
 800538e:	2200      	movs	r2, #0
 8005390:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005392:	4b1c      	ldr	r3, [pc, #112]	; (8005404 <MX_USART2_UART_Init+0x90>)
 8005394:	2200      	movs	r2, #0
 8005396:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005398:	4b1a      	ldr	r3, [pc, #104]	; (8005404 <MX_USART2_UART_Init+0x90>)
 800539a:	220c      	movs	r2, #12
 800539c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800539e:	4b19      	ldr	r3, [pc, #100]	; (8005404 <MX_USART2_UART_Init+0x90>)
 80053a0:	2200      	movs	r2, #0
 80053a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80053a4:	4b17      	ldr	r3, [pc, #92]	; (8005404 <MX_USART2_UART_Init+0x90>)
 80053a6:	2200      	movs	r2, #0
 80053a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80053aa:	4b16      	ldr	r3, [pc, #88]	; (8005404 <MX_USART2_UART_Init+0x90>)
 80053ac:	2200      	movs	r2, #0
 80053ae:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80053b0:	4b14      	ldr	r3, [pc, #80]	; (8005404 <MX_USART2_UART_Init+0x90>)
 80053b2:	2200      	movs	r2, #0
 80053b4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80053b6:	4b13      	ldr	r3, [pc, #76]	; (8005404 <MX_USART2_UART_Init+0x90>)
 80053b8:	2200      	movs	r2, #0
 80053ba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80053bc:	4811      	ldr	r0, [pc, #68]	; (8005404 <MX_USART2_UART_Init+0x90>)
 80053be:	f009 fd4b 	bl	800ee58 <HAL_UART_Init>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d001      	beq.n	80053cc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80053c8:	f000 f974 	bl	80056b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80053cc:	2100      	movs	r1, #0
 80053ce:	480d      	ldr	r0, [pc, #52]	; (8005404 <MX_USART2_UART_Init+0x90>)
 80053d0:	f00b fc43 	bl	8010c5a <HAL_UARTEx_SetTxFifoThreshold>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d001      	beq.n	80053de <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80053da:	f000 f96b 	bl	80056b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80053de:	2100      	movs	r1, #0
 80053e0:	4808      	ldr	r0, [pc, #32]	; (8005404 <MX_USART2_UART_Init+0x90>)
 80053e2:	f00b fc78 	bl	8010cd6 <HAL_UARTEx_SetRxFifoThreshold>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d001      	beq.n	80053f0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80053ec:	f000 f962 	bl	80056b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80053f0:	4804      	ldr	r0, [pc, #16]	; (8005404 <MX_USART2_UART_Init+0x90>)
 80053f2:	f00b fbf9 	bl	8010be8 <HAL_UARTEx_DisableFifoMode>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d001      	beq.n	8005400 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80053fc:	f000 f95a 	bl	80056b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005400:	bf00      	nop
 8005402:	bd80      	pop	{r7, pc}
 8005404:	24000700 	.word	0x24000700
 8005408:	40004400 	.word	0x40004400

0800540c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005410:	4b22      	ldr	r3, [pc, #136]	; (800549c <MX_USART3_UART_Init+0x90>)
 8005412:	4a23      	ldr	r2, [pc, #140]	; (80054a0 <MX_USART3_UART_Init+0x94>)
 8005414:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005416:	4b21      	ldr	r3, [pc, #132]	; (800549c <MX_USART3_UART_Init+0x90>)
 8005418:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800541c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800541e:	4b1f      	ldr	r3, [pc, #124]	; (800549c <MX_USART3_UART_Init+0x90>)
 8005420:	2200      	movs	r2, #0
 8005422:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005424:	4b1d      	ldr	r3, [pc, #116]	; (800549c <MX_USART3_UART_Init+0x90>)
 8005426:	2200      	movs	r2, #0
 8005428:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800542a:	4b1c      	ldr	r3, [pc, #112]	; (800549c <MX_USART3_UART_Init+0x90>)
 800542c:	2200      	movs	r2, #0
 800542e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005430:	4b1a      	ldr	r3, [pc, #104]	; (800549c <MX_USART3_UART_Init+0x90>)
 8005432:	220c      	movs	r2, #12
 8005434:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005436:	4b19      	ldr	r3, [pc, #100]	; (800549c <MX_USART3_UART_Init+0x90>)
 8005438:	2200      	movs	r2, #0
 800543a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800543c:	4b17      	ldr	r3, [pc, #92]	; (800549c <MX_USART3_UART_Init+0x90>)
 800543e:	2200      	movs	r2, #0
 8005440:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005442:	4b16      	ldr	r3, [pc, #88]	; (800549c <MX_USART3_UART_Init+0x90>)
 8005444:	2200      	movs	r2, #0
 8005446:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005448:	4b14      	ldr	r3, [pc, #80]	; (800549c <MX_USART3_UART_Init+0x90>)
 800544a:	2200      	movs	r2, #0
 800544c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800544e:	4b13      	ldr	r3, [pc, #76]	; (800549c <MX_USART3_UART_Init+0x90>)
 8005450:	2200      	movs	r2, #0
 8005452:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005454:	4811      	ldr	r0, [pc, #68]	; (800549c <MX_USART3_UART_Init+0x90>)
 8005456:	f009 fcff 	bl	800ee58 <HAL_UART_Init>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d001      	beq.n	8005464 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8005460:	f000 f928 	bl	80056b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005464:	2100      	movs	r1, #0
 8005466:	480d      	ldr	r0, [pc, #52]	; (800549c <MX_USART3_UART_Init+0x90>)
 8005468:	f00b fbf7 	bl	8010c5a <HAL_UARTEx_SetTxFifoThreshold>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d001      	beq.n	8005476 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8005472:	f000 f91f 	bl	80056b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005476:	2100      	movs	r1, #0
 8005478:	4808      	ldr	r0, [pc, #32]	; (800549c <MX_USART3_UART_Init+0x90>)
 800547a:	f00b fc2c 	bl	8010cd6 <HAL_UARTEx_SetRxFifoThreshold>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d001      	beq.n	8005488 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8005484:	f000 f916 	bl	80056b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8005488:	4804      	ldr	r0, [pc, #16]	; (800549c <MX_USART3_UART_Init+0x90>)
 800548a:	f00b fbad 	bl	8010be8 <HAL_UARTEx_DisableFifoMode>
 800548e:	4603      	mov	r3, r0
 8005490:	2b00      	cmp	r3, #0
 8005492:	d001      	beq.n	8005498 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8005494:	f000 f90e 	bl	80056b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005498:	bf00      	nop
 800549a:	bd80      	pop	{r7, pc}
 800549c:	24000790 	.word	0x24000790
 80054a0:	40004800 	.word	0x40004800

080054a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80054aa:	4b15      	ldr	r3, [pc, #84]	; (8005500 <MX_DMA_Init+0x5c>)
 80054ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80054b0:	4a13      	ldr	r2, [pc, #76]	; (8005500 <MX_DMA_Init+0x5c>)
 80054b2:	f043 0301 	orr.w	r3, r3, #1
 80054b6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80054ba:	4b11      	ldr	r3, [pc, #68]	; (8005500 <MX_DMA_Init+0x5c>)
 80054bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80054c0:	f003 0301 	and.w	r3, r3, #1
 80054c4:	607b      	str	r3, [r7, #4]
 80054c6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80054c8:	2200      	movs	r2, #0
 80054ca:	2100      	movs	r1, #0
 80054cc:	200b      	movs	r0, #11
 80054ce:	f001 ffc0 	bl	8007452 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80054d2:	200b      	movs	r0, #11
 80054d4:	f001 ffd7 	bl	8007486 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80054d8:	2200      	movs	r2, #0
 80054da:	2100      	movs	r1, #0
 80054dc:	200c      	movs	r0, #12
 80054de:	f001 ffb8 	bl	8007452 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80054e2:	200c      	movs	r0, #12
 80054e4:	f001 ffcf 	bl	8007486 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80054e8:	2200      	movs	r2, #0
 80054ea:	2100      	movs	r1, #0
 80054ec:	200d      	movs	r0, #13
 80054ee:	f001 ffb0 	bl	8007452 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80054f2:	200d      	movs	r0, #13
 80054f4:	f001 ffc7 	bl	8007486 <HAL_NVIC_EnableIRQ>

}
 80054f8:	bf00      	nop
 80054fa:	3708      	adds	r7, #8
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	58024400 	.word	0x58024400

08005504 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b08c      	sub	sp, #48	; 0x30
 8005508:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800550a:	f107 031c 	add.w	r3, r7, #28
 800550e:	2200      	movs	r2, #0
 8005510:	601a      	str	r2, [r3, #0]
 8005512:	605a      	str	r2, [r3, #4]
 8005514:	609a      	str	r2, [r3, #8]
 8005516:	60da      	str	r2, [r3, #12]
 8005518:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800551a:	4b61      	ldr	r3, [pc, #388]	; (80056a0 <MX_GPIO_Init+0x19c>)
 800551c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005520:	4a5f      	ldr	r2, [pc, #380]	; (80056a0 <MX_GPIO_Init+0x19c>)
 8005522:	f043 0304 	orr.w	r3, r3, #4
 8005526:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800552a:	4b5d      	ldr	r3, [pc, #372]	; (80056a0 <MX_GPIO_Init+0x19c>)
 800552c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005530:	f003 0304 	and.w	r3, r3, #4
 8005534:	61bb      	str	r3, [r7, #24]
 8005536:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005538:	4b59      	ldr	r3, [pc, #356]	; (80056a0 <MX_GPIO_Init+0x19c>)
 800553a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800553e:	4a58      	ldr	r2, [pc, #352]	; (80056a0 <MX_GPIO_Init+0x19c>)
 8005540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005544:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005548:	4b55      	ldr	r3, [pc, #340]	; (80056a0 <MX_GPIO_Init+0x19c>)
 800554a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800554e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005552:	617b      	str	r3, [r7, #20]
 8005554:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005556:	4b52      	ldr	r3, [pc, #328]	; (80056a0 <MX_GPIO_Init+0x19c>)
 8005558:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800555c:	4a50      	ldr	r2, [pc, #320]	; (80056a0 <MX_GPIO_Init+0x19c>)
 800555e:	f043 0301 	orr.w	r3, r3, #1
 8005562:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005566:	4b4e      	ldr	r3, [pc, #312]	; (80056a0 <MX_GPIO_Init+0x19c>)
 8005568:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800556c:	f003 0301 	and.w	r3, r3, #1
 8005570:	613b      	str	r3, [r7, #16]
 8005572:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005574:	4b4a      	ldr	r3, [pc, #296]	; (80056a0 <MX_GPIO_Init+0x19c>)
 8005576:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800557a:	4a49      	ldr	r2, [pc, #292]	; (80056a0 <MX_GPIO_Init+0x19c>)
 800557c:	f043 0302 	orr.w	r3, r3, #2
 8005580:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005584:	4b46      	ldr	r3, [pc, #280]	; (80056a0 <MX_GPIO_Init+0x19c>)
 8005586:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800558a:	f003 0302 	and.w	r3, r3, #2
 800558e:	60fb      	str	r3, [r7, #12]
 8005590:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005592:	4b43      	ldr	r3, [pc, #268]	; (80056a0 <MX_GPIO_Init+0x19c>)
 8005594:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005598:	4a41      	ldr	r2, [pc, #260]	; (80056a0 <MX_GPIO_Init+0x19c>)
 800559a:	f043 0310 	orr.w	r3, r3, #16
 800559e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80055a2:	4b3f      	ldr	r3, [pc, #252]	; (80056a0 <MX_GPIO_Init+0x19c>)
 80055a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80055a8:	f003 0310 	and.w	r3, r3, #16
 80055ac:	60bb      	str	r3, [r7, #8]
 80055ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80055b0:	4b3b      	ldr	r3, [pc, #236]	; (80056a0 <MX_GPIO_Init+0x19c>)
 80055b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80055b6:	4a3a      	ldr	r2, [pc, #232]	; (80056a0 <MX_GPIO_Init+0x19c>)
 80055b8:	f043 0308 	orr.w	r3, r3, #8
 80055bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80055c0:	4b37      	ldr	r3, [pc, #220]	; (80056a0 <MX_GPIO_Init+0x19c>)
 80055c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80055c6:	f003 0308 	and.w	r3, r3, #8
 80055ca:	607b      	str	r3, [r7, #4]
 80055cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80055ce:	2200      	movs	r2, #0
 80055d0:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 80055d4:	4833      	ldr	r0, [pc, #204]	; (80056a4 <MX_GPIO_Init+0x1a0>)
 80055d6:	f006 f95b 	bl	800b890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80055da:	2200      	movs	r2, #0
 80055dc:	2110      	movs	r1, #16
 80055de:	4832      	ldr	r0, [pc, #200]	; (80056a8 <MX_GPIO_Init+0x1a4>)
 80055e0:	f006 f956 	bl	800b890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80055e4:	2200      	movs	r2, #0
 80055e6:	2138      	movs	r1, #56	; 0x38
 80055e8:	4830      	ldr	r0, [pc, #192]	; (80056ac <MX_GPIO_Init+0x1a8>)
 80055ea:	f006 f951 	bl	800b890 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_12;
 80055ee:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80055f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80055f4:	2301      	movs	r3, #1
 80055f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055f8:	2300      	movs	r3, #0
 80055fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055fc:	2300      	movs	r3, #0
 80055fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005600:	f107 031c 	add.w	r3, r7, #28
 8005604:	4619      	mov	r1, r3
 8005606:	4827      	ldr	r0, [pc, #156]	; (80056a4 <MX_GPIO_Init+0x1a0>)
 8005608:	f005 ff92 	bl	800b530 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800560c:	2310      	movs	r3, #16
 800560e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005610:	2301      	movs	r3, #1
 8005612:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005614:	2300      	movs	r3, #0
 8005616:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005618:	2300      	movs	r3, #0
 800561a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800561c:	f107 031c 	add.w	r3, r7, #28
 8005620:	4619      	mov	r1, r3
 8005622:	4821      	ldr	r0, [pc, #132]	; (80056a8 <MX_GPIO_Init+0x1a4>)
 8005624:	f005 ff84 	bl	800b530 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005628:	2330      	movs	r3, #48	; 0x30
 800562a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800562c:	2300      	movs	r3, #0
 800562e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005630:	2300      	movs	r3, #0
 8005632:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005634:	f107 031c 	add.w	r3, r7, #28
 8005638:	4619      	mov	r1, r3
 800563a:	481a      	ldr	r0, [pc, #104]	; (80056a4 <MX_GPIO_Init+0x1a0>)
 800563c:	f005 ff78 	bl	800b530 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005640:	2301      	movs	r3, #1
 8005642:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005644:	2300      	movs	r3, #0
 8005646:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005648:	2300      	movs	r3, #0
 800564a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800564c:	f107 031c 	add.w	r3, r7, #28
 8005650:	4619      	mov	r1, r3
 8005652:	4817      	ldr	r0, [pc, #92]	; (80056b0 <MX_GPIO_Init+0x1ac>)
 8005654:	f005 ff6c 	bl	800b530 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8005658:	2338      	movs	r3, #56	; 0x38
 800565a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800565c:	2301      	movs	r3, #1
 800565e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005660:	2300      	movs	r3, #0
 8005662:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005664:	2300      	movs	r3, #0
 8005666:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005668:	f107 031c 	add.w	r3, r7, #28
 800566c:	4619      	mov	r1, r3
 800566e:	480f      	ldr	r0, [pc, #60]	; (80056ac <MX_GPIO_Init+0x1a8>)
 8005670:	f005 ff5e 	bl	800b530 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8005674:	f44f 7310 	mov.w	r3, #576	; 0x240
 8005678:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800567a:	2312      	movs	r3, #18
 800567c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800567e:	2300      	movs	r3, #0
 8005680:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005682:	2300      	movs	r3, #0
 8005684:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005686:	2304      	movs	r3, #4
 8005688:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800568a:	f107 031c 	add.w	r3, r7, #28
 800568e:	4619      	mov	r1, r3
 8005690:	4807      	ldr	r0, [pc, #28]	; (80056b0 <MX_GPIO_Init+0x1ac>)
 8005692:	f005 ff4d 	bl	800b530 <HAL_GPIO_Init>

}
 8005696:	bf00      	nop
 8005698:	3730      	adds	r7, #48	; 0x30
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop
 80056a0:	58024400 	.word	0x58024400
 80056a4:	58020800 	.word	0x58020800
 80056a8:	58020000 	.word	0x58020000
 80056ac:	58020c00 	.word	0x58020c00
 80056b0:	58020400 	.word	0x58020400

080056b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80056b4:	b480      	push	{r7}
 80056b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80056b8:	b672      	cpsid	i
}
 80056ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80056bc:	e7fe      	b.n	80056bc <Error_Handler+0x8>
	...

080056c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056c6:	4b0a      	ldr	r3, [pc, #40]	; (80056f0 <HAL_MspInit+0x30>)
 80056c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80056cc:	4a08      	ldr	r2, [pc, #32]	; (80056f0 <HAL_MspInit+0x30>)
 80056ce:	f043 0302 	orr.w	r3, r3, #2
 80056d2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80056d6:	4b06      	ldr	r3, [pc, #24]	; (80056f0 <HAL_MspInit+0x30>)
 80056d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80056dc:	f003 0302 	and.w	r3, r3, #2
 80056e0:	607b      	str	r3, [r7, #4]
 80056e2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80056e4:	bf00      	nop
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr
 80056f0:	58024400 	.word	0x58024400

080056f4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b0ba      	sub	sp, #232	; 0xe8
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056fc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005700:	2200      	movs	r2, #0
 8005702:	601a      	str	r2, [r3, #0]
 8005704:	605a      	str	r2, [r3, #4]
 8005706:	609a      	str	r2, [r3, #8]
 8005708:	60da      	str	r2, [r3, #12]
 800570a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800570c:	f107 0318 	add.w	r3, r7, #24
 8005710:	22bc      	movs	r2, #188	; 0xbc
 8005712:	2100      	movs	r1, #0
 8005714:	4618      	mov	r0, r3
 8005716:	f00c fab5 	bl	8011c84 <memset>
  if(hfdcan->Instance==FDCAN1)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a5c      	ldr	r2, [pc, #368]	; (8005890 <HAL_FDCAN_MspInit+0x19c>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d155      	bne.n	80057d0 <HAL_FDCAN_MspInit+0xdc>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8005724:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005728:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800572a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800572e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005732:	f107 0318 	add.w	r3, r7, #24
 8005736:	4618      	mov	r0, r3
 8005738:	f007 f8b8 	bl	800c8ac <HAL_RCCEx_PeriphCLKConfig>
 800573c:	4603      	mov	r3, r0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d001      	beq.n	8005746 <HAL_FDCAN_MspInit+0x52>
    {
      Error_Handler();
 8005742:	f7ff ffb7 	bl	80056b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8005746:	4b53      	ldr	r3, [pc, #332]	; (8005894 <HAL_FDCAN_MspInit+0x1a0>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	3301      	adds	r3, #1
 800574c:	4a51      	ldr	r2, [pc, #324]	; (8005894 <HAL_FDCAN_MspInit+0x1a0>)
 800574e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8005750:	4b50      	ldr	r3, [pc, #320]	; (8005894 <HAL_FDCAN_MspInit+0x1a0>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2b01      	cmp	r3, #1
 8005756:	d10e      	bne.n	8005776 <HAL_FDCAN_MspInit+0x82>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8005758:	4b4f      	ldr	r3, [pc, #316]	; (8005898 <HAL_FDCAN_MspInit+0x1a4>)
 800575a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800575e:	4a4e      	ldr	r2, [pc, #312]	; (8005898 <HAL_FDCAN_MspInit+0x1a4>)
 8005760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005764:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8005768:	4b4b      	ldr	r3, [pc, #300]	; (8005898 <HAL_FDCAN_MspInit+0x1a4>)
 800576a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800576e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005772:	617b      	str	r3, [r7, #20]
 8005774:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005776:	4b48      	ldr	r3, [pc, #288]	; (8005898 <HAL_FDCAN_MspInit+0x1a4>)
 8005778:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800577c:	4a46      	ldr	r2, [pc, #280]	; (8005898 <HAL_FDCAN_MspInit+0x1a4>)
 800577e:	f043 0308 	orr.w	r3, r3, #8
 8005782:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005786:	4b44      	ldr	r3, [pc, #272]	; (8005898 <HAL_FDCAN_MspInit+0x1a4>)
 8005788:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800578c:	f003 0308 	and.w	r3, r3, #8
 8005790:	613b      	str	r3, [r7, #16]
 8005792:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005794:	2303      	movs	r3, #3
 8005796:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800579a:	2302      	movs	r3, #2
 800579c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057a0:	2300      	movs	r3, #0
 80057a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057a6:	2300      	movs	r3, #0
 80057a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80057ac:	2309      	movs	r3, #9
 80057ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80057b2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80057b6:	4619      	mov	r1, r3
 80057b8:	4838      	ldr	r0, [pc, #224]	; (800589c <HAL_FDCAN_MspInit+0x1a8>)
 80057ba:	f005 feb9 	bl	800b530 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80057be:	2200      	movs	r2, #0
 80057c0:	2100      	movs	r1, #0
 80057c2:	2013      	movs	r0, #19
 80057c4:	f001 fe45 	bl	8007452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80057c8:	2013      	movs	r0, #19
 80057ca:	f001 fe5c 	bl	8007486 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 80057ce:	e05a      	b.n	8005886 <HAL_FDCAN_MspInit+0x192>
  else if(hfdcan->Instance==FDCAN2)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a32      	ldr	r2, [pc, #200]	; (80058a0 <HAL_FDCAN_MspInit+0x1ac>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d155      	bne.n	8005886 <HAL_FDCAN_MspInit+0x192>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80057da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057de:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80057e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80057e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80057e8:	f107 0318 	add.w	r3, r7, #24
 80057ec:	4618      	mov	r0, r3
 80057ee:	f007 f85d 	bl	800c8ac <HAL_RCCEx_PeriphCLKConfig>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d001      	beq.n	80057fc <HAL_FDCAN_MspInit+0x108>
      Error_Handler();
 80057f8:	f7ff ff5c 	bl	80056b4 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80057fc:	4b25      	ldr	r3, [pc, #148]	; (8005894 <HAL_FDCAN_MspInit+0x1a0>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	3301      	adds	r3, #1
 8005802:	4a24      	ldr	r2, [pc, #144]	; (8005894 <HAL_FDCAN_MspInit+0x1a0>)
 8005804:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8005806:	4b23      	ldr	r3, [pc, #140]	; (8005894 <HAL_FDCAN_MspInit+0x1a0>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2b01      	cmp	r3, #1
 800580c:	d10e      	bne.n	800582c <HAL_FDCAN_MspInit+0x138>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800580e:	4b22      	ldr	r3, [pc, #136]	; (8005898 <HAL_FDCAN_MspInit+0x1a4>)
 8005810:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8005814:	4a20      	ldr	r2, [pc, #128]	; (8005898 <HAL_FDCAN_MspInit+0x1a4>)
 8005816:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800581a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800581e:	4b1e      	ldr	r3, [pc, #120]	; (8005898 <HAL_FDCAN_MspInit+0x1a4>)
 8005820:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8005824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005828:	60fb      	str	r3, [r7, #12]
 800582a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800582c:	4b1a      	ldr	r3, [pc, #104]	; (8005898 <HAL_FDCAN_MspInit+0x1a4>)
 800582e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005832:	4a19      	ldr	r2, [pc, #100]	; (8005898 <HAL_FDCAN_MspInit+0x1a4>)
 8005834:	f043 0302 	orr.w	r3, r3, #2
 8005838:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800583c:	4b16      	ldr	r3, [pc, #88]	; (8005898 <HAL_FDCAN_MspInit+0x1a4>)
 800583e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005842:	f003 0302 	and.w	r3, r3, #2
 8005846:	60bb      	str	r3, [r7, #8]
 8005848:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800584a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800584e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005852:	2302      	movs	r3, #2
 8005854:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005858:	2300      	movs	r3, #0
 800585a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800585e:	2300      	movs	r3, #0
 8005860:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8005864:	2309      	movs	r3, #9
 8005866:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800586a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800586e:	4619      	mov	r1, r3
 8005870:	480c      	ldr	r0, [pc, #48]	; (80058a4 <HAL_FDCAN_MspInit+0x1b0>)
 8005872:	f005 fe5d 	bl	800b530 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
 8005876:	2200      	movs	r2, #0
 8005878:	2100      	movs	r1, #0
 800587a:	2014      	movs	r0, #20
 800587c:	f001 fde9 	bl	8007452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8005880:	2014      	movs	r0, #20
 8005882:	f001 fe00 	bl	8007486 <HAL_NVIC_EnableIRQ>
}
 8005886:	bf00      	nop
 8005888:	37e8      	adds	r7, #232	; 0xe8
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	4000a000 	.word	0x4000a000
 8005894:	24000988 	.word	0x24000988
 8005898:	58024400 	.word	0x58024400
 800589c:	58020c00 	.word	0x58020c00
 80058a0:	4000a400 	.word	0x4000a400
 80058a4:	58020400 	.word	0x58020400

080058a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b0b8      	sub	sp, #224	; 0xe0
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058b0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80058b4:	2200      	movs	r2, #0
 80058b6:	601a      	str	r2, [r3, #0]
 80058b8:	605a      	str	r2, [r3, #4]
 80058ba:	609a      	str	r2, [r3, #8]
 80058bc:	60da      	str	r2, [r3, #12]
 80058be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80058c0:	f107 0310 	add.w	r3, r7, #16
 80058c4:	22bc      	movs	r2, #188	; 0xbc
 80058c6:	2100      	movs	r1, #0
 80058c8:	4618      	mov	r0, r3
 80058ca:	f00c f9db 	bl	8011c84 <memset>
  if(hspi->Instance==SPI1)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a2d      	ldr	r2, [pc, #180]	; (8005988 <HAL_SPI_MspInit+0xe0>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d152      	bne.n	800597e <HAL_SPI_MspInit+0xd6>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80058d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058dc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 32;
 80058de:	2320      	movs	r3, #32
 80058e0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 240;
 80058e2:	23f0      	movs	r3, #240	; 0xf0
 80058e4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 80058e6:	2304      	movs	r3, #4
 80058e8:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80058ea:	2302      	movs	r3, #2
 80058ec:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80058ee:	2302      	movs	r3, #2
 80058f0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 80058f2:	2300      	movs	r3, #0
 80058f4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80058f6:	2300      	movs	r3, #0
 80058f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80058fa:	2300      	movs	r3, #0
 80058fc:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 80058fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005902:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005904:	f107 0310 	add.w	r3, r7, #16
 8005908:	4618      	mov	r0, r3
 800590a:	f006 ffcf 	bl	800c8ac <HAL_RCCEx_PeriphCLKConfig>
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d001      	beq.n	8005918 <HAL_SPI_MspInit+0x70>
    {
      Error_Handler();
 8005914:	f7ff fece 	bl	80056b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005918:	4b1c      	ldr	r3, [pc, #112]	; (800598c <HAL_SPI_MspInit+0xe4>)
 800591a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800591e:	4a1b      	ldr	r2, [pc, #108]	; (800598c <HAL_SPI_MspInit+0xe4>)
 8005920:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005924:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005928:	4b18      	ldr	r3, [pc, #96]	; (800598c <HAL_SPI_MspInit+0xe4>)
 800592a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800592e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005932:	60fb      	str	r3, [r7, #12]
 8005934:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005936:	4b15      	ldr	r3, [pc, #84]	; (800598c <HAL_SPI_MspInit+0xe4>)
 8005938:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800593c:	4a13      	ldr	r2, [pc, #76]	; (800598c <HAL_SPI_MspInit+0xe4>)
 800593e:	f043 0301 	orr.w	r3, r3, #1
 8005942:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005946:	4b11      	ldr	r3, [pc, #68]	; (800598c <HAL_SPI_MspInit+0xe4>)
 8005948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800594c:	f003 0301 	and.w	r3, r3, #1
 8005950:	60bb      	str	r3, [r7, #8]
 8005952:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005954:	23e0      	movs	r3, #224	; 0xe0
 8005956:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800595a:	2302      	movs	r3, #2
 800595c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005960:	2300      	movs	r3, #0
 8005962:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005966:	2300      	movs	r3, #0
 8005968:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800596c:	2305      	movs	r3, #5
 800596e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005972:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005976:	4619      	mov	r1, r3
 8005978:	4805      	ldr	r0, [pc, #20]	; (8005990 <HAL_SPI_MspInit+0xe8>)
 800597a:	f005 fdd9 	bl	800b530 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800597e:	bf00      	nop
 8005980:	37e0      	adds	r7, #224	; 0xe0
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	40013000 	.word	0x40013000
 800598c:	58024400 	.word	0x58024400
 8005990:	58020000 	.word	0x58020000

08005994 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b092      	sub	sp, #72	; 0x48
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800599c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80059a0:	2200      	movs	r2, #0
 80059a2:	601a      	str	r2, [r3, #0]
 80059a4:	605a      	str	r2, [r3, #4]
 80059a6:	609a      	str	r2, [r3, #8]
 80059a8:	60da      	str	r2, [r3, #12]
 80059aa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a87      	ldr	r2, [pc, #540]	; (8005bd0 <HAL_TIM_Encoder_MspInit+0x23c>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d12f      	bne.n	8005a16 <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80059b6:	4b87      	ldr	r3, [pc, #540]	; (8005bd4 <HAL_TIM_Encoder_MspInit+0x240>)
 80059b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80059bc:	4a85      	ldr	r2, [pc, #532]	; (8005bd4 <HAL_TIM_Encoder_MspInit+0x240>)
 80059be:	f043 0301 	orr.w	r3, r3, #1
 80059c2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80059c6:	4b83      	ldr	r3, [pc, #524]	; (8005bd4 <HAL_TIM_Encoder_MspInit+0x240>)
 80059c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80059cc:	f003 0301 	and.w	r3, r3, #1
 80059d0:	633b      	str	r3, [r7, #48]	; 0x30
 80059d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80059d4:	4b7f      	ldr	r3, [pc, #508]	; (8005bd4 <HAL_TIM_Encoder_MspInit+0x240>)
 80059d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059da:	4a7e      	ldr	r2, [pc, #504]	; (8005bd4 <HAL_TIM_Encoder_MspInit+0x240>)
 80059dc:	f043 0310 	orr.w	r3, r3, #16
 80059e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80059e4:	4b7b      	ldr	r3, [pc, #492]	; (8005bd4 <HAL_TIM_Encoder_MspInit+0x240>)
 80059e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059ea:	f003 0310 	and.w	r3, r3, #16
 80059ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80059f2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80059f6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059f8:	2302      	movs	r3, #2
 80059fa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059fc:	2300      	movs	r3, #0
 80059fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a00:	2300      	movs	r3, #0
 8005a02:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005a04:	2301      	movs	r3, #1
 8005a06:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005a08:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	4872      	ldr	r0, [pc, #456]	; (8005bd8 <HAL_TIM_Encoder_MspInit+0x244>)
 8005a10:	f005 fd8e 	bl	800b530 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8005a14:	e0d7      	b.n	8005bc6 <HAL_TIM_Encoder_MspInit+0x232>
  else if(htim_encoder->Instance==TIM2)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a1e:	d12e      	bne.n	8005a7e <HAL_TIM_Encoder_MspInit+0xea>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005a20:	4b6c      	ldr	r3, [pc, #432]	; (8005bd4 <HAL_TIM_Encoder_MspInit+0x240>)
 8005a22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005a26:	4a6b      	ldr	r2, [pc, #428]	; (8005bd4 <HAL_TIM_Encoder_MspInit+0x240>)
 8005a28:	f043 0301 	orr.w	r3, r3, #1
 8005a2c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005a30:	4b68      	ldr	r3, [pc, #416]	; (8005bd4 <HAL_TIM_Encoder_MspInit+0x240>)
 8005a32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005a36:	f003 0301 	and.w	r3, r3, #1
 8005a3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a3e:	4b65      	ldr	r3, [pc, #404]	; (8005bd4 <HAL_TIM_Encoder_MspInit+0x240>)
 8005a40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a44:	4a63      	ldr	r2, [pc, #396]	; (8005bd4 <HAL_TIM_Encoder_MspInit+0x240>)
 8005a46:	f043 0301 	orr.w	r3, r3, #1
 8005a4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005a4e:	4b61      	ldr	r3, [pc, #388]	; (8005bd4 <HAL_TIM_Encoder_MspInit+0x240>)
 8005a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a54:	f003 0301 	and.w	r3, r3, #1
 8005a58:	627b      	str	r3, [r7, #36]	; 0x24
 8005a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a60:	2302      	movs	r3, #2
 8005a62:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a64:	2300      	movs	r3, #0
 8005a66:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a70:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005a74:	4619      	mov	r1, r3
 8005a76:	4859      	ldr	r0, [pc, #356]	; (8005bdc <HAL_TIM_Encoder_MspInit+0x248>)
 8005a78:	f005 fd5a 	bl	800b530 <HAL_GPIO_Init>
}
 8005a7c:	e0a3      	b.n	8005bc6 <HAL_TIM_Encoder_MspInit+0x232>
  else if(htim_encoder->Instance==TIM3)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a57      	ldr	r2, [pc, #348]	; (8005be0 <HAL_TIM_Encoder_MspInit+0x24c>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d12e      	bne.n	8005ae6 <HAL_TIM_Encoder_MspInit+0x152>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005a88:	4b52      	ldr	r3, [pc, #328]	; (8005bd4 <HAL_TIM_Encoder_MspInit+0x240>)
 8005a8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005a8e:	4a51      	ldr	r2, [pc, #324]	; (8005bd4 <HAL_TIM_Encoder_MspInit+0x240>)
 8005a90:	f043 0302 	orr.w	r3, r3, #2
 8005a94:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005a98:	4b4e      	ldr	r3, [pc, #312]	; (8005bd4 <HAL_TIM_Encoder_MspInit+0x240>)
 8005a9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005a9e:	f003 0302 	and.w	r3, r3, #2
 8005aa2:	623b      	str	r3, [r7, #32]
 8005aa4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005aa6:	4b4b      	ldr	r3, [pc, #300]	; (8005bd4 <HAL_TIM_Encoder_MspInit+0x240>)
 8005aa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005aac:	4a49      	ldr	r2, [pc, #292]	; (8005bd4 <HAL_TIM_Encoder_MspInit+0x240>)
 8005aae:	f043 0302 	orr.w	r3, r3, #2
 8005ab2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005ab6:	4b47      	ldr	r3, [pc, #284]	; (8005bd4 <HAL_TIM_Encoder_MspInit+0x240>)
 8005ab8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005abc:	f003 0302 	and.w	r3, r3, #2
 8005ac0:	61fb      	str	r3, [r7, #28]
 8005ac2:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005ac4:	2330      	movs	r3, #48	; 0x30
 8005ac6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ac8:	2302      	movs	r3, #2
 8005aca:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005acc:	2300      	movs	r3, #0
 8005ace:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005ad4:	2302      	movs	r3, #2
 8005ad6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ad8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005adc:	4619      	mov	r1, r3
 8005ade:	4841      	ldr	r0, [pc, #260]	; (8005be4 <HAL_TIM_Encoder_MspInit+0x250>)
 8005ae0:	f005 fd26 	bl	800b530 <HAL_GPIO_Init>
}
 8005ae4:	e06f      	b.n	8005bc6 <HAL_TIM_Encoder_MspInit+0x232>
  else if(htim_encoder->Instance==TIM4)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a3f      	ldr	r2, [pc, #252]	; (8005be8 <HAL_TIM_Encoder_MspInit+0x254>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d12f      	bne.n	8005b50 <HAL_TIM_Encoder_MspInit+0x1bc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005af0:	4b38      	ldr	r3, [pc, #224]	; (8005bd4 <HAL_TIM_Encoder_MspInit+0x240>)
 8005af2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005af6:	4a37      	ldr	r2, [pc, #220]	; (8005bd4 <HAL_TIM_Encoder_MspInit+0x240>)
 8005af8:	f043 0304 	orr.w	r3, r3, #4
 8005afc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005b00:	4b34      	ldr	r3, [pc, #208]	; (8005bd4 <HAL_TIM_Encoder_MspInit+0x240>)
 8005b02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005b06:	f003 0304 	and.w	r3, r3, #4
 8005b0a:	61bb      	str	r3, [r7, #24]
 8005b0c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005b0e:	4b31      	ldr	r3, [pc, #196]	; (8005bd4 <HAL_TIM_Encoder_MspInit+0x240>)
 8005b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005b14:	4a2f      	ldr	r2, [pc, #188]	; (8005bd4 <HAL_TIM_Encoder_MspInit+0x240>)
 8005b16:	f043 0308 	orr.w	r3, r3, #8
 8005b1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005b1e:	4b2d      	ldr	r3, [pc, #180]	; (8005bd4 <HAL_TIM_Encoder_MspInit+0x240>)
 8005b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005b24:	f003 0308 	and.w	r3, r3, #8
 8005b28:	617b      	str	r3, [r7, #20]
 8005b2a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8005b2c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005b30:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b32:	2302      	movs	r3, #2
 8005b34:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b36:	2300      	movs	r3, #0
 8005b38:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005b3e:	2302      	movs	r3, #2
 8005b40:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005b42:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005b46:	4619      	mov	r1, r3
 8005b48:	4828      	ldr	r0, [pc, #160]	; (8005bec <HAL_TIM_Encoder_MspInit+0x258>)
 8005b4a:	f005 fcf1 	bl	800b530 <HAL_GPIO_Init>
}
 8005b4e:	e03a      	b.n	8005bc6 <HAL_TIM_Encoder_MspInit+0x232>
  else if(htim_encoder->Instance==TIM8)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a26      	ldr	r2, [pc, #152]	; (8005bf0 <HAL_TIM_Encoder_MspInit+0x25c>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d135      	bne.n	8005bc6 <HAL_TIM_Encoder_MspInit+0x232>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005b5a:	4b1e      	ldr	r3, [pc, #120]	; (8005bd4 <HAL_TIM_Encoder_MspInit+0x240>)
 8005b5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005b60:	4a1c      	ldr	r2, [pc, #112]	; (8005bd4 <HAL_TIM_Encoder_MspInit+0x240>)
 8005b62:	f043 0302 	orr.w	r3, r3, #2
 8005b66:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005b6a:	4b1a      	ldr	r3, [pc, #104]	; (8005bd4 <HAL_TIM_Encoder_MspInit+0x240>)
 8005b6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005b70:	f003 0302 	and.w	r3, r3, #2
 8005b74:	613b      	str	r3, [r7, #16]
 8005b76:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b78:	4b16      	ldr	r3, [pc, #88]	; (8005bd4 <HAL_TIM_Encoder_MspInit+0x240>)
 8005b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005b7e:	4a15      	ldr	r2, [pc, #84]	; (8005bd4 <HAL_TIM_Encoder_MspInit+0x240>)
 8005b80:	f043 0304 	orr.w	r3, r3, #4
 8005b84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005b88:	4b12      	ldr	r3, [pc, #72]	; (8005bd4 <HAL_TIM_Encoder_MspInit+0x240>)
 8005b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005b8e:	f003 0304 	and.w	r3, r3, #4
 8005b92:	60fb      	str	r3, [r7, #12]
 8005b94:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005b96:	23c0      	movs	r3, #192	; 0xc0
 8005b98:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b9a:	2302      	movs	r3, #2
 8005b9c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005baa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005bae:	4619      	mov	r1, r3
 8005bb0:	4810      	ldr	r0, [pc, #64]	; (8005bf4 <HAL_TIM_Encoder_MspInit+0x260>)
 8005bb2:	f005 fcbd 	bl	800b530 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	2101      	movs	r1, #1
 8005bba:	202c      	movs	r0, #44	; 0x2c
 8005bbc:	f001 fc49 	bl	8007452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8005bc0:	202c      	movs	r0, #44	; 0x2c
 8005bc2:	f001 fc60 	bl	8007486 <HAL_NVIC_EnableIRQ>
}
 8005bc6:	bf00      	nop
 8005bc8:	3748      	adds	r7, #72	; 0x48
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	40010000 	.word	0x40010000
 8005bd4:	58024400 	.word	0x58024400
 8005bd8:	58021000 	.word	0x58021000
 8005bdc:	58020000 	.word	0x58020000
 8005be0:	40000400 	.word	0x40000400
 8005be4:	58020400 	.word	0x58020400
 8005be8:	40000800 	.word	0x40000800
 8005bec:	58020c00 	.word	0x58020c00
 8005bf0:	40010400 	.word	0x40010400
 8005bf4:	58020800 	.word	0x58020800

08005bf8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b086      	sub	sp, #24
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a3a      	ldr	r2, [pc, #232]	; (8005cf0 <HAL_TIM_Base_MspInit+0xf8>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d117      	bne.n	8005c3a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005c0a:	4b3a      	ldr	r3, [pc, #232]	; (8005cf4 <HAL_TIM_Base_MspInit+0xfc>)
 8005c0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005c10:	4a38      	ldr	r2, [pc, #224]	; (8005cf4 <HAL_TIM_Base_MspInit+0xfc>)
 8005c12:	f043 0308 	orr.w	r3, r3, #8
 8005c16:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005c1a:	4b36      	ldr	r3, [pc, #216]	; (8005cf4 <HAL_TIM_Base_MspInit+0xfc>)
 8005c1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005c20:	f003 0308 	and.w	r3, r3, #8
 8005c24:	617b      	str	r3, [r7, #20]
 8005c26:	697b      	ldr	r3, [r7, #20]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 8005c28:	2200      	movs	r2, #0
 8005c2a:	2101      	movs	r1, #1
 8005c2c:	2032      	movs	r0, #50	; 0x32
 8005c2e:	f001 fc10 	bl	8007452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8005c32:	2032      	movs	r0, #50	; 0x32
 8005c34:	f001 fc27 	bl	8007486 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8005c38:	e055      	b.n	8005ce6 <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM6)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a2e      	ldr	r2, [pc, #184]	; (8005cf8 <HAL_TIM_Base_MspInit+0x100>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d117      	bne.n	8005c74 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005c44:	4b2b      	ldr	r3, [pc, #172]	; (8005cf4 <HAL_TIM_Base_MspInit+0xfc>)
 8005c46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005c4a:	4a2a      	ldr	r2, [pc, #168]	; (8005cf4 <HAL_TIM_Base_MspInit+0xfc>)
 8005c4c:	f043 0310 	orr.w	r3, r3, #16
 8005c50:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005c54:	4b27      	ldr	r3, [pc, #156]	; (8005cf4 <HAL_TIM_Base_MspInit+0xfc>)
 8005c56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005c5a:	f003 0310 	and.w	r3, r3, #16
 8005c5e:	613b      	str	r3, [r7, #16]
 8005c60:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8005c62:	2200      	movs	r2, #0
 8005c64:	2100      	movs	r1, #0
 8005c66:	2036      	movs	r0, #54	; 0x36
 8005c68:	f001 fbf3 	bl	8007452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005c6c:	2036      	movs	r0, #54	; 0x36
 8005c6e:	f001 fc0a 	bl	8007486 <HAL_NVIC_EnableIRQ>
}
 8005c72:	e038      	b.n	8005ce6 <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM7)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a20      	ldr	r2, [pc, #128]	; (8005cfc <HAL_TIM_Base_MspInit+0x104>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d117      	bne.n	8005cae <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005c7e:	4b1d      	ldr	r3, [pc, #116]	; (8005cf4 <HAL_TIM_Base_MspInit+0xfc>)
 8005c80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005c84:	4a1b      	ldr	r2, [pc, #108]	; (8005cf4 <HAL_TIM_Base_MspInit+0xfc>)
 8005c86:	f043 0320 	orr.w	r3, r3, #32
 8005c8a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005c8e:	4b19      	ldr	r3, [pc, #100]	; (8005cf4 <HAL_TIM_Base_MspInit+0xfc>)
 8005c90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005c94:	f003 0320 	and.w	r3, r3, #32
 8005c98:	60fb      	str	r3, [r7, #12]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	2100      	movs	r1, #0
 8005ca0:	2037      	movs	r0, #55	; 0x37
 8005ca2:	f001 fbd6 	bl	8007452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005ca6:	2037      	movs	r0, #55	; 0x37
 8005ca8:	f001 fbed 	bl	8007486 <HAL_NVIC_EnableIRQ>
}
 8005cac:	e01b      	b.n	8005ce6 <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM13)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a13      	ldr	r2, [pc, #76]	; (8005d00 <HAL_TIM_Base_MspInit+0x108>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d116      	bne.n	8005ce6 <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8005cb8:	4b0e      	ldr	r3, [pc, #56]	; (8005cf4 <HAL_TIM_Base_MspInit+0xfc>)
 8005cba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005cbe:	4a0d      	ldr	r2, [pc, #52]	; (8005cf4 <HAL_TIM_Base_MspInit+0xfc>)
 8005cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cc4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005cc8:	4b0a      	ldr	r3, [pc, #40]	; (8005cf4 <HAL_TIM_Base_MspInit+0xfc>)
 8005cca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cd2:	60bb      	str	r3, [r7, #8]
 8005cd4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	2101      	movs	r1, #1
 8005cda:	202c      	movs	r0, #44	; 0x2c
 8005cdc:	f001 fbb9 	bl	8007452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8005ce0:	202c      	movs	r0, #44	; 0x2c
 8005ce2:	f001 fbd0 	bl	8007486 <HAL_NVIC_EnableIRQ>
}
 8005ce6:	bf00      	nop
 8005ce8:	3718      	adds	r7, #24
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	40000c00 	.word	0x40000c00
 8005cf4:	58024400 	.word	0x58024400
 8005cf8:	40001000 	.word	0x40001000
 8005cfc:	40001400 	.word	0x40001400
 8005d00:	40001c00 	.word	0x40001c00

08005d04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b0bc      	sub	sp, #240	; 0xf0
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d0c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005d10:	2200      	movs	r2, #0
 8005d12:	601a      	str	r2, [r3, #0]
 8005d14:	605a      	str	r2, [r3, #4]
 8005d16:	609a      	str	r2, [r3, #8]
 8005d18:	60da      	str	r2, [r3, #12]
 8005d1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005d1c:	f107 0320 	add.w	r3, r7, #32
 8005d20:	22bc      	movs	r2, #188	; 0xbc
 8005d22:	2100      	movs	r1, #0
 8005d24:	4618      	mov	r0, r3
 8005d26:	f00b ffad 	bl	8011c84 <memset>
  if(huart->Instance==USART1)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a76      	ldr	r2, [pc, #472]	; (8005f08 <HAL_UART_MspInit+0x204>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d171      	bne.n	8005e18 <HAL_UART_MspInit+0x114>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005d34:	2301      	movs	r3, #1
 8005d36:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005d3e:	f107 0320 	add.w	r3, r7, #32
 8005d42:	4618      	mov	r0, r3
 8005d44:	f006 fdb2 	bl	800c8ac <HAL_RCCEx_PeriphCLKConfig>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d001      	beq.n	8005d52 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8005d4e:	f7ff fcb1 	bl	80056b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005d52:	4b6e      	ldr	r3, [pc, #440]	; (8005f0c <HAL_UART_MspInit+0x208>)
 8005d54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d58:	4a6c      	ldr	r2, [pc, #432]	; (8005f0c <HAL_UART_MspInit+0x208>)
 8005d5a:	f043 0310 	orr.w	r3, r3, #16
 8005d5e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005d62:	4b6a      	ldr	r3, [pc, #424]	; (8005f0c <HAL_UART_MspInit+0x208>)
 8005d64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d68:	f003 0310 	and.w	r3, r3, #16
 8005d6c:	61fb      	str	r3, [r7, #28]
 8005d6e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d70:	4b66      	ldr	r3, [pc, #408]	; (8005f0c <HAL_UART_MspInit+0x208>)
 8005d72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005d76:	4a65      	ldr	r2, [pc, #404]	; (8005f0c <HAL_UART_MspInit+0x208>)
 8005d78:	f043 0301 	orr.w	r3, r3, #1
 8005d7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005d80:	4b62      	ldr	r3, [pc, #392]	; (8005f0c <HAL_UART_MspInit+0x208>)
 8005d82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005d86:	f003 0301 	and.w	r3, r3, #1
 8005d8a:	61bb      	str	r3, [r7, #24]
 8005d8c:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA12     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 8005d8e:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
 8005d92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d96:	2302      	movs	r3, #2
 8005d98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005da2:	2300      	movs	r3, #0
 8005da4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005da8:	2307      	movs	r3, #7
 8005daa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005dae:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005db2:	4619      	mov	r1, r3
 8005db4:	4856      	ldr	r0, [pc, #344]	; (8005f10 <HAL_UART_MspInit+0x20c>)
 8005db6:	f005 fbbb 	bl	800b530 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8005dba:	4b56      	ldr	r3, [pc, #344]	; (8005f14 <HAL_UART_MspInit+0x210>)
 8005dbc:	4a56      	ldr	r2, [pc, #344]	; (8005f18 <HAL_UART_MspInit+0x214>)
 8005dbe:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8005dc0:	4b54      	ldr	r3, [pc, #336]	; (8005f14 <HAL_UART_MspInit+0x210>)
 8005dc2:	2229      	movs	r2, #41	; 0x29
 8005dc4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005dc6:	4b53      	ldr	r3, [pc, #332]	; (8005f14 <HAL_UART_MspInit+0x210>)
 8005dc8:	2200      	movs	r2, #0
 8005dca:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005dcc:	4b51      	ldr	r3, [pc, #324]	; (8005f14 <HAL_UART_MspInit+0x210>)
 8005dce:	2200      	movs	r2, #0
 8005dd0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005dd2:	4b50      	ldr	r3, [pc, #320]	; (8005f14 <HAL_UART_MspInit+0x210>)
 8005dd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005dd8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005dda:	4b4e      	ldr	r3, [pc, #312]	; (8005f14 <HAL_UART_MspInit+0x210>)
 8005ddc:	2200      	movs	r2, #0
 8005dde:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005de0:	4b4c      	ldr	r3, [pc, #304]	; (8005f14 <HAL_UART_MspInit+0x210>)
 8005de2:	2200      	movs	r2, #0
 8005de4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8005de6:	4b4b      	ldr	r3, [pc, #300]	; (8005f14 <HAL_UART_MspInit+0x210>)
 8005de8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005dec:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005dee:	4b49      	ldr	r3, [pc, #292]	; (8005f14 <HAL_UART_MspInit+0x210>)
 8005df0:	2200      	movs	r2, #0
 8005df2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005df4:	4b47      	ldr	r3, [pc, #284]	; (8005f14 <HAL_UART_MspInit+0x210>)
 8005df6:	2200      	movs	r2, #0
 8005df8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8005dfa:	4846      	ldr	r0, [pc, #280]	; (8005f14 <HAL_UART_MspInit+0x210>)
 8005dfc:	f001 fb5e 	bl	80074bc <HAL_DMA_Init>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d001      	beq.n	8005e0a <HAL_UART_MspInit+0x106>
    {
      Error_Handler();
 8005e06:	f7ff fc55 	bl	80056b4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a41      	ldr	r2, [pc, #260]	; (8005f14 <HAL_UART_MspInit+0x210>)
 8005e0e:	67da      	str	r2, [r3, #124]	; 0x7c
 8005e10:	4a40      	ldr	r2, [pc, #256]	; (8005f14 <HAL_UART_MspInit+0x210>)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005e16:	e105      	b.n	8006024 <HAL_UART_MspInit+0x320>
  else if(huart->Instance==USART2)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a3f      	ldr	r2, [pc, #252]	; (8005f1c <HAL_UART_MspInit+0x218>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	f040 8082 	bne.w	8005f28 <HAL_UART_MspInit+0x224>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005e24:	2302      	movs	r3, #2
 8005e26:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005e2e:	f107 0320 	add.w	r3, r7, #32
 8005e32:	4618      	mov	r0, r3
 8005e34:	f006 fd3a 	bl	800c8ac <HAL_RCCEx_PeriphCLKConfig>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d001      	beq.n	8005e42 <HAL_UART_MspInit+0x13e>
      Error_Handler();
 8005e3e:	f7ff fc39 	bl	80056b4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005e42:	4b32      	ldr	r3, [pc, #200]	; (8005f0c <HAL_UART_MspInit+0x208>)
 8005e44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005e48:	4a30      	ldr	r2, [pc, #192]	; (8005f0c <HAL_UART_MspInit+0x208>)
 8005e4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e4e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005e52:	4b2e      	ldr	r3, [pc, #184]	; (8005f0c <HAL_UART_MspInit+0x208>)
 8005e54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e5c:	617b      	str	r3, [r7, #20]
 8005e5e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e60:	4b2a      	ldr	r3, [pc, #168]	; (8005f0c <HAL_UART_MspInit+0x208>)
 8005e62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005e66:	4a29      	ldr	r2, [pc, #164]	; (8005f0c <HAL_UART_MspInit+0x208>)
 8005e68:	f043 0301 	orr.w	r3, r3, #1
 8005e6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005e70:	4b26      	ldr	r3, [pc, #152]	; (8005f0c <HAL_UART_MspInit+0x208>)
 8005e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005e76:	f003 0301 	and.w	r3, r3, #1
 8005e7a:	613b      	str	r3, [r7, #16]
 8005e7c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005e7e:	230c      	movs	r3, #12
 8005e80:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e84:	2302      	movs	r3, #2
 8005e86:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e90:	2300      	movs	r3, #0
 8005e92:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005e96:	2307      	movs	r3, #7
 8005e98:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e9c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	481b      	ldr	r0, [pc, #108]	; (8005f10 <HAL_UART_MspInit+0x20c>)
 8005ea4:	f005 fb44 	bl	800b530 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream1;
 8005ea8:	4b1d      	ldr	r3, [pc, #116]	; (8005f20 <HAL_UART_MspInit+0x21c>)
 8005eaa:	4a1e      	ldr	r2, [pc, #120]	; (8005f24 <HAL_UART_MspInit+0x220>)
 8005eac:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8005eae:	4b1c      	ldr	r3, [pc, #112]	; (8005f20 <HAL_UART_MspInit+0x21c>)
 8005eb0:	222b      	movs	r2, #43	; 0x2b
 8005eb2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005eb4:	4b1a      	ldr	r3, [pc, #104]	; (8005f20 <HAL_UART_MspInit+0x21c>)
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005eba:	4b19      	ldr	r3, [pc, #100]	; (8005f20 <HAL_UART_MspInit+0x21c>)
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005ec0:	4b17      	ldr	r3, [pc, #92]	; (8005f20 <HAL_UART_MspInit+0x21c>)
 8005ec2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005ec6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005ec8:	4b15      	ldr	r3, [pc, #84]	; (8005f20 <HAL_UART_MspInit+0x21c>)
 8005eca:	2200      	movs	r2, #0
 8005ecc:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005ece:	4b14      	ldr	r3, [pc, #80]	; (8005f20 <HAL_UART_MspInit+0x21c>)
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8005ed4:	4b12      	ldr	r3, [pc, #72]	; (8005f20 <HAL_UART_MspInit+0x21c>)
 8005ed6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005eda:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005edc:	4b10      	ldr	r3, [pc, #64]	; (8005f20 <HAL_UART_MspInit+0x21c>)
 8005ede:	2200      	movs	r2, #0
 8005ee0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005ee2:	4b0f      	ldr	r3, [pc, #60]	; (8005f20 <HAL_UART_MspInit+0x21c>)
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005ee8:	480d      	ldr	r0, [pc, #52]	; (8005f20 <HAL_UART_MspInit+0x21c>)
 8005eea:	f001 fae7 	bl	80074bc <HAL_DMA_Init>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d001      	beq.n	8005ef8 <HAL_UART_MspInit+0x1f4>
      Error_Handler();
 8005ef4:	f7ff fbde 	bl	80056b4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a09      	ldr	r2, [pc, #36]	; (8005f20 <HAL_UART_MspInit+0x21c>)
 8005efc:	67da      	str	r2, [r3, #124]	; 0x7c
 8005efe:	4a08      	ldr	r2, [pc, #32]	; (8005f20 <HAL_UART_MspInit+0x21c>)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6393      	str	r3, [r2, #56]	; 0x38
}
 8005f04:	e08e      	b.n	8006024 <HAL_UART_MspInit+0x320>
 8005f06:	bf00      	nop
 8005f08:	40011000 	.word	0x40011000
 8005f0c:	58024400 	.word	0x58024400
 8005f10:	58020000 	.word	0x58020000
 8005f14:	24000820 	.word	0x24000820
 8005f18:	40020010 	.word	0x40020010
 8005f1c:	40004400 	.word	0x40004400
 8005f20:	24000898 	.word	0x24000898
 8005f24:	40020028 	.word	0x40020028
  else if(huart->Instance==USART3)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a3f      	ldr	r2, [pc, #252]	; (800602c <HAL_UART_MspInit+0x328>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d178      	bne.n	8006024 <HAL_UART_MspInit+0x320>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8005f32:	2302      	movs	r3, #2
 8005f34:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8005f36:	2300      	movs	r3, #0
 8005f38:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005f3c:	f107 0320 	add.w	r3, r7, #32
 8005f40:	4618      	mov	r0, r3
 8005f42:	f006 fcb3 	bl	800c8ac <HAL_RCCEx_PeriphCLKConfig>
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d001      	beq.n	8005f50 <HAL_UART_MspInit+0x24c>
      Error_Handler();
 8005f4c:	f7ff fbb2 	bl	80056b4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005f50:	4b37      	ldr	r3, [pc, #220]	; (8006030 <HAL_UART_MspInit+0x32c>)
 8005f52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005f56:	4a36      	ldr	r2, [pc, #216]	; (8006030 <HAL_UART_MspInit+0x32c>)
 8005f58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f5c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005f60:	4b33      	ldr	r3, [pc, #204]	; (8006030 <HAL_UART_MspInit+0x32c>)
 8005f62:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005f66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f6a:	60fb      	str	r3, [r7, #12]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f6e:	4b30      	ldr	r3, [pc, #192]	; (8006030 <HAL_UART_MspInit+0x32c>)
 8005f70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f74:	4a2e      	ldr	r2, [pc, #184]	; (8006030 <HAL_UART_MspInit+0x32c>)
 8005f76:	f043 0302 	orr.w	r3, r3, #2
 8005f7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005f7e:	4b2c      	ldr	r3, [pc, #176]	; (8006030 <HAL_UART_MspInit+0x32c>)
 8005f80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f84:	f003 0302 	and.w	r3, r3, #2
 8005f88:	60bb      	str	r3, [r7, #8]
 8005f8a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14;
 8005f8c:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 8005f90:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f94:	2302      	movs	r3, #2
 8005f96:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005fa6:	2307      	movs	r3, #7
 8005fa8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005fac:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005fb0:	4619      	mov	r1, r3
 8005fb2:	4820      	ldr	r0, [pc, #128]	; (8006034 <HAL_UART_MspInit+0x330>)
 8005fb4:	f005 fabc 	bl	800b530 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream2;
 8005fb8:	4b1f      	ldr	r3, [pc, #124]	; (8006038 <HAL_UART_MspInit+0x334>)
 8005fba:	4a20      	ldr	r2, [pc, #128]	; (800603c <HAL_UART_MspInit+0x338>)
 8005fbc:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8005fbe:	4b1e      	ldr	r3, [pc, #120]	; (8006038 <HAL_UART_MspInit+0x334>)
 8005fc0:	222d      	movs	r2, #45	; 0x2d
 8005fc2:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005fc4:	4b1c      	ldr	r3, [pc, #112]	; (8006038 <HAL_UART_MspInit+0x334>)
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005fca:	4b1b      	ldr	r3, [pc, #108]	; (8006038 <HAL_UART_MspInit+0x334>)
 8005fcc:	2200      	movs	r2, #0
 8005fce:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005fd0:	4b19      	ldr	r3, [pc, #100]	; (8006038 <HAL_UART_MspInit+0x334>)
 8005fd2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005fd6:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005fd8:	4b17      	ldr	r3, [pc, #92]	; (8006038 <HAL_UART_MspInit+0x334>)
 8005fda:	2200      	movs	r2, #0
 8005fdc:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005fde:	4b16      	ldr	r3, [pc, #88]	; (8006038 <HAL_UART_MspInit+0x334>)
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8005fe4:	4b14      	ldr	r3, [pc, #80]	; (8006038 <HAL_UART_MspInit+0x334>)
 8005fe6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005fea:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005fec:	4b12      	ldr	r3, [pc, #72]	; (8006038 <HAL_UART_MspInit+0x334>)
 8005fee:	2200      	movs	r2, #0
 8005ff0:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005ff2:	4b11      	ldr	r3, [pc, #68]	; (8006038 <HAL_UART_MspInit+0x334>)
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8005ff8:	480f      	ldr	r0, [pc, #60]	; (8006038 <HAL_UART_MspInit+0x334>)
 8005ffa:	f001 fa5f 	bl	80074bc <HAL_DMA_Init>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d001      	beq.n	8006008 <HAL_UART_MspInit+0x304>
      Error_Handler();
 8006004:	f7ff fb56 	bl	80056b4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4a0b      	ldr	r2, [pc, #44]	; (8006038 <HAL_UART_MspInit+0x334>)
 800600c:	67da      	str	r2, [r3, #124]	; 0x7c
 800600e:	4a0a      	ldr	r2, [pc, #40]	; (8006038 <HAL_UART_MspInit+0x334>)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8006014:	2200      	movs	r2, #0
 8006016:	2100      	movs	r1, #0
 8006018:	2027      	movs	r0, #39	; 0x27
 800601a:	f001 fa1a 	bl	8007452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800601e:	2027      	movs	r0, #39	; 0x27
 8006020:	f001 fa31 	bl	8007486 <HAL_NVIC_EnableIRQ>
}
 8006024:	bf00      	nop
 8006026:	37f0      	adds	r7, #240	; 0xf0
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}
 800602c:	40004800 	.word	0x40004800
 8006030:	58024400 	.word	0x58024400
 8006034:	58020400 	.word	0x58020400
 8006038:	24000910 	.word	0x24000910
 800603c:	40020040 	.word	0x40020040

08006040 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006040:	b480      	push	{r7}
 8006042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006044:	e7fe      	b.n	8006044 <NMI_Handler+0x4>

08006046 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006046:	b480      	push	{r7}
 8006048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800604a:	e7fe      	b.n	800604a <HardFault_Handler+0x4>

0800604c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800604c:	b480      	push	{r7}
 800604e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006050:	e7fe      	b.n	8006050 <MemManage_Handler+0x4>

08006052 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006052:	b480      	push	{r7}
 8006054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006056:	e7fe      	b.n	8006056 <BusFault_Handler+0x4>

08006058 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006058:	b480      	push	{r7}
 800605a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800605c:	e7fe      	b.n	800605c <UsageFault_Handler+0x4>

0800605e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800605e:	b480      	push	{r7}
 8006060:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006062:	bf00      	nop
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800606c:	b480      	push	{r7}
 800606e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006070:	bf00      	nop
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr

0800607a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800607a:	b480      	push	{r7}
 800607c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800607e:	bf00      	nop
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr

08006088 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800608c:	f001 f8b6 	bl	80071fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006090:	bf00      	nop
 8006092:	bd80      	pop	{r7, pc}

08006094 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8006098:	4802      	ldr	r0, [pc, #8]	; (80060a4 <DMA1_Stream0_IRQHandler+0x10>)
 800609a:	f002 fd39 	bl	8008b10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800609e:	bf00      	nop
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	24000820 	.word	0x24000820

080060a8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80060ac:	4802      	ldr	r0, [pc, #8]	; (80060b8 <DMA1_Stream1_IRQHandler+0x10>)
 80060ae:	f002 fd2f 	bl	8008b10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80060b2:	bf00      	nop
 80060b4:	bd80      	pop	{r7, pc}
 80060b6:	bf00      	nop
 80060b8:	24000898 	.word	0x24000898

080060bc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80060c0:	4802      	ldr	r0, [pc, #8]	; (80060cc <DMA1_Stream2_IRQHandler+0x10>)
 80060c2:	f002 fd25 	bl	8008b10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80060c6:	bf00      	nop
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	24000910 	.word	0x24000910

080060d0 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80060d4:	4802      	ldr	r0, [pc, #8]	; (80060e0 <FDCAN1_IT0_IRQHandler+0x10>)
 80060d6:	f004 fd1d 	bl	800ab14 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80060da:	bf00      	nop
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	240001fc 	.word	0x240001fc

080060e4 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 80060e8:	4802      	ldr	r0, [pc, #8]	; (80060f4 <FDCAN2_IT0_IRQHandler+0x10>)
 80060ea:	f004 fd13 	bl	800ab14 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 80060ee:	bf00      	nop
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	bf00      	nop
 80060f4:	2400029c 	.word	0x2400029c

080060f8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80060fc:	4802      	ldr	r0, [pc, #8]	; (8006108 <USART3_IRQHandler+0x10>)
 80060fe:	f008 ffe7 	bl	800f0d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8006102:	bf00      	nop
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	24000790 	.word	0x24000790

0800610c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8006110:	4803      	ldr	r0, [pc, #12]	; (8006120 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8006112:	f008 fa57 	bl	800e5c4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8006116:	4803      	ldr	r0, [pc, #12]	; (8006124 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8006118:	f008 fa54 	bl	800e5c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800611c:	bf00      	nop
 800611e:	bd80      	pop	{r7, pc}
 8006120:	240005d8 	.word	0x240005d8
 8006124:	24000624 	.word	0x24000624

08006128 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800612c:	4802      	ldr	r0, [pc, #8]	; (8006138 <TIM5_IRQHandler+0x10>)
 800612e:	f008 fa49 	bl	800e5c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8006132:	bf00      	nop
 8006134:	bd80      	pop	{r7, pc}
 8006136:	bf00      	nop
 8006138:	240004f4 	.word	0x240004f4

0800613c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006140:	4802      	ldr	r0, [pc, #8]	; (800614c <TIM6_DAC_IRQHandler+0x10>)
 8006142:	f008 fa3f 	bl	800e5c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8006146:	bf00      	nop
 8006148:	bd80      	pop	{r7, pc}
 800614a:	bf00      	nop
 800614c:	24000540 	.word	0x24000540

08006150 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8006154:	4802      	ldr	r0, [pc, #8]	; (8006160 <TIM7_IRQHandler+0x10>)
 8006156:	f008 fa35 	bl	800e5c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800615a:	bf00      	nop
 800615c:	bd80      	pop	{r7, pc}
 800615e:	bf00      	nop
 8006160:	2400058c 	.word	0x2400058c

08006164 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006164:	b480      	push	{r7}
 8006166:	af00      	add	r7, sp, #0
  return 1;
 8006168:	2301      	movs	r3, #1
}
 800616a:	4618      	mov	r0, r3
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <_kill>:

int _kill(int pid, int sig)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b082      	sub	sp, #8
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800617e:	f00b fd39 	bl	8011bf4 <__errno>
 8006182:	4603      	mov	r3, r0
 8006184:	2216      	movs	r2, #22
 8006186:	601a      	str	r2, [r3, #0]
  return -1;
 8006188:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800618c:	4618      	mov	r0, r3
 800618e:	3708      	adds	r7, #8
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <_exit>:

void _exit (int status)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b082      	sub	sp, #8
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800619c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f7ff ffe7 	bl	8006174 <_kill>
  while (1) {}    /* Make sure we hang here */
 80061a6:	e7fe      	b.n	80061a6 <_exit+0x12>

080061a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b086      	sub	sp, #24
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	60b9      	str	r1, [r7, #8]
 80061b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80061b4:	2300      	movs	r3, #0
 80061b6:	617b      	str	r3, [r7, #20]
 80061b8:	e00a      	b.n	80061d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80061ba:	f3af 8000 	nop.w
 80061be:	4601      	mov	r1, r0
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	1c5a      	adds	r2, r3, #1
 80061c4:	60ba      	str	r2, [r7, #8]
 80061c6:	b2ca      	uxtb	r2, r1
 80061c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	3301      	adds	r3, #1
 80061ce:	617b      	str	r3, [r7, #20]
 80061d0:	697a      	ldr	r2, [r7, #20]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	429a      	cmp	r2, r3
 80061d6:	dbf0      	blt.n	80061ba <_read+0x12>
  }

  return len;
 80061d8:	687b      	ldr	r3, [r7, #4]
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3718      	adds	r7, #24
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}

080061e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80061e2:	b580      	push	{r7, lr}
 80061e4:	b086      	sub	sp, #24
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	60f8      	str	r0, [r7, #12]
 80061ea:	60b9      	str	r1, [r7, #8]
 80061ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80061ee:	2300      	movs	r3, #0
 80061f0:	617b      	str	r3, [r7, #20]
 80061f2:	e009      	b.n	8006208 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	1c5a      	adds	r2, r3, #1
 80061f8:	60ba      	str	r2, [r7, #8]
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	4618      	mov	r0, r3
 80061fe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	3301      	adds	r3, #1
 8006206:	617b      	str	r3, [r7, #20]
 8006208:	697a      	ldr	r2, [r7, #20]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	429a      	cmp	r2, r3
 800620e:	dbf1      	blt.n	80061f4 <_write+0x12>
  }
  return len;
 8006210:	687b      	ldr	r3, [r7, #4]
}
 8006212:	4618      	mov	r0, r3
 8006214:	3718      	adds	r7, #24
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}

0800621a <_close>:

int _close(int file)
{
 800621a:	b480      	push	{r7}
 800621c:	b083      	sub	sp, #12
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006222:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006226:	4618      	mov	r0, r3
 8006228:	370c      	adds	r7, #12
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr

08006232 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006232:	b480      	push	{r7}
 8006234:	b083      	sub	sp, #12
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
 800623a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006242:	605a      	str	r2, [r3, #4]
  return 0;
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	370c      	adds	r7, #12
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr

08006252 <_isatty>:

int _isatty(int file)
{
 8006252:	b480      	push	{r7}
 8006254:	b083      	sub	sp, #12
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800625a:	2301      	movs	r3, #1
}
 800625c:	4618      	mov	r0, r3
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006268:	b480      	push	{r7}
 800626a:	b085      	sub	sp, #20
 800626c:	af00      	add	r7, sp, #0
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	60b9      	str	r1, [r7, #8]
 8006272:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006274:	2300      	movs	r3, #0
}
 8006276:	4618      	mov	r0, r3
 8006278:	3714      	adds	r7, #20
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr
	...

08006284 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b086      	sub	sp, #24
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800628c:	4a14      	ldr	r2, [pc, #80]	; (80062e0 <_sbrk+0x5c>)
 800628e:	4b15      	ldr	r3, [pc, #84]	; (80062e4 <_sbrk+0x60>)
 8006290:	1ad3      	subs	r3, r2, r3
 8006292:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006298:	4b13      	ldr	r3, [pc, #76]	; (80062e8 <_sbrk+0x64>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d102      	bne.n	80062a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80062a0:	4b11      	ldr	r3, [pc, #68]	; (80062e8 <_sbrk+0x64>)
 80062a2:	4a12      	ldr	r2, [pc, #72]	; (80062ec <_sbrk+0x68>)
 80062a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80062a6:	4b10      	ldr	r3, [pc, #64]	; (80062e8 <_sbrk+0x64>)
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4413      	add	r3, r2
 80062ae:	693a      	ldr	r2, [r7, #16]
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d207      	bcs.n	80062c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80062b4:	f00b fc9e 	bl	8011bf4 <__errno>
 80062b8:	4603      	mov	r3, r0
 80062ba:	220c      	movs	r2, #12
 80062bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80062be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062c2:	e009      	b.n	80062d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80062c4:	4b08      	ldr	r3, [pc, #32]	; (80062e8 <_sbrk+0x64>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80062ca:	4b07      	ldr	r3, [pc, #28]	; (80062e8 <_sbrk+0x64>)
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4413      	add	r3, r2
 80062d2:	4a05      	ldr	r2, [pc, #20]	; (80062e8 <_sbrk+0x64>)
 80062d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80062d6:	68fb      	ldr	r3, [r7, #12]
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3718      	adds	r7, #24
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	24080000 	.word	0x24080000
 80062e4:	00000400 	.word	0x00000400
 80062e8:	2400098c 	.word	0x2400098c
 80062ec:	24000a00 	.word	0x24000a00

080062f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80062f0:	b480      	push	{r7}
 80062f2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80062f4:	4b37      	ldr	r3, [pc, #220]	; (80063d4 <SystemInit+0xe4>)
 80062f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062fa:	4a36      	ldr	r2, [pc, #216]	; (80063d4 <SystemInit+0xe4>)
 80062fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006300:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006304:	4b34      	ldr	r3, [pc, #208]	; (80063d8 <SystemInit+0xe8>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 030f 	and.w	r3, r3, #15
 800630c:	2b06      	cmp	r3, #6
 800630e:	d807      	bhi.n	8006320 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8006310:	4b31      	ldr	r3, [pc, #196]	; (80063d8 <SystemInit+0xe8>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f023 030f 	bic.w	r3, r3, #15
 8006318:	4a2f      	ldr	r2, [pc, #188]	; (80063d8 <SystemInit+0xe8>)
 800631a:	f043 0307 	orr.w	r3, r3, #7
 800631e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8006320:	4b2e      	ldr	r3, [pc, #184]	; (80063dc <SystemInit+0xec>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a2d      	ldr	r2, [pc, #180]	; (80063dc <SystemInit+0xec>)
 8006326:	f043 0301 	orr.w	r3, r3, #1
 800632a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800632c:	4b2b      	ldr	r3, [pc, #172]	; (80063dc <SystemInit+0xec>)
 800632e:	2200      	movs	r2, #0
 8006330:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8006332:	4b2a      	ldr	r3, [pc, #168]	; (80063dc <SystemInit+0xec>)
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	4929      	ldr	r1, [pc, #164]	; (80063dc <SystemInit+0xec>)
 8006338:	4b29      	ldr	r3, [pc, #164]	; (80063e0 <SystemInit+0xf0>)
 800633a:	4013      	ands	r3, r2
 800633c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800633e:	4b26      	ldr	r3, [pc, #152]	; (80063d8 <SystemInit+0xe8>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f003 0308 	and.w	r3, r3, #8
 8006346:	2b00      	cmp	r3, #0
 8006348:	d007      	beq.n	800635a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800634a:	4b23      	ldr	r3, [pc, #140]	; (80063d8 <SystemInit+0xe8>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f023 030f 	bic.w	r3, r3, #15
 8006352:	4a21      	ldr	r2, [pc, #132]	; (80063d8 <SystemInit+0xe8>)
 8006354:	f043 0307 	orr.w	r3, r3, #7
 8006358:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800635a:	4b20      	ldr	r3, [pc, #128]	; (80063dc <SystemInit+0xec>)
 800635c:	2200      	movs	r2, #0
 800635e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8006360:	4b1e      	ldr	r3, [pc, #120]	; (80063dc <SystemInit+0xec>)
 8006362:	2200      	movs	r2, #0
 8006364:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8006366:	4b1d      	ldr	r3, [pc, #116]	; (80063dc <SystemInit+0xec>)
 8006368:	2200      	movs	r2, #0
 800636a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800636c:	4b1b      	ldr	r3, [pc, #108]	; (80063dc <SystemInit+0xec>)
 800636e:	4a1d      	ldr	r2, [pc, #116]	; (80063e4 <SystemInit+0xf4>)
 8006370:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8006372:	4b1a      	ldr	r3, [pc, #104]	; (80063dc <SystemInit+0xec>)
 8006374:	4a1c      	ldr	r2, [pc, #112]	; (80063e8 <SystemInit+0xf8>)
 8006376:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8006378:	4b18      	ldr	r3, [pc, #96]	; (80063dc <SystemInit+0xec>)
 800637a:	4a1c      	ldr	r2, [pc, #112]	; (80063ec <SystemInit+0xfc>)
 800637c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800637e:	4b17      	ldr	r3, [pc, #92]	; (80063dc <SystemInit+0xec>)
 8006380:	2200      	movs	r2, #0
 8006382:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8006384:	4b15      	ldr	r3, [pc, #84]	; (80063dc <SystemInit+0xec>)
 8006386:	4a19      	ldr	r2, [pc, #100]	; (80063ec <SystemInit+0xfc>)
 8006388:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800638a:	4b14      	ldr	r3, [pc, #80]	; (80063dc <SystemInit+0xec>)
 800638c:	2200      	movs	r2, #0
 800638e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8006390:	4b12      	ldr	r3, [pc, #72]	; (80063dc <SystemInit+0xec>)
 8006392:	4a16      	ldr	r2, [pc, #88]	; (80063ec <SystemInit+0xfc>)
 8006394:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8006396:	4b11      	ldr	r3, [pc, #68]	; (80063dc <SystemInit+0xec>)
 8006398:	2200      	movs	r2, #0
 800639a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800639c:	4b0f      	ldr	r3, [pc, #60]	; (80063dc <SystemInit+0xec>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a0e      	ldr	r2, [pc, #56]	; (80063dc <SystemInit+0xec>)
 80063a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063a6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80063a8:	4b0c      	ldr	r3, [pc, #48]	; (80063dc <SystemInit+0xec>)
 80063aa:	2200      	movs	r2, #0
 80063ac:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80063ae:	4b10      	ldr	r3, [pc, #64]	; (80063f0 <SystemInit+0x100>)
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	4b10      	ldr	r3, [pc, #64]	; (80063f4 <SystemInit+0x104>)
 80063b4:	4013      	ands	r3, r2
 80063b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063ba:	d202      	bcs.n	80063c2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80063bc:	4b0e      	ldr	r3, [pc, #56]	; (80063f8 <SystemInit+0x108>)
 80063be:	2201      	movs	r2, #1
 80063c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80063c2:	4b0e      	ldr	r3, [pc, #56]	; (80063fc <SystemInit+0x10c>)
 80063c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80063c8:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 80063ca:	bf00      	nop
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr
 80063d4:	e000ed00 	.word	0xe000ed00
 80063d8:	52002000 	.word	0x52002000
 80063dc:	58024400 	.word	0x58024400
 80063e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80063e4:	02020200 	.word	0x02020200
 80063e8:	01ff0000 	.word	0x01ff0000
 80063ec:	01010280 	.word	0x01010280
 80063f0:	5c001000 	.word	0x5c001000
 80063f4:	ffff0000 	.word	0xffff0000
 80063f8:	51008108 	.word	0x51008108
 80063fc:	52004000 	.word	0x52004000

08006400 <_ZNKSt14_Function_base8_M_emptyEv>:
    bool _M_empty() const { return !_M_manager; }
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	2b00      	cmp	r3, #0
 800640e:	bf0c      	ite	eq
 8006410:	2301      	moveq	r3, #1
 8006412:	2300      	movne	r3, #0
 8006414:	b2db      	uxtb	r3, r3
 8006416:	4618      	mov	r0, r3
 8006418:	370c      	adds	r7, #12
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr

08006422 <_ZNSt8__detail20_Prime_rehash_policyC1Ef>:
    _Prime_rehash_policy(float __z = 1.0) noexcept
 8006422:	b480      	push	{r7}
 8006424:	b083      	sub	sp, #12
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
 800642a:	ed87 0a00 	vstr	s0, [r7]
    : _M_max_load_factor(__z), _M_next_resize(0) { }
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	683a      	ldr	r2, [r7, #0]
 8006432:	601a      	str	r2, [r3, #0]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2200      	movs	r2, #0
 8006438:	605a      	str	r2, [r3, #4]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4618      	mov	r0, r3
 800643e:	370c      	adds	r7, #12
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEELb1EEC1Ev>:
      _Hashtable_ebo_helper() = default;
 8006448:	b580      	push	{r7, lr}
 800644a:	b082      	sub	sp, #8
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f000 f8a9 	bl	80065a8 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEC1Ev>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4618      	mov	r0, r3
 800645a:	3708      	adds	r7, #8
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEELb1EED1Ev>:
    struct _Hashtable_ebo_helper<_Nm, _Tp, true>
 8006460:	b580      	push	{r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 f8a9 	bl	80065c0 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEED1Ev>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4618      	mov	r0, r3
 8006472:	3708      	adds	r7, #8
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEEC1Ev>:
      _Hashtable_alloc() = default;
 8006478:	b580      	push	{r7, lr}
 800647a:	b082      	sub	sp, #8
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f7ff ffe1 	bl	8006448 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEELb1EEC1Ev>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4618      	mov	r0, r3
 800648a:	3708      	adds	r7, #8
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}

08006490 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEED1Ev>:
    struct _Hashtable_alloc : private _Hashtable_ebo_helper<0, _NodeAlloc>
 8006490:	b580      	push	{r7, lr}
 8006492:	b082      	sub	sp, #8
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f7ff ffe1 	bl	8006460 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEELb1EED1Ev>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4618      	mov	r0, r3
 80064a2:	3708      	adds	r7, #8
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}

080064a8 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEEC1Ev>:
      _Hashtable() = default;
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b082      	sub	sp, #8
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f7ff ffe1 	bl	8006478 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEEC1Ev>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f103 0218 	add.w	r2, r3, #24
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	601a      	str	r2, [r3, #0]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2201      	movs	r2, #1
 80064c4:	605a      	str	r2, [r3, #4]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	3308      	adds	r3, #8
 80064ca:	4618      	mov	r0, r3
 80064cc:	f7fa fb97 	bl	8000bfe <_ZNSt8__detail15_Hash_node_baseC1Ev>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	60da      	str	r2, [r3, #12]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	3310      	adds	r3, #16
 80064da:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80064de:	4618      	mov	r0, r3
 80064e0:	f7ff ff9f 	bl	8006422 <_ZNSt8__detail20_Prime_rehash_policyC1Ef>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	619a      	str	r2, [r3, #24]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4618      	mov	r0, r3
 80064ee:	3708      	adds	r7, #8
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <_ZNSt13unordered_mapIP19FDCAN_HandleTypeDefSt8functionIFvmPhjEESt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_S5_EEEC1Ev>:
      unordered_map() = default;
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b082      	sub	sp, #8
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4618      	mov	r0, r3
 8006500:	f7ff ffd2 	bl	80064a8 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEEC1Ev>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4618      	mov	r0, r3
 8006508:	3708      	adds	r7, #8
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
	...

08006510 <HAL_FDCAN_RxFifo0Callback>:
std::unordered_map<FDCAN_HandleTypeDef *,
                   std::function<void(uint32_t, uint8_t *, size_t)>>
    tutrc_harurobo_lib::CAN::rx_callbacks_;

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan,
                               uint32_t RxFifo0ITs) {
 8006510:	b5b0      	push	{r4, r5, r7, lr}
 8006512:	b090      	sub	sp, #64	; 0x40
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	6039      	str	r1, [r7, #0]
  FDCAN_RxHeaderTypeDef rx_header;
  std::array<uint8_t, 8> data;

  if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &rx_header, data.data()) ==
 800651a:	687c      	ldr	r4, [r7, #4]
 800651c:	f107 030c 	add.w	r3, r7, #12
 8006520:	4618      	mov	r0, r3
 8006522:	f7fb fba7 	bl	8001c74 <_ZNSt5arrayIhLj8EE4dataEv>
 8006526:	4603      	mov	r3, r0
 8006528:	f107 0214 	add.w	r2, r7, #20
 800652c:	2140      	movs	r1, #64	; 0x40
 800652e:	4620      	mov	r0, r4
 8006530:	f004 f908 	bl	800a744 <HAL_FDCAN_GetRxMessage>
 8006534:	4603      	mov	r3, r0
 8006536:	2b00      	cmp	r3, #0
 8006538:	bf0c      	ite	eq
 800653a:	2301      	moveq	r3, #1
 800653c:	2300      	movne	r3, #0
 800653e:	b2db      	uxtb	r3, r3
 8006540:	2b00      	cmp	r3, #0
 8006542:	d02a      	beq.n	800659a <HAL_FDCAN_RxFifo0Callback+0x8a>
      HAL_OK) {
    auto itr = tutrc_harurobo_lib::CAN::rx_callbacks_.find(hfdcan);
 8006544:	1d3b      	adds	r3, r7, #4
 8006546:	4619      	mov	r1, r3
 8006548:	4816      	ldr	r0, [pc, #88]	; (80065a4 <HAL_FDCAN_RxFifo0Callback+0x94>)
 800654a:	f000 f857 	bl	80065fc <_ZNSt13unordered_mapIP19FDCAN_HandleTypeDefSt8functionIFvmPhjEESt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_S5_EEE4findERSB_>
 800654e:	4603      	mov	r3, r0
 8006550:	60bb      	str	r3, [r7, #8]
    if (itr != tutrc_harurobo_lib::CAN::rx_callbacks_.end()) {
 8006552:	4814      	ldr	r0, [pc, #80]	; (80065a4 <HAL_FDCAN_RxFifo0Callback+0x94>)
 8006554:	f000 f861 	bl	800661a <_ZNSt13unordered_mapIP19FDCAN_HandleTypeDefSt8functionIFvmPhjEESt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_S5_EEE3endEv>
 8006558:	4603      	mov	r3, r0
 800655a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800655c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8006560:	f107 0308 	add.w	r3, r7, #8
 8006564:	4611      	mov	r1, r2
 8006566:	4618      	mov	r0, r3
 8006568:	f000 f864 	bl	8006634 <_ZNSt8__detailneISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEbRKNS_19_Node_iterator_baseIT_XT0_EEESE_>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d013      	beq.n	800659a <HAL_FDCAN_RxFifo0Callback+0x8a>
      itr->second(rx_header.Identifier, data.data(),
 8006572:	f107 0308 	add.w	r3, r7, #8
 8006576:	4618      	mov	r0, r3
 8006578:	f7fc f8c5 	bl	8002706 <_ZNKSt8__detail14_Node_iteratorISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0ELb0EEptEv>
 800657c:	4603      	mov	r3, r0
 800657e:	1d1c      	adds	r4, r3, #4
 8006580:	697d      	ldr	r5, [r7, #20]
 8006582:	f107 030c 	add.w	r3, r7, #12
 8006586:	4618      	mov	r0, r3
 8006588:	f7fb fb74 	bl	8001c74 <_ZNSt5arrayIhLj8EE4dataEv>
 800658c:	4602      	mov	r2, r0
                  rx_header.DataLength >> 16);
 800658e:	6a3b      	ldr	r3, [r7, #32]
 8006590:	0c1b      	lsrs	r3, r3, #16
      itr->second(rx_header.Identifier, data.data(),
 8006592:	4629      	mov	r1, r5
 8006594:	4620      	mov	r0, r4
 8006596:	f000 f861 	bl	800665c <_ZNKSt8functionIFvmPhjEEclEmS0_j>
    }
  }
}
 800659a:	bf00      	nop
 800659c:	3740      	adds	r7, #64	; 0x40
 800659e:	46bd      	mov	sp, r7
 80065a0:	bdb0      	pop	{r4, r5, r7, pc}
 80065a2:	bf00      	nop
 80065a4:	24000990 	.word	0x24000990

080065a8 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b082      	sub	sp, #8
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 f880 	bl	80066b6 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEC1Ev>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4618      	mov	r0, r3
 80065ba:	3708      	adds	r7, #8
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}

080065c0 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b082      	sub	sp, #8
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 f87f 	bl	80066cc <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEED1Ev>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4618      	mov	r0, r3
 80065d2:	3708      	adds	r7, #8
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEED1Ev>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 80065d8:	b580      	push	{r7, lr}
 80065da:	b082      	sub	sp, #8
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
      clear();
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f000 f87e 	bl	80066e2 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE5clearEv>
      _M_deallocate_buckets();
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f7fd fc04 	bl	8003df4 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>
    }
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f7ff ff4f 	bl	8006490 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEED1Ev>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4618      	mov	r0, r3
 80065f6:	3708      	adds	r7, #8
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}

080065fc <_ZNSt13unordered_mapIP19FDCAN_HandleTypeDefSt8functionIFvmPhjEESt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_S5_EEE4findERSB_>:
      find(const key_type& __x)
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
      { return _M_h.find(__x); }
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6839      	ldr	r1, [r7, #0]
 800660a:	4618      	mov	r0, r3
 800660c:	f000 f889 	bl	8006722 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE4findERS3_>
 8006610:	4603      	mov	r3, r0
 8006612:	4618      	mov	r0, r3
 8006614:	3708      	adds	r7, #8
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}

0800661a <_ZNSt13unordered_mapIP19FDCAN_HandleTypeDefSt8functionIFvmPhjEESt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_S5_EEE3endEv>:
      end() noexcept
 800661a:	b580      	push	{r7, lr}
 800661c:	b082      	sub	sp, #8
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
      { return _M_h.end(); }
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	4618      	mov	r0, r3
 8006626:	f000 f8a7 	bl	8006778 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE3endEv>
 800662a:	4603      	mov	r3, r0
 800662c:	4618      	mov	r0, r3
 800662e:	3708      	adds	r7, #8
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <_ZNSt8__detailneISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEbRKNS_19_Node_iterator_baseIT_XT0_EEESE_>:
    operator!=(const _Node_iterator_base<_Value, _Cache_hash_code>& __x,
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
    { return __x._M_cur != __y._M_cur; }
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	429a      	cmp	r2, r3
 8006648:	bf14      	ite	ne
 800664a:	2301      	movne	r3, #1
 800664c:	2300      	moveq	r3, #0
 800664e:	b2db      	uxtb	r3, r3
 8006650:	4618      	mov	r0, r3
 8006652:	370c      	adds	r7, #12
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr

0800665c <_ZNKSt8functionIFvmPhjEEclEmS0_j>:

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 800665c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006660:	b084      	sub	sp, #16
 8006662:	af00      	add	r7, sp, #0
 8006664:	60f8      	str	r0, [r7, #12]
 8006666:	60b9      	str	r1, [r7, #8]
 8006668:	607a      	str	r2, [r7, #4]
 800666a:	603b      	str	r3, [r7, #0]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	4618      	mov	r0, r3
 8006670:	f7ff fec6 	bl	8006400 <_ZNKSt14_Function_base8_M_emptyEv>
 8006674:	4603      	mov	r3, r0
 8006676:	2b00      	cmp	r3, #0
 8006678:	d001      	beq.n	800667e <_ZNKSt8functionIFvmPhjEEclEmS0_j+0x22>
	__throw_bad_function_call();
 800667a:	f00a fbd2 	bl	8010e22 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	68dc      	ldr	r4, [r3, #12]
 8006682:	68fd      	ldr	r5, [r7, #12]
 8006684:	f107 0308 	add.w	r3, r7, #8
 8006688:	4618      	mov	r0, r3
 800668a:	f7fc f8fa 	bl	8002882 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 800668e:	4606      	mov	r6, r0
 8006690:	1d3b      	adds	r3, r7, #4
 8006692:	4618      	mov	r0, r3
 8006694:	f7fc f900 	bl	8002898 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 8006698:	4680      	mov	r8, r0
 800669a:	463b      	mov	r3, r7
 800669c:	4618      	mov	r0, r3
 800669e:	f7fb fcb0 	bl	8002002 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80066a2:	4603      	mov	r3, r0
 80066a4:	4642      	mov	r2, r8
 80066a6:	4631      	mov	r1, r6
 80066a8:	4628      	mov	r0, r5
 80066aa:	47a0      	blx	r4
 80066ac:	bf00      	nop
    }
 80066ae:	3710      	adds	r7, #16
 80066b0:	46bd      	mov	sp, r7
 80066b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080066b6 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80066b6:	b480      	push	{r7}
 80066b8:	b083      	sub	sp, #12
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	4618      	mov	r0, r3
 80066c2:	370c      	adds	r7, #12
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr

080066cc <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4618      	mov	r0, r3
 80066d8:	370c      	adds	r7, #12
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr

080066e2 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE5clearEv>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 80066e2:	b580      	push	{r7, lr}
 80066e4:	b082      	sub	sp, #8
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
      this->_M_deallocate_nodes(_M_begin());
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f7fd fb76 	bl	8003ddc <_ZNKSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 80066f0:	4603      	mov	r3, r0
 80066f2:	4619      	mov	r1, r3
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f000 f84e 	bl	8006796 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEE19_M_deallocate_nodesEPSB_>
      __builtin_memset(_M_buckets, 0, _M_bucket_count * sizeof(__bucket_type));
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	4610      	mov	r0, r2
 8006706:	461a      	mov	r2, r3
 8006708:	2100      	movs	r1, #0
 800670a:	f00b fabb 	bl	8011c84 <memset>
      _M_element_count = 0;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2200      	movs	r2, #0
 8006712:	60da      	str	r2, [r3, #12]
      _M_before_begin._M_nxt = nullptr;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	609a      	str	r2, [r3, #8]
    }
 800671a:	bf00      	nop
 800671c:	3708      	adds	r7, #8
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}

08006722 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE4findERS3_>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8006722:	b580      	push	{r7, lr}
 8006724:	b086      	sub	sp, #24
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
 800672a:	6039      	str	r1, [r7, #0]
      __hash_code __code = this->_M_hash_code(__k);
 800672c:	6839      	ldr	r1, [r7, #0]
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f7fb ff0f 	bl	8002552 <_ZNKSt8__detail15_Hash_code_baseIP19FDCAN_HandleTypeDefSt4pairIKS2_St8functionIFvmPhjEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS4_>
 8006734:	6178      	str	r0, [r7, #20]
      std::size_t __bkt = _M_bucket_index(__k, __code);
 8006736:	697a      	ldr	r2, [r7, #20]
 8006738:	6839      	ldr	r1, [r7, #0]
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f7fb ff1d 	bl	800257a <_ZNKSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERS3_j>
 8006740:	6138      	str	r0, [r7, #16]
      __node_type* __p = _M_find_node(__bkt, __k, __code);
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	683a      	ldr	r2, [r7, #0]
 8006746:	6939      	ldr	r1, [r7, #16]
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f7fb ff28 	bl	800259e <_ZNKSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS3_j>
 800674e:	60f8      	str	r0, [r7, #12]
      return __p ? iterator(__p) : end();
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d006      	beq.n	8006764 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE4findERS3_+0x42>
 8006756:	f107 0308 	add.w	r3, r7, #8
 800675a:	68f9      	ldr	r1, [r7, #12]
 800675c:	4618      	mov	r0, r3
 800675e:	f7fc fc57 	bl	8003010 <_ZNSt8__detail14_Node_iteratorISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0ELb0EEC1EPNS_10_Hash_nodeIS9_Lb0EEE>
 8006762:	e004      	b.n	800676e <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE4findERS3_+0x4c>
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 f807 	bl	8006778 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE3endEv>
 800676a:	4603      	mov	r3, r0
 800676c:	60bb      	str	r3, [r7, #8]
 800676e:	68bb      	ldr	r3, [r7, #8]
    }
 8006770:	4618      	mov	r0, r3
 8006772:	3718      	adds	r7, #24
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}

08006778 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE3endEv>:
      end() noexcept
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
      { return iterator(nullptr); }
 8006780:	f107 030c 	add.w	r3, r7, #12
 8006784:	2100      	movs	r1, #0
 8006786:	4618      	mov	r0, r3
 8006788:	f7fc fc42 	bl	8003010 <_ZNSt8__detail14_Node_iteratorISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0ELb0EEC1EPNS_10_Hash_nodeIS9_Lb0EEE>
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	4618      	mov	r0, r3
 8006790:	3710      	adds	r7, #16
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}

08006796 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEE19_M_deallocate_nodesEPSB_>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_nodes(__node_type* __n)
 8006796:	b580      	push	{r7, lr}
 8006798:	b084      	sub	sp, #16
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
 800679e:	6039      	str	r1, [r7, #0]
      while (__n)
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d00a      	beq.n	80067bc <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEE19_M_deallocate_nodesEPSB_+0x26>
	  __node_type* __tmp = __n;
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	60fb      	str	r3, [r7, #12]
	  __n = __n->_M_next();
 80067aa:	6838      	ldr	r0, [r7, #0]
 80067ac:	f7fc fec3 	bl	8003536 <_ZNKSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EE7_M_nextEv>
 80067b0:	6038      	str	r0, [r7, #0]
	  _M_deallocate_node(__tmp);
 80067b2:	68f9      	ldr	r1, [r7, #12]
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f7fc fbb0 	bl	8002f1a <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEE18_M_deallocate_nodeEPSB_>
      while (__n)
 80067ba:	e7f1      	b.n	80067a0 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEE19_M_deallocate_nodesEPSB_+0xa>
    }
 80067bc:	bf00      	nop
 80067be:	3710      	adds	r7, #16
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <_ZNSt13unordered_mapIP19FDCAN_HandleTypeDefSt8functionIFvmPhjEESt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_S5_EEED1Ev>:
    class unordered_map
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b082      	sub	sp, #8
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4618      	mov	r0, r3
 80067d0:	f7ff ff02 	bl	80065d8 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEED1Ev>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4618      	mov	r0, r3
 80067d8:	3708      	adds	r7, #8
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
	...

080067e0 <_Z41__static_initialization_and_destruction_0ii>:
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b082      	sub	sp, #8
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d107      	bne.n	8006800 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d102      	bne.n	8006800 <_Z41__static_initialization_and_destruction_0ii+0x20>
    tutrc_harurobo_lib::CAN::rx_callbacks_;
 80067fa:	4809      	ldr	r0, [pc, #36]	; (8006820 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80067fc:	f7ff fe7a 	bl	80064f4 <_ZNSt13unordered_mapIP19FDCAN_HandleTypeDefSt8functionIFvmPhjEESt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_S5_EEEC1Ev>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d107      	bne.n	8006816 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800680c:	4293      	cmp	r3, r2
 800680e:	d102      	bne.n	8006816 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8006810:	4803      	ldr	r0, [pc, #12]	; (8006820 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8006812:	f7ff ffd7 	bl	80067c4 <_ZNSt13unordered_mapIP19FDCAN_HandleTypeDefSt8functionIFvmPhjEESt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_S5_EEED1Ev>
}
 8006816:	bf00      	nop
 8006818:	3708      	adds	r7, #8
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}
 800681e:	bf00      	nop
 8006820:	24000990 	.word	0x24000990

08006824 <_GLOBAL__sub_I__ZN18tutrc_harurobo_lib3CAN13rx_callbacks_E>:
 8006824:	b580      	push	{r7, lr}
 8006826:	af00      	add	r7, sp, #0
 8006828:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800682c:	2001      	movs	r0, #1
 800682e:	f7ff ffd7 	bl	80067e0 <_Z41__static_initialization_and_destruction_0ii>
 8006832:	bd80      	pop	{r7, pc}

08006834 <_GLOBAL__sub_D__ZN18tutrc_harurobo_lib3CAN13rx_callbacks_E>:
 8006834:	b580      	push	{r7, lr}
 8006836:	af00      	add	r7, sp, #0
 8006838:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800683c:	2000      	movs	r0, #0
 800683e:	f7ff ffcf 	bl	80067e0 <_Z41__static_initialization_and_destruction_0ii>
 8006842:	bd80      	pop	{r7, pc}

08006844 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEELb1EEC1Ev>:
      _Hashtable_ebo_helper() = default;
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f000 f85c 	bl	800690a <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEEC1Ev>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4618      	mov	r0, r3
 8006856:	3708      	adds	r7, #8
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEELb1EED1Ev>:
    struct _Hashtable_ebo_helper<_Nm, _Tp, true>
 800685c:	b580      	push	{r7, lr}
 800685e:	b082      	sub	sp, #8
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 f85c 	bl	8006922 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEED1Ev>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	4618      	mov	r0, r3
 800686e:	3708      	adds	r7, #8
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEEEC1Ev>:
      _Hashtable_alloc() = default;
 8006874:	b580      	push	{r7, lr}
 8006876:	b082      	sub	sp, #8
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f7ff ffe1 	bl	8006844 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEELb1EEC1Ev>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	4618      	mov	r0, r3
 8006886:	3708      	adds	r7, #8
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}

0800688c <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEEED1Ev>:
    struct _Hashtable_alloc : private _Hashtable_ebo_helper<0, _NodeAlloc>
 800688c:	b580      	push	{r7, lr}
 800688e:	b082      	sub	sp, #8
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f7ff ffe1 	bl	800685c <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEELb1EED1Ev>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4618      	mov	r0, r3
 800689e:	3708      	adds	r7, #8
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <_ZNSt10_HashtableItSt4pairIKtSt8functionIFvvEEESaIS5_ENSt8__detail10_Select1stESt8equal_toItESt4hashItENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb0ELb0ELb1EEEEC1Ev>:
      _Hashtable() = default;
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b082      	sub	sp, #8
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f7ff ffe1 	bl	8006874 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEEEC1Ev>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f103 0218 	add.w	r2, r3, #24
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	601a      	str	r2, [r3, #0]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	605a      	str	r2, [r3, #4]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	3308      	adds	r3, #8
 80068c6:	4618      	mov	r0, r3
 80068c8:	f7fa f999 	bl	8000bfe <_ZNSt8__detail15_Hash_node_baseC1Ev>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	60da      	str	r2, [r3, #12]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	3310      	adds	r3, #16
 80068d6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80068da:	4618      	mov	r0, r3
 80068dc:	f7ff fda1 	bl	8006422 <_ZNSt8__detail20_Prime_rehash_policyC1Ef>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	619a      	str	r2, [r3, #24]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4618      	mov	r0, r3
 80068ea:	3708      	adds	r7, #8
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <_ZNSt13unordered_mapItSt8functionIFvvEESt4hashItESt8equal_toItESaISt4pairIKtS2_EEEC1Ev>:
      unordered_map() = default;
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b082      	sub	sp, #8
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	4618      	mov	r0, r3
 80068fc:	f7ff ffd2 	bl	80068a4 <_ZNSt10_HashtableItSt4pairIKtSt8functionIFvvEEESaIS5_ENSt8__detail10_Select1stESt8equal_toItESt4hashItENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb0ELb0ELb1EEEEC1Ev>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4618      	mov	r0, r3
 8006904:	3708      	adds	r7, #8
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}

0800690a <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800690a:	b580      	push	{r7, lr}
 800690c:	b082      	sub	sp, #8
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 f839 	bl	800698a <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEEC1Ev>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4618      	mov	r0, r3
 800691c:	3708      	adds	r7, #8
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}

08006922 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8006922:	b580      	push	{r7, lr}
 8006924:	b082      	sub	sp, #8
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 f838 	bl	80069a0 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEED1Ev>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4618      	mov	r0, r3
 8006934:	3708      	adds	r7, #8
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <_ZNSt10_HashtableItSt4pairIKtSt8functionIFvvEEESaIS5_ENSt8__detail10_Select1stESt8equal_toItESt4hashItENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb0ELb0ELb1EEEED1Ev>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 800693a:	b580      	push	{r7, lr}
 800693c:	b082      	sub	sp, #8
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
      clear();
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 f837 	bl	80069b6 <_ZNSt10_HashtableItSt4pairIKtSt8functionIFvvEEESaIS5_ENSt8__detail10_Select1stESt8equal_toItESt4hashItENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb0ELb0ELb1EEEE5clearEv>
      _M_deallocate_buckets();
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 f854 	bl	80069f6 <_ZNSt10_HashtableItSt4pairIKtSt8functionIFvvEEESaIS5_ENSt8__detail10_Select1stESt8equal_toItESt4hashItENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>
    }
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f7ff ff9c 	bl	800688c <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEEED1Ev>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	4618      	mov	r0, r3
 8006958:	3708      	adds	r7, #8
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}

0800695e <_ZNKSt8functionIFvvEEclEv>:
    function<_Res(_ArgTypes...)>::
 800695e:	b580      	push	{r7, lr}
 8006960:	b082      	sub	sp, #8
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
      if (_M_empty())
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4618      	mov	r0, r3
 800696a:	f7ff fd49 	bl	8006400 <_ZNKSt14_Function_base8_M_emptyEv>
 800696e:	4603      	mov	r3, r0
 8006970:	2b00      	cmp	r3, #0
 8006972:	d001      	beq.n	8006978 <_ZNKSt8functionIFvvEEclEv+0x1a>
	__throw_bad_function_call();
 8006974:	f00a fa55 	bl	8010e22 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	4610      	mov	r0, r2
 8006980:	4798      	blx	r3
 8006982:	bf00      	nop
    }
 8006984:	3708      	adds	r7, #8
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}

0800698a <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800698a:	b480      	push	{r7}
 800698c:	b083      	sub	sp, #12
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4618      	mov	r0, r3
 8006996:	370c      	adds	r7, #12
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr

080069a0 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80069a0:	b480      	push	{r7}
 80069a2:	b083      	sub	sp, #12
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	4618      	mov	r0, r3
 80069ac:	370c      	adds	r7, #12
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr

080069b6 <_ZNSt10_HashtableItSt4pairIKtSt8functionIFvvEEESaIS5_ENSt8__detail10_Select1stESt8equal_toItESt4hashItENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb0ELb0ELb1EEEE5clearEv>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 80069b6:	b580      	push	{r7, lr}
 80069b8:	b082      	sub	sp, #8
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	6078      	str	r0, [r7, #4]
      this->_M_deallocate_nodes(_M_begin());
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 f837 	bl	8006a32 <_ZNKSt10_HashtableItSt4pairIKtSt8functionIFvvEEESaIS5_ENSt8__detail10_Select1stESt8equal_toItESt4hashItENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 80069c4:	4603      	mov	r3, r0
 80069c6:	4619      	mov	r1, r3
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f000 f83e 	bl	8006a4a <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEEE19_M_deallocate_nodesEPS8_>
      __builtin_memset(_M_buckets, 0, _M_bucket_count * sizeof(__bucket_type));
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	4610      	mov	r0, r2
 80069da:	461a      	mov	r2, r3
 80069dc:	2100      	movs	r1, #0
 80069de:	f00b f951 	bl	8011c84 <memset>
      _M_element_count = 0;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2200      	movs	r2, #0
 80069e6:	60da      	str	r2, [r3, #12]
      _M_before_begin._M_nxt = nullptr;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	609a      	str	r2, [r3, #8]
    }
 80069ee:	bf00      	nop
 80069f0:	3708      	adds	r7, #8
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}

080069f6 <_ZNSt10_HashtableItSt4pairIKtSt8functionIFvvEEESaIS5_ENSt8__detail10_Select1stESt8equal_toItESt4hashItENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>:
      _M_deallocate_buckets()
 80069f6:	b580      	push	{r7, lr}
 80069f8:	b082      	sub	sp, #8
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6819      	ldr	r1, [r3, #0]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	461a      	mov	r2, r3
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 f835 	bl	8006a78 <_ZNSt10_HashtableItSt4pairIKtSt8functionIFvvEEESaIS5_ENSt8__detail10_Select1stESt8equal_toItESt4hashItENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS7_15_Hash_node_baseEj>
 8006a0e:	bf00      	nop
 8006a10:	3708      	adds	r7, #8
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}

08006a16 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKtSt8functionIFvvEEEE9_M_valptrEv>:
      _M_valptr() noexcept
 8006a16:	b580      	push	{r7, lr}
 8006a18:	b082      	sub	sp, #8
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	3304      	adds	r3, #4
 8006a22:	4618      	mov	r0, r3
 8006a24:	f000 f83f 	bl	8006aa6 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKtSt8functionIFvvEEEE6_M_ptrEv>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3708      	adds	r7, #8
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}

08006a32 <_ZNKSt10_HashtableItSt4pairIKtSt8functionIFvvEEESaIS5_ENSt8__detail10_Select1stESt8equal_toItESt4hashItENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>:
      _M_begin() const
 8006a32:	b480      	push	{r7}
 8006a34:	b083      	sub	sp, #12
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
      { return static_cast<__node_type*>(_M_before_begin._M_nxt); }
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	4618      	mov	r0, r3
 8006a40:	370c      	adds	r7, #12
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr

08006a4a <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEEE19_M_deallocate_nodesEPS8_>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_nodes(__node_type* __n)
 8006a4a:	b580      	push	{r7, lr}
 8006a4c:	b084      	sub	sp, #16
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	6078      	str	r0, [r7, #4]
 8006a52:	6039      	str	r1, [r7, #0]
      while (__n)
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d00a      	beq.n	8006a70 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEEE19_M_deallocate_nodesEPS8_+0x26>
	  __node_type* __tmp = __n;
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	60fb      	str	r3, [r7, #12]
	  __n = __n->_M_next();
 8006a5e:	6838      	ldr	r0, [r7, #0]
 8006a60:	f000 f847 	bl	8006af2 <_ZNKSt8__detail10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EE7_M_nextEv>
 8006a64:	6038      	str	r0, [r7, #0]
	  _M_deallocate_node(__tmp);
 8006a66:	68f9      	ldr	r1, [r7, #12]
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 f828 	bl	8006abe <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEEE18_M_deallocate_nodeEPS8_>
      while (__n)
 8006a6e:	e7f1      	b.n	8006a54 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEEE19_M_deallocate_nodesEPS8_+0xa>
    }
 8006a70:	bf00      	nop
 8006a72:	3710      	adds	r7, #16
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <_ZNSt10_HashtableItSt4pairIKtSt8functionIFvvEEESaIS5_ENSt8__detail10_Select1stESt8equal_toItESt4hashItENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS7_15_Hash_node_baseEj>:
      _M_deallocate_buckets(__bucket_type* __bkts, size_type __bkt_count)
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	60b9      	str	r1, [r7, #8]
 8006a82:	607a      	str	r2, [r7, #4]
	if (_M_uses_single_bucket(__bkts))
 8006a84:	68b9      	ldr	r1, [r7, #8]
 8006a86:	68f8      	ldr	r0, [r7, #12]
 8006a88:	f000 f83f 	bl	8006b0a <_ZNKSt10_HashtableItSt4pairIKtSt8functionIFvvEEESaIS5_ENSt8__detail10_Select1stESt8equal_toItESt4hashItENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_uses_single_bucketEPPNS7_15_Hash_node_baseE>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d105      	bne.n	8006a9e <_ZNSt10_HashtableItSt4pairIKtSt8functionIFvvEEESaIS5_ENSt8__detail10_Select1stESt8equal_toItESt4hashItENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS7_15_Hash_node_baseEj+0x26>
	__hashtable_alloc::_M_deallocate_buckets(__bkts, __bkt_count);
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	68b9      	ldr	r1, [r7, #8]
 8006a96:	68f8      	ldr	r0, [r7, #12]
 8006a98:	f000 f84f 	bl	8006b3a <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEEE21_M_deallocate_bucketsEPPNS_15_Hash_node_baseEj>
 8006a9c:	e000      	b.n	8006aa0 <_ZNSt10_HashtableItSt4pairIKtSt8functionIFvvEEESaIS5_ENSt8__detail10_Select1stESt8equal_toItESt4hashItENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS7_15_Hash_node_baseEj+0x28>
	  return;
 8006a9e:	bf00      	nop
      }
 8006aa0:	3710      	adds	r7, #16
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}

08006aa6 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKtSt8functionIFvvEEEE6_M_ptrEv>:
      _M_ptr() noexcept
 8006aa6:	b580      	push	{r7, lr}
 8006aa8:	b082      	sub	sp, #8
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 f867 	bl	8006b82 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKtSt8functionIFvvEEEE7_M_addrEv>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3708      	adds	r7, #8
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}

08006abe <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEEE18_M_deallocate_nodeEPS8_>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node(__node_type* __n)
 8006abe:	b590      	push	{r4, r7, lr}
 8006ac0:	b083      	sub	sp, #12
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
 8006ac6:	6039      	str	r1, [r7, #0]
      __node_alloc_traits::destroy(_M_node_allocator(), __n->_M_valptr());
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f000 f865 	bl	8006b98 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEEE17_M_node_allocatorEv>
 8006ace:	4604      	mov	r4, r0
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f7ff ff9f 	bl	8006a16 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKtSt8functionIFvvEEEE9_M_valptrEv>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	4619      	mov	r1, r3
 8006adc:	4620      	mov	r0, r4
 8006ade:	f000 f876 	bl	8006bce <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEEE7destroyIS7_EEvRS9_PT_>
      _M_deallocate_node_ptr(__n);
 8006ae2:	6839      	ldr	r1, [r7, #0]
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 f87f 	bl	8006be8 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEEE22_M_deallocate_node_ptrEPS8_>
    }
 8006aea:	bf00      	nop
 8006aec:	370c      	adds	r7, #12
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd90      	pop	{r4, r7, pc}

08006af2 <_ZNKSt8__detail10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EE7_M_nextEv>:
      _M_next() const noexcept
 8006af2:	b480      	push	{r7}
 8006af4:	b083      	sub	sp, #12
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
      { return static_cast<_Hash_node*>(this->_M_nxt); }
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4618      	mov	r0, r3
 8006b00:	370c      	adds	r7, #12
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr

08006b0a <_ZNKSt10_HashtableItSt4pairIKtSt8functionIFvvEEESaIS5_ENSt8__detail10_Select1stESt8equal_toItESt4hashItENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_uses_single_bucketEPPNS7_15_Hash_node_baseE>:
      _M_uses_single_bucket(__bucket_type* __bkts) const
 8006b0a:	b480      	push	{r7}
 8006b0c:	b083      	sub	sp, #12
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	6078      	str	r0, [r7, #4]
 8006b12:	6039      	str	r1, [r7, #0]
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	3318      	adds	r3, #24
 8006b18:	683a      	ldr	r2, [r7, #0]
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	bf0c      	ite	eq
 8006b1e:	2301      	moveq	r3, #1
 8006b20:	2300      	movne	r3, #0
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	bf14      	ite	ne
 8006b28:	2301      	movne	r3, #1
 8006b2a:	2300      	moveq	r3, #0
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	4618      	mov	r0, r3
 8006b30:	370c      	adds	r7, #12
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr

08006b3a <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEEE21_M_deallocate_bucketsEPPNS_15_Hash_node_baseEj>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_buckets(__bucket_type* __bkts,
 8006b3a:	b580      	push	{r7, lr}
 8006b3c:	b086      	sub	sp, #24
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	60f8      	str	r0, [r7, #12]
 8006b42:	60b9      	str	r1, [r7, #8]
 8006b44:	607a      	str	r2, [r7, #4]
      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__bkts);
 8006b46:	68b8      	ldr	r0, [r7, #8]
 8006b48:	f7fd feab 	bl	80048a2 <_ZNSt14pointer_traitsIPPNSt8__detail15_Hash_node_baseEE10pointer_toERS2_>
 8006b4c:	6178      	str	r0, [r7, #20]
      __bucket_alloc_type __alloc(_M_node_allocator());
 8006b4e:	68f8      	ldr	r0, [r7, #12]
 8006b50:	f000 f822 	bl	8006b98 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEEE17_M_node_allocatorEv>
 8006b54:	4602      	mov	r2, r0
 8006b56:	f107 0310 	add.w	r3, r7, #16
 8006b5a:	4611      	mov	r1, r2
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f000 f859 	bl	8006c14 <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEEERKSaIT_E>
      __bucket_alloc_traits::deallocate(__alloc, __ptr, __bkt_count);
 8006b62:	f107 0310 	add.w	r3, r7, #16
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	6979      	ldr	r1, [r7, #20]
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f7fd fea5 	bl	80048ba <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE10deallocateERS3_PS2_j>
      __bucket_alloc_type __alloc(_M_node_allocator());
 8006b70:	f107 0310 	add.w	r3, r7, #16
 8006b74:	4618      	mov	r0, r3
 8006b76:	f7fd fcef 	bl	8004558 <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>
    }
 8006b7a:	bf00      	nop
 8006b7c:	3718      	adds	r7, #24
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}

08006b82 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKtSt8functionIFvvEEEE7_M_addrEv>:
      _M_addr() noexcept
 8006b82:	b480      	push	{r7}
 8006b84:	b083      	sub	sp, #12
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 8006b8a:	687b      	ldr	r3, [r7, #4]
      }
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	370c      	adds	r7, #12
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEEE17_M_node_allocatorEv>:
      _M_node_allocator()
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b082      	sub	sp, #8
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
      { return __ebo_node_alloc::_M_get(); }
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 f844 	bl	8006c2e <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEELb1EE6_M_getEv>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3708      	adds	r7, #8
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	60f8      	str	r0, [r7, #12]
 8006bb8:	60b9      	str	r1, [r7, #8]
 8006bba:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	68b9      	ldr	r1, [r7, #8]
 8006bc0:	68f8      	ldr	r0, [r7, #12]
 8006bc2:	f000 f83f 	bl	8006c44 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEE10deallocateEPS9_j>
 8006bc6:	bf00      	nop
 8006bc8:	3710      	adds	r7, #16
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}

08006bce <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEEE7destroyIS7_EEvRS9_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8006bce:	b580      	push	{r7, lr}
 8006bd0:	b082      	sub	sp, #8
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
 8006bd6:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8006bd8:	6839      	ldr	r1, [r7, #0]
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 f853 	bl	8006c86 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEE7destroyIS8_EEvPT_>
	}
 8006be0:	bf00      	nop
 8006be2:	3708      	adds	r7, #8
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEEE22_M_deallocate_node_ptrEPS8_>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node_ptr(__node_type* __n)
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]
      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__n);
 8006bf2:	6838      	ldr	r0, [r7, #0]
 8006bf4:	f000 f853 	bl	8006c9e <_ZNSt14pointer_traitsIPNSt8__detail10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEE10pointer_toERS8_>
 8006bf8:	60f8      	str	r0, [r7, #12]
      __node_alloc_traits::deallocate(_M_node_allocator(), __ptr, 1);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f7ff ffcc 	bl	8006b98 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEEE17_M_node_allocatorEv>
 8006c00:	4603      	mov	r3, r0
 8006c02:	2201      	movs	r2, #1
 8006c04:	68f9      	ldr	r1, [r7, #12]
 8006c06:	4618      	mov	r0, r3
 8006c08:	f7ff ffd2 	bl	8006bb0 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEEE10deallocateERS9_PS8_j>
    }
 8006c0c:	bf00      	nop
 8006c0e:	3710      	adds	r7, #16
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	6039      	str	r1, [r7, #0]
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f7fd fe0b 	bl	800483a <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEEC1Ev>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	4618      	mov	r0, r3
 8006c28:	3708      	adds	r7, #8
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}

08006c2e <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEELb1EE6_M_getEv>:
      _Tp& _M_get() { return static_cast<_Tp&>(*this); }
 8006c2e:	b480      	push	{r7}
 8006c30:	b083      	sub	sp, #12
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4618      	mov	r0, r3
 8006c3a:	370c      	adds	r7, #12
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr

08006c44 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEE10deallocateEPS9_j>:
      deallocate(_Tp* __p, size_type __t)
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	60b9      	str	r1, [r7, #8]
 8006c4e:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	4613      	mov	r3, r2
 8006c54:	005b      	lsls	r3, r3, #1
 8006c56:	4413      	add	r3, r2
 8006c58:	00db      	lsls	r3, r3, #3
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	68b8      	ldr	r0, [r7, #8]
 8006c5e:	f00a f8c7 	bl	8010df0 <_ZdlPvj>
      }
 8006c62:	bf00      	nop
 8006c64:	3710      	adds	r7, #16
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}

08006c6a <_ZNSt4pairIKtSt8functionIFvvEEED1Ev>:
 8006c6a:	b580      	push	{r7, lr}
 8006c6c:	b082      	sub	sp, #8
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	3304      	adds	r3, #4
 8006c76:	4618      	mov	r0, r3
 8006c78:	f7fa fede 	bl	8001a38 <_ZNSt8functionIFvvEED1Ev>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3708      	adds	r7, #8
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}

08006c86 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEE7destroyIS8_EEvPT_>:
	destroy(_Up* __p)
 8006c86:	b580      	push	{r7, lr}
 8006c88:	b082      	sub	sp, #8
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	6078      	str	r0, [r7, #4]
 8006c8e:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8006c90:	6838      	ldr	r0, [r7, #0]
 8006c92:	f7ff ffea 	bl	8006c6a <_ZNSt4pairIKtSt8functionIFvvEEED1Ev>
 8006c96:	bf00      	nop
 8006c98:	3708      	adds	r7, #8
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}

08006c9e <_ZNSt14pointer_traitsIPNSt8__detail10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEE10pointer_toERS8_>:
      pointer_to(__make_not_void<element_type>& __r) noexcept
 8006c9e:	b580      	push	{r7, lr}
 8006ca0:	b082      	sub	sp, #8
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
      { return std::addressof(__r); }
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 f805 	bl	8006cb6 <_ZSt9addressofINSt8__detail10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEEPT_RS9_>
 8006cac:	4603      	mov	r3, r0
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3708      	adds	r7, #8
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}

08006cb6 <_ZSt9addressofINSt8__detail10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEEPT_RS9_>:
    addressof(_Tp& __r) noexcept
 8006cb6:	b580      	push	{r7, lr}
 8006cb8:	b082      	sub	sp, #8
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 f805 	bl	8006cce <_ZSt11__addressofINSt8__detail10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEEPT_RS9_>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3708      	adds	r7, #8
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}

08006cce <_ZSt11__addressofINSt8__detail10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEEPT_RS9_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8006cce:	b480      	push	{r7}
 8006cd0:	b083      	sub	sp, #12
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4618      	mov	r0, r3
 8006cda:	370c      	adds	r7, #12
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr

08006ce4 <_ZNSt13unordered_mapItSt8functionIFvvEESt4hashItESt8equal_toItESaISt4pairIKtS2_EEED1Ev>:
    class unordered_map
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b082      	sub	sp, #8
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f7ff fe23 	bl	800693a <_ZNSt10_HashtableItSt4pairIKtSt8functionIFvvEEESaIS5_ENSt8__detail10_Select1stESt8equal_toItESt4hashItENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb0ELb0ELb1EEEED1Ev>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3708      	adds	r7, #8
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
	...

08006d00 <_Z41__static_initialization_and_destruction_0ii>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
  auto itr = tutrc_harurobo_lib::GPIO::gpio_callbacks_.find(GPIO_Pin);
  if (itr != tutrc_harurobo_lib::GPIO::gpio_callbacks_.end()) {
    itr->second();
  }
}
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b082      	sub	sp, #8
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d107      	bne.n	8006d20 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d102      	bne.n	8006d20 <_Z41__static_initialization_and_destruction_0ii+0x20>
    tutrc_harurobo_lib::GPIO::gpio_callbacks_;
 8006d1a:	4809      	ldr	r0, [pc, #36]	; (8006d40 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8006d1c:	f7ff fde8 	bl	80068f0 <_ZNSt13unordered_mapItSt8functionIFvvEESt4hashItESt8equal_toItESaISt4pairIKtS2_EEEC1Ev>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d107      	bne.n	8006d36 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d102      	bne.n	8006d36 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8006d30:	4803      	ldr	r0, [pc, #12]	; (8006d40 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8006d32:	f7ff ffd7 	bl	8006ce4 <_ZNSt13unordered_mapItSt8functionIFvvEESt4hashItESt8equal_toItESaISt4pairIKtS2_EEED1Ev>
}
 8006d36:	bf00      	nop
 8006d38:	3708      	adds	r7, #8
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop
 8006d40:	240009ac 	.word	0x240009ac

08006d44 <_GLOBAL__sub_I__ZN18tutrc_harurobo_lib4GPIO15gpio_callbacks_E>:
 8006d44:	b580      	push	{r7, lr}
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006d4c:	2001      	movs	r0, #1
 8006d4e:	f7ff ffd7 	bl	8006d00 <_Z41__static_initialization_and_destruction_0ii>
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <_GLOBAL__sub_D__ZN18tutrc_harurobo_lib4GPIO15gpio_callbacks_E>:
 8006d54:	b580      	push	{r7, lr}
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006d5c:	2000      	movs	r0, #0
 8006d5e:	f7ff ffcf 	bl	8006d00 <_Z41__static_initialization_and_destruction_0ii>
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEELb1EEC1Ev>:
      _Hashtable_ebo_helper() = default;
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 f889 	bl	8006e84 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEC1Ev>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	4618      	mov	r0, r3
 8006d76:	3708      	adds	r7, #8
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEELb1EED1Ev>:
    struct _Hashtable_ebo_helper<_Nm, _Tp, true>
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b082      	sub	sp, #8
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f000 f889 	bl	8006e9c <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEED1Ev>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3708      	adds	r7, #8
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}

08006d94 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEEC1Ev>:
      _Hashtable_alloc() = default;
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b082      	sub	sp, #8
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f7ff ffe1 	bl	8006d64 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEELb1EEC1Ev>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	4618      	mov	r0, r3
 8006da6:	3708      	adds	r7, #8
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEED1Ev>:
    struct _Hashtable_alloc : private _Hashtable_ebo_helper<0, _NodeAlloc>
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b082      	sub	sp, #8
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f7ff ffe1 	bl	8006d7c <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEELb1EED1Ev>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3708      	adds	r7, #8
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEEC1Ev>:
      _Hashtable() = default;
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b082      	sub	sp, #8
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f7ff ffe1 	bl	8006d94 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEEC1Ev>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f103 0218 	add.w	r2, r3, #24
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	601a      	str	r2, [r3, #0]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2201      	movs	r2, #1
 8006de0:	605a      	str	r2, [r3, #4]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	3308      	adds	r3, #8
 8006de6:	4618      	mov	r0, r3
 8006de8:	f7f9 ff09 	bl	8000bfe <_ZNSt8__detail15_Hash_node_baseC1Ev>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	60da      	str	r2, [r3, #12]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	3310      	adds	r3, #16
 8006df6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f7ff fb11 	bl	8006422 <_ZNSt8__detail20_Prime_rehash_policyC1Ef>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	619a      	str	r2, [r3, #24]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3708      	adds	r7, #8
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}

08006e10 <_ZNSt13unordered_mapIP17TIM_HandleTypeDefSt8functionIFvvEESt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_S4_EEEC1Ev>:
      unordered_map() = default;
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b082      	sub	sp, #8
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f7ff ffd2 	bl	8006dc4 <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEEC1Ev>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4618      	mov	r0, r3
 8006e24:	3708      	adds	r7, #8
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
	...

08006e2c <HAL_TIM_PeriodElapsedCallback>:
#ifdef HAL_TIM_MODULE_ENABLED

std::unordered_map<TIM_HandleTypeDef *, std::function<void()>>
    tutrc_harurobo_lib::Timer::timer_callbacks_;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  auto itr = tutrc_harurobo_lib::Timer::timer_callbacks_.find(htim);
 8006e34:	1d3b      	adds	r3, r7, #4
 8006e36:	4619      	mov	r1, r3
 8006e38:	4811      	ldr	r0, [pc, #68]	; (8006e80 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8006e3a:	f000 f84d 	bl	8006ed8 <_ZNSt13unordered_mapIP17TIM_HandleTypeDefSt8functionIFvvEESt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_S4_EEE4findERSA_>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	60bb      	str	r3, [r7, #8]
  if (itr != tutrc_harurobo_lib::Timer::timer_callbacks_.end()) {
 8006e42:	480f      	ldr	r0, [pc, #60]	; (8006e80 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8006e44:	f000 f857 	bl	8006ef6 <_ZNSt13unordered_mapIP17TIM_HandleTypeDefSt8functionIFvvEESt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_S4_EEE3endEv>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	60fb      	str	r3, [r7, #12]
 8006e4c:	f107 020c 	add.w	r2, r7, #12
 8006e50:	f107 0308 	add.w	r3, r7, #8
 8006e54:	4611      	mov	r1, r2
 8006e56:	4618      	mov	r0, r3
 8006e58:	f000 f85a 	bl	8006f10 <_ZNSt8__detailneISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEbRKNS_19_Node_iterator_baseIT_XT0_EEESD_>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d009      	beq.n	8006e76 <HAL_TIM_PeriodElapsedCallback+0x4a>
    itr->second();
 8006e62:	f107 0308 	add.w	r3, r7, #8
 8006e66:	4618      	mov	r0, r3
 8006e68:	f7fb fe56 	bl	8002b18 <_ZNKSt8__detail14_Node_iteratorISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0ELb0EEptEv>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	3304      	adds	r3, #4
 8006e70:	4618      	mov	r0, r3
 8006e72:	f7ff fd74 	bl	800695e <_ZNKSt8functionIFvvEEclEv>
  }
}
 8006e76:	bf00      	nop
 8006e78:	3710      	adds	r7, #16
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	240009c8 	.word	0x240009c8

08006e84 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b082      	sub	sp, #8
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 f853 	bl	8006f38 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEC1Ev>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	4618      	mov	r0, r3
 8006e96:	3708      	adds	r7, #8
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b082      	sub	sp, #8
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 f852 	bl	8006f4e <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEED1Ev>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	4618      	mov	r0, r3
 8006eae:	3708      	adds	r7, #8
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}

08006eb4 <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEED1Ev>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b082      	sub	sp, #8
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
      clear();
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f000 f851 	bl	8006f64 <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE5clearEv>
      _M_deallocate_buckets();
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f7fd f8ec 	bl	80040a0 <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>
    }
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f7ff ff6f 	bl	8006dac <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEED1Ev>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3708      	adds	r7, #8
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <_ZNSt13unordered_mapIP17TIM_HandleTypeDefSt8functionIFvvEESt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_S4_EEE4findERSA_>:
      find(const key_type& __x)
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b082      	sub	sp, #8
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	6039      	str	r1, [r7, #0]
      { return _M_h.find(__x); }
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6839      	ldr	r1, [r7, #0]
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f000 f85c 	bl	8006fa4 <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE4findERS3_>
 8006eec:	4603      	mov	r3, r0
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3708      	adds	r7, #8
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}

08006ef6 <_ZNSt13unordered_mapIP17TIM_HandleTypeDefSt8functionIFvvEESt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_S4_EEE3endEv>:
      end() noexcept
 8006ef6:	b580      	push	{r7, lr}
 8006ef8:	b082      	sub	sp, #8
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]
      { return _M_h.end(); }
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	4618      	mov	r0, r3
 8006f02:	f000 f87a 	bl	8006ffa <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE3endEv>
 8006f06:	4603      	mov	r3, r0
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3708      	adds	r7, #8
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}

08006f10 <_ZNSt8__detailneISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEbRKNS_19_Node_iterator_baseIT_XT0_EEESD_>:
    operator!=(const _Node_iterator_base<_Value, _Cache_hash_code>& __x,
 8006f10:	b480      	push	{r7}
 8006f12:	b083      	sub	sp, #12
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	6039      	str	r1, [r7, #0]
    { return __x._M_cur != __y._M_cur; }
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	429a      	cmp	r2, r3
 8006f24:	bf14      	ite	ne
 8006f26:	2301      	movne	r3, #1
 8006f28:	2300      	moveq	r3, #0
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	370c      	adds	r7, #12
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8006f38:	b480      	push	{r7}
 8006f3a:	b083      	sub	sp, #12
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	4618      	mov	r0, r3
 8006f44:	370c      	adds	r7, #12
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr

08006f4e <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8006f4e:	b480      	push	{r7}
 8006f50:	b083      	sub	sp, #12
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4618      	mov	r0, r3
 8006f5a:	370c      	adds	r7, #12
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr

08006f64 <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE5clearEv>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b082      	sub	sp, #8
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
      this->_M_deallocate_nodes(_M_begin());
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f7fd f88b 	bl	8004088 <_ZNKSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 8006f72:	4603      	mov	r3, r0
 8006f74:	4619      	mov	r1, r3
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 f84e 	bl	8007018 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEE19_M_deallocate_nodesEPSA_>
      __builtin_memset(_M_buckets, 0, _M_bucket_count * sizeof(__bucket_type));
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	4610      	mov	r0, r2
 8006f88:	461a      	mov	r2, r3
 8006f8a:	2100      	movs	r1, #0
 8006f8c:	f00a fe7a 	bl	8011c84 <memset>
      _M_element_count = 0;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2200      	movs	r2, #0
 8006f94:	60da      	str	r2, [r3, #12]
      _M_before_begin._M_nxt = nullptr;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	609a      	str	r2, [r3, #8]
    }
 8006f9c:	bf00      	nop
 8006f9e:	3708      	adds	r7, #8
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE4findERS3_>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b086      	sub	sp, #24
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]
      __hash_code __code = this->_M_hash_code(__k);
 8006fae:	6839      	ldr	r1, [r7, #0]
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f7fb fcd7 	bl	8002964 <_ZNKSt8__detail15_Hash_code_baseIP17TIM_HandleTypeDefSt4pairIKS2_St8functionIFvvEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS4_>
 8006fb6:	6178      	str	r0, [r7, #20]
      std::size_t __bkt = _M_bucket_index(__k, __code);
 8006fb8:	697a      	ldr	r2, [r7, #20]
 8006fba:	6839      	ldr	r1, [r7, #0]
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f7fb fce5 	bl	800298c <_ZNKSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERS3_j>
 8006fc2:	6138      	str	r0, [r7, #16]
      __node_type* __p = _M_find_node(__bkt, __k, __code);
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	683a      	ldr	r2, [r7, #0]
 8006fc8:	6939      	ldr	r1, [r7, #16]
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f7fb fcf0 	bl	80029b0 <_ZNKSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS3_j>
 8006fd0:	60f8      	str	r0, [r7, #12]
      return __p ? iterator(__p) : end();
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d006      	beq.n	8006fe6 <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE4findERS3_+0x42>
 8006fd8:	f107 0308 	add.w	r3, r7, #8
 8006fdc:	68f9      	ldr	r1, [r7, #12]
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f7fc f9fc 	bl	80033dc <_ZNSt8__detail14_Node_iteratorISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0ELb0EEC1EPNS_10_Hash_nodeIS8_Lb0EEE>
 8006fe4:	e004      	b.n	8006ff0 <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE4findERS3_+0x4c>
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 f807 	bl	8006ffa <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE3endEv>
 8006fec:	4603      	mov	r3, r0
 8006fee:	60bb      	str	r3, [r7, #8]
 8006ff0:	68bb      	ldr	r3, [r7, #8]
    }
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3718      	adds	r7, #24
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}

08006ffa <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE3endEv>:
      end() noexcept
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	b084      	sub	sp, #16
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
      { return iterator(nullptr); }
 8007002:	f107 030c 	add.w	r3, r7, #12
 8007006:	2100      	movs	r1, #0
 8007008:	4618      	mov	r0, r3
 800700a:	f7fc f9e7 	bl	80033dc <_ZNSt8__detail14_Node_iteratorISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0ELb0EEC1EPNS_10_Hash_nodeIS8_Lb0EEE>
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	4618      	mov	r0, r3
 8007012:	3710      	adds	r7, #16
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEE19_M_deallocate_nodesEPSA_>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_nodes(__node_type* __n)
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
      while (__n)
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d00a      	beq.n	800703e <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEE19_M_deallocate_nodesEPSA_+0x26>
	  __node_type* __tmp = __n;
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	60fb      	str	r3, [r7, #12]
	  __n = __n->_M_next();
 800702c:	6838      	ldr	r0, [r7, #0]
 800702e:	f7fc fbf3 	bl	8003818 <_ZNKSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EE7_M_nextEv>
 8007032:	6038      	str	r0, [r7, #0]
	  _M_deallocate_node(__tmp);
 8007034:	68f9      	ldr	r1, [r7, #12]
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f7fc f955 	bl	80032e6 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEE18_M_deallocate_nodeEPSA_>
      while (__n)
 800703c:	e7f1      	b.n	8007022 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEE19_M_deallocate_nodesEPSA_+0xa>
    }
 800703e:	bf00      	nop
 8007040:	3710      	adds	r7, #16
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}

08007046 <_ZNSt13unordered_mapIP17TIM_HandleTypeDefSt8functionIFvvEESt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_S4_EEED1Ev>:
    class unordered_map
 8007046:	b580      	push	{r7, lr}
 8007048:	b082      	sub	sp, #8
 800704a:	af00      	add	r7, sp, #0
 800704c:	6078      	str	r0, [r7, #4]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	4618      	mov	r0, r3
 8007052:	f7ff ff2f 	bl	8006eb4 <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEED1Ev>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4618      	mov	r0, r3
 800705a:	3708      	adds	r7, #8
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <_Z41__static_initialization_and_destruction_0ii>:
 8007060:	b580      	push	{r7, lr}
 8007062:	b082      	sub	sp, #8
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2b01      	cmp	r3, #1
 800706e:	d107      	bne.n	8007080 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007076:	4293      	cmp	r3, r2
 8007078:	d102      	bne.n	8007080 <_Z41__static_initialization_and_destruction_0ii+0x20>
    tutrc_harurobo_lib::Timer::timer_callbacks_;
 800707a:	4809      	ldr	r0, [pc, #36]	; (80070a0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800707c:	f7ff fec8 	bl	8006e10 <_ZNSt13unordered_mapIP17TIM_HandleTypeDefSt8functionIFvvEESt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_S4_EEEC1Ev>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d107      	bne.n	8007096 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800708c:	4293      	cmp	r3, r2
 800708e:	d102      	bne.n	8007096 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8007090:	4803      	ldr	r0, [pc, #12]	; (80070a0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8007092:	f7ff ffd8 	bl	8007046 <_ZNSt13unordered_mapIP17TIM_HandleTypeDefSt8functionIFvvEESt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_S4_EEED1Ev>
}
 8007096:	bf00      	nop
 8007098:	3708      	adds	r7, #8
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}
 800709e:	bf00      	nop
 80070a0:	240009c8 	.word	0x240009c8

080070a4 <_GLOBAL__sub_I__ZN18tutrc_harurobo_lib5Timer16timer_callbacks_E>:
 80070a4:	b580      	push	{r7, lr}
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80070ac:	2001      	movs	r0, #1
 80070ae:	f7ff ffd7 	bl	8007060 <_Z41__static_initialization_and_destruction_0ii>
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <_GLOBAL__sub_D__ZN18tutrc_harurobo_lib5Timer16timer_callbacks_E>:
 80070b4:	b580      	push	{r7, lr}
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80070bc:	2000      	movs	r0, #0
 80070be:	f7ff ffcf 	bl	8007060 <_Z41__static_initialization_and_destruction_0ii>
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80070c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80070fc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80070c8:	f7ff f912 	bl	80062f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80070cc:	480c      	ldr	r0, [pc, #48]	; (8007100 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80070ce:	490d      	ldr	r1, [pc, #52]	; (8007104 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80070d0:	4a0d      	ldr	r2, [pc, #52]	; (8007108 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80070d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80070d4:	e002      	b.n	80070dc <LoopCopyDataInit>

080070d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80070d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80070d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80070da:	3304      	adds	r3, #4

080070dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80070dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80070de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80070e0:	d3f9      	bcc.n	80070d6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80070e2:	4a0a      	ldr	r2, [pc, #40]	; (800710c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80070e4:	4c0a      	ldr	r4, [pc, #40]	; (8007110 <LoopFillZerobss+0x22>)
  movs r3, #0
 80070e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80070e8:	e001      	b.n	80070ee <LoopFillZerobss>

080070ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80070ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80070ec:	3204      	adds	r2, #4

080070ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80070ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80070f0:	d3fb      	bcc.n	80070ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80070f2:	f00a fd85 	bl	8011c00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80070f6:	f7fd fc8d 	bl	8004a14 <main>
  bx  lr
 80070fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80070fc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8007100:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8007104:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 8007108:	08015014 	.word	0x08015014
  ldr r2, =_sbss
 800710c:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 8007110:	240009fc 	.word	0x240009fc

08007114 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007114:	e7fe      	b.n	8007114 <ADC3_IRQHandler>
	...

08007118 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b082      	sub	sp, #8
 800711c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800711e:	2003      	movs	r0, #3
 8007120:	f000 f98c 	bl	800743c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007124:	f005 f9ec 	bl	800c500 <HAL_RCC_GetSysClockFreq>
 8007128:	4602      	mov	r2, r0
 800712a:	4b15      	ldr	r3, [pc, #84]	; (8007180 <HAL_Init+0x68>)
 800712c:	699b      	ldr	r3, [r3, #24]
 800712e:	0a1b      	lsrs	r3, r3, #8
 8007130:	f003 030f 	and.w	r3, r3, #15
 8007134:	4913      	ldr	r1, [pc, #76]	; (8007184 <HAL_Init+0x6c>)
 8007136:	5ccb      	ldrb	r3, [r1, r3]
 8007138:	f003 031f 	and.w	r3, r3, #31
 800713c:	fa22 f303 	lsr.w	r3, r2, r3
 8007140:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007142:	4b0f      	ldr	r3, [pc, #60]	; (8007180 <HAL_Init+0x68>)
 8007144:	699b      	ldr	r3, [r3, #24]
 8007146:	f003 030f 	and.w	r3, r3, #15
 800714a:	4a0e      	ldr	r2, [pc, #56]	; (8007184 <HAL_Init+0x6c>)
 800714c:	5cd3      	ldrb	r3, [r2, r3]
 800714e:	f003 031f 	and.w	r3, r3, #31
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	fa22 f303 	lsr.w	r3, r2, r3
 8007158:	4a0b      	ldr	r2, [pc, #44]	; (8007188 <HAL_Init+0x70>)
 800715a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800715c:	4a0b      	ldr	r2, [pc, #44]	; (800718c <HAL_Init+0x74>)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007162:	200f      	movs	r0, #15
 8007164:	f000 f814 	bl	8007190 <HAL_InitTick>
 8007168:	4603      	mov	r3, r0
 800716a:	2b00      	cmp	r3, #0
 800716c:	d001      	beq.n	8007172 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800716e:	2301      	movs	r3, #1
 8007170:	e002      	b.n	8007178 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8007172:	f7fe faa5 	bl	80056c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007176:	2300      	movs	r3, #0
}
 8007178:	4618      	mov	r0, r3
 800717a:	3708      	adds	r7, #8
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}
 8007180:	58024400 	.word	0x58024400
 8007184:	080145d4 	.word	0x080145d4
 8007188:	24000004 	.word	0x24000004
 800718c:	24000000 	.word	0x24000000

08007190 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b082      	sub	sp, #8
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8007198:	4b15      	ldr	r3, [pc, #84]	; (80071f0 <HAL_InitTick+0x60>)
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d101      	bne.n	80071a4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80071a0:	2301      	movs	r3, #1
 80071a2:	e021      	b.n	80071e8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80071a4:	4b13      	ldr	r3, [pc, #76]	; (80071f4 <HAL_InitTick+0x64>)
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	4b11      	ldr	r3, [pc, #68]	; (80071f0 <HAL_InitTick+0x60>)
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	4619      	mov	r1, r3
 80071ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80071b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80071b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80071ba:	4618      	mov	r0, r3
 80071bc:	f000 f971 	bl	80074a2 <HAL_SYSTICK_Config>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d001      	beq.n	80071ca <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	e00e      	b.n	80071e8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2b0f      	cmp	r3, #15
 80071ce:	d80a      	bhi.n	80071e6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80071d0:	2200      	movs	r2, #0
 80071d2:	6879      	ldr	r1, [r7, #4]
 80071d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80071d8:	f000 f93b 	bl	8007452 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80071dc:	4a06      	ldr	r2, [pc, #24]	; (80071f8 <HAL_InitTick+0x68>)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80071e2:	2300      	movs	r3, #0
 80071e4:	e000      	b.n	80071e8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3708      	adds	r7, #8
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}
 80071f0:	2400000c 	.word	0x2400000c
 80071f4:	24000000 	.word	0x24000000
 80071f8:	24000008 	.word	0x24000008

080071fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80071fc:	b480      	push	{r7}
 80071fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007200:	4b06      	ldr	r3, [pc, #24]	; (800721c <HAL_IncTick+0x20>)
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	461a      	mov	r2, r3
 8007206:	4b06      	ldr	r3, [pc, #24]	; (8007220 <HAL_IncTick+0x24>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4413      	add	r3, r2
 800720c:	4a04      	ldr	r2, [pc, #16]	; (8007220 <HAL_IncTick+0x24>)
 800720e:	6013      	str	r3, [r2, #0]
}
 8007210:	bf00      	nop
 8007212:	46bd      	mov	sp, r7
 8007214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007218:	4770      	bx	lr
 800721a:	bf00      	nop
 800721c:	2400000c 	.word	0x2400000c
 8007220:	240009e4 	.word	0x240009e4

08007224 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007224:	b480      	push	{r7}
 8007226:	af00      	add	r7, sp, #0
  return uwTick;
 8007228:	4b03      	ldr	r3, [pc, #12]	; (8007238 <HAL_GetTick+0x14>)
 800722a:	681b      	ldr	r3, [r3, #0]
}
 800722c:	4618      	mov	r0, r3
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr
 8007236:	bf00      	nop
 8007238:	240009e4 	.word	0x240009e4

0800723c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007244:	f7ff ffee 	bl	8007224 <HAL_GetTick>
 8007248:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007254:	d005      	beq.n	8007262 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007256:	4b0a      	ldr	r3, [pc, #40]	; (8007280 <HAL_Delay+0x44>)
 8007258:	781b      	ldrb	r3, [r3, #0]
 800725a:	461a      	mov	r2, r3
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	4413      	add	r3, r2
 8007260:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007262:	bf00      	nop
 8007264:	f7ff ffde 	bl	8007224 <HAL_GetTick>
 8007268:	4602      	mov	r2, r0
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	1ad3      	subs	r3, r2, r3
 800726e:	68fa      	ldr	r2, [r7, #12]
 8007270:	429a      	cmp	r2, r3
 8007272:	d8f7      	bhi.n	8007264 <HAL_Delay+0x28>
  {
  }
}
 8007274:	bf00      	nop
 8007276:	bf00      	nop
 8007278:	3710      	adds	r7, #16
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop
 8007280:	2400000c 	.word	0x2400000c

08007284 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8007284:	b480      	push	{r7}
 8007286:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8007288:	4b03      	ldr	r3, [pc, #12]	; (8007298 <HAL_GetREVID+0x14>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	0c1b      	lsrs	r3, r3, #16
}
 800728e:	4618      	mov	r0, r3
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr
 8007298:	5c001000 	.word	0x5c001000

0800729c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800729c:	b480      	push	{r7}
 800729e:	b085      	sub	sp, #20
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f003 0307 	and.w	r3, r3, #7
 80072aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80072ac:	4b0b      	ldr	r3, [pc, #44]	; (80072dc <__NVIC_SetPriorityGrouping+0x40>)
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80072b2:	68ba      	ldr	r2, [r7, #8]
 80072b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80072b8:	4013      	ands	r3, r2
 80072ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80072c4:	4b06      	ldr	r3, [pc, #24]	; (80072e0 <__NVIC_SetPriorityGrouping+0x44>)
 80072c6:	4313      	orrs	r3, r2
 80072c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80072ca:	4a04      	ldr	r2, [pc, #16]	; (80072dc <__NVIC_SetPriorityGrouping+0x40>)
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	60d3      	str	r3, [r2, #12]
}
 80072d0:	bf00      	nop
 80072d2:	3714      	adds	r7, #20
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr
 80072dc:	e000ed00 	.word	0xe000ed00
 80072e0:	05fa0000 	.word	0x05fa0000

080072e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80072e4:	b480      	push	{r7}
 80072e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80072e8:	4b04      	ldr	r3, [pc, #16]	; (80072fc <__NVIC_GetPriorityGrouping+0x18>)
 80072ea:	68db      	ldr	r3, [r3, #12]
 80072ec:	0a1b      	lsrs	r3, r3, #8
 80072ee:	f003 0307 	and.w	r3, r3, #7
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr
 80072fc:	e000ed00 	.word	0xe000ed00

08007300 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007300:	b480      	push	{r7}
 8007302:	b083      	sub	sp, #12
 8007304:	af00      	add	r7, sp, #0
 8007306:	4603      	mov	r3, r0
 8007308:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800730a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800730e:	2b00      	cmp	r3, #0
 8007310:	db0b      	blt.n	800732a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007312:	88fb      	ldrh	r3, [r7, #6]
 8007314:	f003 021f 	and.w	r2, r3, #31
 8007318:	4907      	ldr	r1, [pc, #28]	; (8007338 <__NVIC_EnableIRQ+0x38>)
 800731a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800731e:	095b      	lsrs	r3, r3, #5
 8007320:	2001      	movs	r0, #1
 8007322:	fa00 f202 	lsl.w	r2, r0, r2
 8007326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800732a:	bf00      	nop
 800732c:	370c      	adds	r7, #12
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr
 8007336:	bf00      	nop
 8007338:	e000e100 	.word	0xe000e100

0800733c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800733c:	b480      	push	{r7}
 800733e:	b083      	sub	sp, #12
 8007340:	af00      	add	r7, sp, #0
 8007342:	4603      	mov	r3, r0
 8007344:	6039      	str	r1, [r7, #0]
 8007346:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007348:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800734c:	2b00      	cmp	r3, #0
 800734e:	db0a      	blt.n	8007366 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	b2da      	uxtb	r2, r3
 8007354:	490c      	ldr	r1, [pc, #48]	; (8007388 <__NVIC_SetPriority+0x4c>)
 8007356:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800735a:	0112      	lsls	r2, r2, #4
 800735c:	b2d2      	uxtb	r2, r2
 800735e:	440b      	add	r3, r1
 8007360:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007364:	e00a      	b.n	800737c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	b2da      	uxtb	r2, r3
 800736a:	4908      	ldr	r1, [pc, #32]	; (800738c <__NVIC_SetPriority+0x50>)
 800736c:	88fb      	ldrh	r3, [r7, #6]
 800736e:	f003 030f 	and.w	r3, r3, #15
 8007372:	3b04      	subs	r3, #4
 8007374:	0112      	lsls	r2, r2, #4
 8007376:	b2d2      	uxtb	r2, r2
 8007378:	440b      	add	r3, r1
 800737a:	761a      	strb	r2, [r3, #24]
}
 800737c:	bf00      	nop
 800737e:	370c      	adds	r7, #12
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr
 8007388:	e000e100 	.word	0xe000e100
 800738c:	e000ed00 	.word	0xe000ed00

08007390 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007390:	b480      	push	{r7}
 8007392:	b089      	sub	sp, #36	; 0x24
 8007394:	af00      	add	r7, sp, #0
 8007396:	60f8      	str	r0, [r7, #12]
 8007398:	60b9      	str	r1, [r7, #8]
 800739a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f003 0307 	and.w	r3, r3, #7
 80073a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80073a4:	69fb      	ldr	r3, [r7, #28]
 80073a6:	f1c3 0307 	rsb	r3, r3, #7
 80073aa:	2b04      	cmp	r3, #4
 80073ac:	bf28      	it	cs
 80073ae:	2304      	movcs	r3, #4
 80073b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80073b2:	69fb      	ldr	r3, [r7, #28]
 80073b4:	3304      	adds	r3, #4
 80073b6:	2b06      	cmp	r3, #6
 80073b8:	d902      	bls.n	80073c0 <NVIC_EncodePriority+0x30>
 80073ba:	69fb      	ldr	r3, [r7, #28]
 80073bc:	3b03      	subs	r3, #3
 80073be:	e000      	b.n	80073c2 <NVIC_EncodePriority+0x32>
 80073c0:	2300      	movs	r3, #0
 80073c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80073c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80073c8:	69bb      	ldr	r3, [r7, #24]
 80073ca:	fa02 f303 	lsl.w	r3, r2, r3
 80073ce:	43da      	mvns	r2, r3
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	401a      	ands	r2, r3
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80073d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	fa01 f303 	lsl.w	r3, r1, r3
 80073e2:	43d9      	mvns	r1, r3
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80073e8:	4313      	orrs	r3, r2
         );
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3724      	adds	r7, #36	; 0x24
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr
	...

080073f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b082      	sub	sp, #8
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	3b01      	subs	r3, #1
 8007404:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007408:	d301      	bcc.n	800740e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800740a:	2301      	movs	r3, #1
 800740c:	e00f      	b.n	800742e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800740e:	4a0a      	ldr	r2, [pc, #40]	; (8007438 <SysTick_Config+0x40>)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	3b01      	subs	r3, #1
 8007414:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007416:	210f      	movs	r1, #15
 8007418:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800741c:	f7ff ff8e 	bl	800733c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007420:	4b05      	ldr	r3, [pc, #20]	; (8007438 <SysTick_Config+0x40>)
 8007422:	2200      	movs	r2, #0
 8007424:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007426:	4b04      	ldr	r3, [pc, #16]	; (8007438 <SysTick_Config+0x40>)
 8007428:	2207      	movs	r2, #7
 800742a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800742c:	2300      	movs	r3, #0
}
 800742e:	4618      	mov	r0, r3
 8007430:	3708      	adds	r7, #8
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
 8007436:	bf00      	nop
 8007438:	e000e010 	.word	0xe000e010

0800743c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b082      	sub	sp, #8
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f7ff ff29 	bl	800729c <__NVIC_SetPriorityGrouping>
}
 800744a:	bf00      	nop
 800744c:	3708      	adds	r7, #8
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}

08007452 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007452:	b580      	push	{r7, lr}
 8007454:	b086      	sub	sp, #24
 8007456:	af00      	add	r7, sp, #0
 8007458:	4603      	mov	r3, r0
 800745a:	60b9      	str	r1, [r7, #8]
 800745c:	607a      	str	r2, [r7, #4]
 800745e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007460:	f7ff ff40 	bl	80072e4 <__NVIC_GetPriorityGrouping>
 8007464:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	68b9      	ldr	r1, [r7, #8]
 800746a:	6978      	ldr	r0, [r7, #20]
 800746c:	f7ff ff90 	bl	8007390 <NVIC_EncodePriority>
 8007470:	4602      	mov	r2, r0
 8007472:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007476:	4611      	mov	r1, r2
 8007478:	4618      	mov	r0, r3
 800747a:	f7ff ff5f 	bl	800733c <__NVIC_SetPriority>
}
 800747e:	bf00      	nop
 8007480:	3718      	adds	r7, #24
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}

08007486 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007486:	b580      	push	{r7, lr}
 8007488:	b082      	sub	sp, #8
 800748a:	af00      	add	r7, sp, #0
 800748c:	4603      	mov	r3, r0
 800748e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007490:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007494:	4618      	mov	r0, r3
 8007496:	f7ff ff33 	bl	8007300 <__NVIC_EnableIRQ>
}
 800749a:	bf00      	nop
 800749c:	3708      	adds	r7, #8
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}

080074a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80074a2:	b580      	push	{r7, lr}
 80074a4:	b082      	sub	sp, #8
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f7ff ffa4 	bl	80073f8 <SysTick_Config>
 80074b0:	4603      	mov	r3, r0
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3708      	adds	r7, #8
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}
	...

080074bc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b086      	sub	sp, #24
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80074c4:	f7ff feae 	bl	8007224 <HAL_GetTick>
 80074c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d101      	bne.n	80074d4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80074d0:	2301      	movs	r3, #1
 80074d2:	e316      	b.n	8007b02 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a66      	ldr	r2, [pc, #408]	; (8007674 <HAL_DMA_Init+0x1b8>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d04a      	beq.n	8007574 <HAL_DMA_Init+0xb8>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a65      	ldr	r2, [pc, #404]	; (8007678 <HAL_DMA_Init+0x1bc>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d045      	beq.n	8007574 <HAL_DMA_Init+0xb8>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a63      	ldr	r2, [pc, #396]	; (800767c <HAL_DMA_Init+0x1c0>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d040      	beq.n	8007574 <HAL_DMA_Init+0xb8>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a62      	ldr	r2, [pc, #392]	; (8007680 <HAL_DMA_Init+0x1c4>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d03b      	beq.n	8007574 <HAL_DMA_Init+0xb8>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a60      	ldr	r2, [pc, #384]	; (8007684 <HAL_DMA_Init+0x1c8>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d036      	beq.n	8007574 <HAL_DMA_Init+0xb8>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a5f      	ldr	r2, [pc, #380]	; (8007688 <HAL_DMA_Init+0x1cc>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d031      	beq.n	8007574 <HAL_DMA_Init+0xb8>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a5d      	ldr	r2, [pc, #372]	; (800768c <HAL_DMA_Init+0x1d0>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d02c      	beq.n	8007574 <HAL_DMA_Init+0xb8>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a5c      	ldr	r2, [pc, #368]	; (8007690 <HAL_DMA_Init+0x1d4>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d027      	beq.n	8007574 <HAL_DMA_Init+0xb8>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a5a      	ldr	r2, [pc, #360]	; (8007694 <HAL_DMA_Init+0x1d8>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d022      	beq.n	8007574 <HAL_DMA_Init+0xb8>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a59      	ldr	r2, [pc, #356]	; (8007698 <HAL_DMA_Init+0x1dc>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d01d      	beq.n	8007574 <HAL_DMA_Init+0xb8>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a57      	ldr	r2, [pc, #348]	; (800769c <HAL_DMA_Init+0x1e0>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d018      	beq.n	8007574 <HAL_DMA_Init+0xb8>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a56      	ldr	r2, [pc, #344]	; (80076a0 <HAL_DMA_Init+0x1e4>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d013      	beq.n	8007574 <HAL_DMA_Init+0xb8>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a54      	ldr	r2, [pc, #336]	; (80076a4 <HAL_DMA_Init+0x1e8>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d00e      	beq.n	8007574 <HAL_DMA_Init+0xb8>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a53      	ldr	r2, [pc, #332]	; (80076a8 <HAL_DMA_Init+0x1ec>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d009      	beq.n	8007574 <HAL_DMA_Init+0xb8>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a51      	ldr	r2, [pc, #324]	; (80076ac <HAL_DMA_Init+0x1f0>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d004      	beq.n	8007574 <HAL_DMA_Init+0xb8>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a50      	ldr	r2, [pc, #320]	; (80076b0 <HAL_DMA_Init+0x1f4>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d101      	bne.n	8007578 <HAL_DMA_Init+0xbc>
 8007574:	2301      	movs	r3, #1
 8007576:	e000      	b.n	800757a <HAL_DMA_Init+0xbe>
 8007578:	2300      	movs	r3, #0
 800757a:	2b00      	cmp	r3, #0
 800757c:	f000 813b 	beq.w	80077f6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2202      	movs	r2, #2
 8007584:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a37      	ldr	r2, [pc, #220]	; (8007674 <HAL_DMA_Init+0x1b8>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d04a      	beq.n	8007630 <HAL_DMA_Init+0x174>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a36      	ldr	r2, [pc, #216]	; (8007678 <HAL_DMA_Init+0x1bc>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d045      	beq.n	8007630 <HAL_DMA_Init+0x174>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a34      	ldr	r2, [pc, #208]	; (800767c <HAL_DMA_Init+0x1c0>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d040      	beq.n	8007630 <HAL_DMA_Init+0x174>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a33      	ldr	r2, [pc, #204]	; (8007680 <HAL_DMA_Init+0x1c4>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d03b      	beq.n	8007630 <HAL_DMA_Init+0x174>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a31      	ldr	r2, [pc, #196]	; (8007684 <HAL_DMA_Init+0x1c8>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d036      	beq.n	8007630 <HAL_DMA_Init+0x174>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a30      	ldr	r2, [pc, #192]	; (8007688 <HAL_DMA_Init+0x1cc>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d031      	beq.n	8007630 <HAL_DMA_Init+0x174>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a2e      	ldr	r2, [pc, #184]	; (800768c <HAL_DMA_Init+0x1d0>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d02c      	beq.n	8007630 <HAL_DMA_Init+0x174>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a2d      	ldr	r2, [pc, #180]	; (8007690 <HAL_DMA_Init+0x1d4>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d027      	beq.n	8007630 <HAL_DMA_Init+0x174>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a2b      	ldr	r2, [pc, #172]	; (8007694 <HAL_DMA_Init+0x1d8>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d022      	beq.n	8007630 <HAL_DMA_Init+0x174>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a2a      	ldr	r2, [pc, #168]	; (8007698 <HAL_DMA_Init+0x1dc>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d01d      	beq.n	8007630 <HAL_DMA_Init+0x174>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a28      	ldr	r2, [pc, #160]	; (800769c <HAL_DMA_Init+0x1e0>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d018      	beq.n	8007630 <HAL_DMA_Init+0x174>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a27      	ldr	r2, [pc, #156]	; (80076a0 <HAL_DMA_Init+0x1e4>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d013      	beq.n	8007630 <HAL_DMA_Init+0x174>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a25      	ldr	r2, [pc, #148]	; (80076a4 <HAL_DMA_Init+0x1e8>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d00e      	beq.n	8007630 <HAL_DMA_Init+0x174>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a24      	ldr	r2, [pc, #144]	; (80076a8 <HAL_DMA_Init+0x1ec>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d009      	beq.n	8007630 <HAL_DMA_Init+0x174>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a22      	ldr	r2, [pc, #136]	; (80076ac <HAL_DMA_Init+0x1f0>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d004      	beq.n	8007630 <HAL_DMA_Init+0x174>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a21      	ldr	r2, [pc, #132]	; (80076b0 <HAL_DMA_Init+0x1f4>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d108      	bne.n	8007642 <HAL_DMA_Init+0x186>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	681a      	ldr	r2, [r3, #0]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f022 0201 	bic.w	r2, r2, #1
 800763e:	601a      	str	r2, [r3, #0]
 8007640:	e007      	b.n	8007652 <HAL_DMA_Init+0x196>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	681a      	ldr	r2, [r3, #0]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f022 0201 	bic.w	r2, r2, #1
 8007650:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007652:	e02f      	b.n	80076b4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007654:	f7ff fde6 	bl	8007224 <HAL_GetTick>
 8007658:	4602      	mov	r2, r0
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	1ad3      	subs	r3, r2, r3
 800765e:	2b05      	cmp	r3, #5
 8007660:	d928      	bls.n	80076b4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2220      	movs	r2, #32
 8007666:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2203      	movs	r2, #3
 800766c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8007670:	2301      	movs	r3, #1
 8007672:	e246      	b.n	8007b02 <HAL_DMA_Init+0x646>
 8007674:	40020010 	.word	0x40020010
 8007678:	40020028 	.word	0x40020028
 800767c:	40020040 	.word	0x40020040
 8007680:	40020058 	.word	0x40020058
 8007684:	40020070 	.word	0x40020070
 8007688:	40020088 	.word	0x40020088
 800768c:	400200a0 	.word	0x400200a0
 8007690:	400200b8 	.word	0x400200b8
 8007694:	40020410 	.word	0x40020410
 8007698:	40020428 	.word	0x40020428
 800769c:	40020440 	.word	0x40020440
 80076a0:	40020458 	.word	0x40020458
 80076a4:	40020470 	.word	0x40020470
 80076a8:	40020488 	.word	0x40020488
 80076ac:	400204a0 	.word	0x400204a0
 80076b0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f003 0301 	and.w	r3, r3, #1
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d1c8      	bne.n	8007654 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80076ca:	697a      	ldr	r2, [r7, #20]
 80076cc:	4b83      	ldr	r3, [pc, #524]	; (80078dc <HAL_DMA_Init+0x420>)
 80076ce:	4013      	ands	r3, r2
 80076d0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80076da:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	691b      	ldr	r3, [r3, #16]
 80076e0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80076e6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	699b      	ldr	r3, [r3, #24]
 80076ec:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80076f2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6a1b      	ldr	r3, [r3, #32]
 80076f8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80076fa:	697a      	ldr	r2, [r7, #20]
 80076fc:	4313      	orrs	r3, r2
 80076fe:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007704:	2b04      	cmp	r3, #4
 8007706:	d107      	bne.n	8007718 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007710:	4313      	orrs	r3, r2
 8007712:	697a      	ldr	r2, [r7, #20]
 8007714:	4313      	orrs	r3, r2
 8007716:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8007718:	4b71      	ldr	r3, [pc, #452]	; (80078e0 <HAL_DMA_Init+0x424>)
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	4b71      	ldr	r3, [pc, #452]	; (80078e4 <HAL_DMA_Init+0x428>)
 800771e:	4013      	ands	r3, r2
 8007720:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007724:	d328      	bcc.n	8007778 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	2b28      	cmp	r3, #40	; 0x28
 800772c:	d903      	bls.n	8007736 <HAL_DMA_Init+0x27a>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	2b2e      	cmp	r3, #46	; 0x2e
 8007734:	d917      	bls.n	8007766 <HAL_DMA_Init+0x2aa>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	2b3e      	cmp	r3, #62	; 0x3e
 800773c:	d903      	bls.n	8007746 <HAL_DMA_Init+0x28a>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	2b42      	cmp	r3, #66	; 0x42
 8007744:	d90f      	bls.n	8007766 <HAL_DMA_Init+0x2aa>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	2b46      	cmp	r3, #70	; 0x46
 800774c:	d903      	bls.n	8007756 <HAL_DMA_Init+0x29a>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	2b48      	cmp	r3, #72	; 0x48
 8007754:	d907      	bls.n	8007766 <HAL_DMA_Init+0x2aa>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	2b4e      	cmp	r3, #78	; 0x4e
 800775c:	d905      	bls.n	800776a <HAL_DMA_Init+0x2ae>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	2b52      	cmp	r3, #82	; 0x52
 8007764:	d801      	bhi.n	800776a <HAL_DMA_Init+0x2ae>
 8007766:	2301      	movs	r3, #1
 8007768:	e000      	b.n	800776c <HAL_DMA_Init+0x2b0>
 800776a:	2300      	movs	r3, #0
 800776c:	2b00      	cmp	r3, #0
 800776e:	d003      	beq.n	8007778 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007776:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	697a      	ldr	r2, [r7, #20]
 800777e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	695b      	ldr	r3, [r3, #20]
 8007786:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	f023 0307 	bic.w	r3, r3, #7
 800778e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007794:	697a      	ldr	r2, [r7, #20]
 8007796:	4313      	orrs	r3, r2
 8007798:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800779e:	2b04      	cmp	r3, #4
 80077a0:	d117      	bne.n	80077d2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077a6:	697a      	ldr	r2, [r7, #20]
 80077a8:	4313      	orrs	r3, r2
 80077aa:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d00e      	beq.n	80077d2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f002 fb33 	bl	8009e20 <DMA_CheckFifoParam>
 80077ba:	4603      	mov	r3, r0
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d008      	beq.n	80077d2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2240      	movs	r2, #64	; 0x40
 80077c4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2201      	movs	r2, #1
 80077ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80077ce:	2301      	movs	r3, #1
 80077d0:	e197      	b.n	8007b02 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	697a      	ldr	r2, [r7, #20]
 80077d8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f002 fa6e 	bl	8009cbc <DMA_CalcBaseAndBitshift>
 80077e0:	4603      	mov	r3, r0
 80077e2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077e8:	f003 031f 	and.w	r3, r3, #31
 80077ec:	223f      	movs	r2, #63	; 0x3f
 80077ee:	409a      	lsls	r2, r3
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	609a      	str	r2, [r3, #8]
 80077f4:	e0cd      	b.n	8007992 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a3b      	ldr	r2, [pc, #236]	; (80078e8 <HAL_DMA_Init+0x42c>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d022      	beq.n	8007846 <HAL_DMA_Init+0x38a>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a39      	ldr	r2, [pc, #228]	; (80078ec <HAL_DMA_Init+0x430>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d01d      	beq.n	8007846 <HAL_DMA_Init+0x38a>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a38      	ldr	r2, [pc, #224]	; (80078f0 <HAL_DMA_Init+0x434>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d018      	beq.n	8007846 <HAL_DMA_Init+0x38a>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a36      	ldr	r2, [pc, #216]	; (80078f4 <HAL_DMA_Init+0x438>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d013      	beq.n	8007846 <HAL_DMA_Init+0x38a>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a35      	ldr	r2, [pc, #212]	; (80078f8 <HAL_DMA_Init+0x43c>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d00e      	beq.n	8007846 <HAL_DMA_Init+0x38a>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a33      	ldr	r2, [pc, #204]	; (80078fc <HAL_DMA_Init+0x440>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d009      	beq.n	8007846 <HAL_DMA_Init+0x38a>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a32      	ldr	r2, [pc, #200]	; (8007900 <HAL_DMA_Init+0x444>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d004      	beq.n	8007846 <HAL_DMA_Init+0x38a>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a30      	ldr	r2, [pc, #192]	; (8007904 <HAL_DMA_Init+0x448>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d101      	bne.n	800784a <HAL_DMA_Init+0x38e>
 8007846:	2301      	movs	r3, #1
 8007848:	e000      	b.n	800784c <HAL_DMA_Init+0x390>
 800784a:	2300      	movs	r3, #0
 800784c:	2b00      	cmp	r3, #0
 800784e:	f000 8097 	beq.w	8007980 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a24      	ldr	r2, [pc, #144]	; (80078e8 <HAL_DMA_Init+0x42c>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d021      	beq.n	80078a0 <HAL_DMA_Init+0x3e4>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a22      	ldr	r2, [pc, #136]	; (80078ec <HAL_DMA_Init+0x430>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d01c      	beq.n	80078a0 <HAL_DMA_Init+0x3e4>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a21      	ldr	r2, [pc, #132]	; (80078f0 <HAL_DMA_Init+0x434>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d017      	beq.n	80078a0 <HAL_DMA_Init+0x3e4>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a1f      	ldr	r2, [pc, #124]	; (80078f4 <HAL_DMA_Init+0x438>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d012      	beq.n	80078a0 <HAL_DMA_Init+0x3e4>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a1e      	ldr	r2, [pc, #120]	; (80078f8 <HAL_DMA_Init+0x43c>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d00d      	beq.n	80078a0 <HAL_DMA_Init+0x3e4>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a1c      	ldr	r2, [pc, #112]	; (80078fc <HAL_DMA_Init+0x440>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d008      	beq.n	80078a0 <HAL_DMA_Init+0x3e4>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a1b      	ldr	r2, [pc, #108]	; (8007900 <HAL_DMA_Init+0x444>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d003      	beq.n	80078a0 <HAL_DMA_Init+0x3e4>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a19      	ldr	r2, [pc, #100]	; (8007904 <HAL_DMA_Init+0x448>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2202      	movs	r2, #2
 80078a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2200      	movs	r2, #0
 80078ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80078ba:	697a      	ldr	r2, [r7, #20]
 80078bc:	4b12      	ldr	r3, [pc, #72]	; (8007908 <HAL_DMA_Init+0x44c>)
 80078be:	4013      	ands	r3, r2
 80078c0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	2b40      	cmp	r3, #64	; 0x40
 80078c8:	d020      	beq.n	800790c <HAL_DMA_Init+0x450>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	2b80      	cmp	r3, #128	; 0x80
 80078d0:	d102      	bne.n	80078d8 <HAL_DMA_Init+0x41c>
 80078d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80078d6:	e01a      	b.n	800790e <HAL_DMA_Init+0x452>
 80078d8:	2300      	movs	r3, #0
 80078da:	e018      	b.n	800790e <HAL_DMA_Init+0x452>
 80078dc:	fe10803f 	.word	0xfe10803f
 80078e0:	5c001000 	.word	0x5c001000
 80078e4:	ffff0000 	.word	0xffff0000
 80078e8:	58025408 	.word	0x58025408
 80078ec:	5802541c 	.word	0x5802541c
 80078f0:	58025430 	.word	0x58025430
 80078f4:	58025444 	.word	0x58025444
 80078f8:	58025458 	.word	0x58025458
 80078fc:	5802546c 	.word	0x5802546c
 8007900:	58025480 	.word	0x58025480
 8007904:	58025494 	.word	0x58025494
 8007908:	fffe000f 	.word	0xfffe000f
 800790c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	68d2      	ldr	r2, [r2, #12]
 8007912:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007914:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	691b      	ldr	r3, [r3, #16]
 800791a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800791c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	695b      	ldr	r3, [r3, #20]
 8007922:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007924:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	699b      	ldr	r3, [r3, #24]
 800792a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800792c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	69db      	ldr	r3, [r3, #28]
 8007932:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007934:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6a1b      	ldr	r3, [r3, #32]
 800793a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800793c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800793e:	697a      	ldr	r2, [r7, #20]
 8007940:	4313      	orrs	r3, r2
 8007942:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	697a      	ldr	r2, [r7, #20]
 800794a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	461a      	mov	r2, r3
 8007952:	4b6e      	ldr	r3, [pc, #440]	; (8007b0c <HAL_DMA_Init+0x650>)
 8007954:	4413      	add	r3, r2
 8007956:	4a6e      	ldr	r2, [pc, #440]	; (8007b10 <HAL_DMA_Init+0x654>)
 8007958:	fba2 2303 	umull	r2, r3, r2, r3
 800795c:	091b      	lsrs	r3, r3, #4
 800795e:	009a      	lsls	r2, r3, #2
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f002 f9a9 	bl	8009cbc <DMA_CalcBaseAndBitshift>
 800796a:	4603      	mov	r3, r0
 800796c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007972:	f003 031f 	and.w	r3, r3, #31
 8007976:	2201      	movs	r2, #1
 8007978:	409a      	lsls	r2, r3
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	605a      	str	r2, [r3, #4]
 800797e:	e008      	b.n	8007992 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2240      	movs	r2, #64	; 0x40
 8007984:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2203      	movs	r2, #3
 800798a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800798e:	2301      	movs	r3, #1
 8007990:	e0b7      	b.n	8007b02 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a5f      	ldr	r2, [pc, #380]	; (8007b14 <HAL_DMA_Init+0x658>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d072      	beq.n	8007a82 <HAL_DMA_Init+0x5c6>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a5d      	ldr	r2, [pc, #372]	; (8007b18 <HAL_DMA_Init+0x65c>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d06d      	beq.n	8007a82 <HAL_DMA_Init+0x5c6>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a5c      	ldr	r2, [pc, #368]	; (8007b1c <HAL_DMA_Init+0x660>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d068      	beq.n	8007a82 <HAL_DMA_Init+0x5c6>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a5a      	ldr	r2, [pc, #360]	; (8007b20 <HAL_DMA_Init+0x664>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d063      	beq.n	8007a82 <HAL_DMA_Init+0x5c6>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a59      	ldr	r2, [pc, #356]	; (8007b24 <HAL_DMA_Init+0x668>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d05e      	beq.n	8007a82 <HAL_DMA_Init+0x5c6>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a57      	ldr	r2, [pc, #348]	; (8007b28 <HAL_DMA_Init+0x66c>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d059      	beq.n	8007a82 <HAL_DMA_Init+0x5c6>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a56      	ldr	r2, [pc, #344]	; (8007b2c <HAL_DMA_Init+0x670>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d054      	beq.n	8007a82 <HAL_DMA_Init+0x5c6>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a54      	ldr	r2, [pc, #336]	; (8007b30 <HAL_DMA_Init+0x674>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d04f      	beq.n	8007a82 <HAL_DMA_Init+0x5c6>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a53      	ldr	r2, [pc, #332]	; (8007b34 <HAL_DMA_Init+0x678>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d04a      	beq.n	8007a82 <HAL_DMA_Init+0x5c6>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a51      	ldr	r2, [pc, #324]	; (8007b38 <HAL_DMA_Init+0x67c>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d045      	beq.n	8007a82 <HAL_DMA_Init+0x5c6>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a50      	ldr	r2, [pc, #320]	; (8007b3c <HAL_DMA_Init+0x680>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d040      	beq.n	8007a82 <HAL_DMA_Init+0x5c6>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a4e      	ldr	r2, [pc, #312]	; (8007b40 <HAL_DMA_Init+0x684>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d03b      	beq.n	8007a82 <HAL_DMA_Init+0x5c6>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a4d      	ldr	r2, [pc, #308]	; (8007b44 <HAL_DMA_Init+0x688>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d036      	beq.n	8007a82 <HAL_DMA_Init+0x5c6>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a4b      	ldr	r2, [pc, #300]	; (8007b48 <HAL_DMA_Init+0x68c>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d031      	beq.n	8007a82 <HAL_DMA_Init+0x5c6>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a4a      	ldr	r2, [pc, #296]	; (8007b4c <HAL_DMA_Init+0x690>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d02c      	beq.n	8007a82 <HAL_DMA_Init+0x5c6>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a48      	ldr	r2, [pc, #288]	; (8007b50 <HAL_DMA_Init+0x694>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d027      	beq.n	8007a82 <HAL_DMA_Init+0x5c6>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a47      	ldr	r2, [pc, #284]	; (8007b54 <HAL_DMA_Init+0x698>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d022      	beq.n	8007a82 <HAL_DMA_Init+0x5c6>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a45      	ldr	r2, [pc, #276]	; (8007b58 <HAL_DMA_Init+0x69c>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d01d      	beq.n	8007a82 <HAL_DMA_Init+0x5c6>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a44      	ldr	r2, [pc, #272]	; (8007b5c <HAL_DMA_Init+0x6a0>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d018      	beq.n	8007a82 <HAL_DMA_Init+0x5c6>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a42      	ldr	r2, [pc, #264]	; (8007b60 <HAL_DMA_Init+0x6a4>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d013      	beq.n	8007a82 <HAL_DMA_Init+0x5c6>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a41      	ldr	r2, [pc, #260]	; (8007b64 <HAL_DMA_Init+0x6a8>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d00e      	beq.n	8007a82 <HAL_DMA_Init+0x5c6>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a3f      	ldr	r2, [pc, #252]	; (8007b68 <HAL_DMA_Init+0x6ac>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d009      	beq.n	8007a82 <HAL_DMA_Init+0x5c6>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a3e      	ldr	r2, [pc, #248]	; (8007b6c <HAL_DMA_Init+0x6b0>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d004      	beq.n	8007a82 <HAL_DMA_Init+0x5c6>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a3c      	ldr	r2, [pc, #240]	; (8007b70 <HAL_DMA_Init+0x6b4>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d101      	bne.n	8007a86 <HAL_DMA_Init+0x5ca>
 8007a82:	2301      	movs	r3, #1
 8007a84:	e000      	b.n	8007a88 <HAL_DMA_Init+0x5cc>
 8007a86:	2300      	movs	r3, #0
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d032      	beq.n	8007af2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f002 fa43 	bl	8009f18 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	689b      	ldr	r3, [r3, #8]
 8007a96:	2b80      	cmp	r3, #128	; 0x80
 8007a98:	d102      	bne.n	8007aa0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	685a      	ldr	r2, [r3, #4]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007aa8:	b2d2      	uxtb	r2, r2
 8007aaa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ab0:	687a      	ldr	r2, [r7, #4]
 8007ab2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007ab4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d010      	beq.n	8007ae0 <HAL_DMA_Init+0x624>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	2b08      	cmp	r3, #8
 8007ac4:	d80c      	bhi.n	8007ae0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f002 fac0 	bl	800a04c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007adc:	605a      	str	r2, [r3, #4]
 8007ade:	e008      	b.n	8007af2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2200      	movs	r2, #0
 8007af0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2200      	movs	r2, #0
 8007af6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2201      	movs	r2, #1
 8007afc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007b00:	2300      	movs	r3, #0
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3718      	adds	r7, #24
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}
 8007b0a:	bf00      	nop
 8007b0c:	a7fdabf8 	.word	0xa7fdabf8
 8007b10:	cccccccd 	.word	0xcccccccd
 8007b14:	40020010 	.word	0x40020010
 8007b18:	40020028 	.word	0x40020028
 8007b1c:	40020040 	.word	0x40020040
 8007b20:	40020058 	.word	0x40020058
 8007b24:	40020070 	.word	0x40020070
 8007b28:	40020088 	.word	0x40020088
 8007b2c:	400200a0 	.word	0x400200a0
 8007b30:	400200b8 	.word	0x400200b8
 8007b34:	40020410 	.word	0x40020410
 8007b38:	40020428 	.word	0x40020428
 8007b3c:	40020440 	.word	0x40020440
 8007b40:	40020458 	.word	0x40020458
 8007b44:	40020470 	.word	0x40020470
 8007b48:	40020488 	.word	0x40020488
 8007b4c:	400204a0 	.word	0x400204a0
 8007b50:	400204b8 	.word	0x400204b8
 8007b54:	58025408 	.word	0x58025408
 8007b58:	5802541c 	.word	0x5802541c
 8007b5c:	58025430 	.word	0x58025430
 8007b60:	58025444 	.word	0x58025444
 8007b64:	58025458 	.word	0x58025458
 8007b68:	5802546c 	.word	0x5802546c
 8007b6c:	58025480 	.word	0x58025480
 8007b70:	58025494 	.word	0x58025494

08007b74 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b086      	sub	sp, #24
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	60f8      	str	r0, [r7, #12]
 8007b7c:	60b9      	str	r1, [r7, #8]
 8007b7e:	607a      	str	r2, [r7, #4]
 8007b80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b82:	2300      	movs	r3, #0
 8007b84:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d101      	bne.n	8007b90 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	e226      	b.n	8007fde <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007b96:	2b01      	cmp	r3, #1
 8007b98:	d101      	bne.n	8007b9e <HAL_DMA_Start_IT+0x2a>
 8007b9a:	2302      	movs	r3, #2
 8007b9c:	e21f      	b.n	8007fde <HAL_DMA_Start_IT+0x46a>
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	f040 820a 	bne.w	8007fc8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2202      	movs	r2, #2
 8007bb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a68      	ldr	r2, [pc, #416]	; (8007d68 <HAL_DMA_Start_IT+0x1f4>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d04a      	beq.n	8007c62 <HAL_DMA_Start_IT+0xee>
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a66      	ldr	r2, [pc, #408]	; (8007d6c <HAL_DMA_Start_IT+0x1f8>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d045      	beq.n	8007c62 <HAL_DMA_Start_IT+0xee>
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a65      	ldr	r2, [pc, #404]	; (8007d70 <HAL_DMA_Start_IT+0x1fc>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d040      	beq.n	8007c62 <HAL_DMA_Start_IT+0xee>
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a63      	ldr	r2, [pc, #396]	; (8007d74 <HAL_DMA_Start_IT+0x200>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d03b      	beq.n	8007c62 <HAL_DMA_Start_IT+0xee>
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a62      	ldr	r2, [pc, #392]	; (8007d78 <HAL_DMA_Start_IT+0x204>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d036      	beq.n	8007c62 <HAL_DMA_Start_IT+0xee>
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a60      	ldr	r2, [pc, #384]	; (8007d7c <HAL_DMA_Start_IT+0x208>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d031      	beq.n	8007c62 <HAL_DMA_Start_IT+0xee>
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a5f      	ldr	r2, [pc, #380]	; (8007d80 <HAL_DMA_Start_IT+0x20c>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d02c      	beq.n	8007c62 <HAL_DMA_Start_IT+0xee>
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a5d      	ldr	r2, [pc, #372]	; (8007d84 <HAL_DMA_Start_IT+0x210>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d027      	beq.n	8007c62 <HAL_DMA_Start_IT+0xee>
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a5c      	ldr	r2, [pc, #368]	; (8007d88 <HAL_DMA_Start_IT+0x214>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d022      	beq.n	8007c62 <HAL_DMA_Start_IT+0xee>
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a5a      	ldr	r2, [pc, #360]	; (8007d8c <HAL_DMA_Start_IT+0x218>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d01d      	beq.n	8007c62 <HAL_DMA_Start_IT+0xee>
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a59      	ldr	r2, [pc, #356]	; (8007d90 <HAL_DMA_Start_IT+0x21c>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d018      	beq.n	8007c62 <HAL_DMA_Start_IT+0xee>
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a57      	ldr	r2, [pc, #348]	; (8007d94 <HAL_DMA_Start_IT+0x220>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d013      	beq.n	8007c62 <HAL_DMA_Start_IT+0xee>
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a56      	ldr	r2, [pc, #344]	; (8007d98 <HAL_DMA_Start_IT+0x224>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d00e      	beq.n	8007c62 <HAL_DMA_Start_IT+0xee>
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4a54      	ldr	r2, [pc, #336]	; (8007d9c <HAL_DMA_Start_IT+0x228>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d009      	beq.n	8007c62 <HAL_DMA_Start_IT+0xee>
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4a53      	ldr	r2, [pc, #332]	; (8007da0 <HAL_DMA_Start_IT+0x22c>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d004      	beq.n	8007c62 <HAL_DMA_Start_IT+0xee>
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a51      	ldr	r2, [pc, #324]	; (8007da4 <HAL_DMA_Start_IT+0x230>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d108      	bne.n	8007c74 <HAL_DMA_Start_IT+0x100>
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	681a      	ldr	r2, [r3, #0]
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f022 0201 	bic.w	r2, r2, #1
 8007c70:	601a      	str	r2, [r3, #0]
 8007c72:	e007      	b.n	8007c84 <HAL_DMA_Start_IT+0x110>
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f022 0201 	bic.w	r2, r2, #1
 8007c82:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	68b9      	ldr	r1, [r7, #8]
 8007c8a:	68f8      	ldr	r0, [r7, #12]
 8007c8c:	f001 fe6a 	bl	8009964 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a34      	ldr	r2, [pc, #208]	; (8007d68 <HAL_DMA_Start_IT+0x1f4>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d04a      	beq.n	8007d30 <HAL_DMA_Start_IT+0x1bc>
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a33      	ldr	r2, [pc, #204]	; (8007d6c <HAL_DMA_Start_IT+0x1f8>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d045      	beq.n	8007d30 <HAL_DMA_Start_IT+0x1bc>
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a31      	ldr	r2, [pc, #196]	; (8007d70 <HAL_DMA_Start_IT+0x1fc>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d040      	beq.n	8007d30 <HAL_DMA_Start_IT+0x1bc>
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a30      	ldr	r2, [pc, #192]	; (8007d74 <HAL_DMA_Start_IT+0x200>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d03b      	beq.n	8007d30 <HAL_DMA_Start_IT+0x1bc>
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a2e      	ldr	r2, [pc, #184]	; (8007d78 <HAL_DMA_Start_IT+0x204>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d036      	beq.n	8007d30 <HAL_DMA_Start_IT+0x1bc>
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a2d      	ldr	r2, [pc, #180]	; (8007d7c <HAL_DMA_Start_IT+0x208>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d031      	beq.n	8007d30 <HAL_DMA_Start_IT+0x1bc>
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a2b      	ldr	r2, [pc, #172]	; (8007d80 <HAL_DMA_Start_IT+0x20c>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d02c      	beq.n	8007d30 <HAL_DMA_Start_IT+0x1bc>
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a2a      	ldr	r2, [pc, #168]	; (8007d84 <HAL_DMA_Start_IT+0x210>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d027      	beq.n	8007d30 <HAL_DMA_Start_IT+0x1bc>
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a28      	ldr	r2, [pc, #160]	; (8007d88 <HAL_DMA_Start_IT+0x214>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d022      	beq.n	8007d30 <HAL_DMA_Start_IT+0x1bc>
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a27      	ldr	r2, [pc, #156]	; (8007d8c <HAL_DMA_Start_IT+0x218>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d01d      	beq.n	8007d30 <HAL_DMA_Start_IT+0x1bc>
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a25      	ldr	r2, [pc, #148]	; (8007d90 <HAL_DMA_Start_IT+0x21c>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d018      	beq.n	8007d30 <HAL_DMA_Start_IT+0x1bc>
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4a24      	ldr	r2, [pc, #144]	; (8007d94 <HAL_DMA_Start_IT+0x220>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d013      	beq.n	8007d30 <HAL_DMA_Start_IT+0x1bc>
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a22      	ldr	r2, [pc, #136]	; (8007d98 <HAL_DMA_Start_IT+0x224>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d00e      	beq.n	8007d30 <HAL_DMA_Start_IT+0x1bc>
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a21      	ldr	r2, [pc, #132]	; (8007d9c <HAL_DMA_Start_IT+0x228>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d009      	beq.n	8007d30 <HAL_DMA_Start_IT+0x1bc>
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a1f      	ldr	r2, [pc, #124]	; (8007da0 <HAL_DMA_Start_IT+0x22c>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d004      	beq.n	8007d30 <HAL_DMA_Start_IT+0x1bc>
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a1e      	ldr	r2, [pc, #120]	; (8007da4 <HAL_DMA_Start_IT+0x230>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d101      	bne.n	8007d34 <HAL_DMA_Start_IT+0x1c0>
 8007d30:	2301      	movs	r3, #1
 8007d32:	e000      	b.n	8007d36 <HAL_DMA_Start_IT+0x1c2>
 8007d34:	2300      	movs	r3, #0
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d036      	beq.n	8007da8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f023 021e 	bic.w	r2, r3, #30
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f042 0216 	orr.w	r2, r2, #22
 8007d4c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d03e      	beq.n	8007dd4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	681a      	ldr	r2, [r3, #0]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f042 0208 	orr.w	r2, r2, #8
 8007d64:	601a      	str	r2, [r3, #0]
 8007d66:	e035      	b.n	8007dd4 <HAL_DMA_Start_IT+0x260>
 8007d68:	40020010 	.word	0x40020010
 8007d6c:	40020028 	.word	0x40020028
 8007d70:	40020040 	.word	0x40020040
 8007d74:	40020058 	.word	0x40020058
 8007d78:	40020070 	.word	0x40020070
 8007d7c:	40020088 	.word	0x40020088
 8007d80:	400200a0 	.word	0x400200a0
 8007d84:	400200b8 	.word	0x400200b8
 8007d88:	40020410 	.word	0x40020410
 8007d8c:	40020428 	.word	0x40020428
 8007d90:	40020440 	.word	0x40020440
 8007d94:	40020458 	.word	0x40020458
 8007d98:	40020470 	.word	0x40020470
 8007d9c:	40020488 	.word	0x40020488
 8007da0:	400204a0 	.word	0x400204a0
 8007da4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f023 020e 	bic.w	r2, r3, #14
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f042 020a 	orr.w	r2, r2, #10
 8007dba:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d007      	beq.n	8007dd4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	681a      	ldr	r2, [r3, #0]
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f042 0204 	orr.w	r2, r2, #4
 8007dd2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a83      	ldr	r2, [pc, #524]	; (8007fe8 <HAL_DMA_Start_IT+0x474>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d072      	beq.n	8007ec4 <HAL_DMA_Start_IT+0x350>
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a82      	ldr	r2, [pc, #520]	; (8007fec <HAL_DMA_Start_IT+0x478>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d06d      	beq.n	8007ec4 <HAL_DMA_Start_IT+0x350>
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a80      	ldr	r2, [pc, #512]	; (8007ff0 <HAL_DMA_Start_IT+0x47c>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d068      	beq.n	8007ec4 <HAL_DMA_Start_IT+0x350>
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a7f      	ldr	r2, [pc, #508]	; (8007ff4 <HAL_DMA_Start_IT+0x480>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d063      	beq.n	8007ec4 <HAL_DMA_Start_IT+0x350>
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a7d      	ldr	r2, [pc, #500]	; (8007ff8 <HAL_DMA_Start_IT+0x484>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d05e      	beq.n	8007ec4 <HAL_DMA_Start_IT+0x350>
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a7c      	ldr	r2, [pc, #496]	; (8007ffc <HAL_DMA_Start_IT+0x488>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d059      	beq.n	8007ec4 <HAL_DMA_Start_IT+0x350>
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a7a      	ldr	r2, [pc, #488]	; (8008000 <HAL_DMA_Start_IT+0x48c>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d054      	beq.n	8007ec4 <HAL_DMA_Start_IT+0x350>
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a79      	ldr	r2, [pc, #484]	; (8008004 <HAL_DMA_Start_IT+0x490>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d04f      	beq.n	8007ec4 <HAL_DMA_Start_IT+0x350>
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a77      	ldr	r2, [pc, #476]	; (8008008 <HAL_DMA_Start_IT+0x494>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d04a      	beq.n	8007ec4 <HAL_DMA_Start_IT+0x350>
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a76      	ldr	r2, [pc, #472]	; (800800c <HAL_DMA_Start_IT+0x498>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d045      	beq.n	8007ec4 <HAL_DMA_Start_IT+0x350>
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a74      	ldr	r2, [pc, #464]	; (8008010 <HAL_DMA_Start_IT+0x49c>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d040      	beq.n	8007ec4 <HAL_DMA_Start_IT+0x350>
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a73      	ldr	r2, [pc, #460]	; (8008014 <HAL_DMA_Start_IT+0x4a0>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d03b      	beq.n	8007ec4 <HAL_DMA_Start_IT+0x350>
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a71      	ldr	r2, [pc, #452]	; (8008018 <HAL_DMA_Start_IT+0x4a4>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d036      	beq.n	8007ec4 <HAL_DMA_Start_IT+0x350>
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a70      	ldr	r2, [pc, #448]	; (800801c <HAL_DMA_Start_IT+0x4a8>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d031      	beq.n	8007ec4 <HAL_DMA_Start_IT+0x350>
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a6e      	ldr	r2, [pc, #440]	; (8008020 <HAL_DMA_Start_IT+0x4ac>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d02c      	beq.n	8007ec4 <HAL_DMA_Start_IT+0x350>
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a6d      	ldr	r2, [pc, #436]	; (8008024 <HAL_DMA_Start_IT+0x4b0>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d027      	beq.n	8007ec4 <HAL_DMA_Start_IT+0x350>
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a6b      	ldr	r2, [pc, #428]	; (8008028 <HAL_DMA_Start_IT+0x4b4>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d022      	beq.n	8007ec4 <HAL_DMA_Start_IT+0x350>
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4a6a      	ldr	r2, [pc, #424]	; (800802c <HAL_DMA_Start_IT+0x4b8>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d01d      	beq.n	8007ec4 <HAL_DMA_Start_IT+0x350>
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a68      	ldr	r2, [pc, #416]	; (8008030 <HAL_DMA_Start_IT+0x4bc>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d018      	beq.n	8007ec4 <HAL_DMA_Start_IT+0x350>
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a67      	ldr	r2, [pc, #412]	; (8008034 <HAL_DMA_Start_IT+0x4c0>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d013      	beq.n	8007ec4 <HAL_DMA_Start_IT+0x350>
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a65      	ldr	r2, [pc, #404]	; (8008038 <HAL_DMA_Start_IT+0x4c4>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d00e      	beq.n	8007ec4 <HAL_DMA_Start_IT+0x350>
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a64      	ldr	r2, [pc, #400]	; (800803c <HAL_DMA_Start_IT+0x4c8>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d009      	beq.n	8007ec4 <HAL_DMA_Start_IT+0x350>
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a62      	ldr	r2, [pc, #392]	; (8008040 <HAL_DMA_Start_IT+0x4cc>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d004      	beq.n	8007ec4 <HAL_DMA_Start_IT+0x350>
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a61      	ldr	r2, [pc, #388]	; (8008044 <HAL_DMA_Start_IT+0x4d0>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d101      	bne.n	8007ec8 <HAL_DMA_Start_IT+0x354>
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	e000      	b.n	8007eca <HAL_DMA_Start_IT+0x356>
 8007ec8:	2300      	movs	r3, #0
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d01a      	beq.n	8007f04 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d007      	beq.n	8007eec <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ee0:	681a      	ldr	r2, [r3, #0]
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ee6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007eea:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d007      	beq.n	8007f04 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007efe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f02:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a37      	ldr	r2, [pc, #220]	; (8007fe8 <HAL_DMA_Start_IT+0x474>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d04a      	beq.n	8007fa4 <HAL_DMA_Start_IT+0x430>
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4a36      	ldr	r2, [pc, #216]	; (8007fec <HAL_DMA_Start_IT+0x478>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d045      	beq.n	8007fa4 <HAL_DMA_Start_IT+0x430>
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a34      	ldr	r2, [pc, #208]	; (8007ff0 <HAL_DMA_Start_IT+0x47c>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d040      	beq.n	8007fa4 <HAL_DMA_Start_IT+0x430>
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a33      	ldr	r2, [pc, #204]	; (8007ff4 <HAL_DMA_Start_IT+0x480>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d03b      	beq.n	8007fa4 <HAL_DMA_Start_IT+0x430>
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a31      	ldr	r2, [pc, #196]	; (8007ff8 <HAL_DMA_Start_IT+0x484>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d036      	beq.n	8007fa4 <HAL_DMA_Start_IT+0x430>
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a30      	ldr	r2, [pc, #192]	; (8007ffc <HAL_DMA_Start_IT+0x488>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d031      	beq.n	8007fa4 <HAL_DMA_Start_IT+0x430>
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a2e      	ldr	r2, [pc, #184]	; (8008000 <HAL_DMA_Start_IT+0x48c>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d02c      	beq.n	8007fa4 <HAL_DMA_Start_IT+0x430>
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a2d      	ldr	r2, [pc, #180]	; (8008004 <HAL_DMA_Start_IT+0x490>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d027      	beq.n	8007fa4 <HAL_DMA_Start_IT+0x430>
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a2b      	ldr	r2, [pc, #172]	; (8008008 <HAL_DMA_Start_IT+0x494>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d022      	beq.n	8007fa4 <HAL_DMA_Start_IT+0x430>
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a2a      	ldr	r2, [pc, #168]	; (800800c <HAL_DMA_Start_IT+0x498>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d01d      	beq.n	8007fa4 <HAL_DMA_Start_IT+0x430>
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a28      	ldr	r2, [pc, #160]	; (8008010 <HAL_DMA_Start_IT+0x49c>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d018      	beq.n	8007fa4 <HAL_DMA_Start_IT+0x430>
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a27      	ldr	r2, [pc, #156]	; (8008014 <HAL_DMA_Start_IT+0x4a0>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d013      	beq.n	8007fa4 <HAL_DMA_Start_IT+0x430>
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a25      	ldr	r2, [pc, #148]	; (8008018 <HAL_DMA_Start_IT+0x4a4>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d00e      	beq.n	8007fa4 <HAL_DMA_Start_IT+0x430>
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a24      	ldr	r2, [pc, #144]	; (800801c <HAL_DMA_Start_IT+0x4a8>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d009      	beq.n	8007fa4 <HAL_DMA_Start_IT+0x430>
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a22      	ldr	r2, [pc, #136]	; (8008020 <HAL_DMA_Start_IT+0x4ac>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d004      	beq.n	8007fa4 <HAL_DMA_Start_IT+0x430>
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a21      	ldr	r2, [pc, #132]	; (8008024 <HAL_DMA_Start_IT+0x4b0>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d108      	bne.n	8007fb6 <HAL_DMA_Start_IT+0x442>
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f042 0201 	orr.w	r2, r2, #1
 8007fb2:	601a      	str	r2, [r3, #0]
 8007fb4:	e012      	b.n	8007fdc <HAL_DMA_Start_IT+0x468>
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	681a      	ldr	r2, [r3, #0]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f042 0201 	orr.w	r2, r2, #1
 8007fc4:	601a      	str	r2, [r3, #0]
 8007fc6:	e009      	b.n	8007fdc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007fce:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007fdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3718      	adds	r7, #24
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
 8007fe6:	bf00      	nop
 8007fe8:	40020010 	.word	0x40020010
 8007fec:	40020028 	.word	0x40020028
 8007ff0:	40020040 	.word	0x40020040
 8007ff4:	40020058 	.word	0x40020058
 8007ff8:	40020070 	.word	0x40020070
 8007ffc:	40020088 	.word	0x40020088
 8008000:	400200a0 	.word	0x400200a0
 8008004:	400200b8 	.word	0x400200b8
 8008008:	40020410 	.word	0x40020410
 800800c:	40020428 	.word	0x40020428
 8008010:	40020440 	.word	0x40020440
 8008014:	40020458 	.word	0x40020458
 8008018:	40020470 	.word	0x40020470
 800801c:	40020488 	.word	0x40020488
 8008020:	400204a0 	.word	0x400204a0
 8008024:	400204b8 	.word	0x400204b8
 8008028:	58025408 	.word	0x58025408
 800802c:	5802541c 	.word	0x5802541c
 8008030:	58025430 	.word	0x58025430
 8008034:	58025444 	.word	0x58025444
 8008038:	58025458 	.word	0x58025458
 800803c:	5802546c 	.word	0x5802546c
 8008040:	58025480 	.word	0x58025480
 8008044:	58025494 	.word	0x58025494

08008048 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b086      	sub	sp, #24
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8008050:	f7ff f8e8 	bl	8007224 <HAL_GetTick>
 8008054:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d101      	bne.n	8008060 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800805c:	2301      	movs	r3, #1
 800805e:	e2dc      	b.n	800861a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008066:	b2db      	uxtb	r3, r3
 8008068:	2b02      	cmp	r3, #2
 800806a:	d008      	beq.n	800807e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2280      	movs	r2, #128	; 0x80
 8008070:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2200      	movs	r2, #0
 8008076:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800807a:	2301      	movs	r3, #1
 800807c:	e2cd      	b.n	800861a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a76      	ldr	r2, [pc, #472]	; (800825c <HAL_DMA_Abort+0x214>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d04a      	beq.n	800811e <HAL_DMA_Abort+0xd6>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a74      	ldr	r2, [pc, #464]	; (8008260 <HAL_DMA_Abort+0x218>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d045      	beq.n	800811e <HAL_DMA_Abort+0xd6>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a73      	ldr	r2, [pc, #460]	; (8008264 <HAL_DMA_Abort+0x21c>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d040      	beq.n	800811e <HAL_DMA_Abort+0xd6>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a71      	ldr	r2, [pc, #452]	; (8008268 <HAL_DMA_Abort+0x220>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d03b      	beq.n	800811e <HAL_DMA_Abort+0xd6>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a70      	ldr	r2, [pc, #448]	; (800826c <HAL_DMA_Abort+0x224>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d036      	beq.n	800811e <HAL_DMA_Abort+0xd6>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a6e      	ldr	r2, [pc, #440]	; (8008270 <HAL_DMA_Abort+0x228>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d031      	beq.n	800811e <HAL_DMA_Abort+0xd6>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4a6d      	ldr	r2, [pc, #436]	; (8008274 <HAL_DMA_Abort+0x22c>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d02c      	beq.n	800811e <HAL_DMA_Abort+0xd6>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a6b      	ldr	r2, [pc, #428]	; (8008278 <HAL_DMA_Abort+0x230>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d027      	beq.n	800811e <HAL_DMA_Abort+0xd6>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a6a      	ldr	r2, [pc, #424]	; (800827c <HAL_DMA_Abort+0x234>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d022      	beq.n	800811e <HAL_DMA_Abort+0xd6>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a68      	ldr	r2, [pc, #416]	; (8008280 <HAL_DMA_Abort+0x238>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d01d      	beq.n	800811e <HAL_DMA_Abort+0xd6>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a67      	ldr	r2, [pc, #412]	; (8008284 <HAL_DMA_Abort+0x23c>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d018      	beq.n	800811e <HAL_DMA_Abort+0xd6>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a65      	ldr	r2, [pc, #404]	; (8008288 <HAL_DMA_Abort+0x240>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d013      	beq.n	800811e <HAL_DMA_Abort+0xd6>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a64      	ldr	r2, [pc, #400]	; (800828c <HAL_DMA_Abort+0x244>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d00e      	beq.n	800811e <HAL_DMA_Abort+0xd6>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a62      	ldr	r2, [pc, #392]	; (8008290 <HAL_DMA_Abort+0x248>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d009      	beq.n	800811e <HAL_DMA_Abort+0xd6>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a61      	ldr	r2, [pc, #388]	; (8008294 <HAL_DMA_Abort+0x24c>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d004      	beq.n	800811e <HAL_DMA_Abort+0xd6>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a5f      	ldr	r2, [pc, #380]	; (8008298 <HAL_DMA_Abort+0x250>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d101      	bne.n	8008122 <HAL_DMA_Abort+0xda>
 800811e:	2301      	movs	r3, #1
 8008120:	e000      	b.n	8008124 <HAL_DMA_Abort+0xdc>
 8008122:	2300      	movs	r3, #0
 8008124:	2b00      	cmp	r3, #0
 8008126:	d013      	beq.n	8008150 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f022 021e 	bic.w	r2, r2, #30
 8008136:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	695a      	ldr	r2, [r3, #20]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008146:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	617b      	str	r3, [r7, #20]
 800814e:	e00a      	b.n	8008166 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	681a      	ldr	r2, [r3, #0]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f022 020e 	bic.w	r2, r2, #14
 800815e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4a3c      	ldr	r2, [pc, #240]	; (800825c <HAL_DMA_Abort+0x214>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d072      	beq.n	8008256 <HAL_DMA_Abort+0x20e>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a3a      	ldr	r2, [pc, #232]	; (8008260 <HAL_DMA_Abort+0x218>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d06d      	beq.n	8008256 <HAL_DMA_Abort+0x20e>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4a39      	ldr	r2, [pc, #228]	; (8008264 <HAL_DMA_Abort+0x21c>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d068      	beq.n	8008256 <HAL_DMA_Abort+0x20e>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a37      	ldr	r2, [pc, #220]	; (8008268 <HAL_DMA_Abort+0x220>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d063      	beq.n	8008256 <HAL_DMA_Abort+0x20e>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a36      	ldr	r2, [pc, #216]	; (800826c <HAL_DMA_Abort+0x224>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d05e      	beq.n	8008256 <HAL_DMA_Abort+0x20e>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a34      	ldr	r2, [pc, #208]	; (8008270 <HAL_DMA_Abort+0x228>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d059      	beq.n	8008256 <HAL_DMA_Abort+0x20e>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a33      	ldr	r2, [pc, #204]	; (8008274 <HAL_DMA_Abort+0x22c>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d054      	beq.n	8008256 <HAL_DMA_Abort+0x20e>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a31      	ldr	r2, [pc, #196]	; (8008278 <HAL_DMA_Abort+0x230>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d04f      	beq.n	8008256 <HAL_DMA_Abort+0x20e>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a30      	ldr	r2, [pc, #192]	; (800827c <HAL_DMA_Abort+0x234>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d04a      	beq.n	8008256 <HAL_DMA_Abort+0x20e>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a2e      	ldr	r2, [pc, #184]	; (8008280 <HAL_DMA_Abort+0x238>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d045      	beq.n	8008256 <HAL_DMA_Abort+0x20e>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4a2d      	ldr	r2, [pc, #180]	; (8008284 <HAL_DMA_Abort+0x23c>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d040      	beq.n	8008256 <HAL_DMA_Abort+0x20e>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a2b      	ldr	r2, [pc, #172]	; (8008288 <HAL_DMA_Abort+0x240>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d03b      	beq.n	8008256 <HAL_DMA_Abort+0x20e>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a2a      	ldr	r2, [pc, #168]	; (800828c <HAL_DMA_Abort+0x244>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d036      	beq.n	8008256 <HAL_DMA_Abort+0x20e>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a28      	ldr	r2, [pc, #160]	; (8008290 <HAL_DMA_Abort+0x248>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d031      	beq.n	8008256 <HAL_DMA_Abort+0x20e>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a27      	ldr	r2, [pc, #156]	; (8008294 <HAL_DMA_Abort+0x24c>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d02c      	beq.n	8008256 <HAL_DMA_Abort+0x20e>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a25      	ldr	r2, [pc, #148]	; (8008298 <HAL_DMA_Abort+0x250>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d027      	beq.n	8008256 <HAL_DMA_Abort+0x20e>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a24      	ldr	r2, [pc, #144]	; (800829c <HAL_DMA_Abort+0x254>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d022      	beq.n	8008256 <HAL_DMA_Abort+0x20e>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a22      	ldr	r2, [pc, #136]	; (80082a0 <HAL_DMA_Abort+0x258>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d01d      	beq.n	8008256 <HAL_DMA_Abort+0x20e>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a21      	ldr	r2, [pc, #132]	; (80082a4 <HAL_DMA_Abort+0x25c>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d018      	beq.n	8008256 <HAL_DMA_Abort+0x20e>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a1f      	ldr	r2, [pc, #124]	; (80082a8 <HAL_DMA_Abort+0x260>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d013      	beq.n	8008256 <HAL_DMA_Abort+0x20e>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a1e      	ldr	r2, [pc, #120]	; (80082ac <HAL_DMA_Abort+0x264>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d00e      	beq.n	8008256 <HAL_DMA_Abort+0x20e>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a1c      	ldr	r2, [pc, #112]	; (80082b0 <HAL_DMA_Abort+0x268>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d009      	beq.n	8008256 <HAL_DMA_Abort+0x20e>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a1b      	ldr	r2, [pc, #108]	; (80082b4 <HAL_DMA_Abort+0x26c>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d004      	beq.n	8008256 <HAL_DMA_Abort+0x20e>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a19      	ldr	r2, [pc, #100]	; (80082b8 <HAL_DMA_Abort+0x270>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d132      	bne.n	80082bc <HAL_DMA_Abort+0x274>
 8008256:	2301      	movs	r3, #1
 8008258:	e031      	b.n	80082be <HAL_DMA_Abort+0x276>
 800825a:	bf00      	nop
 800825c:	40020010 	.word	0x40020010
 8008260:	40020028 	.word	0x40020028
 8008264:	40020040 	.word	0x40020040
 8008268:	40020058 	.word	0x40020058
 800826c:	40020070 	.word	0x40020070
 8008270:	40020088 	.word	0x40020088
 8008274:	400200a0 	.word	0x400200a0
 8008278:	400200b8 	.word	0x400200b8
 800827c:	40020410 	.word	0x40020410
 8008280:	40020428 	.word	0x40020428
 8008284:	40020440 	.word	0x40020440
 8008288:	40020458 	.word	0x40020458
 800828c:	40020470 	.word	0x40020470
 8008290:	40020488 	.word	0x40020488
 8008294:	400204a0 	.word	0x400204a0
 8008298:	400204b8 	.word	0x400204b8
 800829c:	58025408 	.word	0x58025408
 80082a0:	5802541c 	.word	0x5802541c
 80082a4:	58025430 	.word	0x58025430
 80082a8:	58025444 	.word	0x58025444
 80082ac:	58025458 	.word	0x58025458
 80082b0:	5802546c 	.word	0x5802546c
 80082b4:	58025480 	.word	0x58025480
 80082b8:	58025494 	.word	0x58025494
 80082bc:	2300      	movs	r3, #0
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d007      	beq.n	80082d2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082c6:	681a      	ldr	r2, [r3, #0]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80082d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a6d      	ldr	r2, [pc, #436]	; (800848c <HAL_DMA_Abort+0x444>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d04a      	beq.n	8008372 <HAL_DMA_Abort+0x32a>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a6b      	ldr	r2, [pc, #428]	; (8008490 <HAL_DMA_Abort+0x448>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d045      	beq.n	8008372 <HAL_DMA_Abort+0x32a>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a6a      	ldr	r2, [pc, #424]	; (8008494 <HAL_DMA_Abort+0x44c>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d040      	beq.n	8008372 <HAL_DMA_Abort+0x32a>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a68      	ldr	r2, [pc, #416]	; (8008498 <HAL_DMA_Abort+0x450>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d03b      	beq.n	8008372 <HAL_DMA_Abort+0x32a>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a67      	ldr	r2, [pc, #412]	; (800849c <HAL_DMA_Abort+0x454>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d036      	beq.n	8008372 <HAL_DMA_Abort+0x32a>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a65      	ldr	r2, [pc, #404]	; (80084a0 <HAL_DMA_Abort+0x458>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d031      	beq.n	8008372 <HAL_DMA_Abort+0x32a>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4a64      	ldr	r2, [pc, #400]	; (80084a4 <HAL_DMA_Abort+0x45c>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d02c      	beq.n	8008372 <HAL_DMA_Abort+0x32a>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4a62      	ldr	r2, [pc, #392]	; (80084a8 <HAL_DMA_Abort+0x460>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d027      	beq.n	8008372 <HAL_DMA_Abort+0x32a>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4a61      	ldr	r2, [pc, #388]	; (80084ac <HAL_DMA_Abort+0x464>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d022      	beq.n	8008372 <HAL_DMA_Abort+0x32a>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a5f      	ldr	r2, [pc, #380]	; (80084b0 <HAL_DMA_Abort+0x468>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d01d      	beq.n	8008372 <HAL_DMA_Abort+0x32a>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4a5e      	ldr	r2, [pc, #376]	; (80084b4 <HAL_DMA_Abort+0x46c>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d018      	beq.n	8008372 <HAL_DMA_Abort+0x32a>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a5c      	ldr	r2, [pc, #368]	; (80084b8 <HAL_DMA_Abort+0x470>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d013      	beq.n	8008372 <HAL_DMA_Abort+0x32a>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4a5b      	ldr	r2, [pc, #364]	; (80084bc <HAL_DMA_Abort+0x474>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d00e      	beq.n	8008372 <HAL_DMA_Abort+0x32a>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4a59      	ldr	r2, [pc, #356]	; (80084c0 <HAL_DMA_Abort+0x478>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d009      	beq.n	8008372 <HAL_DMA_Abort+0x32a>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4a58      	ldr	r2, [pc, #352]	; (80084c4 <HAL_DMA_Abort+0x47c>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d004      	beq.n	8008372 <HAL_DMA_Abort+0x32a>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a56      	ldr	r2, [pc, #344]	; (80084c8 <HAL_DMA_Abort+0x480>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d108      	bne.n	8008384 <HAL_DMA_Abort+0x33c>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	681a      	ldr	r2, [r3, #0]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f022 0201 	bic.w	r2, r2, #1
 8008380:	601a      	str	r2, [r3, #0]
 8008382:	e007      	b.n	8008394 <HAL_DMA_Abort+0x34c>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f022 0201 	bic.w	r2, r2, #1
 8008392:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8008394:	e013      	b.n	80083be <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008396:	f7fe ff45 	bl	8007224 <HAL_GetTick>
 800839a:	4602      	mov	r2, r0
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	1ad3      	subs	r3, r2, r3
 80083a0:	2b05      	cmp	r3, #5
 80083a2:	d90c      	bls.n	80083be <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2220      	movs	r2, #32
 80083a8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2203      	movs	r2, #3
 80083ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2200      	movs	r2, #0
 80083b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80083ba:	2301      	movs	r3, #1
 80083bc:	e12d      	b.n	800861a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f003 0301 	and.w	r3, r3, #1
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d1e5      	bne.n	8008396 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4a2f      	ldr	r2, [pc, #188]	; (800848c <HAL_DMA_Abort+0x444>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d04a      	beq.n	800846a <HAL_DMA_Abort+0x422>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a2d      	ldr	r2, [pc, #180]	; (8008490 <HAL_DMA_Abort+0x448>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d045      	beq.n	800846a <HAL_DMA_Abort+0x422>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a2c      	ldr	r2, [pc, #176]	; (8008494 <HAL_DMA_Abort+0x44c>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d040      	beq.n	800846a <HAL_DMA_Abort+0x422>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a2a      	ldr	r2, [pc, #168]	; (8008498 <HAL_DMA_Abort+0x450>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d03b      	beq.n	800846a <HAL_DMA_Abort+0x422>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a29      	ldr	r2, [pc, #164]	; (800849c <HAL_DMA_Abort+0x454>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d036      	beq.n	800846a <HAL_DMA_Abort+0x422>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a27      	ldr	r2, [pc, #156]	; (80084a0 <HAL_DMA_Abort+0x458>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d031      	beq.n	800846a <HAL_DMA_Abort+0x422>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a26      	ldr	r2, [pc, #152]	; (80084a4 <HAL_DMA_Abort+0x45c>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d02c      	beq.n	800846a <HAL_DMA_Abort+0x422>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4a24      	ldr	r2, [pc, #144]	; (80084a8 <HAL_DMA_Abort+0x460>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d027      	beq.n	800846a <HAL_DMA_Abort+0x422>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4a23      	ldr	r2, [pc, #140]	; (80084ac <HAL_DMA_Abort+0x464>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d022      	beq.n	800846a <HAL_DMA_Abort+0x422>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a21      	ldr	r2, [pc, #132]	; (80084b0 <HAL_DMA_Abort+0x468>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d01d      	beq.n	800846a <HAL_DMA_Abort+0x422>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4a20      	ldr	r2, [pc, #128]	; (80084b4 <HAL_DMA_Abort+0x46c>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d018      	beq.n	800846a <HAL_DMA_Abort+0x422>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a1e      	ldr	r2, [pc, #120]	; (80084b8 <HAL_DMA_Abort+0x470>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d013      	beq.n	800846a <HAL_DMA_Abort+0x422>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4a1d      	ldr	r2, [pc, #116]	; (80084bc <HAL_DMA_Abort+0x474>)
 8008448:	4293      	cmp	r3, r2
 800844a:	d00e      	beq.n	800846a <HAL_DMA_Abort+0x422>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4a1b      	ldr	r2, [pc, #108]	; (80084c0 <HAL_DMA_Abort+0x478>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d009      	beq.n	800846a <HAL_DMA_Abort+0x422>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a1a      	ldr	r2, [pc, #104]	; (80084c4 <HAL_DMA_Abort+0x47c>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d004      	beq.n	800846a <HAL_DMA_Abort+0x422>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4a18      	ldr	r2, [pc, #96]	; (80084c8 <HAL_DMA_Abort+0x480>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d101      	bne.n	800846e <HAL_DMA_Abort+0x426>
 800846a:	2301      	movs	r3, #1
 800846c:	e000      	b.n	8008470 <HAL_DMA_Abort+0x428>
 800846e:	2300      	movs	r3, #0
 8008470:	2b00      	cmp	r3, #0
 8008472:	d02b      	beq.n	80084cc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008478:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800847e:	f003 031f 	and.w	r3, r3, #31
 8008482:	223f      	movs	r2, #63	; 0x3f
 8008484:	409a      	lsls	r2, r3
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	609a      	str	r2, [r3, #8]
 800848a:	e02a      	b.n	80084e2 <HAL_DMA_Abort+0x49a>
 800848c:	40020010 	.word	0x40020010
 8008490:	40020028 	.word	0x40020028
 8008494:	40020040 	.word	0x40020040
 8008498:	40020058 	.word	0x40020058
 800849c:	40020070 	.word	0x40020070
 80084a0:	40020088 	.word	0x40020088
 80084a4:	400200a0 	.word	0x400200a0
 80084a8:	400200b8 	.word	0x400200b8
 80084ac:	40020410 	.word	0x40020410
 80084b0:	40020428 	.word	0x40020428
 80084b4:	40020440 	.word	0x40020440
 80084b8:	40020458 	.word	0x40020458
 80084bc:	40020470 	.word	0x40020470
 80084c0:	40020488 	.word	0x40020488
 80084c4:	400204a0 	.word	0x400204a0
 80084c8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084d0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084d6:	f003 031f 	and.w	r3, r3, #31
 80084da:	2201      	movs	r2, #1
 80084dc:	409a      	lsls	r2, r3
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4a4f      	ldr	r2, [pc, #316]	; (8008624 <HAL_DMA_Abort+0x5dc>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d072      	beq.n	80085d2 <HAL_DMA_Abort+0x58a>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a4d      	ldr	r2, [pc, #308]	; (8008628 <HAL_DMA_Abort+0x5e0>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d06d      	beq.n	80085d2 <HAL_DMA_Abort+0x58a>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a4c      	ldr	r2, [pc, #304]	; (800862c <HAL_DMA_Abort+0x5e4>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d068      	beq.n	80085d2 <HAL_DMA_Abort+0x58a>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a4a      	ldr	r2, [pc, #296]	; (8008630 <HAL_DMA_Abort+0x5e8>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d063      	beq.n	80085d2 <HAL_DMA_Abort+0x58a>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4a49      	ldr	r2, [pc, #292]	; (8008634 <HAL_DMA_Abort+0x5ec>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d05e      	beq.n	80085d2 <HAL_DMA_Abort+0x58a>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4a47      	ldr	r2, [pc, #284]	; (8008638 <HAL_DMA_Abort+0x5f0>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d059      	beq.n	80085d2 <HAL_DMA_Abort+0x58a>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4a46      	ldr	r2, [pc, #280]	; (800863c <HAL_DMA_Abort+0x5f4>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d054      	beq.n	80085d2 <HAL_DMA_Abort+0x58a>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a44      	ldr	r2, [pc, #272]	; (8008640 <HAL_DMA_Abort+0x5f8>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d04f      	beq.n	80085d2 <HAL_DMA_Abort+0x58a>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a43      	ldr	r2, [pc, #268]	; (8008644 <HAL_DMA_Abort+0x5fc>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d04a      	beq.n	80085d2 <HAL_DMA_Abort+0x58a>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a41      	ldr	r2, [pc, #260]	; (8008648 <HAL_DMA_Abort+0x600>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d045      	beq.n	80085d2 <HAL_DMA_Abort+0x58a>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a40      	ldr	r2, [pc, #256]	; (800864c <HAL_DMA_Abort+0x604>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d040      	beq.n	80085d2 <HAL_DMA_Abort+0x58a>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4a3e      	ldr	r2, [pc, #248]	; (8008650 <HAL_DMA_Abort+0x608>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d03b      	beq.n	80085d2 <HAL_DMA_Abort+0x58a>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4a3d      	ldr	r2, [pc, #244]	; (8008654 <HAL_DMA_Abort+0x60c>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d036      	beq.n	80085d2 <HAL_DMA_Abort+0x58a>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4a3b      	ldr	r2, [pc, #236]	; (8008658 <HAL_DMA_Abort+0x610>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d031      	beq.n	80085d2 <HAL_DMA_Abort+0x58a>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4a3a      	ldr	r2, [pc, #232]	; (800865c <HAL_DMA_Abort+0x614>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d02c      	beq.n	80085d2 <HAL_DMA_Abort+0x58a>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a38      	ldr	r2, [pc, #224]	; (8008660 <HAL_DMA_Abort+0x618>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d027      	beq.n	80085d2 <HAL_DMA_Abort+0x58a>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a37      	ldr	r2, [pc, #220]	; (8008664 <HAL_DMA_Abort+0x61c>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d022      	beq.n	80085d2 <HAL_DMA_Abort+0x58a>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a35      	ldr	r2, [pc, #212]	; (8008668 <HAL_DMA_Abort+0x620>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d01d      	beq.n	80085d2 <HAL_DMA_Abort+0x58a>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a34      	ldr	r2, [pc, #208]	; (800866c <HAL_DMA_Abort+0x624>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d018      	beq.n	80085d2 <HAL_DMA_Abort+0x58a>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a32      	ldr	r2, [pc, #200]	; (8008670 <HAL_DMA_Abort+0x628>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d013      	beq.n	80085d2 <HAL_DMA_Abort+0x58a>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a31      	ldr	r2, [pc, #196]	; (8008674 <HAL_DMA_Abort+0x62c>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d00e      	beq.n	80085d2 <HAL_DMA_Abort+0x58a>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a2f      	ldr	r2, [pc, #188]	; (8008678 <HAL_DMA_Abort+0x630>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d009      	beq.n	80085d2 <HAL_DMA_Abort+0x58a>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4a2e      	ldr	r2, [pc, #184]	; (800867c <HAL_DMA_Abort+0x634>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d004      	beq.n	80085d2 <HAL_DMA_Abort+0x58a>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a2c      	ldr	r2, [pc, #176]	; (8008680 <HAL_DMA_Abort+0x638>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d101      	bne.n	80085d6 <HAL_DMA_Abort+0x58e>
 80085d2:	2301      	movs	r3, #1
 80085d4:	e000      	b.n	80085d8 <HAL_DMA_Abort+0x590>
 80085d6:	2300      	movs	r3, #0
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d015      	beq.n	8008608 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085e0:	687a      	ldr	r2, [r7, #4]
 80085e2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80085e4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d00c      	beq.n	8008608 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085f2:	681a      	ldr	r2, [r3, #0]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80085fc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008602:	687a      	ldr	r2, [r7, #4]
 8008604:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008606:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2201      	movs	r2, #1
 800860c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2200      	movs	r2, #0
 8008614:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8008618:	2300      	movs	r3, #0
}
 800861a:	4618      	mov	r0, r3
 800861c:	3718      	adds	r7, #24
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
 8008622:	bf00      	nop
 8008624:	40020010 	.word	0x40020010
 8008628:	40020028 	.word	0x40020028
 800862c:	40020040 	.word	0x40020040
 8008630:	40020058 	.word	0x40020058
 8008634:	40020070 	.word	0x40020070
 8008638:	40020088 	.word	0x40020088
 800863c:	400200a0 	.word	0x400200a0
 8008640:	400200b8 	.word	0x400200b8
 8008644:	40020410 	.word	0x40020410
 8008648:	40020428 	.word	0x40020428
 800864c:	40020440 	.word	0x40020440
 8008650:	40020458 	.word	0x40020458
 8008654:	40020470 	.word	0x40020470
 8008658:	40020488 	.word	0x40020488
 800865c:	400204a0 	.word	0x400204a0
 8008660:	400204b8 	.word	0x400204b8
 8008664:	58025408 	.word	0x58025408
 8008668:	5802541c 	.word	0x5802541c
 800866c:	58025430 	.word	0x58025430
 8008670:	58025444 	.word	0x58025444
 8008674:	58025458 	.word	0x58025458
 8008678:	5802546c 	.word	0x5802546c
 800867c:	58025480 	.word	0x58025480
 8008680:	58025494 	.word	0x58025494

08008684 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b084      	sub	sp, #16
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d101      	bne.n	8008696 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8008692:	2301      	movs	r3, #1
 8008694:	e237      	b.n	8008b06 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800869c:	b2db      	uxtb	r3, r3
 800869e:	2b02      	cmp	r3, #2
 80086a0:	d004      	beq.n	80086ac <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2280      	movs	r2, #128	; 0x80
 80086a6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80086a8:	2301      	movs	r3, #1
 80086aa:	e22c      	b.n	8008b06 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4a5c      	ldr	r2, [pc, #368]	; (8008824 <HAL_DMA_Abort_IT+0x1a0>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d04a      	beq.n	800874c <HAL_DMA_Abort_IT+0xc8>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4a5b      	ldr	r2, [pc, #364]	; (8008828 <HAL_DMA_Abort_IT+0x1a4>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d045      	beq.n	800874c <HAL_DMA_Abort_IT+0xc8>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4a59      	ldr	r2, [pc, #356]	; (800882c <HAL_DMA_Abort_IT+0x1a8>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d040      	beq.n	800874c <HAL_DMA_Abort_IT+0xc8>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4a58      	ldr	r2, [pc, #352]	; (8008830 <HAL_DMA_Abort_IT+0x1ac>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d03b      	beq.n	800874c <HAL_DMA_Abort_IT+0xc8>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4a56      	ldr	r2, [pc, #344]	; (8008834 <HAL_DMA_Abort_IT+0x1b0>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d036      	beq.n	800874c <HAL_DMA_Abort_IT+0xc8>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	4a55      	ldr	r2, [pc, #340]	; (8008838 <HAL_DMA_Abort_IT+0x1b4>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d031      	beq.n	800874c <HAL_DMA_Abort_IT+0xc8>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a53      	ldr	r2, [pc, #332]	; (800883c <HAL_DMA_Abort_IT+0x1b8>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d02c      	beq.n	800874c <HAL_DMA_Abort_IT+0xc8>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a52      	ldr	r2, [pc, #328]	; (8008840 <HAL_DMA_Abort_IT+0x1bc>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d027      	beq.n	800874c <HAL_DMA_Abort_IT+0xc8>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a50      	ldr	r2, [pc, #320]	; (8008844 <HAL_DMA_Abort_IT+0x1c0>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d022      	beq.n	800874c <HAL_DMA_Abort_IT+0xc8>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a4f      	ldr	r2, [pc, #316]	; (8008848 <HAL_DMA_Abort_IT+0x1c4>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d01d      	beq.n	800874c <HAL_DMA_Abort_IT+0xc8>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a4d      	ldr	r2, [pc, #308]	; (800884c <HAL_DMA_Abort_IT+0x1c8>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d018      	beq.n	800874c <HAL_DMA_Abort_IT+0xc8>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4a4c      	ldr	r2, [pc, #304]	; (8008850 <HAL_DMA_Abort_IT+0x1cc>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d013      	beq.n	800874c <HAL_DMA_Abort_IT+0xc8>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a4a      	ldr	r2, [pc, #296]	; (8008854 <HAL_DMA_Abort_IT+0x1d0>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d00e      	beq.n	800874c <HAL_DMA_Abort_IT+0xc8>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a49      	ldr	r2, [pc, #292]	; (8008858 <HAL_DMA_Abort_IT+0x1d4>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d009      	beq.n	800874c <HAL_DMA_Abort_IT+0xc8>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4a47      	ldr	r2, [pc, #284]	; (800885c <HAL_DMA_Abort_IT+0x1d8>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d004      	beq.n	800874c <HAL_DMA_Abort_IT+0xc8>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a46      	ldr	r2, [pc, #280]	; (8008860 <HAL_DMA_Abort_IT+0x1dc>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d101      	bne.n	8008750 <HAL_DMA_Abort_IT+0xcc>
 800874c:	2301      	movs	r3, #1
 800874e:	e000      	b.n	8008752 <HAL_DMA_Abort_IT+0xce>
 8008750:	2300      	movs	r3, #0
 8008752:	2b00      	cmp	r3, #0
 8008754:	f000 8086 	beq.w	8008864 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2204      	movs	r2, #4
 800875c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4a2f      	ldr	r2, [pc, #188]	; (8008824 <HAL_DMA_Abort_IT+0x1a0>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d04a      	beq.n	8008800 <HAL_DMA_Abort_IT+0x17c>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4a2e      	ldr	r2, [pc, #184]	; (8008828 <HAL_DMA_Abort_IT+0x1a4>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d045      	beq.n	8008800 <HAL_DMA_Abort_IT+0x17c>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4a2c      	ldr	r2, [pc, #176]	; (800882c <HAL_DMA_Abort_IT+0x1a8>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d040      	beq.n	8008800 <HAL_DMA_Abort_IT+0x17c>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	4a2b      	ldr	r2, [pc, #172]	; (8008830 <HAL_DMA_Abort_IT+0x1ac>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d03b      	beq.n	8008800 <HAL_DMA_Abort_IT+0x17c>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a29      	ldr	r2, [pc, #164]	; (8008834 <HAL_DMA_Abort_IT+0x1b0>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d036      	beq.n	8008800 <HAL_DMA_Abort_IT+0x17c>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	4a28      	ldr	r2, [pc, #160]	; (8008838 <HAL_DMA_Abort_IT+0x1b4>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d031      	beq.n	8008800 <HAL_DMA_Abort_IT+0x17c>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a26      	ldr	r2, [pc, #152]	; (800883c <HAL_DMA_Abort_IT+0x1b8>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d02c      	beq.n	8008800 <HAL_DMA_Abort_IT+0x17c>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a25      	ldr	r2, [pc, #148]	; (8008840 <HAL_DMA_Abort_IT+0x1bc>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d027      	beq.n	8008800 <HAL_DMA_Abort_IT+0x17c>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4a23      	ldr	r2, [pc, #140]	; (8008844 <HAL_DMA_Abort_IT+0x1c0>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d022      	beq.n	8008800 <HAL_DMA_Abort_IT+0x17c>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4a22      	ldr	r2, [pc, #136]	; (8008848 <HAL_DMA_Abort_IT+0x1c4>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d01d      	beq.n	8008800 <HAL_DMA_Abort_IT+0x17c>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4a20      	ldr	r2, [pc, #128]	; (800884c <HAL_DMA_Abort_IT+0x1c8>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d018      	beq.n	8008800 <HAL_DMA_Abort_IT+0x17c>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4a1f      	ldr	r2, [pc, #124]	; (8008850 <HAL_DMA_Abort_IT+0x1cc>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d013      	beq.n	8008800 <HAL_DMA_Abort_IT+0x17c>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a1d      	ldr	r2, [pc, #116]	; (8008854 <HAL_DMA_Abort_IT+0x1d0>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d00e      	beq.n	8008800 <HAL_DMA_Abort_IT+0x17c>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4a1c      	ldr	r2, [pc, #112]	; (8008858 <HAL_DMA_Abort_IT+0x1d4>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d009      	beq.n	8008800 <HAL_DMA_Abort_IT+0x17c>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a1a      	ldr	r2, [pc, #104]	; (800885c <HAL_DMA_Abort_IT+0x1d8>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d004      	beq.n	8008800 <HAL_DMA_Abort_IT+0x17c>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a19      	ldr	r2, [pc, #100]	; (8008860 <HAL_DMA_Abort_IT+0x1dc>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d108      	bne.n	8008812 <HAL_DMA_Abort_IT+0x18e>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	681a      	ldr	r2, [r3, #0]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f022 0201 	bic.w	r2, r2, #1
 800880e:	601a      	str	r2, [r3, #0]
 8008810:	e178      	b.n	8008b04 <HAL_DMA_Abort_IT+0x480>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	681a      	ldr	r2, [r3, #0]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f022 0201 	bic.w	r2, r2, #1
 8008820:	601a      	str	r2, [r3, #0]
 8008822:	e16f      	b.n	8008b04 <HAL_DMA_Abort_IT+0x480>
 8008824:	40020010 	.word	0x40020010
 8008828:	40020028 	.word	0x40020028
 800882c:	40020040 	.word	0x40020040
 8008830:	40020058 	.word	0x40020058
 8008834:	40020070 	.word	0x40020070
 8008838:	40020088 	.word	0x40020088
 800883c:	400200a0 	.word	0x400200a0
 8008840:	400200b8 	.word	0x400200b8
 8008844:	40020410 	.word	0x40020410
 8008848:	40020428 	.word	0x40020428
 800884c:	40020440 	.word	0x40020440
 8008850:	40020458 	.word	0x40020458
 8008854:	40020470 	.word	0x40020470
 8008858:	40020488 	.word	0x40020488
 800885c:	400204a0 	.word	0x400204a0
 8008860:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	681a      	ldr	r2, [r3, #0]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f022 020e 	bic.w	r2, r2, #14
 8008872:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4a6c      	ldr	r2, [pc, #432]	; (8008a2c <HAL_DMA_Abort_IT+0x3a8>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d04a      	beq.n	8008914 <HAL_DMA_Abort_IT+0x290>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	4a6b      	ldr	r2, [pc, #428]	; (8008a30 <HAL_DMA_Abort_IT+0x3ac>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d045      	beq.n	8008914 <HAL_DMA_Abort_IT+0x290>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a69      	ldr	r2, [pc, #420]	; (8008a34 <HAL_DMA_Abort_IT+0x3b0>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d040      	beq.n	8008914 <HAL_DMA_Abort_IT+0x290>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4a68      	ldr	r2, [pc, #416]	; (8008a38 <HAL_DMA_Abort_IT+0x3b4>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d03b      	beq.n	8008914 <HAL_DMA_Abort_IT+0x290>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4a66      	ldr	r2, [pc, #408]	; (8008a3c <HAL_DMA_Abort_IT+0x3b8>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d036      	beq.n	8008914 <HAL_DMA_Abort_IT+0x290>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4a65      	ldr	r2, [pc, #404]	; (8008a40 <HAL_DMA_Abort_IT+0x3bc>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d031      	beq.n	8008914 <HAL_DMA_Abort_IT+0x290>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4a63      	ldr	r2, [pc, #396]	; (8008a44 <HAL_DMA_Abort_IT+0x3c0>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d02c      	beq.n	8008914 <HAL_DMA_Abort_IT+0x290>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4a62      	ldr	r2, [pc, #392]	; (8008a48 <HAL_DMA_Abort_IT+0x3c4>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d027      	beq.n	8008914 <HAL_DMA_Abort_IT+0x290>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4a60      	ldr	r2, [pc, #384]	; (8008a4c <HAL_DMA_Abort_IT+0x3c8>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d022      	beq.n	8008914 <HAL_DMA_Abort_IT+0x290>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	4a5f      	ldr	r2, [pc, #380]	; (8008a50 <HAL_DMA_Abort_IT+0x3cc>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d01d      	beq.n	8008914 <HAL_DMA_Abort_IT+0x290>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4a5d      	ldr	r2, [pc, #372]	; (8008a54 <HAL_DMA_Abort_IT+0x3d0>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d018      	beq.n	8008914 <HAL_DMA_Abort_IT+0x290>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4a5c      	ldr	r2, [pc, #368]	; (8008a58 <HAL_DMA_Abort_IT+0x3d4>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d013      	beq.n	8008914 <HAL_DMA_Abort_IT+0x290>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4a5a      	ldr	r2, [pc, #360]	; (8008a5c <HAL_DMA_Abort_IT+0x3d8>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d00e      	beq.n	8008914 <HAL_DMA_Abort_IT+0x290>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4a59      	ldr	r2, [pc, #356]	; (8008a60 <HAL_DMA_Abort_IT+0x3dc>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d009      	beq.n	8008914 <HAL_DMA_Abort_IT+0x290>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4a57      	ldr	r2, [pc, #348]	; (8008a64 <HAL_DMA_Abort_IT+0x3e0>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d004      	beq.n	8008914 <HAL_DMA_Abort_IT+0x290>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4a56      	ldr	r2, [pc, #344]	; (8008a68 <HAL_DMA_Abort_IT+0x3e4>)
 8008910:	4293      	cmp	r3, r2
 8008912:	d108      	bne.n	8008926 <HAL_DMA_Abort_IT+0x2a2>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	681a      	ldr	r2, [r3, #0]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f022 0201 	bic.w	r2, r2, #1
 8008922:	601a      	str	r2, [r3, #0]
 8008924:	e007      	b.n	8008936 <HAL_DMA_Abort_IT+0x2b2>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	681a      	ldr	r2, [r3, #0]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f022 0201 	bic.w	r2, r2, #1
 8008934:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4a3c      	ldr	r2, [pc, #240]	; (8008a2c <HAL_DMA_Abort_IT+0x3a8>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d072      	beq.n	8008a26 <HAL_DMA_Abort_IT+0x3a2>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a3a      	ldr	r2, [pc, #232]	; (8008a30 <HAL_DMA_Abort_IT+0x3ac>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d06d      	beq.n	8008a26 <HAL_DMA_Abort_IT+0x3a2>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4a39      	ldr	r2, [pc, #228]	; (8008a34 <HAL_DMA_Abort_IT+0x3b0>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d068      	beq.n	8008a26 <HAL_DMA_Abort_IT+0x3a2>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a37      	ldr	r2, [pc, #220]	; (8008a38 <HAL_DMA_Abort_IT+0x3b4>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d063      	beq.n	8008a26 <HAL_DMA_Abort_IT+0x3a2>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4a36      	ldr	r2, [pc, #216]	; (8008a3c <HAL_DMA_Abort_IT+0x3b8>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d05e      	beq.n	8008a26 <HAL_DMA_Abort_IT+0x3a2>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a34      	ldr	r2, [pc, #208]	; (8008a40 <HAL_DMA_Abort_IT+0x3bc>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d059      	beq.n	8008a26 <HAL_DMA_Abort_IT+0x3a2>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4a33      	ldr	r2, [pc, #204]	; (8008a44 <HAL_DMA_Abort_IT+0x3c0>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d054      	beq.n	8008a26 <HAL_DMA_Abort_IT+0x3a2>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a31      	ldr	r2, [pc, #196]	; (8008a48 <HAL_DMA_Abort_IT+0x3c4>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d04f      	beq.n	8008a26 <HAL_DMA_Abort_IT+0x3a2>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4a30      	ldr	r2, [pc, #192]	; (8008a4c <HAL_DMA_Abort_IT+0x3c8>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d04a      	beq.n	8008a26 <HAL_DMA_Abort_IT+0x3a2>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4a2e      	ldr	r2, [pc, #184]	; (8008a50 <HAL_DMA_Abort_IT+0x3cc>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d045      	beq.n	8008a26 <HAL_DMA_Abort_IT+0x3a2>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4a2d      	ldr	r2, [pc, #180]	; (8008a54 <HAL_DMA_Abort_IT+0x3d0>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d040      	beq.n	8008a26 <HAL_DMA_Abort_IT+0x3a2>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4a2b      	ldr	r2, [pc, #172]	; (8008a58 <HAL_DMA_Abort_IT+0x3d4>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d03b      	beq.n	8008a26 <HAL_DMA_Abort_IT+0x3a2>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4a2a      	ldr	r2, [pc, #168]	; (8008a5c <HAL_DMA_Abort_IT+0x3d8>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d036      	beq.n	8008a26 <HAL_DMA_Abort_IT+0x3a2>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a28      	ldr	r2, [pc, #160]	; (8008a60 <HAL_DMA_Abort_IT+0x3dc>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d031      	beq.n	8008a26 <HAL_DMA_Abort_IT+0x3a2>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a27      	ldr	r2, [pc, #156]	; (8008a64 <HAL_DMA_Abort_IT+0x3e0>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d02c      	beq.n	8008a26 <HAL_DMA_Abort_IT+0x3a2>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a25      	ldr	r2, [pc, #148]	; (8008a68 <HAL_DMA_Abort_IT+0x3e4>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d027      	beq.n	8008a26 <HAL_DMA_Abort_IT+0x3a2>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4a24      	ldr	r2, [pc, #144]	; (8008a6c <HAL_DMA_Abort_IT+0x3e8>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d022      	beq.n	8008a26 <HAL_DMA_Abort_IT+0x3a2>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a22      	ldr	r2, [pc, #136]	; (8008a70 <HAL_DMA_Abort_IT+0x3ec>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d01d      	beq.n	8008a26 <HAL_DMA_Abort_IT+0x3a2>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4a21      	ldr	r2, [pc, #132]	; (8008a74 <HAL_DMA_Abort_IT+0x3f0>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d018      	beq.n	8008a26 <HAL_DMA_Abort_IT+0x3a2>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4a1f      	ldr	r2, [pc, #124]	; (8008a78 <HAL_DMA_Abort_IT+0x3f4>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d013      	beq.n	8008a26 <HAL_DMA_Abort_IT+0x3a2>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4a1e      	ldr	r2, [pc, #120]	; (8008a7c <HAL_DMA_Abort_IT+0x3f8>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d00e      	beq.n	8008a26 <HAL_DMA_Abort_IT+0x3a2>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4a1c      	ldr	r2, [pc, #112]	; (8008a80 <HAL_DMA_Abort_IT+0x3fc>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d009      	beq.n	8008a26 <HAL_DMA_Abort_IT+0x3a2>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4a1b      	ldr	r2, [pc, #108]	; (8008a84 <HAL_DMA_Abort_IT+0x400>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d004      	beq.n	8008a26 <HAL_DMA_Abort_IT+0x3a2>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a19      	ldr	r2, [pc, #100]	; (8008a88 <HAL_DMA_Abort_IT+0x404>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d132      	bne.n	8008a8c <HAL_DMA_Abort_IT+0x408>
 8008a26:	2301      	movs	r3, #1
 8008a28:	e031      	b.n	8008a8e <HAL_DMA_Abort_IT+0x40a>
 8008a2a:	bf00      	nop
 8008a2c:	40020010 	.word	0x40020010
 8008a30:	40020028 	.word	0x40020028
 8008a34:	40020040 	.word	0x40020040
 8008a38:	40020058 	.word	0x40020058
 8008a3c:	40020070 	.word	0x40020070
 8008a40:	40020088 	.word	0x40020088
 8008a44:	400200a0 	.word	0x400200a0
 8008a48:	400200b8 	.word	0x400200b8
 8008a4c:	40020410 	.word	0x40020410
 8008a50:	40020428 	.word	0x40020428
 8008a54:	40020440 	.word	0x40020440
 8008a58:	40020458 	.word	0x40020458
 8008a5c:	40020470 	.word	0x40020470
 8008a60:	40020488 	.word	0x40020488
 8008a64:	400204a0 	.word	0x400204a0
 8008a68:	400204b8 	.word	0x400204b8
 8008a6c:	58025408 	.word	0x58025408
 8008a70:	5802541c 	.word	0x5802541c
 8008a74:	58025430 	.word	0x58025430
 8008a78:	58025444 	.word	0x58025444
 8008a7c:	58025458 	.word	0x58025458
 8008a80:	5802546c 	.word	0x5802546c
 8008a84:	58025480 	.word	0x58025480
 8008a88:	58025494 	.word	0x58025494
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d028      	beq.n	8008ae4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a96:	681a      	ldr	r2, [r3, #0]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008aa0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008aa6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008aac:	f003 031f 	and.w	r3, r3, #31
 8008ab0:	2201      	movs	r2, #1
 8008ab2:	409a      	lsls	r2, r3
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008abc:	687a      	ldr	r2, [r7, #4]
 8008abe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008ac0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d00c      	beq.n	8008ae4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ace:	681a      	ldr	r2, [r3, #0]
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ad4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008ad8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ade:	687a      	ldr	r2, [r7, #4]
 8008ae0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008ae2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2200      	movs	r2, #0
 8008af0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d003      	beq.n	8008b04 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8008b04:	2300      	movs	r3, #0
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3710      	adds	r7, #16
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}
 8008b0e:	bf00      	nop

08008b10 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b08a      	sub	sp, #40	; 0x28
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008b1c:	4b67      	ldr	r3, [pc, #412]	; (8008cbc <HAL_DMA_IRQHandler+0x1ac>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4a67      	ldr	r2, [pc, #412]	; (8008cc0 <HAL_DMA_IRQHandler+0x1b0>)
 8008b22:	fba2 2303 	umull	r2, r3, r2, r3
 8008b26:	0a9b      	lsrs	r3, r3, #10
 8008b28:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b2e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b34:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8008b36:	6a3b      	ldr	r3, [r7, #32]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8008b3c:	69fb      	ldr	r3, [r7, #28]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4a5f      	ldr	r2, [pc, #380]	; (8008cc4 <HAL_DMA_IRQHandler+0x1b4>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d04a      	beq.n	8008be2 <HAL_DMA_IRQHandler+0xd2>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a5d      	ldr	r2, [pc, #372]	; (8008cc8 <HAL_DMA_IRQHandler+0x1b8>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d045      	beq.n	8008be2 <HAL_DMA_IRQHandler+0xd2>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a5c      	ldr	r2, [pc, #368]	; (8008ccc <HAL_DMA_IRQHandler+0x1bc>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d040      	beq.n	8008be2 <HAL_DMA_IRQHandler+0xd2>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4a5a      	ldr	r2, [pc, #360]	; (8008cd0 <HAL_DMA_IRQHandler+0x1c0>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d03b      	beq.n	8008be2 <HAL_DMA_IRQHandler+0xd2>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4a59      	ldr	r2, [pc, #356]	; (8008cd4 <HAL_DMA_IRQHandler+0x1c4>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d036      	beq.n	8008be2 <HAL_DMA_IRQHandler+0xd2>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a57      	ldr	r2, [pc, #348]	; (8008cd8 <HAL_DMA_IRQHandler+0x1c8>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d031      	beq.n	8008be2 <HAL_DMA_IRQHandler+0xd2>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4a56      	ldr	r2, [pc, #344]	; (8008cdc <HAL_DMA_IRQHandler+0x1cc>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d02c      	beq.n	8008be2 <HAL_DMA_IRQHandler+0xd2>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4a54      	ldr	r2, [pc, #336]	; (8008ce0 <HAL_DMA_IRQHandler+0x1d0>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d027      	beq.n	8008be2 <HAL_DMA_IRQHandler+0xd2>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4a53      	ldr	r2, [pc, #332]	; (8008ce4 <HAL_DMA_IRQHandler+0x1d4>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d022      	beq.n	8008be2 <HAL_DMA_IRQHandler+0xd2>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a51      	ldr	r2, [pc, #324]	; (8008ce8 <HAL_DMA_IRQHandler+0x1d8>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d01d      	beq.n	8008be2 <HAL_DMA_IRQHandler+0xd2>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	4a50      	ldr	r2, [pc, #320]	; (8008cec <HAL_DMA_IRQHandler+0x1dc>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d018      	beq.n	8008be2 <HAL_DMA_IRQHandler+0xd2>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4a4e      	ldr	r2, [pc, #312]	; (8008cf0 <HAL_DMA_IRQHandler+0x1e0>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d013      	beq.n	8008be2 <HAL_DMA_IRQHandler+0xd2>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	4a4d      	ldr	r2, [pc, #308]	; (8008cf4 <HAL_DMA_IRQHandler+0x1e4>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d00e      	beq.n	8008be2 <HAL_DMA_IRQHandler+0xd2>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	4a4b      	ldr	r2, [pc, #300]	; (8008cf8 <HAL_DMA_IRQHandler+0x1e8>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d009      	beq.n	8008be2 <HAL_DMA_IRQHandler+0xd2>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4a4a      	ldr	r2, [pc, #296]	; (8008cfc <HAL_DMA_IRQHandler+0x1ec>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d004      	beq.n	8008be2 <HAL_DMA_IRQHandler+0xd2>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4a48      	ldr	r2, [pc, #288]	; (8008d00 <HAL_DMA_IRQHandler+0x1f0>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d101      	bne.n	8008be6 <HAL_DMA_IRQHandler+0xd6>
 8008be2:	2301      	movs	r3, #1
 8008be4:	e000      	b.n	8008be8 <HAL_DMA_IRQHandler+0xd8>
 8008be6:	2300      	movs	r3, #0
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	f000 842b 	beq.w	8009444 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bf2:	f003 031f 	and.w	r3, r3, #31
 8008bf6:	2208      	movs	r2, #8
 8008bf8:	409a      	lsls	r2, r3
 8008bfa:	69bb      	ldr	r3, [r7, #24]
 8008bfc:	4013      	ands	r3, r2
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	f000 80a2 	beq.w	8008d48 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4a2e      	ldr	r2, [pc, #184]	; (8008cc4 <HAL_DMA_IRQHandler+0x1b4>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d04a      	beq.n	8008ca4 <HAL_DMA_IRQHandler+0x194>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	4a2d      	ldr	r2, [pc, #180]	; (8008cc8 <HAL_DMA_IRQHandler+0x1b8>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d045      	beq.n	8008ca4 <HAL_DMA_IRQHandler+0x194>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	4a2b      	ldr	r2, [pc, #172]	; (8008ccc <HAL_DMA_IRQHandler+0x1bc>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d040      	beq.n	8008ca4 <HAL_DMA_IRQHandler+0x194>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	4a2a      	ldr	r2, [pc, #168]	; (8008cd0 <HAL_DMA_IRQHandler+0x1c0>)
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d03b      	beq.n	8008ca4 <HAL_DMA_IRQHandler+0x194>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4a28      	ldr	r2, [pc, #160]	; (8008cd4 <HAL_DMA_IRQHandler+0x1c4>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d036      	beq.n	8008ca4 <HAL_DMA_IRQHandler+0x194>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	4a27      	ldr	r2, [pc, #156]	; (8008cd8 <HAL_DMA_IRQHandler+0x1c8>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d031      	beq.n	8008ca4 <HAL_DMA_IRQHandler+0x194>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	4a25      	ldr	r2, [pc, #148]	; (8008cdc <HAL_DMA_IRQHandler+0x1cc>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d02c      	beq.n	8008ca4 <HAL_DMA_IRQHandler+0x194>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	4a24      	ldr	r2, [pc, #144]	; (8008ce0 <HAL_DMA_IRQHandler+0x1d0>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d027      	beq.n	8008ca4 <HAL_DMA_IRQHandler+0x194>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	4a22      	ldr	r2, [pc, #136]	; (8008ce4 <HAL_DMA_IRQHandler+0x1d4>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d022      	beq.n	8008ca4 <HAL_DMA_IRQHandler+0x194>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	4a21      	ldr	r2, [pc, #132]	; (8008ce8 <HAL_DMA_IRQHandler+0x1d8>)
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d01d      	beq.n	8008ca4 <HAL_DMA_IRQHandler+0x194>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4a1f      	ldr	r2, [pc, #124]	; (8008cec <HAL_DMA_IRQHandler+0x1dc>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d018      	beq.n	8008ca4 <HAL_DMA_IRQHandler+0x194>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4a1e      	ldr	r2, [pc, #120]	; (8008cf0 <HAL_DMA_IRQHandler+0x1e0>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d013      	beq.n	8008ca4 <HAL_DMA_IRQHandler+0x194>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4a1c      	ldr	r2, [pc, #112]	; (8008cf4 <HAL_DMA_IRQHandler+0x1e4>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d00e      	beq.n	8008ca4 <HAL_DMA_IRQHandler+0x194>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4a1b      	ldr	r2, [pc, #108]	; (8008cf8 <HAL_DMA_IRQHandler+0x1e8>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d009      	beq.n	8008ca4 <HAL_DMA_IRQHandler+0x194>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	4a19      	ldr	r2, [pc, #100]	; (8008cfc <HAL_DMA_IRQHandler+0x1ec>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d004      	beq.n	8008ca4 <HAL_DMA_IRQHandler+0x194>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	4a18      	ldr	r2, [pc, #96]	; (8008d00 <HAL_DMA_IRQHandler+0x1f0>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d12f      	bne.n	8008d04 <HAL_DMA_IRQHandler+0x1f4>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f003 0304 	and.w	r3, r3, #4
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	bf14      	ite	ne
 8008cb2:	2301      	movne	r3, #1
 8008cb4:	2300      	moveq	r3, #0
 8008cb6:	b2db      	uxtb	r3, r3
 8008cb8:	e02e      	b.n	8008d18 <HAL_DMA_IRQHandler+0x208>
 8008cba:	bf00      	nop
 8008cbc:	24000000 	.word	0x24000000
 8008cc0:	1b4e81b5 	.word	0x1b4e81b5
 8008cc4:	40020010 	.word	0x40020010
 8008cc8:	40020028 	.word	0x40020028
 8008ccc:	40020040 	.word	0x40020040
 8008cd0:	40020058 	.word	0x40020058
 8008cd4:	40020070 	.word	0x40020070
 8008cd8:	40020088 	.word	0x40020088
 8008cdc:	400200a0 	.word	0x400200a0
 8008ce0:	400200b8 	.word	0x400200b8
 8008ce4:	40020410 	.word	0x40020410
 8008ce8:	40020428 	.word	0x40020428
 8008cec:	40020440 	.word	0x40020440
 8008cf0:	40020458 	.word	0x40020458
 8008cf4:	40020470 	.word	0x40020470
 8008cf8:	40020488 	.word	0x40020488
 8008cfc:	400204a0 	.word	0x400204a0
 8008d00:	400204b8 	.word	0x400204b8
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f003 0308 	and.w	r3, r3, #8
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	bf14      	ite	ne
 8008d12:	2301      	movne	r3, #1
 8008d14:	2300      	moveq	r3, #0
 8008d16:	b2db      	uxtb	r3, r3
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d015      	beq.n	8008d48 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	681a      	ldr	r2, [r3, #0]
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f022 0204 	bic.w	r2, r2, #4
 8008d2a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d30:	f003 031f 	and.w	r3, r3, #31
 8008d34:	2208      	movs	r2, #8
 8008d36:	409a      	lsls	r2, r3
 8008d38:	6a3b      	ldr	r3, [r7, #32]
 8008d3a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d40:	f043 0201 	orr.w	r2, r3, #1
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d4c:	f003 031f 	and.w	r3, r3, #31
 8008d50:	69ba      	ldr	r2, [r7, #24]
 8008d52:	fa22 f303 	lsr.w	r3, r2, r3
 8008d56:	f003 0301 	and.w	r3, r3, #1
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d06e      	beq.n	8008e3c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	4a69      	ldr	r2, [pc, #420]	; (8008f08 <HAL_DMA_IRQHandler+0x3f8>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d04a      	beq.n	8008dfe <HAL_DMA_IRQHandler+0x2ee>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4a67      	ldr	r2, [pc, #412]	; (8008f0c <HAL_DMA_IRQHandler+0x3fc>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d045      	beq.n	8008dfe <HAL_DMA_IRQHandler+0x2ee>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4a66      	ldr	r2, [pc, #408]	; (8008f10 <HAL_DMA_IRQHandler+0x400>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d040      	beq.n	8008dfe <HAL_DMA_IRQHandler+0x2ee>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4a64      	ldr	r2, [pc, #400]	; (8008f14 <HAL_DMA_IRQHandler+0x404>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d03b      	beq.n	8008dfe <HAL_DMA_IRQHandler+0x2ee>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4a63      	ldr	r2, [pc, #396]	; (8008f18 <HAL_DMA_IRQHandler+0x408>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d036      	beq.n	8008dfe <HAL_DMA_IRQHandler+0x2ee>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4a61      	ldr	r2, [pc, #388]	; (8008f1c <HAL_DMA_IRQHandler+0x40c>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d031      	beq.n	8008dfe <HAL_DMA_IRQHandler+0x2ee>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4a60      	ldr	r2, [pc, #384]	; (8008f20 <HAL_DMA_IRQHandler+0x410>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d02c      	beq.n	8008dfe <HAL_DMA_IRQHandler+0x2ee>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4a5e      	ldr	r2, [pc, #376]	; (8008f24 <HAL_DMA_IRQHandler+0x414>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d027      	beq.n	8008dfe <HAL_DMA_IRQHandler+0x2ee>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	4a5d      	ldr	r2, [pc, #372]	; (8008f28 <HAL_DMA_IRQHandler+0x418>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d022      	beq.n	8008dfe <HAL_DMA_IRQHandler+0x2ee>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4a5b      	ldr	r2, [pc, #364]	; (8008f2c <HAL_DMA_IRQHandler+0x41c>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d01d      	beq.n	8008dfe <HAL_DMA_IRQHandler+0x2ee>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4a5a      	ldr	r2, [pc, #360]	; (8008f30 <HAL_DMA_IRQHandler+0x420>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d018      	beq.n	8008dfe <HAL_DMA_IRQHandler+0x2ee>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4a58      	ldr	r2, [pc, #352]	; (8008f34 <HAL_DMA_IRQHandler+0x424>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d013      	beq.n	8008dfe <HAL_DMA_IRQHandler+0x2ee>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	4a57      	ldr	r2, [pc, #348]	; (8008f38 <HAL_DMA_IRQHandler+0x428>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d00e      	beq.n	8008dfe <HAL_DMA_IRQHandler+0x2ee>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	4a55      	ldr	r2, [pc, #340]	; (8008f3c <HAL_DMA_IRQHandler+0x42c>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d009      	beq.n	8008dfe <HAL_DMA_IRQHandler+0x2ee>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	4a54      	ldr	r2, [pc, #336]	; (8008f40 <HAL_DMA_IRQHandler+0x430>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d004      	beq.n	8008dfe <HAL_DMA_IRQHandler+0x2ee>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	4a52      	ldr	r2, [pc, #328]	; (8008f44 <HAL_DMA_IRQHandler+0x434>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d10a      	bne.n	8008e14 <HAL_DMA_IRQHandler+0x304>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	695b      	ldr	r3, [r3, #20]
 8008e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	bf14      	ite	ne
 8008e0c:	2301      	movne	r3, #1
 8008e0e:	2300      	moveq	r3, #0
 8008e10:	b2db      	uxtb	r3, r3
 8008e12:	e003      	b.n	8008e1c <HAL_DMA_IRQHandler+0x30c>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d00d      	beq.n	8008e3c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e24:	f003 031f 	and.w	r3, r3, #31
 8008e28:	2201      	movs	r2, #1
 8008e2a:	409a      	lsls	r2, r3
 8008e2c:	6a3b      	ldr	r3, [r7, #32]
 8008e2e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e34:	f043 0202 	orr.w	r2, r3, #2
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e40:	f003 031f 	and.w	r3, r3, #31
 8008e44:	2204      	movs	r2, #4
 8008e46:	409a      	lsls	r2, r3
 8008e48:	69bb      	ldr	r3, [r7, #24]
 8008e4a:	4013      	ands	r3, r2
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	f000 808f 	beq.w	8008f70 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	4a2c      	ldr	r2, [pc, #176]	; (8008f08 <HAL_DMA_IRQHandler+0x3f8>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d04a      	beq.n	8008ef2 <HAL_DMA_IRQHandler+0x3e2>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4a2a      	ldr	r2, [pc, #168]	; (8008f0c <HAL_DMA_IRQHandler+0x3fc>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d045      	beq.n	8008ef2 <HAL_DMA_IRQHandler+0x3e2>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4a29      	ldr	r2, [pc, #164]	; (8008f10 <HAL_DMA_IRQHandler+0x400>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d040      	beq.n	8008ef2 <HAL_DMA_IRQHandler+0x3e2>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4a27      	ldr	r2, [pc, #156]	; (8008f14 <HAL_DMA_IRQHandler+0x404>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d03b      	beq.n	8008ef2 <HAL_DMA_IRQHandler+0x3e2>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4a26      	ldr	r2, [pc, #152]	; (8008f18 <HAL_DMA_IRQHandler+0x408>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d036      	beq.n	8008ef2 <HAL_DMA_IRQHandler+0x3e2>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a24      	ldr	r2, [pc, #144]	; (8008f1c <HAL_DMA_IRQHandler+0x40c>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d031      	beq.n	8008ef2 <HAL_DMA_IRQHandler+0x3e2>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4a23      	ldr	r2, [pc, #140]	; (8008f20 <HAL_DMA_IRQHandler+0x410>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d02c      	beq.n	8008ef2 <HAL_DMA_IRQHandler+0x3e2>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4a21      	ldr	r2, [pc, #132]	; (8008f24 <HAL_DMA_IRQHandler+0x414>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d027      	beq.n	8008ef2 <HAL_DMA_IRQHandler+0x3e2>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4a20      	ldr	r2, [pc, #128]	; (8008f28 <HAL_DMA_IRQHandler+0x418>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d022      	beq.n	8008ef2 <HAL_DMA_IRQHandler+0x3e2>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a1e      	ldr	r2, [pc, #120]	; (8008f2c <HAL_DMA_IRQHandler+0x41c>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d01d      	beq.n	8008ef2 <HAL_DMA_IRQHandler+0x3e2>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4a1d      	ldr	r2, [pc, #116]	; (8008f30 <HAL_DMA_IRQHandler+0x420>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d018      	beq.n	8008ef2 <HAL_DMA_IRQHandler+0x3e2>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4a1b      	ldr	r2, [pc, #108]	; (8008f34 <HAL_DMA_IRQHandler+0x424>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d013      	beq.n	8008ef2 <HAL_DMA_IRQHandler+0x3e2>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4a1a      	ldr	r2, [pc, #104]	; (8008f38 <HAL_DMA_IRQHandler+0x428>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d00e      	beq.n	8008ef2 <HAL_DMA_IRQHandler+0x3e2>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4a18      	ldr	r2, [pc, #96]	; (8008f3c <HAL_DMA_IRQHandler+0x42c>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d009      	beq.n	8008ef2 <HAL_DMA_IRQHandler+0x3e2>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	4a17      	ldr	r2, [pc, #92]	; (8008f40 <HAL_DMA_IRQHandler+0x430>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d004      	beq.n	8008ef2 <HAL_DMA_IRQHandler+0x3e2>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	4a15      	ldr	r2, [pc, #84]	; (8008f44 <HAL_DMA_IRQHandler+0x434>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d12a      	bne.n	8008f48 <HAL_DMA_IRQHandler+0x438>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f003 0302 	and.w	r3, r3, #2
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	bf14      	ite	ne
 8008f00:	2301      	movne	r3, #1
 8008f02:	2300      	moveq	r3, #0
 8008f04:	b2db      	uxtb	r3, r3
 8008f06:	e023      	b.n	8008f50 <HAL_DMA_IRQHandler+0x440>
 8008f08:	40020010 	.word	0x40020010
 8008f0c:	40020028 	.word	0x40020028
 8008f10:	40020040 	.word	0x40020040
 8008f14:	40020058 	.word	0x40020058
 8008f18:	40020070 	.word	0x40020070
 8008f1c:	40020088 	.word	0x40020088
 8008f20:	400200a0 	.word	0x400200a0
 8008f24:	400200b8 	.word	0x400200b8
 8008f28:	40020410 	.word	0x40020410
 8008f2c:	40020428 	.word	0x40020428
 8008f30:	40020440 	.word	0x40020440
 8008f34:	40020458 	.word	0x40020458
 8008f38:	40020470 	.word	0x40020470
 8008f3c:	40020488 	.word	0x40020488
 8008f40:	400204a0 	.word	0x400204a0
 8008f44:	400204b8 	.word	0x400204b8
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	2300      	movs	r3, #0
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d00d      	beq.n	8008f70 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f58:	f003 031f 	and.w	r3, r3, #31
 8008f5c:	2204      	movs	r2, #4
 8008f5e:	409a      	lsls	r2, r3
 8008f60:	6a3b      	ldr	r3, [r7, #32]
 8008f62:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f68:	f043 0204 	orr.w	r2, r3, #4
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f74:	f003 031f 	and.w	r3, r3, #31
 8008f78:	2210      	movs	r2, #16
 8008f7a:	409a      	lsls	r2, r3
 8008f7c:	69bb      	ldr	r3, [r7, #24]
 8008f7e:	4013      	ands	r3, r2
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	f000 80a6 	beq.w	80090d2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4a85      	ldr	r2, [pc, #532]	; (80091a0 <HAL_DMA_IRQHandler+0x690>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d04a      	beq.n	8009026 <HAL_DMA_IRQHandler+0x516>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4a83      	ldr	r2, [pc, #524]	; (80091a4 <HAL_DMA_IRQHandler+0x694>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d045      	beq.n	8009026 <HAL_DMA_IRQHandler+0x516>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4a82      	ldr	r2, [pc, #520]	; (80091a8 <HAL_DMA_IRQHandler+0x698>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d040      	beq.n	8009026 <HAL_DMA_IRQHandler+0x516>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a80      	ldr	r2, [pc, #512]	; (80091ac <HAL_DMA_IRQHandler+0x69c>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d03b      	beq.n	8009026 <HAL_DMA_IRQHandler+0x516>
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	4a7f      	ldr	r2, [pc, #508]	; (80091b0 <HAL_DMA_IRQHandler+0x6a0>)
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d036      	beq.n	8009026 <HAL_DMA_IRQHandler+0x516>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4a7d      	ldr	r2, [pc, #500]	; (80091b4 <HAL_DMA_IRQHandler+0x6a4>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d031      	beq.n	8009026 <HAL_DMA_IRQHandler+0x516>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	4a7c      	ldr	r2, [pc, #496]	; (80091b8 <HAL_DMA_IRQHandler+0x6a8>)
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d02c      	beq.n	8009026 <HAL_DMA_IRQHandler+0x516>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	4a7a      	ldr	r2, [pc, #488]	; (80091bc <HAL_DMA_IRQHandler+0x6ac>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d027      	beq.n	8009026 <HAL_DMA_IRQHandler+0x516>
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	4a79      	ldr	r2, [pc, #484]	; (80091c0 <HAL_DMA_IRQHandler+0x6b0>)
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d022      	beq.n	8009026 <HAL_DMA_IRQHandler+0x516>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	4a77      	ldr	r2, [pc, #476]	; (80091c4 <HAL_DMA_IRQHandler+0x6b4>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d01d      	beq.n	8009026 <HAL_DMA_IRQHandler+0x516>
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	4a76      	ldr	r2, [pc, #472]	; (80091c8 <HAL_DMA_IRQHandler+0x6b8>)
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d018      	beq.n	8009026 <HAL_DMA_IRQHandler+0x516>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	4a74      	ldr	r2, [pc, #464]	; (80091cc <HAL_DMA_IRQHandler+0x6bc>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d013      	beq.n	8009026 <HAL_DMA_IRQHandler+0x516>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	4a73      	ldr	r2, [pc, #460]	; (80091d0 <HAL_DMA_IRQHandler+0x6c0>)
 8009004:	4293      	cmp	r3, r2
 8009006:	d00e      	beq.n	8009026 <HAL_DMA_IRQHandler+0x516>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	4a71      	ldr	r2, [pc, #452]	; (80091d4 <HAL_DMA_IRQHandler+0x6c4>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d009      	beq.n	8009026 <HAL_DMA_IRQHandler+0x516>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	4a70      	ldr	r2, [pc, #448]	; (80091d8 <HAL_DMA_IRQHandler+0x6c8>)
 8009018:	4293      	cmp	r3, r2
 800901a:	d004      	beq.n	8009026 <HAL_DMA_IRQHandler+0x516>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	4a6e      	ldr	r2, [pc, #440]	; (80091dc <HAL_DMA_IRQHandler+0x6cc>)
 8009022:	4293      	cmp	r3, r2
 8009024:	d10a      	bne.n	800903c <HAL_DMA_IRQHandler+0x52c>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f003 0308 	and.w	r3, r3, #8
 8009030:	2b00      	cmp	r3, #0
 8009032:	bf14      	ite	ne
 8009034:	2301      	movne	r3, #1
 8009036:	2300      	moveq	r3, #0
 8009038:	b2db      	uxtb	r3, r3
 800903a:	e009      	b.n	8009050 <HAL_DMA_IRQHandler+0x540>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f003 0304 	and.w	r3, r3, #4
 8009046:	2b00      	cmp	r3, #0
 8009048:	bf14      	ite	ne
 800904a:	2301      	movne	r3, #1
 800904c:	2300      	moveq	r3, #0
 800904e:	b2db      	uxtb	r3, r3
 8009050:	2b00      	cmp	r3, #0
 8009052:	d03e      	beq.n	80090d2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009058:	f003 031f 	and.w	r3, r3, #31
 800905c:	2210      	movs	r2, #16
 800905e:	409a      	lsls	r2, r3
 8009060:	6a3b      	ldr	r3, [r7, #32]
 8009062:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800906e:	2b00      	cmp	r3, #0
 8009070:	d018      	beq.n	80090a4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800907c:	2b00      	cmp	r3, #0
 800907e:	d108      	bne.n	8009092 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009084:	2b00      	cmp	r3, #0
 8009086:	d024      	beq.n	80090d2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	4798      	blx	r3
 8009090:	e01f      	b.n	80090d2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009096:	2b00      	cmp	r3, #0
 8009098:	d01b      	beq.n	80090d2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	4798      	blx	r3
 80090a2:	e016      	b.n	80090d2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d107      	bne.n	80090c2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	681a      	ldr	r2, [r3, #0]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f022 0208 	bic.w	r2, r2, #8
 80090c0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d003      	beq.n	80090d2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090d6:	f003 031f 	and.w	r3, r3, #31
 80090da:	2220      	movs	r2, #32
 80090dc:	409a      	lsls	r2, r3
 80090de:	69bb      	ldr	r3, [r7, #24]
 80090e0:	4013      	ands	r3, r2
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	f000 8110 	beq.w	8009308 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	4a2c      	ldr	r2, [pc, #176]	; (80091a0 <HAL_DMA_IRQHandler+0x690>)
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d04a      	beq.n	8009188 <HAL_DMA_IRQHandler+0x678>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	4a2b      	ldr	r2, [pc, #172]	; (80091a4 <HAL_DMA_IRQHandler+0x694>)
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d045      	beq.n	8009188 <HAL_DMA_IRQHandler+0x678>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	4a29      	ldr	r2, [pc, #164]	; (80091a8 <HAL_DMA_IRQHandler+0x698>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d040      	beq.n	8009188 <HAL_DMA_IRQHandler+0x678>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	4a28      	ldr	r2, [pc, #160]	; (80091ac <HAL_DMA_IRQHandler+0x69c>)
 800910c:	4293      	cmp	r3, r2
 800910e:	d03b      	beq.n	8009188 <HAL_DMA_IRQHandler+0x678>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	4a26      	ldr	r2, [pc, #152]	; (80091b0 <HAL_DMA_IRQHandler+0x6a0>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d036      	beq.n	8009188 <HAL_DMA_IRQHandler+0x678>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	4a25      	ldr	r2, [pc, #148]	; (80091b4 <HAL_DMA_IRQHandler+0x6a4>)
 8009120:	4293      	cmp	r3, r2
 8009122:	d031      	beq.n	8009188 <HAL_DMA_IRQHandler+0x678>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4a23      	ldr	r2, [pc, #140]	; (80091b8 <HAL_DMA_IRQHandler+0x6a8>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d02c      	beq.n	8009188 <HAL_DMA_IRQHandler+0x678>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	4a22      	ldr	r2, [pc, #136]	; (80091bc <HAL_DMA_IRQHandler+0x6ac>)
 8009134:	4293      	cmp	r3, r2
 8009136:	d027      	beq.n	8009188 <HAL_DMA_IRQHandler+0x678>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	4a20      	ldr	r2, [pc, #128]	; (80091c0 <HAL_DMA_IRQHandler+0x6b0>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d022      	beq.n	8009188 <HAL_DMA_IRQHandler+0x678>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	4a1f      	ldr	r2, [pc, #124]	; (80091c4 <HAL_DMA_IRQHandler+0x6b4>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d01d      	beq.n	8009188 <HAL_DMA_IRQHandler+0x678>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4a1d      	ldr	r2, [pc, #116]	; (80091c8 <HAL_DMA_IRQHandler+0x6b8>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d018      	beq.n	8009188 <HAL_DMA_IRQHandler+0x678>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	4a1c      	ldr	r2, [pc, #112]	; (80091cc <HAL_DMA_IRQHandler+0x6bc>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d013      	beq.n	8009188 <HAL_DMA_IRQHandler+0x678>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	4a1a      	ldr	r2, [pc, #104]	; (80091d0 <HAL_DMA_IRQHandler+0x6c0>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d00e      	beq.n	8009188 <HAL_DMA_IRQHandler+0x678>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	4a19      	ldr	r2, [pc, #100]	; (80091d4 <HAL_DMA_IRQHandler+0x6c4>)
 8009170:	4293      	cmp	r3, r2
 8009172:	d009      	beq.n	8009188 <HAL_DMA_IRQHandler+0x678>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4a17      	ldr	r2, [pc, #92]	; (80091d8 <HAL_DMA_IRQHandler+0x6c8>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d004      	beq.n	8009188 <HAL_DMA_IRQHandler+0x678>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	4a16      	ldr	r2, [pc, #88]	; (80091dc <HAL_DMA_IRQHandler+0x6cc>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d12b      	bne.n	80091e0 <HAL_DMA_IRQHandler+0x6d0>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f003 0310 	and.w	r3, r3, #16
 8009192:	2b00      	cmp	r3, #0
 8009194:	bf14      	ite	ne
 8009196:	2301      	movne	r3, #1
 8009198:	2300      	moveq	r3, #0
 800919a:	b2db      	uxtb	r3, r3
 800919c:	e02a      	b.n	80091f4 <HAL_DMA_IRQHandler+0x6e4>
 800919e:	bf00      	nop
 80091a0:	40020010 	.word	0x40020010
 80091a4:	40020028 	.word	0x40020028
 80091a8:	40020040 	.word	0x40020040
 80091ac:	40020058 	.word	0x40020058
 80091b0:	40020070 	.word	0x40020070
 80091b4:	40020088 	.word	0x40020088
 80091b8:	400200a0 	.word	0x400200a0
 80091bc:	400200b8 	.word	0x400200b8
 80091c0:	40020410 	.word	0x40020410
 80091c4:	40020428 	.word	0x40020428
 80091c8:	40020440 	.word	0x40020440
 80091cc:	40020458 	.word	0x40020458
 80091d0:	40020470 	.word	0x40020470
 80091d4:	40020488 	.word	0x40020488
 80091d8:	400204a0 	.word	0x400204a0
 80091dc:	400204b8 	.word	0x400204b8
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f003 0302 	and.w	r3, r3, #2
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	bf14      	ite	ne
 80091ee:	2301      	movne	r3, #1
 80091f0:	2300      	moveq	r3, #0
 80091f2:	b2db      	uxtb	r3, r3
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	f000 8087 	beq.w	8009308 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091fe:	f003 031f 	and.w	r3, r3, #31
 8009202:	2220      	movs	r2, #32
 8009204:	409a      	lsls	r2, r3
 8009206:	6a3b      	ldr	r3, [r7, #32]
 8009208:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009210:	b2db      	uxtb	r3, r3
 8009212:	2b04      	cmp	r3, #4
 8009214:	d139      	bne.n	800928a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	681a      	ldr	r2, [r3, #0]
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f022 0216 	bic.w	r2, r2, #22
 8009224:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	695a      	ldr	r2, [r3, #20]
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009234:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800923a:	2b00      	cmp	r3, #0
 800923c:	d103      	bne.n	8009246 <HAL_DMA_IRQHandler+0x736>
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009242:	2b00      	cmp	r3, #0
 8009244:	d007      	beq.n	8009256 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	681a      	ldr	r2, [r3, #0]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f022 0208 	bic.w	r2, r2, #8
 8009254:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800925a:	f003 031f 	and.w	r3, r3, #31
 800925e:	223f      	movs	r2, #63	; 0x3f
 8009260:	409a      	lsls	r2, r3
 8009262:	6a3b      	ldr	r3, [r7, #32]
 8009264:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2201      	movs	r2, #1
 800926a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2200      	movs	r2, #0
 8009272:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800927a:	2b00      	cmp	r3, #0
 800927c:	f000 834a 	beq.w	8009914 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	4798      	blx	r3
          }
          return;
 8009288:	e344      	b.n	8009914 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009294:	2b00      	cmp	r3, #0
 8009296:	d018      	beq.n	80092ca <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d108      	bne.n	80092b8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d02c      	beq.n	8009308 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	4798      	blx	r3
 80092b6:	e027      	b.n	8009308 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d023      	beq.n	8009308 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	4798      	blx	r3
 80092c8:	e01e      	b.n	8009308 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d10f      	bne.n	80092f8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	681a      	ldr	r2, [r3, #0]
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f022 0210 	bic.w	r2, r2, #16
 80092e6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2201      	movs	r2, #1
 80092ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2200      	movs	r2, #0
 80092f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d003      	beq.n	8009308 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800930c:	2b00      	cmp	r3, #0
 800930e:	f000 8306 	beq.w	800991e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009316:	f003 0301 	and.w	r3, r3, #1
 800931a:	2b00      	cmp	r3, #0
 800931c:	f000 8088 	beq.w	8009430 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2204      	movs	r2, #4
 8009324:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	4a7a      	ldr	r2, [pc, #488]	; (8009518 <HAL_DMA_IRQHandler+0xa08>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d04a      	beq.n	80093c8 <HAL_DMA_IRQHandler+0x8b8>
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	4a79      	ldr	r2, [pc, #484]	; (800951c <HAL_DMA_IRQHandler+0xa0c>)
 8009338:	4293      	cmp	r3, r2
 800933a:	d045      	beq.n	80093c8 <HAL_DMA_IRQHandler+0x8b8>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	4a77      	ldr	r2, [pc, #476]	; (8009520 <HAL_DMA_IRQHandler+0xa10>)
 8009342:	4293      	cmp	r3, r2
 8009344:	d040      	beq.n	80093c8 <HAL_DMA_IRQHandler+0x8b8>
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	4a76      	ldr	r2, [pc, #472]	; (8009524 <HAL_DMA_IRQHandler+0xa14>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d03b      	beq.n	80093c8 <HAL_DMA_IRQHandler+0x8b8>
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4a74      	ldr	r2, [pc, #464]	; (8009528 <HAL_DMA_IRQHandler+0xa18>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d036      	beq.n	80093c8 <HAL_DMA_IRQHandler+0x8b8>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	4a73      	ldr	r2, [pc, #460]	; (800952c <HAL_DMA_IRQHandler+0xa1c>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d031      	beq.n	80093c8 <HAL_DMA_IRQHandler+0x8b8>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4a71      	ldr	r2, [pc, #452]	; (8009530 <HAL_DMA_IRQHandler+0xa20>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d02c      	beq.n	80093c8 <HAL_DMA_IRQHandler+0x8b8>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	4a70      	ldr	r2, [pc, #448]	; (8009534 <HAL_DMA_IRQHandler+0xa24>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d027      	beq.n	80093c8 <HAL_DMA_IRQHandler+0x8b8>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	4a6e      	ldr	r2, [pc, #440]	; (8009538 <HAL_DMA_IRQHandler+0xa28>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d022      	beq.n	80093c8 <HAL_DMA_IRQHandler+0x8b8>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4a6d      	ldr	r2, [pc, #436]	; (800953c <HAL_DMA_IRQHandler+0xa2c>)
 8009388:	4293      	cmp	r3, r2
 800938a:	d01d      	beq.n	80093c8 <HAL_DMA_IRQHandler+0x8b8>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4a6b      	ldr	r2, [pc, #428]	; (8009540 <HAL_DMA_IRQHandler+0xa30>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d018      	beq.n	80093c8 <HAL_DMA_IRQHandler+0x8b8>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	4a6a      	ldr	r2, [pc, #424]	; (8009544 <HAL_DMA_IRQHandler+0xa34>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d013      	beq.n	80093c8 <HAL_DMA_IRQHandler+0x8b8>
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4a68      	ldr	r2, [pc, #416]	; (8009548 <HAL_DMA_IRQHandler+0xa38>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d00e      	beq.n	80093c8 <HAL_DMA_IRQHandler+0x8b8>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	4a67      	ldr	r2, [pc, #412]	; (800954c <HAL_DMA_IRQHandler+0xa3c>)
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d009      	beq.n	80093c8 <HAL_DMA_IRQHandler+0x8b8>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	4a65      	ldr	r2, [pc, #404]	; (8009550 <HAL_DMA_IRQHandler+0xa40>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d004      	beq.n	80093c8 <HAL_DMA_IRQHandler+0x8b8>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	4a64      	ldr	r2, [pc, #400]	; (8009554 <HAL_DMA_IRQHandler+0xa44>)
 80093c4:	4293      	cmp	r3, r2
 80093c6:	d108      	bne.n	80093da <HAL_DMA_IRQHandler+0x8ca>
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	681a      	ldr	r2, [r3, #0]
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f022 0201 	bic.w	r2, r2, #1
 80093d6:	601a      	str	r2, [r3, #0]
 80093d8:	e007      	b.n	80093ea <HAL_DMA_IRQHandler+0x8da>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	681a      	ldr	r2, [r3, #0]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f022 0201 	bic.w	r2, r2, #1
 80093e8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	3301      	adds	r3, #1
 80093ee:	60fb      	str	r3, [r7, #12]
 80093f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093f2:	429a      	cmp	r2, r3
 80093f4:	d307      	bcc.n	8009406 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f003 0301 	and.w	r3, r3, #1
 8009400:	2b00      	cmp	r3, #0
 8009402:	d1f2      	bne.n	80093ea <HAL_DMA_IRQHandler+0x8da>
 8009404:	e000      	b.n	8009408 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8009406:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f003 0301 	and.w	r3, r3, #1
 8009412:	2b00      	cmp	r3, #0
 8009414:	d004      	beq.n	8009420 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2203      	movs	r2, #3
 800941a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800941e:	e003      	b.n	8009428 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2201      	movs	r2, #1
 8009424:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2200      	movs	r2, #0
 800942c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009434:	2b00      	cmp	r3, #0
 8009436:	f000 8272 	beq.w	800991e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	4798      	blx	r3
 8009442:	e26c      	b.n	800991e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	4a43      	ldr	r2, [pc, #268]	; (8009558 <HAL_DMA_IRQHandler+0xa48>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d022      	beq.n	8009494 <HAL_DMA_IRQHandler+0x984>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	4a42      	ldr	r2, [pc, #264]	; (800955c <HAL_DMA_IRQHandler+0xa4c>)
 8009454:	4293      	cmp	r3, r2
 8009456:	d01d      	beq.n	8009494 <HAL_DMA_IRQHandler+0x984>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	4a40      	ldr	r2, [pc, #256]	; (8009560 <HAL_DMA_IRQHandler+0xa50>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d018      	beq.n	8009494 <HAL_DMA_IRQHandler+0x984>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	4a3f      	ldr	r2, [pc, #252]	; (8009564 <HAL_DMA_IRQHandler+0xa54>)
 8009468:	4293      	cmp	r3, r2
 800946a:	d013      	beq.n	8009494 <HAL_DMA_IRQHandler+0x984>
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4a3d      	ldr	r2, [pc, #244]	; (8009568 <HAL_DMA_IRQHandler+0xa58>)
 8009472:	4293      	cmp	r3, r2
 8009474:	d00e      	beq.n	8009494 <HAL_DMA_IRQHandler+0x984>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	4a3c      	ldr	r2, [pc, #240]	; (800956c <HAL_DMA_IRQHandler+0xa5c>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d009      	beq.n	8009494 <HAL_DMA_IRQHandler+0x984>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	4a3a      	ldr	r2, [pc, #232]	; (8009570 <HAL_DMA_IRQHandler+0xa60>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d004      	beq.n	8009494 <HAL_DMA_IRQHandler+0x984>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	4a39      	ldr	r2, [pc, #228]	; (8009574 <HAL_DMA_IRQHandler+0xa64>)
 8009490:	4293      	cmp	r3, r2
 8009492:	d101      	bne.n	8009498 <HAL_DMA_IRQHandler+0x988>
 8009494:	2301      	movs	r3, #1
 8009496:	e000      	b.n	800949a <HAL_DMA_IRQHandler+0x98a>
 8009498:	2300      	movs	r3, #0
 800949a:	2b00      	cmp	r3, #0
 800949c:	f000 823f 	beq.w	800991e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094ac:	f003 031f 	and.w	r3, r3, #31
 80094b0:	2204      	movs	r2, #4
 80094b2:	409a      	lsls	r2, r3
 80094b4:	697b      	ldr	r3, [r7, #20]
 80094b6:	4013      	ands	r3, r2
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	f000 80cd 	beq.w	8009658 <HAL_DMA_IRQHandler+0xb48>
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	f003 0304 	and.w	r3, r3, #4
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	f000 80c7 	beq.w	8009658 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094ce:	f003 031f 	and.w	r3, r3, #31
 80094d2:	2204      	movs	r2, #4
 80094d4:	409a      	lsls	r2, r3
 80094d6:	69fb      	ldr	r3, [r7, #28]
 80094d8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80094da:	693b      	ldr	r3, [r7, #16]
 80094dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d049      	beq.n	8009578 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d109      	bne.n	8009502 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	f000 8210 	beq.w	8009918 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009500:	e20a      	b.n	8009918 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009506:	2b00      	cmp	r3, #0
 8009508:	f000 8206 	beq.w	8009918 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009514:	e200      	b.n	8009918 <HAL_DMA_IRQHandler+0xe08>
 8009516:	bf00      	nop
 8009518:	40020010 	.word	0x40020010
 800951c:	40020028 	.word	0x40020028
 8009520:	40020040 	.word	0x40020040
 8009524:	40020058 	.word	0x40020058
 8009528:	40020070 	.word	0x40020070
 800952c:	40020088 	.word	0x40020088
 8009530:	400200a0 	.word	0x400200a0
 8009534:	400200b8 	.word	0x400200b8
 8009538:	40020410 	.word	0x40020410
 800953c:	40020428 	.word	0x40020428
 8009540:	40020440 	.word	0x40020440
 8009544:	40020458 	.word	0x40020458
 8009548:	40020470 	.word	0x40020470
 800954c:	40020488 	.word	0x40020488
 8009550:	400204a0 	.word	0x400204a0
 8009554:	400204b8 	.word	0x400204b8
 8009558:	58025408 	.word	0x58025408
 800955c:	5802541c 	.word	0x5802541c
 8009560:	58025430 	.word	0x58025430
 8009564:	58025444 	.word	0x58025444
 8009568:	58025458 	.word	0x58025458
 800956c:	5802546c 	.word	0x5802546c
 8009570:	58025480 	.word	0x58025480
 8009574:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	f003 0320 	and.w	r3, r3, #32
 800957e:	2b00      	cmp	r3, #0
 8009580:	d160      	bne.n	8009644 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	4a7f      	ldr	r2, [pc, #508]	; (8009784 <HAL_DMA_IRQHandler+0xc74>)
 8009588:	4293      	cmp	r3, r2
 800958a:	d04a      	beq.n	8009622 <HAL_DMA_IRQHandler+0xb12>
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	4a7d      	ldr	r2, [pc, #500]	; (8009788 <HAL_DMA_IRQHandler+0xc78>)
 8009592:	4293      	cmp	r3, r2
 8009594:	d045      	beq.n	8009622 <HAL_DMA_IRQHandler+0xb12>
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	4a7c      	ldr	r2, [pc, #496]	; (800978c <HAL_DMA_IRQHandler+0xc7c>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d040      	beq.n	8009622 <HAL_DMA_IRQHandler+0xb12>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	4a7a      	ldr	r2, [pc, #488]	; (8009790 <HAL_DMA_IRQHandler+0xc80>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d03b      	beq.n	8009622 <HAL_DMA_IRQHandler+0xb12>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	4a79      	ldr	r2, [pc, #484]	; (8009794 <HAL_DMA_IRQHandler+0xc84>)
 80095b0:	4293      	cmp	r3, r2
 80095b2:	d036      	beq.n	8009622 <HAL_DMA_IRQHandler+0xb12>
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	4a77      	ldr	r2, [pc, #476]	; (8009798 <HAL_DMA_IRQHandler+0xc88>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d031      	beq.n	8009622 <HAL_DMA_IRQHandler+0xb12>
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	4a76      	ldr	r2, [pc, #472]	; (800979c <HAL_DMA_IRQHandler+0xc8c>)
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d02c      	beq.n	8009622 <HAL_DMA_IRQHandler+0xb12>
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	4a74      	ldr	r2, [pc, #464]	; (80097a0 <HAL_DMA_IRQHandler+0xc90>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d027      	beq.n	8009622 <HAL_DMA_IRQHandler+0xb12>
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	4a73      	ldr	r2, [pc, #460]	; (80097a4 <HAL_DMA_IRQHandler+0xc94>)
 80095d8:	4293      	cmp	r3, r2
 80095da:	d022      	beq.n	8009622 <HAL_DMA_IRQHandler+0xb12>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	4a71      	ldr	r2, [pc, #452]	; (80097a8 <HAL_DMA_IRQHandler+0xc98>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d01d      	beq.n	8009622 <HAL_DMA_IRQHandler+0xb12>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	4a70      	ldr	r2, [pc, #448]	; (80097ac <HAL_DMA_IRQHandler+0xc9c>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d018      	beq.n	8009622 <HAL_DMA_IRQHandler+0xb12>
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	4a6e      	ldr	r2, [pc, #440]	; (80097b0 <HAL_DMA_IRQHandler+0xca0>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d013      	beq.n	8009622 <HAL_DMA_IRQHandler+0xb12>
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	4a6d      	ldr	r2, [pc, #436]	; (80097b4 <HAL_DMA_IRQHandler+0xca4>)
 8009600:	4293      	cmp	r3, r2
 8009602:	d00e      	beq.n	8009622 <HAL_DMA_IRQHandler+0xb12>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	4a6b      	ldr	r2, [pc, #428]	; (80097b8 <HAL_DMA_IRQHandler+0xca8>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d009      	beq.n	8009622 <HAL_DMA_IRQHandler+0xb12>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	4a6a      	ldr	r2, [pc, #424]	; (80097bc <HAL_DMA_IRQHandler+0xcac>)
 8009614:	4293      	cmp	r3, r2
 8009616:	d004      	beq.n	8009622 <HAL_DMA_IRQHandler+0xb12>
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	4a68      	ldr	r2, [pc, #416]	; (80097c0 <HAL_DMA_IRQHandler+0xcb0>)
 800961e:	4293      	cmp	r3, r2
 8009620:	d108      	bne.n	8009634 <HAL_DMA_IRQHandler+0xb24>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	681a      	ldr	r2, [r3, #0]
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f022 0208 	bic.w	r2, r2, #8
 8009630:	601a      	str	r2, [r3, #0]
 8009632:	e007      	b.n	8009644 <HAL_DMA_IRQHandler+0xb34>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	681a      	ldr	r2, [r3, #0]
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f022 0204 	bic.w	r2, r2, #4
 8009642:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009648:	2b00      	cmp	r3, #0
 800964a:	f000 8165 	beq.w	8009918 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009656:	e15f      	b.n	8009918 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800965c:	f003 031f 	and.w	r3, r3, #31
 8009660:	2202      	movs	r2, #2
 8009662:	409a      	lsls	r2, r3
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	4013      	ands	r3, r2
 8009668:	2b00      	cmp	r3, #0
 800966a:	f000 80c5 	beq.w	80097f8 <HAL_DMA_IRQHandler+0xce8>
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	f003 0302 	and.w	r3, r3, #2
 8009674:	2b00      	cmp	r3, #0
 8009676:	f000 80bf 	beq.w	80097f8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800967e:	f003 031f 	and.w	r3, r3, #31
 8009682:	2202      	movs	r2, #2
 8009684:	409a      	lsls	r2, r3
 8009686:	69fb      	ldr	r3, [r7, #28]
 8009688:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009690:	2b00      	cmp	r3, #0
 8009692:	d018      	beq.n	80096c6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009694:	693b      	ldr	r3, [r7, #16]
 8009696:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800969a:	2b00      	cmp	r3, #0
 800969c:	d109      	bne.n	80096b2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	f000 813a 	beq.w	800991c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80096b0:	e134      	b.n	800991c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	f000 8130 	beq.w	800991c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80096c4:	e12a      	b.n	800991c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80096c6:	693b      	ldr	r3, [r7, #16]
 80096c8:	f003 0320 	and.w	r3, r3, #32
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	f040 8089 	bne.w	80097e4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	4a2b      	ldr	r2, [pc, #172]	; (8009784 <HAL_DMA_IRQHandler+0xc74>)
 80096d8:	4293      	cmp	r3, r2
 80096da:	d04a      	beq.n	8009772 <HAL_DMA_IRQHandler+0xc62>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	4a29      	ldr	r2, [pc, #164]	; (8009788 <HAL_DMA_IRQHandler+0xc78>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d045      	beq.n	8009772 <HAL_DMA_IRQHandler+0xc62>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	4a28      	ldr	r2, [pc, #160]	; (800978c <HAL_DMA_IRQHandler+0xc7c>)
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d040      	beq.n	8009772 <HAL_DMA_IRQHandler+0xc62>
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	4a26      	ldr	r2, [pc, #152]	; (8009790 <HAL_DMA_IRQHandler+0xc80>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d03b      	beq.n	8009772 <HAL_DMA_IRQHandler+0xc62>
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	4a25      	ldr	r2, [pc, #148]	; (8009794 <HAL_DMA_IRQHandler+0xc84>)
 8009700:	4293      	cmp	r3, r2
 8009702:	d036      	beq.n	8009772 <HAL_DMA_IRQHandler+0xc62>
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	4a23      	ldr	r2, [pc, #140]	; (8009798 <HAL_DMA_IRQHandler+0xc88>)
 800970a:	4293      	cmp	r3, r2
 800970c:	d031      	beq.n	8009772 <HAL_DMA_IRQHandler+0xc62>
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	4a22      	ldr	r2, [pc, #136]	; (800979c <HAL_DMA_IRQHandler+0xc8c>)
 8009714:	4293      	cmp	r3, r2
 8009716:	d02c      	beq.n	8009772 <HAL_DMA_IRQHandler+0xc62>
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	4a20      	ldr	r2, [pc, #128]	; (80097a0 <HAL_DMA_IRQHandler+0xc90>)
 800971e:	4293      	cmp	r3, r2
 8009720:	d027      	beq.n	8009772 <HAL_DMA_IRQHandler+0xc62>
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	4a1f      	ldr	r2, [pc, #124]	; (80097a4 <HAL_DMA_IRQHandler+0xc94>)
 8009728:	4293      	cmp	r3, r2
 800972a:	d022      	beq.n	8009772 <HAL_DMA_IRQHandler+0xc62>
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	4a1d      	ldr	r2, [pc, #116]	; (80097a8 <HAL_DMA_IRQHandler+0xc98>)
 8009732:	4293      	cmp	r3, r2
 8009734:	d01d      	beq.n	8009772 <HAL_DMA_IRQHandler+0xc62>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	4a1c      	ldr	r2, [pc, #112]	; (80097ac <HAL_DMA_IRQHandler+0xc9c>)
 800973c:	4293      	cmp	r3, r2
 800973e:	d018      	beq.n	8009772 <HAL_DMA_IRQHandler+0xc62>
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	4a1a      	ldr	r2, [pc, #104]	; (80097b0 <HAL_DMA_IRQHandler+0xca0>)
 8009746:	4293      	cmp	r3, r2
 8009748:	d013      	beq.n	8009772 <HAL_DMA_IRQHandler+0xc62>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	4a19      	ldr	r2, [pc, #100]	; (80097b4 <HAL_DMA_IRQHandler+0xca4>)
 8009750:	4293      	cmp	r3, r2
 8009752:	d00e      	beq.n	8009772 <HAL_DMA_IRQHandler+0xc62>
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	4a17      	ldr	r2, [pc, #92]	; (80097b8 <HAL_DMA_IRQHandler+0xca8>)
 800975a:	4293      	cmp	r3, r2
 800975c:	d009      	beq.n	8009772 <HAL_DMA_IRQHandler+0xc62>
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	4a16      	ldr	r2, [pc, #88]	; (80097bc <HAL_DMA_IRQHandler+0xcac>)
 8009764:	4293      	cmp	r3, r2
 8009766:	d004      	beq.n	8009772 <HAL_DMA_IRQHandler+0xc62>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4a14      	ldr	r2, [pc, #80]	; (80097c0 <HAL_DMA_IRQHandler+0xcb0>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d128      	bne.n	80097c4 <HAL_DMA_IRQHandler+0xcb4>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	681a      	ldr	r2, [r3, #0]
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f022 0214 	bic.w	r2, r2, #20
 8009780:	601a      	str	r2, [r3, #0]
 8009782:	e027      	b.n	80097d4 <HAL_DMA_IRQHandler+0xcc4>
 8009784:	40020010 	.word	0x40020010
 8009788:	40020028 	.word	0x40020028
 800978c:	40020040 	.word	0x40020040
 8009790:	40020058 	.word	0x40020058
 8009794:	40020070 	.word	0x40020070
 8009798:	40020088 	.word	0x40020088
 800979c:	400200a0 	.word	0x400200a0
 80097a0:	400200b8 	.word	0x400200b8
 80097a4:	40020410 	.word	0x40020410
 80097a8:	40020428 	.word	0x40020428
 80097ac:	40020440 	.word	0x40020440
 80097b0:	40020458 	.word	0x40020458
 80097b4:	40020470 	.word	0x40020470
 80097b8:	40020488 	.word	0x40020488
 80097bc:	400204a0 	.word	0x400204a0
 80097c0:	400204b8 	.word	0x400204b8
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	681a      	ldr	r2, [r3, #0]
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f022 020a 	bic.w	r2, r2, #10
 80097d2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2201      	movs	r2, #1
 80097d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2200      	movs	r2, #0
 80097e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	f000 8097 	beq.w	800991c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80097f6:	e091      	b.n	800991c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097fc:	f003 031f 	and.w	r3, r3, #31
 8009800:	2208      	movs	r2, #8
 8009802:	409a      	lsls	r2, r3
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	4013      	ands	r3, r2
 8009808:	2b00      	cmp	r3, #0
 800980a:	f000 8088 	beq.w	800991e <HAL_DMA_IRQHandler+0xe0e>
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	f003 0308 	and.w	r3, r3, #8
 8009814:	2b00      	cmp	r3, #0
 8009816:	f000 8082 	beq.w	800991e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	4a41      	ldr	r2, [pc, #260]	; (8009924 <HAL_DMA_IRQHandler+0xe14>)
 8009820:	4293      	cmp	r3, r2
 8009822:	d04a      	beq.n	80098ba <HAL_DMA_IRQHandler+0xdaa>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4a3f      	ldr	r2, [pc, #252]	; (8009928 <HAL_DMA_IRQHandler+0xe18>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d045      	beq.n	80098ba <HAL_DMA_IRQHandler+0xdaa>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	4a3e      	ldr	r2, [pc, #248]	; (800992c <HAL_DMA_IRQHandler+0xe1c>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d040      	beq.n	80098ba <HAL_DMA_IRQHandler+0xdaa>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	4a3c      	ldr	r2, [pc, #240]	; (8009930 <HAL_DMA_IRQHandler+0xe20>)
 800983e:	4293      	cmp	r3, r2
 8009840:	d03b      	beq.n	80098ba <HAL_DMA_IRQHandler+0xdaa>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	4a3b      	ldr	r2, [pc, #236]	; (8009934 <HAL_DMA_IRQHandler+0xe24>)
 8009848:	4293      	cmp	r3, r2
 800984a:	d036      	beq.n	80098ba <HAL_DMA_IRQHandler+0xdaa>
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	4a39      	ldr	r2, [pc, #228]	; (8009938 <HAL_DMA_IRQHandler+0xe28>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d031      	beq.n	80098ba <HAL_DMA_IRQHandler+0xdaa>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	4a38      	ldr	r2, [pc, #224]	; (800993c <HAL_DMA_IRQHandler+0xe2c>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d02c      	beq.n	80098ba <HAL_DMA_IRQHandler+0xdaa>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	4a36      	ldr	r2, [pc, #216]	; (8009940 <HAL_DMA_IRQHandler+0xe30>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d027      	beq.n	80098ba <HAL_DMA_IRQHandler+0xdaa>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	4a35      	ldr	r2, [pc, #212]	; (8009944 <HAL_DMA_IRQHandler+0xe34>)
 8009870:	4293      	cmp	r3, r2
 8009872:	d022      	beq.n	80098ba <HAL_DMA_IRQHandler+0xdaa>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	4a33      	ldr	r2, [pc, #204]	; (8009948 <HAL_DMA_IRQHandler+0xe38>)
 800987a:	4293      	cmp	r3, r2
 800987c:	d01d      	beq.n	80098ba <HAL_DMA_IRQHandler+0xdaa>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	4a32      	ldr	r2, [pc, #200]	; (800994c <HAL_DMA_IRQHandler+0xe3c>)
 8009884:	4293      	cmp	r3, r2
 8009886:	d018      	beq.n	80098ba <HAL_DMA_IRQHandler+0xdaa>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	4a30      	ldr	r2, [pc, #192]	; (8009950 <HAL_DMA_IRQHandler+0xe40>)
 800988e:	4293      	cmp	r3, r2
 8009890:	d013      	beq.n	80098ba <HAL_DMA_IRQHandler+0xdaa>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	4a2f      	ldr	r2, [pc, #188]	; (8009954 <HAL_DMA_IRQHandler+0xe44>)
 8009898:	4293      	cmp	r3, r2
 800989a:	d00e      	beq.n	80098ba <HAL_DMA_IRQHandler+0xdaa>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4a2d      	ldr	r2, [pc, #180]	; (8009958 <HAL_DMA_IRQHandler+0xe48>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d009      	beq.n	80098ba <HAL_DMA_IRQHandler+0xdaa>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	4a2c      	ldr	r2, [pc, #176]	; (800995c <HAL_DMA_IRQHandler+0xe4c>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d004      	beq.n	80098ba <HAL_DMA_IRQHandler+0xdaa>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	4a2a      	ldr	r2, [pc, #168]	; (8009960 <HAL_DMA_IRQHandler+0xe50>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d108      	bne.n	80098cc <HAL_DMA_IRQHandler+0xdbc>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	681a      	ldr	r2, [r3, #0]
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f022 021c 	bic.w	r2, r2, #28
 80098c8:	601a      	str	r2, [r3, #0]
 80098ca:	e007      	b.n	80098dc <HAL_DMA_IRQHandler+0xdcc>
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	681a      	ldr	r2, [r3, #0]
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f022 020e 	bic.w	r2, r2, #14
 80098da:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098e0:	f003 031f 	and.w	r3, r3, #31
 80098e4:	2201      	movs	r2, #1
 80098e6:	409a      	lsls	r2, r3
 80098e8:	69fb      	ldr	r3, [r7, #28]
 80098ea:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2201      	movs	r2, #1
 80098f0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2201      	movs	r2, #1
 80098f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2200      	movs	r2, #0
 80098fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009906:	2b00      	cmp	r3, #0
 8009908:	d009      	beq.n	800991e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	4798      	blx	r3
 8009912:	e004      	b.n	800991e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8009914:	bf00      	nop
 8009916:	e002      	b.n	800991e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009918:	bf00      	nop
 800991a:	e000      	b.n	800991e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800991c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800991e:	3728      	adds	r7, #40	; 0x28
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}
 8009924:	40020010 	.word	0x40020010
 8009928:	40020028 	.word	0x40020028
 800992c:	40020040 	.word	0x40020040
 8009930:	40020058 	.word	0x40020058
 8009934:	40020070 	.word	0x40020070
 8009938:	40020088 	.word	0x40020088
 800993c:	400200a0 	.word	0x400200a0
 8009940:	400200b8 	.word	0x400200b8
 8009944:	40020410 	.word	0x40020410
 8009948:	40020428 	.word	0x40020428
 800994c:	40020440 	.word	0x40020440
 8009950:	40020458 	.word	0x40020458
 8009954:	40020470 	.word	0x40020470
 8009958:	40020488 	.word	0x40020488
 800995c:	400204a0 	.word	0x400204a0
 8009960:	400204b8 	.word	0x400204b8

08009964 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009964:	b480      	push	{r7}
 8009966:	b087      	sub	sp, #28
 8009968:	af00      	add	r7, sp, #0
 800996a:	60f8      	str	r0, [r7, #12]
 800996c:	60b9      	str	r1, [r7, #8]
 800996e:	607a      	str	r2, [r7, #4]
 8009970:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009976:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800997c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	4a7f      	ldr	r2, [pc, #508]	; (8009b80 <DMA_SetConfig+0x21c>)
 8009984:	4293      	cmp	r3, r2
 8009986:	d072      	beq.n	8009a6e <DMA_SetConfig+0x10a>
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	4a7d      	ldr	r2, [pc, #500]	; (8009b84 <DMA_SetConfig+0x220>)
 800998e:	4293      	cmp	r3, r2
 8009990:	d06d      	beq.n	8009a6e <DMA_SetConfig+0x10a>
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4a7c      	ldr	r2, [pc, #496]	; (8009b88 <DMA_SetConfig+0x224>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d068      	beq.n	8009a6e <DMA_SetConfig+0x10a>
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4a7a      	ldr	r2, [pc, #488]	; (8009b8c <DMA_SetConfig+0x228>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d063      	beq.n	8009a6e <DMA_SetConfig+0x10a>
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	4a79      	ldr	r2, [pc, #484]	; (8009b90 <DMA_SetConfig+0x22c>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d05e      	beq.n	8009a6e <DMA_SetConfig+0x10a>
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	4a77      	ldr	r2, [pc, #476]	; (8009b94 <DMA_SetConfig+0x230>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d059      	beq.n	8009a6e <DMA_SetConfig+0x10a>
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	4a76      	ldr	r2, [pc, #472]	; (8009b98 <DMA_SetConfig+0x234>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d054      	beq.n	8009a6e <DMA_SetConfig+0x10a>
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	4a74      	ldr	r2, [pc, #464]	; (8009b9c <DMA_SetConfig+0x238>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d04f      	beq.n	8009a6e <DMA_SetConfig+0x10a>
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	4a73      	ldr	r2, [pc, #460]	; (8009ba0 <DMA_SetConfig+0x23c>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d04a      	beq.n	8009a6e <DMA_SetConfig+0x10a>
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	4a71      	ldr	r2, [pc, #452]	; (8009ba4 <DMA_SetConfig+0x240>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d045      	beq.n	8009a6e <DMA_SetConfig+0x10a>
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4a70      	ldr	r2, [pc, #448]	; (8009ba8 <DMA_SetConfig+0x244>)
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d040      	beq.n	8009a6e <DMA_SetConfig+0x10a>
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4a6e      	ldr	r2, [pc, #440]	; (8009bac <DMA_SetConfig+0x248>)
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d03b      	beq.n	8009a6e <DMA_SetConfig+0x10a>
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	4a6d      	ldr	r2, [pc, #436]	; (8009bb0 <DMA_SetConfig+0x24c>)
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d036      	beq.n	8009a6e <DMA_SetConfig+0x10a>
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	4a6b      	ldr	r2, [pc, #428]	; (8009bb4 <DMA_SetConfig+0x250>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d031      	beq.n	8009a6e <DMA_SetConfig+0x10a>
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	4a6a      	ldr	r2, [pc, #424]	; (8009bb8 <DMA_SetConfig+0x254>)
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d02c      	beq.n	8009a6e <DMA_SetConfig+0x10a>
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	4a68      	ldr	r2, [pc, #416]	; (8009bbc <DMA_SetConfig+0x258>)
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d027      	beq.n	8009a6e <DMA_SetConfig+0x10a>
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	4a67      	ldr	r2, [pc, #412]	; (8009bc0 <DMA_SetConfig+0x25c>)
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d022      	beq.n	8009a6e <DMA_SetConfig+0x10a>
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	4a65      	ldr	r2, [pc, #404]	; (8009bc4 <DMA_SetConfig+0x260>)
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d01d      	beq.n	8009a6e <DMA_SetConfig+0x10a>
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	4a64      	ldr	r2, [pc, #400]	; (8009bc8 <DMA_SetConfig+0x264>)
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	d018      	beq.n	8009a6e <DMA_SetConfig+0x10a>
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	4a62      	ldr	r2, [pc, #392]	; (8009bcc <DMA_SetConfig+0x268>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d013      	beq.n	8009a6e <DMA_SetConfig+0x10a>
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	4a61      	ldr	r2, [pc, #388]	; (8009bd0 <DMA_SetConfig+0x26c>)
 8009a4c:	4293      	cmp	r3, r2
 8009a4e:	d00e      	beq.n	8009a6e <DMA_SetConfig+0x10a>
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	4a5f      	ldr	r2, [pc, #380]	; (8009bd4 <DMA_SetConfig+0x270>)
 8009a56:	4293      	cmp	r3, r2
 8009a58:	d009      	beq.n	8009a6e <DMA_SetConfig+0x10a>
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	4a5e      	ldr	r2, [pc, #376]	; (8009bd8 <DMA_SetConfig+0x274>)
 8009a60:	4293      	cmp	r3, r2
 8009a62:	d004      	beq.n	8009a6e <DMA_SetConfig+0x10a>
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	4a5c      	ldr	r2, [pc, #368]	; (8009bdc <DMA_SetConfig+0x278>)
 8009a6a:	4293      	cmp	r3, r2
 8009a6c:	d101      	bne.n	8009a72 <DMA_SetConfig+0x10e>
 8009a6e:	2301      	movs	r3, #1
 8009a70:	e000      	b.n	8009a74 <DMA_SetConfig+0x110>
 8009a72:	2300      	movs	r3, #0
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d00d      	beq.n	8009a94 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a7c:	68fa      	ldr	r2, [r7, #12]
 8009a7e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009a80:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d004      	beq.n	8009a94 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a8e:	68fa      	ldr	r2, [r7, #12]
 8009a90:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009a92:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	4a39      	ldr	r2, [pc, #228]	; (8009b80 <DMA_SetConfig+0x21c>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d04a      	beq.n	8009b34 <DMA_SetConfig+0x1d0>
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	4a38      	ldr	r2, [pc, #224]	; (8009b84 <DMA_SetConfig+0x220>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d045      	beq.n	8009b34 <DMA_SetConfig+0x1d0>
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	4a36      	ldr	r2, [pc, #216]	; (8009b88 <DMA_SetConfig+0x224>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d040      	beq.n	8009b34 <DMA_SetConfig+0x1d0>
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	4a35      	ldr	r2, [pc, #212]	; (8009b8c <DMA_SetConfig+0x228>)
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d03b      	beq.n	8009b34 <DMA_SetConfig+0x1d0>
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	4a33      	ldr	r2, [pc, #204]	; (8009b90 <DMA_SetConfig+0x22c>)
 8009ac2:	4293      	cmp	r3, r2
 8009ac4:	d036      	beq.n	8009b34 <DMA_SetConfig+0x1d0>
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	4a32      	ldr	r2, [pc, #200]	; (8009b94 <DMA_SetConfig+0x230>)
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d031      	beq.n	8009b34 <DMA_SetConfig+0x1d0>
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	4a30      	ldr	r2, [pc, #192]	; (8009b98 <DMA_SetConfig+0x234>)
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	d02c      	beq.n	8009b34 <DMA_SetConfig+0x1d0>
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	4a2f      	ldr	r2, [pc, #188]	; (8009b9c <DMA_SetConfig+0x238>)
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d027      	beq.n	8009b34 <DMA_SetConfig+0x1d0>
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	4a2d      	ldr	r2, [pc, #180]	; (8009ba0 <DMA_SetConfig+0x23c>)
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d022      	beq.n	8009b34 <DMA_SetConfig+0x1d0>
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	4a2c      	ldr	r2, [pc, #176]	; (8009ba4 <DMA_SetConfig+0x240>)
 8009af4:	4293      	cmp	r3, r2
 8009af6:	d01d      	beq.n	8009b34 <DMA_SetConfig+0x1d0>
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	4a2a      	ldr	r2, [pc, #168]	; (8009ba8 <DMA_SetConfig+0x244>)
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d018      	beq.n	8009b34 <DMA_SetConfig+0x1d0>
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	4a29      	ldr	r2, [pc, #164]	; (8009bac <DMA_SetConfig+0x248>)
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d013      	beq.n	8009b34 <DMA_SetConfig+0x1d0>
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	4a27      	ldr	r2, [pc, #156]	; (8009bb0 <DMA_SetConfig+0x24c>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d00e      	beq.n	8009b34 <DMA_SetConfig+0x1d0>
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	4a26      	ldr	r2, [pc, #152]	; (8009bb4 <DMA_SetConfig+0x250>)
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	d009      	beq.n	8009b34 <DMA_SetConfig+0x1d0>
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	4a24      	ldr	r2, [pc, #144]	; (8009bb8 <DMA_SetConfig+0x254>)
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d004      	beq.n	8009b34 <DMA_SetConfig+0x1d0>
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	4a23      	ldr	r2, [pc, #140]	; (8009bbc <DMA_SetConfig+0x258>)
 8009b30:	4293      	cmp	r3, r2
 8009b32:	d101      	bne.n	8009b38 <DMA_SetConfig+0x1d4>
 8009b34:	2301      	movs	r3, #1
 8009b36:	e000      	b.n	8009b3a <DMA_SetConfig+0x1d6>
 8009b38:	2300      	movs	r3, #0
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d059      	beq.n	8009bf2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b42:	f003 031f 	and.w	r3, r3, #31
 8009b46:	223f      	movs	r2, #63	; 0x3f
 8009b48:	409a      	lsls	r2, r3
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	681a      	ldr	r2, [r3, #0]
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009b5c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	683a      	ldr	r2, [r7, #0]
 8009b64:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	689b      	ldr	r3, [r3, #8]
 8009b6a:	2b40      	cmp	r3, #64	; 0x40
 8009b6c:	d138      	bne.n	8009be0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	687a      	ldr	r2, [r7, #4]
 8009b74:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	68ba      	ldr	r2, [r7, #8]
 8009b7c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8009b7e:	e086      	b.n	8009c8e <DMA_SetConfig+0x32a>
 8009b80:	40020010 	.word	0x40020010
 8009b84:	40020028 	.word	0x40020028
 8009b88:	40020040 	.word	0x40020040
 8009b8c:	40020058 	.word	0x40020058
 8009b90:	40020070 	.word	0x40020070
 8009b94:	40020088 	.word	0x40020088
 8009b98:	400200a0 	.word	0x400200a0
 8009b9c:	400200b8 	.word	0x400200b8
 8009ba0:	40020410 	.word	0x40020410
 8009ba4:	40020428 	.word	0x40020428
 8009ba8:	40020440 	.word	0x40020440
 8009bac:	40020458 	.word	0x40020458
 8009bb0:	40020470 	.word	0x40020470
 8009bb4:	40020488 	.word	0x40020488
 8009bb8:	400204a0 	.word	0x400204a0
 8009bbc:	400204b8 	.word	0x400204b8
 8009bc0:	58025408 	.word	0x58025408
 8009bc4:	5802541c 	.word	0x5802541c
 8009bc8:	58025430 	.word	0x58025430
 8009bcc:	58025444 	.word	0x58025444
 8009bd0:	58025458 	.word	0x58025458
 8009bd4:	5802546c 	.word	0x5802546c
 8009bd8:	58025480 	.word	0x58025480
 8009bdc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	68ba      	ldr	r2, [r7, #8]
 8009be6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	687a      	ldr	r2, [r7, #4]
 8009bee:	60da      	str	r2, [r3, #12]
}
 8009bf0:	e04d      	b.n	8009c8e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	4a29      	ldr	r2, [pc, #164]	; (8009c9c <DMA_SetConfig+0x338>)
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	d022      	beq.n	8009c42 <DMA_SetConfig+0x2de>
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	4a27      	ldr	r2, [pc, #156]	; (8009ca0 <DMA_SetConfig+0x33c>)
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d01d      	beq.n	8009c42 <DMA_SetConfig+0x2de>
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	4a26      	ldr	r2, [pc, #152]	; (8009ca4 <DMA_SetConfig+0x340>)
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	d018      	beq.n	8009c42 <DMA_SetConfig+0x2de>
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	4a24      	ldr	r2, [pc, #144]	; (8009ca8 <DMA_SetConfig+0x344>)
 8009c16:	4293      	cmp	r3, r2
 8009c18:	d013      	beq.n	8009c42 <DMA_SetConfig+0x2de>
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	4a23      	ldr	r2, [pc, #140]	; (8009cac <DMA_SetConfig+0x348>)
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d00e      	beq.n	8009c42 <DMA_SetConfig+0x2de>
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	4a21      	ldr	r2, [pc, #132]	; (8009cb0 <DMA_SetConfig+0x34c>)
 8009c2a:	4293      	cmp	r3, r2
 8009c2c:	d009      	beq.n	8009c42 <DMA_SetConfig+0x2de>
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	4a20      	ldr	r2, [pc, #128]	; (8009cb4 <DMA_SetConfig+0x350>)
 8009c34:	4293      	cmp	r3, r2
 8009c36:	d004      	beq.n	8009c42 <DMA_SetConfig+0x2de>
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	4a1e      	ldr	r2, [pc, #120]	; (8009cb8 <DMA_SetConfig+0x354>)
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d101      	bne.n	8009c46 <DMA_SetConfig+0x2e2>
 8009c42:	2301      	movs	r3, #1
 8009c44:	e000      	b.n	8009c48 <DMA_SetConfig+0x2e4>
 8009c46:	2300      	movs	r3, #0
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d020      	beq.n	8009c8e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c50:	f003 031f 	and.w	r3, r3, #31
 8009c54:	2201      	movs	r2, #1
 8009c56:	409a      	lsls	r2, r3
 8009c58:	693b      	ldr	r3, [r7, #16]
 8009c5a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	683a      	ldr	r2, [r7, #0]
 8009c62:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	689b      	ldr	r3, [r3, #8]
 8009c68:	2b40      	cmp	r3, #64	; 0x40
 8009c6a:	d108      	bne.n	8009c7e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	687a      	ldr	r2, [r7, #4]
 8009c72:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	68ba      	ldr	r2, [r7, #8]
 8009c7a:	60da      	str	r2, [r3, #12]
}
 8009c7c:	e007      	b.n	8009c8e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	68ba      	ldr	r2, [r7, #8]
 8009c84:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	687a      	ldr	r2, [r7, #4]
 8009c8c:	60da      	str	r2, [r3, #12]
}
 8009c8e:	bf00      	nop
 8009c90:	371c      	adds	r7, #28
 8009c92:	46bd      	mov	sp, r7
 8009c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c98:	4770      	bx	lr
 8009c9a:	bf00      	nop
 8009c9c:	58025408 	.word	0x58025408
 8009ca0:	5802541c 	.word	0x5802541c
 8009ca4:	58025430 	.word	0x58025430
 8009ca8:	58025444 	.word	0x58025444
 8009cac:	58025458 	.word	0x58025458
 8009cb0:	5802546c 	.word	0x5802546c
 8009cb4:	58025480 	.word	0x58025480
 8009cb8:	58025494 	.word	0x58025494

08009cbc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	b085      	sub	sp, #20
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	4a42      	ldr	r2, [pc, #264]	; (8009dd4 <DMA_CalcBaseAndBitshift+0x118>)
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d04a      	beq.n	8009d64 <DMA_CalcBaseAndBitshift+0xa8>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	4a41      	ldr	r2, [pc, #260]	; (8009dd8 <DMA_CalcBaseAndBitshift+0x11c>)
 8009cd4:	4293      	cmp	r3, r2
 8009cd6:	d045      	beq.n	8009d64 <DMA_CalcBaseAndBitshift+0xa8>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	4a3f      	ldr	r2, [pc, #252]	; (8009ddc <DMA_CalcBaseAndBitshift+0x120>)
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d040      	beq.n	8009d64 <DMA_CalcBaseAndBitshift+0xa8>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	4a3e      	ldr	r2, [pc, #248]	; (8009de0 <DMA_CalcBaseAndBitshift+0x124>)
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	d03b      	beq.n	8009d64 <DMA_CalcBaseAndBitshift+0xa8>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4a3c      	ldr	r2, [pc, #240]	; (8009de4 <DMA_CalcBaseAndBitshift+0x128>)
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d036      	beq.n	8009d64 <DMA_CalcBaseAndBitshift+0xa8>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	4a3b      	ldr	r2, [pc, #236]	; (8009de8 <DMA_CalcBaseAndBitshift+0x12c>)
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	d031      	beq.n	8009d64 <DMA_CalcBaseAndBitshift+0xa8>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	4a39      	ldr	r2, [pc, #228]	; (8009dec <DMA_CalcBaseAndBitshift+0x130>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d02c      	beq.n	8009d64 <DMA_CalcBaseAndBitshift+0xa8>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	4a38      	ldr	r2, [pc, #224]	; (8009df0 <DMA_CalcBaseAndBitshift+0x134>)
 8009d10:	4293      	cmp	r3, r2
 8009d12:	d027      	beq.n	8009d64 <DMA_CalcBaseAndBitshift+0xa8>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	4a36      	ldr	r2, [pc, #216]	; (8009df4 <DMA_CalcBaseAndBitshift+0x138>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d022      	beq.n	8009d64 <DMA_CalcBaseAndBitshift+0xa8>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	4a35      	ldr	r2, [pc, #212]	; (8009df8 <DMA_CalcBaseAndBitshift+0x13c>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d01d      	beq.n	8009d64 <DMA_CalcBaseAndBitshift+0xa8>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	4a33      	ldr	r2, [pc, #204]	; (8009dfc <DMA_CalcBaseAndBitshift+0x140>)
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d018      	beq.n	8009d64 <DMA_CalcBaseAndBitshift+0xa8>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	4a32      	ldr	r2, [pc, #200]	; (8009e00 <DMA_CalcBaseAndBitshift+0x144>)
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d013      	beq.n	8009d64 <DMA_CalcBaseAndBitshift+0xa8>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	4a30      	ldr	r2, [pc, #192]	; (8009e04 <DMA_CalcBaseAndBitshift+0x148>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d00e      	beq.n	8009d64 <DMA_CalcBaseAndBitshift+0xa8>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	4a2f      	ldr	r2, [pc, #188]	; (8009e08 <DMA_CalcBaseAndBitshift+0x14c>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d009      	beq.n	8009d64 <DMA_CalcBaseAndBitshift+0xa8>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	4a2d      	ldr	r2, [pc, #180]	; (8009e0c <DMA_CalcBaseAndBitshift+0x150>)
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d004      	beq.n	8009d64 <DMA_CalcBaseAndBitshift+0xa8>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	4a2c      	ldr	r2, [pc, #176]	; (8009e10 <DMA_CalcBaseAndBitshift+0x154>)
 8009d60:	4293      	cmp	r3, r2
 8009d62:	d101      	bne.n	8009d68 <DMA_CalcBaseAndBitshift+0xac>
 8009d64:	2301      	movs	r3, #1
 8009d66:	e000      	b.n	8009d6a <DMA_CalcBaseAndBitshift+0xae>
 8009d68:	2300      	movs	r3, #0
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d024      	beq.n	8009db8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	b2db      	uxtb	r3, r3
 8009d74:	3b10      	subs	r3, #16
 8009d76:	4a27      	ldr	r2, [pc, #156]	; (8009e14 <DMA_CalcBaseAndBitshift+0x158>)
 8009d78:	fba2 2303 	umull	r2, r3, r2, r3
 8009d7c:	091b      	lsrs	r3, r3, #4
 8009d7e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	f003 0307 	and.w	r3, r3, #7
 8009d86:	4a24      	ldr	r2, [pc, #144]	; (8009e18 <DMA_CalcBaseAndBitshift+0x15c>)
 8009d88:	5cd3      	ldrb	r3, [r2, r3]
 8009d8a:	461a      	mov	r2, r3
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	2b03      	cmp	r3, #3
 8009d94:	d908      	bls.n	8009da8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	461a      	mov	r2, r3
 8009d9c:	4b1f      	ldr	r3, [pc, #124]	; (8009e1c <DMA_CalcBaseAndBitshift+0x160>)
 8009d9e:	4013      	ands	r3, r2
 8009da0:	1d1a      	adds	r2, r3, #4
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	659a      	str	r2, [r3, #88]	; 0x58
 8009da6:	e00d      	b.n	8009dc4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	461a      	mov	r2, r3
 8009dae:	4b1b      	ldr	r3, [pc, #108]	; (8009e1c <DMA_CalcBaseAndBitshift+0x160>)
 8009db0:	4013      	ands	r3, r2
 8009db2:	687a      	ldr	r2, [r7, #4]
 8009db4:	6593      	str	r3, [r2, #88]	; 0x58
 8009db6:	e005      	b.n	8009dc4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	3714      	adds	r7, #20
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd2:	4770      	bx	lr
 8009dd4:	40020010 	.word	0x40020010
 8009dd8:	40020028 	.word	0x40020028
 8009ddc:	40020040 	.word	0x40020040
 8009de0:	40020058 	.word	0x40020058
 8009de4:	40020070 	.word	0x40020070
 8009de8:	40020088 	.word	0x40020088
 8009dec:	400200a0 	.word	0x400200a0
 8009df0:	400200b8 	.word	0x400200b8
 8009df4:	40020410 	.word	0x40020410
 8009df8:	40020428 	.word	0x40020428
 8009dfc:	40020440 	.word	0x40020440
 8009e00:	40020458 	.word	0x40020458
 8009e04:	40020470 	.word	0x40020470
 8009e08:	40020488 	.word	0x40020488
 8009e0c:	400204a0 	.word	0x400204a0
 8009e10:	400204b8 	.word	0x400204b8
 8009e14:	aaaaaaab 	.word	0xaaaaaaab
 8009e18:	080145e4 	.word	0x080145e4
 8009e1c:	fffffc00 	.word	0xfffffc00

08009e20 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009e20:	b480      	push	{r7}
 8009e22:	b085      	sub	sp, #20
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009e28:	2300      	movs	r3, #0
 8009e2a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	699b      	ldr	r3, [r3, #24]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d120      	bne.n	8009e76 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e38:	2b03      	cmp	r3, #3
 8009e3a:	d858      	bhi.n	8009eee <DMA_CheckFifoParam+0xce>
 8009e3c:	a201      	add	r2, pc, #4	; (adr r2, 8009e44 <DMA_CheckFifoParam+0x24>)
 8009e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e42:	bf00      	nop
 8009e44:	08009e55 	.word	0x08009e55
 8009e48:	08009e67 	.word	0x08009e67
 8009e4c:	08009e55 	.word	0x08009e55
 8009e50:	08009eef 	.word	0x08009eef
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d048      	beq.n	8009ef2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8009e60:	2301      	movs	r3, #1
 8009e62:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009e64:	e045      	b.n	8009ef2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e6a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009e6e:	d142      	bne.n	8009ef6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8009e70:	2301      	movs	r3, #1
 8009e72:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009e74:	e03f      	b.n	8009ef6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	699b      	ldr	r3, [r3, #24]
 8009e7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e7e:	d123      	bne.n	8009ec8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e84:	2b03      	cmp	r3, #3
 8009e86:	d838      	bhi.n	8009efa <DMA_CheckFifoParam+0xda>
 8009e88:	a201      	add	r2, pc, #4	; (adr r2, 8009e90 <DMA_CheckFifoParam+0x70>)
 8009e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e8e:	bf00      	nop
 8009e90:	08009ea1 	.word	0x08009ea1
 8009e94:	08009ea7 	.word	0x08009ea7
 8009e98:	08009ea1 	.word	0x08009ea1
 8009e9c:	08009eb9 	.word	0x08009eb9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	73fb      	strb	r3, [r7, #15]
        break;
 8009ea4:	e030      	b.n	8009f08 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eaa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d025      	beq.n	8009efe <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009eb6:	e022      	b.n	8009efe <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ebc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009ec0:	d11f      	bne.n	8009f02 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009ec6:	e01c      	b.n	8009f02 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ecc:	2b02      	cmp	r3, #2
 8009ece:	d902      	bls.n	8009ed6 <DMA_CheckFifoParam+0xb6>
 8009ed0:	2b03      	cmp	r3, #3
 8009ed2:	d003      	beq.n	8009edc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8009ed4:	e018      	b.n	8009f08 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	73fb      	strb	r3, [r7, #15]
        break;
 8009eda:	e015      	b.n	8009f08 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ee0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d00e      	beq.n	8009f06 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8009ee8:	2301      	movs	r3, #1
 8009eea:	73fb      	strb	r3, [r7, #15]
    break;
 8009eec:	e00b      	b.n	8009f06 <DMA_CheckFifoParam+0xe6>
        break;
 8009eee:	bf00      	nop
 8009ef0:	e00a      	b.n	8009f08 <DMA_CheckFifoParam+0xe8>
        break;
 8009ef2:	bf00      	nop
 8009ef4:	e008      	b.n	8009f08 <DMA_CheckFifoParam+0xe8>
        break;
 8009ef6:	bf00      	nop
 8009ef8:	e006      	b.n	8009f08 <DMA_CheckFifoParam+0xe8>
        break;
 8009efa:	bf00      	nop
 8009efc:	e004      	b.n	8009f08 <DMA_CheckFifoParam+0xe8>
        break;
 8009efe:	bf00      	nop
 8009f00:	e002      	b.n	8009f08 <DMA_CheckFifoParam+0xe8>
        break;
 8009f02:	bf00      	nop
 8009f04:	e000      	b.n	8009f08 <DMA_CheckFifoParam+0xe8>
    break;
 8009f06:	bf00      	nop
    }
  }

  return status;
 8009f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	3714      	adds	r7, #20
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f14:	4770      	bx	lr
 8009f16:	bf00      	nop

08009f18 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009f18:	b480      	push	{r7}
 8009f1a:	b085      	sub	sp, #20
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	4a38      	ldr	r2, [pc, #224]	; (800a00c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d022      	beq.n	8009f76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	4a36      	ldr	r2, [pc, #216]	; (800a010 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8009f36:	4293      	cmp	r3, r2
 8009f38:	d01d      	beq.n	8009f76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	4a35      	ldr	r2, [pc, #212]	; (800a014 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8009f40:	4293      	cmp	r3, r2
 8009f42:	d018      	beq.n	8009f76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	4a33      	ldr	r2, [pc, #204]	; (800a018 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	d013      	beq.n	8009f76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	4a32      	ldr	r2, [pc, #200]	; (800a01c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8009f54:	4293      	cmp	r3, r2
 8009f56:	d00e      	beq.n	8009f76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	4a30      	ldr	r2, [pc, #192]	; (800a020 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d009      	beq.n	8009f76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	4a2f      	ldr	r2, [pc, #188]	; (800a024 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8009f68:	4293      	cmp	r3, r2
 8009f6a:	d004      	beq.n	8009f76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	4a2d      	ldr	r2, [pc, #180]	; (800a028 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8009f72:	4293      	cmp	r3, r2
 8009f74:	d101      	bne.n	8009f7a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8009f76:	2301      	movs	r3, #1
 8009f78:	e000      	b.n	8009f7c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d01a      	beq.n	8009fb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	b2db      	uxtb	r3, r3
 8009f86:	3b08      	subs	r3, #8
 8009f88:	4a28      	ldr	r2, [pc, #160]	; (800a02c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8009f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8009f8e:	091b      	lsrs	r3, r3, #4
 8009f90:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8009f92:	68fa      	ldr	r2, [r7, #12]
 8009f94:	4b26      	ldr	r3, [pc, #152]	; (800a030 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8009f96:	4413      	add	r3, r2
 8009f98:	009b      	lsls	r3, r3, #2
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	4a24      	ldr	r2, [pc, #144]	; (800a034 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8009fa4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	f003 031f 	and.w	r3, r3, #31
 8009fac:	2201      	movs	r2, #1
 8009fae:	409a      	lsls	r2, r3
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8009fb4:	e024      	b.n	800a000 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	b2db      	uxtb	r3, r3
 8009fbc:	3b10      	subs	r3, #16
 8009fbe:	4a1e      	ldr	r2, [pc, #120]	; (800a038 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8009fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8009fc4:	091b      	lsrs	r3, r3, #4
 8009fc6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	4a1c      	ldr	r2, [pc, #112]	; (800a03c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	d806      	bhi.n	8009fde <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	4a1b      	ldr	r2, [pc, #108]	; (800a040 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	d902      	bls.n	8009fde <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	3308      	adds	r3, #8
 8009fdc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8009fde:	68fa      	ldr	r2, [r7, #12]
 8009fe0:	4b18      	ldr	r3, [pc, #96]	; (800a044 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8009fe2:	4413      	add	r3, r2
 8009fe4:	009b      	lsls	r3, r3, #2
 8009fe6:	461a      	mov	r2, r3
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	4a16      	ldr	r2, [pc, #88]	; (800a048 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8009ff0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	f003 031f 	and.w	r3, r3, #31
 8009ff8:	2201      	movs	r2, #1
 8009ffa:	409a      	lsls	r2, r3
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	669a      	str	r2, [r3, #104]	; 0x68
}
 800a000:	bf00      	nop
 800a002:	3714      	adds	r7, #20
 800a004:	46bd      	mov	sp, r7
 800a006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00a:	4770      	bx	lr
 800a00c:	58025408 	.word	0x58025408
 800a010:	5802541c 	.word	0x5802541c
 800a014:	58025430 	.word	0x58025430
 800a018:	58025444 	.word	0x58025444
 800a01c:	58025458 	.word	0x58025458
 800a020:	5802546c 	.word	0x5802546c
 800a024:	58025480 	.word	0x58025480
 800a028:	58025494 	.word	0x58025494
 800a02c:	cccccccd 	.word	0xcccccccd
 800a030:	16009600 	.word	0x16009600
 800a034:	58025880 	.word	0x58025880
 800a038:	aaaaaaab 	.word	0xaaaaaaab
 800a03c:	400204b8 	.word	0x400204b8
 800a040:	4002040f 	.word	0x4002040f
 800a044:	10008200 	.word	0x10008200
 800a048:	40020880 	.word	0x40020880

0800a04c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a04c:	b480      	push	{r7}
 800a04e:	b085      	sub	sp, #20
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	685b      	ldr	r3, [r3, #4]
 800a058:	b2db      	uxtb	r3, r3
 800a05a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d04a      	beq.n	800a0f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2b08      	cmp	r3, #8
 800a066:	d847      	bhi.n	800a0f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	4a25      	ldr	r2, [pc, #148]	; (800a104 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d022      	beq.n	800a0b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	4a24      	ldr	r2, [pc, #144]	; (800a108 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800a078:	4293      	cmp	r3, r2
 800a07a:	d01d      	beq.n	800a0b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	4a22      	ldr	r2, [pc, #136]	; (800a10c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800a082:	4293      	cmp	r3, r2
 800a084:	d018      	beq.n	800a0b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	4a21      	ldr	r2, [pc, #132]	; (800a110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800a08c:	4293      	cmp	r3, r2
 800a08e:	d013      	beq.n	800a0b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	4a1f      	ldr	r2, [pc, #124]	; (800a114 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800a096:	4293      	cmp	r3, r2
 800a098:	d00e      	beq.n	800a0b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	4a1e      	ldr	r2, [pc, #120]	; (800a118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800a0a0:	4293      	cmp	r3, r2
 800a0a2:	d009      	beq.n	800a0b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	4a1c      	ldr	r2, [pc, #112]	; (800a11c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	d004      	beq.n	800a0b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	4a1b      	ldr	r2, [pc, #108]	; (800a120 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800a0b4:	4293      	cmp	r3, r2
 800a0b6:	d101      	bne.n	800a0bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	e000      	b.n	800a0be <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800a0bc:	2300      	movs	r3, #0
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d00a      	beq.n	800a0d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800a0c2:	68fa      	ldr	r2, [r7, #12]
 800a0c4:	4b17      	ldr	r3, [pc, #92]	; (800a124 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800a0c6:	4413      	add	r3, r2
 800a0c8:	009b      	lsls	r3, r3, #2
 800a0ca:	461a      	mov	r2, r3
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	4a15      	ldr	r2, [pc, #84]	; (800a128 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800a0d4:	671a      	str	r2, [r3, #112]	; 0x70
 800a0d6:	e009      	b.n	800a0ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800a0d8:	68fa      	ldr	r2, [r7, #12]
 800a0da:	4b14      	ldr	r3, [pc, #80]	; (800a12c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800a0dc:	4413      	add	r3, r2
 800a0de:	009b      	lsls	r3, r3, #2
 800a0e0:	461a      	mov	r2, r3
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	4a11      	ldr	r2, [pc, #68]	; (800a130 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800a0ea:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	3b01      	subs	r3, #1
 800a0f0:	2201      	movs	r2, #1
 800a0f2:	409a      	lsls	r2, r3
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800a0f8:	bf00      	nop
 800a0fa:	3714      	adds	r7, #20
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a102:	4770      	bx	lr
 800a104:	58025408 	.word	0x58025408
 800a108:	5802541c 	.word	0x5802541c
 800a10c:	58025430 	.word	0x58025430
 800a110:	58025444 	.word	0x58025444
 800a114:	58025458 	.word	0x58025458
 800a118:	5802546c 	.word	0x5802546c
 800a11c:	58025480 	.word	0x58025480
 800a120:	58025494 	.word	0x58025494
 800a124:	1600963f 	.word	0x1600963f
 800a128:	58025940 	.word	0x58025940
 800a12c:	1000823f 	.word	0x1000823f
 800a130:	40020940 	.word	0x40020940

0800a134 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b098      	sub	sp, #96	; 0x60
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800a13c:	4a84      	ldr	r2, [pc, #528]	; (800a350 <HAL_FDCAN_Init+0x21c>)
 800a13e:	f107 030c 	add.w	r3, r7, #12
 800a142:	4611      	mov	r1, r2
 800a144:	224c      	movs	r2, #76	; 0x4c
 800a146:	4618      	mov	r0, r3
 800a148:	f007 fd8e 	bl	8011c68 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d101      	bne.n	800a156 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800a152:	2301      	movs	r3, #1
 800a154:	e1c6      	b.n	800a4e4 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	4a7e      	ldr	r2, [pc, #504]	; (800a354 <HAL_FDCAN_Init+0x220>)
 800a15c:	4293      	cmp	r3, r2
 800a15e:	d106      	bne.n	800a16e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800a168:	461a      	mov	r2, r3
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a174:	b2db      	uxtb	r3, r3
 800a176:	2b00      	cmp	r3, #0
 800a178:	d106      	bne.n	800a188 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2200      	movs	r2, #0
 800a17e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f7fb fab6 	bl	80056f4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	699a      	ldr	r2, [r3, #24]
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f022 0210 	bic.w	r2, r2, #16
 800a196:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a198:	f7fd f844 	bl	8007224 <HAL_GetTick>
 800a19c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800a19e:	e014      	b.n	800a1ca <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800a1a0:	f7fd f840 	bl	8007224 <HAL_GetTick>
 800a1a4:	4602      	mov	r2, r0
 800a1a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1a8:	1ad3      	subs	r3, r2, r3
 800a1aa:	2b0a      	cmp	r3, #10
 800a1ac:	d90d      	bls.n	800a1ca <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a1b4:	f043 0201 	orr.w	r2, r3, #1
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2203      	movs	r2, #3
 800a1c2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	e18c      	b.n	800a4e4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	699b      	ldr	r3, [r3, #24]
 800a1d0:	f003 0308 	and.w	r3, r3, #8
 800a1d4:	2b08      	cmp	r3, #8
 800a1d6:	d0e3      	beq.n	800a1a0 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	699a      	ldr	r2, [r3, #24]
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	f042 0201 	orr.w	r2, r2, #1
 800a1e6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a1e8:	f7fd f81c 	bl	8007224 <HAL_GetTick>
 800a1ec:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800a1ee:	e014      	b.n	800a21a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800a1f0:	f7fd f818 	bl	8007224 <HAL_GetTick>
 800a1f4:	4602      	mov	r2, r0
 800a1f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1f8:	1ad3      	subs	r3, r2, r3
 800a1fa:	2b0a      	cmp	r3, #10
 800a1fc:	d90d      	bls.n	800a21a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a204:	f043 0201 	orr.w	r2, r3, #1
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2203      	movs	r2, #3
 800a212:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800a216:	2301      	movs	r3, #1
 800a218:	e164      	b.n	800a4e4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	699b      	ldr	r3, [r3, #24]
 800a220:	f003 0301 	and.w	r3, r3, #1
 800a224:	2b00      	cmp	r3, #0
 800a226:	d0e3      	beq.n	800a1f0 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	699a      	ldr	r2, [r3, #24]
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f042 0202 	orr.w	r2, r2, #2
 800a236:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	7c1b      	ldrb	r3, [r3, #16]
 800a23c:	2b01      	cmp	r3, #1
 800a23e:	d108      	bne.n	800a252 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	699a      	ldr	r2, [r3, #24]
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a24e:	619a      	str	r2, [r3, #24]
 800a250:	e007      	b.n	800a262 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	699a      	ldr	r2, [r3, #24]
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a260:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	7c5b      	ldrb	r3, [r3, #17]
 800a266:	2b01      	cmp	r3, #1
 800a268:	d108      	bne.n	800a27c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	699a      	ldr	r2, [r3, #24]
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a278:	619a      	str	r2, [r3, #24]
 800a27a:	e007      	b.n	800a28c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	699a      	ldr	r2, [r3, #24]
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a28a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	7c9b      	ldrb	r3, [r3, #18]
 800a290:	2b01      	cmp	r3, #1
 800a292:	d108      	bne.n	800a2a6 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	699a      	ldr	r2, [r3, #24]
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a2a2:	619a      	str	r2, [r3, #24]
 800a2a4:	e007      	b.n	800a2b6 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	699a      	ldr	r2, [r3, #24]
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a2b4:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	699b      	ldr	r3, [r3, #24]
 800a2bc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	689a      	ldr	r2, [r3, #8]
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	430a      	orrs	r2, r1
 800a2ca:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	699a      	ldr	r2, [r3, #24]
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800a2da:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	691a      	ldr	r2, [r3, #16]
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f022 0210 	bic.w	r2, r2, #16
 800a2ea:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	68db      	ldr	r3, [r3, #12]
 800a2f0:	2b01      	cmp	r3, #1
 800a2f2:	d108      	bne.n	800a306 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	699a      	ldr	r2, [r3, #24]
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	f042 0204 	orr.w	r2, r2, #4
 800a302:	619a      	str	r2, [r3, #24]
 800a304:	e030      	b.n	800a368 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	68db      	ldr	r3, [r3, #12]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d02c      	beq.n	800a368 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	68db      	ldr	r3, [r3, #12]
 800a312:	2b02      	cmp	r3, #2
 800a314:	d020      	beq.n	800a358 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	699a      	ldr	r2, [r3, #24]
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a324:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	691a      	ldr	r2, [r3, #16]
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f042 0210 	orr.w	r2, r2, #16
 800a334:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	68db      	ldr	r3, [r3, #12]
 800a33a:	2b03      	cmp	r3, #3
 800a33c:	d114      	bne.n	800a368 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	699a      	ldr	r2, [r3, #24]
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f042 0220 	orr.w	r2, r2, #32
 800a34c:	619a      	str	r2, [r3, #24]
 800a34e:	e00b      	b.n	800a368 <HAL_FDCAN_Init+0x234>
 800a350:	08014584 	.word	0x08014584
 800a354:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	699a      	ldr	r2, [r3, #24]
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f042 0220 	orr.w	r2, r2, #32
 800a366:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	699b      	ldr	r3, [r3, #24]
 800a36c:	3b01      	subs	r3, #1
 800a36e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	69db      	ldr	r3, [r3, #28]
 800a374:	3b01      	subs	r3, #1
 800a376:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800a378:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6a1b      	ldr	r3, [r3, #32]
 800a37e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800a380:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	695b      	ldr	r3, [r3, #20]
 800a388:	3b01      	subs	r3, #1
 800a38a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800a390:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800a392:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	689b      	ldr	r3, [r3, #8]
 800a398:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a39c:	d115      	bne.n	800a3ca <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3a2:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3a8:	3b01      	subs	r3, #1
 800a3aa:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800a3ac:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3b2:	3b01      	subs	r3, #1
 800a3b4:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800a3b6:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3be:	3b01      	subs	r3, #1
 800a3c0:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800a3c6:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800a3c8:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d00a      	beq.n	800a3e8 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	430a      	orrs	r2, r1
 800a3e4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3f0:	4413      	add	r3, r2
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d011      	beq.n	800a41a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800a3fe:	f023 0107 	bic.w	r1, r3, #7
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a406:	009b      	lsls	r3, r3, #2
 800a408:	3360      	adds	r3, #96	; 0x60
 800a40a:	443b      	add	r3, r7
 800a40c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	430a      	orrs	r2, r1
 800a416:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d011      	beq.n	800a446 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a42a:	f023 0107 	bic.w	r1, r3, #7
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a432:	009b      	lsls	r3, r3, #2
 800a434:	3360      	adds	r3, #96	; 0x60
 800a436:	443b      	add	r3, r7
 800a438:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	430a      	orrs	r2, r1
 800a442:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d012      	beq.n	800a474 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a456:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a45e:	009b      	lsls	r3, r3, #2
 800a460:	3360      	adds	r3, #96	; 0x60
 800a462:	443b      	add	r3, r7
 800a464:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800a468:	011a      	lsls	r2, r3, #4
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	430a      	orrs	r2, r1
 800a470:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d012      	beq.n	800a4a2 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a484:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a48c:	009b      	lsls	r3, r3, #2
 800a48e:	3360      	adds	r3, #96	; 0x60
 800a490:	443b      	add	r3, r7
 800a492:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800a496:	021a      	lsls	r2, r3, #8
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	430a      	orrs	r2, r1
 800a49e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	4a11      	ldr	r2, [pc, #68]	; (800a4ec <HAL_FDCAN_Init+0x3b8>)
 800a4a8:	4293      	cmp	r3, r2
 800a4aa:	d107      	bne.n	800a4bc <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	685b      	ldr	r3, [r3, #4]
 800a4b0:	689a      	ldr	r2, [r3, #8]
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	685b      	ldr	r3, [r3, #4]
 800a4b6:	f022 0203 	bic.w	r2, r2, #3
 800a4ba:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2201      	movs	r2, #1
 800a4d0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800a4d4:	6878      	ldr	r0, [r7, #4]
 800a4d6:	f000 fe27 	bl	800b128 <FDCAN_CalcultateRamBlockAddresses>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 800a4e0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	3760      	adds	r7, #96	; 0x60
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}
 800a4ec:	4000a000 	.word	0x4000a000

0800a4f0 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b087      	sub	sp, #28
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
 800a4f8:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a500:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800a502:	7bfb      	ldrb	r3, [r7, #15]
 800a504:	2b01      	cmp	r3, #1
 800a506:	d002      	beq.n	800a50e <HAL_FDCAN_ConfigFilter+0x1e>
 800a508:	7bfb      	ldrb	r3, [r7, #15]
 800a50a:	2b02      	cmp	r3, #2
 800a50c:	d157      	bne.n	800a5be <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d12b      	bne.n	800a56e <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	68db      	ldr	r3, [r3, #12]
 800a51a:	2b07      	cmp	r3, #7
 800a51c:	d10d      	bne.n	800a53a <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	691b      	ldr	r3, [r3, #16]
 800a522:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	69db      	ldr	r3, [r3, #28]
 800a528:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 800a52a:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 800a530:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 800a532:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 800a536:	617b      	str	r3, [r7, #20]
 800a538:	e00e      	b.n	800a558 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	689b      	ldr	r3, [r3, #8]
 800a53e:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	68db      	ldr	r3, [r3, #12]
 800a544:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800a546:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	691b      	ldr	r3, [r3, #16]
 800a54c:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 800a54e:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800a554:	4313      	orrs	r3, r2
 800a556:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	685b      	ldr	r3, [r3, #4]
 800a560:	009b      	lsls	r3, r3, #2
 800a562:	4413      	add	r3, r2
 800a564:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	697a      	ldr	r2, [r7, #20]
 800a56a:	601a      	str	r2, [r3, #0]
 800a56c:	e025      	b.n	800a5ba <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	68db      	ldr	r3, [r3, #12]
 800a572:	075a      	lsls	r2, r3, #29
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	691b      	ldr	r3, [r3, #16]
 800a578:	4313      	orrs	r3, r2
 800a57a:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	68db      	ldr	r3, [r3, #12]
 800a580:	2b07      	cmp	r3, #7
 800a582:	d103      	bne.n	800a58c <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	699b      	ldr	r3, [r3, #24]
 800a588:	613b      	str	r3, [r7, #16]
 800a58a:	e006      	b.n	800a59a <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	689b      	ldr	r3, [r3, #8]
 800a590:	079a      	lsls	r2, r3, #30
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	695b      	ldr	r3, [r3, #20]
 800a596:	4313      	orrs	r3, r2
 800a598:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	685b      	ldr	r3, [r3, #4]
 800a5a2:	00db      	lsls	r3, r3, #3
 800a5a4:	4413      	add	r3, r2
 800a5a6:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	697a      	ldr	r2, [r7, #20]
 800a5ac:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	3304      	adds	r3, #4
 800a5b2:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	693a      	ldr	r2, [r7, #16]
 800a5b8:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	e008      	b.n	800a5d0 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a5c4:	f043 0202 	orr.w	r2, r3, #2
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800a5ce:	2301      	movs	r3, #1
  }
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	371c      	adds	r7, #28
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr

0800a5dc <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b085      	sub	sp, #20
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	60f8      	str	r0, [r7, #12]
 800a5e4:	60b9      	str	r1, [r7, #8]
 800a5e6:	607a      	str	r2, [r7, #4]
 800a5e8:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a5f0:	b2db      	uxtb	r3, r3
 800a5f2:	2b01      	cmp	r3, #1
 800a5f4:	d110      	bne.n	800a618 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800a5fe:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 800a604:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 800a60c:	69ba      	ldr	r2, [r7, #24]
 800a60e:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800a610:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 800a614:	2300      	movs	r3, #0
 800a616:	e008      	b.n	800a62a <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a61e:	f043 0204 	orr.w	r2, r3, #4
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800a628:	2301      	movs	r3, #1
  }
}
 800a62a:	4618      	mov	r0, r3
 800a62c:	3714      	adds	r7, #20
 800a62e:	46bd      	mov	sp, r7
 800a630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a634:	4770      	bx	lr

0800a636 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800a636:	b480      	push	{r7}
 800a638:	b083      	sub	sp, #12
 800a63a:	af00      	add	r7, sp, #0
 800a63c:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a644:	b2db      	uxtb	r3, r3
 800a646:	2b01      	cmp	r3, #1
 800a648:	d111      	bne.n	800a66e <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2202      	movs	r2, #2
 800a64e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	699a      	ldr	r2, [r3, #24]
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	f022 0201 	bic.w	r2, r2, #1
 800a660:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2200      	movs	r2, #0
 800a666:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 800a66a:	2300      	movs	r3, #0
 800a66c:	e008      	b.n	800a680 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a674:	f043 0204 	orr.w	r2, r3, #4
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800a67e:	2301      	movs	r3, #1
  }
}
 800a680:	4618      	mov	r0, r3
 800a682:	370c      	adds	r7, #12
 800a684:	46bd      	mov	sp, r7
 800a686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68a:	4770      	bx	lr

0800a68c <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b086      	sub	sp, #24
 800a690:	af00      	add	r7, sp, #0
 800a692:	60f8      	str	r0, [r7, #12]
 800a694:	60b9      	str	r1, [r7, #8]
 800a696:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a69e:	b2db      	uxtb	r3, r3
 800a6a0:	2b02      	cmp	r3, #2
 800a6a2:	d141      	bne.n	800a728 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800a6ac:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d109      	bne.n	800a6c8 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a6ba:	f043 0220 	orr.w	r2, r3, #32
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	e038      	b.n	800a73a <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800a6d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d009      	beq.n	800a6ec <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a6de:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	e026      	b.n	800a73a <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800a6f4:	0c1b      	lsrs	r3, r3, #16
 800a6f6:	f003 031f 	and.w	r3, r3, #31
 800a6fa:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800a6fc:	697b      	ldr	r3, [r7, #20]
 800a6fe:	687a      	ldr	r2, [r7, #4]
 800a700:	68b9      	ldr	r1, [r7, #8]
 800a702:	68f8      	ldr	r0, [r7, #12]
 800a704:	f000 fe96 	bl	800b434 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	2101      	movs	r1, #1
 800a70e:	697a      	ldr	r2, [r7, #20]
 800a710:	fa01 f202 	lsl.w	r2, r1, r2
 800a714:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800a718:	2201      	movs	r2, #1
 800a71a:	697b      	ldr	r3, [r7, #20]
 800a71c:	409a      	lsls	r2, r3
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 800a724:	2300      	movs	r3, #0
 800a726:	e008      	b.n	800a73a <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a72e:	f043 0208 	orr.w	r2, r3, #8
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800a738:	2301      	movs	r3, #1
  }
}
 800a73a:	4618      	mov	r0, r3
 800a73c:	3718      	adds	r7, #24
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}
	...

0800a744 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800a744:	b480      	push	{r7}
 800a746:	b08b      	sub	sp, #44	; 0x2c
 800a748:	af00      	add	r7, sp, #0
 800a74a:	60f8      	str	r0, [r7, #12]
 800a74c:	60b9      	str	r1, [r7, #8]
 800a74e:	607a      	str	r2, [r7, #4]
 800a750:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800a752:	2300      	movs	r3, #0
 800a754:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a75c:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 800a75e:	7efb      	ldrb	r3, [r7, #27]
 800a760:	2b02      	cmp	r3, #2
 800a762:	f040 814b 	bne.w	800a9fc <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	2b40      	cmp	r3, #64	; 0x40
 800a76a:	d14d      	bne.n	800a808 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a774:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d109      	bne.n	800a790 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a782:	f043 0220 	orr.w	r2, r3, #32
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800a78c:	2301      	movs	r3, #1
 800a78e:	e13e      	b.n	800aa0e <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a798:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d109      	bne.n	800a7b4 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a7a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800a7b0:	2301      	movs	r3, #1
 800a7b2:	e12c      	b.n	800aa0e <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a7bc:	0e1b      	lsrs	r3, r3, #24
 800a7be:	f003 0301 	and.w	r3, r3, #1
 800a7c2:	2b01      	cmp	r3, #1
 800a7c4:	d10b      	bne.n	800a7de <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a7ce:	0fdb      	lsrs	r3, r3, #31
 800a7d0:	f003 0301 	and.w	r3, r3, #1
 800a7d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a7d8:	d101      	bne.n	800a7de <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800a7da:	2301      	movs	r3, #1
 800a7dc:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a7e6:	0a1b      	lsrs	r3, r3, #8
 800a7e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a7ec:	69fa      	ldr	r2, [r7, #28]
 800a7ee:	4413      	add	r3, r2
 800a7f0:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7fa:	69f9      	ldr	r1, [r7, #28]
 800a7fc:	fb01 f303 	mul.w	r3, r1, r3
 800a800:	009b      	lsls	r3, r3, #2
 800a802:	4413      	add	r3, r2
 800a804:	627b      	str	r3, [r7, #36]	; 0x24
 800a806:	e069      	b.n	800a8dc <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800a808:	68bb      	ldr	r3, [r7, #8]
 800a80a:	2b41      	cmp	r3, #65	; 0x41
 800a80c:	d14d      	bne.n	800a8aa <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a816:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d109      	bne.n	800a832 <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a824:	f043 0220 	orr.w	r2, r3, #32
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800a82e:	2301      	movs	r3, #1
 800a830:	e0ed      	b.n	800aa0e <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a83a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d109      	bne.n	800a856 <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a848:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800a852:	2301      	movs	r3, #1
 800a854:	e0db      	b.n	800aa0e <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a85e:	0e1b      	lsrs	r3, r3, #24
 800a860:	f003 0301 	and.w	r3, r3, #1
 800a864:	2b01      	cmp	r3, #1
 800a866:	d10b      	bne.n	800a880 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a870:	0fdb      	lsrs	r3, r3, #31
 800a872:	f003 0301 	and.w	r3, r3, #1
 800a876:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a87a:	d101      	bne.n	800a880 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800a87c:	2301      	movs	r3, #1
 800a87e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a888:	0a1b      	lsrs	r3, r3, #8
 800a88a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a88e:	69fa      	ldr	r2, [r7, #28]
 800a890:	4413      	add	r3, r2
 800a892:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a89c:	69f9      	ldr	r1, [r7, #28]
 800a89e:	fb01 f303 	mul.w	r3, r1, r3
 800a8a2:	009b      	lsls	r3, r3, #2
 800a8a4:	4413      	add	r3, r2
 800a8a6:	627b      	str	r3, [r7, #36]	; 0x24
 800a8a8:	e018      	b.n	800a8dc <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8ae:	68ba      	ldr	r2, [r7, #8]
 800a8b0:	429a      	cmp	r2, r3
 800a8b2:	d309      	bcc.n	800a8c8 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a8ba:	f043 0220 	orr.w	r2, r3, #32
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	e0a2      	b.n	800aa0e <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8d0:	68b9      	ldr	r1, [r7, #8]
 800a8d2:	fb01 f303 	mul.w	r3, r1, r3
 800a8d6:	009b      	lsls	r3, r3, #2
 800a8d8:	4413      	add	r3, r2
 800a8da:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800a8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	685b      	ldr	r3, [r3, #4]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d107      	bne.n	800a900 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 800a8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	0c9b      	lsrs	r3, r3, #18
 800a8f6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	601a      	str	r2, [r3, #0]
 800a8fe:	e005      	b.n	800a90c <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800a900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800a90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800a918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800a924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a926:	3304      	adds	r3, #4
 800a928:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800a92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	b29a      	uxth	r2, r3
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 800a934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800a940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800a94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 800a958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	0e1b      	lsrs	r3, r3, #24
 800a95e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 800a966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	0fda      	lsrs	r2, r3, #31
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800a970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a972:	3304      	adds	r3, #4
 800a974:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800a976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a978:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 800a97a:	2300      	movs	r3, #0
 800a97c:	623b      	str	r3, [r7, #32]
 800a97e:	e00a      	b.n	800a996 <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800a980:	697a      	ldr	r2, [r7, #20]
 800a982:	6a3b      	ldr	r3, [r7, #32]
 800a984:	441a      	add	r2, r3
 800a986:	6839      	ldr	r1, [r7, #0]
 800a988:	6a3b      	ldr	r3, [r7, #32]
 800a98a:	440b      	add	r3, r1
 800a98c:	7812      	ldrb	r2, [r2, #0]
 800a98e:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 800a990:	6a3b      	ldr	r3, [r7, #32]
 800a992:	3301      	adds	r3, #1
 800a994:	623b      	str	r3, [r7, #32]
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	68db      	ldr	r3, [r3, #12]
 800a99a:	0c1b      	lsrs	r3, r3, #16
 800a99c:	4a1f      	ldr	r2, [pc, #124]	; (800aa1c <HAL_FDCAN_GetRxMessage+0x2d8>)
 800a99e:	5cd3      	ldrb	r3, [r2, r3]
 800a9a0:	461a      	mov	r2, r3
 800a9a2:	6a3b      	ldr	r3, [r7, #32]
 800a9a4:	4293      	cmp	r3, r2
 800a9a6:	d3eb      	bcc.n	800a980 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	2b40      	cmp	r3, #64	; 0x40
 800a9ac:	d105      	bne.n	800a9ba <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	69fa      	ldr	r2, [r7, #28]
 800a9b4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 800a9b8:	e01e      	b.n	800a9f8 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800a9ba:	68bb      	ldr	r3, [r7, #8]
 800a9bc:	2b41      	cmp	r3, #65	; 0x41
 800a9be:	d105      	bne.n	800a9cc <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	69fa      	ldr	r2, [r7, #28]
 800a9c6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800a9ca:	e015      	b.n	800a9f8 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	2b1f      	cmp	r3, #31
 800a9d0:	d808      	bhi.n	800a9e4 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	2101      	movs	r1, #1
 800a9d8:	68ba      	ldr	r2, [r7, #8]
 800a9da:	fa01 f202 	lsl.w	r2, r1, r2
 800a9de:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800a9e2:	e009      	b.n	800a9f8 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 800a9e4:	68bb      	ldr	r3, [r7, #8]
 800a9e6:	f003 021f 	and.w	r2, r3, #31
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	2101      	movs	r1, #1
 800a9f0:	fa01 f202 	lsl.w	r2, r1, r2
 800a9f4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	e008      	b.n	800aa0e <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800aa02:	f043 0208 	orr.w	r2, r3, #8
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800aa0c:	2301      	movs	r3, #1
  }
}
 800aa0e:	4618      	mov	r0, r3
 800aa10:	372c      	adds	r7, #44	; 0x2c
 800aa12:	46bd      	mov	sp, r7
 800aa14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa18:	4770      	bx	lr
 800aa1a:	bf00      	nop
 800aa1c:	080145ec 	.word	0x080145ec

0800aa20 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 800aa20:	b480      	push	{r7}
 800aa22:	b087      	sub	sp, #28
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	60f8      	str	r0, [r7, #12]
 800aa28:	60b9      	str	r1, [r7, #8]
 800aa2a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800aa32:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800aa34:	7dfb      	ldrb	r3, [r7, #23]
 800aa36:	2b01      	cmp	r3, #1
 800aa38:	d002      	beq.n	800aa40 <HAL_FDCAN_ActivateNotification+0x20>
 800aa3a:	7dfb      	ldrb	r3, [r7, #23]
 800aa3c:	2b02      	cmp	r3, #2
 800aa3e:	d155      	bne.n	800aaec <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	4013      	ands	r3, r2
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d108      	bne.n	800aa60 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	f042 0201 	orr.w	r2, r2, #1
 800aa5c:	65da      	str	r2, [r3, #92]	; 0x5c
 800aa5e:	e014      	b.n	800aa8a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	4013      	ands	r3, r2
 800aa6a:	68ba      	ldr	r2, [r7, #8]
 800aa6c:	429a      	cmp	r2, r3
 800aa6e:	d108      	bne.n	800aa82 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f042 0202 	orr.w	r2, r2, #2
 800aa7e:	65da      	str	r2, [r3, #92]	; 0x5c
 800aa80:	e003      	b.n	800aa8a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	2203      	movs	r2, #3
 800aa88:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d009      	beq.n	800aaa8 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	687a      	ldr	r2, [r7, #4]
 800aaa2:	430a      	orrs	r2, r1
 800aaa4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800aaa8:	68bb      	ldr	r3, [r7, #8]
 800aaaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d009      	beq.n	800aac6 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	687a      	ldr	r2, [r7, #4]
 800aac0:	430a      	orrs	r2, r1
 800aac2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800aacc:	68ba      	ldr	r2, [r7, #8]
 800aace:	4b0f      	ldr	r3, [pc, #60]	; (800ab0c <HAL_FDCAN_ActivateNotification+0xec>)
 800aad0:	4013      	ands	r3, r2
 800aad2:	68fa      	ldr	r2, [r7, #12]
 800aad4:	6812      	ldr	r2, [r2, #0]
 800aad6:	430b      	orrs	r3, r1
 800aad8:	6553      	str	r3, [r2, #84]	; 0x54
 800aada:	4b0d      	ldr	r3, [pc, #52]	; (800ab10 <HAL_FDCAN_ActivateNotification+0xf0>)
 800aadc:	695a      	ldr	r2, [r3, #20]
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	0f9b      	lsrs	r3, r3, #30
 800aae2:	490b      	ldr	r1, [pc, #44]	; (800ab10 <HAL_FDCAN_ActivateNotification+0xf0>)
 800aae4:	4313      	orrs	r3, r2
 800aae6:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 800aae8:	2300      	movs	r3, #0
 800aaea:	e008      	b.n	800aafe <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800aaf2:	f043 0202 	orr.w	r2, r3, #2
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800aafc:	2301      	movs	r3, #1
  }
}
 800aafe:	4618      	mov	r0, r3
 800ab00:	371c      	adds	r7, #28
 800ab02:	46bd      	mov	sp, r7
 800ab04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab08:	4770      	bx	lr
 800ab0a:	bf00      	nop
 800ab0c:	3fcfffff 	.word	0x3fcfffff
 800ab10:	4000a800 	.word	0x4000a800

0800ab14 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b092      	sub	sp, #72	; 0x48
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 800ab1c:	4b90      	ldr	r3, [pc, #576]	; (800ad60 <HAL_FDCAN_IRQHandler+0x24c>)
 800ab1e:	691b      	ldr	r3, [r3, #16]
 800ab20:	079b      	lsls	r3, r3, #30
 800ab22:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 800ab24:	4b8e      	ldr	r3, [pc, #568]	; (800ad60 <HAL_FDCAN_IRQHandler+0x24c>)
 800ab26:	695b      	ldr	r3, [r3, #20]
 800ab28:	079b      	lsls	r3, r3, #30
 800ab2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab2c:	4013      	ands	r3, r2
 800ab2e:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab36:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800ab3a:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ab44:	4013      	ands	r3, r2
 800ab46:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab4e:	f003 030f 	and.w	r3, r3, #15
 800ab52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab5a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ab5c:	4013      	ands	r3, r2
 800ab5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ab6a:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ab74:	4013      	ands	r3, r2
 800ab76:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab7e:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 800ab82:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab8c:	4013      	ands	r3, r2
 800ab8e:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab96:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 800ab9a:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aba2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aba4:	4013      	ands	r3, r2
 800aba6:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d011      	beq.n	800abda <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d00a      	beq.n	800abda <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800abcc:	651a      	str	r2, [r3, #80]	; 0x50
 800abce:	4b64      	ldr	r3, [pc, #400]	; (800ad60 <HAL_FDCAN_IRQHandler+0x24c>)
 800abd0:	2200      	movs	r2, #0
 800abd2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f000 fa5a 	bl	800b08e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d01e      	beq.n	800ac26 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d017      	beq.n	800ac26 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800abfe:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ac08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac0a:	4013      	ands	r3, r2
 800ac0c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ac16:	651a      	str	r2, [r3, #80]	; 0x50
 800ac18:	4b51      	ldr	r3, [pc, #324]	; (800ad60 <HAL_FDCAN_IRQHandler+0x24c>)
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800ac1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	f000 fa0b 	bl	800b03c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 800ac26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d00d      	beq.n	800ac48 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681a      	ldr	r2, [r3, #0]
 800ac30:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ac32:	4b4c      	ldr	r3, [pc, #304]	; (800ad64 <HAL_FDCAN_IRQHandler+0x250>)
 800ac34:	400b      	ands	r3, r1
 800ac36:	6513      	str	r3, [r2, #80]	; 0x50
 800ac38:	4a49      	ldr	r2, [pc, #292]	; (800ad60 <HAL_FDCAN_IRQHandler+0x24c>)
 800ac3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac3c:	0f9b      	lsrs	r3, r3, #30
 800ac3e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 800ac40:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f000 f9c4 	bl	800afd0 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800ac48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d00d      	beq.n	800ac6a <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681a      	ldr	r2, [r3, #0]
 800ac52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ac54:	4b43      	ldr	r3, [pc, #268]	; (800ad64 <HAL_FDCAN_IRQHandler+0x250>)
 800ac56:	400b      	ands	r3, r1
 800ac58:	6513      	str	r3, [r2, #80]	; 0x50
 800ac5a:	4a41      	ldr	r2, [pc, #260]	; (800ad60 <HAL_FDCAN_IRQHandler+0x24c>)
 800ac5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac5e:	0f9b      	lsrs	r3, r3, #30
 800ac60:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800ac62:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	f000 f9be 	bl	800afe6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800ac6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d00d      	beq.n	800ac8c <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681a      	ldr	r2, [r3, #0]
 800ac74:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ac76:	4b3b      	ldr	r3, [pc, #236]	; (800ad64 <HAL_FDCAN_IRQHandler+0x250>)
 800ac78:	400b      	ands	r3, r1
 800ac7a:	6513      	str	r3, [r2, #80]	; 0x50
 800ac7c:	4a38      	ldr	r2, [pc, #224]	; (800ad60 <HAL_FDCAN_IRQHandler+0x24c>)
 800ac7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac80:	0f9b      	lsrs	r3, r3, #30
 800ac82:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800ac84:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	f7fb fc42 	bl	8006510 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800ac8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d00d      	beq.n	800acae <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681a      	ldr	r2, [r3, #0]
 800ac96:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ac98:	4b32      	ldr	r3, [pc, #200]	; (800ad64 <HAL_FDCAN_IRQHandler+0x250>)
 800ac9a:	400b      	ands	r3, r1
 800ac9c:	6513      	str	r3, [r2, #80]	; 0x50
 800ac9e:	4a30      	ldr	r2, [pc, #192]	; (800ad60 <HAL_FDCAN_IRQHandler+0x24c>)
 800aca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aca2:	0f9b      	lsrs	r3, r3, #30
 800aca4:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800aca6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f000 f9a7 	bl	800affc <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d011      	beq.n	800ace0 <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d00a      	beq.n	800ace0 <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800acd2:	651a      	str	r2, [r3, #80]	; 0x50
 800acd4:	4b22      	ldr	r3, [pc, #136]	; (800ad60 <HAL_FDCAN_IRQHandler+0x24c>)
 800acd6:	2200      	movs	r2, #0
 800acd8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f000 f999 	bl	800b012 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ace6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800acea:	2b00      	cmp	r3, #0
 800acec:	d01e      	beq.n	800ad2c <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acf4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d017      	beq.n	800ad2c <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800ad04:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ad0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad10:	4013      	ands	r3, r2
 800ad12:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ad1c:	651a      	str	r2, [r3, #80]	; 0x50
 800ad1e:	4b10      	ldr	r3, [pc, #64]	; (800ad60 <HAL_FDCAN_IRQHandler+0x24c>)
 800ad20:	2200      	movs	r2, #0
 800ad22:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800ad24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f000 f97d 	bl	800b026 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d016      	beq.n	800ad68 <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d00f      	beq.n	800ad68 <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800ad50:	651a      	str	r2, [r3, #80]	; 0x50
 800ad52:	4b03      	ldr	r3, [pc, #12]	; (800ad60 <HAL_FDCAN_IRQHandler+0x24c>)
 800ad54:	2200      	movs	r2, #0
 800ad56:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	f000 f97a 	bl	800b052 <HAL_FDCAN_RxBufferNewMessageCallback>
 800ad5e:	e003      	b.n	800ad68 <HAL_FDCAN_IRQHandler+0x254>
 800ad60:	4000a800 	.word	0x4000a800
 800ad64:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d011      	beq.n	800ad9a <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d00a      	beq.n	800ad9a <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800ad8c:	651a      	str	r2, [r3, #80]	; 0x50
 800ad8e:	4b8d      	ldr	r3, [pc, #564]	; (800afc4 <HAL_FDCAN_IRQHandler+0x4b0>)
 800ad90:	2200      	movs	r2, #0
 800ad92:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	f000 f966 	bl	800b066 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ada0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d011      	beq.n	800adcc <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d00a      	beq.n	800adcc <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800adbe:	651a      	str	r2, [r3, #80]	; 0x50
 800adc0:	4b80      	ldr	r3, [pc, #512]	; (800afc4 <HAL_FDCAN_IRQHandler+0x4b0>)
 800adc2:	2200      	movs	r2, #0
 800adc4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f000 f957 	bl	800b07a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800add2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800add6:	2b00      	cmp	r3, #0
 800add8:	d016      	beq.n	800ae08 <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ade0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d00f      	beq.n	800ae08 <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800adf0:	651a      	str	r2, [r3, #80]	; 0x50
 800adf2:	4b74      	ldr	r3, [pc, #464]	; (800afc4 <HAL_FDCAN_IRQHandler+0x4b0>)
 800adf4:	2200      	movs	r2, #0
 800adf6:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800adfe:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800ae08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d00d      	beq.n	800ae2a <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681a      	ldr	r2, [r3, #0]
 800ae12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ae14:	4b6c      	ldr	r3, [pc, #432]	; (800afc8 <HAL_FDCAN_IRQHandler+0x4b4>)
 800ae16:	400b      	ands	r3, r1
 800ae18:	6513      	str	r3, [r2, #80]	; 0x50
 800ae1a:	4a6a      	ldr	r2, [pc, #424]	; (800afc4 <HAL_FDCAN_IRQHandler+0x4b0>)
 800ae1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae1e:	0f9b      	lsrs	r3, r3, #30
 800ae20:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800ae22:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ae24:	6878      	ldr	r0, [r7, #4]
 800ae26:	f000 f946 	bl	800b0b6 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800ae2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d011      	beq.n	800ae54 <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681a      	ldr	r2, [r3, #0]
 800ae34:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ae36:	4b64      	ldr	r3, [pc, #400]	; (800afc8 <HAL_FDCAN_IRQHandler+0x4b4>)
 800ae38:	400b      	ands	r3, r1
 800ae3a:	6513      	str	r3, [r2, #80]	; 0x50
 800ae3c:	4a61      	ldr	r2, [pc, #388]	; (800afc4 <HAL_FDCAN_IRQHandler+0x4b0>)
 800ae3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae40:	0f9b      	lsrs	r3, r3, #30
 800ae42:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800ae4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae4c:	431a      	orrs	r2, r3
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	4a5c      	ldr	r2, [pc, #368]	; (800afcc <HAL_FDCAN_IRQHandler+0x4b8>)
 800ae5a:	4293      	cmp	r3, r2
 800ae5c:	f040 80a6 	bne.w	800afac <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	685b      	ldr	r3, [r3, #4]
 800ae64:	689b      	ldr	r3, [r3, #8]
 800ae66:	f003 0303 	and.w	r3, r3, #3
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	f000 809e 	beq.w	800afac <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	685b      	ldr	r3, [r3, #4]
 800ae74:	6a1b      	ldr	r3, [r3, #32]
 800ae76:	f003 030f 	and.w	r3, r3, #15
 800ae7a:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	685b      	ldr	r3, [r3, #4]
 800ae80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae84:	4013      	ands	r3, r2
 800ae86:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	685b      	ldr	r3, [r3, #4]
 800ae8c:	6a1b      	ldr	r3, [r3, #32]
 800ae8e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ae92:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	685b      	ldr	r3, [r3, #4]
 800ae98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae9a:	6a3a      	ldr	r2, [r7, #32]
 800ae9c:	4013      	ands	r3, r2
 800ae9e:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	685b      	ldr	r3, [r3, #4]
 800aea4:	6a1b      	ldr	r3, [r3, #32]
 800aea6:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800aeaa:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	685b      	ldr	r3, [r3, #4]
 800aeb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeb2:	69fa      	ldr	r2, [r7, #28]
 800aeb4:	4013      	ands	r3, r2
 800aeb6:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	685b      	ldr	r3, [r3, #4]
 800aebc:	6a1b      	ldr	r3, [r3, #32]
 800aebe:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 800aec2:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	685b      	ldr	r3, [r3, #4]
 800aec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeca:	69ba      	ldr	r2, [r7, #24]
 800aecc:	4013      	ands	r3, r2
 800aece:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	685b      	ldr	r3, [r3, #4]
 800aed4:	6a1b      	ldr	r3, [r3, #32]
 800aed6:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 800aeda:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	685b      	ldr	r3, [r3, #4]
 800aee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aee2:	697a      	ldr	r2, [r7, #20]
 800aee4:	4013      	ands	r3, r2
 800aee6:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 800aee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d007      	beq.n	800aefe <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	685b      	ldr	r3, [r3, #4]
 800aef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aef4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 800aef6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	f000 f8e7 	bl	800b0cc <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 800aefe:	6a3b      	ldr	r3, [r7, #32]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d007      	beq.n	800af14 <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	685b      	ldr	r3, [r3, #4]
 800af08:	6a3a      	ldr	r2, [r7, #32]
 800af0a:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 800af0c:	6a39      	ldr	r1, [r7, #32]
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	f000 f8e7 	bl	800b0e2 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	685b      	ldr	r3, [r3, #4]
 800af18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d01b      	beq.n	800af5a <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	685b      	ldr	r3, [r3, #4]
 800af26:	6a1b      	ldr	r3, [r3, #32]
 800af28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d014      	beq.n	800af5a <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	685b      	ldr	r3, [r3, #4]
 800af34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af36:	0c1b      	lsrs	r3, r3, #16
 800af38:	b29b      	uxth	r3, r3
 800af3a:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	685b      	ldr	r3, [r3, #4]
 800af40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800af46:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	685b      	ldr	r3, [r3, #4]
 800af4c:	2240      	movs	r2, #64	; 0x40
 800af4e:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 800af50:	68fa      	ldr	r2, [r7, #12]
 800af52:	6939      	ldr	r1, [r7, #16]
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	f000 f8cf 	bl	800b0f8 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 800af5a:	69fb      	ldr	r3, [r7, #28]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d007      	beq.n	800af70 <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	685b      	ldr	r3, [r3, #4]
 800af64:	69fa      	ldr	r2, [r7, #28]
 800af66:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 800af68:	69f9      	ldr	r1, [r7, #28]
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	f000 f8d0 	bl	800b110 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 800af70:	69bb      	ldr	r3, [r7, #24]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d00b      	beq.n	800af8e <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	685b      	ldr	r3, [r3, #4]
 800af7a:	69ba      	ldr	r2, [r7, #24]
 800af7c:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800af84:	69bb      	ldr	r3, [r7, #24]
 800af86:	431a      	orrs	r2, r3
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 800af8e:	697b      	ldr	r3, [r7, #20]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d00b      	beq.n	800afac <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	685b      	ldr	r3, [r3, #4]
 800af98:	697a      	ldr	r2, [r7, #20]
 800af9a:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800afa2:	697b      	ldr	r3, [r7, #20]
 800afa4:	431a      	orrs	r2, r3
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d002      	beq.n	800afbc <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	f000 f873 	bl	800b0a2 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800afbc:	bf00      	nop
 800afbe:	3748      	adds	r7, #72	; 0x48
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd80      	pop	{r7, pc}
 800afc4:	4000a800 	.word	0x4000a800
 800afc8:	3fcfffff 	.word	0x3fcfffff
 800afcc:	4000a000 	.word	0x4000a000

0800afd0 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 800afd0:	b480      	push	{r7}
 800afd2:	b083      	sub	sp, #12
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
 800afd8:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 800afda:	bf00      	nop
 800afdc:	370c      	adds	r7, #12
 800afde:	46bd      	mov	sp, r7
 800afe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe4:	4770      	bx	lr

0800afe6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800afe6:	b480      	push	{r7}
 800afe8:	b083      	sub	sp, #12
 800afea:	af00      	add	r7, sp, #0
 800afec:	6078      	str	r0, [r7, #4]
 800afee:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800aff0:	bf00      	nop
 800aff2:	370c      	adds	r7, #12
 800aff4:	46bd      	mov	sp, r7
 800aff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affa:	4770      	bx	lr

0800affc <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800affc:	b480      	push	{r7}
 800affe:	b083      	sub	sp, #12
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
 800b004:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800b006:	bf00      	nop
 800b008:	370c      	adds	r7, #12
 800b00a:	46bd      	mov	sp, r7
 800b00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b010:	4770      	bx	lr

0800b012 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800b012:	b480      	push	{r7}
 800b014:	b083      	sub	sp, #12
 800b016:	af00      	add	r7, sp, #0
 800b018:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800b01a:	bf00      	nop
 800b01c:	370c      	adds	r7, #12
 800b01e:	46bd      	mov	sp, r7
 800b020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b024:	4770      	bx	lr

0800b026 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800b026:	b480      	push	{r7}
 800b028:	b083      	sub	sp, #12
 800b02a:	af00      	add	r7, sp, #0
 800b02c:	6078      	str	r0, [r7, #4]
 800b02e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800b030:	bf00      	nop
 800b032:	370c      	adds	r7, #12
 800b034:	46bd      	mov	sp, r7
 800b036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03a:	4770      	bx	lr

0800b03c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800b03c:	b480      	push	{r7}
 800b03e:	b083      	sub	sp, #12
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
 800b044:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800b046:	bf00      	nop
 800b048:	370c      	adds	r7, #12
 800b04a:	46bd      	mov	sp, r7
 800b04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b050:	4770      	bx	lr

0800b052 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800b052:	b480      	push	{r7}
 800b054:	b083      	sub	sp, #12
 800b056:	af00      	add	r7, sp, #0
 800b058:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 800b05a:	bf00      	nop
 800b05c:	370c      	adds	r7, #12
 800b05e:	46bd      	mov	sp, r7
 800b060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b064:	4770      	bx	lr

0800b066 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800b066:	b480      	push	{r7}
 800b068:	b083      	sub	sp, #12
 800b06a:	af00      	add	r7, sp, #0
 800b06c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800b06e:	bf00      	nop
 800b070:	370c      	adds	r7, #12
 800b072:	46bd      	mov	sp, r7
 800b074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b078:	4770      	bx	lr

0800b07a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800b07a:	b480      	push	{r7}
 800b07c:	b083      	sub	sp, #12
 800b07e:	af00      	add	r7, sp, #0
 800b080:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800b082:	bf00      	nop
 800b084:	370c      	adds	r7, #12
 800b086:	46bd      	mov	sp, r7
 800b088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08c:	4770      	bx	lr

0800b08e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800b08e:	b480      	push	{r7}
 800b090:	b083      	sub	sp, #12
 800b092:	af00      	add	r7, sp, #0
 800b094:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800b096:	bf00      	nop
 800b098:	370c      	adds	r7, #12
 800b09a:	46bd      	mov	sp, r7
 800b09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a0:	4770      	bx	lr

0800b0a2 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800b0a2:	b480      	push	{r7}
 800b0a4:	b083      	sub	sp, #12
 800b0a6:	af00      	add	r7, sp, #0
 800b0a8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800b0aa:	bf00      	nop
 800b0ac:	370c      	adds	r7, #12
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b4:	4770      	bx	lr

0800b0b6 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800b0b6:	b480      	push	{r7}
 800b0b8:	b083      	sub	sp, #12
 800b0ba:	af00      	add	r7, sp, #0
 800b0bc:	6078      	str	r0, [r7, #4]
 800b0be:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800b0c0:	bf00      	nop
 800b0c2:	370c      	adds	r7, #12
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ca:	4770      	bx	lr

0800b0cc <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 800b0cc:	b480      	push	{r7}
 800b0ce:	b083      	sub	sp, #12
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
 800b0d4:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 800b0d6:	bf00      	nop
 800b0d8:	370c      	adds	r7, #12
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e0:	4770      	bx	lr

0800b0e2 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 800b0e2:	b480      	push	{r7}
 800b0e4:	b083      	sub	sp, #12
 800b0e6:	af00      	add	r7, sp, #0
 800b0e8:	6078      	str	r0, [r7, #4]
 800b0ea:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 800b0ec:	bf00      	nop
 800b0ee:	370c      	adds	r7, #12
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f6:	4770      	bx	lr

0800b0f8 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	b085      	sub	sp, #20
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	60f8      	str	r0, [r7, #12]
 800b100:	60b9      	str	r1, [r7, #8]
 800b102:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 800b104:	bf00      	nop
 800b106:	3714      	adds	r7, #20
 800b108:	46bd      	mov	sp, r7
 800b10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10e:	4770      	bx	lr

0800b110 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 800b110:	b480      	push	{r7}
 800b112:	b083      	sub	sp, #12
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
 800b118:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 800b11a:	bf00      	nop
 800b11c:	370c      	adds	r7, #12
 800b11e:	46bd      	mov	sp, r7
 800b120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b124:	4770      	bx	lr
	...

0800b128 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800b128:	b480      	push	{r7}
 800b12a:	b085      	sub	sp, #20
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b134:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800b13e:	4ba7      	ldr	r3, [pc, #668]	; (800b3dc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800b140:	4013      	ands	r3, r2
 800b142:	68ba      	ldr	r2, [r7, #8]
 800b144:	0091      	lsls	r1, r2, #2
 800b146:	687a      	ldr	r2, [r7, #4]
 800b148:	6812      	ldr	r2, [r2, #0]
 800b14a:	430b      	orrs	r3, r1
 800b14c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b158:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b160:	041a      	lsls	r2, r3, #16
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	430a      	orrs	r2, r1
 800b168:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b170:	68ba      	ldr	r2, [r7, #8]
 800b172:	4413      	add	r3, r2
 800b174:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b17e:	4b97      	ldr	r3, [pc, #604]	; (800b3dc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800b180:	4013      	ands	r3, r2
 800b182:	68ba      	ldr	r2, [r7, #8]
 800b184:	0091      	lsls	r1, r2, #2
 800b186:	687a      	ldr	r2, [r7, #4]
 800b188:	6812      	ldr	r2, [r2, #0]
 800b18a:	430b      	orrs	r3, r1
 800b18c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b198:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1a0:	041a      	lsls	r2, r3, #16
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	430a      	orrs	r2, r1
 800b1a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1b0:	005b      	lsls	r3, r3, #1
 800b1b2:	68ba      	ldr	r2, [r7, #8]
 800b1b4:	4413      	add	r3, r2
 800b1b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800b1c0:	4b86      	ldr	r3, [pc, #536]	; (800b3dc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800b1c2:	4013      	ands	r3, r2
 800b1c4:	68ba      	ldr	r2, [r7, #8]
 800b1c6:	0091      	lsls	r1, r2, #2
 800b1c8:	687a      	ldr	r2, [r7, #4]
 800b1ca:	6812      	ldr	r2, [r2, #0]
 800b1cc:	430b      	orrs	r3, r1
 800b1ce:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b1da:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1e2:	041a      	lsls	r2, r3, #16
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	430a      	orrs	r2, r1
 800b1ea:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1f2:	687a      	ldr	r2, [r7, #4]
 800b1f4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800b1f6:	fb02 f303 	mul.w	r3, r2, r3
 800b1fa:	68ba      	ldr	r2, [r7, #8]
 800b1fc:	4413      	add	r3, r2
 800b1fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800b208:	4b74      	ldr	r3, [pc, #464]	; (800b3dc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800b20a:	4013      	ands	r3, r2
 800b20c:	68ba      	ldr	r2, [r7, #8]
 800b20e:	0091      	lsls	r1, r2, #2
 800b210:	687a      	ldr	r2, [r7, #4]
 800b212:	6812      	ldr	r2, [r2, #0]
 800b214:	430b      	orrs	r3, r1
 800b216:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b222:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b22a:	041a      	lsls	r2, r3, #16
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	430a      	orrs	r2, r1
 800b232:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b23a:	687a      	ldr	r2, [r7, #4]
 800b23c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800b23e:	fb02 f303 	mul.w	r3, r2, r3
 800b242:	68ba      	ldr	r2, [r7, #8]
 800b244:	4413      	add	r3, r2
 800b246:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800b250:	4b62      	ldr	r3, [pc, #392]	; (800b3dc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800b252:	4013      	ands	r3, r2
 800b254:	68ba      	ldr	r2, [r7, #8]
 800b256:	0091      	lsls	r1, r2, #2
 800b258:	687a      	ldr	r2, [r7, #4]
 800b25a:	6812      	ldr	r2, [r2, #0]
 800b25c:	430b      	orrs	r3, r1
 800b25e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b266:	687a      	ldr	r2, [r7, #4]
 800b268:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800b26a:	fb02 f303 	mul.w	r3, r2, r3
 800b26e:	68ba      	ldr	r2, [r7, #8]
 800b270:	4413      	add	r3, r2
 800b272:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800b27c:	4b57      	ldr	r3, [pc, #348]	; (800b3dc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800b27e:	4013      	ands	r3, r2
 800b280:	68ba      	ldr	r2, [r7, #8]
 800b282:	0091      	lsls	r1, r2, #2
 800b284:	687a      	ldr	r2, [r7, #4]
 800b286:	6812      	ldr	r2, [r2, #0]
 800b288:	430b      	orrs	r3, r1
 800b28a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b296:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b29e:	041a      	lsls	r2, r3, #16
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	430a      	orrs	r2, r1
 800b2a6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2ae:	005b      	lsls	r3, r3, #1
 800b2b0:	68ba      	ldr	r2, [r7, #8]
 800b2b2:	4413      	add	r3, r2
 800b2b4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800b2be:	4b47      	ldr	r3, [pc, #284]	; (800b3dc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800b2c0:	4013      	ands	r3, r2
 800b2c2:	68ba      	ldr	r2, [r7, #8]
 800b2c4:	0091      	lsls	r1, r2, #2
 800b2c6:	687a      	ldr	r2, [r7, #4]
 800b2c8:	6812      	ldr	r2, [r2, #0]
 800b2ca:	430b      	orrs	r3, r1
 800b2cc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800b2d8:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b2e0:	041a      	lsls	r2, r3, #16
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	430a      	orrs	r2, r1
 800b2e8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800b2f4:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b2fc:	061a      	lsls	r2, r3, #24
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	430a      	orrs	r2, r1
 800b304:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b30c:	4b34      	ldr	r3, [pc, #208]	; (800b3e0 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800b30e:	4413      	add	r3, r2
 800b310:	009a      	lsls	r2, r3, #2
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b31e:	009b      	lsls	r3, r3, #2
 800b320:	441a      	add	r2, r3
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b32e:	00db      	lsls	r3, r3, #3
 800b330:	441a      	add	r2, r3
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b33e:	6879      	ldr	r1, [r7, #4]
 800b340:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800b342:	fb01 f303 	mul.w	r3, r1, r3
 800b346:	009b      	lsls	r3, r3, #2
 800b348:	441a      	add	r2, r3
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b356:	6879      	ldr	r1, [r7, #4]
 800b358:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800b35a:	fb01 f303 	mul.w	r3, r1, r3
 800b35e:	009b      	lsls	r3, r3, #2
 800b360:	441a      	add	r2, r3
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b36e:	6879      	ldr	r1, [r7, #4]
 800b370:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800b372:	fb01 f303 	mul.w	r3, r1, r3
 800b376:	009b      	lsls	r3, r3, #2
 800b378:	441a      	add	r2, r3
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b38a:	00db      	lsls	r3, r3, #3
 800b38c:	441a      	add	r2, r3
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b39e:	6879      	ldr	r1, [r7, #4]
 800b3a0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800b3a2:	fb01 f303 	mul.w	r3, r1, r3
 800b3a6:	009b      	lsls	r3, r3, #2
 800b3a8:	441a      	add	r2, r3
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b3ba:	6879      	ldr	r1, [r7, #4]
 800b3bc:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800b3be:	fb01 f303 	mul.w	r3, r1, r3
 800b3c2:	009b      	lsls	r3, r3, #2
 800b3c4:	441a      	add	r2, r3
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3d2:	4a04      	ldr	r2, [pc, #16]	; (800b3e4 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 800b3d4:	4293      	cmp	r3, r2
 800b3d6:	d915      	bls.n	800b404 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 800b3d8:	e006      	b.n	800b3e8 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800b3da:	bf00      	nop
 800b3dc:	ffff0003 	.word	0xffff0003
 800b3e0:	10002b00 	.word	0x10002b00
 800b3e4:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b3ee:	f043 0220 	orr.w	r2, r3, #32
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2203      	movs	r2, #3
 800b3fc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 800b400:	2301      	movs	r3, #1
 800b402:	e010      	b.n	800b426 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b408:	60fb      	str	r3, [r7, #12]
 800b40a:	e005      	b.n	800b418 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	2200      	movs	r2, #0
 800b410:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	3304      	adds	r3, #4
 800b416:	60fb      	str	r3, [r7, #12]
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b41e:	68fa      	ldr	r2, [r7, #12]
 800b420:	429a      	cmp	r2, r3
 800b422:	d3f3      	bcc.n	800b40c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 800b424:	2300      	movs	r3, #0
}
 800b426:	4618      	mov	r0, r3
 800b428:	3714      	adds	r7, #20
 800b42a:	46bd      	mov	sp, r7
 800b42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b430:	4770      	bx	lr
 800b432:	bf00      	nop

0800b434 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 800b434:	b480      	push	{r7}
 800b436:	b089      	sub	sp, #36	; 0x24
 800b438:	af00      	add	r7, sp, #0
 800b43a:	60f8      	str	r0, [r7, #12]
 800b43c:	60b9      	str	r1, [r7, #8]
 800b43e:	607a      	str	r2, [r7, #4]
 800b440:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	685b      	ldr	r3, [r3, #4]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d10a      	bne.n	800b460 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800b44a:	68bb      	ldr	r3, [r7, #8]
 800b44c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800b452:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800b45a:	4313      	orrs	r3, r2
 800b45c:	61fb      	str	r3, [r7, #28]
 800b45e:	e00a      	b.n	800b476 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 800b464:	68bb      	ldr	r3, [r7, #8]
 800b466:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800b468:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800b46a:	68bb      	ldr	r3, [r7, #8]
 800b46c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800b46e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800b470:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b474:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800b476:	68bb      	ldr	r3, [r7, #8]
 800b478:	6a1b      	ldr	r3, [r3, #32]
 800b47a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800b47c:	68bb      	ldr	r3, [r7, #8]
 800b47e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800b480:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800b486:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800b48c:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 800b48e:	68bb      	ldr	r3, [r7, #8]
 800b490:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800b492:	4313      	orrs	r3, r2
 800b494:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b4a0:	6839      	ldr	r1, [r7, #0]
 800b4a2:	fb01 f303 	mul.w	r3, r1, r3
 800b4a6:	009b      	lsls	r3, r3, #2
 800b4a8:	4413      	add	r3, r2
 800b4aa:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800b4ac:	69bb      	ldr	r3, [r7, #24]
 800b4ae:	69fa      	ldr	r2, [r7, #28]
 800b4b0:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800b4b2:	69bb      	ldr	r3, [r7, #24]
 800b4b4:	3304      	adds	r3, #4
 800b4b6:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800b4b8:	69bb      	ldr	r3, [r7, #24]
 800b4ba:	693a      	ldr	r2, [r7, #16]
 800b4bc:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800b4be:	69bb      	ldr	r3, [r7, #24]
 800b4c0:	3304      	adds	r3, #4
 800b4c2:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	617b      	str	r3, [r7, #20]
 800b4c8:	e020      	b.n	800b50c <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 800b4ca:	697b      	ldr	r3, [r7, #20]
 800b4cc:	3303      	adds	r3, #3
 800b4ce:	687a      	ldr	r2, [r7, #4]
 800b4d0:	4413      	add	r3, r2
 800b4d2:	781b      	ldrb	r3, [r3, #0]
 800b4d4:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 800b4d6:	697b      	ldr	r3, [r7, #20]
 800b4d8:	3302      	adds	r3, #2
 800b4da:	6879      	ldr	r1, [r7, #4]
 800b4dc:	440b      	add	r3, r1
 800b4de:	781b      	ldrb	r3, [r3, #0]
 800b4e0:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 800b4e2:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 800b4e4:	697b      	ldr	r3, [r7, #20]
 800b4e6:	3301      	adds	r3, #1
 800b4e8:	6879      	ldr	r1, [r7, #4]
 800b4ea:	440b      	add	r3, r1
 800b4ec:	781b      	ldrb	r3, [r3, #0]
 800b4ee:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 800b4f0:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800b4f2:	6879      	ldr	r1, [r7, #4]
 800b4f4:	697a      	ldr	r2, [r7, #20]
 800b4f6:	440a      	add	r2, r1
 800b4f8:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 800b4fa:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 800b4fc:	69bb      	ldr	r3, [r7, #24]
 800b4fe:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800b500:	69bb      	ldr	r3, [r7, #24]
 800b502:	3304      	adds	r3, #4
 800b504:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 800b506:	697b      	ldr	r3, [r7, #20]
 800b508:	3304      	adds	r3, #4
 800b50a:	617b      	str	r3, [r7, #20]
 800b50c:	68bb      	ldr	r3, [r7, #8]
 800b50e:	68db      	ldr	r3, [r3, #12]
 800b510:	0c1b      	lsrs	r3, r3, #16
 800b512:	4a06      	ldr	r2, [pc, #24]	; (800b52c <FDCAN_CopyMessageToRAM+0xf8>)
 800b514:	5cd3      	ldrb	r3, [r2, r3]
 800b516:	461a      	mov	r2, r3
 800b518:	697b      	ldr	r3, [r7, #20]
 800b51a:	4293      	cmp	r3, r2
 800b51c:	d3d5      	bcc.n	800b4ca <FDCAN_CopyMessageToRAM+0x96>
  }
}
 800b51e:	bf00      	nop
 800b520:	bf00      	nop
 800b522:	3724      	adds	r7, #36	; 0x24
 800b524:	46bd      	mov	sp, r7
 800b526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52a:	4770      	bx	lr
 800b52c:	080145ec 	.word	0x080145ec

0800b530 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b530:	b480      	push	{r7}
 800b532:	b089      	sub	sp, #36	; 0x24
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
 800b538:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b53a:	2300      	movs	r3, #0
 800b53c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800b53e:	4b89      	ldr	r3, [pc, #548]	; (800b764 <HAL_GPIO_Init+0x234>)
 800b540:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b542:	e194      	b.n	800b86e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	681a      	ldr	r2, [r3, #0]
 800b548:	2101      	movs	r1, #1
 800b54a:	69fb      	ldr	r3, [r7, #28]
 800b54c:	fa01 f303 	lsl.w	r3, r1, r3
 800b550:	4013      	ands	r3, r2
 800b552:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800b554:	693b      	ldr	r3, [r7, #16]
 800b556:	2b00      	cmp	r3, #0
 800b558:	f000 8186 	beq.w	800b868 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	685b      	ldr	r3, [r3, #4]
 800b560:	f003 0303 	and.w	r3, r3, #3
 800b564:	2b01      	cmp	r3, #1
 800b566:	d005      	beq.n	800b574 <HAL_GPIO_Init+0x44>
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	685b      	ldr	r3, [r3, #4]
 800b56c:	f003 0303 	and.w	r3, r3, #3
 800b570:	2b02      	cmp	r3, #2
 800b572:	d130      	bne.n	800b5d6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	689b      	ldr	r3, [r3, #8]
 800b578:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b57a:	69fb      	ldr	r3, [r7, #28]
 800b57c:	005b      	lsls	r3, r3, #1
 800b57e:	2203      	movs	r2, #3
 800b580:	fa02 f303 	lsl.w	r3, r2, r3
 800b584:	43db      	mvns	r3, r3
 800b586:	69ba      	ldr	r2, [r7, #24]
 800b588:	4013      	ands	r3, r2
 800b58a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	68da      	ldr	r2, [r3, #12]
 800b590:	69fb      	ldr	r3, [r7, #28]
 800b592:	005b      	lsls	r3, r3, #1
 800b594:	fa02 f303 	lsl.w	r3, r2, r3
 800b598:	69ba      	ldr	r2, [r7, #24]
 800b59a:	4313      	orrs	r3, r2
 800b59c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	69ba      	ldr	r2, [r7, #24]
 800b5a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	685b      	ldr	r3, [r3, #4]
 800b5a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b5aa:	2201      	movs	r2, #1
 800b5ac:	69fb      	ldr	r3, [r7, #28]
 800b5ae:	fa02 f303 	lsl.w	r3, r2, r3
 800b5b2:	43db      	mvns	r3, r3
 800b5b4:	69ba      	ldr	r2, [r7, #24]
 800b5b6:	4013      	ands	r3, r2
 800b5b8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	685b      	ldr	r3, [r3, #4]
 800b5be:	091b      	lsrs	r3, r3, #4
 800b5c0:	f003 0201 	and.w	r2, r3, #1
 800b5c4:	69fb      	ldr	r3, [r7, #28]
 800b5c6:	fa02 f303 	lsl.w	r3, r2, r3
 800b5ca:	69ba      	ldr	r2, [r7, #24]
 800b5cc:	4313      	orrs	r3, r2
 800b5ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	69ba      	ldr	r2, [r7, #24]
 800b5d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b5d6:	683b      	ldr	r3, [r7, #0]
 800b5d8:	685b      	ldr	r3, [r3, #4]
 800b5da:	f003 0303 	and.w	r3, r3, #3
 800b5de:	2b03      	cmp	r3, #3
 800b5e0:	d017      	beq.n	800b612 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	68db      	ldr	r3, [r3, #12]
 800b5e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b5e8:	69fb      	ldr	r3, [r7, #28]
 800b5ea:	005b      	lsls	r3, r3, #1
 800b5ec:	2203      	movs	r2, #3
 800b5ee:	fa02 f303 	lsl.w	r3, r2, r3
 800b5f2:	43db      	mvns	r3, r3
 800b5f4:	69ba      	ldr	r2, [r7, #24]
 800b5f6:	4013      	ands	r3, r2
 800b5f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b5fa:	683b      	ldr	r3, [r7, #0]
 800b5fc:	689a      	ldr	r2, [r3, #8]
 800b5fe:	69fb      	ldr	r3, [r7, #28]
 800b600:	005b      	lsls	r3, r3, #1
 800b602:	fa02 f303 	lsl.w	r3, r2, r3
 800b606:	69ba      	ldr	r2, [r7, #24]
 800b608:	4313      	orrs	r3, r2
 800b60a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	69ba      	ldr	r2, [r7, #24]
 800b610:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	685b      	ldr	r3, [r3, #4]
 800b616:	f003 0303 	and.w	r3, r3, #3
 800b61a:	2b02      	cmp	r3, #2
 800b61c:	d123      	bne.n	800b666 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b61e:	69fb      	ldr	r3, [r7, #28]
 800b620:	08da      	lsrs	r2, r3, #3
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	3208      	adds	r2, #8
 800b626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b62a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b62c:	69fb      	ldr	r3, [r7, #28]
 800b62e:	f003 0307 	and.w	r3, r3, #7
 800b632:	009b      	lsls	r3, r3, #2
 800b634:	220f      	movs	r2, #15
 800b636:	fa02 f303 	lsl.w	r3, r2, r3
 800b63a:	43db      	mvns	r3, r3
 800b63c:	69ba      	ldr	r2, [r7, #24]
 800b63e:	4013      	ands	r3, r2
 800b640:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800b642:	683b      	ldr	r3, [r7, #0]
 800b644:	691a      	ldr	r2, [r3, #16]
 800b646:	69fb      	ldr	r3, [r7, #28]
 800b648:	f003 0307 	and.w	r3, r3, #7
 800b64c:	009b      	lsls	r3, r3, #2
 800b64e:	fa02 f303 	lsl.w	r3, r2, r3
 800b652:	69ba      	ldr	r2, [r7, #24]
 800b654:	4313      	orrs	r3, r2
 800b656:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b658:	69fb      	ldr	r3, [r7, #28]
 800b65a:	08da      	lsrs	r2, r3, #3
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	3208      	adds	r2, #8
 800b660:	69b9      	ldr	r1, [r7, #24]
 800b662:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b66c:	69fb      	ldr	r3, [r7, #28]
 800b66e:	005b      	lsls	r3, r3, #1
 800b670:	2203      	movs	r2, #3
 800b672:	fa02 f303 	lsl.w	r3, r2, r3
 800b676:	43db      	mvns	r3, r3
 800b678:	69ba      	ldr	r2, [r7, #24]
 800b67a:	4013      	ands	r3, r2
 800b67c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	685b      	ldr	r3, [r3, #4]
 800b682:	f003 0203 	and.w	r2, r3, #3
 800b686:	69fb      	ldr	r3, [r7, #28]
 800b688:	005b      	lsls	r3, r3, #1
 800b68a:	fa02 f303 	lsl.w	r3, r2, r3
 800b68e:	69ba      	ldr	r2, [r7, #24]
 800b690:	4313      	orrs	r3, r2
 800b692:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	69ba      	ldr	r2, [r7, #24]
 800b698:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	685b      	ldr	r3, [r3, #4]
 800b69e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	f000 80e0 	beq.w	800b868 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b6a8:	4b2f      	ldr	r3, [pc, #188]	; (800b768 <HAL_GPIO_Init+0x238>)
 800b6aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b6ae:	4a2e      	ldr	r2, [pc, #184]	; (800b768 <HAL_GPIO_Init+0x238>)
 800b6b0:	f043 0302 	orr.w	r3, r3, #2
 800b6b4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800b6b8:	4b2b      	ldr	r3, [pc, #172]	; (800b768 <HAL_GPIO_Init+0x238>)
 800b6ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b6be:	f003 0302 	and.w	r3, r3, #2
 800b6c2:	60fb      	str	r3, [r7, #12]
 800b6c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b6c6:	4a29      	ldr	r2, [pc, #164]	; (800b76c <HAL_GPIO_Init+0x23c>)
 800b6c8:	69fb      	ldr	r3, [r7, #28]
 800b6ca:	089b      	lsrs	r3, r3, #2
 800b6cc:	3302      	adds	r3, #2
 800b6ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b6d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b6d4:	69fb      	ldr	r3, [r7, #28]
 800b6d6:	f003 0303 	and.w	r3, r3, #3
 800b6da:	009b      	lsls	r3, r3, #2
 800b6dc:	220f      	movs	r2, #15
 800b6de:	fa02 f303 	lsl.w	r3, r2, r3
 800b6e2:	43db      	mvns	r3, r3
 800b6e4:	69ba      	ldr	r2, [r7, #24]
 800b6e6:	4013      	ands	r3, r2
 800b6e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	4a20      	ldr	r2, [pc, #128]	; (800b770 <HAL_GPIO_Init+0x240>)
 800b6ee:	4293      	cmp	r3, r2
 800b6f0:	d052      	beq.n	800b798 <HAL_GPIO_Init+0x268>
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	4a1f      	ldr	r2, [pc, #124]	; (800b774 <HAL_GPIO_Init+0x244>)
 800b6f6:	4293      	cmp	r3, r2
 800b6f8:	d031      	beq.n	800b75e <HAL_GPIO_Init+0x22e>
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	4a1e      	ldr	r2, [pc, #120]	; (800b778 <HAL_GPIO_Init+0x248>)
 800b6fe:	4293      	cmp	r3, r2
 800b700:	d02b      	beq.n	800b75a <HAL_GPIO_Init+0x22a>
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	4a1d      	ldr	r2, [pc, #116]	; (800b77c <HAL_GPIO_Init+0x24c>)
 800b706:	4293      	cmp	r3, r2
 800b708:	d025      	beq.n	800b756 <HAL_GPIO_Init+0x226>
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	4a1c      	ldr	r2, [pc, #112]	; (800b780 <HAL_GPIO_Init+0x250>)
 800b70e:	4293      	cmp	r3, r2
 800b710:	d01f      	beq.n	800b752 <HAL_GPIO_Init+0x222>
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	4a1b      	ldr	r2, [pc, #108]	; (800b784 <HAL_GPIO_Init+0x254>)
 800b716:	4293      	cmp	r3, r2
 800b718:	d019      	beq.n	800b74e <HAL_GPIO_Init+0x21e>
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	4a1a      	ldr	r2, [pc, #104]	; (800b788 <HAL_GPIO_Init+0x258>)
 800b71e:	4293      	cmp	r3, r2
 800b720:	d013      	beq.n	800b74a <HAL_GPIO_Init+0x21a>
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	4a19      	ldr	r2, [pc, #100]	; (800b78c <HAL_GPIO_Init+0x25c>)
 800b726:	4293      	cmp	r3, r2
 800b728:	d00d      	beq.n	800b746 <HAL_GPIO_Init+0x216>
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	4a18      	ldr	r2, [pc, #96]	; (800b790 <HAL_GPIO_Init+0x260>)
 800b72e:	4293      	cmp	r3, r2
 800b730:	d007      	beq.n	800b742 <HAL_GPIO_Init+0x212>
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	4a17      	ldr	r2, [pc, #92]	; (800b794 <HAL_GPIO_Init+0x264>)
 800b736:	4293      	cmp	r3, r2
 800b738:	d101      	bne.n	800b73e <HAL_GPIO_Init+0x20e>
 800b73a:	2309      	movs	r3, #9
 800b73c:	e02d      	b.n	800b79a <HAL_GPIO_Init+0x26a>
 800b73e:	230a      	movs	r3, #10
 800b740:	e02b      	b.n	800b79a <HAL_GPIO_Init+0x26a>
 800b742:	2308      	movs	r3, #8
 800b744:	e029      	b.n	800b79a <HAL_GPIO_Init+0x26a>
 800b746:	2307      	movs	r3, #7
 800b748:	e027      	b.n	800b79a <HAL_GPIO_Init+0x26a>
 800b74a:	2306      	movs	r3, #6
 800b74c:	e025      	b.n	800b79a <HAL_GPIO_Init+0x26a>
 800b74e:	2305      	movs	r3, #5
 800b750:	e023      	b.n	800b79a <HAL_GPIO_Init+0x26a>
 800b752:	2304      	movs	r3, #4
 800b754:	e021      	b.n	800b79a <HAL_GPIO_Init+0x26a>
 800b756:	2303      	movs	r3, #3
 800b758:	e01f      	b.n	800b79a <HAL_GPIO_Init+0x26a>
 800b75a:	2302      	movs	r3, #2
 800b75c:	e01d      	b.n	800b79a <HAL_GPIO_Init+0x26a>
 800b75e:	2301      	movs	r3, #1
 800b760:	e01b      	b.n	800b79a <HAL_GPIO_Init+0x26a>
 800b762:	bf00      	nop
 800b764:	58000080 	.word	0x58000080
 800b768:	58024400 	.word	0x58024400
 800b76c:	58000400 	.word	0x58000400
 800b770:	58020000 	.word	0x58020000
 800b774:	58020400 	.word	0x58020400
 800b778:	58020800 	.word	0x58020800
 800b77c:	58020c00 	.word	0x58020c00
 800b780:	58021000 	.word	0x58021000
 800b784:	58021400 	.word	0x58021400
 800b788:	58021800 	.word	0x58021800
 800b78c:	58021c00 	.word	0x58021c00
 800b790:	58022000 	.word	0x58022000
 800b794:	58022400 	.word	0x58022400
 800b798:	2300      	movs	r3, #0
 800b79a:	69fa      	ldr	r2, [r7, #28]
 800b79c:	f002 0203 	and.w	r2, r2, #3
 800b7a0:	0092      	lsls	r2, r2, #2
 800b7a2:	4093      	lsls	r3, r2
 800b7a4:	69ba      	ldr	r2, [r7, #24]
 800b7a6:	4313      	orrs	r3, r2
 800b7a8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b7aa:	4938      	ldr	r1, [pc, #224]	; (800b88c <HAL_GPIO_Init+0x35c>)
 800b7ac:	69fb      	ldr	r3, [r7, #28]
 800b7ae:	089b      	lsrs	r3, r3, #2
 800b7b0:	3302      	adds	r3, #2
 800b7b2:	69ba      	ldr	r2, [r7, #24]
 800b7b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b7b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b7c0:	693b      	ldr	r3, [r7, #16]
 800b7c2:	43db      	mvns	r3, r3
 800b7c4:	69ba      	ldr	r2, [r7, #24]
 800b7c6:	4013      	ands	r3, r2
 800b7c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	685b      	ldr	r3, [r3, #4]
 800b7ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d003      	beq.n	800b7de <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800b7d6:	69ba      	ldr	r2, [r7, #24]
 800b7d8:	693b      	ldr	r3, [r7, #16]
 800b7da:	4313      	orrs	r3, r2
 800b7dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800b7de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b7e2:	69bb      	ldr	r3, [r7, #24]
 800b7e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800b7e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b7ea:	685b      	ldr	r3, [r3, #4]
 800b7ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b7ee:	693b      	ldr	r3, [r7, #16]
 800b7f0:	43db      	mvns	r3, r3
 800b7f2:	69ba      	ldr	r2, [r7, #24]
 800b7f4:	4013      	ands	r3, r2
 800b7f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	685b      	ldr	r3, [r3, #4]
 800b7fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b800:	2b00      	cmp	r3, #0
 800b802:	d003      	beq.n	800b80c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800b804:	69ba      	ldr	r2, [r7, #24]
 800b806:	693b      	ldr	r3, [r7, #16]
 800b808:	4313      	orrs	r3, r2
 800b80a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800b80c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b810:	69bb      	ldr	r3, [r7, #24]
 800b812:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800b814:	697b      	ldr	r3, [r7, #20]
 800b816:	685b      	ldr	r3, [r3, #4]
 800b818:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b81a:	693b      	ldr	r3, [r7, #16]
 800b81c:	43db      	mvns	r3, r3
 800b81e:	69ba      	ldr	r2, [r7, #24]
 800b820:	4013      	ands	r3, r2
 800b822:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b824:	683b      	ldr	r3, [r7, #0]
 800b826:	685b      	ldr	r3, [r3, #4]
 800b828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d003      	beq.n	800b838 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800b830:	69ba      	ldr	r2, [r7, #24]
 800b832:	693b      	ldr	r3, [r7, #16]
 800b834:	4313      	orrs	r3, r2
 800b836:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800b838:	697b      	ldr	r3, [r7, #20]
 800b83a:	69ba      	ldr	r2, [r7, #24]
 800b83c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800b83e:	697b      	ldr	r3, [r7, #20]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b844:	693b      	ldr	r3, [r7, #16]
 800b846:	43db      	mvns	r3, r3
 800b848:	69ba      	ldr	r2, [r7, #24]
 800b84a:	4013      	ands	r3, r2
 800b84c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	685b      	ldr	r3, [r3, #4]
 800b852:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b856:	2b00      	cmp	r3, #0
 800b858:	d003      	beq.n	800b862 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800b85a:	69ba      	ldr	r2, [r7, #24]
 800b85c:	693b      	ldr	r3, [r7, #16]
 800b85e:	4313      	orrs	r3, r2
 800b860:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800b862:	697b      	ldr	r3, [r7, #20]
 800b864:	69ba      	ldr	r2, [r7, #24]
 800b866:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800b868:	69fb      	ldr	r3, [r7, #28]
 800b86a:	3301      	adds	r3, #1
 800b86c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	681a      	ldr	r2, [r3, #0]
 800b872:	69fb      	ldr	r3, [r7, #28]
 800b874:	fa22 f303 	lsr.w	r3, r2, r3
 800b878:	2b00      	cmp	r3, #0
 800b87a:	f47f ae63 	bne.w	800b544 <HAL_GPIO_Init+0x14>
  }
}
 800b87e:	bf00      	nop
 800b880:	bf00      	nop
 800b882:	3724      	adds	r7, #36	; 0x24
 800b884:	46bd      	mov	sp, r7
 800b886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88a:	4770      	bx	lr
 800b88c:	58000400 	.word	0x58000400

0800b890 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b890:	b480      	push	{r7}
 800b892:	b083      	sub	sp, #12
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
 800b898:	460b      	mov	r3, r1
 800b89a:	807b      	strh	r3, [r7, #2]
 800b89c:	4613      	mov	r3, r2
 800b89e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b8a0:	787b      	ldrb	r3, [r7, #1]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d003      	beq.n	800b8ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b8a6:	887a      	ldrh	r2, [r7, #2]
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800b8ac:	e003      	b.n	800b8b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800b8ae:	887b      	ldrh	r3, [r7, #2]
 800b8b0:	041a      	lsls	r2, r3, #16
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	619a      	str	r2, [r3, #24]
}
 800b8b6:	bf00      	nop
 800b8b8:	370c      	adds	r7, #12
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c0:	4770      	bx	lr
	...

0800b8c4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b084      	sub	sp, #16
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800b8cc:	4b19      	ldr	r3, [pc, #100]	; (800b934 <HAL_PWREx_ConfigSupply+0x70>)
 800b8ce:	68db      	ldr	r3, [r3, #12]
 800b8d0:	f003 0304 	and.w	r3, r3, #4
 800b8d4:	2b04      	cmp	r3, #4
 800b8d6:	d00a      	beq.n	800b8ee <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800b8d8:	4b16      	ldr	r3, [pc, #88]	; (800b934 <HAL_PWREx_ConfigSupply+0x70>)
 800b8da:	68db      	ldr	r3, [r3, #12]
 800b8dc:	f003 0307 	and.w	r3, r3, #7
 800b8e0:	687a      	ldr	r2, [r7, #4]
 800b8e2:	429a      	cmp	r2, r3
 800b8e4:	d001      	beq.n	800b8ea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800b8e6:	2301      	movs	r3, #1
 800b8e8:	e01f      	b.n	800b92a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	e01d      	b.n	800b92a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800b8ee:	4b11      	ldr	r3, [pc, #68]	; (800b934 <HAL_PWREx_ConfigSupply+0x70>)
 800b8f0:	68db      	ldr	r3, [r3, #12]
 800b8f2:	f023 0207 	bic.w	r2, r3, #7
 800b8f6:	490f      	ldr	r1, [pc, #60]	; (800b934 <HAL_PWREx_ConfigSupply+0x70>)
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	4313      	orrs	r3, r2
 800b8fc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800b8fe:	f7fb fc91 	bl	8007224 <HAL_GetTick>
 800b902:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b904:	e009      	b.n	800b91a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800b906:	f7fb fc8d 	bl	8007224 <HAL_GetTick>
 800b90a:	4602      	mov	r2, r0
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	1ad3      	subs	r3, r2, r3
 800b910:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b914:	d901      	bls.n	800b91a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800b916:	2301      	movs	r3, #1
 800b918:	e007      	b.n	800b92a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b91a:	4b06      	ldr	r3, [pc, #24]	; (800b934 <HAL_PWREx_ConfigSupply+0x70>)
 800b91c:	685b      	ldr	r3, [r3, #4]
 800b91e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b922:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b926:	d1ee      	bne.n	800b906 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800b928:	2300      	movs	r3, #0
}
 800b92a:	4618      	mov	r0, r3
 800b92c:	3710      	adds	r7, #16
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}
 800b932:	bf00      	nop
 800b934:	58024800 	.word	0x58024800

0800b938 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b08c      	sub	sp, #48	; 0x30
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d102      	bne.n	800b94c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800b946:	2301      	movs	r3, #1
 800b948:	f000 bc1d 	b.w	800c186 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	f003 0301 	and.w	r3, r3, #1
 800b954:	2b00      	cmp	r3, #0
 800b956:	f000 8087 	beq.w	800ba68 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b95a:	4b99      	ldr	r3, [pc, #612]	; (800bbc0 <HAL_RCC_OscConfig+0x288>)
 800b95c:	691b      	ldr	r3, [r3, #16]
 800b95e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b962:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b964:	4b96      	ldr	r3, [pc, #600]	; (800bbc0 <HAL_RCC_OscConfig+0x288>)
 800b966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b968:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800b96a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b96c:	2b10      	cmp	r3, #16
 800b96e:	d007      	beq.n	800b980 <HAL_RCC_OscConfig+0x48>
 800b970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b972:	2b18      	cmp	r3, #24
 800b974:	d110      	bne.n	800b998 <HAL_RCC_OscConfig+0x60>
 800b976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b978:	f003 0303 	and.w	r3, r3, #3
 800b97c:	2b02      	cmp	r3, #2
 800b97e:	d10b      	bne.n	800b998 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b980:	4b8f      	ldr	r3, [pc, #572]	; (800bbc0 <HAL_RCC_OscConfig+0x288>)
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d06c      	beq.n	800ba66 <HAL_RCC_OscConfig+0x12e>
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	685b      	ldr	r3, [r3, #4]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d168      	bne.n	800ba66 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800b994:	2301      	movs	r3, #1
 800b996:	e3f6      	b.n	800c186 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	685b      	ldr	r3, [r3, #4]
 800b99c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9a0:	d106      	bne.n	800b9b0 <HAL_RCC_OscConfig+0x78>
 800b9a2:	4b87      	ldr	r3, [pc, #540]	; (800bbc0 <HAL_RCC_OscConfig+0x288>)
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	4a86      	ldr	r2, [pc, #536]	; (800bbc0 <HAL_RCC_OscConfig+0x288>)
 800b9a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b9ac:	6013      	str	r3, [r2, #0]
 800b9ae:	e02e      	b.n	800ba0e <HAL_RCC_OscConfig+0xd6>
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	685b      	ldr	r3, [r3, #4]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d10c      	bne.n	800b9d2 <HAL_RCC_OscConfig+0x9a>
 800b9b8:	4b81      	ldr	r3, [pc, #516]	; (800bbc0 <HAL_RCC_OscConfig+0x288>)
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	4a80      	ldr	r2, [pc, #512]	; (800bbc0 <HAL_RCC_OscConfig+0x288>)
 800b9be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b9c2:	6013      	str	r3, [r2, #0]
 800b9c4:	4b7e      	ldr	r3, [pc, #504]	; (800bbc0 <HAL_RCC_OscConfig+0x288>)
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	4a7d      	ldr	r2, [pc, #500]	; (800bbc0 <HAL_RCC_OscConfig+0x288>)
 800b9ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b9ce:	6013      	str	r3, [r2, #0]
 800b9d0:	e01d      	b.n	800ba0e <HAL_RCC_OscConfig+0xd6>
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	685b      	ldr	r3, [r3, #4]
 800b9d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b9da:	d10c      	bne.n	800b9f6 <HAL_RCC_OscConfig+0xbe>
 800b9dc:	4b78      	ldr	r3, [pc, #480]	; (800bbc0 <HAL_RCC_OscConfig+0x288>)
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	4a77      	ldr	r2, [pc, #476]	; (800bbc0 <HAL_RCC_OscConfig+0x288>)
 800b9e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b9e6:	6013      	str	r3, [r2, #0]
 800b9e8:	4b75      	ldr	r3, [pc, #468]	; (800bbc0 <HAL_RCC_OscConfig+0x288>)
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	4a74      	ldr	r2, [pc, #464]	; (800bbc0 <HAL_RCC_OscConfig+0x288>)
 800b9ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b9f2:	6013      	str	r3, [r2, #0]
 800b9f4:	e00b      	b.n	800ba0e <HAL_RCC_OscConfig+0xd6>
 800b9f6:	4b72      	ldr	r3, [pc, #456]	; (800bbc0 <HAL_RCC_OscConfig+0x288>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	4a71      	ldr	r2, [pc, #452]	; (800bbc0 <HAL_RCC_OscConfig+0x288>)
 800b9fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ba00:	6013      	str	r3, [r2, #0]
 800ba02:	4b6f      	ldr	r3, [pc, #444]	; (800bbc0 <HAL_RCC_OscConfig+0x288>)
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	4a6e      	ldr	r2, [pc, #440]	; (800bbc0 <HAL_RCC_OscConfig+0x288>)
 800ba08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ba0c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	685b      	ldr	r3, [r3, #4]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d013      	beq.n	800ba3e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba16:	f7fb fc05 	bl	8007224 <HAL_GetTick>
 800ba1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ba1c:	e008      	b.n	800ba30 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ba1e:	f7fb fc01 	bl	8007224 <HAL_GetTick>
 800ba22:	4602      	mov	r2, r0
 800ba24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba26:	1ad3      	subs	r3, r2, r3
 800ba28:	2b64      	cmp	r3, #100	; 0x64
 800ba2a:	d901      	bls.n	800ba30 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800ba2c:	2303      	movs	r3, #3
 800ba2e:	e3aa      	b.n	800c186 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ba30:	4b63      	ldr	r3, [pc, #396]	; (800bbc0 <HAL_RCC_OscConfig+0x288>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d0f0      	beq.n	800ba1e <HAL_RCC_OscConfig+0xe6>
 800ba3c:	e014      	b.n	800ba68 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba3e:	f7fb fbf1 	bl	8007224 <HAL_GetTick>
 800ba42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ba44:	e008      	b.n	800ba58 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ba46:	f7fb fbed 	bl	8007224 <HAL_GetTick>
 800ba4a:	4602      	mov	r2, r0
 800ba4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba4e:	1ad3      	subs	r3, r2, r3
 800ba50:	2b64      	cmp	r3, #100	; 0x64
 800ba52:	d901      	bls.n	800ba58 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800ba54:	2303      	movs	r3, #3
 800ba56:	e396      	b.n	800c186 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ba58:	4b59      	ldr	r3, [pc, #356]	; (800bbc0 <HAL_RCC_OscConfig+0x288>)
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d1f0      	bne.n	800ba46 <HAL_RCC_OscConfig+0x10e>
 800ba64:	e000      	b.n	800ba68 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ba66:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	f003 0302 	and.w	r3, r3, #2
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	f000 80cb 	beq.w	800bc0c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ba76:	4b52      	ldr	r3, [pc, #328]	; (800bbc0 <HAL_RCC_OscConfig+0x288>)
 800ba78:	691b      	ldr	r3, [r3, #16]
 800ba7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ba7e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ba80:	4b4f      	ldr	r3, [pc, #316]	; (800bbc0 <HAL_RCC_OscConfig+0x288>)
 800ba82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba84:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800ba86:	6a3b      	ldr	r3, [r7, #32]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d007      	beq.n	800ba9c <HAL_RCC_OscConfig+0x164>
 800ba8c:	6a3b      	ldr	r3, [r7, #32]
 800ba8e:	2b18      	cmp	r3, #24
 800ba90:	d156      	bne.n	800bb40 <HAL_RCC_OscConfig+0x208>
 800ba92:	69fb      	ldr	r3, [r7, #28]
 800ba94:	f003 0303 	and.w	r3, r3, #3
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d151      	bne.n	800bb40 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ba9c:	4b48      	ldr	r3, [pc, #288]	; (800bbc0 <HAL_RCC_OscConfig+0x288>)
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	f003 0304 	and.w	r3, r3, #4
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d005      	beq.n	800bab4 <HAL_RCC_OscConfig+0x17c>
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	68db      	ldr	r3, [r3, #12]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d101      	bne.n	800bab4 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800bab0:	2301      	movs	r3, #1
 800bab2:	e368      	b.n	800c186 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800bab4:	4b42      	ldr	r3, [pc, #264]	; (800bbc0 <HAL_RCC_OscConfig+0x288>)
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	f023 0219 	bic.w	r2, r3, #25
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	68db      	ldr	r3, [r3, #12]
 800bac0:	493f      	ldr	r1, [pc, #252]	; (800bbc0 <HAL_RCC_OscConfig+0x288>)
 800bac2:	4313      	orrs	r3, r2
 800bac4:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800bac6:	f7fb fbad 	bl	8007224 <HAL_GetTick>
 800baca:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bacc:	e008      	b.n	800bae0 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bace:	f7fb fba9 	bl	8007224 <HAL_GetTick>
 800bad2:	4602      	mov	r2, r0
 800bad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bad6:	1ad3      	subs	r3, r2, r3
 800bad8:	2b02      	cmp	r3, #2
 800bada:	d901      	bls.n	800bae0 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800badc:	2303      	movs	r3, #3
 800bade:	e352      	b.n	800c186 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bae0:	4b37      	ldr	r3, [pc, #220]	; (800bbc0 <HAL_RCC_OscConfig+0x288>)
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	f003 0304 	and.w	r3, r3, #4
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d0f0      	beq.n	800bace <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800baec:	f7fb fbca 	bl	8007284 <HAL_GetREVID>
 800baf0:	4603      	mov	r3, r0
 800baf2:	f241 0203 	movw	r2, #4099	; 0x1003
 800baf6:	4293      	cmp	r3, r2
 800baf8:	d817      	bhi.n	800bb2a <HAL_RCC_OscConfig+0x1f2>
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	691b      	ldr	r3, [r3, #16]
 800bafe:	2b40      	cmp	r3, #64	; 0x40
 800bb00:	d108      	bne.n	800bb14 <HAL_RCC_OscConfig+0x1dc>
 800bb02:	4b2f      	ldr	r3, [pc, #188]	; (800bbc0 <HAL_RCC_OscConfig+0x288>)
 800bb04:	685b      	ldr	r3, [r3, #4]
 800bb06:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800bb0a:	4a2d      	ldr	r2, [pc, #180]	; (800bbc0 <HAL_RCC_OscConfig+0x288>)
 800bb0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bb10:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bb12:	e07b      	b.n	800bc0c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bb14:	4b2a      	ldr	r3, [pc, #168]	; (800bbc0 <HAL_RCC_OscConfig+0x288>)
 800bb16:	685b      	ldr	r3, [r3, #4]
 800bb18:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	691b      	ldr	r3, [r3, #16]
 800bb20:	031b      	lsls	r3, r3, #12
 800bb22:	4927      	ldr	r1, [pc, #156]	; (800bbc0 <HAL_RCC_OscConfig+0x288>)
 800bb24:	4313      	orrs	r3, r2
 800bb26:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bb28:	e070      	b.n	800bc0c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bb2a:	4b25      	ldr	r3, [pc, #148]	; (800bbc0 <HAL_RCC_OscConfig+0x288>)
 800bb2c:	685b      	ldr	r3, [r3, #4]
 800bb2e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	691b      	ldr	r3, [r3, #16]
 800bb36:	061b      	lsls	r3, r3, #24
 800bb38:	4921      	ldr	r1, [pc, #132]	; (800bbc0 <HAL_RCC_OscConfig+0x288>)
 800bb3a:	4313      	orrs	r3, r2
 800bb3c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bb3e:	e065      	b.n	800bc0c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	68db      	ldr	r3, [r3, #12]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d048      	beq.n	800bbda <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800bb48:	4b1d      	ldr	r3, [pc, #116]	; (800bbc0 <HAL_RCC_OscConfig+0x288>)
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	f023 0219 	bic.w	r2, r3, #25
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	68db      	ldr	r3, [r3, #12]
 800bb54:	491a      	ldr	r1, [pc, #104]	; (800bbc0 <HAL_RCC_OscConfig+0x288>)
 800bb56:	4313      	orrs	r3, r2
 800bb58:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb5a:	f7fb fb63 	bl	8007224 <HAL_GetTick>
 800bb5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bb60:	e008      	b.n	800bb74 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bb62:	f7fb fb5f 	bl	8007224 <HAL_GetTick>
 800bb66:	4602      	mov	r2, r0
 800bb68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb6a:	1ad3      	subs	r3, r2, r3
 800bb6c:	2b02      	cmp	r3, #2
 800bb6e:	d901      	bls.n	800bb74 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800bb70:	2303      	movs	r3, #3
 800bb72:	e308      	b.n	800c186 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bb74:	4b12      	ldr	r3, [pc, #72]	; (800bbc0 <HAL_RCC_OscConfig+0x288>)
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	f003 0304 	and.w	r3, r3, #4
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d0f0      	beq.n	800bb62 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bb80:	f7fb fb80 	bl	8007284 <HAL_GetREVID>
 800bb84:	4603      	mov	r3, r0
 800bb86:	f241 0203 	movw	r2, #4099	; 0x1003
 800bb8a:	4293      	cmp	r3, r2
 800bb8c:	d81a      	bhi.n	800bbc4 <HAL_RCC_OscConfig+0x28c>
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	691b      	ldr	r3, [r3, #16]
 800bb92:	2b40      	cmp	r3, #64	; 0x40
 800bb94:	d108      	bne.n	800bba8 <HAL_RCC_OscConfig+0x270>
 800bb96:	4b0a      	ldr	r3, [pc, #40]	; (800bbc0 <HAL_RCC_OscConfig+0x288>)
 800bb98:	685b      	ldr	r3, [r3, #4]
 800bb9a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800bb9e:	4a08      	ldr	r2, [pc, #32]	; (800bbc0 <HAL_RCC_OscConfig+0x288>)
 800bba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bba4:	6053      	str	r3, [r2, #4]
 800bba6:	e031      	b.n	800bc0c <HAL_RCC_OscConfig+0x2d4>
 800bba8:	4b05      	ldr	r3, [pc, #20]	; (800bbc0 <HAL_RCC_OscConfig+0x288>)
 800bbaa:	685b      	ldr	r3, [r3, #4]
 800bbac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	691b      	ldr	r3, [r3, #16]
 800bbb4:	031b      	lsls	r3, r3, #12
 800bbb6:	4902      	ldr	r1, [pc, #8]	; (800bbc0 <HAL_RCC_OscConfig+0x288>)
 800bbb8:	4313      	orrs	r3, r2
 800bbba:	604b      	str	r3, [r1, #4]
 800bbbc:	e026      	b.n	800bc0c <HAL_RCC_OscConfig+0x2d4>
 800bbbe:	bf00      	nop
 800bbc0:	58024400 	.word	0x58024400
 800bbc4:	4b9a      	ldr	r3, [pc, #616]	; (800be30 <HAL_RCC_OscConfig+0x4f8>)
 800bbc6:	685b      	ldr	r3, [r3, #4]
 800bbc8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	691b      	ldr	r3, [r3, #16]
 800bbd0:	061b      	lsls	r3, r3, #24
 800bbd2:	4997      	ldr	r1, [pc, #604]	; (800be30 <HAL_RCC_OscConfig+0x4f8>)
 800bbd4:	4313      	orrs	r3, r2
 800bbd6:	604b      	str	r3, [r1, #4]
 800bbd8:	e018      	b.n	800bc0c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bbda:	4b95      	ldr	r3, [pc, #596]	; (800be30 <HAL_RCC_OscConfig+0x4f8>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	4a94      	ldr	r2, [pc, #592]	; (800be30 <HAL_RCC_OscConfig+0x4f8>)
 800bbe0:	f023 0301 	bic.w	r3, r3, #1
 800bbe4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bbe6:	f7fb fb1d 	bl	8007224 <HAL_GetTick>
 800bbea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800bbec:	e008      	b.n	800bc00 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bbee:	f7fb fb19 	bl	8007224 <HAL_GetTick>
 800bbf2:	4602      	mov	r2, r0
 800bbf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbf6:	1ad3      	subs	r3, r2, r3
 800bbf8:	2b02      	cmp	r3, #2
 800bbfa:	d901      	bls.n	800bc00 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800bbfc:	2303      	movs	r3, #3
 800bbfe:	e2c2      	b.n	800c186 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800bc00:	4b8b      	ldr	r3, [pc, #556]	; (800be30 <HAL_RCC_OscConfig+0x4f8>)
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	f003 0304 	and.w	r3, r3, #4
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d1f0      	bne.n	800bbee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	f003 0310 	and.w	r3, r3, #16
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	f000 80a9 	beq.w	800bd6c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bc1a:	4b85      	ldr	r3, [pc, #532]	; (800be30 <HAL_RCC_OscConfig+0x4f8>)
 800bc1c:	691b      	ldr	r3, [r3, #16]
 800bc1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bc22:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800bc24:	4b82      	ldr	r3, [pc, #520]	; (800be30 <HAL_RCC_OscConfig+0x4f8>)
 800bc26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc28:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800bc2a:	69bb      	ldr	r3, [r7, #24]
 800bc2c:	2b08      	cmp	r3, #8
 800bc2e:	d007      	beq.n	800bc40 <HAL_RCC_OscConfig+0x308>
 800bc30:	69bb      	ldr	r3, [r7, #24]
 800bc32:	2b18      	cmp	r3, #24
 800bc34:	d13a      	bne.n	800bcac <HAL_RCC_OscConfig+0x374>
 800bc36:	697b      	ldr	r3, [r7, #20]
 800bc38:	f003 0303 	and.w	r3, r3, #3
 800bc3c:	2b01      	cmp	r3, #1
 800bc3e:	d135      	bne.n	800bcac <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bc40:	4b7b      	ldr	r3, [pc, #492]	; (800be30 <HAL_RCC_OscConfig+0x4f8>)
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d005      	beq.n	800bc58 <HAL_RCC_OscConfig+0x320>
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	69db      	ldr	r3, [r3, #28]
 800bc50:	2b80      	cmp	r3, #128	; 0x80
 800bc52:	d001      	beq.n	800bc58 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800bc54:	2301      	movs	r3, #1
 800bc56:	e296      	b.n	800c186 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bc58:	f7fb fb14 	bl	8007284 <HAL_GetREVID>
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	f241 0203 	movw	r2, #4099	; 0x1003
 800bc62:	4293      	cmp	r3, r2
 800bc64:	d817      	bhi.n	800bc96 <HAL_RCC_OscConfig+0x35e>
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	6a1b      	ldr	r3, [r3, #32]
 800bc6a:	2b20      	cmp	r3, #32
 800bc6c:	d108      	bne.n	800bc80 <HAL_RCC_OscConfig+0x348>
 800bc6e:	4b70      	ldr	r3, [pc, #448]	; (800be30 <HAL_RCC_OscConfig+0x4f8>)
 800bc70:	685b      	ldr	r3, [r3, #4]
 800bc72:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800bc76:	4a6e      	ldr	r2, [pc, #440]	; (800be30 <HAL_RCC_OscConfig+0x4f8>)
 800bc78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bc7c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bc7e:	e075      	b.n	800bd6c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bc80:	4b6b      	ldr	r3, [pc, #428]	; (800be30 <HAL_RCC_OscConfig+0x4f8>)
 800bc82:	685b      	ldr	r3, [r3, #4]
 800bc84:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	6a1b      	ldr	r3, [r3, #32]
 800bc8c:	069b      	lsls	r3, r3, #26
 800bc8e:	4968      	ldr	r1, [pc, #416]	; (800be30 <HAL_RCC_OscConfig+0x4f8>)
 800bc90:	4313      	orrs	r3, r2
 800bc92:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bc94:	e06a      	b.n	800bd6c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bc96:	4b66      	ldr	r3, [pc, #408]	; (800be30 <HAL_RCC_OscConfig+0x4f8>)
 800bc98:	68db      	ldr	r3, [r3, #12]
 800bc9a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	6a1b      	ldr	r3, [r3, #32]
 800bca2:	061b      	lsls	r3, r3, #24
 800bca4:	4962      	ldr	r1, [pc, #392]	; (800be30 <HAL_RCC_OscConfig+0x4f8>)
 800bca6:	4313      	orrs	r3, r2
 800bca8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bcaa:	e05f      	b.n	800bd6c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	69db      	ldr	r3, [r3, #28]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d042      	beq.n	800bd3a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800bcb4:	4b5e      	ldr	r3, [pc, #376]	; (800be30 <HAL_RCC_OscConfig+0x4f8>)
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	4a5d      	ldr	r2, [pc, #372]	; (800be30 <HAL_RCC_OscConfig+0x4f8>)
 800bcba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bcc0:	f7fb fab0 	bl	8007224 <HAL_GetTick>
 800bcc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800bcc6:	e008      	b.n	800bcda <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800bcc8:	f7fb faac 	bl	8007224 <HAL_GetTick>
 800bccc:	4602      	mov	r2, r0
 800bcce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcd0:	1ad3      	subs	r3, r2, r3
 800bcd2:	2b02      	cmp	r3, #2
 800bcd4:	d901      	bls.n	800bcda <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800bcd6:	2303      	movs	r3, #3
 800bcd8:	e255      	b.n	800c186 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800bcda:	4b55      	ldr	r3, [pc, #340]	; (800be30 <HAL_RCC_OscConfig+0x4f8>)
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d0f0      	beq.n	800bcc8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bce6:	f7fb facd 	bl	8007284 <HAL_GetREVID>
 800bcea:	4603      	mov	r3, r0
 800bcec:	f241 0203 	movw	r2, #4099	; 0x1003
 800bcf0:	4293      	cmp	r3, r2
 800bcf2:	d817      	bhi.n	800bd24 <HAL_RCC_OscConfig+0x3ec>
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	6a1b      	ldr	r3, [r3, #32]
 800bcf8:	2b20      	cmp	r3, #32
 800bcfa:	d108      	bne.n	800bd0e <HAL_RCC_OscConfig+0x3d6>
 800bcfc:	4b4c      	ldr	r3, [pc, #304]	; (800be30 <HAL_RCC_OscConfig+0x4f8>)
 800bcfe:	685b      	ldr	r3, [r3, #4]
 800bd00:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800bd04:	4a4a      	ldr	r2, [pc, #296]	; (800be30 <HAL_RCC_OscConfig+0x4f8>)
 800bd06:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bd0a:	6053      	str	r3, [r2, #4]
 800bd0c:	e02e      	b.n	800bd6c <HAL_RCC_OscConfig+0x434>
 800bd0e:	4b48      	ldr	r3, [pc, #288]	; (800be30 <HAL_RCC_OscConfig+0x4f8>)
 800bd10:	685b      	ldr	r3, [r3, #4]
 800bd12:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	6a1b      	ldr	r3, [r3, #32]
 800bd1a:	069b      	lsls	r3, r3, #26
 800bd1c:	4944      	ldr	r1, [pc, #272]	; (800be30 <HAL_RCC_OscConfig+0x4f8>)
 800bd1e:	4313      	orrs	r3, r2
 800bd20:	604b      	str	r3, [r1, #4]
 800bd22:	e023      	b.n	800bd6c <HAL_RCC_OscConfig+0x434>
 800bd24:	4b42      	ldr	r3, [pc, #264]	; (800be30 <HAL_RCC_OscConfig+0x4f8>)
 800bd26:	68db      	ldr	r3, [r3, #12]
 800bd28:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	6a1b      	ldr	r3, [r3, #32]
 800bd30:	061b      	lsls	r3, r3, #24
 800bd32:	493f      	ldr	r1, [pc, #252]	; (800be30 <HAL_RCC_OscConfig+0x4f8>)
 800bd34:	4313      	orrs	r3, r2
 800bd36:	60cb      	str	r3, [r1, #12]
 800bd38:	e018      	b.n	800bd6c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800bd3a:	4b3d      	ldr	r3, [pc, #244]	; (800be30 <HAL_RCC_OscConfig+0x4f8>)
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	4a3c      	ldr	r2, [pc, #240]	; (800be30 <HAL_RCC_OscConfig+0x4f8>)
 800bd40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd46:	f7fb fa6d 	bl	8007224 <HAL_GetTick>
 800bd4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800bd4c:	e008      	b.n	800bd60 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800bd4e:	f7fb fa69 	bl	8007224 <HAL_GetTick>
 800bd52:	4602      	mov	r2, r0
 800bd54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd56:	1ad3      	subs	r3, r2, r3
 800bd58:	2b02      	cmp	r3, #2
 800bd5a:	d901      	bls.n	800bd60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800bd5c:	2303      	movs	r3, #3
 800bd5e:	e212      	b.n	800c186 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800bd60:	4b33      	ldr	r3, [pc, #204]	; (800be30 <HAL_RCC_OscConfig+0x4f8>)
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d1f0      	bne.n	800bd4e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	f003 0308 	and.w	r3, r3, #8
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d036      	beq.n	800bde6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	695b      	ldr	r3, [r3, #20]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d019      	beq.n	800bdb4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bd80:	4b2b      	ldr	r3, [pc, #172]	; (800be30 <HAL_RCC_OscConfig+0x4f8>)
 800bd82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd84:	4a2a      	ldr	r2, [pc, #168]	; (800be30 <HAL_RCC_OscConfig+0x4f8>)
 800bd86:	f043 0301 	orr.w	r3, r3, #1
 800bd8a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bd8c:	f7fb fa4a 	bl	8007224 <HAL_GetTick>
 800bd90:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800bd92:	e008      	b.n	800bda6 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bd94:	f7fb fa46 	bl	8007224 <HAL_GetTick>
 800bd98:	4602      	mov	r2, r0
 800bd9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd9c:	1ad3      	subs	r3, r2, r3
 800bd9e:	2b02      	cmp	r3, #2
 800bda0:	d901      	bls.n	800bda6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800bda2:	2303      	movs	r3, #3
 800bda4:	e1ef      	b.n	800c186 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800bda6:	4b22      	ldr	r3, [pc, #136]	; (800be30 <HAL_RCC_OscConfig+0x4f8>)
 800bda8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bdaa:	f003 0302 	and.w	r3, r3, #2
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d0f0      	beq.n	800bd94 <HAL_RCC_OscConfig+0x45c>
 800bdb2:	e018      	b.n	800bde6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bdb4:	4b1e      	ldr	r3, [pc, #120]	; (800be30 <HAL_RCC_OscConfig+0x4f8>)
 800bdb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bdb8:	4a1d      	ldr	r2, [pc, #116]	; (800be30 <HAL_RCC_OscConfig+0x4f8>)
 800bdba:	f023 0301 	bic.w	r3, r3, #1
 800bdbe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bdc0:	f7fb fa30 	bl	8007224 <HAL_GetTick>
 800bdc4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800bdc6:	e008      	b.n	800bdda <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bdc8:	f7fb fa2c 	bl	8007224 <HAL_GetTick>
 800bdcc:	4602      	mov	r2, r0
 800bdce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdd0:	1ad3      	subs	r3, r2, r3
 800bdd2:	2b02      	cmp	r3, #2
 800bdd4:	d901      	bls.n	800bdda <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800bdd6:	2303      	movs	r3, #3
 800bdd8:	e1d5      	b.n	800c186 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800bdda:	4b15      	ldr	r3, [pc, #84]	; (800be30 <HAL_RCC_OscConfig+0x4f8>)
 800bddc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bdde:	f003 0302 	and.w	r3, r3, #2
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d1f0      	bne.n	800bdc8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	f003 0320 	and.w	r3, r3, #32
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d039      	beq.n	800be66 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	699b      	ldr	r3, [r3, #24]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d01c      	beq.n	800be34 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800bdfa:	4b0d      	ldr	r3, [pc, #52]	; (800be30 <HAL_RCC_OscConfig+0x4f8>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	4a0c      	ldr	r2, [pc, #48]	; (800be30 <HAL_RCC_OscConfig+0x4f8>)
 800be00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800be04:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800be06:	f7fb fa0d 	bl	8007224 <HAL_GetTick>
 800be0a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800be0c:	e008      	b.n	800be20 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800be0e:	f7fb fa09 	bl	8007224 <HAL_GetTick>
 800be12:	4602      	mov	r2, r0
 800be14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be16:	1ad3      	subs	r3, r2, r3
 800be18:	2b02      	cmp	r3, #2
 800be1a:	d901      	bls.n	800be20 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800be1c:	2303      	movs	r3, #3
 800be1e:	e1b2      	b.n	800c186 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800be20:	4b03      	ldr	r3, [pc, #12]	; (800be30 <HAL_RCC_OscConfig+0x4f8>)
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d0f0      	beq.n	800be0e <HAL_RCC_OscConfig+0x4d6>
 800be2c:	e01b      	b.n	800be66 <HAL_RCC_OscConfig+0x52e>
 800be2e:	bf00      	nop
 800be30:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800be34:	4b9b      	ldr	r3, [pc, #620]	; (800c0a4 <HAL_RCC_OscConfig+0x76c>)
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	4a9a      	ldr	r2, [pc, #616]	; (800c0a4 <HAL_RCC_OscConfig+0x76c>)
 800be3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800be3e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800be40:	f7fb f9f0 	bl	8007224 <HAL_GetTick>
 800be44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800be46:	e008      	b.n	800be5a <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800be48:	f7fb f9ec 	bl	8007224 <HAL_GetTick>
 800be4c:	4602      	mov	r2, r0
 800be4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be50:	1ad3      	subs	r3, r2, r3
 800be52:	2b02      	cmp	r3, #2
 800be54:	d901      	bls.n	800be5a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800be56:	2303      	movs	r3, #3
 800be58:	e195      	b.n	800c186 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800be5a:	4b92      	ldr	r3, [pc, #584]	; (800c0a4 <HAL_RCC_OscConfig+0x76c>)
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800be62:	2b00      	cmp	r3, #0
 800be64:	d1f0      	bne.n	800be48 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	f003 0304 	and.w	r3, r3, #4
 800be6e:	2b00      	cmp	r3, #0
 800be70:	f000 8081 	beq.w	800bf76 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800be74:	4b8c      	ldr	r3, [pc, #560]	; (800c0a8 <HAL_RCC_OscConfig+0x770>)
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	4a8b      	ldr	r2, [pc, #556]	; (800c0a8 <HAL_RCC_OscConfig+0x770>)
 800be7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800be7e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800be80:	f7fb f9d0 	bl	8007224 <HAL_GetTick>
 800be84:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800be86:	e008      	b.n	800be9a <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800be88:	f7fb f9cc 	bl	8007224 <HAL_GetTick>
 800be8c:	4602      	mov	r2, r0
 800be8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be90:	1ad3      	subs	r3, r2, r3
 800be92:	2b64      	cmp	r3, #100	; 0x64
 800be94:	d901      	bls.n	800be9a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800be96:	2303      	movs	r3, #3
 800be98:	e175      	b.n	800c186 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800be9a:	4b83      	ldr	r3, [pc, #524]	; (800c0a8 <HAL_RCC_OscConfig+0x770>)
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d0f0      	beq.n	800be88 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	689b      	ldr	r3, [r3, #8]
 800beaa:	2b01      	cmp	r3, #1
 800beac:	d106      	bne.n	800bebc <HAL_RCC_OscConfig+0x584>
 800beae:	4b7d      	ldr	r3, [pc, #500]	; (800c0a4 <HAL_RCC_OscConfig+0x76c>)
 800beb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800beb2:	4a7c      	ldr	r2, [pc, #496]	; (800c0a4 <HAL_RCC_OscConfig+0x76c>)
 800beb4:	f043 0301 	orr.w	r3, r3, #1
 800beb8:	6713      	str	r3, [r2, #112]	; 0x70
 800beba:	e02d      	b.n	800bf18 <HAL_RCC_OscConfig+0x5e0>
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	689b      	ldr	r3, [r3, #8]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d10c      	bne.n	800bede <HAL_RCC_OscConfig+0x5a6>
 800bec4:	4b77      	ldr	r3, [pc, #476]	; (800c0a4 <HAL_RCC_OscConfig+0x76c>)
 800bec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bec8:	4a76      	ldr	r2, [pc, #472]	; (800c0a4 <HAL_RCC_OscConfig+0x76c>)
 800beca:	f023 0301 	bic.w	r3, r3, #1
 800bece:	6713      	str	r3, [r2, #112]	; 0x70
 800bed0:	4b74      	ldr	r3, [pc, #464]	; (800c0a4 <HAL_RCC_OscConfig+0x76c>)
 800bed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bed4:	4a73      	ldr	r2, [pc, #460]	; (800c0a4 <HAL_RCC_OscConfig+0x76c>)
 800bed6:	f023 0304 	bic.w	r3, r3, #4
 800beda:	6713      	str	r3, [r2, #112]	; 0x70
 800bedc:	e01c      	b.n	800bf18 <HAL_RCC_OscConfig+0x5e0>
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	689b      	ldr	r3, [r3, #8]
 800bee2:	2b05      	cmp	r3, #5
 800bee4:	d10c      	bne.n	800bf00 <HAL_RCC_OscConfig+0x5c8>
 800bee6:	4b6f      	ldr	r3, [pc, #444]	; (800c0a4 <HAL_RCC_OscConfig+0x76c>)
 800bee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800beea:	4a6e      	ldr	r2, [pc, #440]	; (800c0a4 <HAL_RCC_OscConfig+0x76c>)
 800beec:	f043 0304 	orr.w	r3, r3, #4
 800bef0:	6713      	str	r3, [r2, #112]	; 0x70
 800bef2:	4b6c      	ldr	r3, [pc, #432]	; (800c0a4 <HAL_RCC_OscConfig+0x76c>)
 800bef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bef6:	4a6b      	ldr	r2, [pc, #428]	; (800c0a4 <HAL_RCC_OscConfig+0x76c>)
 800bef8:	f043 0301 	orr.w	r3, r3, #1
 800befc:	6713      	str	r3, [r2, #112]	; 0x70
 800befe:	e00b      	b.n	800bf18 <HAL_RCC_OscConfig+0x5e0>
 800bf00:	4b68      	ldr	r3, [pc, #416]	; (800c0a4 <HAL_RCC_OscConfig+0x76c>)
 800bf02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf04:	4a67      	ldr	r2, [pc, #412]	; (800c0a4 <HAL_RCC_OscConfig+0x76c>)
 800bf06:	f023 0301 	bic.w	r3, r3, #1
 800bf0a:	6713      	str	r3, [r2, #112]	; 0x70
 800bf0c:	4b65      	ldr	r3, [pc, #404]	; (800c0a4 <HAL_RCC_OscConfig+0x76c>)
 800bf0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf10:	4a64      	ldr	r2, [pc, #400]	; (800c0a4 <HAL_RCC_OscConfig+0x76c>)
 800bf12:	f023 0304 	bic.w	r3, r3, #4
 800bf16:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	689b      	ldr	r3, [r3, #8]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d015      	beq.n	800bf4c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bf20:	f7fb f980 	bl	8007224 <HAL_GetTick>
 800bf24:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bf26:	e00a      	b.n	800bf3e <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bf28:	f7fb f97c 	bl	8007224 <HAL_GetTick>
 800bf2c:	4602      	mov	r2, r0
 800bf2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf30:	1ad3      	subs	r3, r2, r3
 800bf32:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf36:	4293      	cmp	r3, r2
 800bf38:	d901      	bls.n	800bf3e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800bf3a:	2303      	movs	r3, #3
 800bf3c:	e123      	b.n	800c186 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bf3e:	4b59      	ldr	r3, [pc, #356]	; (800c0a4 <HAL_RCC_OscConfig+0x76c>)
 800bf40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf42:	f003 0302 	and.w	r3, r3, #2
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d0ee      	beq.n	800bf28 <HAL_RCC_OscConfig+0x5f0>
 800bf4a:	e014      	b.n	800bf76 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bf4c:	f7fb f96a 	bl	8007224 <HAL_GetTick>
 800bf50:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800bf52:	e00a      	b.n	800bf6a <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bf54:	f7fb f966 	bl	8007224 <HAL_GetTick>
 800bf58:	4602      	mov	r2, r0
 800bf5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf5c:	1ad3      	subs	r3, r2, r3
 800bf5e:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf62:	4293      	cmp	r3, r2
 800bf64:	d901      	bls.n	800bf6a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800bf66:	2303      	movs	r3, #3
 800bf68:	e10d      	b.n	800c186 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800bf6a:	4b4e      	ldr	r3, [pc, #312]	; (800c0a4 <HAL_RCC_OscConfig+0x76c>)
 800bf6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf6e:	f003 0302 	and.w	r3, r3, #2
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d1ee      	bne.n	800bf54 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	f000 8102 	beq.w	800c184 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800bf80:	4b48      	ldr	r3, [pc, #288]	; (800c0a4 <HAL_RCC_OscConfig+0x76c>)
 800bf82:	691b      	ldr	r3, [r3, #16]
 800bf84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bf88:	2b18      	cmp	r3, #24
 800bf8a:	f000 80bd 	beq.w	800c108 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf92:	2b02      	cmp	r3, #2
 800bf94:	f040 809e 	bne.w	800c0d4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bf98:	4b42      	ldr	r3, [pc, #264]	; (800c0a4 <HAL_RCC_OscConfig+0x76c>)
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	4a41      	ldr	r2, [pc, #260]	; (800c0a4 <HAL_RCC_OscConfig+0x76c>)
 800bf9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bfa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bfa4:	f7fb f93e 	bl	8007224 <HAL_GetTick>
 800bfa8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bfaa:	e008      	b.n	800bfbe <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bfac:	f7fb f93a 	bl	8007224 <HAL_GetTick>
 800bfb0:	4602      	mov	r2, r0
 800bfb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfb4:	1ad3      	subs	r3, r2, r3
 800bfb6:	2b02      	cmp	r3, #2
 800bfb8:	d901      	bls.n	800bfbe <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800bfba:	2303      	movs	r3, #3
 800bfbc:	e0e3      	b.n	800c186 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bfbe:	4b39      	ldr	r3, [pc, #228]	; (800c0a4 <HAL_RCC_OscConfig+0x76c>)
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d1f0      	bne.n	800bfac <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bfca:	4b36      	ldr	r3, [pc, #216]	; (800c0a4 <HAL_RCC_OscConfig+0x76c>)
 800bfcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bfce:	4b37      	ldr	r3, [pc, #220]	; (800c0ac <HAL_RCC_OscConfig+0x774>)
 800bfd0:	4013      	ands	r3, r2
 800bfd2:	687a      	ldr	r2, [r7, #4]
 800bfd4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800bfd6:	687a      	ldr	r2, [r7, #4]
 800bfd8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800bfda:	0112      	lsls	r2, r2, #4
 800bfdc:	430a      	orrs	r2, r1
 800bfde:	4931      	ldr	r1, [pc, #196]	; (800c0a4 <HAL_RCC_OscConfig+0x76c>)
 800bfe0:	4313      	orrs	r3, r2
 800bfe2:	628b      	str	r3, [r1, #40]	; 0x28
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfe8:	3b01      	subs	r3, #1
 800bfea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bff2:	3b01      	subs	r3, #1
 800bff4:	025b      	lsls	r3, r3, #9
 800bff6:	b29b      	uxth	r3, r3
 800bff8:	431a      	orrs	r2, r3
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bffe:	3b01      	subs	r3, #1
 800c000:	041b      	lsls	r3, r3, #16
 800c002:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c006:	431a      	orrs	r2, r3
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c00c:	3b01      	subs	r3, #1
 800c00e:	061b      	lsls	r3, r3, #24
 800c010:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c014:	4923      	ldr	r1, [pc, #140]	; (800c0a4 <HAL_RCC_OscConfig+0x76c>)
 800c016:	4313      	orrs	r3, r2
 800c018:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800c01a:	4b22      	ldr	r3, [pc, #136]	; (800c0a4 <HAL_RCC_OscConfig+0x76c>)
 800c01c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c01e:	4a21      	ldr	r2, [pc, #132]	; (800c0a4 <HAL_RCC_OscConfig+0x76c>)
 800c020:	f023 0301 	bic.w	r3, r3, #1
 800c024:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800c026:	4b1f      	ldr	r3, [pc, #124]	; (800c0a4 <HAL_RCC_OscConfig+0x76c>)
 800c028:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c02a:	4b21      	ldr	r3, [pc, #132]	; (800c0b0 <HAL_RCC_OscConfig+0x778>)
 800c02c:	4013      	ands	r3, r2
 800c02e:	687a      	ldr	r2, [r7, #4]
 800c030:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800c032:	00d2      	lsls	r2, r2, #3
 800c034:	491b      	ldr	r1, [pc, #108]	; (800c0a4 <HAL_RCC_OscConfig+0x76c>)
 800c036:	4313      	orrs	r3, r2
 800c038:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800c03a:	4b1a      	ldr	r3, [pc, #104]	; (800c0a4 <HAL_RCC_OscConfig+0x76c>)
 800c03c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c03e:	f023 020c 	bic.w	r2, r3, #12
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c046:	4917      	ldr	r1, [pc, #92]	; (800c0a4 <HAL_RCC_OscConfig+0x76c>)
 800c048:	4313      	orrs	r3, r2
 800c04a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800c04c:	4b15      	ldr	r3, [pc, #84]	; (800c0a4 <HAL_RCC_OscConfig+0x76c>)
 800c04e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c050:	f023 0202 	bic.w	r2, r3, #2
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c058:	4912      	ldr	r1, [pc, #72]	; (800c0a4 <HAL_RCC_OscConfig+0x76c>)
 800c05a:	4313      	orrs	r3, r2
 800c05c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800c05e:	4b11      	ldr	r3, [pc, #68]	; (800c0a4 <HAL_RCC_OscConfig+0x76c>)
 800c060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c062:	4a10      	ldr	r2, [pc, #64]	; (800c0a4 <HAL_RCC_OscConfig+0x76c>)
 800c064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c068:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c06a:	4b0e      	ldr	r3, [pc, #56]	; (800c0a4 <HAL_RCC_OscConfig+0x76c>)
 800c06c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c06e:	4a0d      	ldr	r2, [pc, #52]	; (800c0a4 <HAL_RCC_OscConfig+0x76c>)
 800c070:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c074:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800c076:	4b0b      	ldr	r3, [pc, #44]	; (800c0a4 <HAL_RCC_OscConfig+0x76c>)
 800c078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c07a:	4a0a      	ldr	r2, [pc, #40]	; (800c0a4 <HAL_RCC_OscConfig+0x76c>)
 800c07c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c080:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800c082:	4b08      	ldr	r3, [pc, #32]	; (800c0a4 <HAL_RCC_OscConfig+0x76c>)
 800c084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c086:	4a07      	ldr	r2, [pc, #28]	; (800c0a4 <HAL_RCC_OscConfig+0x76c>)
 800c088:	f043 0301 	orr.w	r3, r3, #1
 800c08c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c08e:	4b05      	ldr	r3, [pc, #20]	; (800c0a4 <HAL_RCC_OscConfig+0x76c>)
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	4a04      	ldr	r2, [pc, #16]	; (800c0a4 <HAL_RCC_OscConfig+0x76c>)
 800c094:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c098:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c09a:	f7fb f8c3 	bl	8007224 <HAL_GetTick>
 800c09e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c0a0:	e011      	b.n	800c0c6 <HAL_RCC_OscConfig+0x78e>
 800c0a2:	bf00      	nop
 800c0a4:	58024400 	.word	0x58024400
 800c0a8:	58024800 	.word	0x58024800
 800c0ac:	fffffc0c 	.word	0xfffffc0c
 800c0b0:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c0b4:	f7fb f8b6 	bl	8007224 <HAL_GetTick>
 800c0b8:	4602      	mov	r2, r0
 800c0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0bc:	1ad3      	subs	r3, r2, r3
 800c0be:	2b02      	cmp	r3, #2
 800c0c0:	d901      	bls.n	800c0c6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800c0c2:	2303      	movs	r3, #3
 800c0c4:	e05f      	b.n	800c186 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c0c6:	4b32      	ldr	r3, [pc, #200]	; (800c190 <HAL_RCC_OscConfig+0x858>)
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d0f0      	beq.n	800c0b4 <HAL_RCC_OscConfig+0x77c>
 800c0d2:	e057      	b.n	800c184 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c0d4:	4b2e      	ldr	r3, [pc, #184]	; (800c190 <HAL_RCC_OscConfig+0x858>)
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	4a2d      	ldr	r2, [pc, #180]	; (800c190 <HAL_RCC_OscConfig+0x858>)
 800c0da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c0de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c0e0:	f7fb f8a0 	bl	8007224 <HAL_GetTick>
 800c0e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c0e6:	e008      	b.n	800c0fa <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c0e8:	f7fb f89c 	bl	8007224 <HAL_GetTick>
 800c0ec:	4602      	mov	r2, r0
 800c0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0f0:	1ad3      	subs	r3, r2, r3
 800c0f2:	2b02      	cmp	r3, #2
 800c0f4:	d901      	bls.n	800c0fa <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800c0f6:	2303      	movs	r3, #3
 800c0f8:	e045      	b.n	800c186 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c0fa:	4b25      	ldr	r3, [pc, #148]	; (800c190 <HAL_RCC_OscConfig+0x858>)
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c102:	2b00      	cmp	r3, #0
 800c104:	d1f0      	bne.n	800c0e8 <HAL_RCC_OscConfig+0x7b0>
 800c106:	e03d      	b.n	800c184 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800c108:	4b21      	ldr	r3, [pc, #132]	; (800c190 <HAL_RCC_OscConfig+0x858>)
 800c10a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c10c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800c10e:	4b20      	ldr	r3, [pc, #128]	; (800c190 <HAL_RCC_OscConfig+0x858>)
 800c110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c112:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c118:	2b01      	cmp	r3, #1
 800c11a:	d031      	beq.n	800c180 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c11c:	693b      	ldr	r3, [r7, #16]
 800c11e:	f003 0203 	and.w	r2, r3, #3
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c126:	429a      	cmp	r2, r3
 800c128:	d12a      	bne.n	800c180 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800c12a:	693b      	ldr	r3, [r7, #16]
 800c12c:	091b      	lsrs	r3, r3, #4
 800c12e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c136:	429a      	cmp	r2, r3
 800c138:	d122      	bne.n	800c180 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c144:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800c146:	429a      	cmp	r2, r3
 800c148:	d11a      	bne.n	800c180 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	0a5b      	lsrs	r3, r3, #9
 800c14e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c156:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c158:	429a      	cmp	r2, r3
 800c15a:	d111      	bne.n	800c180 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	0c1b      	lsrs	r3, r3, #16
 800c160:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c168:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c16a:	429a      	cmp	r2, r3
 800c16c:	d108      	bne.n	800c180 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	0e1b      	lsrs	r3, r3, #24
 800c172:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c17a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c17c:	429a      	cmp	r2, r3
 800c17e:	d001      	beq.n	800c184 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800c180:	2301      	movs	r3, #1
 800c182:	e000      	b.n	800c186 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800c184:	2300      	movs	r3, #0
}
 800c186:	4618      	mov	r0, r3
 800c188:	3730      	adds	r7, #48	; 0x30
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}
 800c18e:	bf00      	nop
 800c190:	58024400 	.word	0x58024400

0800c194 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b086      	sub	sp, #24
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
 800c19c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d101      	bne.n	800c1a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c1a4:	2301      	movs	r3, #1
 800c1a6:	e19c      	b.n	800c4e2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c1a8:	4b8a      	ldr	r3, [pc, #552]	; (800c3d4 <HAL_RCC_ClockConfig+0x240>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	f003 030f 	and.w	r3, r3, #15
 800c1b0:	683a      	ldr	r2, [r7, #0]
 800c1b2:	429a      	cmp	r2, r3
 800c1b4:	d910      	bls.n	800c1d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c1b6:	4b87      	ldr	r3, [pc, #540]	; (800c3d4 <HAL_RCC_ClockConfig+0x240>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	f023 020f 	bic.w	r2, r3, #15
 800c1be:	4985      	ldr	r1, [pc, #532]	; (800c3d4 <HAL_RCC_ClockConfig+0x240>)
 800c1c0:	683b      	ldr	r3, [r7, #0]
 800c1c2:	4313      	orrs	r3, r2
 800c1c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c1c6:	4b83      	ldr	r3, [pc, #524]	; (800c3d4 <HAL_RCC_ClockConfig+0x240>)
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	f003 030f 	and.w	r3, r3, #15
 800c1ce:	683a      	ldr	r2, [r7, #0]
 800c1d0:	429a      	cmp	r2, r3
 800c1d2:	d001      	beq.n	800c1d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800c1d4:	2301      	movs	r3, #1
 800c1d6:	e184      	b.n	800c4e2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	f003 0304 	and.w	r3, r3, #4
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d010      	beq.n	800c206 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	691a      	ldr	r2, [r3, #16]
 800c1e8:	4b7b      	ldr	r3, [pc, #492]	; (800c3d8 <HAL_RCC_ClockConfig+0x244>)
 800c1ea:	699b      	ldr	r3, [r3, #24]
 800c1ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c1f0:	429a      	cmp	r2, r3
 800c1f2:	d908      	bls.n	800c206 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c1f4:	4b78      	ldr	r3, [pc, #480]	; (800c3d8 <HAL_RCC_ClockConfig+0x244>)
 800c1f6:	699b      	ldr	r3, [r3, #24]
 800c1f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	691b      	ldr	r3, [r3, #16]
 800c200:	4975      	ldr	r1, [pc, #468]	; (800c3d8 <HAL_RCC_ClockConfig+0x244>)
 800c202:	4313      	orrs	r3, r2
 800c204:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	f003 0308 	and.w	r3, r3, #8
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d010      	beq.n	800c234 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	695a      	ldr	r2, [r3, #20]
 800c216:	4b70      	ldr	r3, [pc, #448]	; (800c3d8 <HAL_RCC_ClockConfig+0x244>)
 800c218:	69db      	ldr	r3, [r3, #28]
 800c21a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c21e:	429a      	cmp	r2, r3
 800c220:	d908      	bls.n	800c234 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c222:	4b6d      	ldr	r3, [pc, #436]	; (800c3d8 <HAL_RCC_ClockConfig+0x244>)
 800c224:	69db      	ldr	r3, [r3, #28]
 800c226:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	695b      	ldr	r3, [r3, #20]
 800c22e:	496a      	ldr	r1, [pc, #424]	; (800c3d8 <HAL_RCC_ClockConfig+0x244>)
 800c230:	4313      	orrs	r3, r2
 800c232:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	f003 0310 	and.w	r3, r3, #16
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d010      	beq.n	800c262 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	699a      	ldr	r2, [r3, #24]
 800c244:	4b64      	ldr	r3, [pc, #400]	; (800c3d8 <HAL_RCC_ClockConfig+0x244>)
 800c246:	69db      	ldr	r3, [r3, #28]
 800c248:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c24c:	429a      	cmp	r2, r3
 800c24e:	d908      	bls.n	800c262 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c250:	4b61      	ldr	r3, [pc, #388]	; (800c3d8 <HAL_RCC_ClockConfig+0x244>)
 800c252:	69db      	ldr	r3, [r3, #28]
 800c254:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	699b      	ldr	r3, [r3, #24]
 800c25c:	495e      	ldr	r1, [pc, #376]	; (800c3d8 <HAL_RCC_ClockConfig+0x244>)
 800c25e:	4313      	orrs	r3, r2
 800c260:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	f003 0320 	and.w	r3, r3, #32
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d010      	beq.n	800c290 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	69da      	ldr	r2, [r3, #28]
 800c272:	4b59      	ldr	r3, [pc, #356]	; (800c3d8 <HAL_RCC_ClockConfig+0x244>)
 800c274:	6a1b      	ldr	r3, [r3, #32]
 800c276:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c27a:	429a      	cmp	r2, r3
 800c27c:	d908      	bls.n	800c290 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800c27e:	4b56      	ldr	r3, [pc, #344]	; (800c3d8 <HAL_RCC_ClockConfig+0x244>)
 800c280:	6a1b      	ldr	r3, [r3, #32]
 800c282:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	69db      	ldr	r3, [r3, #28]
 800c28a:	4953      	ldr	r1, [pc, #332]	; (800c3d8 <HAL_RCC_ClockConfig+0x244>)
 800c28c:	4313      	orrs	r3, r2
 800c28e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	f003 0302 	and.w	r3, r3, #2
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d010      	beq.n	800c2be <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	68da      	ldr	r2, [r3, #12]
 800c2a0:	4b4d      	ldr	r3, [pc, #308]	; (800c3d8 <HAL_RCC_ClockConfig+0x244>)
 800c2a2:	699b      	ldr	r3, [r3, #24]
 800c2a4:	f003 030f 	and.w	r3, r3, #15
 800c2a8:	429a      	cmp	r2, r3
 800c2aa:	d908      	bls.n	800c2be <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c2ac:	4b4a      	ldr	r3, [pc, #296]	; (800c3d8 <HAL_RCC_ClockConfig+0x244>)
 800c2ae:	699b      	ldr	r3, [r3, #24]
 800c2b0:	f023 020f 	bic.w	r2, r3, #15
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	68db      	ldr	r3, [r3, #12]
 800c2b8:	4947      	ldr	r1, [pc, #284]	; (800c3d8 <HAL_RCC_ClockConfig+0x244>)
 800c2ba:	4313      	orrs	r3, r2
 800c2bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	f003 0301 	and.w	r3, r3, #1
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d055      	beq.n	800c376 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800c2ca:	4b43      	ldr	r3, [pc, #268]	; (800c3d8 <HAL_RCC_ClockConfig+0x244>)
 800c2cc:	699b      	ldr	r3, [r3, #24]
 800c2ce:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	689b      	ldr	r3, [r3, #8]
 800c2d6:	4940      	ldr	r1, [pc, #256]	; (800c3d8 <HAL_RCC_ClockConfig+0x244>)
 800c2d8:	4313      	orrs	r3, r2
 800c2da:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	685b      	ldr	r3, [r3, #4]
 800c2e0:	2b02      	cmp	r3, #2
 800c2e2:	d107      	bne.n	800c2f4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c2e4:	4b3c      	ldr	r3, [pc, #240]	; (800c3d8 <HAL_RCC_ClockConfig+0x244>)
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d121      	bne.n	800c334 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800c2f0:	2301      	movs	r3, #1
 800c2f2:	e0f6      	b.n	800c4e2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	685b      	ldr	r3, [r3, #4]
 800c2f8:	2b03      	cmp	r3, #3
 800c2fa:	d107      	bne.n	800c30c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c2fc:	4b36      	ldr	r3, [pc, #216]	; (800c3d8 <HAL_RCC_ClockConfig+0x244>)
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c304:	2b00      	cmp	r3, #0
 800c306:	d115      	bne.n	800c334 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800c308:	2301      	movs	r3, #1
 800c30a:	e0ea      	b.n	800c4e2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	685b      	ldr	r3, [r3, #4]
 800c310:	2b01      	cmp	r3, #1
 800c312:	d107      	bne.n	800c324 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c314:	4b30      	ldr	r3, [pc, #192]	; (800c3d8 <HAL_RCC_ClockConfig+0x244>)
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d109      	bne.n	800c334 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800c320:	2301      	movs	r3, #1
 800c322:	e0de      	b.n	800c4e2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c324:	4b2c      	ldr	r3, [pc, #176]	; (800c3d8 <HAL_RCC_ClockConfig+0x244>)
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	f003 0304 	and.w	r3, r3, #4
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d101      	bne.n	800c334 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800c330:	2301      	movs	r3, #1
 800c332:	e0d6      	b.n	800c4e2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c334:	4b28      	ldr	r3, [pc, #160]	; (800c3d8 <HAL_RCC_ClockConfig+0x244>)
 800c336:	691b      	ldr	r3, [r3, #16]
 800c338:	f023 0207 	bic.w	r2, r3, #7
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	685b      	ldr	r3, [r3, #4]
 800c340:	4925      	ldr	r1, [pc, #148]	; (800c3d8 <HAL_RCC_ClockConfig+0x244>)
 800c342:	4313      	orrs	r3, r2
 800c344:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c346:	f7fa ff6d 	bl	8007224 <HAL_GetTick>
 800c34a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c34c:	e00a      	b.n	800c364 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c34e:	f7fa ff69 	bl	8007224 <HAL_GetTick>
 800c352:	4602      	mov	r2, r0
 800c354:	697b      	ldr	r3, [r7, #20]
 800c356:	1ad3      	subs	r3, r2, r3
 800c358:	f241 3288 	movw	r2, #5000	; 0x1388
 800c35c:	4293      	cmp	r3, r2
 800c35e:	d901      	bls.n	800c364 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800c360:	2303      	movs	r3, #3
 800c362:	e0be      	b.n	800c4e2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c364:	4b1c      	ldr	r3, [pc, #112]	; (800c3d8 <HAL_RCC_ClockConfig+0x244>)
 800c366:	691b      	ldr	r3, [r3, #16]
 800c368:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	685b      	ldr	r3, [r3, #4]
 800c370:	00db      	lsls	r3, r3, #3
 800c372:	429a      	cmp	r2, r3
 800c374:	d1eb      	bne.n	800c34e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	f003 0302 	and.w	r3, r3, #2
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d010      	beq.n	800c3a4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	68da      	ldr	r2, [r3, #12]
 800c386:	4b14      	ldr	r3, [pc, #80]	; (800c3d8 <HAL_RCC_ClockConfig+0x244>)
 800c388:	699b      	ldr	r3, [r3, #24]
 800c38a:	f003 030f 	and.w	r3, r3, #15
 800c38e:	429a      	cmp	r2, r3
 800c390:	d208      	bcs.n	800c3a4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c392:	4b11      	ldr	r3, [pc, #68]	; (800c3d8 <HAL_RCC_ClockConfig+0x244>)
 800c394:	699b      	ldr	r3, [r3, #24]
 800c396:	f023 020f 	bic.w	r2, r3, #15
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	68db      	ldr	r3, [r3, #12]
 800c39e:	490e      	ldr	r1, [pc, #56]	; (800c3d8 <HAL_RCC_ClockConfig+0x244>)
 800c3a0:	4313      	orrs	r3, r2
 800c3a2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c3a4:	4b0b      	ldr	r3, [pc, #44]	; (800c3d4 <HAL_RCC_ClockConfig+0x240>)
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	f003 030f 	and.w	r3, r3, #15
 800c3ac:	683a      	ldr	r2, [r7, #0]
 800c3ae:	429a      	cmp	r2, r3
 800c3b0:	d214      	bcs.n	800c3dc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c3b2:	4b08      	ldr	r3, [pc, #32]	; (800c3d4 <HAL_RCC_ClockConfig+0x240>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	f023 020f 	bic.w	r2, r3, #15
 800c3ba:	4906      	ldr	r1, [pc, #24]	; (800c3d4 <HAL_RCC_ClockConfig+0x240>)
 800c3bc:	683b      	ldr	r3, [r7, #0]
 800c3be:	4313      	orrs	r3, r2
 800c3c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c3c2:	4b04      	ldr	r3, [pc, #16]	; (800c3d4 <HAL_RCC_ClockConfig+0x240>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	f003 030f 	and.w	r3, r3, #15
 800c3ca:	683a      	ldr	r2, [r7, #0]
 800c3cc:	429a      	cmp	r2, r3
 800c3ce:	d005      	beq.n	800c3dc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800c3d0:	2301      	movs	r3, #1
 800c3d2:	e086      	b.n	800c4e2 <HAL_RCC_ClockConfig+0x34e>
 800c3d4:	52002000 	.word	0x52002000
 800c3d8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	f003 0304 	and.w	r3, r3, #4
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d010      	beq.n	800c40a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	691a      	ldr	r2, [r3, #16]
 800c3ec:	4b3f      	ldr	r3, [pc, #252]	; (800c4ec <HAL_RCC_ClockConfig+0x358>)
 800c3ee:	699b      	ldr	r3, [r3, #24]
 800c3f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c3f4:	429a      	cmp	r2, r3
 800c3f6:	d208      	bcs.n	800c40a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c3f8:	4b3c      	ldr	r3, [pc, #240]	; (800c4ec <HAL_RCC_ClockConfig+0x358>)
 800c3fa:	699b      	ldr	r3, [r3, #24]
 800c3fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	691b      	ldr	r3, [r3, #16]
 800c404:	4939      	ldr	r1, [pc, #228]	; (800c4ec <HAL_RCC_ClockConfig+0x358>)
 800c406:	4313      	orrs	r3, r2
 800c408:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	f003 0308 	and.w	r3, r3, #8
 800c412:	2b00      	cmp	r3, #0
 800c414:	d010      	beq.n	800c438 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	695a      	ldr	r2, [r3, #20]
 800c41a:	4b34      	ldr	r3, [pc, #208]	; (800c4ec <HAL_RCC_ClockConfig+0x358>)
 800c41c:	69db      	ldr	r3, [r3, #28]
 800c41e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c422:	429a      	cmp	r2, r3
 800c424:	d208      	bcs.n	800c438 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c426:	4b31      	ldr	r3, [pc, #196]	; (800c4ec <HAL_RCC_ClockConfig+0x358>)
 800c428:	69db      	ldr	r3, [r3, #28]
 800c42a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	695b      	ldr	r3, [r3, #20]
 800c432:	492e      	ldr	r1, [pc, #184]	; (800c4ec <HAL_RCC_ClockConfig+0x358>)
 800c434:	4313      	orrs	r3, r2
 800c436:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	f003 0310 	and.w	r3, r3, #16
 800c440:	2b00      	cmp	r3, #0
 800c442:	d010      	beq.n	800c466 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	699a      	ldr	r2, [r3, #24]
 800c448:	4b28      	ldr	r3, [pc, #160]	; (800c4ec <HAL_RCC_ClockConfig+0x358>)
 800c44a:	69db      	ldr	r3, [r3, #28]
 800c44c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c450:	429a      	cmp	r2, r3
 800c452:	d208      	bcs.n	800c466 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c454:	4b25      	ldr	r3, [pc, #148]	; (800c4ec <HAL_RCC_ClockConfig+0x358>)
 800c456:	69db      	ldr	r3, [r3, #28]
 800c458:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	699b      	ldr	r3, [r3, #24]
 800c460:	4922      	ldr	r1, [pc, #136]	; (800c4ec <HAL_RCC_ClockConfig+0x358>)
 800c462:	4313      	orrs	r3, r2
 800c464:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	f003 0320 	and.w	r3, r3, #32
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d010      	beq.n	800c494 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	69da      	ldr	r2, [r3, #28]
 800c476:	4b1d      	ldr	r3, [pc, #116]	; (800c4ec <HAL_RCC_ClockConfig+0x358>)
 800c478:	6a1b      	ldr	r3, [r3, #32]
 800c47a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c47e:	429a      	cmp	r2, r3
 800c480:	d208      	bcs.n	800c494 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800c482:	4b1a      	ldr	r3, [pc, #104]	; (800c4ec <HAL_RCC_ClockConfig+0x358>)
 800c484:	6a1b      	ldr	r3, [r3, #32]
 800c486:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	69db      	ldr	r3, [r3, #28]
 800c48e:	4917      	ldr	r1, [pc, #92]	; (800c4ec <HAL_RCC_ClockConfig+0x358>)
 800c490:	4313      	orrs	r3, r2
 800c492:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800c494:	f000 f834 	bl	800c500 <HAL_RCC_GetSysClockFreq>
 800c498:	4602      	mov	r2, r0
 800c49a:	4b14      	ldr	r3, [pc, #80]	; (800c4ec <HAL_RCC_ClockConfig+0x358>)
 800c49c:	699b      	ldr	r3, [r3, #24]
 800c49e:	0a1b      	lsrs	r3, r3, #8
 800c4a0:	f003 030f 	and.w	r3, r3, #15
 800c4a4:	4912      	ldr	r1, [pc, #72]	; (800c4f0 <HAL_RCC_ClockConfig+0x35c>)
 800c4a6:	5ccb      	ldrb	r3, [r1, r3]
 800c4a8:	f003 031f 	and.w	r3, r3, #31
 800c4ac:	fa22 f303 	lsr.w	r3, r2, r3
 800c4b0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c4b2:	4b0e      	ldr	r3, [pc, #56]	; (800c4ec <HAL_RCC_ClockConfig+0x358>)
 800c4b4:	699b      	ldr	r3, [r3, #24]
 800c4b6:	f003 030f 	and.w	r3, r3, #15
 800c4ba:	4a0d      	ldr	r2, [pc, #52]	; (800c4f0 <HAL_RCC_ClockConfig+0x35c>)
 800c4bc:	5cd3      	ldrb	r3, [r2, r3]
 800c4be:	f003 031f 	and.w	r3, r3, #31
 800c4c2:	693a      	ldr	r2, [r7, #16]
 800c4c4:	fa22 f303 	lsr.w	r3, r2, r3
 800c4c8:	4a0a      	ldr	r2, [pc, #40]	; (800c4f4 <HAL_RCC_ClockConfig+0x360>)
 800c4ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c4cc:	4a0a      	ldr	r2, [pc, #40]	; (800c4f8 <HAL_RCC_ClockConfig+0x364>)
 800c4ce:	693b      	ldr	r3, [r7, #16]
 800c4d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800c4d2:	4b0a      	ldr	r3, [pc, #40]	; (800c4fc <HAL_RCC_ClockConfig+0x368>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	f7fa fe5a 	bl	8007190 <HAL_InitTick>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800c4e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	3718      	adds	r7, #24
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bd80      	pop	{r7, pc}
 800c4ea:	bf00      	nop
 800c4ec:	58024400 	.word	0x58024400
 800c4f0:	080145d4 	.word	0x080145d4
 800c4f4:	24000004 	.word	0x24000004
 800c4f8:	24000000 	.word	0x24000000
 800c4fc:	24000008 	.word	0x24000008

0800c500 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c500:	b480      	push	{r7}
 800c502:	b089      	sub	sp, #36	; 0x24
 800c504:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c506:	4bb3      	ldr	r3, [pc, #716]	; (800c7d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c508:	691b      	ldr	r3, [r3, #16]
 800c50a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c50e:	2b18      	cmp	r3, #24
 800c510:	f200 8155 	bhi.w	800c7be <HAL_RCC_GetSysClockFreq+0x2be>
 800c514:	a201      	add	r2, pc, #4	; (adr r2, 800c51c <HAL_RCC_GetSysClockFreq+0x1c>)
 800c516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c51a:	bf00      	nop
 800c51c:	0800c581 	.word	0x0800c581
 800c520:	0800c7bf 	.word	0x0800c7bf
 800c524:	0800c7bf 	.word	0x0800c7bf
 800c528:	0800c7bf 	.word	0x0800c7bf
 800c52c:	0800c7bf 	.word	0x0800c7bf
 800c530:	0800c7bf 	.word	0x0800c7bf
 800c534:	0800c7bf 	.word	0x0800c7bf
 800c538:	0800c7bf 	.word	0x0800c7bf
 800c53c:	0800c5a7 	.word	0x0800c5a7
 800c540:	0800c7bf 	.word	0x0800c7bf
 800c544:	0800c7bf 	.word	0x0800c7bf
 800c548:	0800c7bf 	.word	0x0800c7bf
 800c54c:	0800c7bf 	.word	0x0800c7bf
 800c550:	0800c7bf 	.word	0x0800c7bf
 800c554:	0800c7bf 	.word	0x0800c7bf
 800c558:	0800c7bf 	.word	0x0800c7bf
 800c55c:	0800c5ad 	.word	0x0800c5ad
 800c560:	0800c7bf 	.word	0x0800c7bf
 800c564:	0800c7bf 	.word	0x0800c7bf
 800c568:	0800c7bf 	.word	0x0800c7bf
 800c56c:	0800c7bf 	.word	0x0800c7bf
 800c570:	0800c7bf 	.word	0x0800c7bf
 800c574:	0800c7bf 	.word	0x0800c7bf
 800c578:	0800c7bf 	.word	0x0800c7bf
 800c57c:	0800c5b3 	.word	0x0800c5b3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c580:	4b94      	ldr	r3, [pc, #592]	; (800c7d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	f003 0320 	and.w	r3, r3, #32
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d009      	beq.n	800c5a0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c58c:	4b91      	ldr	r3, [pc, #580]	; (800c7d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	08db      	lsrs	r3, r3, #3
 800c592:	f003 0303 	and.w	r3, r3, #3
 800c596:	4a90      	ldr	r2, [pc, #576]	; (800c7d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c598:	fa22 f303 	lsr.w	r3, r2, r3
 800c59c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800c59e:	e111      	b.n	800c7c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800c5a0:	4b8d      	ldr	r3, [pc, #564]	; (800c7d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c5a2:	61bb      	str	r3, [r7, #24]
    break;
 800c5a4:	e10e      	b.n	800c7c4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800c5a6:	4b8d      	ldr	r3, [pc, #564]	; (800c7dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c5a8:	61bb      	str	r3, [r7, #24]
    break;
 800c5aa:	e10b      	b.n	800c7c4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800c5ac:	4b8c      	ldr	r3, [pc, #560]	; (800c7e0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800c5ae:	61bb      	str	r3, [r7, #24]
    break;
 800c5b0:	e108      	b.n	800c7c4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c5b2:	4b88      	ldr	r3, [pc, #544]	; (800c7d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c5b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5b6:	f003 0303 	and.w	r3, r3, #3
 800c5ba:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800c5bc:	4b85      	ldr	r3, [pc, #532]	; (800c7d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c5be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5c0:	091b      	lsrs	r3, r3, #4
 800c5c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c5c6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800c5c8:	4b82      	ldr	r3, [pc, #520]	; (800c7d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c5ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5cc:	f003 0301 	and.w	r3, r3, #1
 800c5d0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800c5d2:	4b80      	ldr	r3, [pc, #512]	; (800c7d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c5d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5d6:	08db      	lsrs	r3, r3, #3
 800c5d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c5dc:	68fa      	ldr	r2, [r7, #12]
 800c5de:	fb02 f303 	mul.w	r3, r2, r3
 800c5e2:	ee07 3a90 	vmov	s15, r3
 800c5e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5ea:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800c5ee:	693b      	ldr	r3, [r7, #16]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	f000 80e1 	beq.w	800c7b8 <HAL_RCC_GetSysClockFreq+0x2b8>
 800c5f6:	697b      	ldr	r3, [r7, #20]
 800c5f8:	2b02      	cmp	r3, #2
 800c5fa:	f000 8083 	beq.w	800c704 <HAL_RCC_GetSysClockFreq+0x204>
 800c5fe:	697b      	ldr	r3, [r7, #20]
 800c600:	2b02      	cmp	r3, #2
 800c602:	f200 80a1 	bhi.w	800c748 <HAL_RCC_GetSysClockFreq+0x248>
 800c606:	697b      	ldr	r3, [r7, #20]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d003      	beq.n	800c614 <HAL_RCC_GetSysClockFreq+0x114>
 800c60c:	697b      	ldr	r3, [r7, #20]
 800c60e:	2b01      	cmp	r3, #1
 800c610:	d056      	beq.n	800c6c0 <HAL_RCC_GetSysClockFreq+0x1c0>
 800c612:	e099      	b.n	800c748 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c614:	4b6f      	ldr	r3, [pc, #444]	; (800c7d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	f003 0320 	and.w	r3, r3, #32
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d02d      	beq.n	800c67c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c620:	4b6c      	ldr	r3, [pc, #432]	; (800c7d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	08db      	lsrs	r3, r3, #3
 800c626:	f003 0303 	and.w	r3, r3, #3
 800c62a:	4a6b      	ldr	r2, [pc, #428]	; (800c7d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c62c:	fa22 f303 	lsr.w	r3, r2, r3
 800c630:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	ee07 3a90 	vmov	s15, r3
 800c638:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c63c:	693b      	ldr	r3, [r7, #16]
 800c63e:	ee07 3a90 	vmov	s15, r3
 800c642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c646:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c64a:	4b62      	ldr	r3, [pc, #392]	; (800c7d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c64c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c64e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c652:	ee07 3a90 	vmov	s15, r3
 800c656:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c65a:	ed97 6a02 	vldr	s12, [r7, #8]
 800c65e:	eddf 5a61 	vldr	s11, [pc, #388]	; 800c7e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c662:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c666:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c66a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c66e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c672:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c676:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800c67a:	e087      	b.n	800c78c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c67c:	693b      	ldr	r3, [r7, #16]
 800c67e:	ee07 3a90 	vmov	s15, r3
 800c682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c686:	eddf 6a58 	vldr	s13, [pc, #352]	; 800c7e8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800c68a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c68e:	4b51      	ldr	r3, [pc, #324]	; (800c7d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c692:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c696:	ee07 3a90 	vmov	s15, r3
 800c69a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c69e:	ed97 6a02 	vldr	s12, [r7, #8]
 800c6a2:	eddf 5a50 	vldr	s11, [pc, #320]	; 800c7e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c6a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c6aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c6ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c6b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c6be:	e065      	b.n	800c78c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c6c0:	693b      	ldr	r3, [r7, #16]
 800c6c2:	ee07 3a90 	vmov	s15, r3
 800c6c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6ca:	eddf 6a48 	vldr	s13, [pc, #288]	; 800c7ec <HAL_RCC_GetSysClockFreq+0x2ec>
 800c6ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c6d2:	4b40      	ldr	r3, [pc, #256]	; (800c7d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c6d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6da:	ee07 3a90 	vmov	s15, r3
 800c6de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6e2:	ed97 6a02 	vldr	s12, [r7, #8]
 800c6e6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800c7e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c6ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c6ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c6f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c6f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c702:	e043      	b.n	800c78c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c704:	693b      	ldr	r3, [r7, #16]
 800c706:	ee07 3a90 	vmov	s15, r3
 800c70a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c70e:	eddf 6a38 	vldr	s13, [pc, #224]	; 800c7f0 <HAL_RCC_GetSysClockFreq+0x2f0>
 800c712:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c716:	4b2f      	ldr	r3, [pc, #188]	; (800c7d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c71a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c71e:	ee07 3a90 	vmov	s15, r3
 800c722:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c726:	ed97 6a02 	vldr	s12, [r7, #8]
 800c72a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800c7e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c72e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c732:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c736:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c73a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c73e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c742:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c746:	e021      	b.n	800c78c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c748:	693b      	ldr	r3, [r7, #16]
 800c74a:	ee07 3a90 	vmov	s15, r3
 800c74e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c752:	eddf 6a26 	vldr	s13, [pc, #152]	; 800c7ec <HAL_RCC_GetSysClockFreq+0x2ec>
 800c756:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c75a:	4b1e      	ldr	r3, [pc, #120]	; (800c7d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c75c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c75e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c762:	ee07 3a90 	vmov	s15, r3
 800c766:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c76a:	ed97 6a02 	vldr	s12, [r7, #8]
 800c76e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800c7e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c772:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c776:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c77a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c77e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c782:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c786:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c78a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800c78c:	4b11      	ldr	r3, [pc, #68]	; (800c7d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c78e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c790:	0a5b      	lsrs	r3, r3, #9
 800c792:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c796:	3301      	adds	r3, #1
 800c798:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	ee07 3a90 	vmov	s15, r3
 800c7a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c7a4:	edd7 6a07 	vldr	s13, [r7, #28]
 800c7a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c7ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c7b0:	ee17 3a90 	vmov	r3, s15
 800c7b4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800c7b6:	e005      	b.n	800c7c4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	61bb      	str	r3, [r7, #24]
    break;
 800c7bc:	e002      	b.n	800c7c4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800c7be:	4b07      	ldr	r3, [pc, #28]	; (800c7dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c7c0:	61bb      	str	r3, [r7, #24]
    break;
 800c7c2:	bf00      	nop
  }

  return sysclockfreq;
 800c7c4:	69bb      	ldr	r3, [r7, #24]
}
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	3724      	adds	r7, #36	; 0x24
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d0:	4770      	bx	lr
 800c7d2:	bf00      	nop
 800c7d4:	58024400 	.word	0x58024400
 800c7d8:	03d09000 	.word	0x03d09000
 800c7dc:	003d0900 	.word	0x003d0900
 800c7e0:	01e84800 	.word	0x01e84800
 800c7e4:	46000000 	.word	0x46000000
 800c7e8:	4c742400 	.word	0x4c742400
 800c7ec:	4a742400 	.word	0x4a742400
 800c7f0:	4bf42400 	.word	0x4bf42400

0800c7f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b082      	sub	sp, #8
 800c7f8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800c7fa:	f7ff fe81 	bl	800c500 <HAL_RCC_GetSysClockFreq>
 800c7fe:	4602      	mov	r2, r0
 800c800:	4b10      	ldr	r3, [pc, #64]	; (800c844 <HAL_RCC_GetHCLKFreq+0x50>)
 800c802:	699b      	ldr	r3, [r3, #24]
 800c804:	0a1b      	lsrs	r3, r3, #8
 800c806:	f003 030f 	and.w	r3, r3, #15
 800c80a:	490f      	ldr	r1, [pc, #60]	; (800c848 <HAL_RCC_GetHCLKFreq+0x54>)
 800c80c:	5ccb      	ldrb	r3, [r1, r3]
 800c80e:	f003 031f 	and.w	r3, r3, #31
 800c812:	fa22 f303 	lsr.w	r3, r2, r3
 800c816:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c818:	4b0a      	ldr	r3, [pc, #40]	; (800c844 <HAL_RCC_GetHCLKFreq+0x50>)
 800c81a:	699b      	ldr	r3, [r3, #24]
 800c81c:	f003 030f 	and.w	r3, r3, #15
 800c820:	4a09      	ldr	r2, [pc, #36]	; (800c848 <HAL_RCC_GetHCLKFreq+0x54>)
 800c822:	5cd3      	ldrb	r3, [r2, r3]
 800c824:	f003 031f 	and.w	r3, r3, #31
 800c828:	687a      	ldr	r2, [r7, #4]
 800c82a:	fa22 f303 	lsr.w	r3, r2, r3
 800c82e:	4a07      	ldr	r2, [pc, #28]	; (800c84c <HAL_RCC_GetHCLKFreq+0x58>)
 800c830:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c832:	4a07      	ldr	r2, [pc, #28]	; (800c850 <HAL_RCC_GetHCLKFreq+0x5c>)
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800c838:	4b04      	ldr	r3, [pc, #16]	; (800c84c <HAL_RCC_GetHCLKFreq+0x58>)
 800c83a:	681b      	ldr	r3, [r3, #0]
}
 800c83c:	4618      	mov	r0, r3
 800c83e:	3708      	adds	r7, #8
 800c840:	46bd      	mov	sp, r7
 800c842:	bd80      	pop	{r7, pc}
 800c844:	58024400 	.word	0x58024400
 800c848:	080145d4 	.word	0x080145d4
 800c84c:	24000004 	.word	0x24000004
 800c850:	24000000 	.word	0x24000000

0800c854 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c854:	b580      	push	{r7, lr}
 800c856:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800c858:	f7ff ffcc 	bl	800c7f4 <HAL_RCC_GetHCLKFreq>
 800c85c:	4602      	mov	r2, r0
 800c85e:	4b06      	ldr	r3, [pc, #24]	; (800c878 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c860:	69db      	ldr	r3, [r3, #28]
 800c862:	091b      	lsrs	r3, r3, #4
 800c864:	f003 0307 	and.w	r3, r3, #7
 800c868:	4904      	ldr	r1, [pc, #16]	; (800c87c <HAL_RCC_GetPCLK1Freq+0x28>)
 800c86a:	5ccb      	ldrb	r3, [r1, r3]
 800c86c:	f003 031f 	and.w	r3, r3, #31
 800c870:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800c874:	4618      	mov	r0, r3
 800c876:	bd80      	pop	{r7, pc}
 800c878:	58024400 	.word	0x58024400
 800c87c:	080145d4 	.word	0x080145d4

0800c880 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800c884:	f7ff ffb6 	bl	800c7f4 <HAL_RCC_GetHCLKFreq>
 800c888:	4602      	mov	r2, r0
 800c88a:	4b06      	ldr	r3, [pc, #24]	; (800c8a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c88c:	69db      	ldr	r3, [r3, #28]
 800c88e:	0a1b      	lsrs	r3, r3, #8
 800c890:	f003 0307 	and.w	r3, r3, #7
 800c894:	4904      	ldr	r1, [pc, #16]	; (800c8a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 800c896:	5ccb      	ldrb	r3, [r1, r3]
 800c898:	f003 031f 	and.w	r3, r3, #31
 800c89c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	bd80      	pop	{r7, pc}
 800c8a4:	58024400 	.word	0x58024400
 800c8a8:	080145d4 	.word	0x080145d4

0800c8ac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b086      	sub	sp, #24
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d03f      	beq.n	800c948 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c8cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c8d0:	d02a      	beq.n	800c928 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800c8d2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c8d6:	d824      	bhi.n	800c922 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800c8d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c8dc:	d018      	beq.n	800c910 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800c8de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c8e2:	d81e      	bhi.n	800c922 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d003      	beq.n	800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800c8e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c8ec:	d007      	beq.n	800c8fe <HAL_RCCEx_PeriphCLKConfig+0x52>
 800c8ee:	e018      	b.n	800c922 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c8f0:	4ba3      	ldr	r3, [pc, #652]	; (800cb80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c8f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8f4:	4aa2      	ldr	r2, [pc, #648]	; (800cb80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c8f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c8fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800c8fc:	e015      	b.n	800c92a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	3304      	adds	r3, #4
 800c902:	2102      	movs	r1, #2
 800c904:	4618      	mov	r0, r3
 800c906:	f001 f9d5 	bl	800dcb4 <RCCEx_PLL2_Config>
 800c90a:	4603      	mov	r3, r0
 800c90c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800c90e:	e00c      	b.n	800c92a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	3324      	adds	r3, #36	; 0x24
 800c914:	2102      	movs	r1, #2
 800c916:	4618      	mov	r0, r3
 800c918:	f001 fa7e 	bl	800de18 <RCCEx_PLL3_Config>
 800c91c:	4603      	mov	r3, r0
 800c91e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800c920:	e003      	b.n	800c92a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c922:	2301      	movs	r3, #1
 800c924:	75fb      	strb	r3, [r7, #23]
      break;
 800c926:	e000      	b.n	800c92a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800c928:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c92a:	7dfb      	ldrb	r3, [r7, #23]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d109      	bne.n	800c944 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800c930:	4b93      	ldr	r3, [pc, #588]	; (800cb80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c934:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c93c:	4990      	ldr	r1, [pc, #576]	; (800cb80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c93e:	4313      	orrs	r3, r2
 800c940:	650b      	str	r3, [r1, #80]	; 0x50
 800c942:	e001      	b.n	800c948 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c944:	7dfb      	ldrb	r3, [r7, #23]
 800c946:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c950:	2b00      	cmp	r3, #0
 800c952:	d03d      	beq.n	800c9d0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c958:	2b04      	cmp	r3, #4
 800c95a:	d826      	bhi.n	800c9aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800c95c:	a201      	add	r2, pc, #4	; (adr r2, 800c964 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800c95e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c962:	bf00      	nop
 800c964:	0800c979 	.word	0x0800c979
 800c968:	0800c987 	.word	0x0800c987
 800c96c:	0800c999 	.word	0x0800c999
 800c970:	0800c9b1 	.word	0x0800c9b1
 800c974:	0800c9b1 	.word	0x0800c9b1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c978:	4b81      	ldr	r3, [pc, #516]	; (800cb80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c97a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c97c:	4a80      	ldr	r2, [pc, #512]	; (800cb80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c97e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c982:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c984:	e015      	b.n	800c9b2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	3304      	adds	r3, #4
 800c98a:	2100      	movs	r1, #0
 800c98c:	4618      	mov	r0, r3
 800c98e:	f001 f991 	bl	800dcb4 <RCCEx_PLL2_Config>
 800c992:	4603      	mov	r3, r0
 800c994:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c996:	e00c      	b.n	800c9b2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	3324      	adds	r3, #36	; 0x24
 800c99c:	2100      	movs	r1, #0
 800c99e:	4618      	mov	r0, r3
 800c9a0:	f001 fa3a 	bl	800de18 <RCCEx_PLL3_Config>
 800c9a4:	4603      	mov	r3, r0
 800c9a6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c9a8:	e003      	b.n	800c9b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c9aa:	2301      	movs	r3, #1
 800c9ac:	75fb      	strb	r3, [r7, #23]
      break;
 800c9ae:	e000      	b.n	800c9b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800c9b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c9b2:	7dfb      	ldrb	r3, [r7, #23]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d109      	bne.n	800c9cc <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c9b8:	4b71      	ldr	r3, [pc, #452]	; (800cb80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c9ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c9bc:	f023 0207 	bic.w	r2, r3, #7
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9c4:	496e      	ldr	r1, [pc, #440]	; (800cb80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c9c6:	4313      	orrs	r3, r2
 800c9c8:	650b      	str	r3, [r1, #80]	; 0x50
 800c9ca:	e001      	b.n	800c9d0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c9cc:	7dfb      	ldrb	r3, [r7, #23]
 800c9ce:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d042      	beq.n	800ca62 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c9e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9e4:	d02b      	beq.n	800ca3e <HAL_RCCEx_PeriphCLKConfig+0x192>
 800c9e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9ea:	d825      	bhi.n	800ca38 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800c9ec:	2bc0      	cmp	r3, #192	; 0xc0
 800c9ee:	d028      	beq.n	800ca42 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800c9f0:	2bc0      	cmp	r3, #192	; 0xc0
 800c9f2:	d821      	bhi.n	800ca38 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800c9f4:	2b80      	cmp	r3, #128	; 0x80
 800c9f6:	d016      	beq.n	800ca26 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800c9f8:	2b80      	cmp	r3, #128	; 0x80
 800c9fa:	d81d      	bhi.n	800ca38 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d002      	beq.n	800ca06 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800ca00:	2b40      	cmp	r3, #64	; 0x40
 800ca02:	d007      	beq.n	800ca14 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800ca04:	e018      	b.n	800ca38 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ca06:	4b5e      	ldr	r3, [pc, #376]	; (800cb80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ca08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca0a:	4a5d      	ldr	r2, [pc, #372]	; (800cb80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ca0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ca10:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800ca12:	e017      	b.n	800ca44 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	3304      	adds	r3, #4
 800ca18:	2100      	movs	r1, #0
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	f001 f94a 	bl	800dcb4 <RCCEx_PLL2_Config>
 800ca20:	4603      	mov	r3, r0
 800ca22:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800ca24:	e00e      	b.n	800ca44 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	3324      	adds	r3, #36	; 0x24
 800ca2a:	2100      	movs	r1, #0
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	f001 f9f3 	bl	800de18 <RCCEx_PLL3_Config>
 800ca32:	4603      	mov	r3, r0
 800ca34:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800ca36:	e005      	b.n	800ca44 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ca38:	2301      	movs	r3, #1
 800ca3a:	75fb      	strb	r3, [r7, #23]
      break;
 800ca3c:	e002      	b.n	800ca44 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800ca3e:	bf00      	nop
 800ca40:	e000      	b.n	800ca44 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800ca42:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ca44:	7dfb      	ldrb	r3, [r7, #23]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d109      	bne.n	800ca5e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800ca4a:	4b4d      	ldr	r3, [pc, #308]	; (800cb80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ca4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca4e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca56:	494a      	ldr	r1, [pc, #296]	; (800cb80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ca58:	4313      	orrs	r3, r2
 800ca5a:	650b      	str	r3, [r1, #80]	; 0x50
 800ca5c:	e001      	b.n	800ca62 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca5e:	7dfb      	ldrb	r3, [r7, #23]
 800ca60:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d049      	beq.n	800cb02 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ca74:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ca78:	d030      	beq.n	800cadc <HAL_RCCEx_PeriphCLKConfig+0x230>
 800ca7a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ca7e:	d82a      	bhi.n	800cad6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800ca80:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ca84:	d02c      	beq.n	800cae0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800ca86:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ca8a:	d824      	bhi.n	800cad6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800ca8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ca90:	d018      	beq.n	800cac4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800ca92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ca96:	d81e      	bhi.n	800cad6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d003      	beq.n	800caa4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800ca9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800caa0:	d007      	beq.n	800cab2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800caa2:	e018      	b.n	800cad6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800caa4:	4b36      	ldr	r3, [pc, #216]	; (800cb80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800caa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caa8:	4a35      	ldr	r2, [pc, #212]	; (800cb80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800caaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800caae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800cab0:	e017      	b.n	800cae2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	3304      	adds	r3, #4
 800cab6:	2100      	movs	r1, #0
 800cab8:	4618      	mov	r0, r3
 800caba:	f001 f8fb 	bl	800dcb4 <RCCEx_PLL2_Config>
 800cabe:	4603      	mov	r3, r0
 800cac0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800cac2:	e00e      	b.n	800cae2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	3324      	adds	r3, #36	; 0x24
 800cac8:	2100      	movs	r1, #0
 800caca:	4618      	mov	r0, r3
 800cacc:	f001 f9a4 	bl	800de18 <RCCEx_PLL3_Config>
 800cad0:	4603      	mov	r3, r0
 800cad2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800cad4:	e005      	b.n	800cae2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800cad6:	2301      	movs	r3, #1
 800cad8:	75fb      	strb	r3, [r7, #23]
      break;
 800cada:	e002      	b.n	800cae2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800cadc:	bf00      	nop
 800cade:	e000      	b.n	800cae2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800cae0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cae2:	7dfb      	ldrb	r3, [r7, #23]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d10a      	bne.n	800cafe <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800cae8:	4b25      	ldr	r3, [pc, #148]	; (800cb80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800caea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800caec:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800caf6:	4922      	ldr	r1, [pc, #136]	; (800cb80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800caf8:	4313      	orrs	r3, r2
 800cafa:	658b      	str	r3, [r1, #88]	; 0x58
 800cafc:	e001      	b.n	800cb02 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cafe:	7dfb      	ldrb	r3, [r7, #23]
 800cb00:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d04b      	beq.n	800cba6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800cb14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cb18:	d030      	beq.n	800cb7c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800cb1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cb1e:	d82a      	bhi.n	800cb76 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800cb20:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cb24:	d02e      	beq.n	800cb84 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800cb26:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cb2a:	d824      	bhi.n	800cb76 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800cb2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cb30:	d018      	beq.n	800cb64 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800cb32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cb36:	d81e      	bhi.n	800cb76 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d003      	beq.n	800cb44 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800cb3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cb40:	d007      	beq.n	800cb52 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800cb42:	e018      	b.n	800cb76 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cb44:	4b0e      	ldr	r3, [pc, #56]	; (800cb80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800cb46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb48:	4a0d      	ldr	r2, [pc, #52]	; (800cb80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800cb4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cb4e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800cb50:	e019      	b.n	800cb86 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	3304      	adds	r3, #4
 800cb56:	2100      	movs	r1, #0
 800cb58:	4618      	mov	r0, r3
 800cb5a:	f001 f8ab 	bl	800dcb4 <RCCEx_PLL2_Config>
 800cb5e:	4603      	mov	r3, r0
 800cb60:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800cb62:	e010      	b.n	800cb86 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	3324      	adds	r3, #36	; 0x24
 800cb68:	2100      	movs	r1, #0
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	f001 f954 	bl	800de18 <RCCEx_PLL3_Config>
 800cb70:	4603      	mov	r3, r0
 800cb72:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800cb74:	e007      	b.n	800cb86 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800cb76:	2301      	movs	r3, #1
 800cb78:	75fb      	strb	r3, [r7, #23]
      break;
 800cb7a:	e004      	b.n	800cb86 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800cb7c:	bf00      	nop
 800cb7e:	e002      	b.n	800cb86 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800cb80:	58024400 	.word	0x58024400
      break;
 800cb84:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cb86:	7dfb      	ldrb	r3, [r7, #23]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d10a      	bne.n	800cba2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800cb8c:	4b99      	ldr	r3, [pc, #612]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800cb8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb90:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800cb9a:	4996      	ldr	r1, [pc, #600]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800cb9c:	4313      	orrs	r3, r2
 800cb9e:	658b      	str	r3, [r1, #88]	; 0x58
 800cba0:	e001      	b.n	800cba6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cba2:	7dfb      	ldrb	r3, [r7, #23]
 800cba4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d032      	beq.n	800cc18 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cbb6:	2b30      	cmp	r3, #48	; 0x30
 800cbb8:	d01c      	beq.n	800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800cbba:	2b30      	cmp	r3, #48	; 0x30
 800cbbc:	d817      	bhi.n	800cbee <HAL_RCCEx_PeriphCLKConfig+0x342>
 800cbbe:	2b20      	cmp	r3, #32
 800cbc0:	d00c      	beq.n	800cbdc <HAL_RCCEx_PeriphCLKConfig+0x330>
 800cbc2:	2b20      	cmp	r3, #32
 800cbc4:	d813      	bhi.n	800cbee <HAL_RCCEx_PeriphCLKConfig+0x342>
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d016      	beq.n	800cbf8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800cbca:	2b10      	cmp	r3, #16
 800cbcc:	d10f      	bne.n	800cbee <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cbce:	4b89      	ldr	r3, [pc, #548]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800cbd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbd2:	4a88      	ldr	r2, [pc, #544]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800cbd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cbd8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800cbda:	e00e      	b.n	800cbfa <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	3304      	adds	r3, #4
 800cbe0:	2102      	movs	r1, #2
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	f001 f866 	bl	800dcb4 <RCCEx_PLL2_Config>
 800cbe8:	4603      	mov	r3, r0
 800cbea:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800cbec:	e005      	b.n	800cbfa <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800cbee:	2301      	movs	r3, #1
 800cbf0:	75fb      	strb	r3, [r7, #23]
      break;
 800cbf2:	e002      	b.n	800cbfa <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800cbf4:	bf00      	nop
 800cbf6:	e000      	b.n	800cbfa <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800cbf8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cbfa:	7dfb      	ldrb	r3, [r7, #23]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d109      	bne.n	800cc14 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800cc00:	4b7c      	ldr	r3, [pc, #496]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800cc02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc04:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cc0c:	4979      	ldr	r1, [pc, #484]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800cc0e:	4313      	orrs	r3, r2
 800cc10:	64cb      	str	r3, [r1, #76]	; 0x4c
 800cc12:	e001      	b.n	800cc18 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc14:	7dfb      	ldrb	r3, [r7, #23]
 800cc16:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d047      	beq.n	800ccb4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cc28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cc2c:	d030      	beq.n	800cc90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800cc2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cc32:	d82a      	bhi.n	800cc8a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800cc34:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cc38:	d02c      	beq.n	800cc94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800cc3a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cc3e:	d824      	bhi.n	800cc8a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800cc40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cc44:	d018      	beq.n	800cc78 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800cc46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cc4a:	d81e      	bhi.n	800cc8a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d003      	beq.n	800cc58 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800cc50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cc54:	d007      	beq.n	800cc66 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800cc56:	e018      	b.n	800cc8a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cc58:	4b66      	ldr	r3, [pc, #408]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800cc5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc5c:	4a65      	ldr	r2, [pc, #404]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800cc5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cc62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800cc64:	e017      	b.n	800cc96 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	3304      	adds	r3, #4
 800cc6a:	2100      	movs	r1, #0
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	f001 f821 	bl	800dcb4 <RCCEx_PLL2_Config>
 800cc72:	4603      	mov	r3, r0
 800cc74:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800cc76:	e00e      	b.n	800cc96 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	3324      	adds	r3, #36	; 0x24
 800cc7c:	2100      	movs	r1, #0
 800cc7e:	4618      	mov	r0, r3
 800cc80:	f001 f8ca 	bl	800de18 <RCCEx_PLL3_Config>
 800cc84:	4603      	mov	r3, r0
 800cc86:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800cc88:	e005      	b.n	800cc96 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cc8a:	2301      	movs	r3, #1
 800cc8c:	75fb      	strb	r3, [r7, #23]
      break;
 800cc8e:	e002      	b.n	800cc96 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800cc90:	bf00      	nop
 800cc92:	e000      	b.n	800cc96 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800cc94:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cc96:	7dfb      	ldrb	r3, [r7, #23]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d109      	bne.n	800ccb0 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800cc9c:	4b55      	ldr	r3, [pc, #340]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800cc9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cca0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cca8:	4952      	ldr	r1, [pc, #328]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800ccaa:	4313      	orrs	r3, r2
 800ccac:	650b      	str	r3, [r1, #80]	; 0x50
 800ccae:	e001      	b.n	800ccb4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ccb0:	7dfb      	ldrb	r3, [r7, #23]
 800ccb2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d049      	beq.n	800cd54 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ccc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ccc8:	d02e      	beq.n	800cd28 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800ccca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ccce:	d828      	bhi.n	800cd22 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800ccd0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ccd4:	d02a      	beq.n	800cd2c <HAL_RCCEx_PeriphCLKConfig+0x480>
 800ccd6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ccda:	d822      	bhi.n	800cd22 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800ccdc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cce0:	d026      	beq.n	800cd30 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800cce2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cce6:	d81c      	bhi.n	800cd22 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800cce8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ccec:	d010      	beq.n	800cd10 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800ccee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ccf2:	d816      	bhi.n	800cd22 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d01d      	beq.n	800cd34 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800ccf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ccfc:	d111      	bne.n	800cd22 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	3304      	adds	r3, #4
 800cd02:	2101      	movs	r1, #1
 800cd04:	4618      	mov	r0, r3
 800cd06:	f000 ffd5 	bl	800dcb4 <RCCEx_PLL2_Config>
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800cd0e:	e012      	b.n	800cd36 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	3324      	adds	r3, #36	; 0x24
 800cd14:	2101      	movs	r1, #1
 800cd16:	4618      	mov	r0, r3
 800cd18:	f001 f87e 	bl	800de18 <RCCEx_PLL3_Config>
 800cd1c:	4603      	mov	r3, r0
 800cd1e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800cd20:	e009      	b.n	800cd36 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cd22:	2301      	movs	r3, #1
 800cd24:	75fb      	strb	r3, [r7, #23]
      break;
 800cd26:	e006      	b.n	800cd36 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800cd28:	bf00      	nop
 800cd2a:	e004      	b.n	800cd36 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800cd2c:	bf00      	nop
 800cd2e:	e002      	b.n	800cd36 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800cd30:	bf00      	nop
 800cd32:	e000      	b.n	800cd36 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800cd34:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cd36:	7dfb      	ldrb	r3, [r7, #23]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d109      	bne.n	800cd50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800cd3c:	4b2d      	ldr	r3, [pc, #180]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800cd3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd40:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd48:	492a      	ldr	r1, [pc, #168]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800cd4a:	4313      	orrs	r3, r2
 800cd4c:	650b      	str	r3, [r1, #80]	; 0x50
 800cd4e:	e001      	b.n	800cd54 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd50:	7dfb      	ldrb	r3, [r7, #23]
 800cd52:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d04d      	beq.n	800cdfc <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800cd66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cd6a:	d02e      	beq.n	800cdca <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800cd6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cd70:	d828      	bhi.n	800cdc4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800cd72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd76:	d02a      	beq.n	800cdce <HAL_RCCEx_PeriphCLKConfig+0x522>
 800cd78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd7c:	d822      	bhi.n	800cdc4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800cd7e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cd82:	d026      	beq.n	800cdd2 <HAL_RCCEx_PeriphCLKConfig+0x526>
 800cd84:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cd88:	d81c      	bhi.n	800cdc4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800cd8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd8e:	d010      	beq.n	800cdb2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800cd90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd94:	d816      	bhi.n	800cdc4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d01d      	beq.n	800cdd6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800cd9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cd9e:	d111      	bne.n	800cdc4 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	3304      	adds	r3, #4
 800cda4:	2101      	movs	r1, #1
 800cda6:	4618      	mov	r0, r3
 800cda8:	f000 ff84 	bl	800dcb4 <RCCEx_PLL2_Config>
 800cdac:	4603      	mov	r3, r0
 800cdae:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800cdb0:	e012      	b.n	800cdd8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	3324      	adds	r3, #36	; 0x24
 800cdb6:	2101      	movs	r1, #1
 800cdb8:	4618      	mov	r0, r3
 800cdba:	f001 f82d 	bl	800de18 <RCCEx_PLL3_Config>
 800cdbe:	4603      	mov	r3, r0
 800cdc0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800cdc2:	e009      	b.n	800cdd8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800cdc4:	2301      	movs	r3, #1
 800cdc6:	75fb      	strb	r3, [r7, #23]
      break;
 800cdc8:	e006      	b.n	800cdd8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800cdca:	bf00      	nop
 800cdcc:	e004      	b.n	800cdd8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800cdce:	bf00      	nop
 800cdd0:	e002      	b.n	800cdd8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800cdd2:	bf00      	nop
 800cdd4:	e000      	b.n	800cdd8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800cdd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cdd8:	7dfb      	ldrb	r3, [r7, #23]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d10c      	bne.n	800cdf8 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800cdde:	4b05      	ldr	r3, [pc, #20]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800cde0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cde2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800cdec:	4901      	ldr	r1, [pc, #4]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800cdee:	4313      	orrs	r3, r2
 800cdf0:	658b      	str	r3, [r1, #88]	; 0x58
 800cdf2:	e003      	b.n	800cdfc <HAL_RCCEx_PeriphCLKConfig+0x550>
 800cdf4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cdf8:	7dfb      	ldrb	r3, [r7, #23]
 800cdfa:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d02f      	beq.n	800ce68 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce10:	d00e      	beq.n	800ce30 <HAL_RCCEx_PeriphCLKConfig+0x584>
 800ce12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce16:	d814      	bhi.n	800ce42 <HAL_RCCEx_PeriphCLKConfig+0x596>
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d015      	beq.n	800ce48 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800ce1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ce20:	d10f      	bne.n	800ce42 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ce22:	4baf      	ldr	r3, [pc, #700]	; (800d0e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ce24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce26:	4aae      	ldr	r2, [pc, #696]	; (800d0e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ce28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ce2c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800ce2e:	e00c      	b.n	800ce4a <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	3304      	adds	r3, #4
 800ce34:	2101      	movs	r1, #1
 800ce36:	4618      	mov	r0, r3
 800ce38:	f000 ff3c 	bl	800dcb4 <RCCEx_PLL2_Config>
 800ce3c:	4603      	mov	r3, r0
 800ce3e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800ce40:	e003      	b.n	800ce4a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ce42:	2301      	movs	r3, #1
 800ce44:	75fb      	strb	r3, [r7, #23]
      break;
 800ce46:	e000      	b.n	800ce4a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800ce48:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ce4a:	7dfb      	ldrb	r3, [r7, #23]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d109      	bne.n	800ce64 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ce50:	4ba3      	ldr	r3, [pc, #652]	; (800d0e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ce52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce54:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce5c:	49a0      	ldr	r1, [pc, #640]	; (800d0e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ce5e:	4313      	orrs	r3, r2
 800ce60:	650b      	str	r3, [r1, #80]	; 0x50
 800ce62:	e001      	b.n	800ce68 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce64:	7dfb      	ldrb	r3, [r7, #23]
 800ce66:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d032      	beq.n	800ceda <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce78:	2b03      	cmp	r3, #3
 800ce7a:	d81b      	bhi.n	800ceb4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800ce7c:	a201      	add	r2, pc, #4	; (adr r2, 800ce84 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800ce7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce82:	bf00      	nop
 800ce84:	0800cebb 	.word	0x0800cebb
 800ce88:	0800ce95 	.word	0x0800ce95
 800ce8c:	0800cea3 	.word	0x0800cea3
 800ce90:	0800cebb 	.word	0x0800cebb
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ce94:	4b92      	ldr	r3, [pc, #584]	; (800d0e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ce96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce98:	4a91      	ldr	r2, [pc, #580]	; (800d0e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ce9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ce9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800cea0:	e00c      	b.n	800cebc <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	3304      	adds	r3, #4
 800cea6:	2102      	movs	r1, #2
 800cea8:	4618      	mov	r0, r3
 800ceaa:	f000 ff03 	bl	800dcb4 <RCCEx_PLL2_Config>
 800ceae:	4603      	mov	r3, r0
 800ceb0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800ceb2:	e003      	b.n	800cebc <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800ceb4:	2301      	movs	r3, #1
 800ceb6:	75fb      	strb	r3, [r7, #23]
      break;
 800ceb8:	e000      	b.n	800cebc <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800ceba:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cebc:	7dfb      	ldrb	r3, [r7, #23]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d109      	bne.n	800ced6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800cec2:	4b87      	ldr	r3, [pc, #540]	; (800d0e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800cec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cec6:	f023 0203 	bic.w	r2, r3, #3
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cece:	4984      	ldr	r1, [pc, #528]	; (800d0e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ced0:	4313      	orrs	r3, r2
 800ced2:	64cb      	str	r3, [r1, #76]	; 0x4c
 800ced4:	e001      	b.n	800ceda <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ced6:	7dfb      	ldrb	r3, [r7, #23]
 800ced8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	f000 8086 	beq.w	800cff4 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800cee8:	4b7e      	ldr	r3, [pc, #504]	; (800d0e4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	4a7d      	ldr	r2, [pc, #500]	; (800d0e4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800ceee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cef2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800cef4:	f7fa f996 	bl	8007224 <HAL_GetTick>
 800cef8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cefa:	e009      	b.n	800cf10 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cefc:	f7fa f992 	bl	8007224 <HAL_GetTick>
 800cf00:	4602      	mov	r2, r0
 800cf02:	693b      	ldr	r3, [r7, #16]
 800cf04:	1ad3      	subs	r3, r2, r3
 800cf06:	2b64      	cmp	r3, #100	; 0x64
 800cf08:	d902      	bls.n	800cf10 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800cf0a:	2303      	movs	r3, #3
 800cf0c:	75fb      	strb	r3, [r7, #23]
        break;
 800cf0e:	e005      	b.n	800cf1c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cf10:	4b74      	ldr	r3, [pc, #464]	; (800d0e4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d0ef      	beq.n	800cefc <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800cf1c:	7dfb      	ldrb	r3, [r7, #23]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d166      	bne.n	800cff0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800cf22:	4b6f      	ldr	r3, [pc, #444]	; (800d0e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800cf24:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800cf2c:	4053      	eors	r3, r2
 800cf2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d013      	beq.n	800cf5e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800cf36:	4b6a      	ldr	r3, [pc, #424]	; (800d0e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800cf38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cf3e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800cf40:	4b67      	ldr	r3, [pc, #412]	; (800d0e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800cf42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf44:	4a66      	ldr	r2, [pc, #408]	; (800d0e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800cf46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cf4a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800cf4c:	4b64      	ldr	r3, [pc, #400]	; (800d0e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800cf4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf50:	4a63      	ldr	r2, [pc, #396]	; (800d0e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800cf52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cf56:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800cf58:	4a61      	ldr	r2, [pc, #388]	; (800d0e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800cf64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf68:	d115      	bne.n	800cf96 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cf6a:	f7fa f95b 	bl	8007224 <HAL_GetTick>
 800cf6e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cf70:	e00b      	b.n	800cf8a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cf72:	f7fa f957 	bl	8007224 <HAL_GetTick>
 800cf76:	4602      	mov	r2, r0
 800cf78:	693b      	ldr	r3, [r7, #16]
 800cf7a:	1ad3      	subs	r3, r2, r3
 800cf7c:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf80:	4293      	cmp	r3, r2
 800cf82:	d902      	bls.n	800cf8a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800cf84:	2303      	movs	r3, #3
 800cf86:	75fb      	strb	r3, [r7, #23]
            break;
 800cf88:	e005      	b.n	800cf96 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cf8a:	4b55      	ldr	r3, [pc, #340]	; (800d0e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800cf8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf8e:	f003 0302 	and.w	r3, r3, #2
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d0ed      	beq.n	800cf72 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800cf96:	7dfb      	ldrb	r3, [r7, #23]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d126      	bne.n	800cfea <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800cfa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cfa6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cfaa:	d10d      	bne.n	800cfc8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800cfac:	4b4c      	ldr	r3, [pc, #304]	; (800d0e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800cfae:	691b      	ldr	r3, [r3, #16]
 800cfb0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800cfba:	0919      	lsrs	r1, r3, #4
 800cfbc:	4b4a      	ldr	r3, [pc, #296]	; (800d0e8 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800cfbe:	400b      	ands	r3, r1
 800cfc0:	4947      	ldr	r1, [pc, #284]	; (800d0e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800cfc2:	4313      	orrs	r3, r2
 800cfc4:	610b      	str	r3, [r1, #16]
 800cfc6:	e005      	b.n	800cfd4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800cfc8:	4b45      	ldr	r3, [pc, #276]	; (800d0e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800cfca:	691b      	ldr	r3, [r3, #16]
 800cfcc:	4a44      	ldr	r2, [pc, #272]	; (800d0e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800cfce:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800cfd2:	6113      	str	r3, [r2, #16]
 800cfd4:	4b42      	ldr	r3, [pc, #264]	; (800d0e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800cfd6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800cfde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cfe2:	493f      	ldr	r1, [pc, #252]	; (800d0e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800cfe4:	4313      	orrs	r3, r2
 800cfe6:	670b      	str	r3, [r1, #112]	; 0x70
 800cfe8:	e004      	b.n	800cff4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800cfea:	7dfb      	ldrb	r3, [r7, #23]
 800cfec:	75bb      	strb	r3, [r7, #22]
 800cfee:	e001      	b.n	800cff4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cff0:	7dfb      	ldrb	r3, [r7, #23]
 800cff2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	f003 0301 	and.w	r3, r3, #1
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	f000 8085 	beq.w	800d10c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d006:	2b28      	cmp	r3, #40	; 0x28
 800d008:	d866      	bhi.n	800d0d8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800d00a:	a201      	add	r2, pc, #4	; (adr r2, 800d010 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800d00c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d010:	0800d0ed 	.word	0x0800d0ed
 800d014:	0800d0d9 	.word	0x0800d0d9
 800d018:	0800d0d9 	.word	0x0800d0d9
 800d01c:	0800d0d9 	.word	0x0800d0d9
 800d020:	0800d0d9 	.word	0x0800d0d9
 800d024:	0800d0d9 	.word	0x0800d0d9
 800d028:	0800d0d9 	.word	0x0800d0d9
 800d02c:	0800d0d9 	.word	0x0800d0d9
 800d030:	0800d0b5 	.word	0x0800d0b5
 800d034:	0800d0d9 	.word	0x0800d0d9
 800d038:	0800d0d9 	.word	0x0800d0d9
 800d03c:	0800d0d9 	.word	0x0800d0d9
 800d040:	0800d0d9 	.word	0x0800d0d9
 800d044:	0800d0d9 	.word	0x0800d0d9
 800d048:	0800d0d9 	.word	0x0800d0d9
 800d04c:	0800d0d9 	.word	0x0800d0d9
 800d050:	0800d0c7 	.word	0x0800d0c7
 800d054:	0800d0d9 	.word	0x0800d0d9
 800d058:	0800d0d9 	.word	0x0800d0d9
 800d05c:	0800d0d9 	.word	0x0800d0d9
 800d060:	0800d0d9 	.word	0x0800d0d9
 800d064:	0800d0d9 	.word	0x0800d0d9
 800d068:	0800d0d9 	.word	0x0800d0d9
 800d06c:	0800d0d9 	.word	0x0800d0d9
 800d070:	0800d0ed 	.word	0x0800d0ed
 800d074:	0800d0d9 	.word	0x0800d0d9
 800d078:	0800d0d9 	.word	0x0800d0d9
 800d07c:	0800d0d9 	.word	0x0800d0d9
 800d080:	0800d0d9 	.word	0x0800d0d9
 800d084:	0800d0d9 	.word	0x0800d0d9
 800d088:	0800d0d9 	.word	0x0800d0d9
 800d08c:	0800d0d9 	.word	0x0800d0d9
 800d090:	0800d0ed 	.word	0x0800d0ed
 800d094:	0800d0d9 	.word	0x0800d0d9
 800d098:	0800d0d9 	.word	0x0800d0d9
 800d09c:	0800d0d9 	.word	0x0800d0d9
 800d0a0:	0800d0d9 	.word	0x0800d0d9
 800d0a4:	0800d0d9 	.word	0x0800d0d9
 800d0a8:	0800d0d9 	.word	0x0800d0d9
 800d0ac:	0800d0d9 	.word	0x0800d0d9
 800d0b0:	0800d0ed 	.word	0x0800d0ed
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	3304      	adds	r3, #4
 800d0b8:	2101      	movs	r1, #1
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	f000 fdfa 	bl	800dcb4 <RCCEx_PLL2_Config>
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800d0c4:	e013      	b.n	800d0ee <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	3324      	adds	r3, #36	; 0x24
 800d0ca:	2101      	movs	r1, #1
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	f000 fea3 	bl	800de18 <RCCEx_PLL3_Config>
 800d0d2:	4603      	mov	r3, r0
 800d0d4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800d0d6:	e00a      	b.n	800d0ee <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d0d8:	2301      	movs	r3, #1
 800d0da:	75fb      	strb	r3, [r7, #23]
      break;
 800d0dc:	e007      	b.n	800d0ee <HAL_RCCEx_PeriphCLKConfig+0x842>
 800d0de:	bf00      	nop
 800d0e0:	58024400 	.word	0x58024400
 800d0e4:	58024800 	.word	0x58024800
 800d0e8:	00ffffcf 	.word	0x00ffffcf
      break;
 800d0ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d0ee:	7dfb      	ldrb	r3, [r7, #23]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d109      	bne.n	800d108 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800d0f4:	4b96      	ldr	r3, [pc, #600]	; (800d350 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800d0f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d0f8:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d100:	4993      	ldr	r1, [pc, #588]	; (800d350 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800d102:	4313      	orrs	r3, r2
 800d104:	654b      	str	r3, [r1, #84]	; 0x54
 800d106:	e001      	b.n	800d10c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d108:	7dfb      	ldrb	r3, [r7, #23]
 800d10a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	f003 0302 	and.w	r3, r3, #2
 800d114:	2b00      	cmp	r3, #0
 800d116:	d038      	beq.n	800d18a <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d11c:	2b05      	cmp	r3, #5
 800d11e:	d821      	bhi.n	800d164 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800d120:	a201      	add	r2, pc, #4	; (adr r2, 800d128 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800d122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d126:	bf00      	nop
 800d128:	0800d16b 	.word	0x0800d16b
 800d12c:	0800d141 	.word	0x0800d141
 800d130:	0800d153 	.word	0x0800d153
 800d134:	0800d16b 	.word	0x0800d16b
 800d138:	0800d16b 	.word	0x0800d16b
 800d13c:	0800d16b 	.word	0x0800d16b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	3304      	adds	r3, #4
 800d144:	2101      	movs	r1, #1
 800d146:	4618      	mov	r0, r3
 800d148:	f000 fdb4 	bl	800dcb4 <RCCEx_PLL2_Config>
 800d14c:	4603      	mov	r3, r0
 800d14e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800d150:	e00c      	b.n	800d16c <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	3324      	adds	r3, #36	; 0x24
 800d156:	2101      	movs	r1, #1
 800d158:	4618      	mov	r0, r3
 800d15a:	f000 fe5d 	bl	800de18 <RCCEx_PLL3_Config>
 800d15e:	4603      	mov	r3, r0
 800d160:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800d162:	e003      	b.n	800d16c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d164:	2301      	movs	r3, #1
 800d166:	75fb      	strb	r3, [r7, #23]
      break;
 800d168:	e000      	b.n	800d16c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800d16a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d16c:	7dfb      	ldrb	r3, [r7, #23]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d109      	bne.n	800d186 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800d172:	4b77      	ldr	r3, [pc, #476]	; (800d350 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800d174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d176:	f023 0207 	bic.w	r2, r3, #7
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d17e:	4974      	ldr	r1, [pc, #464]	; (800d350 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800d180:	4313      	orrs	r3, r2
 800d182:	654b      	str	r3, [r1, #84]	; 0x54
 800d184:	e001      	b.n	800d18a <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d186:	7dfb      	ldrb	r3, [r7, #23]
 800d188:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	f003 0304 	and.w	r3, r3, #4
 800d192:	2b00      	cmp	r3, #0
 800d194:	d03a      	beq.n	800d20c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d19c:	2b05      	cmp	r3, #5
 800d19e:	d821      	bhi.n	800d1e4 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800d1a0:	a201      	add	r2, pc, #4	; (adr r2, 800d1a8 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800d1a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1a6:	bf00      	nop
 800d1a8:	0800d1eb 	.word	0x0800d1eb
 800d1ac:	0800d1c1 	.word	0x0800d1c1
 800d1b0:	0800d1d3 	.word	0x0800d1d3
 800d1b4:	0800d1eb 	.word	0x0800d1eb
 800d1b8:	0800d1eb 	.word	0x0800d1eb
 800d1bc:	0800d1eb 	.word	0x0800d1eb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	3304      	adds	r3, #4
 800d1c4:	2101      	movs	r1, #1
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	f000 fd74 	bl	800dcb4 <RCCEx_PLL2_Config>
 800d1cc:	4603      	mov	r3, r0
 800d1ce:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800d1d0:	e00c      	b.n	800d1ec <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	3324      	adds	r3, #36	; 0x24
 800d1d6:	2101      	movs	r1, #1
 800d1d8:	4618      	mov	r0, r3
 800d1da:	f000 fe1d 	bl	800de18 <RCCEx_PLL3_Config>
 800d1de:	4603      	mov	r3, r0
 800d1e0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800d1e2:	e003      	b.n	800d1ec <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d1e4:	2301      	movs	r3, #1
 800d1e6:	75fb      	strb	r3, [r7, #23]
      break;
 800d1e8:	e000      	b.n	800d1ec <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800d1ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d1ec:	7dfb      	ldrb	r3, [r7, #23]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d10a      	bne.n	800d208 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d1f2:	4b57      	ldr	r3, [pc, #348]	; (800d350 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800d1f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1f6:	f023 0207 	bic.w	r2, r3, #7
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d200:	4953      	ldr	r1, [pc, #332]	; (800d350 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800d202:	4313      	orrs	r3, r2
 800d204:	658b      	str	r3, [r1, #88]	; 0x58
 800d206:	e001      	b.n	800d20c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d208:	7dfb      	ldrb	r3, [r7, #23]
 800d20a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	f003 0320 	and.w	r3, r3, #32
 800d214:	2b00      	cmp	r3, #0
 800d216:	d04b      	beq.n	800d2b0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d21e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d222:	d02e      	beq.n	800d282 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800d224:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d228:	d828      	bhi.n	800d27c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800d22a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d22e:	d02a      	beq.n	800d286 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800d230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d234:	d822      	bhi.n	800d27c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800d236:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d23a:	d026      	beq.n	800d28a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800d23c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d240:	d81c      	bhi.n	800d27c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800d242:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d246:	d010      	beq.n	800d26a <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800d248:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d24c:	d816      	bhi.n	800d27c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d01d      	beq.n	800d28e <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800d252:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d256:	d111      	bne.n	800d27c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	3304      	adds	r3, #4
 800d25c:	2100      	movs	r1, #0
 800d25e:	4618      	mov	r0, r3
 800d260:	f000 fd28 	bl	800dcb4 <RCCEx_PLL2_Config>
 800d264:	4603      	mov	r3, r0
 800d266:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800d268:	e012      	b.n	800d290 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	3324      	adds	r3, #36	; 0x24
 800d26e:	2102      	movs	r1, #2
 800d270:	4618      	mov	r0, r3
 800d272:	f000 fdd1 	bl	800de18 <RCCEx_PLL3_Config>
 800d276:	4603      	mov	r3, r0
 800d278:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800d27a:	e009      	b.n	800d290 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d27c:	2301      	movs	r3, #1
 800d27e:	75fb      	strb	r3, [r7, #23]
      break;
 800d280:	e006      	b.n	800d290 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800d282:	bf00      	nop
 800d284:	e004      	b.n	800d290 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800d286:	bf00      	nop
 800d288:	e002      	b.n	800d290 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800d28a:	bf00      	nop
 800d28c:	e000      	b.n	800d290 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800d28e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d290:	7dfb      	ldrb	r3, [r7, #23]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d10a      	bne.n	800d2ac <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d296:	4b2e      	ldr	r3, [pc, #184]	; (800d350 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800d298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d29a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d2a4:	492a      	ldr	r1, [pc, #168]	; (800d350 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800d2a6:	4313      	orrs	r3, r2
 800d2a8:	654b      	str	r3, [r1, #84]	; 0x54
 800d2aa:	e001      	b.n	800d2b0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d2ac:	7dfb      	ldrb	r3, [r7, #23]
 800d2ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d04d      	beq.n	800d358 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d2c2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800d2c6:	d02e      	beq.n	800d326 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800d2c8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800d2cc:	d828      	bhi.n	800d320 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800d2ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d2d2:	d02a      	beq.n	800d32a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800d2d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d2d8:	d822      	bhi.n	800d320 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800d2da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d2de:	d026      	beq.n	800d32e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800d2e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d2e4:	d81c      	bhi.n	800d320 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800d2e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d2ea:	d010      	beq.n	800d30e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800d2ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d2f0:	d816      	bhi.n	800d320 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d01d      	beq.n	800d332 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800d2f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d2fa:	d111      	bne.n	800d320 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	3304      	adds	r3, #4
 800d300:	2100      	movs	r1, #0
 800d302:	4618      	mov	r0, r3
 800d304:	f000 fcd6 	bl	800dcb4 <RCCEx_PLL2_Config>
 800d308:	4603      	mov	r3, r0
 800d30a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800d30c:	e012      	b.n	800d334 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	3324      	adds	r3, #36	; 0x24
 800d312:	2102      	movs	r1, #2
 800d314:	4618      	mov	r0, r3
 800d316:	f000 fd7f 	bl	800de18 <RCCEx_PLL3_Config>
 800d31a:	4603      	mov	r3, r0
 800d31c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800d31e:	e009      	b.n	800d334 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d320:	2301      	movs	r3, #1
 800d322:	75fb      	strb	r3, [r7, #23]
      break;
 800d324:	e006      	b.n	800d334 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800d326:	bf00      	nop
 800d328:	e004      	b.n	800d334 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800d32a:	bf00      	nop
 800d32c:	e002      	b.n	800d334 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800d32e:	bf00      	nop
 800d330:	e000      	b.n	800d334 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800d332:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d334:	7dfb      	ldrb	r3, [r7, #23]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d10c      	bne.n	800d354 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d33a:	4b05      	ldr	r3, [pc, #20]	; (800d350 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800d33c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d33e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d348:	4901      	ldr	r1, [pc, #4]	; (800d350 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800d34a:	4313      	orrs	r3, r2
 800d34c:	658b      	str	r3, [r1, #88]	; 0x58
 800d34e:	e003      	b.n	800d358 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800d350:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d354:	7dfb      	ldrb	r3, [r7, #23]
 800d356:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d360:	2b00      	cmp	r3, #0
 800d362:	d04b      	beq.n	800d3fc <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d36a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800d36e:	d02e      	beq.n	800d3ce <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800d370:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800d374:	d828      	bhi.n	800d3c8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800d376:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d37a:	d02a      	beq.n	800d3d2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800d37c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d380:	d822      	bhi.n	800d3c8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800d382:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800d386:	d026      	beq.n	800d3d6 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800d388:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800d38c:	d81c      	bhi.n	800d3c8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800d38e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d392:	d010      	beq.n	800d3b6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800d394:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d398:	d816      	bhi.n	800d3c8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d01d      	beq.n	800d3da <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800d39e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d3a2:	d111      	bne.n	800d3c8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	3304      	adds	r3, #4
 800d3a8:	2100      	movs	r1, #0
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	f000 fc82 	bl	800dcb4 <RCCEx_PLL2_Config>
 800d3b0:	4603      	mov	r3, r0
 800d3b2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800d3b4:	e012      	b.n	800d3dc <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	3324      	adds	r3, #36	; 0x24
 800d3ba:	2102      	movs	r1, #2
 800d3bc:	4618      	mov	r0, r3
 800d3be:	f000 fd2b 	bl	800de18 <RCCEx_PLL3_Config>
 800d3c2:	4603      	mov	r3, r0
 800d3c4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800d3c6:	e009      	b.n	800d3dc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d3c8:	2301      	movs	r3, #1
 800d3ca:	75fb      	strb	r3, [r7, #23]
      break;
 800d3cc:	e006      	b.n	800d3dc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800d3ce:	bf00      	nop
 800d3d0:	e004      	b.n	800d3dc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800d3d2:	bf00      	nop
 800d3d4:	e002      	b.n	800d3dc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800d3d6:	bf00      	nop
 800d3d8:	e000      	b.n	800d3dc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800d3da:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d3dc:	7dfb      	ldrb	r3, [r7, #23]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d10a      	bne.n	800d3f8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800d3e2:	4b9d      	ldr	r3, [pc, #628]	; (800d658 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d3e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d3e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d3f0:	4999      	ldr	r1, [pc, #612]	; (800d658 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d3f2:	4313      	orrs	r3, r2
 800d3f4:	658b      	str	r3, [r1, #88]	; 0x58
 800d3f6:	e001      	b.n	800d3fc <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d3f8:	7dfb      	ldrb	r3, [r7, #23]
 800d3fa:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	f003 0308 	and.w	r3, r3, #8
 800d404:	2b00      	cmp	r3, #0
 800d406:	d01a      	beq.n	800d43e <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d40e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d412:	d10a      	bne.n	800d42a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	3324      	adds	r3, #36	; 0x24
 800d418:	2102      	movs	r1, #2
 800d41a:	4618      	mov	r0, r3
 800d41c:	f000 fcfc 	bl	800de18 <RCCEx_PLL3_Config>
 800d420:	4603      	mov	r3, r0
 800d422:	2b00      	cmp	r3, #0
 800d424:	d001      	beq.n	800d42a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800d426:	2301      	movs	r3, #1
 800d428:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800d42a:	4b8b      	ldr	r3, [pc, #556]	; (800d658 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d42c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d42e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d438:	4987      	ldr	r1, [pc, #540]	; (800d658 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d43a:	4313      	orrs	r3, r2
 800d43c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	f003 0310 	and.w	r3, r3, #16
 800d446:	2b00      	cmp	r3, #0
 800d448:	d01a      	beq.n	800d480 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d450:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d454:	d10a      	bne.n	800d46c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	3324      	adds	r3, #36	; 0x24
 800d45a:	2102      	movs	r1, #2
 800d45c:	4618      	mov	r0, r3
 800d45e:	f000 fcdb 	bl	800de18 <RCCEx_PLL3_Config>
 800d462:	4603      	mov	r3, r0
 800d464:	2b00      	cmp	r3, #0
 800d466:	d001      	beq.n	800d46c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800d468:	2301      	movs	r3, #1
 800d46a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d46c:	4b7a      	ldr	r3, [pc, #488]	; (800d658 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d46e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d470:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d47a:	4977      	ldr	r1, [pc, #476]	; (800d658 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d47c:	4313      	orrs	r3, r2
 800d47e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d034      	beq.n	800d4f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d492:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d496:	d01d      	beq.n	800d4d4 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800d498:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d49c:	d817      	bhi.n	800d4ce <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d003      	beq.n	800d4aa <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800d4a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d4a6:	d009      	beq.n	800d4bc <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800d4a8:	e011      	b.n	800d4ce <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	3304      	adds	r3, #4
 800d4ae:	2100      	movs	r1, #0
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	f000 fbff 	bl	800dcb4 <RCCEx_PLL2_Config>
 800d4b6:	4603      	mov	r3, r0
 800d4b8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800d4ba:	e00c      	b.n	800d4d6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	3324      	adds	r3, #36	; 0x24
 800d4c0:	2102      	movs	r1, #2
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	f000 fca8 	bl	800de18 <RCCEx_PLL3_Config>
 800d4c8:	4603      	mov	r3, r0
 800d4ca:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800d4cc:	e003      	b.n	800d4d6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d4ce:	2301      	movs	r3, #1
 800d4d0:	75fb      	strb	r3, [r7, #23]
      break;
 800d4d2:	e000      	b.n	800d4d6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800d4d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d4d6:	7dfb      	ldrb	r3, [r7, #23]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d10a      	bne.n	800d4f2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d4dc:	4b5e      	ldr	r3, [pc, #376]	; (800d658 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d4de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d4e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d4ea:	495b      	ldr	r1, [pc, #364]	; (800d658 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d4ec:	4313      	orrs	r3, r2
 800d4ee:	658b      	str	r3, [r1, #88]	; 0x58
 800d4f0:	e001      	b.n	800d4f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d4f2:	7dfb      	ldrb	r3, [r7, #23]
 800d4f4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d033      	beq.n	800d56a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d508:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d50c:	d01c      	beq.n	800d548 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800d50e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d512:	d816      	bhi.n	800d542 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800d514:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d518:	d003      	beq.n	800d522 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800d51a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d51e:	d007      	beq.n	800d530 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800d520:	e00f      	b.n	800d542 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d522:	4b4d      	ldr	r3, [pc, #308]	; (800d658 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d526:	4a4c      	ldr	r2, [pc, #304]	; (800d658 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d528:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d52c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800d52e:	e00c      	b.n	800d54a <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	3324      	adds	r3, #36	; 0x24
 800d534:	2101      	movs	r1, #1
 800d536:	4618      	mov	r0, r3
 800d538:	f000 fc6e 	bl	800de18 <RCCEx_PLL3_Config>
 800d53c:	4603      	mov	r3, r0
 800d53e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800d540:	e003      	b.n	800d54a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d542:	2301      	movs	r3, #1
 800d544:	75fb      	strb	r3, [r7, #23]
      break;
 800d546:	e000      	b.n	800d54a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800d548:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d54a:	7dfb      	ldrb	r3, [r7, #23]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d10a      	bne.n	800d566 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d550:	4b41      	ldr	r3, [pc, #260]	; (800d658 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d554:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d55e:	493e      	ldr	r1, [pc, #248]	; (800d658 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d560:	4313      	orrs	r3, r2
 800d562:	654b      	str	r3, [r1, #84]	; 0x54
 800d564:	e001      	b.n	800d56a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d566:	7dfb      	ldrb	r3, [r7, #23]
 800d568:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d572:	2b00      	cmp	r3, #0
 800d574:	d029      	beq.n	800d5ca <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d003      	beq.n	800d586 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800d57e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d582:	d007      	beq.n	800d594 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800d584:	e00f      	b.n	800d5a6 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d586:	4b34      	ldr	r3, [pc, #208]	; (800d658 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d58a:	4a33      	ldr	r2, [pc, #204]	; (800d658 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d58c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d590:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800d592:	e00b      	b.n	800d5ac <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	3304      	adds	r3, #4
 800d598:	2102      	movs	r1, #2
 800d59a:	4618      	mov	r0, r3
 800d59c:	f000 fb8a 	bl	800dcb4 <RCCEx_PLL2_Config>
 800d5a0:	4603      	mov	r3, r0
 800d5a2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800d5a4:	e002      	b.n	800d5ac <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800d5a6:	2301      	movs	r3, #1
 800d5a8:	75fb      	strb	r3, [r7, #23]
      break;
 800d5aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d5ac:	7dfb      	ldrb	r3, [r7, #23]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d109      	bne.n	800d5c6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800d5b2:	4b29      	ldr	r3, [pc, #164]	; (800d658 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d5b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d5b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d5be:	4926      	ldr	r1, [pc, #152]	; (800d658 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d5c0:	4313      	orrs	r3, r2
 800d5c2:	64cb      	str	r3, [r1, #76]	; 0x4c
 800d5c4:	e001      	b.n	800d5ca <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d5c6:	7dfb      	ldrb	r3, [r7, #23]
 800d5c8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d00a      	beq.n	800d5ec <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	3324      	adds	r3, #36	; 0x24
 800d5da:	2102      	movs	r1, #2
 800d5dc:	4618      	mov	r0, r3
 800d5de:	f000 fc1b 	bl	800de18 <RCCEx_PLL3_Config>
 800d5e2:	4603      	mov	r3, r0
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d001      	beq.n	800d5ec <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800d5e8:	2301      	movs	r3, #1
 800d5ea:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d033      	beq.n	800d660 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d5fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d600:	d017      	beq.n	800d632 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800d602:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d606:	d811      	bhi.n	800d62c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800d608:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d60c:	d013      	beq.n	800d636 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800d60e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d612:	d80b      	bhi.n	800d62c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800d614:	2b00      	cmp	r3, #0
 800d616:	d010      	beq.n	800d63a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800d618:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d61c:	d106      	bne.n	800d62c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d61e:	4b0e      	ldr	r3, [pc, #56]	; (800d658 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d622:	4a0d      	ldr	r2, [pc, #52]	; (800d658 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d628:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800d62a:	e007      	b.n	800d63c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d62c:	2301      	movs	r3, #1
 800d62e:	75fb      	strb	r3, [r7, #23]
      break;
 800d630:	e004      	b.n	800d63c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800d632:	bf00      	nop
 800d634:	e002      	b.n	800d63c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800d636:	bf00      	nop
 800d638:	e000      	b.n	800d63c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800d63a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d63c:	7dfb      	ldrb	r3, [r7, #23]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d10c      	bne.n	800d65c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d642:	4b05      	ldr	r3, [pc, #20]	; (800d658 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d646:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d64e:	4902      	ldr	r1, [pc, #8]	; (800d658 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d650:	4313      	orrs	r3, r2
 800d652:	654b      	str	r3, [r1, #84]	; 0x54
 800d654:	e004      	b.n	800d660 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800d656:	bf00      	nop
 800d658:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d65c:	7dfb      	ldrb	r3, [r7, #23]
 800d65e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d008      	beq.n	800d67e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800d66c:	4b31      	ldr	r3, [pc, #196]	; (800d734 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d66e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d670:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d678:	492e      	ldr	r1, [pc, #184]	; (800d734 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d67a:	4313      	orrs	r3, r2
 800d67c:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d686:	2b00      	cmp	r3, #0
 800d688:	d009      	beq.n	800d69e <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800d68a:	4b2a      	ldr	r3, [pc, #168]	; (800d734 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d68c:	691b      	ldr	r3, [r3, #16]
 800d68e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d698:	4926      	ldr	r1, [pc, #152]	; (800d734 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d69a:	4313      	orrs	r3, r2
 800d69c:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d008      	beq.n	800d6bc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800d6aa:	4b22      	ldr	r3, [pc, #136]	; (800d734 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d6ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d6ae:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d6b6:	491f      	ldr	r1, [pc, #124]	; (800d734 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d6b8:	4313      	orrs	r3, r2
 800d6ba:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d00d      	beq.n	800d6e4 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800d6c8:	4b1a      	ldr	r3, [pc, #104]	; (800d734 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d6ca:	691b      	ldr	r3, [r3, #16]
 800d6cc:	4a19      	ldr	r2, [pc, #100]	; (800d734 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d6ce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d6d2:	6113      	str	r3, [r2, #16]
 800d6d4:	4b17      	ldr	r3, [pc, #92]	; (800d734 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d6d6:	691a      	ldr	r2, [r3, #16]
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800d6de:	4915      	ldr	r1, [pc, #84]	; (800d734 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d6e0:	4313      	orrs	r3, r2
 800d6e2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	da08      	bge.n	800d6fe <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800d6ec:	4b11      	ldr	r3, [pc, #68]	; (800d734 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d6ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d6f0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d6f8:	490e      	ldr	r1, [pc, #56]	; (800d734 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d6fa:	4313      	orrs	r3, r2
 800d6fc:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d706:	2b00      	cmp	r3, #0
 800d708:	d009      	beq.n	800d71e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800d70a:	4b0a      	ldr	r3, [pc, #40]	; (800d734 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d70c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d70e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d718:	4906      	ldr	r1, [pc, #24]	; (800d734 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d71a:	4313      	orrs	r3, r2
 800d71c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800d71e:	7dbb      	ldrb	r3, [r7, #22]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d101      	bne.n	800d728 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800d724:	2300      	movs	r3, #0
 800d726:	e000      	b.n	800d72a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800d728:	2301      	movs	r3, #1
}
 800d72a:	4618      	mov	r0, r3
 800d72c:	3718      	adds	r7, #24
 800d72e:	46bd      	mov	sp, r7
 800d730:	bd80      	pop	{r7, pc}
 800d732:	bf00      	nop
 800d734:	58024400 	.word	0x58024400

0800d738 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800d73c:	f7ff f85a 	bl	800c7f4 <HAL_RCC_GetHCLKFreq>
 800d740:	4602      	mov	r2, r0
 800d742:	4b06      	ldr	r3, [pc, #24]	; (800d75c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d744:	6a1b      	ldr	r3, [r3, #32]
 800d746:	091b      	lsrs	r3, r3, #4
 800d748:	f003 0307 	and.w	r3, r3, #7
 800d74c:	4904      	ldr	r1, [pc, #16]	; (800d760 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d74e:	5ccb      	ldrb	r3, [r1, r3]
 800d750:	f003 031f 	and.w	r3, r3, #31
 800d754:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800d758:	4618      	mov	r0, r3
 800d75a:	bd80      	pop	{r7, pc}
 800d75c:	58024400 	.word	0x58024400
 800d760:	080145d4 	.word	0x080145d4

0800d764 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800d764:	b480      	push	{r7}
 800d766:	b089      	sub	sp, #36	; 0x24
 800d768:	af00      	add	r7, sp, #0
 800d76a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d76c:	4ba1      	ldr	r3, [pc, #644]	; (800d9f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d76e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d770:	f003 0303 	and.w	r3, r3, #3
 800d774:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800d776:	4b9f      	ldr	r3, [pc, #636]	; (800d9f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d77a:	0b1b      	lsrs	r3, r3, #12
 800d77c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d780:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d782:	4b9c      	ldr	r3, [pc, #624]	; (800d9f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d786:	091b      	lsrs	r3, r3, #4
 800d788:	f003 0301 	and.w	r3, r3, #1
 800d78c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800d78e:	4b99      	ldr	r3, [pc, #612]	; (800d9f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d792:	08db      	lsrs	r3, r3, #3
 800d794:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d798:	693a      	ldr	r2, [r7, #16]
 800d79a:	fb02 f303 	mul.w	r3, r2, r3
 800d79e:	ee07 3a90 	vmov	s15, r3
 800d7a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d7aa:	697b      	ldr	r3, [r7, #20]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	f000 8111 	beq.w	800d9d4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d7b2:	69bb      	ldr	r3, [r7, #24]
 800d7b4:	2b02      	cmp	r3, #2
 800d7b6:	f000 8083 	beq.w	800d8c0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d7ba:	69bb      	ldr	r3, [r7, #24]
 800d7bc:	2b02      	cmp	r3, #2
 800d7be:	f200 80a1 	bhi.w	800d904 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d7c2:	69bb      	ldr	r3, [r7, #24]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d003      	beq.n	800d7d0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d7c8:	69bb      	ldr	r3, [r7, #24]
 800d7ca:	2b01      	cmp	r3, #1
 800d7cc:	d056      	beq.n	800d87c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d7ce:	e099      	b.n	800d904 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d7d0:	4b88      	ldr	r3, [pc, #544]	; (800d9f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	f003 0320 	and.w	r3, r3, #32
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d02d      	beq.n	800d838 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d7dc:	4b85      	ldr	r3, [pc, #532]	; (800d9f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	08db      	lsrs	r3, r3, #3
 800d7e2:	f003 0303 	and.w	r3, r3, #3
 800d7e6:	4a84      	ldr	r2, [pc, #528]	; (800d9f8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d7e8:	fa22 f303 	lsr.w	r3, r2, r3
 800d7ec:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d7ee:	68bb      	ldr	r3, [r7, #8]
 800d7f0:	ee07 3a90 	vmov	s15, r3
 800d7f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d7f8:	697b      	ldr	r3, [r7, #20]
 800d7fa:	ee07 3a90 	vmov	s15, r3
 800d7fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d802:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d806:	4b7b      	ldr	r3, [pc, #492]	; (800d9f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d80a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d80e:	ee07 3a90 	vmov	s15, r3
 800d812:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d816:	ed97 6a03 	vldr	s12, [r7, #12]
 800d81a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d9fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d81e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d822:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d826:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d82a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d82e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d832:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800d836:	e087      	b.n	800d948 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d838:	697b      	ldr	r3, [r7, #20]
 800d83a:	ee07 3a90 	vmov	s15, r3
 800d83e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d842:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800da00 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d846:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d84a:	4b6a      	ldr	r3, [pc, #424]	; (800d9f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d84c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d84e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d852:	ee07 3a90 	vmov	s15, r3
 800d856:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d85a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d85e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d9fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d862:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d866:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d86a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d86e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d872:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d876:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d87a:	e065      	b.n	800d948 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d87c:	697b      	ldr	r3, [r7, #20]
 800d87e:	ee07 3a90 	vmov	s15, r3
 800d882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d886:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800da04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d88a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d88e:	4b59      	ldr	r3, [pc, #356]	; (800d9f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d896:	ee07 3a90 	vmov	s15, r3
 800d89a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d89e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d8a2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d9fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d8a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d8aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d8ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d8b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d8b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d8ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d8be:	e043      	b.n	800d948 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d8c0:	697b      	ldr	r3, [r7, #20]
 800d8c2:	ee07 3a90 	vmov	s15, r3
 800d8c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8ca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800da08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d8ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d8d2:	4b48      	ldr	r3, [pc, #288]	; (800d9f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d8d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8da:	ee07 3a90 	vmov	s15, r3
 800d8de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d8e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d8e6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d9fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d8ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d8ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d8f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d8f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d8fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d8fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d902:	e021      	b.n	800d948 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d904:	697b      	ldr	r3, [r7, #20]
 800d906:	ee07 3a90 	vmov	s15, r3
 800d90a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d90e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800da04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d916:	4b37      	ldr	r3, [pc, #220]	; (800d9f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d91a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d91e:	ee07 3a90 	vmov	s15, r3
 800d922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d926:	ed97 6a03 	vldr	s12, [r7, #12]
 800d92a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d9fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d92e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d932:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d936:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d93a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d93e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d942:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d946:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800d948:	4b2a      	ldr	r3, [pc, #168]	; (800d9f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d94a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d94c:	0a5b      	lsrs	r3, r3, #9
 800d94e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d952:	ee07 3a90 	vmov	s15, r3
 800d956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d95a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d95e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d962:	edd7 6a07 	vldr	s13, [r7, #28]
 800d966:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d96a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d96e:	ee17 2a90 	vmov	r2, s15
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800d976:	4b1f      	ldr	r3, [pc, #124]	; (800d9f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d97a:	0c1b      	lsrs	r3, r3, #16
 800d97c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d980:	ee07 3a90 	vmov	s15, r3
 800d984:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d988:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d98c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d990:	edd7 6a07 	vldr	s13, [r7, #28]
 800d994:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d998:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d99c:	ee17 2a90 	vmov	r2, s15
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800d9a4:	4b13      	ldr	r3, [pc, #76]	; (800d9f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d9a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9a8:	0e1b      	lsrs	r3, r3, #24
 800d9aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d9ae:	ee07 3a90 	vmov	s15, r3
 800d9b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d9ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d9be:	edd7 6a07 	vldr	s13, [r7, #28]
 800d9c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d9c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d9ca:	ee17 2a90 	vmov	r2, s15
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d9d2:	e008      	b.n	800d9e6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	2200      	movs	r2, #0
 800d9de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	609a      	str	r2, [r3, #8]
}
 800d9e6:	bf00      	nop
 800d9e8:	3724      	adds	r7, #36	; 0x24
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f0:	4770      	bx	lr
 800d9f2:	bf00      	nop
 800d9f4:	58024400 	.word	0x58024400
 800d9f8:	03d09000 	.word	0x03d09000
 800d9fc:	46000000 	.word	0x46000000
 800da00:	4c742400 	.word	0x4c742400
 800da04:	4a742400 	.word	0x4a742400
 800da08:	4bf42400 	.word	0x4bf42400

0800da0c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800da0c:	b480      	push	{r7}
 800da0e:	b089      	sub	sp, #36	; 0x24
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800da14:	4ba1      	ldr	r3, [pc, #644]	; (800dc9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800da16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da18:	f003 0303 	and.w	r3, r3, #3
 800da1c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800da1e:	4b9f      	ldr	r3, [pc, #636]	; (800dc9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800da20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da22:	0d1b      	lsrs	r3, r3, #20
 800da24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800da28:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800da2a:	4b9c      	ldr	r3, [pc, #624]	; (800dc9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800da2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da2e:	0a1b      	lsrs	r3, r3, #8
 800da30:	f003 0301 	and.w	r3, r3, #1
 800da34:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800da36:	4b99      	ldr	r3, [pc, #612]	; (800dc9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800da38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da3a:	08db      	lsrs	r3, r3, #3
 800da3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800da40:	693a      	ldr	r2, [r7, #16]
 800da42:	fb02 f303 	mul.w	r3, r2, r3
 800da46:	ee07 3a90 	vmov	s15, r3
 800da4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da4e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800da52:	697b      	ldr	r3, [r7, #20]
 800da54:	2b00      	cmp	r3, #0
 800da56:	f000 8111 	beq.w	800dc7c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800da5a:	69bb      	ldr	r3, [r7, #24]
 800da5c:	2b02      	cmp	r3, #2
 800da5e:	f000 8083 	beq.w	800db68 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800da62:	69bb      	ldr	r3, [r7, #24]
 800da64:	2b02      	cmp	r3, #2
 800da66:	f200 80a1 	bhi.w	800dbac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800da6a:	69bb      	ldr	r3, [r7, #24]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d003      	beq.n	800da78 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800da70:	69bb      	ldr	r3, [r7, #24]
 800da72:	2b01      	cmp	r3, #1
 800da74:	d056      	beq.n	800db24 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800da76:	e099      	b.n	800dbac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800da78:	4b88      	ldr	r3, [pc, #544]	; (800dc9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	f003 0320 	and.w	r3, r3, #32
 800da80:	2b00      	cmp	r3, #0
 800da82:	d02d      	beq.n	800dae0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800da84:	4b85      	ldr	r3, [pc, #532]	; (800dc9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	08db      	lsrs	r3, r3, #3
 800da8a:	f003 0303 	and.w	r3, r3, #3
 800da8e:	4a84      	ldr	r2, [pc, #528]	; (800dca0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800da90:	fa22 f303 	lsr.w	r3, r2, r3
 800da94:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800da96:	68bb      	ldr	r3, [r7, #8]
 800da98:	ee07 3a90 	vmov	s15, r3
 800da9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800daa0:	697b      	ldr	r3, [r7, #20]
 800daa2:	ee07 3a90 	vmov	s15, r3
 800daa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800daaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800daae:	4b7b      	ldr	r3, [pc, #492]	; (800dc9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dab6:	ee07 3a90 	vmov	s15, r3
 800daba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dabe:	ed97 6a03 	vldr	s12, [r7, #12]
 800dac2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800dca4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dac6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800daca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dace:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dad2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dada:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800dade:	e087      	b.n	800dbf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800dae0:	697b      	ldr	r3, [r7, #20]
 800dae2:	ee07 3a90 	vmov	s15, r3
 800dae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800daea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800dca8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800daee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800daf2:	4b6a      	ldr	r3, [pc, #424]	; (800dc9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800daf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800daf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dafa:	ee07 3a90 	vmov	s15, r3
 800dafe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800db02:	ed97 6a03 	vldr	s12, [r7, #12]
 800db06:	eddf 5a67 	vldr	s11, [pc, #412]	; 800dca4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800db0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800db0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800db12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800db16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800db1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800db22:	e065      	b.n	800dbf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800db24:	697b      	ldr	r3, [r7, #20]
 800db26:	ee07 3a90 	vmov	s15, r3
 800db2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db2e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800dcac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800db32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800db36:	4b59      	ldr	r3, [pc, #356]	; (800dc9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800db38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db3e:	ee07 3a90 	vmov	s15, r3
 800db42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800db46:	ed97 6a03 	vldr	s12, [r7, #12]
 800db4a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800dca4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800db4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800db52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800db56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800db5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800db5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800db66:	e043      	b.n	800dbf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800db68:	697b      	ldr	r3, [r7, #20]
 800db6a:	ee07 3a90 	vmov	s15, r3
 800db6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db72:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800dcb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800db76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800db7a:	4b48      	ldr	r3, [pc, #288]	; (800dc9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800db7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db82:	ee07 3a90 	vmov	s15, r3
 800db86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800db8a:	ed97 6a03 	vldr	s12, [r7, #12]
 800db8e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800dca4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800db92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800db96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800db9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800db9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dba6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800dbaa:	e021      	b.n	800dbf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800dbac:	697b      	ldr	r3, [r7, #20]
 800dbae:	ee07 3a90 	vmov	s15, r3
 800dbb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dbb6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800dcac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800dbba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dbbe:	4b37      	ldr	r3, [pc, #220]	; (800dc9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dbc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dbc6:	ee07 3a90 	vmov	s15, r3
 800dbca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dbce:	ed97 6a03 	vldr	s12, [r7, #12]
 800dbd2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800dca4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dbd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dbda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dbde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dbe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dbe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dbea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800dbee:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800dbf0:	4b2a      	ldr	r3, [pc, #168]	; (800dc9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dbf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbf4:	0a5b      	lsrs	r3, r3, #9
 800dbf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dbfa:	ee07 3a90 	vmov	s15, r3
 800dbfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dc06:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dc0a:	edd7 6a07 	vldr	s13, [r7, #28]
 800dc0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dc12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dc16:	ee17 2a90 	vmov	r2, s15
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800dc1e:	4b1f      	ldr	r3, [pc, #124]	; (800dc9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dc20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc22:	0c1b      	lsrs	r3, r3, #16
 800dc24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc28:	ee07 3a90 	vmov	s15, r3
 800dc2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dc34:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dc38:	edd7 6a07 	vldr	s13, [r7, #28]
 800dc3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dc40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dc44:	ee17 2a90 	vmov	r2, s15
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800dc4c:	4b13      	ldr	r3, [pc, #76]	; (800dc9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dc4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc50:	0e1b      	lsrs	r3, r3, #24
 800dc52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc56:	ee07 3a90 	vmov	s15, r3
 800dc5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dc62:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dc66:	edd7 6a07 	vldr	s13, [r7, #28]
 800dc6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dc6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dc72:	ee17 2a90 	vmov	r2, s15
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800dc7a:	e008      	b.n	800dc8e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	2200      	movs	r2, #0
 800dc80:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	2200      	movs	r2, #0
 800dc86:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	2200      	movs	r2, #0
 800dc8c:	609a      	str	r2, [r3, #8]
}
 800dc8e:	bf00      	nop
 800dc90:	3724      	adds	r7, #36	; 0x24
 800dc92:	46bd      	mov	sp, r7
 800dc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc98:	4770      	bx	lr
 800dc9a:	bf00      	nop
 800dc9c:	58024400 	.word	0x58024400
 800dca0:	03d09000 	.word	0x03d09000
 800dca4:	46000000 	.word	0x46000000
 800dca8:	4c742400 	.word	0x4c742400
 800dcac:	4a742400 	.word	0x4a742400
 800dcb0:	4bf42400 	.word	0x4bf42400

0800dcb4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b084      	sub	sp, #16
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	6078      	str	r0, [r7, #4]
 800dcbc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800dcc2:	4b53      	ldr	r3, [pc, #332]	; (800de10 <RCCEx_PLL2_Config+0x15c>)
 800dcc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcc6:	f003 0303 	and.w	r3, r3, #3
 800dcca:	2b03      	cmp	r3, #3
 800dccc:	d101      	bne.n	800dcd2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800dcce:	2301      	movs	r3, #1
 800dcd0:	e099      	b.n	800de06 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800dcd2:	4b4f      	ldr	r3, [pc, #316]	; (800de10 <RCCEx_PLL2_Config+0x15c>)
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	4a4e      	ldr	r2, [pc, #312]	; (800de10 <RCCEx_PLL2_Config+0x15c>)
 800dcd8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800dcdc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dcde:	f7f9 faa1 	bl	8007224 <HAL_GetTick>
 800dce2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800dce4:	e008      	b.n	800dcf8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800dce6:	f7f9 fa9d 	bl	8007224 <HAL_GetTick>
 800dcea:	4602      	mov	r2, r0
 800dcec:	68bb      	ldr	r3, [r7, #8]
 800dcee:	1ad3      	subs	r3, r2, r3
 800dcf0:	2b02      	cmp	r3, #2
 800dcf2:	d901      	bls.n	800dcf8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800dcf4:	2303      	movs	r3, #3
 800dcf6:	e086      	b.n	800de06 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800dcf8:	4b45      	ldr	r3, [pc, #276]	; (800de10 <RCCEx_PLL2_Config+0x15c>)
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d1f0      	bne.n	800dce6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800dd04:	4b42      	ldr	r3, [pc, #264]	; (800de10 <RCCEx_PLL2_Config+0x15c>)
 800dd06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd08:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	031b      	lsls	r3, r3, #12
 800dd12:	493f      	ldr	r1, [pc, #252]	; (800de10 <RCCEx_PLL2_Config+0x15c>)
 800dd14:	4313      	orrs	r3, r2
 800dd16:	628b      	str	r3, [r1, #40]	; 0x28
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	685b      	ldr	r3, [r3, #4]
 800dd1c:	3b01      	subs	r3, #1
 800dd1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	689b      	ldr	r3, [r3, #8]
 800dd26:	3b01      	subs	r3, #1
 800dd28:	025b      	lsls	r3, r3, #9
 800dd2a:	b29b      	uxth	r3, r3
 800dd2c:	431a      	orrs	r2, r3
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	68db      	ldr	r3, [r3, #12]
 800dd32:	3b01      	subs	r3, #1
 800dd34:	041b      	lsls	r3, r3, #16
 800dd36:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800dd3a:	431a      	orrs	r2, r3
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	691b      	ldr	r3, [r3, #16]
 800dd40:	3b01      	subs	r3, #1
 800dd42:	061b      	lsls	r3, r3, #24
 800dd44:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800dd48:	4931      	ldr	r1, [pc, #196]	; (800de10 <RCCEx_PLL2_Config+0x15c>)
 800dd4a:	4313      	orrs	r3, r2
 800dd4c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800dd4e:	4b30      	ldr	r3, [pc, #192]	; (800de10 <RCCEx_PLL2_Config+0x15c>)
 800dd50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd52:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	695b      	ldr	r3, [r3, #20]
 800dd5a:	492d      	ldr	r1, [pc, #180]	; (800de10 <RCCEx_PLL2_Config+0x15c>)
 800dd5c:	4313      	orrs	r3, r2
 800dd5e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800dd60:	4b2b      	ldr	r3, [pc, #172]	; (800de10 <RCCEx_PLL2_Config+0x15c>)
 800dd62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd64:	f023 0220 	bic.w	r2, r3, #32
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	699b      	ldr	r3, [r3, #24]
 800dd6c:	4928      	ldr	r1, [pc, #160]	; (800de10 <RCCEx_PLL2_Config+0x15c>)
 800dd6e:	4313      	orrs	r3, r2
 800dd70:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800dd72:	4b27      	ldr	r3, [pc, #156]	; (800de10 <RCCEx_PLL2_Config+0x15c>)
 800dd74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd76:	4a26      	ldr	r2, [pc, #152]	; (800de10 <RCCEx_PLL2_Config+0x15c>)
 800dd78:	f023 0310 	bic.w	r3, r3, #16
 800dd7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800dd7e:	4b24      	ldr	r3, [pc, #144]	; (800de10 <RCCEx_PLL2_Config+0x15c>)
 800dd80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dd82:	4b24      	ldr	r3, [pc, #144]	; (800de14 <RCCEx_PLL2_Config+0x160>)
 800dd84:	4013      	ands	r3, r2
 800dd86:	687a      	ldr	r2, [r7, #4]
 800dd88:	69d2      	ldr	r2, [r2, #28]
 800dd8a:	00d2      	lsls	r2, r2, #3
 800dd8c:	4920      	ldr	r1, [pc, #128]	; (800de10 <RCCEx_PLL2_Config+0x15c>)
 800dd8e:	4313      	orrs	r3, r2
 800dd90:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800dd92:	4b1f      	ldr	r3, [pc, #124]	; (800de10 <RCCEx_PLL2_Config+0x15c>)
 800dd94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd96:	4a1e      	ldr	r2, [pc, #120]	; (800de10 <RCCEx_PLL2_Config+0x15c>)
 800dd98:	f043 0310 	orr.w	r3, r3, #16
 800dd9c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800dd9e:	683b      	ldr	r3, [r7, #0]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d106      	bne.n	800ddb2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800dda4:	4b1a      	ldr	r3, [pc, #104]	; (800de10 <RCCEx_PLL2_Config+0x15c>)
 800dda6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dda8:	4a19      	ldr	r2, [pc, #100]	; (800de10 <RCCEx_PLL2_Config+0x15c>)
 800ddaa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ddae:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ddb0:	e00f      	b.n	800ddd2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800ddb2:	683b      	ldr	r3, [r7, #0]
 800ddb4:	2b01      	cmp	r3, #1
 800ddb6:	d106      	bne.n	800ddc6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ddb8:	4b15      	ldr	r3, [pc, #84]	; (800de10 <RCCEx_PLL2_Config+0x15c>)
 800ddba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddbc:	4a14      	ldr	r2, [pc, #80]	; (800de10 <RCCEx_PLL2_Config+0x15c>)
 800ddbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ddc2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ddc4:	e005      	b.n	800ddd2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ddc6:	4b12      	ldr	r3, [pc, #72]	; (800de10 <RCCEx_PLL2_Config+0x15c>)
 800ddc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddca:	4a11      	ldr	r2, [pc, #68]	; (800de10 <RCCEx_PLL2_Config+0x15c>)
 800ddcc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ddd0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ddd2:	4b0f      	ldr	r3, [pc, #60]	; (800de10 <RCCEx_PLL2_Config+0x15c>)
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	4a0e      	ldr	r2, [pc, #56]	; (800de10 <RCCEx_PLL2_Config+0x15c>)
 800ddd8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800dddc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ddde:	f7f9 fa21 	bl	8007224 <HAL_GetTick>
 800dde2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800dde4:	e008      	b.n	800ddf8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800dde6:	f7f9 fa1d 	bl	8007224 <HAL_GetTick>
 800ddea:	4602      	mov	r2, r0
 800ddec:	68bb      	ldr	r3, [r7, #8]
 800ddee:	1ad3      	subs	r3, r2, r3
 800ddf0:	2b02      	cmp	r3, #2
 800ddf2:	d901      	bls.n	800ddf8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ddf4:	2303      	movs	r3, #3
 800ddf6:	e006      	b.n	800de06 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ddf8:	4b05      	ldr	r3, [pc, #20]	; (800de10 <RCCEx_PLL2_Config+0x15c>)
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800de00:	2b00      	cmp	r3, #0
 800de02:	d0f0      	beq.n	800dde6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800de04:	7bfb      	ldrb	r3, [r7, #15]
}
 800de06:	4618      	mov	r0, r3
 800de08:	3710      	adds	r7, #16
 800de0a:	46bd      	mov	sp, r7
 800de0c:	bd80      	pop	{r7, pc}
 800de0e:	bf00      	nop
 800de10:	58024400 	.word	0x58024400
 800de14:	ffff0007 	.word	0xffff0007

0800de18 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800de18:	b580      	push	{r7, lr}
 800de1a:	b084      	sub	sp, #16
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	6078      	str	r0, [r7, #4]
 800de20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800de22:	2300      	movs	r3, #0
 800de24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800de26:	4b53      	ldr	r3, [pc, #332]	; (800df74 <RCCEx_PLL3_Config+0x15c>)
 800de28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de2a:	f003 0303 	and.w	r3, r3, #3
 800de2e:	2b03      	cmp	r3, #3
 800de30:	d101      	bne.n	800de36 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800de32:	2301      	movs	r3, #1
 800de34:	e099      	b.n	800df6a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800de36:	4b4f      	ldr	r3, [pc, #316]	; (800df74 <RCCEx_PLL3_Config+0x15c>)
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	4a4e      	ldr	r2, [pc, #312]	; (800df74 <RCCEx_PLL3_Config+0x15c>)
 800de3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800de40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800de42:	f7f9 f9ef 	bl	8007224 <HAL_GetTick>
 800de46:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800de48:	e008      	b.n	800de5c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800de4a:	f7f9 f9eb 	bl	8007224 <HAL_GetTick>
 800de4e:	4602      	mov	r2, r0
 800de50:	68bb      	ldr	r3, [r7, #8]
 800de52:	1ad3      	subs	r3, r2, r3
 800de54:	2b02      	cmp	r3, #2
 800de56:	d901      	bls.n	800de5c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800de58:	2303      	movs	r3, #3
 800de5a:	e086      	b.n	800df6a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800de5c:	4b45      	ldr	r3, [pc, #276]	; (800df74 <RCCEx_PLL3_Config+0x15c>)
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800de64:	2b00      	cmp	r3, #0
 800de66:	d1f0      	bne.n	800de4a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800de68:	4b42      	ldr	r3, [pc, #264]	; (800df74 <RCCEx_PLL3_Config+0x15c>)
 800de6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de6c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	051b      	lsls	r3, r3, #20
 800de76:	493f      	ldr	r1, [pc, #252]	; (800df74 <RCCEx_PLL3_Config+0x15c>)
 800de78:	4313      	orrs	r3, r2
 800de7a:	628b      	str	r3, [r1, #40]	; 0x28
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	685b      	ldr	r3, [r3, #4]
 800de80:	3b01      	subs	r3, #1
 800de82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	689b      	ldr	r3, [r3, #8]
 800de8a:	3b01      	subs	r3, #1
 800de8c:	025b      	lsls	r3, r3, #9
 800de8e:	b29b      	uxth	r3, r3
 800de90:	431a      	orrs	r2, r3
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	68db      	ldr	r3, [r3, #12]
 800de96:	3b01      	subs	r3, #1
 800de98:	041b      	lsls	r3, r3, #16
 800de9a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800de9e:	431a      	orrs	r2, r3
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	691b      	ldr	r3, [r3, #16]
 800dea4:	3b01      	subs	r3, #1
 800dea6:	061b      	lsls	r3, r3, #24
 800dea8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800deac:	4931      	ldr	r1, [pc, #196]	; (800df74 <RCCEx_PLL3_Config+0x15c>)
 800deae:	4313      	orrs	r3, r2
 800deb0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800deb2:	4b30      	ldr	r3, [pc, #192]	; (800df74 <RCCEx_PLL3_Config+0x15c>)
 800deb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800deb6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	695b      	ldr	r3, [r3, #20]
 800debe:	492d      	ldr	r1, [pc, #180]	; (800df74 <RCCEx_PLL3_Config+0x15c>)
 800dec0:	4313      	orrs	r3, r2
 800dec2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800dec4:	4b2b      	ldr	r3, [pc, #172]	; (800df74 <RCCEx_PLL3_Config+0x15c>)
 800dec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dec8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	699b      	ldr	r3, [r3, #24]
 800ded0:	4928      	ldr	r1, [pc, #160]	; (800df74 <RCCEx_PLL3_Config+0x15c>)
 800ded2:	4313      	orrs	r3, r2
 800ded4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ded6:	4b27      	ldr	r3, [pc, #156]	; (800df74 <RCCEx_PLL3_Config+0x15c>)
 800ded8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800deda:	4a26      	ldr	r2, [pc, #152]	; (800df74 <RCCEx_PLL3_Config+0x15c>)
 800dedc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dee0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800dee2:	4b24      	ldr	r3, [pc, #144]	; (800df74 <RCCEx_PLL3_Config+0x15c>)
 800dee4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dee6:	4b24      	ldr	r3, [pc, #144]	; (800df78 <RCCEx_PLL3_Config+0x160>)
 800dee8:	4013      	ands	r3, r2
 800deea:	687a      	ldr	r2, [r7, #4]
 800deec:	69d2      	ldr	r2, [r2, #28]
 800deee:	00d2      	lsls	r2, r2, #3
 800def0:	4920      	ldr	r1, [pc, #128]	; (800df74 <RCCEx_PLL3_Config+0x15c>)
 800def2:	4313      	orrs	r3, r2
 800def4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800def6:	4b1f      	ldr	r3, [pc, #124]	; (800df74 <RCCEx_PLL3_Config+0x15c>)
 800def8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800defa:	4a1e      	ldr	r2, [pc, #120]	; (800df74 <RCCEx_PLL3_Config+0x15c>)
 800defc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800df00:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800df02:	683b      	ldr	r3, [r7, #0]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d106      	bne.n	800df16 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800df08:	4b1a      	ldr	r3, [pc, #104]	; (800df74 <RCCEx_PLL3_Config+0x15c>)
 800df0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df0c:	4a19      	ldr	r2, [pc, #100]	; (800df74 <RCCEx_PLL3_Config+0x15c>)
 800df0e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800df12:	62d3      	str	r3, [r2, #44]	; 0x2c
 800df14:	e00f      	b.n	800df36 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800df16:	683b      	ldr	r3, [r7, #0]
 800df18:	2b01      	cmp	r3, #1
 800df1a:	d106      	bne.n	800df2a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800df1c:	4b15      	ldr	r3, [pc, #84]	; (800df74 <RCCEx_PLL3_Config+0x15c>)
 800df1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df20:	4a14      	ldr	r2, [pc, #80]	; (800df74 <RCCEx_PLL3_Config+0x15c>)
 800df22:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800df26:	62d3      	str	r3, [r2, #44]	; 0x2c
 800df28:	e005      	b.n	800df36 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800df2a:	4b12      	ldr	r3, [pc, #72]	; (800df74 <RCCEx_PLL3_Config+0x15c>)
 800df2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df2e:	4a11      	ldr	r2, [pc, #68]	; (800df74 <RCCEx_PLL3_Config+0x15c>)
 800df30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800df34:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800df36:	4b0f      	ldr	r3, [pc, #60]	; (800df74 <RCCEx_PLL3_Config+0x15c>)
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	4a0e      	ldr	r2, [pc, #56]	; (800df74 <RCCEx_PLL3_Config+0x15c>)
 800df3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800df40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800df42:	f7f9 f96f 	bl	8007224 <HAL_GetTick>
 800df46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800df48:	e008      	b.n	800df5c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800df4a:	f7f9 f96b 	bl	8007224 <HAL_GetTick>
 800df4e:	4602      	mov	r2, r0
 800df50:	68bb      	ldr	r3, [r7, #8]
 800df52:	1ad3      	subs	r3, r2, r3
 800df54:	2b02      	cmp	r3, #2
 800df56:	d901      	bls.n	800df5c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800df58:	2303      	movs	r3, #3
 800df5a:	e006      	b.n	800df6a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800df5c:	4b05      	ldr	r3, [pc, #20]	; (800df74 <RCCEx_PLL3_Config+0x15c>)
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800df64:	2b00      	cmp	r3, #0
 800df66:	d0f0      	beq.n	800df4a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800df68:	7bfb      	ldrb	r3, [r7, #15]
}
 800df6a:	4618      	mov	r0, r3
 800df6c:	3710      	adds	r7, #16
 800df6e:	46bd      	mov	sp, r7
 800df70:	bd80      	pop	{r7, pc}
 800df72:	bf00      	nop
 800df74:	58024400 	.word	0x58024400
 800df78:	ffff0007 	.word	0xffff0007

0800df7c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800df7c:	b580      	push	{r7, lr}
 800df7e:	b084      	sub	sp, #16
 800df80:	af00      	add	r7, sp, #0
 800df82:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d101      	bne.n	800df8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800df8a:	2301      	movs	r3, #1
 800df8c:	e0f1      	b.n	800e172 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	2200      	movs	r2, #0
 800df92:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	4a78      	ldr	r2, [pc, #480]	; (800e17c <HAL_SPI_Init+0x200>)
 800df9a:	4293      	cmp	r3, r2
 800df9c:	d00f      	beq.n	800dfbe <HAL_SPI_Init+0x42>
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	4a77      	ldr	r2, [pc, #476]	; (800e180 <HAL_SPI_Init+0x204>)
 800dfa4:	4293      	cmp	r3, r2
 800dfa6:	d00a      	beq.n	800dfbe <HAL_SPI_Init+0x42>
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	4a75      	ldr	r2, [pc, #468]	; (800e184 <HAL_SPI_Init+0x208>)
 800dfae:	4293      	cmp	r3, r2
 800dfb0:	d005      	beq.n	800dfbe <HAL_SPI_Init+0x42>
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	68db      	ldr	r3, [r3, #12]
 800dfb6:	2b0f      	cmp	r3, #15
 800dfb8:	d901      	bls.n	800dfbe <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800dfba:	2301      	movs	r3, #1
 800dfbc:	e0d9      	b.n	800e172 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800dfbe:	6878      	ldr	r0, [r7, #4]
 800dfc0:	f000 f8e2 	bl	800e188 <SPI_GetPacketSize>
 800dfc4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	4a6c      	ldr	r2, [pc, #432]	; (800e17c <HAL_SPI_Init+0x200>)
 800dfcc:	4293      	cmp	r3, r2
 800dfce:	d00c      	beq.n	800dfea <HAL_SPI_Init+0x6e>
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	4a6a      	ldr	r2, [pc, #424]	; (800e180 <HAL_SPI_Init+0x204>)
 800dfd6:	4293      	cmp	r3, r2
 800dfd8:	d007      	beq.n	800dfea <HAL_SPI_Init+0x6e>
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	4a69      	ldr	r2, [pc, #420]	; (800e184 <HAL_SPI_Init+0x208>)
 800dfe0:	4293      	cmp	r3, r2
 800dfe2:	d002      	beq.n	800dfea <HAL_SPI_Init+0x6e>
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	2b08      	cmp	r3, #8
 800dfe8:	d811      	bhi.n	800e00e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800dfee:	4a63      	ldr	r2, [pc, #396]	; (800e17c <HAL_SPI_Init+0x200>)
 800dff0:	4293      	cmp	r3, r2
 800dff2:	d009      	beq.n	800e008 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	4a61      	ldr	r2, [pc, #388]	; (800e180 <HAL_SPI_Init+0x204>)
 800dffa:	4293      	cmp	r3, r2
 800dffc:	d004      	beq.n	800e008 <HAL_SPI_Init+0x8c>
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	4a60      	ldr	r2, [pc, #384]	; (800e184 <HAL_SPI_Init+0x208>)
 800e004:	4293      	cmp	r3, r2
 800e006:	d104      	bne.n	800e012 <HAL_SPI_Init+0x96>
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	2b10      	cmp	r3, #16
 800e00c:	d901      	bls.n	800e012 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800e00e:	2301      	movs	r3, #1
 800e010:	e0af      	b.n	800e172 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e018:	b2db      	uxtb	r3, r3
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d106      	bne.n	800e02c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	2200      	movs	r2, #0
 800e022:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e026:	6878      	ldr	r0, [r7, #4]
 800e028:	f7f7 fc3e 	bl	80058a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	2202      	movs	r2, #2
 800e030:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	681a      	ldr	r2, [r3, #0]
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	f022 0201 	bic.w	r2, r2, #1
 800e042:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	689b      	ldr	r3, [r3, #8]
 800e04a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800e04e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	699b      	ldr	r3, [r3, #24]
 800e054:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e058:	d119      	bne.n	800e08e <HAL_SPI_Init+0x112>
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	685b      	ldr	r3, [r3, #4]
 800e05e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e062:	d103      	bne.n	800e06c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d008      	beq.n	800e07e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e070:	2b00      	cmp	r3, #0
 800e072:	d10c      	bne.n	800e08e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e078:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e07c:	d107      	bne.n	800e08e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	681a      	ldr	r2, [r3, #0]
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e08c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	69da      	ldr	r2, [r3, #28]
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e096:	431a      	orrs	r2, r3
 800e098:	68bb      	ldr	r3, [r7, #8]
 800e09a:	431a      	orrs	r2, r3
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0a0:	ea42 0103 	orr.w	r1, r2, r3
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	68da      	ldr	r2, [r3, #12]
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	430a      	orrs	r2, r1
 800e0ae:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0b8:	431a      	orrs	r2, r3
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0be:	431a      	orrs	r2, r3
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	699b      	ldr	r3, [r3, #24]
 800e0c4:	431a      	orrs	r2, r3
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	691b      	ldr	r3, [r3, #16]
 800e0ca:	431a      	orrs	r2, r3
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	695b      	ldr	r3, [r3, #20]
 800e0d0:	431a      	orrs	r2, r3
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	6a1b      	ldr	r3, [r3, #32]
 800e0d6:	431a      	orrs	r2, r3
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	685b      	ldr	r3, [r3, #4]
 800e0dc:	431a      	orrs	r2, r3
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e0e2:	431a      	orrs	r2, r3
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	689b      	ldr	r3, [r3, #8]
 800e0e8:	431a      	orrs	r2, r3
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e0ee:	ea42 0103 	orr.w	r1, r2, r3
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	430a      	orrs	r2, r1
 800e0fc:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	685b      	ldr	r3, [r3, #4]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d113      	bne.n	800e12e <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	689b      	ldr	r3, [r3, #8]
 800e10c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e118:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	689b      	ldr	r3, [r3, #8]
 800e120:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e12c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	f022 0201 	bic.w	r2, r2, #1
 800e13c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	685b      	ldr	r3, [r3, #4]
 800e142:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e146:	2b00      	cmp	r3, #0
 800e148:	d00a      	beq.n	800e160 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	68db      	ldr	r3, [r3, #12]
 800e150:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	430a      	orrs	r2, r1
 800e15e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	2200      	movs	r2, #0
 800e164:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	2201      	movs	r2, #1
 800e16c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800e170:	2300      	movs	r3, #0
}
 800e172:	4618      	mov	r0, r3
 800e174:	3710      	adds	r7, #16
 800e176:	46bd      	mov	sp, r7
 800e178:	bd80      	pop	{r7, pc}
 800e17a:	bf00      	nop
 800e17c:	40013000 	.word	0x40013000
 800e180:	40003800 	.word	0x40003800
 800e184:	40003c00 	.word	0x40003c00

0800e188 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800e188:	b480      	push	{r7}
 800e18a:	b085      	sub	sp, #20
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e194:	095b      	lsrs	r3, r3, #5
 800e196:	3301      	adds	r3, #1
 800e198:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	68db      	ldr	r3, [r3, #12]
 800e19e:	3301      	adds	r3, #1
 800e1a0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e1a2:	68bb      	ldr	r3, [r7, #8]
 800e1a4:	3307      	adds	r3, #7
 800e1a6:	08db      	lsrs	r3, r3, #3
 800e1a8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e1aa:	68bb      	ldr	r3, [r7, #8]
 800e1ac:	68fa      	ldr	r2, [r7, #12]
 800e1ae:	fb02 f303 	mul.w	r3, r2, r3
}
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	3714      	adds	r7, #20
 800e1b6:	46bd      	mov	sp, r7
 800e1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1bc:	4770      	bx	lr

0800e1be <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e1be:	b580      	push	{r7, lr}
 800e1c0:	b082      	sub	sp, #8
 800e1c2:	af00      	add	r7, sp, #0
 800e1c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d101      	bne.n	800e1d0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e1cc:	2301      	movs	r3, #1
 800e1ce:	e049      	b.n	800e264 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e1d6:	b2db      	uxtb	r3, r3
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d106      	bne.n	800e1ea <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	2200      	movs	r2, #0
 800e1e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e1e4:	6878      	ldr	r0, [r7, #4]
 800e1e6:	f7f7 fd07 	bl	8005bf8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	2202      	movs	r2, #2
 800e1ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	681a      	ldr	r2, [r3, #0]
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	3304      	adds	r3, #4
 800e1fa:	4619      	mov	r1, r3
 800e1fc:	4610      	mov	r0, r2
 800e1fe:	f000 fc21 	bl	800ea44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	2201      	movs	r2, #1
 800e206:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	2201      	movs	r2, #1
 800e20e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	2201      	movs	r2, #1
 800e216:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	2201      	movs	r2, #1
 800e21e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	2201      	movs	r2, #1
 800e226:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	2201      	movs	r2, #1
 800e22e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	2201      	movs	r2, #1
 800e236:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	2201      	movs	r2, #1
 800e23e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	2201      	movs	r2, #1
 800e246:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	2201      	movs	r2, #1
 800e24e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	2201      	movs	r2, #1
 800e256:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	2201      	movs	r2, #1
 800e25e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e262:	2300      	movs	r3, #0
}
 800e264:	4618      	mov	r0, r3
 800e266:	3708      	adds	r7, #8
 800e268:	46bd      	mov	sp, r7
 800e26a:	bd80      	pop	{r7, pc}

0800e26c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e26c:	b480      	push	{r7}
 800e26e:	b085      	sub	sp, #20
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e27a:	b2db      	uxtb	r3, r3
 800e27c:	2b01      	cmp	r3, #1
 800e27e:	d001      	beq.n	800e284 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e280:	2301      	movs	r3, #1
 800e282:	e054      	b.n	800e32e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	2202      	movs	r2, #2
 800e288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	68da      	ldr	r2, [r3, #12]
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	f042 0201 	orr.w	r2, r2, #1
 800e29a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	4a26      	ldr	r2, [pc, #152]	; (800e33c <HAL_TIM_Base_Start_IT+0xd0>)
 800e2a2:	4293      	cmp	r3, r2
 800e2a4:	d022      	beq.n	800e2ec <HAL_TIM_Base_Start_IT+0x80>
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e2ae:	d01d      	beq.n	800e2ec <HAL_TIM_Base_Start_IT+0x80>
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	4a22      	ldr	r2, [pc, #136]	; (800e340 <HAL_TIM_Base_Start_IT+0xd4>)
 800e2b6:	4293      	cmp	r3, r2
 800e2b8:	d018      	beq.n	800e2ec <HAL_TIM_Base_Start_IT+0x80>
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	4a21      	ldr	r2, [pc, #132]	; (800e344 <HAL_TIM_Base_Start_IT+0xd8>)
 800e2c0:	4293      	cmp	r3, r2
 800e2c2:	d013      	beq.n	800e2ec <HAL_TIM_Base_Start_IT+0x80>
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	4a1f      	ldr	r2, [pc, #124]	; (800e348 <HAL_TIM_Base_Start_IT+0xdc>)
 800e2ca:	4293      	cmp	r3, r2
 800e2cc:	d00e      	beq.n	800e2ec <HAL_TIM_Base_Start_IT+0x80>
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	4a1e      	ldr	r2, [pc, #120]	; (800e34c <HAL_TIM_Base_Start_IT+0xe0>)
 800e2d4:	4293      	cmp	r3, r2
 800e2d6:	d009      	beq.n	800e2ec <HAL_TIM_Base_Start_IT+0x80>
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	4a1c      	ldr	r2, [pc, #112]	; (800e350 <HAL_TIM_Base_Start_IT+0xe4>)
 800e2de:	4293      	cmp	r3, r2
 800e2e0:	d004      	beq.n	800e2ec <HAL_TIM_Base_Start_IT+0x80>
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	4a1b      	ldr	r2, [pc, #108]	; (800e354 <HAL_TIM_Base_Start_IT+0xe8>)
 800e2e8:	4293      	cmp	r3, r2
 800e2ea:	d115      	bne.n	800e318 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	689a      	ldr	r2, [r3, #8]
 800e2f2:	4b19      	ldr	r3, [pc, #100]	; (800e358 <HAL_TIM_Base_Start_IT+0xec>)
 800e2f4:	4013      	ands	r3, r2
 800e2f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	2b06      	cmp	r3, #6
 800e2fc:	d015      	beq.n	800e32a <HAL_TIM_Base_Start_IT+0xbe>
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e304:	d011      	beq.n	800e32a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	681a      	ldr	r2, [r3, #0]
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	f042 0201 	orr.w	r2, r2, #1
 800e314:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e316:	e008      	b.n	800e32a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	681a      	ldr	r2, [r3, #0]
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	f042 0201 	orr.w	r2, r2, #1
 800e326:	601a      	str	r2, [r3, #0]
 800e328:	e000      	b.n	800e32c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e32a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e32c:	2300      	movs	r3, #0
}
 800e32e:	4618      	mov	r0, r3
 800e330:	3714      	adds	r7, #20
 800e332:	46bd      	mov	sp, r7
 800e334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e338:	4770      	bx	lr
 800e33a:	bf00      	nop
 800e33c:	40010000 	.word	0x40010000
 800e340:	40000400 	.word	0x40000400
 800e344:	40000800 	.word	0x40000800
 800e348:	40000c00 	.word	0x40000c00
 800e34c:	40010400 	.word	0x40010400
 800e350:	40001800 	.word	0x40001800
 800e354:	40014000 	.word	0x40014000
 800e358:	00010007 	.word	0x00010007

0800e35c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b086      	sub	sp, #24
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
 800e364:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d101      	bne.n	800e370 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800e36c:	2301      	movs	r3, #1
 800e36e:	e08f      	b.n	800e490 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e376:	b2db      	uxtb	r3, r3
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d106      	bne.n	800e38a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	2200      	movs	r2, #0
 800e380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800e384:	6878      	ldr	r0, [r7, #4]
 800e386:	f7f7 fb05 	bl	8005994 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	2202      	movs	r2, #2
 800e38e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	6899      	ldr	r1, [r3, #8]
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	681a      	ldr	r2, [r3, #0]
 800e39c:	4b3e      	ldr	r3, [pc, #248]	; (800e498 <HAL_TIM_Encoder_Init+0x13c>)
 800e39e:	400b      	ands	r3, r1
 800e3a0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	681a      	ldr	r2, [r3, #0]
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	3304      	adds	r3, #4
 800e3aa:	4619      	mov	r1, r3
 800e3ac:	4610      	mov	r0, r2
 800e3ae:	f000 fb49 	bl	800ea44 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	689b      	ldr	r3, [r3, #8]
 800e3b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	699b      	ldr	r3, [r3, #24]
 800e3c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	6a1b      	ldr	r3, [r3, #32]
 800e3c8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800e3ca:	683b      	ldr	r3, [r7, #0]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	697a      	ldr	r2, [r7, #20]
 800e3d0:	4313      	orrs	r3, r2
 800e3d2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800e3d4:	693a      	ldr	r2, [r7, #16]
 800e3d6:	4b31      	ldr	r3, [pc, #196]	; (800e49c <HAL_TIM_Encoder_Init+0x140>)
 800e3d8:	4013      	ands	r3, r2
 800e3da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800e3dc:	683b      	ldr	r3, [r7, #0]
 800e3de:	689a      	ldr	r2, [r3, #8]
 800e3e0:	683b      	ldr	r3, [r7, #0]
 800e3e2:	699b      	ldr	r3, [r3, #24]
 800e3e4:	021b      	lsls	r3, r3, #8
 800e3e6:	4313      	orrs	r3, r2
 800e3e8:	693a      	ldr	r2, [r7, #16]
 800e3ea:	4313      	orrs	r3, r2
 800e3ec:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800e3ee:	693a      	ldr	r2, [r7, #16]
 800e3f0:	4b2b      	ldr	r3, [pc, #172]	; (800e4a0 <HAL_TIM_Encoder_Init+0x144>)
 800e3f2:	4013      	ands	r3, r2
 800e3f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800e3f6:	693a      	ldr	r2, [r7, #16]
 800e3f8:	4b2a      	ldr	r3, [pc, #168]	; (800e4a4 <HAL_TIM_Encoder_Init+0x148>)
 800e3fa:	4013      	ands	r3, r2
 800e3fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800e3fe:	683b      	ldr	r3, [r7, #0]
 800e400:	68da      	ldr	r2, [r3, #12]
 800e402:	683b      	ldr	r3, [r7, #0]
 800e404:	69db      	ldr	r3, [r3, #28]
 800e406:	021b      	lsls	r3, r3, #8
 800e408:	4313      	orrs	r3, r2
 800e40a:	693a      	ldr	r2, [r7, #16]
 800e40c:	4313      	orrs	r3, r2
 800e40e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800e410:	683b      	ldr	r3, [r7, #0]
 800e412:	691b      	ldr	r3, [r3, #16]
 800e414:	011a      	lsls	r2, r3, #4
 800e416:	683b      	ldr	r3, [r7, #0]
 800e418:	6a1b      	ldr	r3, [r3, #32]
 800e41a:	031b      	lsls	r3, r3, #12
 800e41c:	4313      	orrs	r3, r2
 800e41e:	693a      	ldr	r2, [r7, #16]
 800e420:	4313      	orrs	r3, r2
 800e422:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800e42a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800e432:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800e434:	683b      	ldr	r3, [r7, #0]
 800e436:	685a      	ldr	r2, [r3, #4]
 800e438:	683b      	ldr	r3, [r7, #0]
 800e43a:	695b      	ldr	r3, [r3, #20]
 800e43c:	011b      	lsls	r3, r3, #4
 800e43e:	4313      	orrs	r3, r2
 800e440:	68fa      	ldr	r2, [r7, #12]
 800e442:	4313      	orrs	r3, r2
 800e444:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	697a      	ldr	r2, [r7, #20]
 800e44c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	693a      	ldr	r2, [r7, #16]
 800e454:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	68fa      	ldr	r2, [r7, #12]
 800e45c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	2201      	movs	r2, #1
 800e462:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	2201      	movs	r2, #1
 800e46a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	2201      	movs	r2, #1
 800e472:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	2201      	movs	r2, #1
 800e47a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	2201      	movs	r2, #1
 800e482:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	2201      	movs	r2, #1
 800e48a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e48e:	2300      	movs	r3, #0
}
 800e490:	4618      	mov	r0, r3
 800e492:	3718      	adds	r7, #24
 800e494:	46bd      	mov	sp, r7
 800e496:	bd80      	pop	{r7, pc}
 800e498:	fffebff8 	.word	0xfffebff8
 800e49c:	fffffcfc 	.word	0xfffffcfc
 800e4a0:	fffff3f3 	.word	0xfffff3f3
 800e4a4:	ffff0f0f 	.word	0xffff0f0f

0800e4a8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	b084      	sub	sp, #16
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	6078      	str	r0, [r7, #4]
 800e4b0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e4b8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e4c0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e4c8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e4d0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800e4d2:	683b      	ldr	r3, [r7, #0]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d110      	bne.n	800e4fa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800e4d8:	7bfb      	ldrb	r3, [r7, #15]
 800e4da:	2b01      	cmp	r3, #1
 800e4dc:	d102      	bne.n	800e4e4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800e4de:	7b7b      	ldrb	r3, [r7, #13]
 800e4e0:	2b01      	cmp	r3, #1
 800e4e2:	d001      	beq.n	800e4e8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800e4e4:	2301      	movs	r3, #1
 800e4e6:	e069      	b.n	800e5bc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	2202      	movs	r2, #2
 800e4ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	2202      	movs	r2, #2
 800e4f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e4f8:	e031      	b.n	800e55e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800e4fa:	683b      	ldr	r3, [r7, #0]
 800e4fc:	2b04      	cmp	r3, #4
 800e4fe:	d110      	bne.n	800e522 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800e500:	7bbb      	ldrb	r3, [r7, #14]
 800e502:	2b01      	cmp	r3, #1
 800e504:	d102      	bne.n	800e50c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800e506:	7b3b      	ldrb	r3, [r7, #12]
 800e508:	2b01      	cmp	r3, #1
 800e50a:	d001      	beq.n	800e510 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800e50c:	2301      	movs	r3, #1
 800e50e:	e055      	b.n	800e5bc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	2202      	movs	r2, #2
 800e514:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	2202      	movs	r2, #2
 800e51c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e520:	e01d      	b.n	800e55e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800e522:	7bfb      	ldrb	r3, [r7, #15]
 800e524:	2b01      	cmp	r3, #1
 800e526:	d108      	bne.n	800e53a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800e528:	7bbb      	ldrb	r3, [r7, #14]
 800e52a:	2b01      	cmp	r3, #1
 800e52c:	d105      	bne.n	800e53a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800e52e:	7b7b      	ldrb	r3, [r7, #13]
 800e530:	2b01      	cmp	r3, #1
 800e532:	d102      	bne.n	800e53a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800e534:	7b3b      	ldrb	r3, [r7, #12]
 800e536:	2b01      	cmp	r3, #1
 800e538:	d001      	beq.n	800e53e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800e53a:	2301      	movs	r3, #1
 800e53c:	e03e      	b.n	800e5bc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	2202      	movs	r2, #2
 800e542:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	2202      	movs	r2, #2
 800e54a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	2202      	movs	r2, #2
 800e552:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	2202      	movs	r2, #2
 800e55a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800e55e:	683b      	ldr	r3, [r7, #0]
 800e560:	2b00      	cmp	r3, #0
 800e562:	d003      	beq.n	800e56c <HAL_TIM_Encoder_Start+0xc4>
 800e564:	683b      	ldr	r3, [r7, #0]
 800e566:	2b04      	cmp	r3, #4
 800e568:	d008      	beq.n	800e57c <HAL_TIM_Encoder_Start+0xd4>
 800e56a:	e00f      	b.n	800e58c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	2201      	movs	r2, #1
 800e572:	2100      	movs	r1, #0
 800e574:	4618      	mov	r0, r3
 800e576:	f000 fb9d 	bl	800ecb4 <TIM_CCxChannelCmd>
      break;
 800e57a:	e016      	b.n	800e5aa <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	2201      	movs	r2, #1
 800e582:	2104      	movs	r1, #4
 800e584:	4618      	mov	r0, r3
 800e586:	f000 fb95 	bl	800ecb4 <TIM_CCxChannelCmd>
      break;
 800e58a:	e00e      	b.n	800e5aa <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	2201      	movs	r2, #1
 800e592:	2100      	movs	r1, #0
 800e594:	4618      	mov	r0, r3
 800e596:	f000 fb8d 	bl	800ecb4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	2201      	movs	r2, #1
 800e5a0:	2104      	movs	r1, #4
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	f000 fb86 	bl	800ecb4 <TIM_CCxChannelCmd>
      break;
 800e5a8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	681a      	ldr	r2, [r3, #0]
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	f042 0201 	orr.w	r2, r2, #1
 800e5b8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800e5ba:	2300      	movs	r3, #0
}
 800e5bc:	4618      	mov	r0, r3
 800e5be:	3710      	adds	r7, #16
 800e5c0:	46bd      	mov	sp, r7
 800e5c2:	bd80      	pop	{r7, pc}

0800e5c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e5c4:	b580      	push	{r7, lr}
 800e5c6:	b082      	sub	sp, #8
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	691b      	ldr	r3, [r3, #16]
 800e5d2:	f003 0302 	and.w	r3, r3, #2
 800e5d6:	2b02      	cmp	r3, #2
 800e5d8:	d122      	bne.n	800e620 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	68db      	ldr	r3, [r3, #12]
 800e5e0:	f003 0302 	and.w	r3, r3, #2
 800e5e4:	2b02      	cmp	r3, #2
 800e5e6:	d11b      	bne.n	800e620 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	f06f 0202 	mvn.w	r2, #2
 800e5f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	2201      	movs	r2, #1
 800e5f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	699b      	ldr	r3, [r3, #24]
 800e5fe:	f003 0303 	and.w	r3, r3, #3
 800e602:	2b00      	cmp	r3, #0
 800e604:	d003      	beq.n	800e60e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e606:	6878      	ldr	r0, [r7, #4]
 800e608:	f000 f9fe 	bl	800ea08 <HAL_TIM_IC_CaptureCallback>
 800e60c:	e005      	b.n	800e61a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e60e:	6878      	ldr	r0, [r7, #4]
 800e610:	f000 f9f0 	bl	800e9f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e614:	6878      	ldr	r0, [r7, #4]
 800e616:	f000 fa01 	bl	800ea1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	2200      	movs	r2, #0
 800e61e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	691b      	ldr	r3, [r3, #16]
 800e626:	f003 0304 	and.w	r3, r3, #4
 800e62a:	2b04      	cmp	r3, #4
 800e62c:	d122      	bne.n	800e674 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	68db      	ldr	r3, [r3, #12]
 800e634:	f003 0304 	and.w	r3, r3, #4
 800e638:	2b04      	cmp	r3, #4
 800e63a:	d11b      	bne.n	800e674 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	f06f 0204 	mvn.w	r2, #4
 800e644:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	2202      	movs	r2, #2
 800e64a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	699b      	ldr	r3, [r3, #24]
 800e652:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e656:	2b00      	cmp	r3, #0
 800e658:	d003      	beq.n	800e662 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e65a:	6878      	ldr	r0, [r7, #4]
 800e65c:	f000 f9d4 	bl	800ea08 <HAL_TIM_IC_CaptureCallback>
 800e660:	e005      	b.n	800e66e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e662:	6878      	ldr	r0, [r7, #4]
 800e664:	f000 f9c6 	bl	800e9f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e668:	6878      	ldr	r0, [r7, #4]
 800e66a:	f000 f9d7 	bl	800ea1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	2200      	movs	r2, #0
 800e672:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	691b      	ldr	r3, [r3, #16]
 800e67a:	f003 0308 	and.w	r3, r3, #8
 800e67e:	2b08      	cmp	r3, #8
 800e680:	d122      	bne.n	800e6c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	68db      	ldr	r3, [r3, #12]
 800e688:	f003 0308 	and.w	r3, r3, #8
 800e68c:	2b08      	cmp	r3, #8
 800e68e:	d11b      	bne.n	800e6c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	f06f 0208 	mvn.w	r2, #8
 800e698:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	2204      	movs	r2, #4
 800e69e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	69db      	ldr	r3, [r3, #28]
 800e6a6:	f003 0303 	and.w	r3, r3, #3
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d003      	beq.n	800e6b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e6ae:	6878      	ldr	r0, [r7, #4]
 800e6b0:	f000 f9aa 	bl	800ea08 <HAL_TIM_IC_CaptureCallback>
 800e6b4:	e005      	b.n	800e6c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e6b6:	6878      	ldr	r0, [r7, #4]
 800e6b8:	f000 f99c 	bl	800e9f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e6bc:	6878      	ldr	r0, [r7, #4]
 800e6be:	f000 f9ad 	bl	800ea1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	2200      	movs	r2, #0
 800e6c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	691b      	ldr	r3, [r3, #16]
 800e6ce:	f003 0310 	and.w	r3, r3, #16
 800e6d2:	2b10      	cmp	r3, #16
 800e6d4:	d122      	bne.n	800e71c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	68db      	ldr	r3, [r3, #12]
 800e6dc:	f003 0310 	and.w	r3, r3, #16
 800e6e0:	2b10      	cmp	r3, #16
 800e6e2:	d11b      	bne.n	800e71c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	f06f 0210 	mvn.w	r2, #16
 800e6ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	2208      	movs	r2, #8
 800e6f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	69db      	ldr	r3, [r3, #28]
 800e6fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d003      	beq.n	800e70a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e702:	6878      	ldr	r0, [r7, #4]
 800e704:	f000 f980 	bl	800ea08 <HAL_TIM_IC_CaptureCallback>
 800e708:	e005      	b.n	800e716 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e70a:	6878      	ldr	r0, [r7, #4]
 800e70c:	f000 f972 	bl	800e9f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e710:	6878      	ldr	r0, [r7, #4]
 800e712:	f000 f983 	bl	800ea1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	2200      	movs	r2, #0
 800e71a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	691b      	ldr	r3, [r3, #16]
 800e722:	f003 0301 	and.w	r3, r3, #1
 800e726:	2b01      	cmp	r3, #1
 800e728:	d10e      	bne.n	800e748 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	68db      	ldr	r3, [r3, #12]
 800e730:	f003 0301 	and.w	r3, r3, #1
 800e734:	2b01      	cmp	r3, #1
 800e736:	d107      	bne.n	800e748 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	f06f 0201 	mvn.w	r2, #1
 800e740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e742:	6878      	ldr	r0, [r7, #4]
 800e744:	f7f8 fb72 	bl	8006e2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	691b      	ldr	r3, [r3, #16]
 800e74e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e752:	2b80      	cmp	r3, #128	; 0x80
 800e754:	d10e      	bne.n	800e774 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	68db      	ldr	r3, [r3, #12]
 800e75c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e760:	2b80      	cmp	r3, #128	; 0x80
 800e762:	d107      	bne.n	800e774 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e76c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e76e:	6878      	ldr	r0, [r7, #4]
 800e770:	f000 fb5e 	bl	800ee30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	691b      	ldr	r3, [r3, #16]
 800e77a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e77e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e782:	d10e      	bne.n	800e7a2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	68db      	ldr	r3, [r3, #12]
 800e78a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e78e:	2b80      	cmp	r3, #128	; 0x80
 800e790:	d107      	bne.n	800e7a2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e79a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e79c:	6878      	ldr	r0, [r7, #4]
 800e79e:	f000 fb51 	bl	800ee44 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	691b      	ldr	r3, [r3, #16]
 800e7a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e7ac:	2b40      	cmp	r3, #64	; 0x40
 800e7ae:	d10e      	bne.n	800e7ce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	68db      	ldr	r3, [r3, #12]
 800e7b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e7ba:	2b40      	cmp	r3, #64	; 0x40
 800e7bc:	d107      	bne.n	800e7ce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e7c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e7c8:	6878      	ldr	r0, [r7, #4]
 800e7ca:	f000 f931 	bl	800ea30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	691b      	ldr	r3, [r3, #16]
 800e7d4:	f003 0320 	and.w	r3, r3, #32
 800e7d8:	2b20      	cmp	r3, #32
 800e7da:	d10e      	bne.n	800e7fa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	68db      	ldr	r3, [r3, #12]
 800e7e2:	f003 0320 	and.w	r3, r3, #32
 800e7e6:	2b20      	cmp	r3, #32
 800e7e8:	d107      	bne.n	800e7fa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	f06f 0220 	mvn.w	r2, #32
 800e7f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e7f4:	6878      	ldr	r0, [r7, #4]
 800e7f6:	f000 fb11 	bl	800ee1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e7fa:	bf00      	nop
 800e7fc:	3708      	adds	r7, #8
 800e7fe:	46bd      	mov	sp, r7
 800e800:	bd80      	pop	{r7, pc}
	...

0800e804 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e804:	b580      	push	{r7, lr}
 800e806:	b084      	sub	sp, #16
 800e808:	af00      	add	r7, sp, #0
 800e80a:	6078      	str	r0, [r7, #4]
 800e80c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e80e:	2300      	movs	r3, #0
 800e810:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e818:	2b01      	cmp	r3, #1
 800e81a:	d101      	bne.n	800e820 <HAL_TIM_ConfigClockSource+0x1c>
 800e81c:	2302      	movs	r3, #2
 800e81e:	e0dc      	b.n	800e9da <HAL_TIM_ConfigClockSource+0x1d6>
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	2201      	movs	r2, #1
 800e824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	2202      	movs	r2, #2
 800e82c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	689b      	ldr	r3, [r3, #8]
 800e836:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e838:	68ba      	ldr	r2, [r7, #8]
 800e83a:	4b6a      	ldr	r3, [pc, #424]	; (800e9e4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800e83c:	4013      	ands	r3, r2
 800e83e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e840:	68bb      	ldr	r3, [r7, #8]
 800e842:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e846:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	68ba      	ldr	r2, [r7, #8]
 800e84e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e850:	683b      	ldr	r3, [r7, #0]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	4a64      	ldr	r2, [pc, #400]	; (800e9e8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800e856:	4293      	cmp	r3, r2
 800e858:	f000 80a9 	beq.w	800e9ae <HAL_TIM_ConfigClockSource+0x1aa>
 800e85c:	4a62      	ldr	r2, [pc, #392]	; (800e9e8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800e85e:	4293      	cmp	r3, r2
 800e860:	f200 80ae 	bhi.w	800e9c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e864:	4a61      	ldr	r2, [pc, #388]	; (800e9ec <HAL_TIM_ConfigClockSource+0x1e8>)
 800e866:	4293      	cmp	r3, r2
 800e868:	f000 80a1 	beq.w	800e9ae <HAL_TIM_ConfigClockSource+0x1aa>
 800e86c:	4a5f      	ldr	r2, [pc, #380]	; (800e9ec <HAL_TIM_ConfigClockSource+0x1e8>)
 800e86e:	4293      	cmp	r3, r2
 800e870:	f200 80a6 	bhi.w	800e9c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e874:	4a5e      	ldr	r2, [pc, #376]	; (800e9f0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800e876:	4293      	cmp	r3, r2
 800e878:	f000 8099 	beq.w	800e9ae <HAL_TIM_ConfigClockSource+0x1aa>
 800e87c:	4a5c      	ldr	r2, [pc, #368]	; (800e9f0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800e87e:	4293      	cmp	r3, r2
 800e880:	f200 809e 	bhi.w	800e9c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e884:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800e888:	f000 8091 	beq.w	800e9ae <HAL_TIM_ConfigClockSource+0x1aa>
 800e88c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800e890:	f200 8096 	bhi.w	800e9c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e894:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e898:	f000 8089 	beq.w	800e9ae <HAL_TIM_ConfigClockSource+0x1aa>
 800e89c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e8a0:	f200 808e 	bhi.w	800e9c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e8a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e8a8:	d03e      	beq.n	800e928 <HAL_TIM_ConfigClockSource+0x124>
 800e8aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e8ae:	f200 8087 	bhi.w	800e9c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e8b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e8b6:	f000 8086 	beq.w	800e9c6 <HAL_TIM_ConfigClockSource+0x1c2>
 800e8ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e8be:	d87f      	bhi.n	800e9c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e8c0:	2b70      	cmp	r3, #112	; 0x70
 800e8c2:	d01a      	beq.n	800e8fa <HAL_TIM_ConfigClockSource+0xf6>
 800e8c4:	2b70      	cmp	r3, #112	; 0x70
 800e8c6:	d87b      	bhi.n	800e9c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e8c8:	2b60      	cmp	r3, #96	; 0x60
 800e8ca:	d050      	beq.n	800e96e <HAL_TIM_ConfigClockSource+0x16a>
 800e8cc:	2b60      	cmp	r3, #96	; 0x60
 800e8ce:	d877      	bhi.n	800e9c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e8d0:	2b50      	cmp	r3, #80	; 0x50
 800e8d2:	d03c      	beq.n	800e94e <HAL_TIM_ConfigClockSource+0x14a>
 800e8d4:	2b50      	cmp	r3, #80	; 0x50
 800e8d6:	d873      	bhi.n	800e9c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e8d8:	2b40      	cmp	r3, #64	; 0x40
 800e8da:	d058      	beq.n	800e98e <HAL_TIM_ConfigClockSource+0x18a>
 800e8dc:	2b40      	cmp	r3, #64	; 0x40
 800e8de:	d86f      	bhi.n	800e9c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e8e0:	2b30      	cmp	r3, #48	; 0x30
 800e8e2:	d064      	beq.n	800e9ae <HAL_TIM_ConfigClockSource+0x1aa>
 800e8e4:	2b30      	cmp	r3, #48	; 0x30
 800e8e6:	d86b      	bhi.n	800e9c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e8e8:	2b20      	cmp	r3, #32
 800e8ea:	d060      	beq.n	800e9ae <HAL_TIM_ConfigClockSource+0x1aa>
 800e8ec:	2b20      	cmp	r3, #32
 800e8ee:	d867      	bhi.n	800e9c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d05c      	beq.n	800e9ae <HAL_TIM_ConfigClockSource+0x1aa>
 800e8f4:	2b10      	cmp	r3, #16
 800e8f6:	d05a      	beq.n	800e9ae <HAL_TIM_ConfigClockSource+0x1aa>
 800e8f8:	e062      	b.n	800e9c0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	6818      	ldr	r0, [r3, #0]
 800e8fe:	683b      	ldr	r3, [r7, #0]
 800e900:	6899      	ldr	r1, [r3, #8]
 800e902:	683b      	ldr	r3, [r7, #0]
 800e904:	685a      	ldr	r2, [r3, #4]
 800e906:	683b      	ldr	r3, [r7, #0]
 800e908:	68db      	ldr	r3, [r3, #12]
 800e90a:	f000 f9b3 	bl	800ec74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	689b      	ldr	r3, [r3, #8]
 800e914:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e916:	68bb      	ldr	r3, [r7, #8]
 800e918:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e91c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	68ba      	ldr	r2, [r7, #8]
 800e924:	609a      	str	r2, [r3, #8]
      break;
 800e926:	e04f      	b.n	800e9c8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	6818      	ldr	r0, [r3, #0]
 800e92c:	683b      	ldr	r3, [r7, #0]
 800e92e:	6899      	ldr	r1, [r3, #8]
 800e930:	683b      	ldr	r3, [r7, #0]
 800e932:	685a      	ldr	r2, [r3, #4]
 800e934:	683b      	ldr	r3, [r7, #0]
 800e936:	68db      	ldr	r3, [r3, #12]
 800e938:	f000 f99c 	bl	800ec74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	689a      	ldr	r2, [r3, #8]
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e94a:	609a      	str	r2, [r3, #8]
      break;
 800e94c:	e03c      	b.n	800e9c8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	6818      	ldr	r0, [r3, #0]
 800e952:	683b      	ldr	r3, [r7, #0]
 800e954:	6859      	ldr	r1, [r3, #4]
 800e956:	683b      	ldr	r3, [r7, #0]
 800e958:	68db      	ldr	r3, [r3, #12]
 800e95a:	461a      	mov	r2, r3
 800e95c:	f000 f90c 	bl	800eb78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	2150      	movs	r1, #80	; 0x50
 800e966:	4618      	mov	r0, r3
 800e968:	f000 f966 	bl	800ec38 <TIM_ITRx_SetConfig>
      break;
 800e96c:	e02c      	b.n	800e9c8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	6818      	ldr	r0, [r3, #0]
 800e972:	683b      	ldr	r3, [r7, #0]
 800e974:	6859      	ldr	r1, [r3, #4]
 800e976:	683b      	ldr	r3, [r7, #0]
 800e978:	68db      	ldr	r3, [r3, #12]
 800e97a:	461a      	mov	r2, r3
 800e97c:	f000 f92b 	bl	800ebd6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	2160      	movs	r1, #96	; 0x60
 800e986:	4618      	mov	r0, r3
 800e988:	f000 f956 	bl	800ec38 <TIM_ITRx_SetConfig>
      break;
 800e98c:	e01c      	b.n	800e9c8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	6818      	ldr	r0, [r3, #0]
 800e992:	683b      	ldr	r3, [r7, #0]
 800e994:	6859      	ldr	r1, [r3, #4]
 800e996:	683b      	ldr	r3, [r7, #0]
 800e998:	68db      	ldr	r3, [r3, #12]
 800e99a:	461a      	mov	r2, r3
 800e99c:	f000 f8ec 	bl	800eb78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	2140      	movs	r1, #64	; 0x40
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	f000 f946 	bl	800ec38 <TIM_ITRx_SetConfig>
      break;
 800e9ac:	e00c      	b.n	800e9c8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	681a      	ldr	r2, [r3, #0]
 800e9b2:	683b      	ldr	r3, [r7, #0]
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	4619      	mov	r1, r3
 800e9b8:	4610      	mov	r0, r2
 800e9ba:	f000 f93d 	bl	800ec38 <TIM_ITRx_SetConfig>
      break;
 800e9be:	e003      	b.n	800e9c8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800e9c0:	2301      	movs	r3, #1
 800e9c2:	73fb      	strb	r3, [r7, #15]
      break;
 800e9c4:	e000      	b.n	800e9c8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800e9c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	2201      	movs	r2, #1
 800e9cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e9d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9da:	4618      	mov	r0, r3
 800e9dc:	3710      	adds	r7, #16
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	bd80      	pop	{r7, pc}
 800e9e2:	bf00      	nop
 800e9e4:	ffceff88 	.word	0xffceff88
 800e9e8:	00100040 	.word	0x00100040
 800e9ec:	00100030 	.word	0x00100030
 800e9f0:	00100020 	.word	0x00100020

0800e9f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e9f4:	b480      	push	{r7}
 800e9f6:	b083      	sub	sp, #12
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e9fc:	bf00      	nop
 800e9fe:	370c      	adds	r7, #12
 800ea00:	46bd      	mov	sp, r7
 800ea02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea06:	4770      	bx	lr

0800ea08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ea08:	b480      	push	{r7}
 800ea0a:	b083      	sub	sp, #12
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ea10:	bf00      	nop
 800ea12:	370c      	adds	r7, #12
 800ea14:	46bd      	mov	sp, r7
 800ea16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1a:	4770      	bx	lr

0800ea1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ea1c:	b480      	push	{r7}
 800ea1e:	b083      	sub	sp, #12
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ea24:	bf00      	nop
 800ea26:	370c      	adds	r7, #12
 800ea28:	46bd      	mov	sp, r7
 800ea2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea2e:	4770      	bx	lr

0800ea30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ea30:	b480      	push	{r7}
 800ea32:	b083      	sub	sp, #12
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ea38:	bf00      	nop
 800ea3a:	370c      	adds	r7, #12
 800ea3c:	46bd      	mov	sp, r7
 800ea3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea42:	4770      	bx	lr

0800ea44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ea44:	b480      	push	{r7}
 800ea46:	b085      	sub	sp, #20
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	6078      	str	r0, [r7, #4]
 800ea4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	4a40      	ldr	r2, [pc, #256]	; (800eb58 <TIM_Base_SetConfig+0x114>)
 800ea58:	4293      	cmp	r3, r2
 800ea5a:	d013      	beq.n	800ea84 <TIM_Base_SetConfig+0x40>
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ea62:	d00f      	beq.n	800ea84 <TIM_Base_SetConfig+0x40>
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	4a3d      	ldr	r2, [pc, #244]	; (800eb5c <TIM_Base_SetConfig+0x118>)
 800ea68:	4293      	cmp	r3, r2
 800ea6a:	d00b      	beq.n	800ea84 <TIM_Base_SetConfig+0x40>
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	4a3c      	ldr	r2, [pc, #240]	; (800eb60 <TIM_Base_SetConfig+0x11c>)
 800ea70:	4293      	cmp	r3, r2
 800ea72:	d007      	beq.n	800ea84 <TIM_Base_SetConfig+0x40>
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	4a3b      	ldr	r2, [pc, #236]	; (800eb64 <TIM_Base_SetConfig+0x120>)
 800ea78:	4293      	cmp	r3, r2
 800ea7a:	d003      	beq.n	800ea84 <TIM_Base_SetConfig+0x40>
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	4a3a      	ldr	r2, [pc, #232]	; (800eb68 <TIM_Base_SetConfig+0x124>)
 800ea80:	4293      	cmp	r3, r2
 800ea82:	d108      	bne.n	800ea96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ea8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ea8c:	683b      	ldr	r3, [r7, #0]
 800ea8e:	685b      	ldr	r3, [r3, #4]
 800ea90:	68fa      	ldr	r2, [r7, #12]
 800ea92:	4313      	orrs	r3, r2
 800ea94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	4a2f      	ldr	r2, [pc, #188]	; (800eb58 <TIM_Base_SetConfig+0x114>)
 800ea9a:	4293      	cmp	r3, r2
 800ea9c:	d01f      	beq.n	800eade <TIM_Base_SetConfig+0x9a>
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eaa4:	d01b      	beq.n	800eade <TIM_Base_SetConfig+0x9a>
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	4a2c      	ldr	r2, [pc, #176]	; (800eb5c <TIM_Base_SetConfig+0x118>)
 800eaaa:	4293      	cmp	r3, r2
 800eaac:	d017      	beq.n	800eade <TIM_Base_SetConfig+0x9a>
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	4a2b      	ldr	r2, [pc, #172]	; (800eb60 <TIM_Base_SetConfig+0x11c>)
 800eab2:	4293      	cmp	r3, r2
 800eab4:	d013      	beq.n	800eade <TIM_Base_SetConfig+0x9a>
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	4a2a      	ldr	r2, [pc, #168]	; (800eb64 <TIM_Base_SetConfig+0x120>)
 800eaba:	4293      	cmp	r3, r2
 800eabc:	d00f      	beq.n	800eade <TIM_Base_SetConfig+0x9a>
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	4a29      	ldr	r2, [pc, #164]	; (800eb68 <TIM_Base_SetConfig+0x124>)
 800eac2:	4293      	cmp	r3, r2
 800eac4:	d00b      	beq.n	800eade <TIM_Base_SetConfig+0x9a>
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	4a28      	ldr	r2, [pc, #160]	; (800eb6c <TIM_Base_SetConfig+0x128>)
 800eaca:	4293      	cmp	r3, r2
 800eacc:	d007      	beq.n	800eade <TIM_Base_SetConfig+0x9a>
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	4a27      	ldr	r2, [pc, #156]	; (800eb70 <TIM_Base_SetConfig+0x12c>)
 800ead2:	4293      	cmp	r3, r2
 800ead4:	d003      	beq.n	800eade <TIM_Base_SetConfig+0x9a>
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	4a26      	ldr	r2, [pc, #152]	; (800eb74 <TIM_Base_SetConfig+0x130>)
 800eada:	4293      	cmp	r3, r2
 800eadc:	d108      	bne.n	800eaf0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800eae4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800eae6:	683b      	ldr	r3, [r7, #0]
 800eae8:	68db      	ldr	r3, [r3, #12]
 800eaea:	68fa      	ldr	r2, [r7, #12]
 800eaec:	4313      	orrs	r3, r2
 800eaee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800eaf6:	683b      	ldr	r3, [r7, #0]
 800eaf8:	695b      	ldr	r3, [r3, #20]
 800eafa:	4313      	orrs	r3, r2
 800eafc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	68fa      	ldr	r2, [r7, #12]
 800eb02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800eb04:	683b      	ldr	r3, [r7, #0]
 800eb06:	689a      	ldr	r2, [r3, #8]
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800eb0c:	683b      	ldr	r3, [r7, #0]
 800eb0e:	681a      	ldr	r2, [r3, #0]
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	4a10      	ldr	r2, [pc, #64]	; (800eb58 <TIM_Base_SetConfig+0x114>)
 800eb18:	4293      	cmp	r3, r2
 800eb1a:	d00f      	beq.n	800eb3c <TIM_Base_SetConfig+0xf8>
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	4a12      	ldr	r2, [pc, #72]	; (800eb68 <TIM_Base_SetConfig+0x124>)
 800eb20:	4293      	cmp	r3, r2
 800eb22:	d00b      	beq.n	800eb3c <TIM_Base_SetConfig+0xf8>
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	4a11      	ldr	r2, [pc, #68]	; (800eb6c <TIM_Base_SetConfig+0x128>)
 800eb28:	4293      	cmp	r3, r2
 800eb2a:	d007      	beq.n	800eb3c <TIM_Base_SetConfig+0xf8>
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	4a10      	ldr	r2, [pc, #64]	; (800eb70 <TIM_Base_SetConfig+0x12c>)
 800eb30:	4293      	cmp	r3, r2
 800eb32:	d003      	beq.n	800eb3c <TIM_Base_SetConfig+0xf8>
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	4a0f      	ldr	r2, [pc, #60]	; (800eb74 <TIM_Base_SetConfig+0x130>)
 800eb38:	4293      	cmp	r3, r2
 800eb3a:	d103      	bne.n	800eb44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800eb3c:	683b      	ldr	r3, [r7, #0]
 800eb3e:	691a      	ldr	r2, [r3, #16]
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	2201      	movs	r2, #1
 800eb48:	615a      	str	r2, [r3, #20]
}
 800eb4a:	bf00      	nop
 800eb4c:	3714      	adds	r7, #20
 800eb4e:	46bd      	mov	sp, r7
 800eb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb54:	4770      	bx	lr
 800eb56:	bf00      	nop
 800eb58:	40010000 	.word	0x40010000
 800eb5c:	40000400 	.word	0x40000400
 800eb60:	40000800 	.word	0x40000800
 800eb64:	40000c00 	.word	0x40000c00
 800eb68:	40010400 	.word	0x40010400
 800eb6c:	40014000 	.word	0x40014000
 800eb70:	40014400 	.word	0x40014400
 800eb74:	40014800 	.word	0x40014800

0800eb78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800eb78:	b480      	push	{r7}
 800eb7a:	b087      	sub	sp, #28
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	60f8      	str	r0, [r7, #12]
 800eb80:	60b9      	str	r1, [r7, #8]
 800eb82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	6a1b      	ldr	r3, [r3, #32]
 800eb88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	6a1b      	ldr	r3, [r3, #32]
 800eb8e:	f023 0201 	bic.w	r2, r3, #1
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	699b      	ldr	r3, [r3, #24]
 800eb9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800eb9c:	693b      	ldr	r3, [r7, #16]
 800eb9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800eba2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	011b      	lsls	r3, r3, #4
 800eba8:	693a      	ldr	r2, [r7, #16]
 800ebaa:	4313      	orrs	r3, r2
 800ebac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ebae:	697b      	ldr	r3, [r7, #20]
 800ebb0:	f023 030a 	bic.w	r3, r3, #10
 800ebb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ebb6:	697a      	ldr	r2, [r7, #20]
 800ebb8:	68bb      	ldr	r3, [r7, #8]
 800ebba:	4313      	orrs	r3, r2
 800ebbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	693a      	ldr	r2, [r7, #16]
 800ebc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	697a      	ldr	r2, [r7, #20]
 800ebc8:	621a      	str	r2, [r3, #32]
}
 800ebca:	bf00      	nop
 800ebcc:	371c      	adds	r7, #28
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd4:	4770      	bx	lr

0800ebd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ebd6:	b480      	push	{r7}
 800ebd8:	b087      	sub	sp, #28
 800ebda:	af00      	add	r7, sp, #0
 800ebdc:	60f8      	str	r0, [r7, #12]
 800ebde:	60b9      	str	r1, [r7, #8]
 800ebe0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	6a1b      	ldr	r3, [r3, #32]
 800ebe6:	f023 0210 	bic.w	r2, r3, #16
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	699b      	ldr	r3, [r3, #24]
 800ebf2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	6a1b      	ldr	r3, [r3, #32]
 800ebf8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ebfa:	697b      	ldr	r3, [r7, #20]
 800ebfc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ec00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	031b      	lsls	r3, r3, #12
 800ec06:	697a      	ldr	r2, [r7, #20]
 800ec08:	4313      	orrs	r3, r2
 800ec0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ec0c:	693b      	ldr	r3, [r7, #16]
 800ec0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ec12:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ec14:	68bb      	ldr	r3, [r7, #8]
 800ec16:	011b      	lsls	r3, r3, #4
 800ec18:	693a      	ldr	r2, [r7, #16]
 800ec1a:	4313      	orrs	r3, r2
 800ec1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	697a      	ldr	r2, [r7, #20]
 800ec22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	693a      	ldr	r2, [r7, #16]
 800ec28:	621a      	str	r2, [r3, #32]
}
 800ec2a:	bf00      	nop
 800ec2c:	371c      	adds	r7, #28
 800ec2e:	46bd      	mov	sp, r7
 800ec30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec34:	4770      	bx	lr
	...

0800ec38 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ec38:	b480      	push	{r7}
 800ec3a:	b085      	sub	sp, #20
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	6078      	str	r0, [r7, #4]
 800ec40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	689b      	ldr	r3, [r3, #8]
 800ec46:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ec48:	68fa      	ldr	r2, [r7, #12]
 800ec4a:	4b09      	ldr	r3, [pc, #36]	; (800ec70 <TIM_ITRx_SetConfig+0x38>)
 800ec4c:	4013      	ands	r3, r2
 800ec4e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ec50:	683a      	ldr	r2, [r7, #0]
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	4313      	orrs	r3, r2
 800ec56:	f043 0307 	orr.w	r3, r3, #7
 800ec5a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	68fa      	ldr	r2, [r7, #12]
 800ec60:	609a      	str	r2, [r3, #8]
}
 800ec62:	bf00      	nop
 800ec64:	3714      	adds	r7, #20
 800ec66:	46bd      	mov	sp, r7
 800ec68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec6c:	4770      	bx	lr
 800ec6e:	bf00      	nop
 800ec70:	ffcfff8f 	.word	0xffcfff8f

0800ec74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ec74:	b480      	push	{r7}
 800ec76:	b087      	sub	sp, #28
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	60f8      	str	r0, [r7, #12]
 800ec7c:	60b9      	str	r1, [r7, #8]
 800ec7e:	607a      	str	r2, [r7, #4]
 800ec80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	689b      	ldr	r3, [r3, #8]
 800ec86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ec88:	697b      	ldr	r3, [r7, #20]
 800ec8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ec8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ec90:	683b      	ldr	r3, [r7, #0]
 800ec92:	021a      	lsls	r2, r3, #8
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	431a      	orrs	r2, r3
 800ec98:	68bb      	ldr	r3, [r7, #8]
 800ec9a:	4313      	orrs	r3, r2
 800ec9c:	697a      	ldr	r2, [r7, #20]
 800ec9e:	4313      	orrs	r3, r2
 800eca0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	697a      	ldr	r2, [r7, #20]
 800eca6:	609a      	str	r2, [r3, #8]
}
 800eca8:	bf00      	nop
 800ecaa:	371c      	adds	r7, #28
 800ecac:	46bd      	mov	sp, r7
 800ecae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb2:	4770      	bx	lr

0800ecb4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ecb4:	b480      	push	{r7}
 800ecb6:	b087      	sub	sp, #28
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	60f8      	str	r0, [r7, #12]
 800ecbc:	60b9      	str	r1, [r7, #8]
 800ecbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ecc0:	68bb      	ldr	r3, [r7, #8]
 800ecc2:	f003 031f 	and.w	r3, r3, #31
 800ecc6:	2201      	movs	r2, #1
 800ecc8:	fa02 f303 	lsl.w	r3, r2, r3
 800eccc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	6a1a      	ldr	r2, [r3, #32]
 800ecd2:	697b      	ldr	r3, [r7, #20]
 800ecd4:	43db      	mvns	r3, r3
 800ecd6:	401a      	ands	r2, r3
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	6a1a      	ldr	r2, [r3, #32]
 800ece0:	68bb      	ldr	r3, [r7, #8]
 800ece2:	f003 031f 	and.w	r3, r3, #31
 800ece6:	6879      	ldr	r1, [r7, #4]
 800ece8:	fa01 f303 	lsl.w	r3, r1, r3
 800ecec:	431a      	orrs	r2, r3
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	621a      	str	r2, [r3, #32]
}
 800ecf2:	bf00      	nop
 800ecf4:	371c      	adds	r7, #28
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfc:	4770      	bx	lr
	...

0800ed00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ed00:	b480      	push	{r7}
 800ed02:	b085      	sub	sp, #20
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	6078      	str	r0, [r7, #4]
 800ed08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ed10:	2b01      	cmp	r3, #1
 800ed12:	d101      	bne.n	800ed18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ed14:	2302      	movs	r3, #2
 800ed16:	e06d      	b.n	800edf4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	2201      	movs	r2, #1
 800ed1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	2202      	movs	r2, #2
 800ed24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	685b      	ldr	r3, [r3, #4]
 800ed2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	689b      	ldr	r3, [r3, #8]
 800ed36:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	4a30      	ldr	r2, [pc, #192]	; (800ee00 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ed3e:	4293      	cmp	r3, r2
 800ed40:	d004      	beq.n	800ed4c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	4a2f      	ldr	r2, [pc, #188]	; (800ee04 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ed48:	4293      	cmp	r3, r2
 800ed4a:	d108      	bne.n	800ed5e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ed52:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ed54:	683b      	ldr	r3, [r7, #0]
 800ed56:	685b      	ldr	r3, [r3, #4]
 800ed58:	68fa      	ldr	r2, [r7, #12]
 800ed5a:	4313      	orrs	r3, r2
 800ed5c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ed64:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ed66:	683b      	ldr	r3, [r7, #0]
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	68fa      	ldr	r2, [r7, #12]
 800ed6c:	4313      	orrs	r3, r2
 800ed6e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	68fa      	ldr	r2, [r7, #12]
 800ed76:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	4a20      	ldr	r2, [pc, #128]	; (800ee00 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ed7e:	4293      	cmp	r3, r2
 800ed80:	d022      	beq.n	800edc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ed8a:	d01d      	beq.n	800edc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	4a1d      	ldr	r2, [pc, #116]	; (800ee08 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ed92:	4293      	cmp	r3, r2
 800ed94:	d018      	beq.n	800edc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	4a1c      	ldr	r2, [pc, #112]	; (800ee0c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ed9c:	4293      	cmp	r3, r2
 800ed9e:	d013      	beq.n	800edc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	4a1a      	ldr	r2, [pc, #104]	; (800ee10 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800eda6:	4293      	cmp	r3, r2
 800eda8:	d00e      	beq.n	800edc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	4a15      	ldr	r2, [pc, #84]	; (800ee04 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800edb0:	4293      	cmp	r3, r2
 800edb2:	d009      	beq.n	800edc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	4a16      	ldr	r2, [pc, #88]	; (800ee14 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800edba:	4293      	cmp	r3, r2
 800edbc:	d004      	beq.n	800edc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	4a15      	ldr	r2, [pc, #84]	; (800ee18 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800edc4:	4293      	cmp	r3, r2
 800edc6:	d10c      	bne.n	800ede2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800edc8:	68bb      	ldr	r3, [r7, #8]
 800edca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800edce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800edd0:	683b      	ldr	r3, [r7, #0]
 800edd2:	689b      	ldr	r3, [r3, #8]
 800edd4:	68ba      	ldr	r2, [r7, #8]
 800edd6:	4313      	orrs	r3, r2
 800edd8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	68ba      	ldr	r2, [r7, #8]
 800ede0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	2201      	movs	r2, #1
 800ede6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	2200      	movs	r2, #0
 800edee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800edf2:	2300      	movs	r3, #0
}
 800edf4:	4618      	mov	r0, r3
 800edf6:	3714      	adds	r7, #20
 800edf8:	46bd      	mov	sp, r7
 800edfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edfe:	4770      	bx	lr
 800ee00:	40010000 	.word	0x40010000
 800ee04:	40010400 	.word	0x40010400
 800ee08:	40000400 	.word	0x40000400
 800ee0c:	40000800 	.word	0x40000800
 800ee10:	40000c00 	.word	0x40000c00
 800ee14:	40001800 	.word	0x40001800
 800ee18:	40014000 	.word	0x40014000

0800ee1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ee1c:	b480      	push	{r7}
 800ee1e:	b083      	sub	sp, #12
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ee24:	bf00      	nop
 800ee26:	370c      	adds	r7, #12
 800ee28:	46bd      	mov	sp, r7
 800ee2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee2e:	4770      	bx	lr

0800ee30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ee30:	b480      	push	{r7}
 800ee32:	b083      	sub	sp, #12
 800ee34:	af00      	add	r7, sp, #0
 800ee36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ee38:	bf00      	nop
 800ee3a:	370c      	adds	r7, #12
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee42:	4770      	bx	lr

0800ee44 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ee44:	b480      	push	{r7}
 800ee46:	b083      	sub	sp, #12
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ee4c:	bf00      	nop
 800ee4e:	370c      	adds	r7, #12
 800ee50:	46bd      	mov	sp, r7
 800ee52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee56:	4770      	bx	lr

0800ee58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ee58:	b580      	push	{r7, lr}
 800ee5a:	b082      	sub	sp, #8
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d101      	bne.n	800ee6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ee66:	2301      	movs	r3, #1
 800ee68:	e042      	b.n	800eef0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d106      	bne.n	800ee82 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	2200      	movs	r2, #0
 800ee78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ee7c:	6878      	ldr	r0, [r7, #4]
 800ee7e:	f7f6 ff41 	bl	8005d04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	2224      	movs	r2, #36	; 0x24
 800ee86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	681a      	ldr	r2, [r3, #0]
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	f022 0201 	bic.w	r2, r2, #1
 800ee98:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ee9a:	6878      	ldr	r0, [r7, #4]
 800ee9c:	f000 fcea 	bl	800f874 <UART_SetConfig>
 800eea0:	4603      	mov	r3, r0
 800eea2:	2b01      	cmp	r3, #1
 800eea4:	d101      	bne.n	800eeaa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800eea6:	2301      	movs	r3, #1
 800eea8:	e022      	b.n	800eef0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d002      	beq.n	800eeb8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800eeb2:	6878      	ldr	r0, [r7, #4]
 800eeb4:	f001 fa46 	bl	8010344 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	685a      	ldr	r2, [r3, #4]
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800eec6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	689a      	ldr	r2, [r3, #8]
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800eed6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	681a      	ldr	r2, [r3, #0]
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	f042 0201 	orr.w	r2, r2, #1
 800eee6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800eee8:	6878      	ldr	r0, [r7, #4]
 800eeea:	f001 facd 	bl	8010488 <UART_CheckIdleState>
 800eeee:	4603      	mov	r3, r0
}
 800eef0:	4618      	mov	r0, r3
 800eef2:	3708      	adds	r7, #8
 800eef4:	46bd      	mov	sp, r7
 800eef6:	bd80      	pop	{r7, pc}

0800eef8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800eef8:	b580      	push	{r7, lr}
 800eefa:	b08a      	sub	sp, #40	; 0x28
 800eefc:	af02      	add	r7, sp, #8
 800eefe:	60f8      	str	r0, [r7, #12]
 800ef00:	60b9      	str	r1, [r7, #8]
 800ef02:	603b      	str	r3, [r7, #0]
 800ef04:	4613      	mov	r3, r2
 800ef06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ef0e:	2b20      	cmp	r3, #32
 800ef10:	f040 8083 	bne.w	800f01a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800ef14:	68bb      	ldr	r3, [r7, #8]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d002      	beq.n	800ef20 <HAL_UART_Transmit+0x28>
 800ef1a:	88fb      	ldrh	r3, [r7, #6]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d101      	bne.n	800ef24 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800ef20:	2301      	movs	r3, #1
 800ef22:	e07b      	b.n	800f01c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ef2a:	2b01      	cmp	r3, #1
 800ef2c:	d101      	bne.n	800ef32 <HAL_UART_Transmit+0x3a>
 800ef2e:	2302      	movs	r3, #2
 800ef30:	e074      	b.n	800f01c <HAL_UART_Transmit+0x124>
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	2201      	movs	r2, #1
 800ef36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	2200      	movs	r2, #0
 800ef3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	2221      	movs	r2, #33	; 0x21
 800ef46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ef4a:	f7f8 f96b 	bl	8007224 <HAL_GetTick>
 800ef4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	88fa      	ldrh	r2, [r7, #6]
 800ef54:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	88fa      	ldrh	r2, [r7, #6]
 800ef5c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	689b      	ldr	r3, [r3, #8]
 800ef64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ef68:	d108      	bne.n	800ef7c <HAL_UART_Transmit+0x84>
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	691b      	ldr	r3, [r3, #16]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d104      	bne.n	800ef7c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800ef72:	2300      	movs	r3, #0
 800ef74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ef76:	68bb      	ldr	r3, [r7, #8]
 800ef78:	61bb      	str	r3, [r7, #24]
 800ef7a:	e003      	b.n	800ef84 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800ef7c:	68bb      	ldr	r3, [r7, #8]
 800ef7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ef80:	2300      	movs	r3, #0
 800ef82:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	2200      	movs	r2, #0
 800ef88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800ef8c:	e02c      	b.n	800efe8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ef8e:	683b      	ldr	r3, [r7, #0]
 800ef90:	9300      	str	r3, [sp, #0]
 800ef92:	697b      	ldr	r3, [r7, #20]
 800ef94:	2200      	movs	r2, #0
 800ef96:	2180      	movs	r1, #128	; 0x80
 800ef98:	68f8      	ldr	r0, [r7, #12]
 800ef9a:	f001 fac0 	bl	801051e <UART_WaitOnFlagUntilTimeout>
 800ef9e:	4603      	mov	r3, r0
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d001      	beq.n	800efa8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800efa4:	2303      	movs	r3, #3
 800efa6:	e039      	b.n	800f01c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800efa8:	69fb      	ldr	r3, [r7, #28]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d10b      	bne.n	800efc6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800efae:	69bb      	ldr	r3, [r7, #24]
 800efb0:	881b      	ldrh	r3, [r3, #0]
 800efb2:	461a      	mov	r2, r3
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800efbc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800efbe:	69bb      	ldr	r3, [r7, #24]
 800efc0:	3302      	adds	r3, #2
 800efc2:	61bb      	str	r3, [r7, #24]
 800efc4:	e007      	b.n	800efd6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800efc6:	69fb      	ldr	r3, [r7, #28]
 800efc8:	781a      	ldrb	r2, [r3, #0]
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800efd0:	69fb      	ldr	r3, [r7, #28]
 800efd2:	3301      	adds	r3, #1
 800efd4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800efdc:	b29b      	uxth	r3, r3
 800efde:	3b01      	subs	r3, #1
 800efe0:	b29a      	uxth	r2, r3
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800efee:	b29b      	uxth	r3, r3
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d1cc      	bne.n	800ef8e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800eff4:	683b      	ldr	r3, [r7, #0]
 800eff6:	9300      	str	r3, [sp, #0]
 800eff8:	697b      	ldr	r3, [r7, #20]
 800effa:	2200      	movs	r2, #0
 800effc:	2140      	movs	r1, #64	; 0x40
 800effe:	68f8      	ldr	r0, [r7, #12]
 800f000:	f001 fa8d 	bl	801051e <UART_WaitOnFlagUntilTimeout>
 800f004:	4603      	mov	r3, r0
 800f006:	2b00      	cmp	r3, #0
 800f008:	d001      	beq.n	800f00e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800f00a:	2303      	movs	r3, #3
 800f00c:	e006      	b.n	800f01c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	2220      	movs	r2, #32
 800f012:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800f016:	2300      	movs	r3, #0
 800f018:	e000      	b.n	800f01c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800f01a:	2302      	movs	r3, #2
  }
}
 800f01c:	4618      	mov	r0, r3
 800f01e:	3720      	adds	r7, #32
 800f020:	46bd      	mov	sp, r7
 800f022:	bd80      	pop	{r7, pc}

0800f024 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f024:	b580      	push	{r7, lr}
 800f026:	b08a      	sub	sp, #40	; 0x28
 800f028:	af00      	add	r7, sp, #0
 800f02a:	60f8      	str	r0, [r7, #12]
 800f02c:	60b9      	str	r1, [r7, #8]
 800f02e:	4613      	mov	r3, r2
 800f030:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f038:	2b20      	cmp	r3, #32
 800f03a:	d142      	bne.n	800f0c2 <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800f03c:	68bb      	ldr	r3, [r7, #8]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d002      	beq.n	800f048 <HAL_UART_Receive_DMA+0x24>
 800f042:	88fb      	ldrh	r3, [r7, #6]
 800f044:	2b00      	cmp	r3, #0
 800f046:	d101      	bne.n	800f04c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800f048:	2301      	movs	r3, #1
 800f04a:	e03b      	b.n	800f0c4 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f052:	2b01      	cmp	r3, #1
 800f054:	d101      	bne.n	800f05a <HAL_UART_Receive_DMA+0x36>
 800f056:	2302      	movs	r3, #2
 800f058:	e034      	b.n	800f0c4 <HAL_UART_Receive_DMA+0xa0>
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	2201      	movs	r2, #1
 800f05e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	2200      	movs	r2, #0
 800f066:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	4a17      	ldr	r2, [pc, #92]	; (800f0cc <HAL_UART_Receive_DMA+0xa8>)
 800f06e:	4293      	cmp	r3, r2
 800f070:	d01f      	beq.n	800f0b2 <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	685b      	ldr	r3, [r3, #4]
 800f078:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d018      	beq.n	800f0b2 <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f086:	697b      	ldr	r3, [r7, #20]
 800f088:	e853 3f00 	ldrex	r3, [r3]
 800f08c:	613b      	str	r3, [r7, #16]
   return(result);
 800f08e:	693b      	ldr	r3, [r7, #16]
 800f090:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f094:	627b      	str	r3, [r7, #36]	; 0x24
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	461a      	mov	r2, r3
 800f09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f09e:	623b      	str	r3, [r7, #32]
 800f0a0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0a2:	69f9      	ldr	r1, [r7, #28]
 800f0a4:	6a3a      	ldr	r2, [r7, #32]
 800f0a6:	e841 2300 	strex	r3, r2, [r1]
 800f0aa:	61bb      	str	r3, [r7, #24]
   return(result);
 800f0ac:	69bb      	ldr	r3, [r7, #24]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d1e6      	bne.n	800f080 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800f0b2:	88fb      	ldrh	r3, [r7, #6]
 800f0b4:	461a      	mov	r2, r3
 800f0b6:	68b9      	ldr	r1, [r7, #8]
 800f0b8:	68f8      	ldr	r0, [r7, #12]
 800f0ba:	f001 faf9 	bl	80106b0 <UART_Start_Receive_DMA>
 800f0be:	4603      	mov	r3, r0
 800f0c0:	e000      	b.n	800f0c4 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800f0c2:	2302      	movs	r3, #2
  }
}
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	3728      	adds	r7, #40	; 0x28
 800f0c8:	46bd      	mov	sp, r7
 800f0ca:	bd80      	pop	{r7, pc}
 800f0cc:	58000c00 	.word	0x58000c00

0800f0d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f0d0:	b580      	push	{r7, lr}
 800f0d2:	b0ba      	sub	sp, #232	; 0xe8
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	69db      	ldr	r3, [r3, #28]
 800f0de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	689b      	ldr	r3, [r3, #8]
 800f0f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f0f6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800f0fa:	f640 030f 	movw	r3, #2063	; 0x80f
 800f0fe:	4013      	ands	r3, r2
 800f100:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800f104:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d11b      	bne.n	800f144 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f10c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f110:	f003 0320 	and.w	r3, r3, #32
 800f114:	2b00      	cmp	r3, #0
 800f116:	d015      	beq.n	800f144 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f118:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f11c:	f003 0320 	and.w	r3, r3, #32
 800f120:	2b00      	cmp	r3, #0
 800f122:	d105      	bne.n	800f130 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f124:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f128:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d009      	beq.n	800f144 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f134:	2b00      	cmp	r3, #0
 800f136:	f000 835a 	beq.w	800f7ee <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f13e:	6878      	ldr	r0, [r7, #4]
 800f140:	4798      	blx	r3
      }
      return;
 800f142:	e354      	b.n	800f7ee <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800f144:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f148:	2b00      	cmp	r3, #0
 800f14a:	f000 811f 	beq.w	800f38c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800f14e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800f152:	4b8b      	ldr	r3, [pc, #556]	; (800f380 <HAL_UART_IRQHandler+0x2b0>)
 800f154:	4013      	ands	r3, r2
 800f156:	2b00      	cmp	r3, #0
 800f158:	d106      	bne.n	800f168 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800f15a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800f15e:	4b89      	ldr	r3, [pc, #548]	; (800f384 <HAL_UART_IRQHandler+0x2b4>)
 800f160:	4013      	ands	r3, r2
 800f162:	2b00      	cmp	r3, #0
 800f164:	f000 8112 	beq.w	800f38c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f168:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f16c:	f003 0301 	and.w	r3, r3, #1
 800f170:	2b00      	cmp	r3, #0
 800f172:	d011      	beq.n	800f198 <HAL_UART_IRQHandler+0xc8>
 800f174:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d00b      	beq.n	800f198 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	2201      	movs	r2, #1
 800f186:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f18e:	f043 0201 	orr.w	r2, r3, #1
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f198:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f19c:	f003 0302 	and.w	r3, r3, #2
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d011      	beq.n	800f1c8 <HAL_UART_IRQHandler+0xf8>
 800f1a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f1a8:	f003 0301 	and.w	r3, r3, #1
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d00b      	beq.n	800f1c8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	2202      	movs	r2, #2
 800f1b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f1be:	f043 0204 	orr.w	r2, r3, #4
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f1c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f1cc:	f003 0304 	and.w	r3, r3, #4
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d011      	beq.n	800f1f8 <HAL_UART_IRQHandler+0x128>
 800f1d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f1d8:	f003 0301 	and.w	r3, r3, #1
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d00b      	beq.n	800f1f8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	2204      	movs	r2, #4
 800f1e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f1ee:	f043 0202 	orr.w	r2, r3, #2
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f1f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f1fc:	f003 0308 	and.w	r3, r3, #8
 800f200:	2b00      	cmp	r3, #0
 800f202:	d017      	beq.n	800f234 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f204:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f208:	f003 0320 	and.w	r3, r3, #32
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d105      	bne.n	800f21c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800f210:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800f214:	4b5a      	ldr	r3, [pc, #360]	; (800f380 <HAL_UART_IRQHandler+0x2b0>)
 800f216:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d00b      	beq.n	800f234 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	2208      	movs	r2, #8
 800f222:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f22a:	f043 0208 	orr.w	r2, r3, #8
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f238:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d012      	beq.n	800f266 <HAL_UART_IRQHandler+0x196>
 800f240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f244:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d00c      	beq.n	800f266 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f254:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f25c:	f043 0220 	orr.w	r2, r3, #32
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	f000 82c0 	beq.w	800f7f2 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f276:	f003 0320 	and.w	r3, r3, #32
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d013      	beq.n	800f2a6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f27e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f282:	f003 0320 	and.w	r3, r3, #32
 800f286:	2b00      	cmp	r3, #0
 800f288:	d105      	bne.n	800f296 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f28a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f28e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f292:	2b00      	cmp	r3, #0
 800f294:	d007      	beq.n	800f2a6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d003      	beq.n	800f2a6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f2a2:	6878      	ldr	r0, [r7, #4]
 800f2a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f2ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	689b      	ldr	r3, [r3, #8]
 800f2b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2ba:	2b40      	cmp	r3, #64	; 0x40
 800f2bc:	d005      	beq.n	800f2ca <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f2be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f2c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d04f      	beq.n	800f36a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f2ca:	6878      	ldr	r0, [r7, #4]
 800f2cc:	f001 fada 	bl	8010884 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	689b      	ldr	r3, [r3, #8]
 800f2d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2da:	2b40      	cmp	r3, #64	; 0x40
 800f2dc:	d141      	bne.n	800f362 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	3308      	adds	r3, #8
 800f2e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f2ec:	e853 3f00 	ldrex	r3, [r3]
 800f2f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800f2f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f2f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f2fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	3308      	adds	r3, #8
 800f306:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800f30a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800f30e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f312:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800f316:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800f31a:	e841 2300 	strex	r3, r2, [r1]
 800f31e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800f322:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f326:	2b00      	cmp	r3, #0
 800f328:	d1d9      	bne.n	800f2de <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d013      	beq.n	800f35a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f336:	4a14      	ldr	r2, [pc, #80]	; (800f388 <HAL_UART_IRQHandler+0x2b8>)
 800f338:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f33e:	4618      	mov	r0, r3
 800f340:	f7f9 f9a0 	bl	8008684 <HAL_DMA_Abort_IT>
 800f344:	4603      	mov	r3, r0
 800f346:	2b00      	cmp	r3, #0
 800f348:	d017      	beq.n	800f37a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f34e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f350:	687a      	ldr	r2, [r7, #4]
 800f352:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800f354:	4610      	mov	r0, r2
 800f356:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f358:	e00f      	b.n	800f37a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f35a:	6878      	ldr	r0, [r7, #4]
 800f35c:	f000 fa74 	bl	800f848 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f360:	e00b      	b.n	800f37a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f362:	6878      	ldr	r0, [r7, #4]
 800f364:	f000 fa70 	bl	800f848 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f368:	e007      	b.n	800f37a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f36a:	6878      	ldr	r0, [r7, #4]
 800f36c:	f000 fa6c 	bl	800f848 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	2200      	movs	r2, #0
 800f374:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800f378:	e23b      	b.n	800f7f2 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f37a:	bf00      	nop
    return;
 800f37c:	e239      	b.n	800f7f2 <HAL_UART_IRQHandler+0x722>
 800f37e:	bf00      	nop
 800f380:	10000001 	.word	0x10000001
 800f384:	04000120 	.word	0x04000120
 800f388:	08010b2b 	.word	0x08010b2b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f390:	2b01      	cmp	r3, #1
 800f392:	f040 81ce 	bne.w	800f732 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800f396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f39a:	f003 0310 	and.w	r3, r3, #16
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	f000 81c7 	beq.w	800f732 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800f3a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f3a8:	f003 0310 	and.w	r3, r3, #16
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	f000 81c0 	beq.w	800f732 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	2210      	movs	r2, #16
 800f3b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	689b      	ldr	r3, [r3, #8]
 800f3c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f3c4:	2b40      	cmp	r3, #64	; 0x40
 800f3c6:	f040 813b 	bne.w	800f640 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	4a8b      	ldr	r2, [pc, #556]	; (800f600 <HAL_UART_IRQHandler+0x530>)
 800f3d2:	4293      	cmp	r3, r2
 800f3d4:	d059      	beq.n	800f48a <HAL_UART_IRQHandler+0x3ba>
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	4a89      	ldr	r2, [pc, #548]	; (800f604 <HAL_UART_IRQHandler+0x534>)
 800f3de:	4293      	cmp	r3, r2
 800f3e0:	d053      	beq.n	800f48a <HAL_UART_IRQHandler+0x3ba>
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	4a87      	ldr	r2, [pc, #540]	; (800f608 <HAL_UART_IRQHandler+0x538>)
 800f3ea:	4293      	cmp	r3, r2
 800f3ec:	d04d      	beq.n	800f48a <HAL_UART_IRQHandler+0x3ba>
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	4a85      	ldr	r2, [pc, #532]	; (800f60c <HAL_UART_IRQHandler+0x53c>)
 800f3f6:	4293      	cmp	r3, r2
 800f3f8:	d047      	beq.n	800f48a <HAL_UART_IRQHandler+0x3ba>
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	4a83      	ldr	r2, [pc, #524]	; (800f610 <HAL_UART_IRQHandler+0x540>)
 800f402:	4293      	cmp	r3, r2
 800f404:	d041      	beq.n	800f48a <HAL_UART_IRQHandler+0x3ba>
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	4a81      	ldr	r2, [pc, #516]	; (800f614 <HAL_UART_IRQHandler+0x544>)
 800f40e:	4293      	cmp	r3, r2
 800f410:	d03b      	beq.n	800f48a <HAL_UART_IRQHandler+0x3ba>
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	4a7f      	ldr	r2, [pc, #508]	; (800f618 <HAL_UART_IRQHandler+0x548>)
 800f41a:	4293      	cmp	r3, r2
 800f41c:	d035      	beq.n	800f48a <HAL_UART_IRQHandler+0x3ba>
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	4a7d      	ldr	r2, [pc, #500]	; (800f61c <HAL_UART_IRQHandler+0x54c>)
 800f426:	4293      	cmp	r3, r2
 800f428:	d02f      	beq.n	800f48a <HAL_UART_IRQHandler+0x3ba>
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	4a7b      	ldr	r2, [pc, #492]	; (800f620 <HAL_UART_IRQHandler+0x550>)
 800f432:	4293      	cmp	r3, r2
 800f434:	d029      	beq.n	800f48a <HAL_UART_IRQHandler+0x3ba>
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	4a79      	ldr	r2, [pc, #484]	; (800f624 <HAL_UART_IRQHandler+0x554>)
 800f43e:	4293      	cmp	r3, r2
 800f440:	d023      	beq.n	800f48a <HAL_UART_IRQHandler+0x3ba>
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	4a77      	ldr	r2, [pc, #476]	; (800f628 <HAL_UART_IRQHandler+0x558>)
 800f44a:	4293      	cmp	r3, r2
 800f44c:	d01d      	beq.n	800f48a <HAL_UART_IRQHandler+0x3ba>
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	4a75      	ldr	r2, [pc, #468]	; (800f62c <HAL_UART_IRQHandler+0x55c>)
 800f456:	4293      	cmp	r3, r2
 800f458:	d017      	beq.n	800f48a <HAL_UART_IRQHandler+0x3ba>
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	4a73      	ldr	r2, [pc, #460]	; (800f630 <HAL_UART_IRQHandler+0x560>)
 800f462:	4293      	cmp	r3, r2
 800f464:	d011      	beq.n	800f48a <HAL_UART_IRQHandler+0x3ba>
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	4a71      	ldr	r2, [pc, #452]	; (800f634 <HAL_UART_IRQHandler+0x564>)
 800f46e:	4293      	cmp	r3, r2
 800f470:	d00b      	beq.n	800f48a <HAL_UART_IRQHandler+0x3ba>
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	4a6f      	ldr	r2, [pc, #444]	; (800f638 <HAL_UART_IRQHandler+0x568>)
 800f47a:	4293      	cmp	r3, r2
 800f47c:	d005      	beq.n	800f48a <HAL_UART_IRQHandler+0x3ba>
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	4a6d      	ldr	r2, [pc, #436]	; (800f63c <HAL_UART_IRQHandler+0x56c>)
 800f486:	4293      	cmp	r3, r2
 800f488:	d105      	bne.n	800f496 <HAL_UART_IRQHandler+0x3c6>
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	685b      	ldr	r3, [r3, #4]
 800f492:	b29b      	uxth	r3, r3
 800f494:	e004      	b.n	800f4a0 <HAL_UART_IRQHandler+0x3d0>
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	685b      	ldr	r3, [r3, #4]
 800f49e:	b29b      	uxth	r3, r3
 800f4a0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f4a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	f000 81a4 	beq.w	800f7f6 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f4b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f4b8:	429a      	cmp	r2, r3
 800f4ba:	f080 819c 	bcs.w	800f7f6 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f4c4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f4cc:	69db      	ldr	r3, [r3, #28]
 800f4ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f4d2:	f000 8086 	beq.w	800f5e2 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f4e2:	e853 3f00 	ldrex	r3, [r3]
 800f4e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800f4ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f4ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f4f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	461a      	mov	r2, r3
 800f4fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f500:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f504:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f508:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800f50c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f510:	e841 2300 	strex	r3, r2, [r1]
 800f514:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800f518:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d1da      	bne.n	800f4d6 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	3308      	adds	r3, #8
 800f526:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f528:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f52a:	e853 3f00 	ldrex	r3, [r3]
 800f52e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800f530:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f532:	f023 0301 	bic.w	r3, r3, #1
 800f536:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	3308      	adds	r3, #8
 800f540:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800f544:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800f548:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f54a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800f54c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f550:	e841 2300 	strex	r3, r2, [r1]
 800f554:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800f556:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d1e1      	bne.n	800f520 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	3308      	adds	r3, #8
 800f562:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f564:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f566:	e853 3f00 	ldrex	r3, [r3]
 800f56a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f56c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f56e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f572:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	3308      	adds	r3, #8
 800f57c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800f580:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f582:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f584:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f586:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f588:	e841 2300 	strex	r3, r2, [r1]
 800f58c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f58e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f590:	2b00      	cmp	r3, #0
 800f592:	d1e3      	bne.n	800f55c <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	2220      	movs	r2, #32
 800f598:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	2200      	movs	r2, #0
 800f5a0:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f5aa:	e853 3f00 	ldrex	r3, [r3]
 800f5ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f5b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f5b2:	f023 0310 	bic.w	r3, r3, #16
 800f5b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	461a      	mov	r2, r3
 800f5c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f5c4:	65bb      	str	r3, [r7, #88]	; 0x58
 800f5c6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f5ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f5cc:	e841 2300 	strex	r3, r2, [r1]
 800f5d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f5d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d1e4      	bne.n	800f5a2 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f5dc:	4618      	mov	r0, r3
 800f5de:	f7f8 fd33 	bl	8008048 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f5ee:	b29b      	uxth	r3, r3
 800f5f0:	1ad3      	subs	r3, r2, r3
 800f5f2:	b29b      	uxth	r3, r3
 800f5f4:	4619      	mov	r1, r3
 800f5f6:	6878      	ldr	r0, [r7, #4]
 800f5f8:	f000 f930 	bl	800f85c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f5fc:	e0fb      	b.n	800f7f6 <HAL_UART_IRQHandler+0x726>
 800f5fe:	bf00      	nop
 800f600:	40020010 	.word	0x40020010
 800f604:	40020028 	.word	0x40020028
 800f608:	40020040 	.word	0x40020040
 800f60c:	40020058 	.word	0x40020058
 800f610:	40020070 	.word	0x40020070
 800f614:	40020088 	.word	0x40020088
 800f618:	400200a0 	.word	0x400200a0
 800f61c:	400200b8 	.word	0x400200b8
 800f620:	40020410 	.word	0x40020410
 800f624:	40020428 	.word	0x40020428
 800f628:	40020440 	.word	0x40020440
 800f62c:	40020458 	.word	0x40020458
 800f630:	40020470 	.word	0x40020470
 800f634:	40020488 	.word	0x40020488
 800f638:	400204a0 	.word	0x400204a0
 800f63c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f64c:	b29b      	uxth	r3, r3
 800f64e:	1ad3      	subs	r3, r2, r3
 800f650:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f65a:	b29b      	uxth	r3, r3
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	f000 80cc 	beq.w	800f7fa <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800f662:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f666:	2b00      	cmp	r3, #0
 800f668:	f000 80c7 	beq.w	800f7fa <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f674:	e853 3f00 	ldrex	r3, [r3]
 800f678:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f67a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f67c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f680:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	461a      	mov	r2, r3
 800f68a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f68e:	647b      	str	r3, [r7, #68]	; 0x44
 800f690:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f692:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f694:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f696:	e841 2300 	strex	r3, r2, [r1]
 800f69a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f69c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d1e4      	bne.n	800f66c <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	3308      	adds	r3, #8
 800f6a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6ac:	e853 3f00 	ldrex	r3, [r3]
 800f6b0:	623b      	str	r3, [r7, #32]
   return(result);
 800f6b2:	6a3a      	ldr	r2, [r7, #32]
 800f6b4:	4b54      	ldr	r3, [pc, #336]	; (800f808 <HAL_UART_IRQHandler+0x738>)
 800f6b6:	4013      	ands	r3, r2
 800f6b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	3308      	adds	r3, #8
 800f6c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800f6c6:	633a      	str	r2, [r7, #48]	; 0x30
 800f6c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f6cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f6ce:	e841 2300 	strex	r3, r2, [r1]
 800f6d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d1e3      	bne.n	800f6a2 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	2220      	movs	r2, #32
 800f6de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	2200      	movs	r2, #0
 800f6e6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	2200      	movs	r2, #0
 800f6ec:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6f4:	693b      	ldr	r3, [r7, #16]
 800f6f6:	e853 3f00 	ldrex	r3, [r3]
 800f6fa:	60fb      	str	r3, [r7, #12]
   return(result);
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	f023 0310 	bic.w	r3, r3, #16
 800f702:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	461a      	mov	r2, r3
 800f70c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f710:	61fb      	str	r3, [r7, #28]
 800f712:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f714:	69b9      	ldr	r1, [r7, #24]
 800f716:	69fa      	ldr	r2, [r7, #28]
 800f718:	e841 2300 	strex	r3, r2, [r1]
 800f71c:	617b      	str	r3, [r7, #20]
   return(result);
 800f71e:	697b      	ldr	r3, [r7, #20]
 800f720:	2b00      	cmp	r3, #0
 800f722:	d1e4      	bne.n	800f6ee <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f724:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f728:	4619      	mov	r1, r3
 800f72a:	6878      	ldr	r0, [r7, #4]
 800f72c:	f000 f896 	bl	800f85c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f730:	e063      	b.n	800f7fa <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f736:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d00e      	beq.n	800f75c <HAL_UART_IRQHandler+0x68c>
 800f73e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f746:	2b00      	cmp	r3, #0
 800f748:	d008      	beq.n	800f75c <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800f752:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f754:	6878      	ldr	r0, [r7, #4]
 800f756:	f001 fa29 	bl	8010bac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f75a:	e051      	b.n	800f800 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f75c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f764:	2b00      	cmp	r3, #0
 800f766:	d014      	beq.n	800f792 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f76c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f770:	2b00      	cmp	r3, #0
 800f772:	d105      	bne.n	800f780 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f774:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f778:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d008      	beq.n	800f792 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f784:	2b00      	cmp	r3, #0
 800f786:	d03a      	beq.n	800f7fe <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f78c:	6878      	ldr	r0, [r7, #4]
 800f78e:	4798      	blx	r3
    }
    return;
 800f790:	e035      	b.n	800f7fe <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d009      	beq.n	800f7b2 <HAL_UART_IRQHandler+0x6e2>
 800f79e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f7a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d003      	beq.n	800f7b2 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800f7aa:	6878      	ldr	r0, [r7, #4]
 800f7ac:	f001 f9d3 	bl	8010b56 <UART_EndTransmit_IT>
    return;
 800f7b0:	e026      	b.n	800f800 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800f7b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f7b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d009      	beq.n	800f7d2 <HAL_UART_IRQHandler+0x702>
 800f7be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f7c2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d003      	beq.n	800f7d2 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800f7ca:	6878      	ldr	r0, [r7, #4]
 800f7cc:	f001 fa02 	bl	8010bd4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f7d0:	e016      	b.n	800f800 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800f7d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f7d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d010      	beq.n	800f800 <HAL_UART_IRQHandler+0x730>
 800f7de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	da0c      	bge.n	800f800 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800f7e6:	6878      	ldr	r0, [r7, #4]
 800f7e8:	f001 f9ea 	bl	8010bc0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f7ec:	e008      	b.n	800f800 <HAL_UART_IRQHandler+0x730>
      return;
 800f7ee:	bf00      	nop
 800f7f0:	e006      	b.n	800f800 <HAL_UART_IRQHandler+0x730>
    return;
 800f7f2:	bf00      	nop
 800f7f4:	e004      	b.n	800f800 <HAL_UART_IRQHandler+0x730>
      return;
 800f7f6:	bf00      	nop
 800f7f8:	e002      	b.n	800f800 <HAL_UART_IRQHandler+0x730>
      return;
 800f7fa:	bf00      	nop
 800f7fc:	e000      	b.n	800f800 <HAL_UART_IRQHandler+0x730>
    return;
 800f7fe:	bf00      	nop
  }
}
 800f800:	37e8      	adds	r7, #232	; 0xe8
 800f802:	46bd      	mov	sp, r7
 800f804:	bd80      	pop	{r7, pc}
 800f806:	bf00      	nop
 800f808:	effffffe 	.word	0xeffffffe

0800f80c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f80c:	b480      	push	{r7}
 800f80e:	b083      	sub	sp, #12
 800f810:	af00      	add	r7, sp, #0
 800f812:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800f814:	bf00      	nop
 800f816:	370c      	adds	r7, #12
 800f818:	46bd      	mov	sp, r7
 800f81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f81e:	4770      	bx	lr

0800f820 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800f820:	b480      	push	{r7}
 800f822:	b083      	sub	sp, #12
 800f824:	af00      	add	r7, sp, #0
 800f826:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800f828:	bf00      	nop
 800f82a:	370c      	adds	r7, #12
 800f82c:	46bd      	mov	sp, r7
 800f82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f832:	4770      	bx	lr

0800f834 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f834:	b480      	push	{r7}
 800f836:	b083      	sub	sp, #12
 800f838:	af00      	add	r7, sp, #0
 800f83a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800f83c:	bf00      	nop
 800f83e:	370c      	adds	r7, #12
 800f840:	46bd      	mov	sp, r7
 800f842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f846:	4770      	bx	lr

0800f848 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f848:	b480      	push	{r7}
 800f84a:	b083      	sub	sp, #12
 800f84c:	af00      	add	r7, sp, #0
 800f84e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800f850:	bf00      	nop
 800f852:	370c      	adds	r7, #12
 800f854:	46bd      	mov	sp, r7
 800f856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f85a:	4770      	bx	lr

0800f85c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f85c:	b480      	push	{r7}
 800f85e:	b083      	sub	sp, #12
 800f860:	af00      	add	r7, sp, #0
 800f862:	6078      	str	r0, [r7, #4]
 800f864:	460b      	mov	r3, r1
 800f866:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f868:	bf00      	nop
 800f86a:	370c      	adds	r7, #12
 800f86c:	46bd      	mov	sp, r7
 800f86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f872:	4770      	bx	lr

0800f874 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f874:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f878:	b092      	sub	sp, #72	; 0x48
 800f87a:	af00      	add	r7, sp, #0
 800f87c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f87e:	2300      	movs	r3, #0
 800f880:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f884:	697b      	ldr	r3, [r7, #20]
 800f886:	689a      	ldr	r2, [r3, #8]
 800f888:	697b      	ldr	r3, [r7, #20]
 800f88a:	691b      	ldr	r3, [r3, #16]
 800f88c:	431a      	orrs	r2, r3
 800f88e:	697b      	ldr	r3, [r7, #20]
 800f890:	695b      	ldr	r3, [r3, #20]
 800f892:	431a      	orrs	r2, r3
 800f894:	697b      	ldr	r3, [r7, #20]
 800f896:	69db      	ldr	r3, [r3, #28]
 800f898:	4313      	orrs	r3, r2
 800f89a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f89c:	697b      	ldr	r3, [r7, #20]
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	681a      	ldr	r2, [r3, #0]
 800f8a2:	4bbe      	ldr	r3, [pc, #760]	; (800fb9c <UART_SetConfig+0x328>)
 800f8a4:	4013      	ands	r3, r2
 800f8a6:	697a      	ldr	r2, [r7, #20]
 800f8a8:	6812      	ldr	r2, [r2, #0]
 800f8aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f8ac:	430b      	orrs	r3, r1
 800f8ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f8b0:	697b      	ldr	r3, [r7, #20]
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	685b      	ldr	r3, [r3, #4]
 800f8b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f8ba:	697b      	ldr	r3, [r7, #20]
 800f8bc:	68da      	ldr	r2, [r3, #12]
 800f8be:	697b      	ldr	r3, [r7, #20]
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	430a      	orrs	r2, r1
 800f8c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f8c6:	697b      	ldr	r3, [r7, #20]
 800f8c8:	699b      	ldr	r3, [r3, #24]
 800f8ca:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f8cc:	697b      	ldr	r3, [r7, #20]
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	4ab3      	ldr	r2, [pc, #716]	; (800fba0 <UART_SetConfig+0x32c>)
 800f8d2:	4293      	cmp	r3, r2
 800f8d4:	d004      	beq.n	800f8e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f8d6:	697b      	ldr	r3, [r7, #20]
 800f8d8:	6a1b      	ldr	r3, [r3, #32]
 800f8da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f8dc:	4313      	orrs	r3, r2
 800f8de:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f8e0:	697b      	ldr	r3, [r7, #20]
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	689a      	ldr	r2, [r3, #8]
 800f8e6:	4baf      	ldr	r3, [pc, #700]	; (800fba4 <UART_SetConfig+0x330>)
 800f8e8:	4013      	ands	r3, r2
 800f8ea:	697a      	ldr	r2, [r7, #20]
 800f8ec:	6812      	ldr	r2, [r2, #0]
 800f8ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f8f0:	430b      	orrs	r3, r1
 800f8f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f8f4:	697b      	ldr	r3, [r7, #20]
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8fa:	f023 010f 	bic.w	r1, r3, #15
 800f8fe:	697b      	ldr	r3, [r7, #20]
 800f900:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f902:	697b      	ldr	r3, [r7, #20]
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	430a      	orrs	r2, r1
 800f908:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f90a:	697b      	ldr	r3, [r7, #20]
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	4aa6      	ldr	r2, [pc, #664]	; (800fba8 <UART_SetConfig+0x334>)
 800f910:	4293      	cmp	r3, r2
 800f912:	d177      	bne.n	800fa04 <UART_SetConfig+0x190>
 800f914:	4ba5      	ldr	r3, [pc, #660]	; (800fbac <UART_SetConfig+0x338>)
 800f916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f918:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f91c:	2b28      	cmp	r3, #40	; 0x28
 800f91e:	d86d      	bhi.n	800f9fc <UART_SetConfig+0x188>
 800f920:	a201      	add	r2, pc, #4	; (adr r2, 800f928 <UART_SetConfig+0xb4>)
 800f922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f926:	bf00      	nop
 800f928:	0800f9cd 	.word	0x0800f9cd
 800f92c:	0800f9fd 	.word	0x0800f9fd
 800f930:	0800f9fd 	.word	0x0800f9fd
 800f934:	0800f9fd 	.word	0x0800f9fd
 800f938:	0800f9fd 	.word	0x0800f9fd
 800f93c:	0800f9fd 	.word	0x0800f9fd
 800f940:	0800f9fd 	.word	0x0800f9fd
 800f944:	0800f9fd 	.word	0x0800f9fd
 800f948:	0800f9d5 	.word	0x0800f9d5
 800f94c:	0800f9fd 	.word	0x0800f9fd
 800f950:	0800f9fd 	.word	0x0800f9fd
 800f954:	0800f9fd 	.word	0x0800f9fd
 800f958:	0800f9fd 	.word	0x0800f9fd
 800f95c:	0800f9fd 	.word	0x0800f9fd
 800f960:	0800f9fd 	.word	0x0800f9fd
 800f964:	0800f9fd 	.word	0x0800f9fd
 800f968:	0800f9dd 	.word	0x0800f9dd
 800f96c:	0800f9fd 	.word	0x0800f9fd
 800f970:	0800f9fd 	.word	0x0800f9fd
 800f974:	0800f9fd 	.word	0x0800f9fd
 800f978:	0800f9fd 	.word	0x0800f9fd
 800f97c:	0800f9fd 	.word	0x0800f9fd
 800f980:	0800f9fd 	.word	0x0800f9fd
 800f984:	0800f9fd 	.word	0x0800f9fd
 800f988:	0800f9e5 	.word	0x0800f9e5
 800f98c:	0800f9fd 	.word	0x0800f9fd
 800f990:	0800f9fd 	.word	0x0800f9fd
 800f994:	0800f9fd 	.word	0x0800f9fd
 800f998:	0800f9fd 	.word	0x0800f9fd
 800f99c:	0800f9fd 	.word	0x0800f9fd
 800f9a0:	0800f9fd 	.word	0x0800f9fd
 800f9a4:	0800f9fd 	.word	0x0800f9fd
 800f9a8:	0800f9ed 	.word	0x0800f9ed
 800f9ac:	0800f9fd 	.word	0x0800f9fd
 800f9b0:	0800f9fd 	.word	0x0800f9fd
 800f9b4:	0800f9fd 	.word	0x0800f9fd
 800f9b8:	0800f9fd 	.word	0x0800f9fd
 800f9bc:	0800f9fd 	.word	0x0800f9fd
 800f9c0:	0800f9fd 	.word	0x0800f9fd
 800f9c4:	0800f9fd 	.word	0x0800f9fd
 800f9c8:	0800f9f5 	.word	0x0800f9f5
 800f9cc:	2301      	movs	r3, #1
 800f9ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9d2:	e222      	b.n	800fe1a <UART_SetConfig+0x5a6>
 800f9d4:	2304      	movs	r3, #4
 800f9d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9da:	e21e      	b.n	800fe1a <UART_SetConfig+0x5a6>
 800f9dc:	2308      	movs	r3, #8
 800f9de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9e2:	e21a      	b.n	800fe1a <UART_SetConfig+0x5a6>
 800f9e4:	2310      	movs	r3, #16
 800f9e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9ea:	e216      	b.n	800fe1a <UART_SetConfig+0x5a6>
 800f9ec:	2320      	movs	r3, #32
 800f9ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9f2:	e212      	b.n	800fe1a <UART_SetConfig+0x5a6>
 800f9f4:	2340      	movs	r3, #64	; 0x40
 800f9f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9fa:	e20e      	b.n	800fe1a <UART_SetConfig+0x5a6>
 800f9fc:	2380      	movs	r3, #128	; 0x80
 800f9fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa02:	e20a      	b.n	800fe1a <UART_SetConfig+0x5a6>
 800fa04:	697b      	ldr	r3, [r7, #20]
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	4a69      	ldr	r2, [pc, #420]	; (800fbb0 <UART_SetConfig+0x33c>)
 800fa0a:	4293      	cmp	r3, r2
 800fa0c:	d130      	bne.n	800fa70 <UART_SetConfig+0x1fc>
 800fa0e:	4b67      	ldr	r3, [pc, #412]	; (800fbac <UART_SetConfig+0x338>)
 800fa10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa12:	f003 0307 	and.w	r3, r3, #7
 800fa16:	2b05      	cmp	r3, #5
 800fa18:	d826      	bhi.n	800fa68 <UART_SetConfig+0x1f4>
 800fa1a:	a201      	add	r2, pc, #4	; (adr r2, 800fa20 <UART_SetConfig+0x1ac>)
 800fa1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa20:	0800fa39 	.word	0x0800fa39
 800fa24:	0800fa41 	.word	0x0800fa41
 800fa28:	0800fa49 	.word	0x0800fa49
 800fa2c:	0800fa51 	.word	0x0800fa51
 800fa30:	0800fa59 	.word	0x0800fa59
 800fa34:	0800fa61 	.word	0x0800fa61
 800fa38:	2300      	movs	r3, #0
 800fa3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa3e:	e1ec      	b.n	800fe1a <UART_SetConfig+0x5a6>
 800fa40:	2304      	movs	r3, #4
 800fa42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa46:	e1e8      	b.n	800fe1a <UART_SetConfig+0x5a6>
 800fa48:	2308      	movs	r3, #8
 800fa4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa4e:	e1e4      	b.n	800fe1a <UART_SetConfig+0x5a6>
 800fa50:	2310      	movs	r3, #16
 800fa52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa56:	e1e0      	b.n	800fe1a <UART_SetConfig+0x5a6>
 800fa58:	2320      	movs	r3, #32
 800fa5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa5e:	e1dc      	b.n	800fe1a <UART_SetConfig+0x5a6>
 800fa60:	2340      	movs	r3, #64	; 0x40
 800fa62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa66:	e1d8      	b.n	800fe1a <UART_SetConfig+0x5a6>
 800fa68:	2380      	movs	r3, #128	; 0x80
 800fa6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa6e:	e1d4      	b.n	800fe1a <UART_SetConfig+0x5a6>
 800fa70:	697b      	ldr	r3, [r7, #20]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	4a4f      	ldr	r2, [pc, #316]	; (800fbb4 <UART_SetConfig+0x340>)
 800fa76:	4293      	cmp	r3, r2
 800fa78:	d130      	bne.n	800fadc <UART_SetConfig+0x268>
 800fa7a:	4b4c      	ldr	r3, [pc, #304]	; (800fbac <UART_SetConfig+0x338>)
 800fa7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa7e:	f003 0307 	and.w	r3, r3, #7
 800fa82:	2b05      	cmp	r3, #5
 800fa84:	d826      	bhi.n	800fad4 <UART_SetConfig+0x260>
 800fa86:	a201      	add	r2, pc, #4	; (adr r2, 800fa8c <UART_SetConfig+0x218>)
 800fa88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa8c:	0800faa5 	.word	0x0800faa5
 800fa90:	0800faad 	.word	0x0800faad
 800fa94:	0800fab5 	.word	0x0800fab5
 800fa98:	0800fabd 	.word	0x0800fabd
 800fa9c:	0800fac5 	.word	0x0800fac5
 800faa0:	0800facd 	.word	0x0800facd
 800faa4:	2300      	movs	r3, #0
 800faa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800faaa:	e1b6      	b.n	800fe1a <UART_SetConfig+0x5a6>
 800faac:	2304      	movs	r3, #4
 800faae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fab2:	e1b2      	b.n	800fe1a <UART_SetConfig+0x5a6>
 800fab4:	2308      	movs	r3, #8
 800fab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800faba:	e1ae      	b.n	800fe1a <UART_SetConfig+0x5a6>
 800fabc:	2310      	movs	r3, #16
 800fabe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fac2:	e1aa      	b.n	800fe1a <UART_SetConfig+0x5a6>
 800fac4:	2320      	movs	r3, #32
 800fac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800faca:	e1a6      	b.n	800fe1a <UART_SetConfig+0x5a6>
 800facc:	2340      	movs	r3, #64	; 0x40
 800face:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fad2:	e1a2      	b.n	800fe1a <UART_SetConfig+0x5a6>
 800fad4:	2380      	movs	r3, #128	; 0x80
 800fad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fada:	e19e      	b.n	800fe1a <UART_SetConfig+0x5a6>
 800fadc:	697b      	ldr	r3, [r7, #20]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	4a35      	ldr	r2, [pc, #212]	; (800fbb8 <UART_SetConfig+0x344>)
 800fae2:	4293      	cmp	r3, r2
 800fae4:	d130      	bne.n	800fb48 <UART_SetConfig+0x2d4>
 800fae6:	4b31      	ldr	r3, [pc, #196]	; (800fbac <UART_SetConfig+0x338>)
 800fae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800faea:	f003 0307 	and.w	r3, r3, #7
 800faee:	2b05      	cmp	r3, #5
 800faf0:	d826      	bhi.n	800fb40 <UART_SetConfig+0x2cc>
 800faf2:	a201      	add	r2, pc, #4	; (adr r2, 800faf8 <UART_SetConfig+0x284>)
 800faf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800faf8:	0800fb11 	.word	0x0800fb11
 800fafc:	0800fb19 	.word	0x0800fb19
 800fb00:	0800fb21 	.word	0x0800fb21
 800fb04:	0800fb29 	.word	0x0800fb29
 800fb08:	0800fb31 	.word	0x0800fb31
 800fb0c:	0800fb39 	.word	0x0800fb39
 800fb10:	2300      	movs	r3, #0
 800fb12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb16:	e180      	b.n	800fe1a <UART_SetConfig+0x5a6>
 800fb18:	2304      	movs	r3, #4
 800fb1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb1e:	e17c      	b.n	800fe1a <UART_SetConfig+0x5a6>
 800fb20:	2308      	movs	r3, #8
 800fb22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb26:	e178      	b.n	800fe1a <UART_SetConfig+0x5a6>
 800fb28:	2310      	movs	r3, #16
 800fb2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb2e:	e174      	b.n	800fe1a <UART_SetConfig+0x5a6>
 800fb30:	2320      	movs	r3, #32
 800fb32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb36:	e170      	b.n	800fe1a <UART_SetConfig+0x5a6>
 800fb38:	2340      	movs	r3, #64	; 0x40
 800fb3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb3e:	e16c      	b.n	800fe1a <UART_SetConfig+0x5a6>
 800fb40:	2380      	movs	r3, #128	; 0x80
 800fb42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb46:	e168      	b.n	800fe1a <UART_SetConfig+0x5a6>
 800fb48:	697b      	ldr	r3, [r7, #20]
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	4a1b      	ldr	r2, [pc, #108]	; (800fbbc <UART_SetConfig+0x348>)
 800fb4e:	4293      	cmp	r3, r2
 800fb50:	d142      	bne.n	800fbd8 <UART_SetConfig+0x364>
 800fb52:	4b16      	ldr	r3, [pc, #88]	; (800fbac <UART_SetConfig+0x338>)
 800fb54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb56:	f003 0307 	and.w	r3, r3, #7
 800fb5a:	2b05      	cmp	r3, #5
 800fb5c:	d838      	bhi.n	800fbd0 <UART_SetConfig+0x35c>
 800fb5e:	a201      	add	r2, pc, #4	; (adr r2, 800fb64 <UART_SetConfig+0x2f0>)
 800fb60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb64:	0800fb7d 	.word	0x0800fb7d
 800fb68:	0800fb85 	.word	0x0800fb85
 800fb6c:	0800fb8d 	.word	0x0800fb8d
 800fb70:	0800fb95 	.word	0x0800fb95
 800fb74:	0800fbc1 	.word	0x0800fbc1
 800fb78:	0800fbc9 	.word	0x0800fbc9
 800fb7c:	2300      	movs	r3, #0
 800fb7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb82:	e14a      	b.n	800fe1a <UART_SetConfig+0x5a6>
 800fb84:	2304      	movs	r3, #4
 800fb86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb8a:	e146      	b.n	800fe1a <UART_SetConfig+0x5a6>
 800fb8c:	2308      	movs	r3, #8
 800fb8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb92:	e142      	b.n	800fe1a <UART_SetConfig+0x5a6>
 800fb94:	2310      	movs	r3, #16
 800fb96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb9a:	e13e      	b.n	800fe1a <UART_SetConfig+0x5a6>
 800fb9c:	cfff69f3 	.word	0xcfff69f3
 800fba0:	58000c00 	.word	0x58000c00
 800fba4:	11fff4ff 	.word	0x11fff4ff
 800fba8:	40011000 	.word	0x40011000
 800fbac:	58024400 	.word	0x58024400
 800fbb0:	40004400 	.word	0x40004400
 800fbb4:	40004800 	.word	0x40004800
 800fbb8:	40004c00 	.word	0x40004c00
 800fbbc:	40005000 	.word	0x40005000
 800fbc0:	2320      	movs	r3, #32
 800fbc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fbc6:	e128      	b.n	800fe1a <UART_SetConfig+0x5a6>
 800fbc8:	2340      	movs	r3, #64	; 0x40
 800fbca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fbce:	e124      	b.n	800fe1a <UART_SetConfig+0x5a6>
 800fbd0:	2380      	movs	r3, #128	; 0x80
 800fbd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fbd6:	e120      	b.n	800fe1a <UART_SetConfig+0x5a6>
 800fbd8:	697b      	ldr	r3, [r7, #20]
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	4acb      	ldr	r2, [pc, #812]	; (800ff0c <UART_SetConfig+0x698>)
 800fbde:	4293      	cmp	r3, r2
 800fbe0:	d176      	bne.n	800fcd0 <UART_SetConfig+0x45c>
 800fbe2:	4bcb      	ldr	r3, [pc, #812]	; (800ff10 <UART_SetConfig+0x69c>)
 800fbe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fbe6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fbea:	2b28      	cmp	r3, #40	; 0x28
 800fbec:	d86c      	bhi.n	800fcc8 <UART_SetConfig+0x454>
 800fbee:	a201      	add	r2, pc, #4	; (adr r2, 800fbf4 <UART_SetConfig+0x380>)
 800fbf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbf4:	0800fc99 	.word	0x0800fc99
 800fbf8:	0800fcc9 	.word	0x0800fcc9
 800fbfc:	0800fcc9 	.word	0x0800fcc9
 800fc00:	0800fcc9 	.word	0x0800fcc9
 800fc04:	0800fcc9 	.word	0x0800fcc9
 800fc08:	0800fcc9 	.word	0x0800fcc9
 800fc0c:	0800fcc9 	.word	0x0800fcc9
 800fc10:	0800fcc9 	.word	0x0800fcc9
 800fc14:	0800fca1 	.word	0x0800fca1
 800fc18:	0800fcc9 	.word	0x0800fcc9
 800fc1c:	0800fcc9 	.word	0x0800fcc9
 800fc20:	0800fcc9 	.word	0x0800fcc9
 800fc24:	0800fcc9 	.word	0x0800fcc9
 800fc28:	0800fcc9 	.word	0x0800fcc9
 800fc2c:	0800fcc9 	.word	0x0800fcc9
 800fc30:	0800fcc9 	.word	0x0800fcc9
 800fc34:	0800fca9 	.word	0x0800fca9
 800fc38:	0800fcc9 	.word	0x0800fcc9
 800fc3c:	0800fcc9 	.word	0x0800fcc9
 800fc40:	0800fcc9 	.word	0x0800fcc9
 800fc44:	0800fcc9 	.word	0x0800fcc9
 800fc48:	0800fcc9 	.word	0x0800fcc9
 800fc4c:	0800fcc9 	.word	0x0800fcc9
 800fc50:	0800fcc9 	.word	0x0800fcc9
 800fc54:	0800fcb1 	.word	0x0800fcb1
 800fc58:	0800fcc9 	.word	0x0800fcc9
 800fc5c:	0800fcc9 	.word	0x0800fcc9
 800fc60:	0800fcc9 	.word	0x0800fcc9
 800fc64:	0800fcc9 	.word	0x0800fcc9
 800fc68:	0800fcc9 	.word	0x0800fcc9
 800fc6c:	0800fcc9 	.word	0x0800fcc9
 800fc70:	0800fcc9 	.word	0x0800fcc9
 800fc74:	0800fcb9 	.word	0x0800fcb9
 800fc78:	0800fcc9 	.word	0x0800fcc9
 800fc7c:	0800fcc9 	.word	0x0800fcc9
 800fc80:	0800fcc9 	.word	0x0800fcc9
 800fc84:	0800fcc9 	.word	0x0800fcc9
 800fc88:	0800fcc9 	.word	0x0800fcc9
 800fc8c:	0800fcc9 	.word	0x0800fcc9
 800fc90:	0800fcc9 	.word	0x0800fcc9
 800fc94:	0800fcc1 	.word	0x0800fcc1
 800fc98:	2301      	movs	r3, #1
 800fc9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc9e:	e0bc      	b.n	800fe1a <UART_SetConfig+0x5a6>
 800fca0:	2304      	movs	r3, #4
 800fca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fca6:	e0b8      	b.n	800fe1a <UART_SetConfig+0x5a6>
 800fca8:	2308      	movs	r3, #8
 800fcaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fcae:	e0b4      	b.n	800fe1a <UART_SetConfig+0x5a6>
 800fcb0:	2310      	movs	r3, #16
 800fcb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fcb6:	e0b0      	b.n	800fe1a <UART_SetConfig+0x5a6>
 800fcb8:	2320      	movs	r3, #32
 800fcba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fcbe:	e0ac      	b.n	800fe1a <UART_SetConfig+0x5a6>
 800fcc0:	2340      	movs	r3, #64	; 0x40
 800fcc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fcc6:	e0a8      	b.n	800fe1a <UART_SetConfig+0x5a6>
 800fcc8:	2380      	movs	r3, #128	; 0x80
 800fcca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fcce:	e0a4      	b.n	800fe1a <UART_SetConfig+0x5a6>
 800fcd0:	697b      	ldr	r3, [r7, #20]
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	4a8f      	ldr	r2, [pc, #572]	; (800ff14 <UART_SetConfig+0x6a0>)
 800fcd6:	4293      	cmp	r3, r2
 800fcd8:	d130      	bne.n	800fd3c <UART_SetConfig+0x4c8>
 800fcda:	4b8d      	ldr	r3, [pc, #564]	; (800ff10 <UART_SetConfig+0x69c>)
 800fcdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fcde:	f003 0307 	and.w	r3, r3, #7
 800fce2:	2b05      	cmp	r3, #5
 800fce4:	d826      	bhi.n	800fd34 <UART_SetConfig+0x4c0>
 800fce6:	a201      	add	r2, pc, #4	; (adr r2, 800fcec <UART_SetConfig+0x478>)
 800fce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcec:	0800fd05 	.word	0x0800fd05
 800fcf0:	0800fd0d 	.word	0x0800fd0d
 800fcf4:	0800fd15 	.word	0x0800fd15
 800fcf8:	0800fd1d 	.word	0x0800fd1d
 800fcfc:	0800fd25 	.word	0x0800fd25
 800fd00:	0800fd2d 	.word	0x0800fd2d
 800fd04:	2300      	movs	r3, #0
 800fd06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd0a:	e086      	b.n	800fe1a <UART_SetConfig+0x5a6>
 800fd0c:	2304      	movs	r3, #4
 800fd0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd12:	e082      	b.n	800fe1a <UART_SetConfig+0x5a6>
 800fd14:	2308      	movs	r3, #8
 800fd16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd1a:	e07e      	b.n	800fe1a <UART_SetConfig+0x5a6>
 800fd1c:	2310      	movs	r3, #16
 800fd1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd22:	e07a      	b.n	800fe1a <UART_SetConfig+0x5a6>
 800fd24:	2320      	movs	r3, #32
 800fd26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd2a:	e076      	b.n	800fe1a <UART_SetConfig+0x5a6>
 800fd2c:	2340      	movs	r3, #64	; 0x40
 800fd2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd32:	e072      	b.n	800fe1a <UART_SetConfig+0x5a6>
 800fd34:	2380      	movs	r3, #128	; 0x80
 800fd36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd3a:	e06e      	b.n	800fe1a <UART_SetConfig+0x5a6>
 800fd3c:	697b      	ldr	r3, [r7, #20]
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	4a75      	ldr	r2, [pc, #468]	; (800ff18 <UART_SetConfig+0x6a4>)
 800fd42:	4293      	cmp	r3, r2
 800fd44:	d130      	bne.n	800fda8 <UART_SetConfig+0x534>
 800fd46:	4b72      	ldr	r3, [pc, #456]	; (800ff10 <UART_SetConfig+0x69c>)
 800fd48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fd4a:	f003 0307 	and.w	r3, r3, #7
 800fd4e:	2b05      	cmp	r3, #5
 800fd50:	d826      	bhi.n	800fda0 <UART_SetConfig+0x52c>
 800fd52:	a201      	add	r2, pc, #4	; (adr r2, 800fd58 <UART_SetConfig+0x4e4>)
 800fd54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd58:	0800fd71 	.word	0x0800fd71
 800fd5c:	0800fd79 	.word	0x0800fd79
 800fd60:	0800fd81 	.word	0x0800fd81
 800fd64:	0800fd89 	.word	0x0800fd89
 800fd68:	0800fd91 	.word	0x0800fd91
 800fd6c:	0800fd99 	.word	0x0800fd99
 800fd70:	2300      	movs	r3, #0
 800fd72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd76:	e050      	b.n	800fe1a <UART_SetConfig+0x5a6>
 800fd78:	2304      	movs	r3, #4
 800fd7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd7e:	e04c      	b.n	800fe1a <UART_SetConfig+0x5a6>
 800fd80:	2308      	movs	r3, #8
 800fd82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd86:	e048      	b.n	800fe1a <UART_SetConfig+0x5a6>
 800fd88:	2310      	movs	r3, #16
 800fd8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd8e:	e044      	b.n	800fe1a <UART_SetConfig+0x5a6>
 800fd90:	2320      	movs	r3, #32
 800fd92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd96:	e040      	b.n	800fe1a <UART_SetConfig+0x5a6>
 800fd98:	2340      	movs	r3, #64	; 0x40
 800fd9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd9e:	e03c      	b.n	800fe1a <UART_SetConfig+0x5a6>
 800fda0:	2380      	movs	r3, #128	; 0x80
 800fda2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fda6:	e038      	b.n	800fe1a <UART_SetConfig+0x5a6>
 800fda8:	697b      	ldr	r3, [r7, #20]
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	4a5b      	ldr	r2, [pc, #364]	; (800ff1c <UART_SetConfig+0x6a8>)
 800fdae:	4293      	cmp	r3, r2
 800fdb0:	d130      	bne.n	800fe14 <UART_SetConfig+0x5a0>
 800fdb2:	4b57      	ldr	r3, [pc, #348]	; (800ff10 <UART_SetConfig+0x69c>)
 800fdb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fdb6:	f003 0307 	and.w	r3, r3, #7
 800fdba:	2b05      	cmp	r3, #5
 800fdbc:	d826      	bhi.n	800fe0c <UART_SetConfig+0x598>
 800fdbe:	a201      	add	r2, pc, #4	; (adr r2, 800fdc4 <UART_SetConfig+0x550>)
 800fdc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdc4:	0800fddd 	.word	0x0800fddd
 800fdc8:	0800fde5 	.word	0x0800fde5
 800fdcc:	0800fded 	.word	0x0800fded
 800fdd0:	0800fdf5 	.word	0x0800fdf5
 800fdd4:	0800fdfd 	.word	0x0800fdfd
 800fdd8:	0800fe05 	.word	0x0800fe05
 800fddc:	2302      	movs	r3, #2
 800fdde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fde2:	e01a      	b.n	800fe1a <UART_SetConfig+0x5a6>
 800fde4:	2304      	movs	r3, #4
 800fde6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fdea:	e016      	b.n	800fe1a <UART_SetConfig+0x5a6>
 800fdec:	2308      	movs	r3, #8
 800fdee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fdf2:	e012      	b.n	800fe1a <UART_SetConfig+0x5a6>
 800fdf4:	2310      	movs	r3, #16
 800fdf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fdfa:	e00e      	b.n	800fe1a <UART_SetConfig+0x5a6>
 800fdfc:	2320      	movs	r3, #32
 800fdfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fe02:	e00a      	b.n	800fe1a <UART_SetConfig+0x5a6>
 800fe04:	2340      	movs	r3, #64	; 0x40
 800fe06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fe0a:	e006      	b.n	800fe1a <UART_SetConfig+0x5a6>
 800fe0c:	2380      	movs	r3, #128	; 0x80
 800fe0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fe12:	e002      	b.n	800fe1a <UART_SetConfig+0x5a6>
 800fe14:	2380      	movs	r3, #128	; 0x80
 800fe16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800fe1a:	697b      	ldr	r3, [r7, #20]
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	4a3f      	ldr	r2, [pc, #252]	; (800ff1c <UART_SetConfig+0x6a8>)
 800fe20:	4293      	cmp	r3, r2
 800fe22:	f040 80f8 	bne.w	8010016 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800fe26:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fe2a:	2b20      	cmp	r3, #32
 800fe2c:	dc46      	bgt.n	800febc <UART_SetConfig+0x648>
 800fe2e:	2b02      	cmp	r3, #2
 800fe30:	f2c0 8082 	blt.w	800ff38 <UART_SetConfig+0x6c4>
 800fe34:	3b02      	subs	r3, #2
 800fe36:	2b1e      	cmp	r3, #30
 800fe38:	d87e      	bhi.n	800ff38 <UART_SetConfig+0x6c4>
 800fe3a:	a201      	add	r2, pc, #4	; (adr r2, 800fe40 <UART_SetConfig+0x5cc>)
 800fe3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe40:	0800fec3 	.word	0x0800fec3
 800fe44:	0800ff39 	.word	0x0800ff39
 800fe48:	0800fecb 	.word	0x0800fecb
 800fe4c:	0800ff39 	.word	0x0800ff39
 800fe50:	0800ff39 	.word	0x0800ff39
 800fe54:	0800ff39 	.word	0x0800ff39
 800fe58:	0800fedb 	.word	0x0800fedb
 800fe5c:	0800ff39 	.word	0x0800ff39
 800fe60:	0800ff39 	.word	0x0800ff39
 800fe64:	0800ff39 	.word	0x0800ff39
 800fe68:	0800ff39 	.word	0x0800ff39
 800fe6c:	0800ff39 	.word	0x0800ff39
 800fe70:	0800ff39 	.word	0x0800ff39
 800fe74:	0800ff39 	.word	0x0800ff39
 800fe78:	0800feeb 	.word	0x0800feeb
 800fe7c:	0800ff39 	.word	0x0800ff39
 800fe80:	0800ff39 	.word	0x0800ff39
 800fe84:	0800ff39 	.word	0x0800ff39
 800fe88:	0800ff39 	.word	0x0800ff39
 800fe8c:	0800ff39 	.word	0x0800ff39
 800fe90:	0800ff39 	.word	0x0800ff39
 800fe94:	0800ff39 	.word	0x0800ff39
 800fe98:	0800ff39 	.word	0x0800ff39
 800fe9c:	0800ff39 	.word	0x0800ff39
 800fea0:	0800ff39 	.word	0x0800ff39
 800fea4:	0800ff39 	.word	0x0800ff39
 800fea8:	0800ff39 	.word	0x0800ff39
 800feac:	0800ff39 	.word	0x0800ff39
 800feb0:	0800ff39 	.word	0x0800ff39
 800feb4:	0800ff39 	.word	0x0800ff39
 800feb8:	0800ff2b 	.word	0x0800ff2b
 800febc:	2b40      	cmp	r3, #64	; 0x40
 800febe:	d037      	beq.n	800ff30 <UART_SetConfig+0x6bc>
 800fec0:	e03a      	b.n	800ff38 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800fec2:	f7fd fc39 	bl	800d738 <HAL_RCCEx_GetD3PCLK1Freq>
 800fec6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fec8:	e03c      	b.n	800ff44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800feca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fece:	4618      	mov	r0, r3
 800fed0:	f7fd fc48 	bl	800d764 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fed6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fed8:	e034      	b.n	800ff44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800feda:	f107 0318 	add.w	r3, r7, #24
 800fede:	4618      	mov	r0, r3
 800fee0:	f7fd fd94 	bl	800da0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fee4:	69fb      	ldr	r3, [r7, #28]
 800fee6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fee8:	e02c      	b.n	800ff44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800feea:	4b09      	ldr	r3, [pc, #36]	; (800ff10 <UART_SetConfig+0x69c>)
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	f003 0320 	and.w	r3, r3, #32
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d016      	beq.n	800ff24 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fef6:	4b06      	ldr	r3, [pc, #24]	; (800ff10 <UART_SetConfig+0x69c>)
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	08db      	lsrs	r3, r3, #3
 800fefc:	f003 0303 	and.w	r3, r3, #3
 800ff00:	4a07      	ldr	r2, [pc, #28]	; (800ff20 <UART_SetConfig+0x6ac>)
 800ff02:	fa22 f303 	lsr.w	r3, r2, r3
 800ff06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ff08:	e01c      	b.n	800ff44 <UART_SetConfig+0x6d0>
 800ff0a:	bf00      	nop
 800ff0c:	40011400 	.word	0x40011400
 800ff10:	58024400 	.word	0x58024400
 800ff14:	40007800 	.word	0x40007800
 800ff18:	40007c00 	.word	0x40007c00
 800ff1c:	58000c00 	.word	0x58000c00
 800ff20:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800ff24:	4b9d      	ldr	r3, [pc, #628]	; (801019c <UART_SetConfig+0x928>)
 800ff26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ff28:	e00c      	b.n	800ff44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ff2a:	4b9d      	ldr	r3, [pc, #628]	; (80101a0 <UART_SetConfig+0x92c>)
 800ff2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ff2e:	e009      	b.n	800ff44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ff30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ff34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ff36:	e005      	b.n	800ff44 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800ff38:	2300      	movs	r3, #0
 800ff3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ff3c:	2301      	movs	r3, #1
 800ff3e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ff42:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ff44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	f000 81de 	beq.w	8010308 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ff4c:	697b      	ldr	r3, [r7, #20]
 800ff4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff50:	4a94      	ldr	r2, [pc, #592]	; (80101a4 <UART_SetConfig+0x930>)
 800ff52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ff56:	461a      	mov	r2, r3
 800ff58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff5a:	fbb3 f3f2 	udiv	r3, r3, r2
 800ff5e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ff60:	697b      	ldr	r3, [r7, #20]
 800ff62:	685a      	ldr	r2, [r3, #4]
 800ff64:	4613      	mov	r3, r2
 800ff66:	005b      	lsls	r3, r3, #1
 800ff68:	4413      	add	r3, r2
 800ff6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ff6c:	429a      	cmp	r2, r3
 800ff6e:	d305      	bcc.n	800ff7c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ff70:	697b      	ldr	r3, [r7, #20]
 800ff72:	685b      	ldr	r3, [r3, #4]
 800ff74:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ff76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ff78:	429a      	cmp	r2, r3
 800ff7a:	d903      	bls.n	800ff84 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800ff7c:	2301      	movs	r3, #1
 800ff7e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ff82:	e1c1      	b.n	8010308 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ff84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff86:	2200      	movs	r2, #0
 800ff88:	60bb      	str	r3, [r7, #8]
 800ff8a:	60fa      	str	r2, [r7, #12]
 800ff8c:	697b      	ldr	r3, [r7, #20]
 800ff8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff90:	4a84      	ldr	r2, [pc, #528]	; (80101a4 <UART_SetConfig+0x930>)
 800ff92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ff96:	b29b      	uxth	r3, r3
 800ff98:	2200      	movs	r2, #0
 800ff9a:	603b      	str	r3, [r7, #0]
 800ff9c:	607a      	str	r2, [r7, #4]
 800ff9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ffa2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ffa6:	f7f0 fb01 	bl	80005ac <__aeabi_uldivmod>
 800ffaa:	4602      	mov	r2, r0
 800ffac:	460b      	mov	r3, r1
 800ffae:	4610      	mov	r0, r2
 800ffb0:	4619      	mov	r1, r3
 800ffb2:	f04f 0200 	mov.w	r2, #0
 800ffb6:	f04f 0300 	mov.w	r3, #0
 800ffba:	020b      	lsls	r3, r1, #8
 800ffbc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ffc0:	0202      	lsls	r2, r0, #8
 800ffc2:	6979      	ldr	r1, [r7, #20]
 800ffc4:	6849      	ldr	r1, [r1, #4]
 800ffc6:	0849      	lsrs	r1, r1, #1
 800ffc8:	2000      	movs	r0, #0
 800ffca:	460c      	mov	r4, r1
 800ffcc:	4605      	mov	r5, r0
 800ffce:	eb12 0804 	adds.w	r8, r2, r4
 800ffd2:	eb43 0905 	adc.w	r9, r3, r5
 800ffd6:	697b      	ldr	r3, [r7, #20]
 800ffd8:	685b      	ldr	r3, [r3, #4]
 800ffda:	2200      	movs	r2, #0
 800ffdc:	469a      	mov	sl, r3
 800ffde:	4693      	mov	fp, r2
 800ffe0:	4652      	mov	r2, sl
 800ffe2:	465b      	mov	r3, fp
 800ffe4:	4640      	mov	r0, r8
 800ffe6:	4649      	mov	r1, r9
 800ffe8:	f7f0 fae0 	bl	80005ac <__aeabi_uldivmod>
 800ffec:	4602      	mov	r2, r0
 800ffee:	460b      	mov	r3, r1
 800fff0:	4613      	mov	r3, r2
 800fff2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800fff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fff6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fffa:	d308      	bcc.n	801000e <UART_SetConfig+0x79a>
 800fffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fffe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010002:	d204      	bcs.n	801000e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8010004:	697b      	ldr	r3, [r7, #20]
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801000a:	60da      	str	r2, [r3, #12]
 801000c:	e17c      	b.n	8010308 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 801000e:	2301      	movs	r3, #1
 8010010:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8010014:	e178      	b.n	8010308 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010016:	697b      	ldr	r3, [r7, #20]
 8010018:	69db      	ldr	r3, [r3, #28]
 801001a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801001e:	f040 80c5 	bne.w	80101ac <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8010022:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010026:	2b20      	cmp	r3, #32
 8010028:	dc48      	bgt.n	80100bc <UART_SetConfig+0x848>
 801002a:	2b00      	cmp	r3, #0
 801002c:	db7b      	blt.n	8010126 <UART_SetConfig+0x8b2>
 801002e:	2b20      	cmp	r3, #32
 8010030:	d879      	bhi.n	8010126 <UART_SetConfig+0x8b2>
 8010032:	a201      	add	r2, pc, #4	; (adr r2, 8010038 <UART_SetConfig+0x7c4>)
 8010034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010038:	080100c3 	.word	0x080100c3
 801003c:	080100cb 	.word	0x080100cb
 8010040:	08010127 	.word	0x08010127
 8010044:	08010127 	.word	0x08010127
 8010048:	080100d3 	.word	0x080100d3
 801004c:	08010127 	.word	0x08010127
 8010050:	08010127 	.word	0x08010127
 8010054:	08010127 	.word	0x08010127
 8010058:	080100e3 	.word	0x080100e3
 801005c:	08010127 	.word	0x08010127
 8010060:	08010127 	.word	0x08010127
 8010064:	08010127 	.word	0x08010127
 8010068:	08010127 	.word	0x08010127
 801006c:	08010127 	.word	0x08010127
 8010070:	08010127 	.word	0x08010127
 8010074:	08010127 	.word	0x08010127
 8010078:	080100f3 	.word	0x080100f3
 801007c:	08010127 	.word	0x08010127
 8010080:	08010127 	.word	0x08010127
 8010084:	08010127 	.word	0x08010127
 8010088:	08010127 	.word	0x08010127
 801008c:	08010127 	.word	0x08010127
 8010090:	08010127 	.word	0x08010127
 8010094:	08010127 	.word	0x08010127
 8010098:	08010127 	.word	0x08010127
 801009c:	08010127 	.word	0x08010127
 80100a0:	08010127 	.word	0x08010127
 80100a4:	08010127 	.word	0x08010127
 80100a8:	08010127 	.word	0x08010127
 80100ac:	08010127 	.word	0x08010127
 80100b0:	08010127 	.word	0x08010127
 80100b4:	08010127 	.word	0x08010127
 80100b8:	08010119 	.word	0x08010119
 80100bc:	2b40      	cmp	r3, #64	; 0x40
 80100be:	d02e      	beq.n	801011e <UART_SetConfig+0x8aa>
 80100c0:	e031      	b.n	8010126 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80100c2:	f7fc fbc7 	bl	800c854 <HAL_RCC_GetPCLK1Freq>
 80100c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80100c8:	e033      	b.n	8010132 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80100ca:	f7fc fbd9 	bl	800c880 <HAL_RCC_GetPCLK2Freq>
 80100ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80100d0:	e02f      	b.n	8010132 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80100d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80100d6:	4618      	mov	r0, r3
 80100d8:	f7fd fb44 	bl	800d764 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80100dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80100e0:	e027      	b.n	8010132 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80100e2:	f107 0318 	add.w	r3, r7, #24
 80100e6:	4618      	mov	r0, r3
 80100e8:	f7fd fc90 	bl	800da0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80100ec:	69fb      	ldr	r3, [r7, #28]
 80100ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80100f0:	e01f      	b.n	8010132 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80100f2:	4b2d      	ldr	r3, [pc, #180]	; (80101a8 <UART_SetConfig+0x934>)
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	f003 0320 	and.w	r3, r3, #32
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d009      	beq.n	8010112 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80100fe:	4b2a      	ldr	r3, [pc, #168]	; (80101a8 <UART_SetConfig+0x934>)
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	08db      	lsrs	r3, r3, #3
 8010104:	f003 0303 	and.w	r3, r3, #3
 8010108:	4a24      	ldr	r2, [pc, #144]	; (801019c <UART_SetConfig+0x928>)
 801010a:	fa22 f303 	lsr.w	r3, r2, r3
 801010e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010110:	e00f      	b.n	8010132 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8010112:	4b22      	ldr	r3, [pc, #136]	; (801019c <UART_SetConfig+0x928>)
 8010114:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010116:	e00c      	b.n	8010132 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010118:	4b21      	ldr	r3, [pc, #132]	; (80101a0 <UART_SetConfig+0x92c>)
 801011a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801011c:	e009      	b.n	8010132 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801011e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010122:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010124:	e005      	b.n	8010132 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8010126:	2300      	movs	r3, #0
 8010128:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801012a:	2301      	movs	r3, #1
 801012c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8010130:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010134:	2b00      	cmp	r3, #0
 8010136:	f000 80e7 	beq.w	8010308 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801013a:	697b      	ldr	r3, [r7, #20]
 801013c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801013e:	4a19      	ldr	r2, [pc, #100]	; (80101a4 <UART_SetConfig+0x930>)
 8010140:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010144:	461a      	mov	r2, r3
 8010146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010148:	fbb3 f3f2 	udiv	r3, r3, r2
 801014c:	005a      	lsls	r2, r3, #1
 801014e:	697b      	ldr	r3, [r7, #20]
 8010150:	685b      	ldr	r3, [r3, #4]
 8010152:	085b      	lsrs	r3, r3, #1
 8010154:	441a      	add	r2, r3
 8010156:	697b      	ldr	r3, [r7, #20]
 8010158:	685b      	ldr	r3, [r3, #4]
 801015a:	fbb2 f3f3 	udiv	r3, r2, r3
 801015e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010162:	2b0f      	cmp	r3, #15
 8010164:	d916      	bls.n	8010194 <UART_SetConfig+0x920>
 8010166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801016c:	d212      	bcs.n	8010194 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801016e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010170:	b29b      	uxth	r3, r3
 8010172:	f023 030f 	bic.w	r3, r3, #15
 8010176:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801017a:	085b      	lsrs	r3, r3, #1
 801017c:	b29b      	uxth	r3, r3
 801017e:	f003 0307 	and.w	r3, r3, #7
 8010182:	b29a      	uxth	r2, r3
 8010184:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010186:	4313      	orrs	r3, r2
 8010188:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 801018a:	697b      	ldr	r3, [r7, #20]
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8010190:	60da      	str	r2, [r3, #12]
 8010192:	e0b9      	b.n	8010308 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8010194:	2301      	movs	r3, #1
 8010196:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801019a:	e0b5      	b.n	8010308 <UART_SetConfig+0xa94>
 801019c:	03d09000 	.word	0x03d09000
 80101a0:	003d0900 	.word	0x003d0900
 80101a4:	080145fc 	.word	0x080145fc
 80101a8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80101ac:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80101b0:	2b20      	cmp	r3, #32
 80101b2:	dc49      	bgt.n	8010248 <UART_SetConfig+0x9d4>
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	db7c      	blt.n	80102b2 <UART_SetConfig+0xa3e>
 80101b8:	2b20      	cmp	r3, #32
 80101ba:	d87a      	bhi.n	80102b2 <UART_SetConfig+0xa3e>
 80101bc:	a201      	add	r2, pc, #4	; (adr r2, 80101c4 <UART_SetConfig+0x950>)
 80101be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101c2:	bf00      	nop
 80101c4:	0801024f 	.word	0x0801024f
 80101c8:	08010257 	.word	0x08010257
 80101cc:	080102b3 	.word	0x080102b3
 80101d0:	080102b3 	.word	0x080102b3
 80101d4:	0801025f 	.word	0x0801025f
 80101d8:	080102b3 	.word	0x080102b3
 80101dc:	080102b3 	.word	0x080102b3
 80101e0:	080102b3 	.word	0x080102b3
 80101e4:	0801026f 	.word	0x0801026f
 80101e8:	080102b3 	.word	0x080102b3
 80101ec:	080102b3 	.word	0x080102b3
 80101f0:	080102b3 	.word	0x080102b3
 80101f4:	080102b3 	.word	0x080102b3
 80101f8:	080102b3 	.word	0x080102b3
 80101fc:	080102b3 	.word	0x080102b3
 8010200:	080102b3 	.word	0x080102b3
 8010204:	0801027f 	.word	0x0801027f
 8010208:	080102b3 	.word	0x080102b3
 801020c:	080102b3 	.word	0x080102b3
 8010210:	080102b3 	.word	0x080102b3
 8010214:	080102b3 	.word	0x080102b3
 8010218:	080102b3 	.word	0x080102b3
 801021c:	080102b3 	.word	0x080102b3
 8010220:	080102b3 	.word	0x080102b3
 8010224:	080102b3 	.word	0x080102b3
 8010228:	080102b3 	.word	0x080102b3
 801022c:	080102b3 	.word	0x080102b3
 8010230:	080102b3 	.word	0x080102b3
 8010234:	080102b3 	.word	0x080102b3
 8010238:	080102b3 	.word	0x080102b3
 801023c:	080102b3 	.word	0x080102b3
 8010240:	080102b3 	.word	0x080102b3
 8010244:	080102a5 	.word	0x080102a5
 8010248:	2b40      	cmp	r3, #64	; 0x40
 801024a:	d02e      	beq.n	80102aa <UART_SetConfig+0xa36>
 801024c:	e031      	b.n	80102b2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801024e:	f7fc fb01 	bl	800c854 <HAL_RCC_GetPCLK1Freq>
 8010252:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010254:	e033      	b.n	80102be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010256:	f7fc fb13 	bl	800c880 <HAL_RCC_GetPCLK2Freq>
 801025a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801025c:	e02f      	b.n	80102be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801025e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010262:	4618      	mov	r0, r3
 8010264:	f7fd fa7e 	bl	800d764 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801026a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801026c:	e027      	b.n	80102be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801026e:	f107 0318 	add.w	r3, r7, #24
 8010272:	4618      	mov	r0, r3
 8010274:	f7fd fbca 	bl	800da0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010278:	69fb      	ldr	r3, [r7, #28]
 801027a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801027c:	e01f      	b.n	80102be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801027e:	4b2d      	ldr	r3, [pc, #180]	; (8010334 <UART_SetConfig+0xac0>)
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	f003 0320 	and.w	r3, r3, #32
 8010286:	2b00      	cmp	r3, #0
 8010288:	d009      	beq.n	801029e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801028a:	4b2a      	ldr	r3, [pc, #168]	; (8010334 <UART_SetConfig+0xac0>)
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	08db      	lsrs	r3, r3, #3
 8010290:	f003 0303 	and.w	r3, r3, #3
 8010294:	4a28      	ldr	r2, [pc, #160]	; (8010338 <UART_SetConfig+0xac4>)
 8010296:	fa22 f303 	lsr.w	r3, r2, r3
 801029a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801029c:	e00f      	b.n	80102be <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 801029e:	4b26      	ldr	r3, [pc, #152]	; (8010338 <UART_SetConfig+0xac4>)
 80102a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80102a2:	e00c      	b.n	80102be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80102a4:	4b25      	ldr	r3, [pc, #148]	; (801033c <UART_SetConfig+0xac8>)
 80102a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80102a8:	e009      	b.n	80102be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80102aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80102ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80102b0:	e005      	b.n	80102be <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80102b2:	2300      	movs	r3, #0
 80102b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80102b6:	2301      	movs	r3, #1
 80102b8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80102bc:	bf00      	nop
    }

    if (pclk != 0U)
 80102be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d021      	beq.n	8010308 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80102c4:	697b      	ldr	r3, [r7, #20]
 80102c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102c8:	4a1d      	ldr	r2, [pc, #116]	; (8010340 <UART_SetConfig+0xacc>)
 80102ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80102ce:	461a      	mov	r2, r3
 80102d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80102d2:	fbb3 f2f2 	udiv	r2, r3, r2
 80102d6:	697b      	ldr	r3, [r7, #20]
 80102d8:	685b      	ldr	r3, [r3, #4]
 80102da:	085b      	lsrs	r3, r3, #1
 80102dc:	441a      	add	r2, r3
 80102de:	697b      	ldr	r3, [r7, #20]
 80102e0:	685b      	ldr	r3, [r3, #4]
 80102e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80102e6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80102e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102ea:	2b0f      	cmp	r3, #15
 80102ec:	d909      	bls.n	8010302 <UART_SetConfig+0xa8e>
 80102ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80102f4:	d205      	bcs.n	8010302 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80102f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102f8:	b29a      	uxth	r2, r3
 80102fa:	697b      	ldr	r3, [r7, #20]
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	60da      	str	r2, [r3, #12]
 8010300:	e002      	b.n	8010308 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8010302:	2301      	movs	r3, #1
 8010304:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010308:	697b      	ldr	r3, [r7, #20]
 801030a:	2201      	movs	r2, #1
 801030c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8010310:	697b      	ldr	r3, [r7, #20]
 8010312:	2201      	movs	r2, #1
 8010314:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010318:	697b      	ldr	r3, [r7, #20]
 801031a:	2200      	movs	r2, #0
 801031c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 801031e:	697b      	ldr	r3, [r7, #20]
 8010320:	2200      	movs	r2, #0
 8010322:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8010324:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8010328:	4618      	mov	r0, r3
 801032a:	3748      	adds	r7, #72	; 0x48
 801032c:	46bd      	mov	sp, r7
 801032e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010332:	bf00      	nop
 8010334:	58024400 	.word	0x58024400
 8010338:	03d09000 	.word	0x03d09000
 801033c:	003d0900 	.word	0x003d0900
 8010340:	080145fc 	.word	0x080145fc

08010344 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010344:	b480      	push	{r7}
 8010346:	b083      	sub	sp, #12
 8010348:	af00      	add	r7, sp, #0
 801034a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010350:	f003 0301 	and.w	r3, r3, #1
 8010354:	2b00      	cmp	r3, #0
 8010356:	d00a      	beq.n	801036e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	685b      	ldr	r3, [r3, #4]
 801035e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	430a      	orrs	r2, r1
 801036c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010372:	f003 0302 	and.w	r3, r3, #2
 8010376:	2b00      	cmp	r3, #0
 8010378:	d00a      	beq.n	8010390 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	685b      	ldr	r3, [r3, #4]
 8010380:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	430a      	orrs	r2, r1
 801038e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010394:	f003 0304 	and.w	r3, r3, #4
 8010398:	2b00      	cmp	r3, #0
 801039a:	d00a      	beq.n	80103b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	685b      	ldr	r3, [r3, #4]
 80103a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	430a      	orrs	r2, r1
 80103b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103b6:	f003 0308 	and.w	r3, r3, #8
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d00a      	beq.n	80103d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	685b      	ldr	r3, [r3, #4]
 80103c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	430a      	orrs	r2, r1
 80103d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103d8:	f003 0310 	and.w	r3, r3, #16
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d00a      	beq.n	80103f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	689b      	ldr	r3, [r3, #8]
 80103e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	430a      	orrs	r2, r1
 80103f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103fa:	f003 0320 	and.w	r3, r3, #32
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d00a      	beq.n	8010418 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	689b      	ldr	r3, [r3, #8]
 8010408:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	430a      	orrs	r2, r1
 8010416:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801041c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010420:	2b00      	cmp	r3, #0
 8010422:	d01a      	beq.n	801045a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	685b      	ldr	r3, [r3, #4]
 801042a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	430a      	orrs	r2, r1
 8010438:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801043e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010442:	d10a      	bne.n	801045a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	685b      	ldr	r3, [r3, #4]
 801044a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	430a      	orrs	r2, r1
 8010458:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801045e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010462:	2b00      	cmp	r3, #0
 8010464:	d00a      	beq.n	801047c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	685b      	ldr	r3, [r3, #4]
 801046c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	430a      	orrs	r2, r1
 801047a:	605a      	str	r2, [r3, #4]
  }
}
 801047c:	bf00      	nop
 801047e:	370c      	adds	r7, #12
 8010480:	46bd      	mov	sp, r7
 8010482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010486:	4770      	bx	lr

08010488 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010488:	b580      	push	{r7, lr}
 801048a:	b086      	sub	sp, #24
 801048c:	af02      	add	r7, sp, #8
 801048e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	2200      	movs	r2, #0
 8010494:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010498:	f7f6 fec4 	bl	8007224 <HAL_GetTick>
 801049c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	f003 0308 	and.w	r3, r3, #8
 80104a8:	2b08      	cmp	r3, #8
 80104aa:	d10e      	bne.n	80104ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80104ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80104b0:	9300      	str	r3, [sp, #0]
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	2200      	movs	r2, #0
 80104b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80104ba:	6878      	ldr	r0, [r7, #4]
 80104bc:	f000 f82f 	bl	801051e <UART_WaitOnFlagUntilTimeout>
 80104c0:	4603      	mov	r3, r0
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d001      	beq.n	80104ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80104c6:	2303      	movs	r3, #3
 80104c8:	e025      	b.n	8010516 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	f003 0304 	and.w	r3, r3, #4
 80104d4:	2b04      	cmp	r3, #4
 80104d6:	d10e      	bne.n	80104f6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80104d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80104dc:	9300      	str	r3, [sp, #0]
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	2200      	movs	r2, #0
 80104e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80104e6:	6878      	ldr	r0, [r7, #4]
 80104e8:	f000 f819 	bl	801051e <UART_WaitOnFlagUntilTimeout>
 80104ec:	4603      	mov	r3, r0
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d001      	beq.n	80104f6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80104f2:	2303      	movs	r3, #3
 80104f4:	e00f      	b.n	8010516 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	2220      	movs	r2, #32
 80104fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	2220      	movs	r2, #32
 8010502:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	2200      	movs	r2, #0
 801050a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	2200      	movs	r2, #0
 8010510:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010514:	2300      	movs	r3, #0
}
 8010516:	4618      	mov	r0, r3
 8010518:	3710      	adds	r7, #16
 801051a:	46bd      	mov	sp, r7
 801051c:	bd80      	pop	{r7, pc}

0801051e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801051e:	b580      	push	{r7, lr}
 8010520:	b09c      	sub	sp, #112	; 0x70
 8010522:	af00      	add	r7, sp, #0
 8010524:	60f8      	str	r0, [r7, #12]
 8010526:	60b9      	str	r1, [r7, #8]
 8010528:	603b      	str	r3, [r7, #0]
 801052a:	4613      	mov	r3, r2
 801052c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801052e:	e0a9      	b.n	8010684 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010530:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010532:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010536:	f000 80a5 	beq.w	8010684 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801053a:	f7f6 fe73 	bl	8007224 <HAL_GetTick>
 801053e:	4602      	mov	r2, r0
 8010540:	683b      	ldr	r3, [r7, #0]
 8010542:	1ad3      	subs	r3, r2, r3
 8010544:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010546:	429a      	cmp	r2, r3
 8010548:	d302      	bcc.n	8010550 <UART_WaitOnFlagUntilTimeout+0x32>
 801054a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801054c:	2b00      	cmp	r3, #0
 801054e:	d140      	bne.n	80105d2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010556:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010558:	e853 3f00 	ldrex	r3, [r3]
 801055c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801055e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010560:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8010564:	667b      	str	r3, [r7, #100]	; 0x64
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	461a      	mov	r2, r3
 801056c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801056e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010570:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010572:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010574:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010576:	e841 2300 	strex	r3, r2, [r1]
 801057a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801057c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801057e:	2b00      	cmp	r3, #0
 8010580:	d1e6      	bne.n	8010550 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	3308      	adds	r3, #8
 8010588:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801058a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801058c:	e853 3f00 	ldrex	r3, [r3]
 8010590:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010594:	f023 0301 	bic.w	r3, r3, #1
 8010598:	663b      	str	r3, [r7, #96]	; 0x60
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	3308      	adds	r3, #8
 80105a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80105a2:	64ba      	str	r2, [r7, #72]	; 0x48
 80105a4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80105a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80105aa:	e841 2300 	strex	r3, r2, [r1]
 80105ae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80105b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d1e5      	bne.n	8010582 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	2220      	movs	r2, #32
 80105ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	2220      	movs	r2, #32
 80105c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	2200      	movs	r2, #0
 80105ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80105ce:	2303      	movs	r3, #3
 80105d0:	e069      	b.n	80106a6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	f003 0304 	and.w	r3, r3, #4
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d051      	beq.n	8010684 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	69db      	ldr	r3, [r3, #28]
 80105e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80105ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80105ee:	d149      	bne.n	8010684 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80105f8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010602:	e853 3f00 	ldrex	r3, [r3]
 8010606:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801060a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801060e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	461a      	mov	r2, r3
 8010616:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010618:	637b      	str	r3, [r7, #52]	; 0x34
 801061a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801061c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801061e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010620:	e841 2300 	strex	r3, r2, [r1]
 8010624:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8010626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010628:	2b00      	cmp	r3, #0
 801062a:	d1e6      	bne.n	80105fa <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	3308      	adds	r3, #8
 8010632:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010634:	697b      	ldr	r3, [r7, #20]
 8010636:	e853 3f00 	ldrex	r3, [r3]
 801063a:	613b      	str	r3, [r7, #16]
   return(result);
 801063c:	693b      	ldr	r3, [r7, #16]
 801063e:	f023 0301 	bic.w	r3, r3, #1
 8010642:	66bb      	str	r3, [r7, #104]	; 0x68
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	3308      	adds	r3, #8
 801064a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801064c:	623a      	str	r2, [r7, #32]
 801064e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010650:	69f9      	ldr	r1, [r7, #28]
 8010652:	6a3a      	ldr	r2, [r7, #32]
 8010654:	e841 2300 	strex	r3, r2, [r1]
 8010658:	61bb      	str	r3, [r7, #24]
   return(result);
 801065a:	69bb      	ldr	r3, [r7, #24]
 801065c:	2b00      	cmp	r3, #0
 801065e:	d1e5      	bne.n	801062c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	2220      	movs	r2, #32
 8010664:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	2220      	movs	r2, #32
 801066c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	2220      	movs	r2, #32
 8010674:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	2200      	movs	r2, #0
 801067c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8010680:	2303      	movs	r3, #3
 8010682:	e010      	b.n	80106a6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	69da      	ldr	r2, [r3, #28]
 801068a:	68bb      	ldr	r3, [r7, #8]
 801068c:	4013      	ands	r3, r2
 801068e:	68ba      	ldr	r2, [r7, #8]
 8010690:	429a      	cmp	r2, r3
 8010692:	bf0c      	ite	eq
 8010694:	2301      	moveq	r3, #1
 8010696:	2300      	movne	r3, #0
 8010698:	b2db      	uxtb	r3, r3
 801069a:	461a      	mov	r2, r3
 801069c:	79fb      	ldrb	r3, [r7, #7]
 801069e:	429a      	cmp	r2, r3
 80106a0:	f43f af46 	beq.w	8010530 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80106a4:	2300      	movs	r3, #0
}
 80106a6:	4618      	mov	r0, r3
 80106a8:	3770      	adds	r7, #112	; 0x70
 80106aa:	46bd      	mov	sp, r7
 80106ac:	bd80      	pop	{r7, pc}
	...

080106b0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80106b0:	b580      	push	{r7, lr}
 80106b2:	b096      	sub	sp, #88	; 0x58
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	60f8      	str	r0, [r7, #12]
 80106b8:	60b9      	str	r1, [r7, #8]
 80106ba:	4613      	mov	r3, r2
 80106bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	68ba      	ldr	r2, [r7, #8]
 80106c2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	88fa      	ldrh	r2, [r7, #6]
 80106c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	2200      	movs	r2, #0
 80106d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	2222      	movs	r2, #34	; 0x22
 80106d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d02c      	beq.n	801073e <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80106e8:	4a42      	ldr	r2, [pc, #264]	; (80107f4 <UART_Start_Receive_DMA+0x144>)
 80106ea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80106f0:	4a41      	ldr	r2, [pc, #260]	; (80107f8 <UART_Start_Receive_DMA+0x148>)
 80106f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80106f8:	4a40      	ldr	r2, [pc, #256]	; (80107fc <UART_Start_Receive_DMA+0x14c>)
 80106fa:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010700:	2200      	movs	r2, #0
 8010702:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	3324      	adds	r3, #36	; 0x24
 801070e:	4619      	mov	r1, r3
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010714:	461a      	mov	r2, r3
 8010716:	88fb      	ldrh	r3, [r7, #6]
 8010718:	f7f7 fa2c 	bl	8007b74 <HAL_DMA_Start_IT>
 801071c:	4603      	mov	r3, r0
 801071e:	2b00      	cmp	r3, #0
 8010720:	d00d      	beq.n	801073e <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	2210      	movs	r2, #16
 8010726:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	2200      	movs	r2, #0
 801072e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	2220      	movs	r2, #32
 8010736:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 801073a:	2301      	movs	r3, #1
 801073c:	e055      	b.n	80107ea <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	2200      	movs	r2, #0
 8010742:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	691b      	ldr	r3, [r3, #16]
 801074a:	2b00      	cmp	r3, #0
 801074c:	d018      	beq.n	8010780 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010756:	e853 3f00 	ldrex	r3, [r3]
 801075a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801075c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801075e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010762:	657b      	str	r3, [r7, #84]	; 0x54
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	461a      	mov	r2, r3
 801076a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801076c:	64bb      	str	r3, [r7, #72]	; 0x48
 801076e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010770:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010772:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010774:	e841 2300 	strex	r3, r2, [r1]
 8010778:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801077a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801077c:	2b00      	cmp	r3, #0
 801077e:	d1e6      	bne.n	801074e <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	3308      	adds	r3, #8
 8010786:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801078a:	e853 3f00 	ldrex	r3, [r3]
 801078e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010792:	f043 0301 	orr.w	r3, r3, #1
 8010796:	653b      	str	r3, [r7, #80]	; 0x50
 8010798:	68fb      	ldr	r3, [r7, #12]
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	3308      	adds	r3, #8
 801079e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80107a0:	637a      	str	r2, [r7, #52]	; 0x34
 80107a2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80107a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80107a8:	e841 2300 	strex	r3, r2, [r1]
 80107ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80107ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d1e5      	bne.n	8010780 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	3308      	adds	r3, #8
 80107ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107bc:	697b      	ldr	r3, [r7, #20]
 80107be:	e853 3f00 	ldrex	r3, [r3]
 80107c2:	613b      	str	r3, [r7, #16]
   return(result);
 80107c4:	693b      	ldr	r3, [r7, #16]
 80107c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80107ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	3308      	adds	r3, #8
 80107d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80107d4:	623a      	str	r2, [r7, #32]
 80107d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107d8:	69f9      	ldr	r1, [r7, #28]
 80107da:	6a3a      	ldr	r2, [r7, #32]
 80107dc:	e841 2300 	strex	r3, r2, [r1]
 80107e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80107e2:	69bb      	ldr	r3, [r7, #24]
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d1e5      	bne.n	80107b4 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 80107e8:	2300      	movs	r3, #0
}
 80107ea:	4618      	mov	r0, r3
 80107ec:	3758      	adds	r7, #88	; 0x58
 80107ee:	46bd      	mov	sp, r7
 80107f0:	bd80      	pop	{r7, pc}
 80107f2:	bf00      	nop
 80107f4:	08010951 	.word	0x08010951
 80107f8:	08010a73 	.word	0x08010a73
 80107fc:	08010aab 	.word	0x08010aab

08010800 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010800:	b480      	push	{r7}
 8010802:	b08f      	sub	sp, #60	; 0x3c
 8010804:	af00      	add	r7, sp, #0
 8010806:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801080e:	6a3b      	ldr	r3, [r7, #32]
 8010810:	e853 3f00 	ldrex	r3, [r3]
 8010814:	61fb      	str	r3, [r7, #28]
   return(result);
 8010816:	69fb      	ldr	r3, [r7, #28]
 8010818:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 801081c:	637b      	str	r3, [r7, #52]	; 0x34
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	461a      	mov	r2, r3
 8010824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010826:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010828:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801082a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801082c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801082e:	e841 2300 	strex	r3, r2, [r1]
 8010832:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010836:	2b00      	cmp	r3, #0
 8010838:	d1e6      	bne.n	8010808 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	3308      	adds	r3, #8
 8010840:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	e853 3f00 	ldrex	r3, [r3]
 8010848:	60bb      	str	r3, [r7, #8]
   return(result);
 801084a:	68bb      	ldr	r3, [r7, #8]
 801084c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8010850:	633b      	str	r3, [r7, #48]	; 0x30
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	3308      	adds	r3, #8
 8010858:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801085a:	61ba      	str	r2, [r7, #24]
 801085c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801085e:	6979      	ldr	r1, [r7, #20]
 8010860:	69ba      	ldr	r2, [r7, #24]
 8010862:	e841 2300 	strex	r3, r2, [r1]
 8010866:	613b      	str	r3, [r7, #16]
   return(result);
 8010868:	693b      	ldr	r3, [r7, #16]
 801086a:	2b00      	cmp	r3, #0
 801086c:	d1e5      	bne.n	801083a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	2220      	movs	r2, #32
 8010872:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8010876:	bf00      	nop
 8010878:	373c      	adds	r7, #60	; 0x3c
 801087a:	46bd      	mov	sp, r7
 801087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010880:	4770      	bx	lr
	...

08010884 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010884:	b480      	push	{r7}
 8010886:	b095      	sub	sp, #84	; 0x54
 8010888:	af00      	add	r7, sp, #0
 801088a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010894:	e853 3f00 	ldrex	r3, [r3]
 8010898:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801089a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801089c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80108a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	461a      	mov	r2, r3
 80108a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80108aa:	643b      	str	r3, [r7, #64]	; 0x40
 80108ac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80108b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80108b2:	e841 2300 	strex	r3, r2, [r1]
 80108b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80108b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d1e6      	bne.n	801088c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	3308      	adds	r3, #8
 80108c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108c6:	6a3b      	ldr	r3, [r7, #32]
 80108c8:	e853 3f00 	ldrex	r3, [r3]
 80108cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80108ce:	69fa      	ldr	r2, [r7, #28]
 80108d0:	4b1e      	ldr	r3, [pc, #120]	; (801094c <UART_EndRxTransfer+0xc8>)
 80108d2:	4013      	ands	r3, r2
 80108d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	3308      	adds	r3, #8
 80108dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80108de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80108e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80108e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80108e6:	e841 2300 	strex	r3, r2, [r1]
 80108ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80108ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d1e5      	bne.n	80108be <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80108f6:	2b01      	cmp	r3, #1
 80108f8:	d118      	bne.n	801092c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	e853 3f00 	ldrex	r3, [r3]
 8010906:	60bb      	str	r3, [r7, #8]
   return(result);
 8010908:	68bb      	ldr	r3, [r7, #8]
 801090a:	f023 0310 	bic.w	r3, r3, #16
 801090e:	647b      	str	r3, [r7, #68]	; 0x44
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	461a      	mov	r2, r3
 8010916:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010918:	61bb      	str	r3, [r7, #24]
 801091a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801091c:	6979      	ldr	r1, [r7, #20]
 801091e:	69ba      	ldr	r2, [r7, #24]
 8010920:	e841 2300 	strex	r3, r2, [r1]
 8010924:	613b      	str	r3, [r7, #16]
   return(result);
 8010926:	693b      	ldr	r3, [r7, #16]
 8010928:	2b00      	cmp	r3, #0
 801092a:	d1e6      	bne.n	80108fa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	2220      	movs	r2, #32
 8010930:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	2200      	movs	r2, #0
 8010938:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	2200      	movs	r2, #0
 801093e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8010940:	bf00      	nop
 8010942:	3754      	adds	r7, #84	; 0x54
 8010944:	46bd      	mov	sp, r7
 8010946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801094a:	4770      	bx	lr
 801094c:	effffffe 	.word	0xeffffffe

08010950 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010950:	b580      	push	{r7, lr}
 8010952:	b09c      	sub	sp, #112	; 0x70
 8010954:	af00      	add	r7, sp, #0
 8010956:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801095c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	69db      	ldr	r3, [r3, #28]
 8010962:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010966:	d071      	beq.n	8010a4c <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8010968:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801096a:	2200      	movs	r2, #0
 801096c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010976:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010978:	e853 3f00 	ldrex	r3, [r3]
 801097c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801097e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010980:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010984:	66bb      	str	r3, [r7, #104]	; 0x68
 8010986:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	461a      	mov	r2, r3
 801098c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801098e:	65bb      	str	r3, [r7, #88]	; 0x58
 8010990:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010992:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010994:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010996:	e841 2300 	strex	r3, r2, [r1]
 801099a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801099c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d1e6      	bne.n	8010970 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80109a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	3308      	adds	r3, #8
 80109a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109ac:	e853 3f00 	ldrex	r3, [r3]
 80109b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80109b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109b4:	f023 0301 	bic.w	r3, r3, #1
 80109b8:	667b      	str	r3, [r7, #100]	; 0x64
 80109ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	3308      	adds	r3, #8
 80109c0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80109c2:	647a      	str	r2, [r7, #68]	; 0x44
 80109c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80109c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80109ca:	e841 2300 	strex	r3, r2, [r1]
 80109ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80109d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d1e5      	bne.n	80109a2 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80109d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	3308      	adds	r3, #8
 80109dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109e0:	e853 3f00 	ldrex	r3, [r3]
 80109e4:	623b      	str	r3, [r7, #32]
   return(result);
 80109e6:	6a3b      	ldr	r3, [r7, #32]
 80109e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80109ec:	663b      	str	r3, [r7, #96]	; 0x60
 80109ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	3308      	adds	r3, #8
 80109f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80109f6:	633a      	str	r2, [r7, #48]	; 0x30
 80109f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80109fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80109fe:	e841 2300 	strex	r3, r2, [r1]
 8010a02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d1e5      	bne.n	80109d6 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010a0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010a0c:	2220      	movs	r2, #32
 8010a0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010a12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010a14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a16:	2b01      	cmp	r3, #1
 8010a18:	d118      	bne.n	8010a4c <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010a1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a20:	693b      	ldr	r3, [r7, #16]
 8010a22:	e853 3f00 	ldrex	r3, [r3]
 8010a26:	60fb      	str	r3, [r7, #12]
   return(result);
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	f023 0310 	bic.w	r3, r3, #16
 8010a2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010a30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	461a      	mov	r2, r3
 8010a36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010a38:	61fb      	str	r3, [r7, #28]
 8010a3a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a3c:	69b9      	ldr	r1, [r7, #24]
 8010a3e:	69fa      	ldr	r2, [r7, #28]
 8010a40:	e841 2300 	strex	r3, r2, [r1]
 8010a44:	617b      	str	r3, [r7, #20]
   return(result);
 8010a46:	697b      	ldr	r3, [r7, #20]
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d1e6      	bne.n	8010a1a <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010a4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010a4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a50:	2b01      	cmp	r3, #1
 8010a52:	d107      	bne.n	8010a64 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010a54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010a56:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010a5a:	4619      	mov	r1, r3
 8010a5c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8010a5e:	f7fe fefd 	bl	800f85c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010a62:	e002      	b.n	8010a6a <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 8010a64:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8010a66:	f7fe fedb 	bl	800f820 <HAL_UART_RxCpltCallback>
}
 8010a6a:	bf00      	nop
 8010a6c:	3770      	adds	r7, #112	; 0x70
 8010a6e:	46bd      	mov	sp, r7
 8010a70:	bd80      	pop	{r7, pc}

08010a72 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010a72:	b580      	push	{r7, lr}
 8010a74:	b084      	sub	sp, #16
 8010a76:	af00      	add	r7, sp, #0
 8010a78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a7e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a84:	2b01      	cmp	r3, #1
 8010a86:	d109      	bne.n	8010a9c <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010a8e:	085b      	lsrs	r3, r3, #1
 8010a90:	b29b      	uxth	r3, r3
 8010a92:	4619      	mov	r1, r3
 8010a94:	68f8      	ldr	r0, [r7, #12]
 8010a96:	f7fe fee1 	bl	800f85c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010a9a:	e002      	b.n	8010aa2 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8010a9c:	68f8      	ldr	r0, [r7, #12]
 8010a9e:	f7fe fec9 	bl	800f834 <HAL_UART_RxHalfCpltCallback>
}
 8010aa2:	bf00      	nop
 8010aa4:	3710      	adds	r7, #16
 8010aa6:	46bd      	mov	sp, r7
 8010aa8:	bd80      	pop	{r7, pc}

08010aaa <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010aaa:	b580      	push	{r7, lr}
 8010aac:	b086      	sub	sp, #24
 8010aae:	af00      	add	r7, sp, #0
 8010ab0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ab6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8010ab8:	697b      	ldr	r3, [r7, #20]
 8010aba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010abe:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8010ac0:	697b      	ldr	r3, [r7, #20]
 8010ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010ac6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010ac8:	697b      	ldr	r3, [r7, #20]
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	689b      	ldr	r3, [r3, #8]
 8010ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010ad2:	2b80      	cmp	r3, #128	; 0x80
 8010ad4:	d109      	bne.n	8010aea <UART_DMAError+0x40>
 8010ad6:	693b      	ldr	r3, [r7, #16]
 8010ad8:	2b21      	cmp	r3, #33	; 0x21
 8010ada:	d106      	bne.n	8010aea <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8010adc:	697b      	ldr	r3, [r7, #20]
 8010ade:	2200      	movs	r2, #0
 8010ae0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8010ae4:	6978      	ldr	r0, [r7, #20]
 8010ae6:	f7ff fe8b 	bl	8010800 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8010aea:	697b      	ldr	r3, [r7, #20]
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	689b      	ldr	r3, [r3, #8]
 8010af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010af4:	2b40      	cmp	r3, #64	; 0x40
 8010af6:	d109      	bne.n	8010b0c <UART_DMAError+0x62>
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	2b22      	cmp	r3, #34	; 0x22
 8010afc:	d106      	bne.n	8010b0c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8010afe:	697b      	ldr	r3, [r7, #20]
 8010b00:	2200      	movs	r2, #0
 8010b02:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8010b06:	6978      	ldr	r0, [r7, #20]
 8010b08:	f7ff febc 	bl	8010884 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010b0c:	697b      	ldr	r3, [r7, #20]
 8010b0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010b12:	f043 0210 	orr.w	r2, r3, #16
 8010b16:	697b      	ldr	r3, [r7, #20]
 8010b18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010b1c:	6978      	ldr	r0, [r7, #20]
 8010b1e:	f7fe fe93 	bl	800f848 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010b22:	bf00      	nop
 8010b24:	3718      	adds	r7, #24
 8010b26:	46bd      	mov	sp, r7
 8010b28:	bd80      	pop	{r7, pc}

08010b2a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010b2a:	b580      	push	{r7, lr}
 8010b2c:	b084      	sub	sp, #16
 8010b2e:	af00      	add	r7, sp, #0
 8010b30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b36:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	2200      	movs	r2, #0
 8010b3c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	2200      	movs	r2, #0
 8010b44:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010b48:	68f8      	ldr	r0, [r7, #12]
 8010b4a:	f7fe fe7d 	bl	800f848 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010b4e:	bf00      	nop
 8010b50:	3710      	adds	r7, #16
 8010b52:	46bd      	mov	sp, r7
 8010b54:	bd80      	pop	{r7, pc}

08010b56 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010b56:	b580      	push	{r7, lr}
 8010b58:	b088      	sub	sp, #32
 8010b5a:	af00      	add	r7, sp, #0
 8010b5c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	e853 3f00 	ldrex	r3, [r3]
 8010b6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8010b6c:	68bb      	ldr	r3, [r7, #8]
 8010b6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010b72:	61fb      	str	r3, [r7, #28]
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	461a      	mov	r2, r3
 8010b7a:	69fb      	ldr	r3, [r7, #28]
 8010b7c:	61bb      	str	r3, [r7, #24]
 8010b7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b80:	6979      	ldr	r1, [r7, #20]
 8010b82:	69ba      	ldr	r2, [r7, #24]
 8010b84:	e841 2300 	strex	r3, r2, [r1]
 8010b88:	613b      	str	r3, [r7, #16]
   return(result);
 8010b8a:	693b      	ldr	r3, [r7, #16]
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d1e6      	bne.n	8010b5e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	2220      	movs	r2, #32
 8010b94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	2200      	movs	r2, #0
 8010b9c:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010b9e:	6878      	ldr	r0, [r7, #4]
 8010ba0:	f7fe fe34 	bl	800f80c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010ba4:	bf00      	nop
 8010ba6:	3720      	adds	r7, #32
 8010ba8:	46bd      	mov	sp, r7
 8010baa:	bd80      	pop	{r7, pc}

08010bac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010bac:	b480      	push	{r7}
 8010bae:	b083      	sub	sp, #12
 8010bb0:	af00      	add	r7, sp, #0
 8010bb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010bb4:	bf00      	nop
 8010bb6:	370c      	adds	r7, #12
 8010bb8:	46bd      	mov	sp, r7
 8010bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bbe:	4770      	bx	lr

08010bc0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010bc0:	b480      	push	{r7}
 8010bc2:	b083      	sub	sp, #12
 8010bc4:	af00      	add	r7, sp, #0
 8010bc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010bc8:	bf00      	nop
 8010bca:	370c      	adds	r7, #12
 8010bcc:	46bd      	mov	sp, r7
 8010bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd2:	4770      	bx	lr

08010bd4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010bd4:	b480      	push	{r7}
 8010bd6:	b083      	sub	sp, #12
 8010bd8:	af00      	add	r7, sp, #0
 8010bda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010bdc:	bf00      	nop
 8010bde:	370c      	adds	r7, #12
 8010be0:	46bd      	mov	sp, r7
 8010be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be6:	4770      	bx	lr

08010be8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010be8:	b480      	push	{r7}
 8010bea:	b085      	sub	sp, #20
 8010bec:	af00      	add	r7, sp, #0
 8010bee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010bf6:	2b01      	cmp	r3, #1
 8010bf8:	d101      	bne.n	8010bfe <HAL_UARTEx_DisableFifoMode+0x16>
 8010bfa:	2302      	movs	r3, #2
 8010bfc:	e027      	b.n	8010c4e <HAL_UARTEx_DisableFifoMode+0x66>
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	2201      	movs	r2, #1
 8010c02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	2224      	movs	r2, #36	; 0x24
 8010c0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	681a      	ldr	r2, [r3, #0]
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	f022 0201 	bic.w	r2, r2, #1
 8010c24:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8010c2c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	2200      	movs	r2, #0
 8010c32:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	68fa      	ldr	r2, [r7, #12]
 8010c3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	2220      	movs	r2, #32
 8010c40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	2200      	movs	r2, #0
 8010c48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010c4c:	2300      	movs	r3, #0
}
 8010c4e:	4618      	mov	r0, r3
 8010c50:	3714      	adds	r7, #20
 8010c52:	46bd      	mov	sp, r7
 8010c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c58:	4770      	bx	lr

08010c5a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010c5a:	b580      	push	{r7, lr}
 8010c5c:	b084      	sub	sp, #16
 8010c5e:	af00      	add	r7, sp, #0
 8010c60:	6078      	str	r0, [r7, #4]
 8010c62:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010c6a:	2b01      	cmp	r3, #1
 8010c6c:	d101      	bne.n	8010c72 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010c6e:	2302      	movs	r3, #2
 8010c70:	e02d      	b.n	8010cce <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	2201      	movs	r2, #1
 8010c76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	2224      	movs	r2, #36	; 0x24
 8010c7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	681a      	ldr	r2, [r3, #0]
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	f022 0201 	bic.w	r2, r2, #1
 8010c98:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	689b      	ldr	r3, [r3, #8]
 8010ca0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	683a      	ldr	r2, [r7, #0]
 8010caa:	430a      	orrs	r2, r1
 8010cac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010cae:	6878      	ldr	r0, [r7, #4]
 8010cb0:	f000 f850 	bl	8010d54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	68fa      	ldr	r2, [r7, #12]
 8010cba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	2220      	movs	r2, #32
 8010cc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	2200      	movs	r2, #0
 8010cc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010ccc:	2300      	movs	r3, #0
}
 8010cce:	4618      	mov	r0, r3
 8010cd0:	3710      	adds	r7, #16
 8010cd2:	46bd      	mov	sp, r7
 8010cd4:	bd80      	pop	{r7, pc}

08010cd6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010cd6:	b580      	push	{r7, lr}
 8010cd8:	b084      	sub	sp, #16
 8010cda:	af00      	add	r7, sp, #0
 8010cdc:	6078      	str	r0, [r7, #4]
 8010cde:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010ce6:	2b01      	cmp	r3, #1
 8010ce8:	d101      	bne.n	8010cee <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010cea:	2302      	movs	r3, #2
 8010cec:	e02d      	b.n	8010d4a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	2201      	movs	r2, #1
 8010cf2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	2224      	movs	r2, #36	; 0x24
 8010cfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	681a      	ldr	r2, [r3, #0]
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	f022 0201 	bic.w	r2, r2, #1
 8010d14:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	689b      	ldr	r3, [r3, #8]
 8010d1c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	683a      	ldr	r2, [r7, #0]
 8010d26:	430a      	orrs	r2, r1
 8010d28:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010d2a:	6878      	ldr	r0, [r7, #4]
 8010d2c:	f000 f812 	bl	8010d54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	68fa      	ldr	r2, [r7, #12]
 8010d36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	2220      	movs	r2, #32
 8010d3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	2200      	movs	r2, #0
 8010d44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010d48:	2300      	movs	r3, #0
}
 8010d4a:	4618      	mov	r0, r3
 8010d4c:	3710      	adds	r7, #16
 8010d4e:	46bd      	mov	sp, r7
 8010d50:	bd80      	pop	{r7, pc}
	...

08010d54 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010d54:	b480      	push	{r7}
 8010d56:	b085      	sub	sp, #20
 8010d58:	af00      	add	r7, sp, #0
 8010d5a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d108      	bne.n	8010d76 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	2201      	movs	r2, #1
 8010d68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	2201      	movs	r2, #1
 8010d70:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010d74:	e031      	b.n	8010dda <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010d76:	2310      	movs	r3, #16
 8010d78:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010d7a:	2310      	movs	r3, #16
 8010d7c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	689b      	ldr	r3, [r3, #8]
 8010d84:	0e5b      	lsrs	r3, r3, #25
 8010d86:	b2db      	uxtb	r3, r3
 8010d88:	f003 0307 	and.w	r3, r3, #7
 8010d8c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	689b      	ldr	r3, [r3, #8]
 8010d94:	0f5b      	lsrs	r3, r3, #29
 8010d96:	b2db      	uxtb	r3, r3
 8010d98:	f003 0307 	and.w	r3, r3, #7
 8010d9c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010d9e:	7bbb      	ldrb	r3, [r7, #14]
 8010da0:	7b3a      	ldrb	r2, [r7, #12]
 8010da2:	4911      	ldr	r1, [pc, #68]	; (8010de8 <UARTEx_SetNbDataToProcess+0x94>)
 8010da4:	5c8a      	ldrb	r2, [r1, r2]
 8010da6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010daa:	7b3a      	ldrb	r2, [r7, #12]
 8010dac:	490f      	ldr	r1, [pc, #60]	; (8010dec <UARTEx_SetNbDataToProcess+0x98>)
 8010dae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010db0:	fb93 f3f2 	sdiv	r3, r3, r2
 8010db4:	b29a      	uxth	r2, r3
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010dbc:	7bfb      	ldrb	r3, [r7, #15]
 8010dbe:	7b7a      	ldrb	r2, [r7, #13]
 8010dc0:	4909      	ldr	r1, [pc, #36]	; (8010de8 <UARTEx_SetNbDataToProcess+0x94>)
 8010dc2:	5c8a      	ldrb	r2, [r1, r2]
 8010dc4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010dc8:	7b7a      	ldrb	r2, [r7, #13]
 8010dca:	4908      	ldr	r1, [pc, #32]	; (8010dec <UARTEx_SetNbDataToProcess+0x98>)
 8010dcc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010dce:	fb93 f3f2 	sdiv	r3, r3, r2
 8010dd2:	b29a      	uxth	r2, r3
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8010dda:	bf00      	nop
 8010ddc:	3714      	adds	r7, #20
 8010dde:	46bd      	mov	sp, r7
 8010de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010de4:	4770      	bx	lr
 8010de6:	bf00      	nop
 8010de8:	08014614 	.word	0x08014614
 8010dec:	0801461c 	.word	0x0801461c

08010df0 <_ZdlPvj>:
 8010df0:	f000 b8a9 	b.w	8010f46 <_ZdlPv>

08010df4 <_Znwj>:
 8010df4:	2801      	cmp	r0, #1
 8010df6:	bf38      	it	cc
 8010df8:	2001      	movcc	r0, #1
 8010dfa:	b510      	push	{r4, lr}
 8010dfc:	4604      	mov	r4, r0
 8010dfe:	4620      	mov	r0, r4
 8010e00:	f000 ff22 	bl	8011c48 <malloc>
 8010e04:	b930      	cbnz	r0, 8010e14 <_Znwj+0x20>
 8010e06:	f000 f8a1 	bl	8010f4c <_ZSt15get_new_handlerv>
 8010e0a:	b908      	cbnz	r0, 8010e10 <_Znwj+0x1c>
 8010e0c:	f000 feea 	bl	8011be4 <abort>
 8010e10:	4780      	blx	r0
 8010e12:	e7f4      	b.n	8010dfe <_Znwj+0xa>
 8010e14:	bd10      	pop	{r4, pc}

08010e16 <_ZSt17__throw_bad_allocv>:
 8010e16:	b508      	push	{r3, lr}
 8010e18:	f000 fee4 	bl	8011be4 <abort>

08010e1c <_ZSt20__throw_length_errorPKc>:
 8010e1c:	b508      	push	{r3, lr}
 8010e1e:	f000 fee1 	bl	8011be4 <abort>

08010e22 <_ZSt25__throw_bad_function_callv>:
 8010e22:	b508      	push	{r3, lr}
 8010e24:	f000 fede 	bl	8011be4 <abort>

08010e28 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj>:
 8010e28:	290d      	cmp	r1, #13
 8010e2a:	b570      	push	{r4, r5, r6, lr}
 8010e2c:	4602      	mov	r2, r0
 8010e2e:	d822      	bhi.n	8010e76 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x4e>
 8010e30:	2900      	cmp	r1, #0
 8010e32:	d03c      	beq.n	8010eae <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x86>
 8010e34:	4b1f      	ldr	r3, [pc, #124]	; (8010eb4 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x8c>)
 8010e36:	ed92 6a00 	vldr	s12, [r2]
 8010e3a:	5c58      	ldrb	r0, [r3, r1]
 8010e3c:	ee07 0a90 	vmov	s15, r0
 8010e40:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8010e44:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010e48:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010e4c:	febb 7b47 	vrintm.f64	d7, d7
 8010e50:	eebc 7bc7 	vcvt.u32.f64	s14, d7
 8010e54:	ed82 7a01 	vstr	s14, [r2, #4]
 8010e58:	bd70      	pop	{r4, r5, r6, pc}
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	dd0e      	ble.n	8010e7c <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x54>
 8010e5e:	4618      	mov	r0, r3
 8010e60:	1043      	asrs	r3, r0, #1
 8010e62:	eb04 0583 	add.w	r5, r4, r3, lsl #2
 8010e66:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
 8010e6a:	428e      	cmp	r6, r1
 8010e6c:	d2f5      	bcs.n	8010e5a <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x32>
 8010e6e:	1ac3      	subs	r3, r0, r3
 8010e70:	1d2c      	adds	r4, r5, #4
 8010e72:	3b01      	subs	r3, #1
 8010e74:	e7f1      	b.n	8010e5a <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x32>
 8010e76:	4c10      	ldr	r4, [pc, #64]	; (8010eb8 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x90>)
 8010e78:	20f9      	movs	r0, #249	; 0xf9
 8010e7a:	e7f1      	b.n	8010e60 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x38>
 8010e7c:	4b0f      	ldr	r3, [pc, #60]	; (8010ebc <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x94>)
 8010e7e:	6820      	ldr	r0, [r4, #0]
 8010e80:	429c      	cmp	r4, r3
 8010e82:	d011      	beq.n	8010ea8 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x80>
 8010e84:	ed92 7a00 	vldr	s14, [r2]
 8010e88:	ee07 0a90 	vmov	s15, r0
 8010e8c:	eeb7 6ac7 	vcvt.f64.f32	d6, s14
 8010e90:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8010e94:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010e98:	febb 7b47 	vrintm.f64	d7, d7
 8010e9c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8010ea0:	ee17 3a90 	vmov	r3, s15
 8010ea4:	6053      	str	r3, [r2, #4]
 8010ea6:	e7d7      	b.n	8010e58 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x30>
 8010ea8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010eac:	e7fa      	b.n	8010ea4 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x7c>
 8010eae:	2001      	movs	r0, #1
 8010eb0:	e7d2      	b.n	8010e58 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x30>
 8010eb2:	bf00      	nop
 8010eb4:	08014a28 	.word	0x08014a28
 8010eb8:	0801463c 	.word	0x0801463c
 8010ebc:	08014a20 	.word	0x08014a20

08010ec0 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj>:
 8010ec0:	b510      	push	{r4, lr}
 8010ec2:	4604      	mov	r4, r0
 8010ec4:	4608      	mov	r0, r1
 8010ec6:	9902      	ldr	r1, [sp, #8]
 8010ec8:	440b      	add	r3, r1
 8010eca:	6841      	ldr	r1, [r0, #4]
 8010ecc:	428b      	cmp	r3, r1
 8010ece:	d936      	bls.n	8010f3e <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0x7e>
 8010ed0:	2900      	cmp	r1, #0
 8010ed2:	bf14      	ite	ne
 8010ed4:	2100      	movne	r1, #0
 8010ed6:	210b      	moveq	r1, #11
 8010ed8:	428b      	cmp	r3, r1
 8010eda:	bf38      	it	cc
 8010edc:	460b      	movcc	r3, r1
 8010ede:	ee06 3a90 	vmov	s13, r3
 8010ee2:	ed90 7a00 	vldr	s14, [r0]
 8010ee6:	eeb8 5b66 	vcvt.f64.u32	d5, s13
 8010eea:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8010eee:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8010ef2:	ee05 2a90 	vmov	s11, r2
 8010ef6:	eeb8 5b65 	vcvt.f64.u32	d5, s11
 8010efa:	eeb4 5bc6 	vcmpe.f64	d5, d6
 8010efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f02:	d814      	bhi.n	8010f2e <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0x6e>
 8010f04:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8010f08:	febb 6b46 	vrintm.f64	d6, d6
 8010f0c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8010f10:	eefc 7bc6 	vcvt.u32.f64	s15, d6
 8010f14:	0052      	lsls	r2, r2, #1
 8010f16:	ee17 1a90 	vmov	r1, s15
 8010f1a:	4291      	cmp	r1, r2
 8010f1c:	bf38      	it	cc
 8010f1e:	4611      	movcc	r1, r2
 8010f20:	f7ff ff82 	bl	8010e28 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj>
 8010f24:	2301      	movs	r3, #1
 8010f26:	7023      	strb	r3, [r4, #0]
 8010f28:	6060      	str	r0, [r4, #4]
 8010f2a:	4620      	mov	r0, r4
 8010f2c:	bd10      	pop	{r4, pc}
 8010f2e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010f32:	febb 7b47 	vrintm.f64	d7, d7
 8010f36:	eebc 7bc7 	vcvt.u32.f64	s14, d7
 8010f3a:	ed80 7a01 	vstr	s14, [r0, #4]
 8010f3e:	2300      	movs	r3, #0
 8010f40:	e9c4 3300 	strd	r3, r3, [r4]
 8010f44:	e7f1      	b.n	8010f2a <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0x6a>

08010f46 <_ZdlPv>:
 8010f46:	f000 be87 	b.w	8011c58 <free>
	...

08010f4c <_ZSt15get_new_handlerv>:
 8010f4c:	4b02      	ldr	r3, [pc, #8]	; (8010f58 <_ZSt15get_new_handlerv+0xc>)
 8010f4e:	6818      	ldr	r0, [r3, #0]
 8010f50:	f3bf 8f5b 	dmb	ish
 8010f54:	4770      	bx	lr
 8010f56:	bf00      	nop
 8010f58:	240009e8 	.word	0x240009e8
 8010f5c:	00000000 	.word	0x00000000

08010f60 <cos>:
 8010f60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010f62:	eeb0 7b40 	vmov.f64	d7, d0
 8010f66:	ee17 3a90 	vmov	r3, s15
 8010f6a:	4a21      	ldr	r2, [pc, #132]	; (8010ff0 <cos+0x90>)
 8010f6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010f70:	4293      	cmp	r3, r2
 8010f72:	dc06      	bgt.n	8010f82 <cos+0x22>
 8010f74:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8010fe8 <cos+0x88>
 8010f78:	b005      	add	sp, #20
 8010f7a:	f85d eb04 	ldr.w	lr, [sp], #4
 8010f7e:	f000 b9cb 	b.w	8011318 <__kernel_cos>
 8010f82:	4a1c      	ldr	r2, [pc, #112]	; (8010ff4 <cos+0x94>)
 8010f84:	4293      	cmp	r3, r2
 8010f86:	dd04      	ble.n	8010f92 <cos+0x32>
 8010f88:	ee30 0b40 	vsub.f64	d0, d0, d0
 8010f8c:	b005      	add	sp, #20
 8010f8e:	f85d fb04 	ldr.w	pc, [sp], #4
 8010f92:	4668      	mov	r0, sp
 8010f94:	f000 f87c 	bl	8011090 <__ieee754_rem_pio2>
 8010f98:	f000 0003 	and.w	r0, r0, #3
 8010f9c:	2801      	cmp	r0, #1
 8010f9e:	d009      	beq.n	8010fb4 <cos+0x54>
 8010fa0:	2802      	cmp	r0, #2
 8010fa2:	d010      	beq.n	8010fc6 <cos+0x66>
 8010fa4:	b9b0      	cbnz	r0, 8010fd4 <cos+0x74>
 8010fa6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010faa:	ed9d 0b00 	vldr	d0, [sp]
 8010fae:	f000 f9b3 	bl	8011318 <__kernel_cos>
 8010fb2:	e7eb      	b.n	8010f8c <cos+0x2c>
 8010fb4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010fb8:	ed9d 0b00 	vldr	d0, [sp]
 8010fbc:	f000 fcb0 	bl	8011920 <__kernel_sin>
 8010fc0:	eeb1 0b40 	vneg.f64	d0, d0
 8010fc4:	e7e2      	b.n	8010f8c <cos+0x2c>
 8010fc6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010fca:	ed9d 0b00 	vldr	d0, [sp]
 8010fce:	f000 f9a3 	bl	8011318 <__kernel_cos>
 8010fd2:	e7f5      	b.n	8010fc0 <cos+0x60>
 8010fd4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010fd8:	ed9d 0b00 	vldr	d0, [sp]
 8010fdc:	2001      	movs	r0, #1
 8010fde:	f000 fc9f 	bl	8011920 <__kernel_sin>
 8010fe2:	e7d3      	b.n	8010f8c <cos+0x2c>
 8010fe4:	f3af 8000 	nop.w
	...
 8010ff0:	3fe921fb 	.word	0x3fe921fb
 8010ff4:	7fefffff 	.word	0x7fefffff

08010ff8 <sin>:
 8010ff8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010ffa:	eeb0 7b40 	vmov.f64	d7, d0
 8010ffe:	ee17 3a90 	vmov	r3, s15
 8011002:	4a21      	ldr	r2, [pc, #132]	; (8011088 <sin+0x90>)
 8011004:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011008:	4293      	cmp	r3, r2
 801100a:	dc07      	bgt.n	801101c <sin+0x24>
 801100c:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8011080 <sin+0x88>
 8011010:	2000      	movs	r0, #0
 8011012:	b005      	add	sp, #20
 8011014:	f85d eb04 	ldr.w	lr, [sp], #4
 8011018:	f000 bc82 	b.w	8011920 <__kernel_sin>
 801101c:	4a1b      	ldr	r2, [pc, #108]	; (801108c <sin+0x94>)
 801101e:	4293      	cmp	r3, r2
 8011020:	dd04      	ble.n	801102c <sin+0x34>
 8011022:	ee30 0b40 	vsub.f64	d0, d0, d0
 8011026:	b005      	add	sp, #20
 8011028:	f85d fb04 	ldr.w	pc, [sp], #4
 801102c:	4668      	mov	r0, sp
 801102e:	f000 f82f 	bl	8011090 <__ieee754_rem_pio2>
 8011032:	f000 0003 	and.w	r0, r0, #3
 8011036:	2801      	cmp	r0, #1
 8011038:	d00a      	beq.n	8011050 <sin+0x58>
 801103a:	2802      	cmp	r0, #2
 801103c:	d00f      	beq.n	801105e <sin+0x66>
 801103e:	b9c0      	cbnz	r0, 8011072 <sin+0x7a>
 8011040:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011044:	ed9d 0b00 	vldr	d0, [sp]
 8011048:	2001      	movs	r0, #1
 801104a:	f000 fc69 	bl	8011920 <__kernel_sin>
 801104e:	e7ea      	b.n	8011026 <sin+0x2e>
 8011050:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011054:	ed9d 0b00 	vldr	d0, [sp]
 8011058:	f000 f95e 	bl	8011318 <__kernel_cos>
 801105c:	e7e3      	b.n	8011026 <sin+0x2e>
 801105e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011062:	ed9d 0b00 	vldr	d0, [sp]
 8011066:	2001      	movs	r0, #1
 8011068:	f000 fc5a 	bl	8011920 <__kernel_sin>
 801106c:	eeb1 0b40 	vneg.f64	d0, d0
 8011070:	e7d9      	b.n	8011026 <sin+0x2e>
 8011072:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011076:	ed9d 0b00 	vldr	d0, [sp]
 801107a:	f000 f94d 	bl	8011318 <__kernel_cos>
 801107e:	e7f5      	b.n	801106c <sin+0x74>
	...
 8011088:	3fe921fb 	.word	0x3fe921fb
 801108c:	7fefffff 	.word	0x7fefffff

08011090 <__ieee754_rem_pio2>:
 8011090:	b570      	push	{r4, r5, r6, lr}
 8011092:	eeb0 7b40 	vmov.f64	d7, d0
 8011096:	ee17 5a90 	vmov	r5, s15
 801109a:	4b99      	ldr	r3, [pc, #612]	; (8011300 <__ieee754_rem_pio2+0x270>)
 801109c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80110a0:	429e      	cmp	r6, r3
 80110a2:	b088      	sub	sp, #32
 80110a4:	4604      	mov	r4, r0
 80110a6:	dc07      	bgt.n	80110b8 <__ieee754_rem_pio2+0x28>
 80110a8:	2200      	movs	r2, #0
 80110aa:	2300      	movs	r3, #0
 80110ac:	ed84 0b00 	vstr	d0, [r4]
 80110b0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80110b4:	2000      	movs	r0, #0
 80110b6:	e01b      	b.n	80110f0 <__ieee754_rem_pio2+0x60>
 80110b8:	4b92      	ldr	r3, [pc, #584]	; (8011304 <__ieee754_rem_pio2+0x274>)
 80110ba:	429e      	cmp	r6, r3
 80110bc:	dc3b      	bgt.n	8011136 <__ieee754_rem_pio2+0xa6>
 80110be:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 80110c2:	2d00      	cmp	r5, #0
 80110c4:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 80112c0 <__ieee754_rem_pio2+0x230>
 80110c8:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 80110cc:	dd19      	ble.n	8011102 <__ieee754_rem_pio2+0x72>
 80110ce:	ee30 7b46 	vsub.f64	d7, d0, d6
 80110d2:	429e      	cmp	r6, r3
 80110d4:	d00e      	beq.n	80110f4 <__ieee754_rem_pio2+0x64>
 80110d6:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 80112c8 <__ieee754_rem_pio2+0x238>
 80110da:	ee37 5b46 	vsub.f64	d5, d7, d6
 80110de:	ee37 7b45 	vsub.f64	d7, d7, d5
 80110e2:	ed84 5b00 	vstr	d5, [r4]
 80110e6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80110ea:	ed84 7b02 	vstr	d7, [r4, #8]
 80110ee:	2001      	movs	r0, #1
 80110f0:	b008      	add	sp, #32
 80110f2:	bd70      	pop	{r4, r5, r6, pc}
 80110f4:	ed9f 6b76 	vldr	d6, [pc, #472]	; 80112d0 <__ieee754_rem_pio2+0x240>
 80110f8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80110fc:	ed9f 6b76 	vldr	d6, [pc, #472]	; 80112d8 <__ieee754_rem_pio2+0x248>
 8011100:	e7eb      	b.n	80110da <__ieee754_rem_pio2+0x4a>
 8011102:	429e      	cmp	r6, r3
 8011104:	ee30 7b06 	vadd.f64	d7, d0, d6
 8011108:	d00e      	beq.n	8011128 <__ieee754_rem_pio2+0x98>
 801110a:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 80112c8 <__ieee754_rem_pio2+0x238>
 801110e:	ee37 5b06 	vadd.f64	d5, d7, d6
 8011112:	ee37 7b45 	vsub.f64	d7, d7, d5
 8011116:	ed84 5b00 	vstr	d5, [r4]
 801111a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801111e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011122:	ed84 7b02 	vstr	d7, [r4, #8]
 8011126:	e7e3      	b.n	80110f0 <__ieee754_rem_pio2+0x60>
 8011128:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80112d0 <__ieee754_rem_pio2+0x240>
 801112c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011130:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80112d8 <__ieee754_rem_pio2+0x248>
 8011134:	e7eb      	b.n	801110e <__ieee754_rem_pio2+0x7e>
 8011136:	4b74      	ldr	r3, [pc, #464]	; (8011308 <__ieee754_rem_pio2+0x278>)
 8011138:	429e      	cmp	r6, r3
 801113a:	dc70      	bgt.n	801121e <__ieee754_rem_pio2+0x18e>
 801113c:	f000 fc48 	bl	80119d0 <fabs>
 8011140:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8011144:	ed9f 6b66 	vldr	d6, [pc, #408]	; 80112e0 <__ieee754_rem_pio2+0x250>
 8011148:	eea0 7b06 	vfma.f64	d7, d0, d6
 801114c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8011150:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8011154:	ee17 0a90 	vmov	r0, s15
 8011158:	eeb1 4b45 	vneg.f64	d4, d5
 801115c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 80112c0 <__ieee754_rem_pio2+0x230>
 8011160:	eea5 0b47 	vfms.f64	d0, d5, d7
 8011164:	ed9f 7b58 	vldr	d7, [pc, #352]	; 80112c8 <__ieee754_rem_pio2+0x238>
 8011168:	281f      	cmp	r0, #31
 801116a:	ee25 7b07 	vmul.f64	d7, d5, d7
 801116e:	ee30 6b47 	vsub.f64	d6, d0, d7
 8011172:	dc08      	bgt.n	8011186 <__ieee754_rem_pio2+0xf6>
 8011174:	4b65      	ldr	r3, [pc, #404]	; (801130c <__ieee754_rem_pio2+0x27c>)
 8011176:	1e42      	subs	r2, r0, #1
 8011178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801117c:	42b3      	cmp	r3, r6
 801117e:	d002      	beq.n	8011186 <__ieee754_rem_pio2+0xf6>
 8011180:	ed84 6b00 	vstr	d6, [r4]
 8011184:	e026      	b.n	80111d4 <__ieee754_rem_pio2+0x144>
 8011186:	ee16 3a90 	vmov	r3, s13
 801118a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801118e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8011192:	2b10      	cmp	r3, #16
 8011194:	ea4f 5226 	mov.w	r2, r6, asr #20
 8011198:	ddf2      	ble.n	8011180 <__ieee754_rem_pio2+0xf0>
 801119a:	eeb0 6b40 	vmov.f64	d6, d0
 801119e:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 80112d0 <__ieee754_rem_pio2+0x240>
 80111a2:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 80112d8 <__ieee754_rem_pio2+0x248>
 80111a6:	eea4 6b07 	vfma.f64	d6, d4, d7
 80111aa:	ee30 0b46 	vsub.f64	d0, d0, d6
 80111ae:	eea4 0b07 	vfma.f64	d0, d4, d7
 80111b2:	eeb0 7b40 	vmov.f64	d7, d0
 80111b6:	ee95 7b03 	vfnms.f64	d7, d5, d3
 80111ba:	ee36 3b47 	vsub.f64	d3, d6, d7
 80111be:	ee13 3a90 	vmov	r3, s7
 80111c2:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80111c6:	1ad3      	subs	r3, r2, r3
 80111c8:	2b31      	cmp	r3, #49	; 0x31
 80111ca:	dc17      	bgt.n	80111fc <__ieee754_rem_pio2+0x16c>
 80111cc:	eeb0 0b46 	vmov.f64	d0, d6
 80111d0:	ed84 3b00 	vstr	d3, [r4]
 80111d4:	ed94 6b00 	vldr	d6, [r4]
 80111d8:	2d00      	cmp	r5, #0
 80111da:	ee30 0b46 	vsub.f64	d0, d0, d6
 80111de:	ee30 0b47 	vsub.f64	d0, d0, d7
 80111e2:	ed84 0b02 	vstr	d0, [r4, #8]
 80111e6:	da83      	bge.n	80110f0 <__ieee754_rem_pio2+0x60>
 80111e8:	eeb1 6b46 	vneg.f64	d6, d6
 80111ec:	eeb1 0b40 	vneg.f64	d0, d0
 80111f0:	ed84 6b00 	vstr	d6, [r4]
 80111f4:	ed84 0b02 	vstr	d0, [r4, #8]
 80111f8:	4240      	negs	r0, r0
 80111fa:	e779      	b.n	80110f0 <__ieee754_rem_pio2+0x60>
 80111fc:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 80112e8 <__ieee754_rem_pio2+0x258>
 8011200:	eeb0 0b46 	vmov.f64	d0, d6
 8011204:	eea4 0b03 	vfma.f64	d0, d4, d3
 8011208:	ee36 7b40 	vsub.f64	d7, d6, d0
 801120c:	ed9f 6b38 	vldr	d6, [pc, #224]	; 80112f0 <__ieee754_rem_pio2+0x260>
 8011210:	eea4 7b03 	vfma.f64	d7, d4, d3
 8011214:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8011218:	ee30 6b47 	vsub.f64	d6, d0, d7
 801121c:	e7b0      	b.n	8011180 <__ieee754_rem_pio2+0xf0>
 801121e:	4b3c      	ldr	r3, [pc, #240]	; (8011310 <__ieee754_rem_pio2+0x280>)
 8011220:	429e      	cmp	r6, r3
 8011222:	dd06      	ble.n	8011232 <__ieee754_rem_pio2+0x1a2>
 8011224:	ee30 7b40 	vsub.f64	d7, d0, d0
 8011228:	ed80 7b02 	vstr	d7, [r0, #8]
 801122c:	ed80 7b00 	vstr	d7, [r0]
 8011230:	e740      	b.n	80110b4 <__ieee754_rem_pio2+0x24>
 8011232:	1532      	asrs	r2, r6, #20
 8011234:	ee10 0a10 	vmov	r0, s0
 8011238:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 801123c:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8011240:	ec41 0b17 	vmov	d7, r0, r1
 8011244:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8011248:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 80112f8 <__ieee754_rem_pio2+0x268>
 801124c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8011250:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011254:	ed8d 6b02 	vstr	d6, [sp, #8]
 8011258:	ee27 7b05 	vmul.f64	d7, d7, d5
 801125c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8011260:	a902      	add	r1, sp, #8
 8011262:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8011266:	ee37 7b46 	vsub.f64	d7, d7, d6
 801126a:	ed8d 6b04 	vstr	d6, [sp, #16]
 801126e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011272:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011276:	2603      	movs	r6, #3
 8011278:	4608      	mov	r0, r1
 801127a:	ed91 7b04 	vldr	d7, [r1, #16]
 801127e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011286:	4633      	mov	r3, r6
 8011288:	f1a1 0108 	sub.w	r1, r1, #8
 801128c:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 8011290:	d0f3      	beq.n	801127a <__ieee754_rem_pio2+0x1ea>
 8011292:	4920      	ldr	r1, [pc, #128]	; (8011314 <__ieee754_rem_pio2+0x284>)
 8011294:	9101      	str	r1, [sp, #4]
 8011296:	2102      	movs	r1, #2
 8011298:	9100      	str	r1, [sp, #0]
 801129a:	4621      	mov	r1, r4
 801129c:	f000 f8a8 	bl	80113f0 <__kernel_rem_pio2>
 80112a0:	2d00      	cmp	r5, #0
 80112a2:	f6bf af25 	bge.w	80110f0 <__ieee754_rem_pio2+0x60>
 80112a6:	ed94 7b00 	vldr	d7, [r4]
 80112aa:	eeb1 7b47 	vneg.f64	d7, d7
 80112ae:	ed84 7b00 	vstr	d7, [r4]
 80112b2:	ed94 7b02 	vldr	d7, [r4, #8]
 80112b6:	eeb1 7b47 	vneg.f64	d7, d7
 80112ba:	ed84 7b02 	vstr	d7, [r4, #8]
 80112be:	e79b      	b.n	80111f8 <__ieee754_rem_pio2+0x168>
 80112c0:	54400000 	.word	0x54400000
 80112c4:	3ff921fb 	.word	0x3ff921fb
 80112c8:	1a626331 	.word	0x1a626331
 80112cc:	3dd0b461 	.word	0x3dd0b461
 80112d0:	1a600000 	.word	0x1a600000
 80112d4:	3dd0b461 	.word	0x3dd0b461
 80112d8:	2e037073 	.word	0x2e037073
 80112dc:	3ba3198a 	.word	0x3ba3198a
 80112e0:	6dc9c883 	.word	0x6dc9c883
 80112e4:	3fe45f30 	.word	0x3fe45f30
 80112e8:	2e000000 	.word	0x2e000000
 80112ec:	3ba3198a 	.word	0x3ba3198a
 80112f0:	252049c1 	.word	0x252049c1
 80112f4:	397b839a 	.word	0x397b839a
 80112f8:	00000000 	.word	0x00000000
 80112fc:	41700000 	.word	0x41700000
 8011300:	3fe921fb 	.word	0x3fe921fb
 8011304:	4002d97b 	.word	0x4002d97b
 8011308:	413921fb 	.word	0x413921fb
 801130c:	08014a38 	.word	0x08014a38
 8011310:	7fefffff 	.word	0x7fefffff
 8011314:	08014ab8 	.word	0x08014ab8

08011318 <__kernel_cos>:
 8011318:	ee10 1a90 	vmov	r1, s1
 801131c:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8011320:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8011324:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8011328:	da05      	bge.n	8011336 <__kernel_cos+0x1e>
 801132a:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801132e:	ee17 3a90 	vmov	r3, s15
 8011332:	2b00      	cmp	r3, #0
 8011334:	d03d      	beq.n	80113b2 <__kernel_cos+0x9a>
 8011336:	ee20 3b00 	vmul.f64	d3, d0, d0
 801133a:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 80113b8 <__kernel_cos+0xa0>
 801133e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80113c0 <__kernel_cos+0xa8>
 8011342:	eea3 6b07 	vfma.f64	d6, d3, d7
 8011346:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80113c8 <__kernel_cos+0xb0>
 801134a:	eea6 7b03 	vfma.f64	d7, d6, d3
 801134e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80113d0 <__kernel_cos+0xb8>
 8011352:	eea7 6b03 	vfma.f64	d6, d7, d3
 8011356:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80113d8 <__kernel_cos+0xc0>
 801135a:	4b23      	ldr	r3, [pc, #140]	; (80113e8 <__kernel_cos+0xd0>)
 801135c:	eea6 7b03 	vfma.f64	d7, d6, d3
 8011360:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 80113e0 <__kernel_cos+0xc8>
 8011364:	4299      	cmp	r1, r3
 8011366:	eea7 6b03 	vfma.f64	d6, d7, d3
 801136a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801136e:	ee26 5b03 	vmul.f64	d5, d6, d3
 8011372:	ee23 7b07 	vmul.f64	d7, d3, d7
 8011376:	ee21 6b40 	vnmul.f64	d6, d1, d0
 801137a:	eea3 6b05 	vfma.f64	d6, d3, d5
 801137e:	dc04      	bgt.n	801138a <__kernel_cos+0x72>
 8011380:	ee37 6b46 	vsub.f64	d6, d7, d6
 8011384:	ee34 0b46 	vsub.f64	d0, d4, d6
 8011388:	4770      	bx	lr
 801138a:	4b18      	ldr	r3, [pc, #96]	; (80113ec <__kernel_cos+0xd4>)
 801138c:	4299      	cmp	r1, r3
 801138e:	dc0d      	bgt.n	80113ac <__kernel_cos+0x94>
 8011390:	2200      	movs	r2, #0
 8011392:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8011396:	ec43 2b15 	vmov	d5, r2, r3
 801139a:	ee34 0b45 	vsub.f64	d0, d4, d5
 801139e:	ee37 7b45 	vsub.f64	d7, d7, d5
 80113a2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80113a6:	ee30 0b47 	vsub.f64	d0, d0, d7
 80113aa:	4770      	bx	lr
 80113ac:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 80113b0:	e7f3      	b.n	801139a <__kernel_cos+0x82>
 80113b2:	eeb0 0b44 	vmov.f64	d0, d4
 80113b6:	4770      	bx	lr
 80113b8:	be8838d4 	.word	0xbe8838d4
 80113bc:	bda8fae9 	.word	0xbda8fae9
 80113c0:	bdb4b1c4 	.word	0xbdb4b1c4
 80113c4:	3e21ee9e 	.word	0x3e21ee9e
 80113c8:	809c52ad 	.word	0x809c52ad
 80113cc:	be927e4f 	.word	0xbe927e4f
 80113d0:	19cb1590 	.word	0x19cb1590
 80113d4:	3efa01a0 	.word	0x3efa01a0
 80113d8:	16c15177 	.word	0x16c15177
 80113dc:	bf56c16c 	.word	0xbf56c16c
 80113e0:	5555554c 	.word	0x5555554c
 80113e4:	3fa55555 	.word	0x3fa55555
 80113e8:	3fd33332 	.word	0x3fd33332
 80113ec:	3fe90000 	.word	0x3fe90000

080113f0 <__kernel_rem_pio2>:
 80113f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113f4:	ed2d 8b06 	vpush	{d8-d10}
 80113f8:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 80113fc:	460f      	mov	r7, r1
 80113fe:	9002      	str	r0, [sp, #8]
 8011400:	49c5      	ldr	r1, [pc, #788]	; (8011718 <__kernel_rem_pio2+0x328>)
 8011402:	98a2      	ldr	r0, [sp, #648]	; 0x288
 8011404:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 8011408:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 801140c:	9301      	str	r3, [sp, #4]
 801140e:	f112 0f14 	cmn.w	r2, #20
 8011412:	bfa8      	it	ge
 8011414:	2018      	movge	r0, #24
 8011416:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 801141a:	bfb8      	it	lt
 801141c:	2000      	movlt	r0, #0
 801141e:	f06f 0417 	mvn.w	r4, #23
 8011422:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 8011700 <__kernel_rem_pio2+0x310>
 8011426:	bfa4      	itt	ge
 8011428:	f1a2 0a03 	subge.w	sl, r2, #3
 801142c:	fb9a f0f0 	sdivge	r0, sl, r0
 8011430:	fb00 4404 	mla	r4, r0, r4, r4
 8011434:	1a46      	subs	r6, r0, r1
 8011436:	4414      	add	r4, r2
 8011438:	eb09 0c01 	add.w	ip, r9, r1
 801143c:	ad1a      	add	r5, sp, #104	; 0x68
 801143e:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 8011442:	2200      	movs	r2, #0
 8011444:	4562      	cmp	r2, ip
 8011446:	dd10      	ble.n	801146a <__kernel_rem_pio2+0x7a>
 8011448:	9a01      	ldr	r2, [sp, #4]
 801144a:	ab1a      	add	r3, sp, #104	; 0x68
 801144c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8011450:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 8011454:	f04f 0c00 	mov.w	ip, #0
 8011458:	45cc      	cmp	ip, r9
 801145a:	dc26      	bgt.n	80114aa <__kernel_rem_pio2+0xba>
 801145c:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 8011700 <__kernel_rem_pio2+0x310>
 8011460:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8011464:	4616      	mov	r6, r2
 8011466:	2500      	movs	r5, #0
 8011468:	e015      	b.n	8011496 <__kernel_rem_pio2+0xa6>
 801146a:	42d6      	cmn	r6, r2
 801146c:	d409      	bmi.n	8011482 <__kernel_rem_pio2+0x92>
 801146e:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 8011472:	ee07 3a90 	vmov	s15, r3
 8011476:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801147a:	eca5 7b02 	vstmia	r5!, {d7}
 801147e:	3201      	adds	r2, #1
 8011480:	e7e0      	b.n	8011444 <__kernel_rem_pio2+0x54>
 8011482:	eeb0 7b46 	vmov.f64	d7, d6
 8011486:	e7f8      	b.n	801147a <__kernel_rem_pio2+0x8a>
 8011488:	ecb8 5b02 	vldmia	r8!, {d5}
 801148c:	ed96 6b00 	vldr	d6, [r6]
 8011490:	3501      	adds	r5, #1
 8011492:	eea5 7b06 	vfma.f64	d7, d5, d6
 8011496:	428d      	cmp	r5, r1
 8011498:	f1a6 0608 	sub.w	r6, r6, #8
 801149c:	ddf4      	ble.n	8011488 <__kernel_rem_pio2+0x98>
 801149e:	ecaa 7b02 	vstmia	sl!, {d7}
 80114a2:	f10c 0c01 	add.w	ip, ip, #1
 80114a6:	3208      	adds	r2, #8
 80114a8:	e7d6      	b.n	8011458 <__kernel_rem_pio2+0x68>
 80114aa:	ab06      	add	r3, sp, #24
 80114ac:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8011708 <__kernel_rem_pio2+0x318>
 80114b0:	ed9f ab97 	vldr	d10, [pc, #604]	; 8011710 <__kernel_rem_pio2+0x320>
 80114b4:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 80114b8:	9303      	str	r3, [sp, #12]
 80114ba:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 80114be:	464d      	mov	r5, r9
 80114c0:	00eb      	lsls	r3, r5, #3
 80114c2:	9304      	str	r3, [sp, #16]
 80114c4:	ab92      	add	r3, sp, #584	; 0x248
 80114c6:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 80114ca:	f10d 0b18 	add.w	fp, sp, #24
 80114ce:	ab6a      	add	r3, sp, #424	; 0x1a8
 80114d0:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 80114d4:	465e      	mov	r6, fp
 80114d6:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 80114da:	4628      	mov	r0, r5
 80114dc:	2800      	cmp	r0, #0
 80114de:	f1a2 0208 	sub.w	r2, r2, #8
 80114e2:	dc4c      	bgt.n	801157e <__kernel_rem_pio2+0x18e>
 80114e4:	4620      	mov	r0, r4
 80114e6:	9105      	str	r1, [sp, #20]
 80114e8:	f000 faf2 	bl	8011ad0 <scalbn>
 80114ec:	eeb0 8b40 	vmov.f64	d8, d0
 80114f0:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 80114f4:	ee28 0b00 	vmul.f64	d0, d8, d0
 80114f8:	f000 fa76 	bl	80119e8 <floor>
 80114fc:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8011500:	eea0 8b47 	vfms.f64	d8, d0, d7
 8011504:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8011508:	2c00      	cmp	r4, #0
 801150a:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 801150e:	ee17 8a90 	vmov	r8, s15
 8011512:	ee38 8b40 	vsub.f64	d8, d8, d0
 8011516:	9905      	ldr	r1, [sp, #20]
 8011518:	dd43      	ble.n	80115a2 <__kernel_rem_pio2+0x1b2>
 801151a:	1e68      	subs	r0, r5, #1
 801151c:	ab06      	add	r3, sp, #24
 801151e:	f1c4 0c18 	rsb	ip, r4, #24
 8011522:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8011526:	fa46 f20c 	asr.w	r2, r6, ip
 801152a:	4490      	add	r8, r2
 801152c:	fa02 f20c 	lsl.w	r2, r2, ip
 8011530:	1ab6      	subs	r6, r6, r2
 8011532:	f1c4 0217 	rsb	r2, r4, #23
 8011536:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 801153a:	4116      	asrs	r6, r2
 801153c:	2e00      	cmp	r6, #0
 801153e:	dd3f      	ble.n	80115c0 <__kernel_rem_pio2+0x1d0>
 8011540:	f04f 0c00 	mov.w	ip, #0
 8011544:	f108 0801 	add.w	r8, r8, #1
 8011548:	4660      	mov	r0, ip
 801154a:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 801154e:	4565      	cmp	r5, ip
 8011550:	dc6e      	bgt.n	8011630 <__kernel_rem_pio2+0x240>
 8011552:	2c00      	cmp	r4, #0
 8011554:	dd04      	ble.n	8011560 <__kernel_rem_pio2+0x170>
 8011556:	2c01      	cmp	r4, #1
 8011558:	d07f      	beq.n	801165a <__kernel_rem_pio2+0x26a>
 801155a:	2c02      	cmp	r4, #2
 801155c:	f000 8087 	beq.w	801166e <__kernel_rem_pio2+0x27e>
 8011560:	2e02      	cmp	r6, #2
 8011562:	d12d      	bne.n	80115c0 <__kernel_rem_pio2+0x1d0>
 8011564:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011568:	ee30 8b48 	vsub.f64	d8, d0, d8
 801156c:	b340      	cbz	r0, 80115c0 <__kernel_rem_pio2+0x1d0>
 801156e:	4620      	mov	r0, r4
 8011570:	9105      	str	r1, [sp, #20]
 8011572:	f000 faad 	bl	8011ad0 <scalbn>
 8011576:	9905      	ldr	r1, [sp, #20]
 8011578:	ee38 8b40 	vsub.f64	d8, d8, d0
 801157c:	e020      	b.n	80115c0 <__kernel_rem_pio2+0x1d0>
 801157e:	ee20 7b09 	vmul.f64	d7, d0, d9
 8011582:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8011586:	3801      	subs	r0, #1
 8011588:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 801158c:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8011590:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8011594:	eca6 0a01 	vstmia	r6!, {s0}
 8011598:	ed92 0b00 	vldr	d0, [r2]
 801159c:	ee37 0b00 	vadd.f64	d0, d7, d0
 80115a0:	e79c      	b.n	80114dc <__kernel_rem_pio2+0xec>
 80115a2:	d105      	bne.n	80115b0 <__kernel_rem_pio2+0x1c0>
 80115a4:	1e6a      	subs	r2, r5, #1
 80115a6:	ab06      	add	r3, sp, #24
 80115a8:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80115ac:	15f6      	asrs	r6, r6, #23
 80115ae:	e7c5      	b.n	801153c <__kernel_rem_pio2+0x14c>
 80115b0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80115b4:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80115b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115bc:	da36      	bge.n	801162c <__kernel_rem_pio2+0x23c>
 80115be:	2600      	movs	r6, #0
 80115c0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80115c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115c8:	f040 80aa 	bne.w	8011720 <__kernel_rem_pio2+0x330>
 80115cc:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 80115d0:	4658      	mov	r0, fp
 80115d2:	2200      	movs	r2, #0
 80115d4:	4548      	cmp	r0, r9
 80115d6:	da52      	bge.n	801167e <__kernel_rem_pio2+0x28e>
 80115d8:	2a00      	cmp	r2, #0
 80115da:	f000 8081 	beq.w	80116e0 <__kernel_rem_pio2+0x2f0>
 80115de:	ab06      	add	r3, sp, #24
 80115e0:	3c18      	subs	r4, #24
 80115e2:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	f000 8087 	beq.w	80116fa <__kernel_rem_pio2+0x30a>
 80115ec:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80115f0:	4620      	mov	r0, r4
 80115f2:	f000 fa6d 	bl	8011ad0 <scalbn>
 80115f6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80115fa:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8011708 <__kernel_rem_pio2+0x318>
 80115fe:	a96a      	add	r1, sp, #424	; 0x1a8
 8011600:	f103 0208 	add.w	r2, r3, #8
 8011604:	1888      	adds	r0, r1, r2
 8011606:	4659      	mov	r1, fp
 8011608:	2900      	cmp	r1, #0
 801160a:	f280 80b7 	bge.w	801177c <__kernel_rem_pio2+0x38c>
 801160e:	4659      	mov	r1, fp
 8011610:	2900      	cmp	r1, #0
 8011612:	f2c0 80d5 	blt.w	80117c0 <__kernel_rem_pio2+0x3d0>
 8011616:	a86a      	add	r0, sp, #424	; 0x1a8
 8011618:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 801161c:	ed9f 7b38 	vldr	d7, [pc, #224]	; 8011700 <__kernel_rem_pio2+0x310>
 8011620:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 801171c <__kernel_rem_pio2+0x32c>
 8011624:	2400      	movs	r4, #0
 8011626:	ebab 0001 	sub.w	r0, fp, r1
 801162a:	e0be      	b.n	80117aa <__kernel_rem_pio2+0x3ba>
 801162c:	2602      	movs	r6, #2
 801162e:	e787      	b.n	8011540 <__kernel_rem_pio2+0x150>
 8011630:	f8db 2000 	ldr.w	r2, [fp]
 8011634:	b958      	cbnz	r0, 801164e <__kernel_rem_pio2+0x25e>
 8011636:	b122      	cbz	r2, 8011642 <__kernel_rem_pio2+0x252>
 8011638:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 801163c:	f8cb 2000 	str.w	r2, [fp]
 8011640:	2201      	movs	r2, #1
 8011642:	f10c 0c01 	add.w	ip, ip, #1
 8011646:	f10b 0b04 	add.w	fp, fp, #4
 801164a:	4610      	mov	r0, r2
 801164c:	e77f      	b.n	801154e <__kernel_rem_pio2+0x15e>
 801164e:	ebae 0202 	sub.w	r2, lr, r2
 8011652:	f8cb 2000 	str.w	r2, [fp]
 8011656:	4602      	mov	r2, r0
 8011658:	e7f3      	b.n	8011642 <__kernel_rem_pio2+0x252>
 801165a:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 801165e:	ab06      	add	r3, sp, #24
 8011660:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8011664:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8011668:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 801166c:	e778      	b.n	8011560 <__kernel_rem_pio2+0x170>
 801166e:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 8011672:	ab06      	add	r3, sp, #24
 8011674:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8011678:	f3c2 0215 	ubfx	r2, r2, #0, #22
 801167c:	e7f4      	b.n	8011668 <__kernel_rem_pio2+0x278>
 801167e:	ab06      	add	r3, sp, #24
 8011680:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8011684:	3801      	subs	r0, #1
 8011686:	431a      	orrs	r2, r3
 8011688:	e7a4      	b.n	80115d4 <__kernel_rem_pio2+0x1e4>
 801168a:	f10c 0c01 	add.w	ip, ip, #1
 801168e:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 8011692:	2800      	cmp	r0, #0
 8011694:	d0f9      	beq.n	801168a <__kernel_rem_pio2+0x29a>
 8011696:	9b04      	ldr	r3, [sp, #16]
 8011698:	f503 7312 	add.w	r3, r3, #584	; 0x248
 801169c:	eb0d 0203 	add.w	r2, sp, r3
 80116a0:	9b01      	ldr	r3, [sp, #4]
 80116a2:	18e8      	adds	r0, r5, r3
 80116a4:	ab1a      	add	r3, sp, #104	; 0x68
 80116a6:	1c6e      	adds	r6, r5, #1
 80116a8:	3a98      	subs	r2, #152	; 0x98
 80116aa:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80116ae:	4465      	add	r5, ip
 80116b0:	42b5      	cmp	r5, r6
 80116b2:	f6ff af05 	blt.w	80114c0 <__kernel_rem_pio2+0xd0>
 80116b6:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 80116ba:	f8dd e008 	ldr.w	lr, [sp, #8]
 80116be:	ee07 3a90 	vmov	s15, r3
 80116c2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80116c6:	f04f 0c00 	mov.w	ip, #0
 80116ca:	eca0 7b02 	vstmia	r0!, {d7}
 80116ce:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8011700 <__kernel_rem_pio2+0x310>
 80116d2:	4680      	mov	r8, r0
 80116d4:	458c      	cmp	ip, r1
 80116d6:	dd07      	ble.n	80116e8 <__kernel_rem_pio2+0x2f8>
 80116d8:	eca2 7b02 	vstmia	r2!, {d7}
 80116dc:	3601      	adds	r6, #1
 80116de:	e7e7      	b.n	80116b0 <__kernel_rem_pio2+0x2c0>
 80116e0:	9a03      	ldr	r2, [sp, #12]
 80116e2:	f04f 0c01 	mov.w	ip, #1
 80116e6:	e7d2      	b.n	801168e <__kernel_rem_pio2+0x29e>
 80116e8:	ecbe 5b02 	vldmia	lr!, {d5}
 80116ec:	ed38 6b02 	vldmdb	r8!, {d6}
 80116f0:	f10c 0c01 	add.w	ip, ip, #1
 80116f4:	eea5 7b06 	vfma.f64	d7, d5, d6
 80116f8:	e7ec      	b.n	80116d4 <__kernel_rem_pio2+0x2e4>
 80116fa:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80116fe:	e76e      	b.n	80115de <__kernel_rem_pio2+0x1ee>
	...
 801170c:	3e700000 	.word	0x3e700000
 8011710:	00000000 	.word	0x00000000
 8011714:	41700000 	.word	0x41700000
 8011718:	08014c00 	.word	0x08014c00
 801171c:	08014bc0 	.word	0x08014bc0
 8011720:	4260      	negs	r0, r4
 8011722:	eeb0 0b48 	vmov.f64	d0, d8
 8011726:	f000 f9d3 	bl	8011ad0 <scalbn>
 801172a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8011908 <__kernel_rem_pio2+0x518>
 801172e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8011732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011736:	db18      	blt.n	801176a <__kernel_rem_pio2+0x37a>
 8011738:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8011910 <__kernel_rem_pio2+0x520>
 801173c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8011740:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8011744:	aa06      	add	r2, sp, #24
 8011746:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 801174a:	eea5 0b46 	vfms.f64	d0, d5, d6
 801174e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8011752:	f105 0b01 	add.w	fp, r5, #1
 8011756:	ee10 3a10 	vmov	r3, s0
 801175a:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801175e:	ee17 3a10 	vmov	r3, s14
 8011762:	3418      	adds	r4, #24
 8011764:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 8011768:	e740      	b.n	80115ec <__kernel_rem_pio2+0x1fc>
 801176a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801176e:	aa06      	add	r2, sp, #24
 8011770:	ee10 3a10 	vmov	r3, s0
 8011774:	46ab      	mov	fp, r5
 8011776:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801177a:	e737      	b.n	80115ec <__kernel_rem_pio2+0x1fc>
 801177c:	ac06      	add	r4, sp, #24
 801177e:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 8011782:	9401      	str	r4, [sp, #4]
 8011784:	ee07 4a90 	vmov	s15, r4
 8011788:	3901      	subs	r1, #1
 801178a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801178e:	ee27 7b00 	vmul.f64	d7, d7, d0
 8011792:	ee20 0b06 	vmul.f64	d0, d0, d6
 8011796:	ed20 7b02 	vstmdb	r0!, {d7}
 801179a:	e735      	b.n	8011608 <__kernel_rem_pio2+0x218>
 801179c:	ecbc 5b02 	vldmia	ip!, {d5}
 80117a0:	ecb5 6b02 	vldmia	r5!, {d6}
 80117a4:	3401      	adds	r4, #1
 80117a6:	eea5 7b06 	vfma.f64	d7, d5, d6
 80117aa:	454c      	cmp	r4, r9
 80117ac:	dc01      	bgt.n	80117b2 <__kernel_rem_pio2+0x3c2>
 80117ae:	4284      	cmp	r4, r0
 80117b0:	ddf4      	ble.n	801179c <__kernel_rem_pio2+0x3ac>
 80117b2:	ac42      	add	r4, sp, #264	; 0x108
 80117b4:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 80117b8:	ed80 7b00 	vstr	d7, [r0]
 80117bc:	3901      	subs	r1, #1
 80117be:	e727      	b.n	8011610 <__kernel_rem_pio2+0x220>
 80117c0:	99a2      	ldr	r1, [sp, #648]	; 0x288
 80117c2:	2902      	cmp	r1, #2
 80117c4:	dc0a      	bgt.n	80117dc <__kernel_rem_pio2+0x3ec>
 80117c6:	2900      	cmp	r1, #0
 80117c8:	dc2c      	bgt.n	8011824 <__kernel_rem_pio2+0x434>
 80117ca:	d045      	beq.n	8011858 <__kernel_rem_pio2+0x468>
 80117cc:	f008 0007 	and.w	r0, r8, #7
 80117d0:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 80117d4:	ecbd 8b06 	vpop	{d8-d10}
 80117d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117dc:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 80117de:	2a03      	cmp	r2, #3
 80117e0:	d1f4      	bne.n	80117cc <__kernel_rem_pio2+0x3dc>
 80117e2:	aa42      	add	r2, sp, #264	; 0x108
 80117e4:	4413      	add	r3, r2
 80117e6:	461a      	mov	r2, r3
 80117e8:	4619      	mov	r1, r3
 80117ea:	4658      	mov	r0, fp
 80117ec:	2800      	cmp	r0, #0
 80117ee:	f1a1 0108 	sub.w	r1, r1, #8
 80117f2:	dc54      	bgt.n	801189e <__kernel_rem_pio2+0x4ae>
 80117f4:	4659      	mov	r1, fp
 80117f6:	2901      	cmp	r1, #1
 80117f8:	f1a2 0208 	sub.w	r2, r2, #8
 80117fc:	dc5f      	bgt.n	80118be <__kernel_rem_pio2+0x4ce>
 80117fe:	ed9f 7b46 	vldr	d7, [pc, #280]	; 8011918 <__kernel_rem_pio2+0x528>
 8011802:	3308      	adds	r3, #8
 8011804:	f1bb 0f01 	cmp.w	fp, #1
 8011808:	dc69      	bgt.n	80118de <__kernel_rem_pio2+0x4ee>
 801180a:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 801180e:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 8011812:	2e00      	cmp	r6, #0
 8011814:	d16a      	bne.n	80118ec <__kernel_rem_pio2+0x4fc>
 8011816:	ed87 5b00 	vstr	d5, [r7]
 801181a:	ed87 6b02 	vstr	d6, [r7, #8]
 801181e:	ed87 7b04 	vstr	d7, [r7, #16]
 8011822:	e7d3      	b.n	80117cc <__kernel_rem_pio2+0x3dc>
 8011824:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8011918 <__kernel_rem_pio2+0x528>
 8011828:	ab42      	add	r3, sp, #264	; 0x108
 801182a:	441a      	add	r2, r3
 801182c:	465b      	mov	r3, fp
 801182e:	2b00      	cmp	r3, #0
 8011830:	da26      	bge.n	8011880 <__kernel_rem_pio2+0x490>
 8011832:	b35e      	cbz	r6, 801188c <__kernel_rem_pio2+0x49c>
 8011834:	eeb1 7b46 	vneg.f64	d7, d6
 8011838:	ed87 7b00 	vstr	d7, [r7]
 801183c:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8011840:	aa44      	add	r2, sp, #272	; 0x110
 8011842:	2301      	movs	r3, #1
 8011844:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011848:	459b      	cmp	fp, r3
 801184a:	da22      	bge.n	8011892 <__kernel_rem_pio2+0x4a2>
 801184c:	b10e      	cbz	r6, 8011852 <__kernel_rem_pio2+0x462>
 801184e:	eeb1 7b47 	vneg.f64	d7, d7
 8011852:	ed87 7b02 	vstr	d7, [r7, #8]
 8011856:	e7b9      	b.n	80117cc <__kernel_rem_pio2+0x3dc>
 8011858:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8011918 <__kernel_rem_pio2+0x528>
 801185c:	ab42      	add	r3, sp, #264	; 0x108
 801185e:	441a      	add	r2, r3
 8011860:	f1bb 0f00 	cmp.w	fp, #0
 8011864:	da05      	bge.n	8011872 <__kernel_rem_pio2+0x482>
 8011866:	b10e      	cbz	r6, 801186c <__kernel_rem_pio2+0x47c>
 8011868:	eeb1 7b47 	vneg.f64	d7, d7
 801186c:	ed87 7b00 	vstr	d7, [r7]
 8011870:	e7ac      	b.n	80117cc <__kernel_rem_pio2+0x3dc>
 8011872:	ed32 6b02 	vldmdb	r2!, {d6}
 8011876:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801187a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801187e:	e7ef      	b.n	8011860 <__kernel_rem_pio2+0x470>
 8011880:	ed32 7b02 	vldmdb	r2!, {d7}
 8011884:	3b01      	subs	r3, #1
 8011886:	ee36 6b07 	vadd.f64	d6, d6, d7
 801188a:	e7d0      	b.n	801182e <__kernel_rem_pio2+0x43e>
 801188c:	eeb0 7b46 	vmov.f64	d7, d6
 8011890:	e7d2      	b.n	8011838 <__kernel_rem_pio2+0x448>
 8011892:	ecb2 6b02 	vldmia	r2!, {d6}
 8011896:	3301      	adds	r3, #1
 8011898:	ee37 7b06 	vadd.f64	d7, d7, d6
 801189c:	e7d4      	b.n	8011848 <__kernel_rem_pio2+0x458>
 801189e:	ed91 7b00 	vldr	d7, [r1]
 80118a2:	ed91 5b02 	vldr	d5, [r1, #8]
 80118a6:	3801      	subs	r0, #1
 80118a8:	ee37 6b05 	vadd.f64	d6, d7, d5
 80118ac:	ee37 7b46 	vsub.f64	d7, d7, d6
 80118b0:	ed81 6b00 	vstr	d6, [r1]
 80118b4:	ee37 7b05 	vadd.f64	d7, d7, d5
 80118b8:	ed81 7b02 	vstr	d7, [r1, #8]
 80118bc:	e796      	b.n	80117ec <__kernel_rem_pio2+0x3fc>
 80118be:	ed92 7b00 	vldr	d7, [r2]
 80118c2:	ed92 5b02 	vldr	d5, [r2, #8]
 80118c6:	3901      	subs	r1, #1
 80118c8:	ee37 6b05 	vadd.f64	d6, d7, d5
 80118cc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80118d0:	ed82 6b00 	vstr	d6, [r2]
 80118d4:	ee37 7b05 	vadd.f64	d7, d7, d5
 80118d8:	ed82 7b02 	vstr	d7, [r2, #8]
 80118dc:	e78b      	b.n	80117f6 <__kernel_rem_pio2+0x406>
 80118de:	ed33 6b02 	vldmdb	r3!, {d6}
 80118e2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80118e6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80118ea:	e78b      	b.n	8011804 <__kernel_rem_pio2+0x414>
 80118ec:	eeb1 5b45 	vneg.f64	d5, d5
 80118f0:	eeb1 6b46 	vneg.f64	d6, d6
 80118f4:	ed87 5b00 	vstr	d5, [r7]
 80118f8:	eeb1 7b47 	vneg.f64	d7, d7
 80118fc:	ed87 6b02 	vstr	d6, [r7, #8]
 8011900:	e78d      	b.n	801181e <__kernel_rem_pio2+0x42e>
 8011902:	bf00      	nop
 8011904:	f3af 8000 	nop.w
 8011908:	00000000 	.word	0x00000000
 801190c:	41700000 	.word	0x41700000
 8011910:	00000000 	.word	0x00000000
 8011914:	3e700000 	.word	0x3e700000
	...

08011920 <__kernel_sin>:
 8011920:	ee10 3a90 	vmov	r3, s1
 8011924:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011928:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801192c:	da04      	bge.n	8011938 <__kernel_sin+0x18>
 801192e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8011932:	ee17 3a90 	vmov	r3, s15
 8011936:	b35b      	cbz	r3, 8011990 <__kernel_sin+0x70>
 8011938:	ee20 6b00 	vmul.f64	d6, d0, d0
 801193c:	ee20 5b06 	vmul.f64	d5, d0, d6
 8011940:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8011998 <__kernel_sin+0x78>
 8011944:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80119a0 <__kernel_sin+0x80>
 8011948:	eea6 4b07 	vfma.f64	d4, d6, d7
 801194c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80119a8 <__kernel_sin+0x88>
 8011950:	eea4 7b06 	vfma.f64	d7, d4, d6
 8011954:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80119b0 <__kernel_sin+0x90>
 8011958:	eea7 4b06 	vfma.f64	d4, d7, d6
 801195c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80119b8 <__kernel_sin+0x98>
 8011960:	eea4 7b06 	vfma.f64	d7, d4, d6
 8011964:	b930      	cbnz	r0, 8011974 <__kernel_sin+0x54>
 8011966:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80119c0 <__kernel_sin+0xa0>
 801196a:	eea6 4b07 	vfma.f64	d4, d6, d7
 801196e:	eea4 0b05 	vfma.f64	d0, d4, d5
 8011972:	4770      	bx	lr
 8011974:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8011978:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 801197c:	eea1 7b04 	vfma.f64	d7, d1, d4
 8011980:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8011984:	ed9f 7b10 	vldr	d7, [pc, #64]	; 80119c8 <__kernel_sin+0xa8>
 8011988:	eea5 1b07 	vfma.f64	d1, d5, d7
 801198c:	ee30 0b41 	vsub.f64	d0, d0, d1
 8011990:	4770      	bx	lr
 8011992:	bf00      	nop
 8011994:	f3af 8000 	nop.w
 8011998:	5acfd57c 	.word	0x5acfd57c
 801199c:	3de5d93a 	.word	0x3de5d93a
 80119a0:	8a2b9ceb 	.word	0x8a2b9ceb
 80119a4:	be5ae5e6 	.word	0xbe5ae5e6
 80119a8:	57b1fe7d 	.word	0x57b1fe7d
 80119ac:	3ec71de3 	.word	0x3ec71de3
 80119b0:	19c161d5 	.word	0x19c161d5
 80119b4:	bf2a01a0 	.word	0xbf2a01a0
 80119b8:	1110f8a6 	.word	0x1110f8a6
 80119bc:	3f811111 	.word	0x3f811111
 80119c0:	55555549 	.word	0x55555549
 80119c4:	bfc55555 	.word	0xbfc55555
 80119c8:	55555549 	.word	0x55555549
 80119cc:	3fc55555 	.word	0x3fc55555

080119d0 <fabs>:
 80119d0:	ec51 0b10 	vmov	r0, r1, d0
 80119d4:	ee10 2a10 	vmov	r2, s0
 80119d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80119dc:	ec43 2b10 	vmov	d0, r2, r3
 80119e0:	4770      	bx	lr
 80119e2:	0000      	movs	r0, r0
 80119e4:	0000      	movs	r0, r0
	...

080119e8 <floor>:
 80119e8:	ee10 1a90 	vmov	r1, s1
 80119ec:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80119f0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 80119f4:	2b13      	cmp	r3, #19
 80119f6:	b530      	push	{r4, r5, lr}
 80119f8:	ee10 0a10 	vmov	r0, s0
 80119fc:	ee10 5a10 	vmov	r5, s0
 8011a00:	dc31      	bgt.n	8011a66 <floor+0x7e>
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	da15      	bge.n	8011a32 <floor+0x4a>
 8011a06:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8011ac0 <floor+0xd8>
 8011a0a:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011a0e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a16:	dd07      	ble.n	8011a28 <floor+0x40>
 8011a18:	2900      	cmp	r1, #0
 8011a1a:	da4e      	bge.n	8011aba <floor+0xd2>
 8011a1c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011a20:	4318      	orrs	r0, r3
 8011a22:	d001      	beq.n	8011a28 <floor+0x40>
 8011a24:	4928      	ldr	r1, [pc, #160]	; (8011ac8 <floor+0xe0>)
 8011a26:	2000      	movs	r0, #0
 8011a28:	460b      	mov	r3, r1
 8011a2a:	4602      	mov	r2, r0
 8011a2c:	ec43 2b10 	vmov	d0, r2, r3
 8011a30:	e020      	b.n	8011a74 <floor+0x8c>
 8011a32:	4a26      	ldr	r2, [pc, #152]	; (8011acc <floor+0xe4>)
 8011a34:	411a      	asrs	r2, r3
 8011a36:	ea01 0402 	and.w	r4, r1, r2
 8011a3a:	4304      	orrs	r4, r0
 8011a3c:	d01a      	beq.n	8011a74 <floor+0x8c>
 8011a3e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8011ac0 <floor+0xd8>
 8011a42:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011a46:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a4e:	ddeb      	ble.n	8011a28 <floor+0x40>
 8011a50:	2900      	cmp	r1, #0
 8011a52:	bfbe      	ittt	lt
 8011a54:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8011a58:	fa40 f303 	asrlt.w	r3, r0, r3
 8011a5c:	18c9      	addlt	r1, r1, r3
 8011a5e:	ea21 0102 	bic.w	r1, r1, r2
 8011a62:	2000      	movs	r0, #0
 8011a64:	e7e0      	b.n	8011a28 <floor+0x40>
 8011a66:	2b33      	cmp	r3, #51	; 0x33
 8011a68:	dd05      	ble.n	8011a76 <floor+0x8e>
 8011a6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011a6e:	d101      	bne.n	8011a74 <floor+0x8c>
 8011a70:	ee30 0b00 	vadd.f64	d0, d0, d0
 8011a74:	bd30      	pop	{r4, r5, pc}
 8011a76:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8011a7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011a7e:	40e2      	lsrs	r2, r4
 8011a80:	4202      	tst	r2, r0
 8011a82:	d0f7      	beq.n	8011a74 <floor+0x8c>
 8011a84:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8011ac0 <floor+0xd8>
 8011a88:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011a8c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a94:	ddc8      	ble.n	8011a28 <floor+0x40>
 8011a96:	2900      	cmp	r1, #0
 8011a98:	da02      	bge.n	8011aa0 <floor+0xb8>
 8011a9a:	2b14      	cmp	r3, #20
 8011a9c:	d103      	bne.n	8011aa6 <floor+0xbe>
 8011a9e:	3101      	adds	r1, #1
 8011aa0:	ea20 0002 	bic.w	r0, r0, r2
 8011aa4:	e7c0      	b.n	8011a28 <floor+0x40>
 8011aa6:	2401      	movs	r4, #1
 8011aa8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8011aac:	fa04 f303 	lsl.w	r3, r4, r3
 8011ab0:	4418      	add	r0, r3
 8011ab2:	42a8      	cmp	r0, r5
 8011ab4:	bf38      	it	cc
 8011ab6:	1909      	addcc	r1, r1, r4
 8011ab8:	e7f2      	b.n	8011aa0 <floor+0xb8>
 8011aba:	2000      	movs	r0, #0
 8011abc:	4601      	mov	r1, r0
 8011abe:	e7b3      	b.n	8011a28 <floor+0x40>
 8011ac0:	8800759c 	.word	0x8800759c
 8011ac4:	7e37e43c 	.word	0x7e37e43c
 8011ac8:	bff00000 	.word	0xbff00000
 8011acc:	000fffff 	.word	0x000fffff

08011ad0 <scalbn>:
 8011ad0:	ee10 1a90 	vmov	r1, s1
 8011ad4:	b510      	push	{r4, lr}
 8011ad6:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8011ada:	b98c      	cbnz	r4, 8011b00 <scalbn+0x30>
 8011adc:	ee10 3a10 	vmov	r3, s0
 8011ae0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8011ae4:	430b      	orrs	r3, r1
 8011ae6:	d011      	beq.n	8011b0c <scalbn+0x3c>
 8011ae8:	ed9f 7b31 	vldr	d7, [pc, #196]	; 8011bb0 <scalbn+0xe0>
 8011aec:	4b3c      	ldr	r3, [pc, #240]	; (8011be0 <scalbn+0x110>)
 8011aee:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011af2:	4298      	cmp	r0, r3
 8011af4:	da0b      	bge.n	8011b0e <scalbn+0x3e>
 8011af6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8011bb8 <scalbn+0xe8>
 8011afa:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011afe:	e005      	b.n	8011b0c <scalbn+0x3c>
 8011b00:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8011b04:	429c      	cmp	r4, r3
 8011b06:	d107      	bne.n	8011b18 <scalbn+0x48>
 8011b08:	ee30 0b00 	vadd.f64	d0, d0, d0
 8011b0c:	bd10      	pop	{r4, pc}
 8011b0e:	ee10 1a90 	vmov	r1, s1
 8011b12:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8011b16:	3c36      	subs	r4, #54	; 0x36
 8011b18:	4404      	add	r4, r0
 8011b1a:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8011b1e:	429c      	cmp	r4, r3
 8011b20:	dd0d      	ble.n	8011b3e <scalbn+0x6e>
 8011b22:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8011bc0 <scalbn+0xf0>
 8011b26:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8011bc8 <scalbn+0xf8>
 8011b2a:	eeb0 6b47 	vmov.f64	d6, d7
 8011b2e:	ee10 3a90 	vmov	r3, s1
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	fe27 7b05 	vselge.f64	d7, d7, d5
 8011b38:	ee27 0b06 	vmul.f64	d0, d7, d6
 8011b3c:	e7e6      	b.n	8011b0c <scalbn+0x3c>
 8011b3e:	2c00      	cmp	r4, #0
 8011b40:	dd0a      	ble.n	8011b58 <scalbn+0x88>
 8011b42:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8011b46:	ec53 2b10 	vmov	r2, r3, d0
 8011b4a:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8011b4e:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 8011b52:	ec43 2b10 	vmov	d0, r2, r3
 8011b56:	e7d9      	b.n	8011b0c <scalbn+0x3c>
 8011b58:	f114 0f35 	cmn.w	r4, #53	; 0x35
 8011b5c:	da19      	bge.n	8011b92 <scalbn+0xc2>
 8011b5e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8011b62:	4298      	cmp	r0, r3
 8011b64:	ee10 3a90 	vmov	r3, s1
 8011b68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011b6c:	dd09      	ble.n	8011b82 <scalbn+0xb2>
 8011b6e:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8011bc0 <scalbn+0xf0>
 8011b72:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8011bc8 <scalbn+0xf8>
 8011b76:	eeb0 7b40 	vmov.f64	d7, d0
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	fe00 0b06 	vseleq.f64	d0, d0, d6
 8011b80:	e7bb      	b.n	8011afa <scalbn+0x2a>
 8011b82:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8011bb8 <scalbn+0xe8>
 8011b86:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8011bd0 <scalbn+0x100>
 8011b8a:	eeb0 7b40 	vmov.f64	d7, d0
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	e7f4      	b.n	8011b7c <scalbn+0xac>
 8011b92:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8011b96:	ec53 2b10 	vmov	r2, r3, d0
 8011b9a:	3436      	adds	r4, #54	; 0x36
 8011b9c:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8011ba0:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 8011ba4:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8011bd8 <scalbn+0x108>
 8011ba8:	ec43 2b10 	vmov	d0, r2, r3
 8011bac:	e7a5      	b.n	8011afa <scalbn+0x2a>
 8011bae:	bf00      	nop
 8011bb0:	00000000 	.word	0x00000000
 8011bb4:	43500000 	.word	0x43500000
 8011bb8:	c2f8f359 	.word	0xc2f8f359
 8011bbc:	01a56e1f 	.word	0x01a56e1f
 8011bc0:	8800759c 	.word	0x8800759c
 8011bc4:	7e37e43c 	.word	0x7e37e43c
 8011bc8:	8800759c 	.word	0x8800759c
 8011bcc:	fe37e43c 	.word	0xfe37e43c
 8011bd0:	c2f8f359 	.word	0xc2f8f359
 8011bd4:	81a56e1f 	.word	0x81a56e1f
 8011bd8:	00000000 	.word	0x00000000
 8011bdc:	3c900000 	.word	0x3c900000
 8011be0:	ffff3cb0 	.word	0xffff3cb0

08011be4 <abort>:
 8011be4:	b508      	push	{r3, lr}
 8011be6:	2006      	movs	r0, #6
 8011be8:	f000 fdb0 	bl	801274c <raise>
 8011bec:	2001      	movs	r0, #1
 8011bee:	f7f4 fad1 	bl	8006194 <_exit>
	...

08011bf4 <__errno>:
 8011bf4:	4b01      	ldr	r3, [pc, #4]	; (8011bfc <__errno+0x8>)
 8011bf6:	6818      	ldr	r0, [r3, #0]
 8011bf8:	4770      	bx	lr
 8011bfa:	bf00      	nop
 8011bfc:	24000010 	.word	0x24000010

08011c00 <__libc_init_array>:
 8011c00:	b570      	push	{r4, r5, r6, lr}
 8011c02:	4d0d      	ldr	r5, [pc, #52]	; (8011c38 <__libc_init_array+0x38>)
 8011c04:	4c0d      	ldr	r4, [pc, #52]	; (8011c3c <__libc_init_array+0x3c>)
 8011c06:	1b64      	subs	r4, r4, r5
 8011c08:	10a4      	asrs	r4, r4, #2
 8011c0a:	2600      	movs	r6, #0
 8011c0c:	42a6      	cmp	r6, r4
 8011c0e:	d109      	bne.n	8011c24 <__libc_init_array+0x24>
 8011c10:	4d0b      	ldr	r5, [pc, #44]	; (8011c40 <__libc_init_array+0x40>)
 8011c12:	4c0c      	ldr	r4, [pc, #48]	; (8011c44 <__libc_init_array+0x44>)
 8011c14:	f002 fc90 	bl	8014538 <_init>
 8011c18:	1b64      	subs	r4, r4, r5
 8011c1a:	10a4      	asrs	r4, r4, #2
 8011c1c:	2600      	movs	r6, #0
 8011c1e:	42a6      	cmp	r6, r4
 8011c20:	d105      	bne.n	8011c2e <__libc_init_array+0x2e>
 8011c22:	bd70      	pop	{r4, r5, r6, pc}
 8011c24:	f855 3b04 	ldr.w	r3, [r5], #4
 8011c28:	4798      	blx	r3
 8011c2a:	3601      	adds	r6, #1
 8011c2c:	e7ee      	b.n	8011c0c <__libc_init_array+0xc>
 8011c2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8011c32:	4798      	blx	r3
 8011c34:	3601      	adds	r6, #1
 8011c36:	e7f2      	b.n	8011c1e <__libc_init_array+0x1e>
 8011c38:	08014ff4 	.word	0x08014ff4
 8011c3c:	08014ff4 	.word	0x08014ff4
 8011c40:	08014ff4 	.word	0x08014ff4
 8011c44:	08015004 	.word	0x08015004

08011c48 <malloc>:
 8011c48:	4b02      	ldr	r3, [pc, #8]	; (8011c54 <malloc+0xc>)
 8011c4a:	4601      	mov	r1, r0
 8011c4c:	6818      	ldr	r0, [r3, #0]
 8011c4e:	f000 b88d 	b.w	8011d6c <_malloc_r>
 8011c52:	bf00      	nop
 8011c54:	24000010 	.word	0x24000010

08011c58 <free>:
 8011c58:	4b02      	ldr	r3, [pc, #8]	; (8011c64 <free+0xc>)
 8011c5a:	4601      	mov	r1, r0
 8011c5c:	6818      	ldr	r0, [r3, #0]
 8011c5e:	f000 b819 	b.w	8011c94 <_free_r>
 8011c62:	bf00      	nop
 8011c64:	24000010 	.word	0x24000010

08011c68 <memcpy>:
 8011c68:	440a      	add	r2, r1
 8011c6a:	4291      	cmp	r1, r2
 8011c6c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8011c70:	d100      	bne.n	8011c74 <memcpy+0xc>
 8011c72:	4770      	bx	lr
 8011c74:	b510      	push	{r4, lr}
 8011c76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011c7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011c7e:	4291      	cmp	r1, r2
 8011c80:	d1f9      	bne.n	8011c76 <memcpy+0xe>
 8011c82:	bd10      	pop	{r4, pc}

08011c84 <memset>:
 8011c84:	4402      	add	r2, r0
 8011c86:	4603      	mov	r3, r0
 8011c88:	4293      	cmp	r3, r2
 8011c8a:	d100      	bne.n	8011c8e <memset+0xa>
 8011c8c:	4770      	bx	lr
 8011c8e:	f803 1b01 	strb.w	r1, [r3], #1
 8011c92:	e7f9      	b.n	8011c88 <memset+0x4>

08011c94 <_free_r>:
 8011c94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011c96:	2900      	cmp	r1, #0
 8011c98:	d044      	beq.n	8011d24 <_free_r+0x90>
 8011c9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011c9e:	9001      	str	r0, [sp, #4]
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	f1a1 0404 	sub.w	r4, r1, #4
 8011ca6:	bfb8      	it	lt
 8011ca8:	18e4      	addlt	r4, r4, r3
 8011caa:	f001 fb6b 	bl	8013384 <__malloc_lock>
 8011cae:	4a1e      	ldr	r2, [pc, #120]	; (8011d28 <_free_r+0x94>)
 8011cb0:	9801      	ldr	r0, [sp, #4]
 8011cb2:	6813      	ldr	r3, [r2, #0]
 8011cb4:	b933      	cbnz	r3, 8011cc4 <_free_r+0x30>
 8011cb6:	6063      	str	r3, [r4, #4]
 8011cb8:	6014      	str	r4, [r2, #0]
 8011cba:	b003      	add	sp, #12
 8011cbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011cc0:	f001 bb66 	b.w	8013390 <__malloc_unlock>
 8011cc4:	42a3      	cmp	r3, r4
 8011cc6:	d908      	bls.n	8011cda <_free_r+0x46>
 8011cc8:	6825      	ldr	r5, [r4, #0]
 8011cca:	1961      	adds	r1, r4, r5
 8011ccc:	428b      	cmp	r3, r1
 8011cce:	bf01      	itttt	eq
 8011cd0:	6819      	ldreq	r1, [r3, #0]
 8011cd2:	685b      	ldreq	r3, [r3, #4]
 8011cd4:	1949      	addeq	r1, r1, r5
 8011cd6:	6021      	streq	r1, [r4, #0]
 8011cd8:	e7ed      	b.n	8011cb6 <_free_r+0x22>
 8011cda:	461a      	mov	r2, r3
 8011cdc:	685b      	ldr	r3, [r3, #4]
 8011cde:	b10b      	cbz	r3, 8011ce4 <_free_r+0x50>
 8011ce0:	42a3      	cmp	r3, r4
 8011ce2:	d9fa      	bls.n	8011cda <_free_r+0x46>
 8011ce4:	6811      	ldr	r1, [r2, #0]
 8011ce6:	1855      	adds	r5, r2, r1
 8011ce8:	42a5      	cmp	r5, r4
 8011cea:	d10b      	bne.n	8011d04 <_free_r+0x70>
 8011cec:	6824      	ldr	r4, [r4, #0]
 8011cee:	4421      	add	r1, r4
 8011cf0:	1854      	adds	r4, r2, r1
 8011cf2:	42a3      	cmp	r3, r4
 8011cf4:	6011      	str	r1, [r2, #0]
 8011cf6:	d1e0      	bne.n	8011cba <_free_r+0x26>
 8011cf8:	681c      	ldr	r4, [r3, #0]
 8011cfa:	685b      	ldr	r3, [r3, #4]
 8011cfc:	6053      	str	r3, [r2, #4]
 8011cfe:	4421      	add	r1, r4
 8011d00:	6011      	str	r1, [r2, #0]
 8011d02:	e7da      	b.n	8011cba <_free_r+0x26>
 8011d04:	d902      	bls.n	8011d0c <_free_r+0x78>
 8011d06:	230c      	movs	r3, #12
 8011d08:	6003      	str	r3, [r0, #0]
 8011d0a:	e7d6      	b.n	8011cba <_free_r+0x26>
 8011d0c:	6825      	ldr	r5, [r4, #0]
 8011d0e:	1961      	adds	r1, r4, r5
 8011d10:	428b      	cmp	r3, r1
 8011d12:	bf04      	itt	eq
 8011d14:	6819      	ldreq	r1, [r3, #0]
 8011d16:	685b      	ldreq	r3, [r3, #4]
 8011d18:	6063      	str	r3, [r4, #4]
 8011d1a:	bf04      	itt	eq
 8011d1c:	1949      	addeq	r1, r1, r5
 8011d1e:	6021      	streq	r1, [r4, #0]
 8011d20:	6054      	str	r4, [r2, #4]
 8011d22:	e7ca      	b.n	8011cba <_free_r+0x26>
 8011d24:	b003      	add	sp, #12
 8011d26:	bd30      	pop	{r4, r5, pc}
 8011d28:	240009ec 	.word	0x240009ec

08011d2c <sbrk_aligned>:
 8011d2c:	b570      	push	{r4, r5, r6, lr}
 8011d2e:	4e0e      	ldr	r6, [pc, #56]	; (8011d68 <sbrk_aligned+0x3c>)
 8011d30:	460c      	mov	r4, r1
 8011d32:	6831      	ldr	r1, [r6, #0]
 8011d34:	4605      	mov	r5, r0
 8011d36:	b911      	cbnz	r1, 8011d3e <sbrk_aligned+0x12>
 8011d38:	f000 fcd0 	bl	80126dc <_sbrk_r>
 8011d3c:	6030      	str	r0, [r6, #0]
 8011d3e:	4621      	mov	r1, r4
 8011d40:	4628      	mov	r0, r5
 8011d42:	f000 fccb 	bl	80126dc <_sbrk_r>
 8011d46:	1c43      	adds	r3, r0, #1
 8011d48:	d00a      	beq.n	8011d60 <sbrk_aligned+0x34>
 8011d4a:	1cc4      	adds	r4, r0, #3
 8011d4c:	f024 0403 	bic.w	r4, r4, #3
 8011d50:	42a0      	cmp	r0, r4
 8011d52:	d007      	beq.n	8011d64 <sbrk_aligned+0x38>
 8011d54:	1a21      	subs	r1, r4, r0
 8011d56:	4628      	mov	r0, r5
 8011d58:	f000 fcc0 	bl	80126dc <_sbrk_r>
 8011d5c:	3001      	adds	r0, #1
 8011d5e:	d101      	bne.n	8011d64 <sbrk_aligned+0x38>
 8011d60:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8011d64:	4620      	mov	r0, r4
 8011d66:	bd70      	pop	{r4, r5, r6, pc}
 8011d68:	240009f0 	.word	0x240009f0

08011d6c <_malloc_r>:
 8011d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d70:	1ccd      	adds	r5, r1, #3
 8011d72:	f025 0503 	bic.w	r5, r5, #3
 8011d76:	3508      	adds	r5, #8
 8011d78:	2d0c      	cmp	r5, #12
 8011d7a:	bf38      	it	cc
 8011d7c:	250c      	movcc	r5, #12
 8011d7e:	2d00      	cmp	r5, #0
 8011d80:	4607      	mov	r7, r0
 8011d82:	db01      	blt.n	8011d88 <_malloc_r+0x1c>
 8011d84:	42a9      	cmp	r1, r5
 8011d86:	d905      	bls.n	8011d94 <_malloc_r+0x28>
 8011d88:	230c      	movs	r3, #12
 8011d8a:	603b      	str	r3, [r7, #0]
 8011d8c:	2600      	movs	r6, #0
 8011d8e:	4630      	mov	r0, r6
 8011d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d94:	4e2e      	ldr	r6, [pc, #184]	; (8011e50 <_malloc_r+0xe4>)
 8011d96:	f001 faf5 	bl	8013384 <__malloc_lock>
 8011d9a:	6833      	ldr	r3, [r6, #0]
 8011d9c:	461c      	mov	r4, r3
 8011d9e:	bb34      	cbnz	r4, 8011dee <_malloc_r+0x82>
 8011da0:	4629      	mov	r1, r5
 8011da2:	4638      	mov	r0, r7
 8011da4:	f7ff ffc2 	bl	8011d2c <sbrk_aligned>
 8011da8:	1c43      	adds	r3, r0, #1
 8011daa:	4604      	mov	r4, r0
 8011dac:	d14d      	bne.n	8011e4a <_malloc_r+0xde>
 8011dae:	6834      	ldr	r4, [r6, #0]
 8011db0:	4626      	mov	r6, r4
 8011db2:	2e00      	cmp	r6, #0
 8011db4:	d140      	bne.n	8011e38 <_malloc_r+0xcc>
 8011db6:	6823      	ldr	r3, [r4, #0]
 8011db8:	4631      	mov	r1, r6
 8011dba:	4638      	mov	r0, r7
 8011dbc:	eb04 0803 	add.w	r8, r4, r3
 8011dc0:	f000 fc8c 	bl	80126dc <_sbrk_r>
 8011dc4:	4580      	cmp	r8, r0
 8011dc6:	d13a      	bne.n	8011e3e <_malloc_r+0xd2>
 8011dc8:	6821      	ldr	r1, [r4, #0]
 8011dca:	3503      	adds	r5, #3
 8011dcc:	1a6d      	subs	r5, r5, r1
 8011dce:	f025 0503 	bic.w	r5, r5, #3
 8011dd2:	3508      	adds	r5, #8
 8011dd4:	2d0c      	cmp	r5, #12
 8011dd6:	bf38      	it	cc
 8011dd8:	250c      	movcc	r5, #12
 8011dda:	4629      	mov	r1, r5
 8011ddc:	4638      	mov	r0, r7
 8011dde:	f7ff ffa5 	bl	8011d2c <sbrk_aligned>
 8011de2:	3001      	adds	r0, #1
 8011de4:	d02b      	beq.n	8011e3e <_malloc_r+0xd2>
 8011de6:	6823      	ldr	r3, [r4, #0]
 8011de8:	442b      	add	r3, r5
 8011dea:	6023      	str	r3, [r4, #0]
 8011dec:	e00e      	b.n	8011e0c <_malloc_r+0xa0>
 8011dee:	6822      	ldr	r2, [r4, #0]
 8011df0:	1b52      	subs	r2, r2, r5
 8011df2:	d41e      	bmi.n	8011e32 <_malloc_r+0xc6>
 8011df4:	2a0b      	cmp	r2, #11
 8011df6:	d916      	bls.n	8011e26 <_malloc_r+0xba>
 8011df8:	1961      	adds	r1, r4, r5
 8011dfa:	42a3      	cmp	r3, r4
 8011dfc:	6025      	str	r5, [r4, #0]
 8011dfe:	bf18      	it	ne
 8011e00:	6059      	strne	r1, [r3, #4]
 8011e02:	6863      	ldr	r3, [r4, #4]
 8011e04:	bf08      	it	eq
 8011e06:	6031      	streq	r1, [r6, #0]
 8011e08:	5162      	str	r2, [r4, r5]
 8011e0a:	604b      	str	r3, [r1, #4]
 8011e0c:	4638      	mov	r0, r7
 8011e0e:	f104 060b 	add.w	r6, r4, #11
 8011e12:	f001 fabd 	bl	8013390 <__malloc_unlock>
 8011e16:	f026 0607 	bic.w	r6, r6, #7
 8011e1a:	1d23      	adds	r3, r4, #4
 8011e1c:	1af2      	subs	r2, r6, r3
 8011e1e:	d0b6      	beq.n	8011d8e <_malloc_r+0x22>
 8011e20:	1b9b      	subs	r3, r3, r6
 8011e22:	50a3      	str	r3, [r4, r2]
 8011e24:	e7b3      	b.n	8011d8e <_malloc_r+0x22>
 8011e26:	6862      	ldr	r2, [r4, #4]
 8011e28:	42a3      	cmp	r3, r4
 8011e2a:	bf0c      	ite	eq
 8011e2c:	6032      	streq	r2, [r6, #0]
 8011e2e:	605a      	strne	r2, [r3, #4]
 8011e30:	e7ec      	b.n	8011e0c <_malloc_r+0xa0>
 8011e32:	4623      	mov	r3, r4
 8011e34:	6864      	ldr	r4, [r4, #4]
 8011e36:	e7b2      	b.n	8011d9e <_malloc_r+0x32>
 8011e38:	4634      	mov	r4, r6
 8011e3a:	6876      	ldr	r6, [r6, #4]
 8011e3c:	e7b9      	b.n	8011db2 <_malloc_r+0x46>
 8011e3e:	230c      	movs	r3, #12
 8011e40:	603b      	str	r3, [r7, #0]
 8011e42:	4638      	mov	r0, r7
 8011e44:	f001 faa4 	bl	8013390 <__malloc_unlock>
 8011e48:	e7a1      	b.n	8011d8e <_malloc_r+0x22>
 8011e4a:	6025      	str	r5, [r4, #0]
 8011e4c:	e7de      	b.n	8011e0c <_malloc_r+0xa0>
 8011e4e:	bf00      	nop
 8011e50:	240009ec 	.word	0x240009ec

08011e54 <__cvt>:
 8011e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e56:	ed2d 8b02 	vpush	{d8}
 8011e5a:	eeb0 8b40 	vmov.f64	d8, d0
 8011e5e:	b085      	sub	sp, #20
 8011e60:	4617      	mov	r7, r2
 8011e62:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8011e64:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8011e66:	ee18 2a90 	vmov	r2, s17
 8011e6a:	f025 0520 	bic.w	r5, r5, #32
 8011e6e:	2a00      	cmp	r2, #0
 8011e70:	bfb6      	itet	lt
 8011e72:	222d      	movlt	r2, #45	; 0x2d
 8011e74:	2200      	movge	r2, #0
 8011e76:	eeb1 8b40 	vneglt.f64	d8, d0
 8011e7a:	2d46      	cmp	r5, #70	; 0x46
 8011e7c:	460c      	mov	r4, r1
 8011e7e:	701a      	strb	r2, [r3, #0]
 8011e80:	d004      	beq.n	8011e8c <__cvt+0x38>
 8011e82:	2d45      	cmp	r5, #69	; 0x45
 8011e84:	d100      	bne.n	8011e88 <__cvt+0x34>
 8011e86:	3401      	adds	r4, #1
 8011e88:	2102      	movs	r1, #2
 8011e8a:	e000      	b.n	8011e8e <__cvt+0x3a>
 8011e8c:	2103      	movs	r1, #3
 8011e8e:	ab03      	add	r3, sp, #12
 8011e90:	9301      	str	r3, [sp, #4]
 8011e92:	ab02      	add	r3, sp, #8
 8011e94:	9300      	str	r3, [sp, #0]
 8011e96:	4622      	mov	r2, r4
 8011e98:	4633      	mov	r3, r6
 8011e9a:	eeb0 0b48 	vmov.f64	d0, d8
 8011e9e:	f000 fcff 	bl	80128a0 <_dtoa_r>
 8011ea2:	2d47      	cmp	r5, #71	; 0x47
 8011ea4:	d101      	bne.n	8011eaa <__cvt+0x56>
 8011ea6:	07fb      	lsls	r3, r7, #31
 8011ea8:	d51a      	bpl.n	8011ee0 <__cvt+0x8c>
 8011eaa:	2d46      	cmp	r5, #70	; 0x46
 8011eac:	eb00 0204 	add.w	r2, r0, r4
 8011eb0:	d10c      	bne.n	8011ecc <__cvt+0x78>
 8011eb2:	7803      	ldrb	r3, [r0, #0]
 8011eb4:	2b30      	cmp	r3, #48	; 0x30
 8011eb6:	d107      	bne.n	8011ec8 <__cvt+0x74>
 8011eb8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ec0:	bf1c      	itt	ne
 8011ec2:	f1c4 0401 	rsbne	r4, r4, #1
 8011ec6:	6034      	strne	r4, [r6, #0]
 8011ec8:	6833      	ldr	r3, [r6, #0]
 8011eca:	441a      	add	r2, r3
 8011ecc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ed4:	bf08      	it	eq
 8011ed6:	9203      	streq	r2, [sp, #12]
 8011ed8:	2130      	movs	r1, #48	; 0x30
 8011eda:	9b03      	ldr	r3, [sp, #12]
 8011edc:	4293      	cmp	r3, r2
 8011ede:	d307      	bcc.n	8011ef0 <__cvt+0x9c>
 8011ee0:	9b03      	ldr	r3, [sp, #12]
 8011ee2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011ee4:	1a1b      	subs	r3, r3, r0
 8011ee6:	6013      	str	r3, [r2, #0]
 8011ee8:	b005      	add	sp, #20
 8011eea:	ecbd 8b02 	vpop	{d8}
 8011eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ef0:	1c5c      	adds	r4, r3, #1
 8011ef2:	9403      	str	r4, [sp, #12]
 8011ef4:	7019      	strb	r1, [r3, #0]
 8011ef6:	e7f0      	b.n	8011eda <__cvt+0x86>

08011ef8 <__exponent>:
 8011ef8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011efa:	4603      	mov	r3, r0
 8011efc:	2900      	cmp	r1, #0
 8011efe:	bfb8      	it	lt
 8011f00:	4249      	neglt	r1, r1
 8011f02:	f803 2b02 	strb.w	r2, [r3], #2
 8011f06:	bfb4      	ite	lt
 8011f08:	222d      	movlt	r2, #45	; 0x2d
 8011f0a:	222b      	movge	r2, #43	; 0x2b
 8011f0c:	2909      	cmp	r1, #9
 8011f0e:	7042      	strb	r2, [r0, #1]
 8011f10:	dd2a      	ble.n	8011f68 <__exponent+0x70>
 8011f12:	f10d 0407 	add.w	r4, sp, #7
 8011f16:	46a4      	mov	ip, r4
 8011f18:	270a      	movs	r7, #10
 8011f1a:	46a6      	mov	lr, r4
 8011f1c:	460a      	mov	r2, r1
 8011f1e:	fb91 f6f7 	sdiv	r6, r1, r7
 8011f22:	fb07 1516 	mls	r5, r7, r6, r1
 8011f26:	3530      	adds	r5, #48	; 0x30
 8011f28:	2a63      	cmp	r2, #99	; 0x63
 8011f2a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8011f2e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8011f32:	4631      	mov	r1, r6
 8011f34:	dcf1      	bgt.n	8011f1a <__exponent+0x22>
 8011f36:	3130      	adds	r1, #48	; 0x30
 8011f38:	f1ae 0502 	sub.w	r5, lr, #2
 8011f3c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8011f40:	1c44      	adds	r4, r0, #1
 8011f42:	4629      	mov	r1, r5
 8011f44:	4561      	cmp	r1, ip
 8011f46:	d30a      	bcc.n	8011f5e <__exponent+0x66>
 8011f48:	f10d 0209 	add.w	r2, sp, #9
 8011f4c:	eba2 020e 	sub.w	r2, r2, lr
 8011f50:	4565      	cmp	r5, ip
 8011f52:	bf88      	it	hi
 8011f54:	2200      	movhi	r2, #0
 8011f56:	4413      	add	r3, r2
 8011f58:	1a18      	subs	r0, r3, r0
 8011f5a:	b003      	add	sp, #12
 8011f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011f5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011f62:	f804 2f01 	strb.w	r2, [r4, #1]!
 8011f66:	e7ed      	b.n	8011f44 <__exponent+0x4c>
 8011f68:	2330      	movs	r3, #48	; 0x30
 8011f6a:	3130      	adds	r1, #48	; 0x30
 8011f6c:	7083      	strb	r3, [r0, #2]
 8011f6e:	70c1      	strb	r1, [r0, #3]
 8011f70:	1d03      	adds	r3, r0, #4
 8011f72:	e7f1      	b.n	8011f58 <__exponent+0x60>
 8011f74:	0000      	movs	r0, r0
	...

08011f78 <_printf_float>:
 8011f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f7c:	b08b      	sub	sp, #44	; 0x2c
 8011f7e:	460c      	mov	r4, r1
 8011f80:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8011f84:	4616      	mov	r6, r2
 8011f86:	461f      	mov	r7, r3
 8011f88:	4605      	mov	r5, r0
 8011f8a:	f001 f9f7 	bl	801337c <_localeconv_r>
 8011f8e:	f8d0 b000 	ldr.w	fp, [r0]
 8011f92:	4658      	mov	r0, fp
 8011f94:	f7ee f9a4 	bl	80002e0 <strlen>
 8011f98:	2300      	movs	r3, #0
 8011f9a:	9308      	str	r3, [sp, #32]
 8011f9c:	f8d8 3000 	ldr.w	r3, [r8]
 8011fa0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8011fa4:	6822      	ldr	r2, [r4, #0]
 8011fa6:	3307      	adds	r3, #7
 8011fa8:	f023 0307 	bic.w	r3, r3, #7
 8011fac:	f103 0108 	add.w	r1, r3, #8
 8011fb0:	f8c8 1000 	str.w	r1, [r8]
 8011fb4:	4682      	mov	sl, r0
 8011fb6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011fba:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8011fbe:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8012220 <_printf_float+0x2a8>
 8011fc2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8011fc6:	eeb0 6bc0 	vabs.f64	d6, d0
 8011fca:	eeb4 6b47 	vcmp.f64	d6, d7
 8011fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fd2:	dd24      	ble.n	801201e <_printf_float+0xa6>
 8011fd4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fdc:	d502      	bpl.n	8011fe4 <_printf_float+0x6c>
 8011fde:	232d      	movs	r3, #45	; 0x2d
 8011fe0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011fe4:	4b90      	ldr	r3, [pc, #576]	; (8012228 <_printf_float+0x2b0>)
 8011fe6:	4891      	ldr	r0, [pc, #580]	; (801222c <_printf_float+0x2b4>)
 8011fe8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8011fec:	bf94      	ite	ls
 8011fee:	4698      	movls	r8, r3
 8011ff0:	4680      	movhi	r8, r0
 8011ff2:	2303      	movs	r3, #3
 8011ff4:	6123      	str	r3, [r4, #16]
 8011ff6:	f022 0204 	bic.w	r2, r2, #4
 8011ffa:	2300      	movs	r3, #0
 8011ffc:	6022      	str	r2, [r4, #0]
 8011ffe:	9304      	str	r3, [sp, #16]
 8012000:	9700      	str	r7, [sp, #0]
 8012002:	4633      	mov	r3, r6
 8012004:	aa09      	add	r2, sp, #36	; 0x24
 8012006:	4621      	mov	r1, r4
 8012008:	4628      	mov	r0, r5
 801200a:	f000 f9d3 	bl	80123b4 <_printf_common>
 801200e:	3001      	adds	r0, #1
 8012010:	f040 808a 	bne.w	8012128 <_printf_float+0x1b0>
 8012014:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012018:	b00b      	add	sp, #44	; 0x2c
 801201a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801201e:	eeb4 0b40 	vcmp.f64	d0, d0
 8012022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012026:	d709      	bvc.n	801203c <_printf_float+0xc4>
 8012028:	ee10 3a90 	vmov	r3, s1
 801202c:	2b00      	cmp	r3, #0
 801202e:	bfbc      	itt	lt
 8012030:	232d      	movlt	r3, #45	; 0x2d
 8012032:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8012036:	487e      	ldr	r0, [pc, #504]	; (8012230 <_printf_float+0x2b8>)
 8012038:	4b7e      	ldr	r3, [pc, #504]	; (8012234 <_printf_float+0x2bc>)
 801203a:	e7d5      	b.n	8011fe8 <_printf_float+0x70>
 801203c:	6863      	ldr	r3, [r4, #4]
 801203e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8012042:	9104      	str	r1, [sp, #16]
 8012044:	1c59      	adds	r1, r3, #1
 8012046:	d13c      	bne.n	80120c2 <_printf_float+0x14a>
 8012048:	2306      	movs	r3, #6
 801204a:	6063      	str	r3, [r4, #4]
 801204c:	2300      	movs	r3, #0
 801204e:	9303      	str	r3, [sp, #12]
 8012050:	ab08      	add	r3, sp, #32
 8012052:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8012056:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801205a:	ab07      	add	r3, sp, #28
 801205c:	6861      	ldr	r1, [r4, #4]
 801205e:	9300      	str	r3, [sp, #0]
 8012060:	6022      	str	r2, [r4, #0]
 8012062:	f10d 031b 	add.w	r3, sp, #27
 8012066:	4628      	mov	r0, r5
 8012068:	f7ff fef4 	bl	8011e54 <__cvt>
 801206c:	9b04      	ldr	r3, [sp, #16]
 801206e:	9907      	ldr	r1, [sp, #28]
 8012070:	2b47      	cmp	r3, #71	; 0x47
 8012072:	4680      	mov	r8, r0
 8012074:	d108      	bne.n	8012088 <_printf_float+0x110>
 8012076:	1cc8      	adds	r0, r1, #3
 8012078:	db02      	blt.n	8012080 <_printf_float+0x108>
 801207a:	6863      	ldr	r3, [r4, #4]
 801207c:	4299      	cmp	r1, r3
 801207e:	dd41      	ble.n	8012104 <_printf_float+0x18c>
 8012080:	f1a9 0902 	sub.w	r9, r9, #2
 8012084:	fa5f f989 	uxtb.w	r9, r9
 8012088:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801208c:	d820      	bhi.n	80120d0 <_printf_float+0x158>
 801208e:	3901      	subs	r1, #1
 8012090:	464a      	mov	r2, r9
 8012092:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012096:	9107      	str	r1, [sp, #28]
 8012098:	f7ff ff2e 	bl	8011ef8 <__exponent>
 801209c:	9a08      	ldr	r2, [sp, #32]
 801209e:	9004      	str	r0, [sp, #16]
 80120a0:	1813      	adds	r3, r2, r0
 80120a2:	2a01      	cmp	r2, #1
 80120a4:	6123      	str	r3, [r4, #16]
 80120a6:	dc02      	bgt.n	80120ae <_printf_float+0x136>
 80120a8:	6822      	ldr	r2, [r4, #0]
 80120aa:	07d2      	lsls	r2, r2, #31
 80120ac:	d501      	bpl.n	80120b2 <_printf_float+0x13a>
 80120ae:	3301      	adds	r3, #1
 80120b0:	6123      	str	r3, [r4, #16]
 80120b2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d0a2      	beq.n	8012000 <_printf_float+0x88>
 80120ba:	232d      	movs	r3, #45	; 0x2d
 80120bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80120c0:	e79e      	b.n	8012000 <_printf_float+0x88>
 80120c2:	9904      	ldr	r1, [sp, #16]
 80120c4:	2947      	cmp	r1, #71	; 0x47
 80120c6:	d1c1      	bne.n	801204c <_printf_float+0xd4>
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d1bf      	bne.n	801204c <_printf_float+0xd4>
 80120cc:	2301      	movs	r3, #1
 80120ce:	e7bc      	b.n	801204a <_printf_float+0xd2>
 80120d0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80120d4:	d118      	bne.n	8012108 <_printf_float+0x190>
 80120d6:	2900      	cmp	r1, #0
 80120d8:	6863      	ldr	r3, [r4, #4]
 80120da:	dd0b      	ble.n	80120f4 <_printf_float+0x17c>
 80120dc:	6121      	str	r1, [r4, #16]
 80120de:	b913      	cbnz	r3, 80120e6 <_printf_float+0x16e>
 80120e0:	6822      	ldr	r2, [r4, #0]
 80120e2:	07d0      	lsls	r0, r2, #31
 80120e4:	d502      	bpl.n	80120ec <_printf_float+0x174>
 80120e6:	3301      	adds	r3, #1
 80120e8:	440b      	add	r3, r1
 80120ea:	6123      	str	r3, [r4, #16]
 80120ec:	2300      	movs	r3, #0
 80120ee:	65a1      	str	r1, [r4, #88]	; 0x58
 80120f0:	9304      	str	r3, [sp, #16]
 80120f2:	e7de      	b.n	80120b2 <_printf_float+0x13a>
 80120f4:	b913      	cbnz	r3, 80120fc <_printf_float+0x184>
 80120f6:	6822      	ldr	r2, [r4, #0]
 80120f8:	07d2      	lsls	r2, r2, #31
 80120fa:	d501      	bpl.n	8012100 <_printf_float+0x188>
 80120fc:	3302      	adds	r3, #2
 80120fe:	e7f4      	b.n	80120ea <_printf_float+0x172>
 8012100:	2301      	movs	r3, #1
 8012102:	e7f2      	b.n	80120ea <_printf_float+0x172>
 8012104:	f04f 0967 	mov.w	r9, #103	; 0x67
 8012108:	9b08      	ldr	r3, [sp, #32]
 801210a:	4299      	cmp	r1, r3
 801210c:	db05      	blt.n	801211a <_printf_float+0x1a2>
 801210e:	6823      	ldr	r3, [r4, #0]
 8012110:	6121      	str	r1, [r4, #16]
 8012112:	07d8      	lsls	r0, r3, #31
 8012114:	d5ea      	bpl.n	80120ec <_printf_float+0x174>
 8012116:	1c4b      	adds	r3, r1, #1
 8012118:	e7e7      	b.n	80120ea <_printf_float+0x172>
 801211a:	2900      	cmp	r1, #0
 801211c:	bfd4      	ite	le
 801211e:	f1c1 0202 	rsble	r2, r1, #2
 8012122:	2201      	movgt	r2, #1
 8012124:	4413      	add	r3, r2
 8012126:	e7e0      	b.n	80120ea <_printf_float+0x172>
 8012128:	6823      	ldr	r3, [r4, #0]
 801212a:	055a      	lsls	r2, r3, #21
 801212c:	d407      	bmi.n	801213e <_printf_float+0x1c6>
 801212e:	6923      	ldr	r3, [r4, #16]
 8012130:	4642      	mov	r2, r8
 8012132:	4631      	mov	r1, r6
 8012134:	4628      	mov	r0, r5
 8012136:	47b8      	blx	r7
 8012138:	3001      	adds	r0, #1
 801213a:	d12a      	bne.n	8012192 <_printf_float+0x21a>
 801213c:	e76a      	b.n	8012014 <_printf_float+0x9c>
 801213e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8012142:	f240 80e2 	bls.w	801230a <_printf_float+0x392>
 8012146:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801214a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801214e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012152:	d133      	bne.n	80121bc <_printf_float+0x244>
 8012154:	4a38      	ldr	r2, [pc, #224]	; (8012238 <_printf_float+0x2c0>)
 8012156:	2301      	movs	r3, #1
 8012158:	4631      	mov	r1, r6
 801215a:	4628      	mov	r0, r5
 801215c:	47b8      	blx	r7
 801215e:	3001      	adds	r0, #1
 8012160:	f43f af58 	beq.w	8012014 <_printf_float+0x9c>
 8012164:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8012168:	429a      	cmp	r2, r3
 801216a:	db02      	blt.n	8012172 <_printf_float+0x1fa>
 801216c:	6823      	ldr	r3, [r4, #0]
 801216e:	07d8      	lsls	r0, r3, #31
 8012170:	d50f      	bpl.n	8012192 <_printf_float+0x21a>
 8012172:	4653      	mov	r3, sl
 8012174:	465a      	mov	r2, fp
 8012176:	4631      	mov	r1, r6
 8012178:	4628      	mov	r0, r5
 801217a:	47b8      	blx	r7
 801217c:	3001      	adds	r0, #1
 801217e:	f43f af49 	beq.w	8012014 <_printf_float+0x9c>
 8012182:	f04f 0800 	mov.w	r8, #0
 8012186:	f104 091a 	add.w	r9, r4, #26
 801218a:	9b08      	ldr	r3, [sp, #32]
 801218c:	3b01      	subs	r3, #1
 801218e:	4543      	cmp	r3, r8
 8012190:	dc09      	bgt.n	80121a6 <_printf_float+0x22e>
 8012192:	6823      	ldr	r3, [r4, #0]
 8012194:	079b      	lsls	r3, r3, #30
 8012196:	f100 8108 	bmi.w	80123aa <_printf_float+0x432>
 801219a:	68e0      	ldr	r0, [r4, #12]
 801219c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801219e:	4298      	cmp	r0, r3
 80121a0:	bfb8      	it	lt
 80121a2:	4618      	movlt	r0, r3
 80121a4:	e738      	b.n	8012018 <_printf_float+0xa0>
 80121a6:	2301      	movs	r3, #1
 80121a8:	464a      	mov	r2, r9
 80121aa:	4631      	mov	r1, r6
 80121ac:	4628      	mov	r0, r5
 80121ae:	47b8      	blx	r7
 80121b0:	3001      	adds	r0, #1
 80121b2:	f43f af2f 	beq.w	8012014 <_printf_float+0x9c>
 80121b6:	f108 0801 	add.w	r8, r8, #1
 80121ba:	e7e6      	b.n	801218a <_printf_float+0x212>
 80121bc:	9b07      	ldr	r3, [sp, #28]
 80121be:	2b00      	cmp	r3, #0
 80121c0:	dc3c      	bgt.n	801223c <_printf_float+0x2c4>
 80121c2:	4a1d      	ldr	r2, [pc, #116]	; (8012238 <_printf_float+0x2c0>)
 80121c4:	2301      	movs	r3, #1
 80121c6:	4631      	mov	r1, r6
 80121c8:	4628      	mov	r0, r5
 80121ca:	47b8      	blx	r7
 80121cc:	3001      	adds	r0, #1
 80121ce:	f43f af21 	beq.w	8012014 <_printf_float+0x9c>
 80121d2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80121d6:	4313      	orrs	r3, r2
 80121d8:	d102      	bne.n	80121e0 <_printf_float+0x268>
 80121da:	6823      	ldr	r3, [r4, #0]
 80121dc:	07d9      	lsls	r1, r3, #31
 80121de:	d5d8      	bpl.n	8012192 <_printf_float+0x21a>
 80121e0:	4653      	mov	r3, sl
 80121e2:	465a      	mov	r2, fp
 80121e4:	4631      	mov	r1, r6
 80121e6:	4628      	mov	r0, r5
 80121e8:	47b8      	blx	r7
 80121ea:	3001      	adds	r0, #1
 80121ec:	f43f af12 	beq.w	8012014 <_printf_float+0x9c>
 80121f0:	f04f 0900 	mov.w	r9, #0
 80121f4:	f104 0a1a 	add.w	sl, r4, #26
 80121f8:	9b07      	ldr	r3, [sp, #28]
 80121fa:	425b      	negs	r3, r3
 80121fc:	454b      	cmp	r3, r9
 80121fe:	dc01      	bgt.n	8012204 <_printf_float+0x28c>
 8012200:	9b08      	ldr	r3, [sp, #32]
 8012202:	e795      	b.n	8012130 <_printf_float+0x1b8>
 8012204:	2301      	movs	r3, #1
 8012206:	4652      	mov	r2, sl
 8012208:	4631      	mov	r1, r6
 801220a:	4628      	mov	r0, r5
 801220c:	47b8      	blx	r7
 801220e:	3001      	adds	r0, #1
 8012210:	f43f af00 	beq.w	8012014 <_printf_float+0x9c>
 8012214:	f109 0901 	add.w	r9, r9, #1
 8012218:	e7ee      	b.n	80121f8 <_printf_float+0x280>
 801221a:	bf00      	nop
 801221c:	f3af 8000 	nop.w
 8012220:	ffffffff 	.word	0xffffffff
 8012224:	7fefffff 	.word	0x7fefffff
 8012228:	08014c14 	.word	0x08014c14
 801222c:	08014c18 	.word	0x08014c18
 8012230:	08014c20 	.word	0x08014c20
 8012234:	08014c1c 	.word	0x08014c1c
 8012238:	08014c24 	.word	0x08014c24
 801223c:	9a08      	ldr	r2, [sp, #32]
 801223e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012240:	429a      	cmp	r2, r3
 8012242:	bfa8      	it	ge
 8012244:	461a      	movge	r2, r3
 8012246:	2a00      	cmp	r2, #0
 8012248:	4691      	mov	r9, r2
 801224a:	dc38      	bgt.n	80122be <_printf_float+0x346>
 801224c:	2300      	movs	r3, #0
 801224e:	9305      	str	r3, [sp, #20]
 8012250:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012254:	f104 021a 	add.w	r2, r4, #26
 8012258:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801225a:	9905      	ldr	r1, [sp, #20]
 801225c:	9304      	str	r3, [sp, #16]
 801225e:	eba3 0309 	sub.w	r3, r3, r9
 8012262:	428b      	cmp	r3, r1
 8012264:	dc33      	bgt.n	80122ce <_printf_float+0x356>
 8012266:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801226a:	429a      	cmp	r2, r3
 801226c:	db3c      	blt.n	80122e8 <_printf_float+0x370>
 801226e:	6823      	ldr	r3, [r4, #0]
 8012270:	07da      	lsls	r2, r3, #31
 8012272:	d439      	bmi.n	80122e8 <_printf_float+0x370>
 8012274:	9b08      	ldr	r3, [sp, #32]
 8012276:	9a04      	ldr	r2, [sp, #16]
 8012278:	9907      	ldr	r1, [sp, #28]
 801227a:	1a9a      	subs	r2, r3, r2
 801227c:	eba3 0901 	sub.w	r9, r3, r1
 8012280:	4591      	cmp	r9, r2
 8012282:	bfa8      	it	ge
 8012284:	4691      	movge	r9, r2
 8012286:	f1b9 0f00 	cmp.w	r9, #0
 801228a:	dc35      	bgt.n	80122f8 <_printf_float+0x380>
 801228c:	f04f 0800 	mov.w	r8, #0
 8012290:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012294:	f104 0a1a 	add.w	sl, r4, #26
 8012298:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801229c:	1a9b      	subs	r3, r3, r2
 801229e:	eba3 0309 	sub.w	r3, r3, r9
 80122a2:	4543      	cmp	r3, r8
 80122a4:	f77f af75 	ble.w	8012192 <_printf_float+0x21a>
 80122a8:	2301      	movs	r3, #1
 80122aa:	4652      	mov	r2, sl
 80122ac:	4631      	mov	r1, r6
 80122ae:	4628      	mov	r0, r5
 80122b0:	47b8      	blx	r7
 80122b2:	3001      	adds	r0, #1
 80122b4:	f43f aeae 	beq.w	8012014 <_printf_float+0x9c>
 80122b8:	f108 0801 	add.w	r8, r8, #1
 80122bc:	e7ec      	b.n	8012298 <_printf_float+0x320>
 80122be:	4613      	mov	r3, r2
 80122c0:	4631      	mov	r1, r6
 80122c2:	4642      	mov	r2, r8
 80122c4:	4628      	mov	r0, r5
 80122c6:	47b8      	blx	r7
 80122c8:	3001      	adds	r0, #1
 80122ca:	d1bf      	bne.n	801224c <_printf_float+0x2d4>
 80122cc:	e6a2      	b.n	8012014 <_printf_float+0x9c>
 80122ce:	2301      	movs	r3, #1
 80122d0:	4631      	mov	r1, r6
 80122d2:	4628      	mov	r0, r5
 80122d4:	9204      	str	r2, [sp, #16]
 80122d6:	47b8      	blx	r7
 80122d8:	3001      	adds	r0, #1
 80122da:	f43f ae9b 	beq.w	8012014 <_printf_float+0x9c>
 80122de:	9b05      	ldr	r3, [sp, #20]
 80122e0:	9a04      	ldr	r2, [sp, #16]
 80122e2:	3301      	adds	r3, #1
 80122e4:	9305      	str	r3, [sp, #20]
 80122e6:	e7b7      	b.n	8012258 <_printf_float+0x2e0>
 80122e8:	4653      	mov	r3, sl
 80122ea:	465a      	mov	r2, fp
 80122ec:	4631      	mov	r1, r6
 80122ee:	4628      	mov	r0, r5
 80122f0:	47b8      	blx	r7
 80122f2:	3001      	adds	r0, #1
 80122f4:	d1be      	bne.n	8012274 <_printf_float+0x2fc>
 80122f6:	e68d      	b.n	8012014 <_printf_float+0x9c>
 80122f8:	9a04      	ldr	r2, [sp, #16]
 80122fa:	464b      	mov	r3, r9
 80122fc:	4442      	add	r2, r8
 80122fe:	4631      	mov	r1, r6
 8012300:	4628      	mov	r0, r5
 8012302:	47b8      	blx	r7
 8012304:	3001      	adds	r0, #1
 8012306:	d1c1      	bne.n	801228c <_printf_float+0x314>
 8012308:	e684      	b.n	8012014 <_printf_float+0x9c>
 801230a:	9a08      	ldr	r2, [sp, #32]
 801230c:	2a01      	cmp	r2, #1
 801230e:	dc01      	bgt.n	8012314 <_printf_float+0x39c>
 8012310:	07db      	lsls	r3, r3, #31
 8012312:	d537      	bpl.n	8012384 <_printf_float+0x40c>
 8012314:	2301      	movs	r3, #1
 8012316:	4642      	mov	r2, r8
 8012318:	4631      	mov	r1, r6
 801231a:	4628      	mov	r0, r5
 801231c:	47b8      	blx	r7
 801231e:	3001      	adds	r0, #1
 8012320:	f43f ae78 	beq.w	8012014 <_printf_float+0x9c>
 8012324:	4653      	mov	r3, sl
 8012326:	465a      	mov	r2, fp
 8012328:	4631      	mov	r1, r6
 801232a:	4628      	mov	r0, r5
 801232c:	47b8      	blx	r7
 801232e:	3001      	adds	r0, #1
 8012330:	f43f ae70 	beq.w	8012014 <_printf_float+0x9c>
 8012334:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8012338:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801233c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012340:	d01b      	beq.n	801237a <_printf_float+0x402>
 8012342:	9b08      	ldr	r3, [sp, #32]
 8012344:	f108 0201 	add.w	r2, r8, #1
 8012348:	3b01      	subs	r3, #1
 801234a:	4631      	mov	r1, r6
 801234c:	4628      	mov	r0, r5
 801234e:	47b8      	blx	r7
 8012350:	3001      	adds	r0, #1
 8012352:	d10e      	bne.n	8012372 <_printf_float+0x3fa>
 8012354:	e65e      	b.n	8012014 <_printf_float+0x9c>
 8012356:	2301      	movs	r3, #1
 8012358:	464a      	mov	r2, r9
 801235a:	4631      	mov	r1, r6
 801235c:	4628      	mov	r0, r5
 801235e:	47b8      	blx	r7
 8012360:	3001      	adds	r0, #1
 8012362:	f43f ae57 	beq.w	8012014 <_printf_float+0x9c>
 8012366:	f108 0801 	add.w	r8, r8, #1
 801236a:	9b08      	ldr	r3, [sp, #32]
 801236c:	3b01      	subs	r3, #1
 801236e:	4543      	cmp	r3, r8
 8012370:	dcf1      	bgt.n	8012356 <_printf_float+0x3de>
 8012372:	9b04      	ldr	r3, [sp, #16]
 8012374:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012378:	e6db      	b.n	8012132 <_printf_float+0x1ba>
 801237a:	f04f 0800 	mov.w	r8, #0
 801237e:	f104 091a 	add.w	r9, r4, #26
 8012382:	e7f2      	b.n	801236a <_printf_float+0x3f2>
 8012384:	2301      	movs	r3, #1
 8012386:	4642      	mov	r2, r8
 8012388:	e7df      	b.n	801234a <_printf_float+0x3d2>
 801238a:	2301      	movs	r3, #1
 801238c:	464a      	mov	r2, r9
 801238e:	4631      	mov	r1, r6
 8012390:	4628      	mov	r0, r5
 8012392:	47b8      	blx	r7
 8012394:	3001      	adds	r0, #1
 8012396:	f43f ae3d 	beq.w	8012014 <_printf_float+0x9c>
 801239a:	f108 0801 	add.w	r8, r8, #1
 801239e:	68e3      	ldr	r3, [r4, #12]
 80123a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80123a2:	1a5b      	subs	r3, r3, r1
 80123a4:	4543      	cmp	r3, r8
 80123a6:	dcf0      	bgt.n	801238a <_printf_float+0x412>
 80123a8:	e6f7      	b.n	801219a <_printf_float+0x222>
 80123aa:	f04f 0800 	mov.w	r8, #0
 80123ae:	f104 0919 	add.w	r9, r4, #25
 80123b2:	e7f4      	b.n	801239e <_printf_float+0x426>

080123b4 <_printf_common>:
 80123b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80123b8:	4616      	mov	r6, r2
 80123ba:	4699      	mov	r9, r3
 80123bc:	688a      	ldr	r2, [r1, #8]
 80123be:	690b      	ldr	r3, [r1, #16]
 80123c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80123c4:	4293      	cmp	r3, r2
 80123c6:	bfb8      	it	lt
 80123c8:	4613      	movlt	r3, r2
 80123ca:	6033      	str	r3, [r6, #0]
 80123cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80123d0:	4607      	mov	r7, r0
 80123d2:	460c      	mov	r4, r1
 80123d4:	b10a      	cbz	r2, 80123da <_printf_common+0x26>
 80123d6:	3301      	adds	r3, #1
 80123d8:	6033      	str	r3, [r6, #0]
 80123da:	6823      	ldr	r3, [r4, #0]
 80123dc:	0699      	lsls	r1, r3, #26
 80123de:	bf42      	ittt	mi
 80123e0:	6833      	ldrmi	r3, [r6, #0]
 80123e2:	3302      	addmi	r3, #2
 80123e4:	6033      	strmi	r3, [r6, #0]
 80123e6:	6825      	ldr	r5, [r4, #0]
 80123e8:	f015 0506 	ands.w	r5, r5, #6
 80123ec:	d106      	bne.n	80123fc <_printf_common+0x48>
 80123ee:	f104 0a19 	add.w	sl, r4, #25
 80123f2:	68e3      	ldr	r3, [r4, #12]
 80123f4:	6832      	ldr	r2, [r6, #0]
 80123f6:	1a9b      	subs	r3, r3, r2
 80123f8:	42ab      	cmp	r3, r5
 80123fa:	dc26      	bgt.n	801244a <_printf_common+0x96>
 80123fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012400:	1e13      	subs	r3, r2, #0
 8012402:	6822      	ldr	r2, [r4, #0]
 8012404:	bf18      	it	ne
 8012406:	2301      	movne	r3, #1
 8012408:	0692      	lsls	r2, r2, #26
 801240a:	d42b      	bmi.n	8012464 <_printf_common+0xb0>
 801240c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012410:	4649      	mov	r1, r9
 8012412:	4638      	mov	r0, r7
 8012414:	47c0      	blx	r8
 8012416:	3001      	adds	r0, #1
 8012418:	d01e      	beq.n	8012458 <_printf_common+0xa4>
 801241a:	6823      	ldr	r3, [r4, #0]
 801241c:	68e5      	ldr	r5, [r4, #12]
 801241e:	6832      	ldr	r2, [r6, #0]
 8012420:	f003 0306 	and.w	r3, r3, #6
 8012424:	2b04      	cmp	r3, #4
 8012426:	bf08      	it	eq
 8012428:	1aad      	subeq	r5, r5, r2
 801242a:	68a3      	ldr	r3, [r4, #8]
 801242c:	6922      	ldr	r2, [r4, #16]
 801242e:	bf0c      	ite	eq
 8012430:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012434:	2500      	movne	r5, #0
 8012436:	4293      	cmp	r3, r2
 8012438:	bfc4      	itt	gt
 801243a:	1a9b      	subgt	r3, r3, r2
 801243c:	18ed      	addgt	r5, r5, r3
 801243e:	2600      	movs	r6, #0
 8012440:	341a      	adds	r4, #26
 8012442:	42b5      	cmp	r5, r6
 8012444:	d11a      	bne.n	801247c <_printf_common+0xc8>
 8012446:	2000      	movs	r0, #0
 8012448:	e008      	b.n	801245c <_printf_common+0xa8>
 801244a:	2301      	movs	r3, #1
 801244c:	4652      	mov	r2, sl
 801244e:	4649      	mov	r1, r9
 8012450:	4638      	mov	r0, r7
 8012452:	47c0      	blx	r8
 8012454:	3001      	adds	r0, #1
 8012456:	d103      	bne.n	8012460 <_printf_common+0xac>
 8012458:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801245c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012460:	3501      	adds	r5, #1
 8012462:	e7c6      	b.n	80123f2 <_printf_common+0x3e>
 8012464:	18e1      	adds	r1, r4, r3
 8012466:	1c5a      	adds	r2, r3, #1
 8012468:	2030      	movs	r0, #48	; 0x30
 801246a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801246e:	4422      	add	r2, r4
 8012470:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012474:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012478:	3302      	adds	r3, #2
 801247a:	e7c7      	b.n	801240c <_printf_common+0x58>
 801247c:	2301      	movs	r3, #1
 801247e:	4622      	mov	r2, r4
 8012480:	4649      	mov	r1, r9
 8012482:	4638      	mov	r0, r7
 8012484:	47c0      	blx	r8
 8012486:	3001      	adds	r0, #1
 8012488:	d0e6      	beq.n	8012458 <_printf_common+0xa4>
 801248a:	3601      	adds	r6, #1
 801248c:	e7d9      	b.n	8012442 <_printf_common+0x8e>
	...

08012490 <_printf_i>:
 8012490:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012494:	7e0f      	ldrb	r7, [r1, #24]
 8012496:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012498:	2f78      	cmp	r7, #120	; 0x78
 801249a:	4691      	mov	r9, r2
 801249c:	4680      	mov	r8, r0
 801249e:	460c      	mov	r4, r1
 80124a0:	469a      	mov	sl, r3
 80124a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80124a6:	d807      	bhi.n	80124b8 <_printf_i+0x28>
 80124a8:	2f62      	cmp	r7, #98	; 0x62
 80124aa:	d80a      	bhi.n	80124c2 <_printf_i+0x32>
 80124ac:	2f00      	cmp	r7, #0
 80124ae:	f000 80d8 	beq.w	8012662 <_printf_i+0x1d2>
 80124b2:	2f58      	cmp	r7, #88	; 0x58
 80124b4:	f000 80a3 	beq.w	80125fe <_printf_i+0x16e>
 80124b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80124bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80124c0:	e03a      	b.n	8012538 <_printf_i+0xa8>
 80124c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80124c6:	2b15      	cmp	r3, #21
 80124c8:	d8f6      	bhi.n	80124b8 <_printf_i+0x28>
 80124ca:	a101      	add	r1, pc, #4	; (adr r1, 80124d0 <_printf_i+0x40>)
 80124cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80124d0:	08012529 	.word	0x08012529
 80124d4:	0801253d 	.word	0x0801253d
 80124d8:	080124b9 	.word	0x080124b9
 80124dc:	080124b9 	.word	0x080124b9
 80124e0:	080124b9 	.word	0x080124b9
 80124e4:	080124b9 	.word	0x080124b9
 80124e8:	0801253d 	.word	0x0801253d
 80124ec:	080124b9 	.word	0x080124b9
 80124f0:	080124b9 	.word	0x080124b9
 80124f4:	080124b9 	.word	0x080124b9
 80124f8:	080124b9 	.word	0x080124b9
 80124fc:	08012649 	.word	0x08012649
 8012500:	0801256d 	.word	0x0801256d
 8012504:	0801262b 	.word	0x0801262b
 8012508:	080124b9 	.word	0x080124b9
 801250c:	080124b9 	.word	0x080124b9
 8012510:	0801266b 	.word	0x0801266b
 8012514:	080124b9 	.word	0x080124b9
 8012518:	0801256d 	.word	0x0801256d
 801251c:	080124b9 	.word	0x080124b9
 8012520:	080124b9 	.word	0x080124b9
 8012524:	08012633 	.word	0x08012633
 8012528:	682b      	ldr	r3, [r5, #0]
 801252a:	1d1a      	adds	r2, r3, #4
 801252c:	681b      	ldr	r3, [r3, #0]
 801252e:	602a      	str	r2, [r5, #0]
 8012530:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012534:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012538:	2301      	movs	r3, #1
 801253a:	e0a3      	b.n	8012684 <_printf_i+0x1f4>
 801253c:	6820      	ldr	r0, [r4, #0]
 801253e:	6829      	ldr	r1, [r5, #0]
 8012540:	0606      	lsls	r6, r0, #24
 8012542:	f101 0304 	add.w	r3, r1, #4
 8012546:	d50a      	bpl.n	801255e <_printf_i+0xce>
 8012548:	680e      	ldr	r6, [r1, #0]
 801254a:	602b      	str	r3, [r5, #0]
 801254c:	2e00      	cmp	r6, #0
 801254e:	da03      	bge.n	8012558 <_printf_i+0xc8>
 8012550:	232d      	movs	r3, #45	; 0x2d
 8012552:	4276      	negs	r6, r6
 8012554:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012558:	485e      	ldr	r0, [pc, #376]	; (80126d4 <_printf_i+0x244>)
 801255a:	230a      	movs	r3, #10
 801255c:	e019      	b.n	8012592 <_printf_i+0x102>
 801255e:	680e      	ldr	r6, [r1, #0]
 8012560:	602b      	str	r3, [r5, #0]
 8012562:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012566:	bf18      	it	ne
 8012568:	b236      	sxthne	r6, r6
 801256a:	e7ef      	b.n	801254c <_printf_i+0xbc>
 801256c:	682b      	ldr	r3, [r5, #0]
 801256e:	6820      	ldr	r0, [r4, #0]
 8012570:	1d19      	adds	r1, r3, #4
 8012572:	6029      	str	r1, [r5, #0]
 8012574:	0601      	lsls	r1, r0, #24
 8012576:	d501      	bpl.n	801257c <_printf_i+0xec>
 8012578:	681e      	ldr	r6, [r3, #0]
 801257a:	e002      	b.n	8012582 <_printf_i+0xf2>
 801257c:	0646      	lsls	r6, r0, #25
 801257e:	d5fb      	bpl.n	8012578 <_printf_i+0xe8>
 8012580:	881e      	ldrh	r6, [r3, #0]
 8012582:	4854      	ldr	r0, [pc, #336]	; (80126d4 <_printf_i+0x244>)
 8012584:	2f6f      	cmp	r7, #111	; 0x6f
 8012586:	bf0c      	ite	eq
 8012588:	2308      	moveq	r3, #8
 801258a:	230a      	movne	r3, #10
 801258c:	2100      	movs	r1, #0
 801258e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012592:	6865      	ldr	r5, [r4, #4]
 8012594:	60a5      	str	r5, [r4, #8]
 8012596:	2d00      	cmp	r5, #0
 8012598:	bfa2      	ittt	ge
 801259a:	6821      	ldrge	r1, [r4, #0]
 801259c:	f021 0104 	bicge.w	r1, r1, #4
 80125a0:	6021      	strge	r1, [r4, #0]
 80125a2:	b90e      	cbnz	r6, 80125a8 <_printf_i+0x118>
 80125a4:	2d00      	cmp	r5, #0
 80125a6:	d04d      	beq.n	8012644 <_printf_i+0x1b4>
 80125a8:	4615      	mov	r5, r2
 80125aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80125ae:	fb03 6711 	mls	r7, r3, r1, r6
 80125b2:	5dc7      	ldrb	r7, [r0, r7]
 80125b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80125b8:	4637      	mov	r7, r6
 80125ba:	42bb      	cmp	r3, r7
 80125bc:	460e      	mov	r6, r1
 80125be:	d9f4      	bls.n	80125aa <_printf_i+0x11a>
 80125c0:	2b08      	cmp	r3, #8
 80125c2:	d10b      	bne.n	80125dc <_printf_i+0x14c>
 80125c4:	6823      	ldr	r3, [r4, #0]
 80125c6:	07de      	lsls	r6, r3, #31
 80125c8:	d508      	bpl.n	80125dc <_printf_i+0x14c>
 80125ca:	6923      	ldr	r3, [r4, #16]
 80125cc:	6861      	ldr	r1, [r4, #4]
 80125ce:	4299      	cmp	r1, r3
 80125d0:	bfde      	ittt	le
 80125d2:	2330      	movle	r3, #48	; 0x30
 80125d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80125d8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80125dc:	1b52      	subs	r2, r2, r5
 80125de:	6122      	str	r2, [r4, #16]
 80125e0:	f8cd a000 	str.w	sl, [sp]
 80125e4:	464b      	mov	r3, r9
 80125e6:	aa03      	add	r2, sp, #12
 80125e8:	4621      	mov	r1, r4
 80125ea:	4640      	mov	r0, r8
 80125ec:	f7ff fee2 	bl	80123b4 <_printf_common>
 80125f0:	3001      	adds	r0, #1
 80125f2:	d14c      	bne.n	801268e <_printf_i+0x1fe>
 80125f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80125f8:	b004      	add	sp, #16
 80125fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80125fe:	4835      	ldr	r0, [pc, #212]	; (80126d4 <_printf_i+0x244>)
 8012600:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012604:	6829      	ldr	r1, [r5, #0]
 8012606:	6823      	ldr	r3, [r4, #0]
 8012608:	f851 6b04 	ldr.w	r6, [r1], #4
 801260c:	6029      	str	r1, [r5, #0]
 801260e:	061d      	lsls	r5, r3, #24
 8012610:	d514      	bpl.n	801263c <_printf_i+0x1ac>
 8012612:	07df      	lsls	r7, r3, #31
 8012614:	bf44      	itt	mi
 8012616:	f043 0320 	orrmi.w	r3, r3, #32
 801261a:	6023      	strmi	r3, [r4, #0]
 801261c:	b91e      	cbnz	r6, 8012626 <_printf_i+0x196>
 801261e:	6823      	ldr	r3, [r4, #0]
 8012620:	f023 0320 	bic.w	r3, r3, #32
 8012624:	6023      	str	r3, [r4, #0]
 8012626:	2310      	movs	r3, #16
 8012628:	e7b0      	b.n	801258c <_printf_i+0xfc>
 801262a:	6823      	ldr	r3, [r4, #0]
 801262c:	f043 0320 	orr.w	r3, r3, #32
 8012630:	6023      	str	r3, [r4, #0]
 8012632:	2378      	movs	r3, #120	; 0x78
 8012634:	4828      	ldr	r0, [pc, #160]	; (80126d8 <_printf_i+0x248>)
 8012636:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801263a:	e7e3      	b.n	8012604 <_printf_i+0x174>
 801263c:	0659      	lsls	r1, r3, #25
 801263e:	bf48      	it	mi
 8012640:	b2b6      	uxthmi	r6, r6
 8012642:	e7e6      	b.n	8012612 <_printf_i+0x182>
 8012644:	4615      	mov	r5, r2
 8012646:	e7bb      	b.n	80125c0 <_printf_i+0x130>
 8012648:	682b      	ldr	r3, [r5, #0]
 801264a:	6826      	ldr	r6, [r4, #0]
 801264c:	6961      	ldr	r1, [r4, #20]
 801264e:	1d18      	adds	r0, r3, #4
 8012650:	6028      	str	r0, [r5, #0]
 8012652:	0635      	lsls	r5, r6, #24
 8012654:	681b      	ldr	r3, [r3, #0]
 8012656:	d501      	bpl.n	801265c <_printf_i+0x1cc>
 8012658:	6019      	str	r1, [r3, #0]
 801265a:	e002      	b.n	8012662 <_printf_i+0x1d2>
 801265c:	0670      	lsls	r0, r6, #25
 801265e:	d5fb      	bpl.n	8012658 <_printf_i+0x1c8>
 8012660:	8019      	strh	r1, [r3, #0]
 8012662:	2300      	movs	r3, #0
 8012664:	6123      	str	r3, [r4, #16]
 8012666:	4615      	mov	r5, r2
 8012668:	e7ba      	b.n	80125e0 <_printf_i+0x150>
 801266a:	682b      	ldr	r3, [r5, #0]
 801266c:	1d1a      	adds	r2, r3, #4
 801266e:	602a      	str	r2, [r5, #0]
 8012670:	681d      	ldr	r5, [r3, #0]
 8012672:	6862      	ldr	r2, [r4, #4]
 8012674:	2100      	movs	r1, #0
 8012676:	4628      	mov	r0, r5
 8012678:	f7ed fe3a 	bl	80002f0 <memchr>
 801267c:	b108      	cbz	r0, 8012682 <_printf_i+0x1f2>
 801267e:	1b40      	subs	r0, r0, r5
 8012680:	6060      	str	r0, [r4, #4]
 8012682:	6863      	ldr	r3, [r4, #4]
 8012684:	6123      	str	r3, [r4, #16]
 8012686:	2300      	movs	r3, #0
 8012688:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801268c:	e7a8      	b.n	80125e0 <_printf_i+0x150>
 801268e:	6923      	ldr	r3, [r4, #16]
 8012690:	462a      	mov	r2, r5
 8012692:	4649      	mov	r1, r9
 8012694:	4640      	mov	r0, r8
 8012696:	47d0      	blx	sl
 8012698:	3001      	adds	r0, #1
 801269a:	d0ab      	beq.n	80125f4 <_printf_i+0x164>
 801269c:	6823      	ldr	r3, [r4, #0]
 801269e:	079b      	lsls	r3, r3, #30
 80126a0:	d413      	bmi.n	80126ca <_printf_i+0x23a>
 80126a2:	68e0      	ldr	r0, [r4, #12]
 80126a4:	9b03      	ldr	r3, [sp, #12]
 80126a6:	4298      	cmp	r0, r3
 80126a8:	bfb8      	it	lt
 80126aa:	4618      	movlt	r0, r3
 80126ac:	e7a4      	b.n	80125f8 <_printf_i+0x168>
 80126ae:	2301      	movs	r3, #1
 80126b0:	4632      	mov	r2, r6
 80126b2:	4649      	mov	r1, r9
 80126b4:	4640      	mov	r0, r8
 80126b6:	47d0      	blx	sl
 80126b8:	3001      	adds	r0, #1
 80126ba:	d09b      	beq.n	80125f4 <_printf_i+0x164>
 80126bc:	3501      	adds	r5, #1
 80126be:	68e3      	ldr	r3, [r4, #12]
 80126c0:	9903      	ldr	r1, [sp, #12]
 80126c2:	1a5b      	subs	r3, r3, r1
 80126c4:	42ab      	cmp	r3, r5
 80126c6:	dcf2      	bgt.n	80126ae <_printf_i+0x21e>
 80126c8:	e7eb      	b.n	80126a2 <_printf_i+0x212>
 80126ca:	2500      	movs	r5, #0
 80126cc:	f104 0619 	add.w	r6, r4, #25
 80126d0:	e7f5      	b.n	80126be <_printf_i+0x22e>
 80126d2:	bf00      	nop
 80126d4:	08014c26 	.word	0x08014c26
 80126d8:	08014c37 	.word	0x08014c37

080126dc <_sbrk_r>:
 80126dc:	b538      	push	{r3, r4, r5, lr}
 80126de:	4d06      	ldr	r5, [pc, #24]	; (80126f8 <_sbrk_r+0x1c>)
 80126e0:	2300      	movs	r3, #0
 80126e2:	4604      	mov	r4, r0
 80126e4:	4608      	mov	r0, r1
 80126e6:	602b      	str	r3, [r5, #0]
 80126e8:	f7f3 fdcc 	bl	8006284 <_sbrk>
 80126ec:	1c43      	adds	r3, r0, #1
 80126ee:	d102      	bne.n	80126f6 <_sbrk_r+0x1a>
 80126f0:	682b      	ldr	r3, [r5, #0]
 80126f2:	b103      	cbz	r3, 80126f6 <_sbrk_r+0x1a>
 80126f4:	6023      	str	r3, [r4, #0]
 80126f6:	bd38      	pop	{r3, r4, r5, pc}
 80126f8:	240009f4 	.word	0x240009f4

080126fc <_raise_r>:
 80126fc:	291f      	cmp	r1, #31
 80126fe:	b538      	push	{r3, r4, r5, lr}
 8012700:	4604      	mov	r4, r0
 8012702:	460d      	mov	r5, r1
 8012704:	d904      	bls.n	8012710 <_raise_r+0x14>
 8012706:	2316      	movs	r3, #22
 8012708:	6003      	str	r3, [r0, #0]
 801270a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801270e:	bd38      	pop	{r3, r4, r5, pc}
 8012710:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012712:	b112      	cbz	r2, 801271a <_raise_r+0x1e>
 8012714:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012718:	b94b      	cbnz	r3, 801272e <_raise_r+0x32>
 801271a:	4620      	mov	r0, r4
 801271c:	f000 f830 	bl	8012780 <_getpid_r>
 8012720:	462a      	mov	r2, r5
 8012722:	4601      	mov	r1, r0
 8012724:	4620      	mov	r0, r4
 8012726:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801272a:	f000 b817 	b.w	801275c <_kill_r>
 801272e:	2b01      	cmp	r3, #1
 8012730:	d00a      	beq.n	8012748 <_raise_r+0x4c>
 8012732:	1c59      	adds	r1, r3, #1
 8012734:	d103      	bne.n	801273e <_raise_r+0x42>
 8012736:	2316      	movs	r3, #22
 8012738:	6003      	str	r3, [r0, #0]
 801273a:	2001      	movs	r0, #1
 801273c:	e7e7      	b.n	801270e <_raise_r+0x12>
 801273e:	2400      	movs	r4, #0
 8012740:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012744:	4628      	mov	r0, r5
 8012746:	4798      	blx	r3
 8012748:	2000      	movs	r0, #0
 801274a:	e7e0      	b.n	801270e <_raise_r+0x12>

0801274c <raise>:
 801274c:	4b02      	ldr	r3, [pc, #8]	; (8012758 <raise+0xc>)
 801274e:	4601      	mov	r1, r0
 8012750:	6818      	ldr	r0, [r3, #0]
 8012752:	f7ff bfd3 	b.w	80126fc <_raise_r>
 8012756:	bf00      	nop
 8012758:	24000010 	.word	0x24000010

0801275c <_kill_r>:
 801275c:	b538      	push	{r3, r4, r5, lr}
 801275e:	4d07      	ldr	r5, [pc, #28]	; (801277c <_kill_r+0x20>)
 8012760:	2300      	movs	r3, #0
 8012762:	4604      	mov	r4, r0
 8012764:	4608      	mov	r0, r1
 8012766:	4611      	mov	r1, r2
 8012768:	602b      	str	r3, [r5, #0]
 801276a:	f7f3 fd03 	bl	8006174 <_kill>
 801276e:	1c43      	adds	r3, r0, #1
 8012770:	d102      	bne.n	8012778 <_kill_r+0x1c>
 8012772:	682b      	ldr	r3, [r5, #0]
 8012774:	b103      	cbz	r3, 8012778 <_kill_r+0x1c>
 8012776:	6023      	str	r3, [r4, #0]
 8012778:	bd38      	pop	{r3, r4, r5, pc}
 801277a:	bf00      	nop
 801277c:	240009f4 	.word	0x240009f4

08012780 <_getpid_r>:
 8012780:	f7f3 bcf0 	b.w	8006164 <_getpid>

08012784 <quorem>:
 8012784:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012788:	6903      	ldr	r3, [r0, #16]
 801278a:	690c      	ldr	r4, [r1, #16]
 801278c:	42a3      	cmp	r3, r4
 801278e:	4607      	mov	r7, r0
 8012790:	f2c0 8081 	blt.w	8012896 <quorem+0x112>
 8012794:	3c01      	subs	r4, #1
 8012796:	f101 0814 	add.w	r8, r1, #20
 801279a:	f100 0514 	add.w	r5, r0, #20
 801279e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80127a2:	9301      	str	r3, [sp, #4]
 80127a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80127a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80127ac:	3301      	adds	r3, #1
 80127ae:	429a      	cmp	r2, r3
 80127b0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80127b4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80127b8:	fbb2 f6f3 	udiv	r6, r2, r3
 80127bc:	d331      	bcc.n	8012822 <quorem+0x9e>
 80127be:	f04f 0e00 	mov.w	lr, #0
 80127c2:	4640      	mov	r0, r8
 80127c4:	46ac      	mov	ip, r5
 80127c6:	46f2      	mov	sl, lr
 80127c8:	f850 2b04 	ldr.w	r2, [r0], #4
 80127cc:	b293      	uxth	r3, r2
 80127ce:	fb06 e303 	mla	r3, r6, r3, lr
 80127d2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80127d6:	b29b      	uxth	r3, r3
 80127d8:	ebaa 0303 	sub.w	r3, sl, r3
 80127dc:	f8dc a000 	ldr.w	sl, [ip]
 80127e0:	0c12      	lsrs	r2, r2, #16
 80127e2:	fa13 f38a 	uxtah	r3, r3, sl
 80127e6:	fb06 e202 	mla	r2, r6, r2, lr
 80127ea:	9300      	str	r3, [sp, #0]
 80127ec:	9b00      	ldr	r3, [sp, #0]
 80127ee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80127f2:	b292      	uxth	r2, r2
 80127f4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80127f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80127fc:	f8bd 3000 	ldrh.w	r3, [sp]
 8012800:	4581      	cmp	r9, r0
 8012802:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012806:	f84c 3b04 	str.w	r3, [ip], #4
 801280a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801280e:	d2db      	bcs.n	80127c8 <quorem+0x44>
 8012810:	f855 300b 	ldr.w	r3, [r5, fp]
 8012814:	b92b      	cbnz	r3, 8012822 <quorem+0x9e>
 8012816:	9b01      	ldr	r3, [sp, #4]
 8012818:	3b04      	subs	r3, #4
 801281a:	429d      	cmp	r5, r3
 801281c:	461a      	mov	r2, r3
 801281e:	d32e      	bcc.n	801287e <quorem+0xfa>
 8012820:	613c      	str	r4, [r7, #16]
 8012822:	4638      	mov	r0, r7
 8012824:	f001 f83c 	bl	80138a0 <__mcmp>
 8012828:	2800      	cmp	r0, #0
 801282a:	db24      	blt.n	8012876 <quorem+0xf2>
 801282c:	3601      	adds	r6, #1
 801282e:	4628      	mov	r0, r5
 8012830:	f04f 0c00 	mov.w	ip, #0
 8012834:	f858 2b04 	ldr.w	r2, [r8], #4
 8012838:	f8d0 e000 	ldr.w	lr, [r0]
 801283c:	b293      	uxth	r3, r2
 801283e:	ebac 0303 	sub.w	r3, ip, r3
 8012842:	0c12      	lsrs	r2, r2, #16
 8012844:	fa13 f38e 	uxtah	r3, r3, lr
 8012848:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801284c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012850:	b29b      	uxth	r3, r3
 8012852:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012856:	45c1      	cmp	r9, r8
 8012858:	f840 3b04 	str.w	r3, [r0], #4
 801285c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012860:	d2e8      	bcs.n	8012834 <quorem+0xb0>
 8012862:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012866:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801286a:	b922      	cbnz	r2, 8012876 <quorem+0xf2>
 801286c:	3b04      	subs	r3, #4
 801286e:	429d      	cmp	r5, r3
 8012870:	461a      	mov	r2, r3
 8012872:	d30a      	bcc.n	801288a <quorem+0x106>
 8012874:	613c      	str	r4, [r7, #16]
 8012876:	4630      	mov	r0, r6
 8012878:	b003      	add	sp, #12
 801287a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801287e:	6812      	ldr	r2, [r2, #0]
 8012880:	3b04      	subs	r3, #4
 8012882:	2a00      	cmp	r2, #0
 8012884:	d1cc      	bne.n	8012820 <quorem+0x9c>
 8012886:	3c01      	subs	r4, #1
 8012888:	e7c7      	b.n	801281a <quorem+0x96>
 801288a:	6812      	ldr	r2, [r2, #0]
 801288c:	3b04      	subs	r3, #4
 801288e:	2a00      	cmp	r2, #0
 8012890:	d1f0      	bne.n	8012874 <quorem+0xf0>
 8012892:	3c01      	subs	r4, #1
 8012894:	e7eb      	b.n	801286e <quorem+0xea>
 8012896:	2000      	movs	r0, #0
 8012898:	e7ee      	b.n	8012878 <quorem+0xf4>
 801289a:	0000      	movs	r0, r0
 801289c:	0000      	movs	r0, r0
	...

080128a0 <_dtoa_r>:
 80128a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128a4:	ed2d 8b02 	vpush	{d8}
 80128a8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80128aa:	b091      	sub	sp, #68	; 0x44
 80128ac:	ed8d 0b02 	vstr	d0, [sp, #8]
 80128b0:	ec59 8b10 	vmov	r8, r9, d0
 80128b4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80128b6:	9106      	str	r1, [sp, #24]
 80128b8:	4606      	mov	r6, r0
 80128ba:	9208      	str	r2, [sp, #32]
 80128bc:	930c      	str	r3, [sp, #48]	; 0x30
 80128be:	b975      	cbnz	r5, 80128de <_dtoa_r+0x3e>
 80128c0:	2010      	movs	r0, #16
 80128c2:	f7ff f9c1 	bl	8011c48 <malloc>
 80128c6:	4602      	mov	r2, r0
 80128c8:	6270      	str	r0, [r6, #36]	; 0x24
 80128ca:	b920      	cbnz	r0, 80128d6 <_dtoa_r+0x36>
 80128cc:	4baa      	ldr	r3, [pc, #680]	; (8012b78 <_dtoa_r+0x2d8>)
 80128ce:	21ea      	movs	r1, #234	; 0xea
 80128d0:	48aa      	ldr	r0, [pc, #680]	; (8012b7c <_dtoa_r+0x2dc>)
 80128d2:	f001 f8fd 	bl	8013ad0 <__assert_func>
 80128d6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80128da:	6005      	str	r5, [r0, #0]
 80128dc:	60c5      	str	r5, [r0, #12]
 80128de:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80128e0:	6819      	ldr	r1, [r3, #0]
 80128e2:	b151      	cbz	r1, 80128fa <_dtoa_r+0x5a>
 80128e4:	685a      	ldr	r2, [r3, #4]
 80128e6:	604a      	str	r2, [r1, #4]
 80128e8:	2301      	movs	r3, #1
 80128ea:	4093      	lsls	r3, r2
 80128ec:	608b      	str	r3, [r1, #8]
 80128ee:	4630      	mov	r0, r6
 80128f0:	f000 fd94 	bl	801341c <_Bfree>
 80128f4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80128f6:	2200      	movs	r2, #0
 80128f8:	601a      	str	r2, [r3, #0]
 80128fa:	f1b9 0300 	subs.w	r3, r9, #0
 80128fe:	bfbb      	ittet	lt
 8012900:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012904:	9303      	strlt	r3, [sp, #12]
 8012906:	2300      	movge	r3, #0
 8012908:	2201      	movlt	r2, #1
 801290a:	bfac      	ite	ge
 801290c:	6023      	strge	r3, [r4, #0]
 801290e:	6022      	strlt	r2, [r4, #0]
 8012910:	4b9b      	ldr	r3, [pc, #620]	; (8012b80 <_dtoa_r+0x2e0>)
 8012912:	9c03      	ldr	r4, [sp, #12]
 8012914:	43a3      	bics	r3, r4
 8012916:	d11c      	bne.n	8012952 <_dtoa_r+0xb2>
 8012918:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801291a:	f242 730f 	movw	r3, #9999	; 0x270f
 801291e:	6013      	str	r3, [r2, #0]
 8012920:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8012924:	ea53 0308 	orrs.w	r3, r3, r8
 8012928:	f000 84fd 	beq.w	8013326 <_dtoa_r+0xa86>
 801292c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801292e:	b963      	cbnz	r3, 801294a <_dtoa_r+0xaa>
 8012930:	4b94      	ldr	r3, [pc, #592]	; (8012b84 <_dtoa_r+0x2e4>)
 8012932:	e01f      	b.n	8012974 <_dtoa_r+0xd4>
 8012934:	4b94      	ldr	r3, [pc, #592]	; (8012b88 <_dtoa_r+0x2e8>)
 8012936:	9301      	str	r3, [sp, #4]
 8012938:	3308      	adds	r3, #8
 801293a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801293c:	6013      	str	r3, [r2, #0]
 801293e:	9801      	ldr	r0, [sp, #4]
 8012940:	b011      	add	sp, #68	; 0x44
 8012942:	ecbd 8b02 	vpop	{d8}
 8012946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801294a:	4b8e      	ldr	r3, [pc, #568]	; (8012b84 <_dtoa_r+0x2e4>)
 801294c:	9301      	str	r3, [sp, #4]
 801294e:	3303      	adds	r3, #3
 8012950:	e7f3      	b.n	801293a <_dtoa_r+0x9a>
 8012952:	ed9d 8b02 	vldr	d8, [sp, #8]
 8012956:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801295a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801295e:	d10b      	bne.n	8012978 <_dtoa_r+0xd8>
 8012960:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012962:	2301      	movs	r3, #1
 8012964:	6013      	str	r3, [r2, #0]
 8012966:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012968:	2b00      	cmp	r3, #0
 801296a:	f000 84d9 	beq.w	8013320 <_dtoa_r+0xa80>
 801296e:	4887      	ldr	r0, [pc, #540]	; (8012b8c <_dtoa_r+0x2ec>)
 8012970:	6018      	str	r0, [r3, #0]
 8012972:	1e43      	subs	r3, r0, #1
 8012974:	9301      	str	r3, [sp, #4]
 8012976:	e7e2      	b.n	801293e <_dtoa_r+0x9e>
 8012978:	a90f      	add	r1, sp, #60	; 0x3c
 801297a:	aa0e      	add	r2, sp, #56	; 0x38
 801297c:	4630      	mov	r0, r6
 801297e:	eeb0 0b48 	vmov.f64	d0, d8
 8012982:	f001 f833 	bl	80139ec <__d2b>
 8012986:	f3c4 510a 	ubfx	r1, r4, #20, #11
 801298a:	4605      	mov	r5, r0
 801298c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801298e:	2900      	cmp	r1, #0
 8012990:	d046      	beq.n	8012a20 <_dtoa_r+0x180>
 8012992:	ee18 4a90 	vmov	r4, s17
 8012996:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801299a:	ec53 2b18 	vmov	r2, r3, d8
 801299e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80129a2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80129a6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80129aa:	2400      	movs	r4, #0
 80129ac:	ec43 2b16 	vmov	d6, r2, r3
 80129b0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80129b4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8012b60 <_dtoa_r+0x2c0>
 80129b8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80129bc:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8012b68 <_dtoa_r+0x2c8>
 80129c0:	eea7 6b05 	vfma.f64	d6, d7, d5
 80129c4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8012b70 <_dtoa_r+0x2d0>
 80129c8:	ee07 1a90 	vmov	s15, r1
 80129cc:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80129d0:	eeb0 7b46 	vmov.f64	d7, d6
 80129d4:	eea4 7b05 	vfma.f64	d7, d4, d5
 80129d8:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80129dc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80129e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129e4:	ee16 ba90 	vmov	fp, s13
 80129e8:	940a      	str	r4, [sp, #40]	; 0x28
 80129ea:	d508      	bpl.n	80129fe <_dtoa_r+0x15e>
 80129ec:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80129f0:	eeb4 6b47 	vcmp.f64	d6, d7
 80129f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129f8:	bf18      	it	ne
 80129fa:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 80129fe:	f1bb 0f16 	cmp.w	fp, #22
 8012a02:	d82f      	bhi.n	8012a64 <_dtoa_r+0x1c4>
 8012a04:	4b62      	ldr	r3, [pc, #392]	; (8012b90 <_dtoa_r+0x2f0>)
 8012a06:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012a0a:	ed93 7b00 	vldr	d7, [r3]
 8012a0e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8012a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a16:	d501      	bpl.n	8012a1c <_dtoa_r+0x17c>
 8012a18:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8012a1c:	2300      	movs	r3, #0
 8012a1e:	e022      	b.n	8012a66 <_dtoa_r+0x1c6>
 8012a20:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012a22:	4401      	add	r1, r0
 8012a24:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8012a28:	2b20      	cmp	r3, #32
 8012a2a:	bfc1      	itttt	gt
 8012a2c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012a30:	fa04 f303 	lslgt.w	r3, r4, r3
 8012a34:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8012a38:	fa28 f804 	lsrgt.w	r8, r8, r4
 8012a3c:	bfd6      	itet	le
 8012a3e:	f1c3 0320 	rsble	r3, r3, #32
 8012a42:	ea43 0808 	orrgt.w	r8, r3, r8
 8012a46:	fa08 f803 	lslle.w	r8, r8, r3
 8012a4a:	ee07 8a90 	vmov	s15, r8
 8012a4e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8012a52:	3901      	subs	r1, #1
 8012a54:	ee17 4a90 	vmov	r4, s15
 8012a58:	ec53 2b17 	vmov	r2, r3, d7
 8012a5c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8012a60:	2401      	movs	r4, #1
 8012a62:	e7a3      	b.n	80129ac <_dtoa_r+0x10c>
 8012a64:	2301      	movs	r3, #1
 8012a66:	930b      	str	r3, [sp, #44]	; 0x2c
 8012a68:	1a43      	subs	r3, r0, r1
 8012a6a:	1e5a      	subs	r2, r3, #1
 8012a6c:	bf45      	ittet	mi
 8012a6e:	f1c3 0301 	rsbmi	r3, r3, #1
 8012a72:	9304      	strmi	r3, [sp, #16]
 8012a74:	2300      	movpl	r3, #0
 8012a76:	2300      	movmi	r3, #0
 8012a78:	9205      	str	r2, [sp, #20]
 8012a7a:	bf54      	ite	pl
 8012a7c:	9304      	strpl	r3, [sp, #16]
 8012a7e:	9305      	strmi	r3, [sp, #20]
 8012a80:	f1bb 0f00 	cmp.w	fp, #0
 8012a84:	db18      	blt.n	8012ab8 <_dtoa_r+0x218>
 8012a86:	9b05      	ldr	r3, [sp, #20]
 8012a88:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8012a8c:	445b      	add	r3, fp
 8012a8e:	9305      	str	r3, [sp, #20]
 8012a90:	2300      	movs	r3, #0
 8012a92:	9a06      	ldr	r2, [sp, #24]
 8012a94:	2a09      	cmp	r2, #9
 8012a96:	d849      	bhi.n	8012b2c <_dtoa_r+0x28c>
 8012a98:	2a05      	cmp	r2, #5
 8012a9a:	bfc4      	itt	gt
 8012a9c:	3a04      	subgt	r2, #4
 8012a9e:	9206      	strgt	r2, [sp, #24]
 8012aa0:	9a06      	ldr	r2, [sp, #24]
 8012aa2:	f1a2 0202 	sub.w	r2, r2, #2
 8012aa6:	bfcc      	ite	gt
 8012aa8:	2400      	movgt	r4, #0
 8012aaa:	2401      	movle	r4, #1
 8012aac:	2a03      	cmp	r2, #3
 8012aae:	d848      	bhi.n	8012b42 <_dtoa_r+0x2a2>
 8012ab0:	e8df f002 	tbb	[pc, r2]
 8012ab4:	3a2c2e0b 	.word	0x3a2c2e0b
 8012ab8:	9b04      	ldr	r3, [sp, #16]
 8012aba:	2200      	movs	r2, #0
 8012abc:	eba3 030b 	sub.w	r3, r3, fp
 8012ac0:	9304      	str	r3, [sp, #16]
 8012ac2:	9209      	str	r2, [sp, #36]	; 0x24
 8012ac4:	f1cb 0300 	rsb	r3, fp, #0
 8012ac8:	e7e3      	b.n	8012a92 <_dtoa_r+0x1f2>
 8012aca:	2200      	movs	r2, #0
 8012acc:	9207      	str	r2, [sp, #28]
 8012ace:	9a08      	ldr	r2, [sp, #32]
 8012ad0:	2a00      	cmp	r2, #0
 8012ad2:	dc39      	bgt.n	8012b48 <_dtoa_r+0x2a8>
 8012ad4:	f04f 0a01 	mov.w	sl, #1
 8012ad8:	46d1      	mov	r9, sl
 8012ada:	4652      	mov	r2, sl
 8012adc:	f8cd a020 	str.w	sl, [sp, #32]
 8012ae0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8012ae2:	2100      	movs	r1, #0
 8012ae4:	6079      	str	r1, [r7, #4]
 8012ae6:	2004      	movs	r0, #4
 8012ae8:	f100 0c14 	add.w	ip, r0, #20
 8012aec:	4594      	cmp	ip, r2
 8012aee:	6879      	ldr	r1, [r7, #4]
 8012af0:	d92f      	bls.n	8012b52 <_dtoa_r+0x2b2>
 8012af2:	4630      	mov	r0, r6
 8012af4:	930d      	str	r3, [sp, #52]	; 0x34
 8012af6:	f000 fc51 	bl	801339c <_Balloc>
 8012afa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012afc:	9001      	str	r0, [sp, #4]
 8012afe:	4602      	mov	r2, r0
 8012b00:	2800      	cmp	r0, #0
 8012b02:	d149      	bne.n	8012b98 <_dtoa_r+0x2f8>
 8012b04:	4b23      	ldr	r3, [pc, #140]	; (8012b94 <_dtoa_r+0x2f4>)
 8012b06:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8012b0a:	e6e1      	b.n	80128d0 <_dtoa_r+0x30>
 8012b0c:	2201      	movs	r2, #1
 8012b0e:	e7dd      	b.n	8012acc <_dtoa_r+0x22c>
 8012b10:	2200      	movs	r2, #0
 8012b12:	9207      	str	r2, [sp, #28]
 8012b14:	9a08      	ldr	r2, [sp, #32]
 8012b16:	eb0b 0a02 	add.w	sl, fp, r2
 8012b1a:	f10a 0901 	add.w	r9, sl, #1
 8012b1e:	464a      	mov	r2, r9
 8012b20:	2a01      	cmp	r2, #1
 8012b22:	bfb8      	it	lt
 8012b24:	2201      	movlt	r2, #1
 8012b26:	e7db      	b.n	8012ae0 <_dtoa_r+0x240>
 8012b28:	2201      	movs	r2, #1
 8012b2a:	e7f2      	b.n	8012b12 <_dtoa_r+0x272>
 8012b2c:	2401      	movs	r4, #1
 8012b2e:	2200      	movs	r2, #0
 8012b30:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8012b34:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8012b38:	2100      	movs	r1, #0
 8012b3a:	46d1      	mov	r9, sl
 8012b3c:	2212      	movs	r2, #18
 8012b3e:	9108      	str	r1, [sp, #32]
 8012b40:	e7ce      	b.n	8012ae0 <_dtoa_r+0x240>
 8012b42:	2201      	movs	r2, #1
 8012b44:	9207      	str	r2, [sp, #28]
 8012b46:	e7f5      	b.n	8012b34 <_dtoa_r+0x294>
 8012b48:	f8dd a020 	ldr.w	sl, [sp, #32]
 8012b4c:	46d1      	mov	r9, sl
 8012b4e:	4652      	mov	r2, sl
 8012b50:	e7c6      	b.n	8012ae0 <_dtoa_r+0x240>
 8012b52:	3101      	adds	r1, #1
 8012b54:	6079      	str	r1, [r7, #4]
 8012b56:	0040      	lsls	r0, r0, #1
 8012b58:	e7c6      	b.n	8012ae8 <_dtoa_r+0x248>
 8012b5a:	bf00      	nop
 8012b5c:	f3af 8000 	nop.w
 8012b60:	636f4361 	.word	0x636f4361
 8012b64:	3fd287a7 	.word	0x3fd287a7
 8012b68:	8b60c8b3 	.word	0x8b60c8b3
 8012b6c:	3fc68a28 	.word	0x3fc68a28
 8012b70:	509f79fb 	.word	0x509f79fb
 8012b74:	3fd34413 	.word	0x3fd34413
 8012b78:	08014c55 	.word	0x08014c55
 8012b7c:	08014c6c 	.word	0x08014c6c
 8012b80:	7ff00000 	.word	0x7ff00000
 8012b84:	08014c51 	.word	0x08014c51
 8012b88:	08014c48 	.word	0x08014c48
 8012b8c:	08014c25 	.word	0x08014c25
 8012b90:	08014d60 	.word	0x08014d60
 8012b94:	08014cc7 	.word	0x08014cc7
 8012b98:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8012b9a:	9901      	ldr	r1, [sp, #4]
 8012b9c:	6011      	str	r1, [r2, #0]
 8012b9e:	f1b9 0f0e 	cmp.w	r9, #14
 8012ba2:	d86c      	bhi.n	8012c7e <_dtoa_r+0x3de>
 8012ba4:	2c00      	cmp	r4, #0
 8012ba6:	d06a      	beq.n	8012c7e <_dtoa_r+0x3de>
 8012ba8:	f1bb 0f00 	cmp.w	fp, #0
 8012bac:	f340 80a0 	ble.w	8012cf0 <_dtoa_r+0x450>
 8012bb0:	49c1      	ldr	r1, [pc, #772]	; (8012eb8 <_dtoa_r+0x618>)
 8012bb2:	f00b 020f 	and.w	r2, fp, #15
 8012bb6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8012bba:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8012bbe:	ed92 7b00 	vldr	d7, [r2]
 8012bc2:	ea4f 112b 	mov.w	r1, fp, asr #4
 8012bc6:	f000 8087 	beq.w	8012cd8 <_dtoa_r+0x438>
 8012bca:	4abc      	ldr	r2, [pc, #752]	; (8012ebc <_dtoa_r+0x61c>)
 8012bcc:	ed92 6b08 	vldr	d6, [r2, #32]
 8012bd0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8012bd4:	ed8d 6b02 	vstr	d6, [sp, #8]
 8012bd8:	f001 010f 	and.w	r1, r1, #15
 8012bdc:	2203      	movs	r2, #3
 8012bde:	48b7      	ldr	r0, [pc, #732]	; (8012ebc <_dtoa_r+0x61c>)
 8012be0:	2900      	cmp	r1, #0
 8012be2:	d17b      	bne.n	8012cdc <_dtoa_r+0x43c>
 8012be4:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012be8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8012bec:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012bf0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012bf2:	2900      	cmp	r1, #0
 8012bf4:	f000 80a2 	beq.w	8012d3c <_dtoa_r+0x49c>
 8012bf8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8012bfc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012c00:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c08:	f140 8098 	bpl.w	8012d3c <_dtoa_r+0x49c>
 8012c0c:	f1b9 0f00 	cmp.w	r9, #0
 8012c10:	f000 8094 	beq.w	8012d3c <_dtoa_r+0x49c>
 8012c14:	f1ba 0f00 	cmp.w	sl, #0
 8012c18:	dd2f      	ble.n	8012c7a <_dtoa_r+0x3da>
 8012c1a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8012c1e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012c22:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012c26:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8012c2a:	3201      	adds	r2, #1
 8012c2c:	4650      	mov	r0, sl
 8012c2e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012c32:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8012c36:	ee07 2a90 	vmov	s15, r2
 8012c3a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012c3e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8012c42:	ee15 4a90 	vmov	r4, s11
 8012c46:	ec52 1b15 	vmov	r1, r2, d5
 8012c4a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8012c4e:	2800      	cmp	r0, #0
 8012c50:	d177      	bne.n	8012d42 <_dtoa_r+0x4a2>
 8012c52:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8012c56:	ee36 6b47 	vsub.f64	d6, d6, d7
 8012c5a:	ec42 1b17 	vmov	d7, r1, r2
 8012c5e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c66:	f300 8263 	bgt.w	8013130 <_dtoa_r+0x890>
 8012c6a:	eeb1 7b47 	vneg.f64	d7, d7
 8012c6e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c76:	f100 8258 	bmi.w	801312a <_dtoa_r+0x88a>
 8012c7a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8012c7e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012c80:	2a00      	cmp	r2, #0
 8012c82:	f2c0 811d 	blt.w	8012ec0 <_dtoa_r+0x620>
 8012c86:	f1bb 0f0e 	cmp.w	fp, #14
 8012c8a:	f300 8119 	bgt.w	8012ec0 <_dtoa_r+0x620>
 8012c8e:	4b8a      	ldr	r3, [pc, #552]	; (8012eb8 <_dtoa_r+0x618>)
 8012c90:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012c94:	ed93 6b00 	vldr	d6, [r3]
 8012c98:	9b08      	ldr	r3, [sp, #32]
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	f280 80b7 	bge.w	8012e0e <_dtoa_r+0x56e>
 8012ca0:	f1b9 0f00 	cmp.w	r9, #0
 8012ca4:	f300 80b3 	bgt.w	8012e0e <_dtoa_r+0x56e>
 8012ca8:	f040 823f 	bne.w	801312a <_dtoa_r+0x88a>
 8012cac:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8012cb0:	ee26 6b07 	vmul.f64	d6, d6, d7
 8012cb4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012cb8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cc0:	464c      	mov	r4, r9
 8012cc2:	464f      	mov	r7, r9
 8012cc4:	f280 8215 	bge.w	80130f2 <_dtoa_r+0x852>
 8012cc8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012ccc:	2331      	movs	r3, #49	; 0x31
 8012cce:	f808 3b01 	strb.w	r3, [r8], #1
 8012cd2:	f10b 0b01 	add.w	fp, fp, #1
 8012cd6:	e211      	b.n	80130fc <_dtoa_r+0x85c>
 8012cd8:	2202      	movs	r2, #2
 8012cda:	e780      	b.n	8012bde <_dtoa_r+0x33e>
 8012cdc:	07cc      	lsls	r4, r1, #31
 8012cde:	d504      	bpl.n	8012cea <_dtoa_r+0x44a>
 8012ce0:	ed90 6b00 	vldr	d6, [r0]
 8012ce4:	3201      	adds	r2, #1
 8012ce6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012cea:	1049      	asrs	r1, r1, #1
 8012cec:	3008      	adds	r0, #8
 8012cee:	e777      	b.n	8012be0 <_dtoa_r+0x340>
 8012cf0:	d022      	beq.n	8012d38 <_dtoa_r+0x498>
 8012cf2:	f1cb 0100 	rsb	r1, fp, #0
 8012cf6:	4a70      	ldr	r2, [pc, #448]	; (8012eb8 <_dtoa_r+0x618>)
 8012cf8:	f001 000f 	and.w	r0, r1, #15
 8012cfc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8012d00:	ed92 7b00 	vldr	d7, [r2]
 8012d04:	ee28 7b07 	vmul.f64	d7, d8, d7
 8012d08:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012d0c:	486b      	ldr	r0, [pc, #428]	; (8012ebc <_dtoa_r+0x61c>)
 8012d0e:	1109      	asrs	r1, r1, #4
 8012d10:	2400      	movs	r4, #0
 8012d12:	2202      	movs	r2, #2
 8012d14:	b929      	cbnz	r1, 8012d22 <_dtoa_r+0x482>
 8012d16:	2c00      	cmp	r4, #0
 8012d18:	f43f af6a 	beq.w	8012bf0 <_dtoa_r+0x350>
 8012d1c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012d20:	e766      	b.n	8012bf0 <_dtoa_r+0x350>
 8012d22:	07cf      	lsls	r7, r1, #31
 8012d24:	d505      	bpl.n	8012d32 <_dtoa_r+0x492>
 8012d26:	ed90 6b00 	vldr	d6, [r0]
 8012d2a:	3201      	adds	r2, #1
 8012d2c:	2401      	movs	r4, #1
 8012d2e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012d32:	1049      	asrs	r1, r1, #1
 8012d34:	3008      	adds	r0, #8
 8012d36:	e7ed      	b.n	8012d14 <_dtoa_r+0x474>
 8012d38:	2202      	movs	r2, #2
 8012d3a:	e759      	b.n	8012bf0 <_dtoa_r+0x350>
 8012d3c:	465f      	mov	r7, fp
 8012d3e:	4648      	mov	r0, r9
 8012d40:	e775      	b.n	8012c2e <_dtoa_r+0x38e>
 8012d42:	ec42 1b17 	vmov	d7, r1, r2
 8012d46:	4a5c      	ldr	r2, [pc, #368]	; (8012eb8 <_dtoa_r+0x618>)
 8012d48:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8012d4c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8012d50:	9a01      	ldr	r2, [sp, #4]
 8012d52:	1814      	adds	r4, r2, r0
 8012d54:	9a07      	ldr	r2, [sp, #28]
 8012d56:	b352      	cbz	r2, 8012dae <_dtoa_r+0x50e>
 8012d58:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8012d5c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8012d60:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012d64:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8012d68:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8012d6c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012d70:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012d74:	ee14 2a90 	vmov	r2, s9
 8012d78:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012d7c:	3230      	adds	r2, #48	; 0x30
 8012d7e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012d82:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d8a:	f808 2b01 	strb.w	r2, [r8], #1
 8012d8e:	d439      	bmi.n	8012e04 <_dtoa_r+0x564>
 8012d90:	ee32 5b46 	vsub.f64	d5, d2, d6
 8012d94:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8012d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d9c:	d472      	bmi.n	8012e84 <_dtoa_r+0x5e4>
 8012d9e:	45a0      	cmp	r8, r4
 8012da0:	f43f af6b 	beq.w	8012c7a <_dtoa_r+0x3da>
 8012da4:	ee27 7b03 	vmul.f64	d7, d7, d3
 8012da8:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012dac:	e7e0      	b.n	8012d70 <_dtoa_r+0x4d0>
 8012dae:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012db2:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012db6:	4621      	mov	r1, r4
 8012db8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8012dbc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012dc0:	ee14 2a90 	vmov	r2, s9
 8012dc4:	3230      	adds	r2, #48	; 0x30
 8012dc6:	f808 2b01 	strb.w	r2, [r8], #1
 8012dca:	45a0      	cmp	r8, r4
 8012dcc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012dd0:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012dd4:	d118      	bne.n	8012e08 <_dtoa_r+0x568>
 8012dd6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8012dda:	ee37 4b05 	vadd.f64	d4, d7, d5
 8012dde:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8012de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012de6:	dc4d      	bgt.n	8012e84 <_dtoa_r+0x5e4>
 8012de8:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012dec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012df4:	f57f af41 	bpl.w	8012c7a <_dtoa_r+0x3da>
 8012df8:	4688      	mov	r8, r1
 8012dfa:	3901      	subs	r1, #1
 8012dfc:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8012e00:	2b30      	cmp	r3, #48	; 0x30
 8012e02:	d0f9      	beq.n	8012df8 <_dtoa_r+0x558>
 8012e04:	46bb      	mov	fp, r7
 8012e06:	e02a      	b.n	8012e5e <_dtoa_r+0x5be>
 8012e08:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012e0c:	e7d6      	b.n	8012dbc <_dtoa_r+0x51c>
 8012e0e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012e12:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8012e16:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012e1a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8012e1e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8012e22:	ee15 3a10 	vmov	r3, s10
 8012e26:	3330      	adds	r3, #48	; 0x30
 8012e28:	f808 3b01 	strb.w	r3, [r8], #1
 8012e2c:	9b01      	ldr	r3, [sp, #4]
 8012e2e:	eba8 0303 	sub.w	r3, r8, r3
 8012e32:	4599      	cmp	r9, r3
 8012e34:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8012e38:	eea3 7b46 	vfms.f64	d7, d3, d6
 8012e3c:	d133      	bne.n	8012ea6 <_dtoa_r+0x606>
 8012e3e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8012e42:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e4a:	dc1a      	bgt.n	8012e82 <_dtoa_r+0x5e2>
 8012e4c:	eeb4 7b46 	vcmp.f64	d7, d6
 8012e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e54:	d103      	bne.n	8012e5e <_dtoa_r+0x5be>
 8012e56:	ee15 3a10 	vmov	r3, s10
 8012e5a:	07d9      	lsls	r1, r3, #31
 8012e5c:	d411      	bmi.n	8012e82 <_dtoa_r+0x5e2>
 8012e5e:	4629      	mov	r1, r5
 8012e60:	4630      	mov	r0, r6
 8012e62:	f000 fadb 	bl	801341c <_Bfree>
 8012e66:	2300      	movs	r3, #0
 8012e68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012e6a:	f888 3000 	strb.w	r3, [r8]
 8012e6e:	f10b 0301 	add.w	r3, fp, #1
 8012e72:	6013      	str	r3, [r2, #0]
 8012e74:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	f43f ad61 	beq.w	801293e <_dtoa_r+0x9e>
 8012e7c:	f8c3 8000 	str.w	r8, [r3]
 8012e80:	e55d      	b.n	801293e <_dtoa_r+0x9e>
 8012e82:	465f      	mov	r7, fp
 8012e84:	4643      	mov	r3, r8
 8012e86:	4698      	mov	r8, r3
 8012e88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012e8c:	2a39      	cmp	r2, #57	; 0x39
 8012e8e:	d106      	bne.n	8012e9e <_dtoa_r+0x5fe>
 8012e90:	9a01      	ldr	r2, [sp, #4]
 8012e92:	429a      	cmp	r2, r3
 8012e94:	d1f7      	bne.n	8012e86 <_dtoa_r+0x5e6>
 8012e96:	9901      	ldr	r1, [sp, #4]
 8012e98:	2230      	movs	r2, #48	; 0x30
 8012e9a:	3701      	adds	r7, #1
 8012e9c:	700a      	strb	r2, [r1, #0]
 8012e9e:	781a      	ldrb	r2, [r3, #0]
 8012ea0:	3201      	adds	r2, #1
 8012ea2:	701a      	strb	r2, [r3, #0]
 8012ea4:	e7ae      	b.n	8012e04 <_dtoa_r+0x564>
 8012ea6:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012eaa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012eb2:	d1b2      	bne.n	8012e1a <_dtoa_r+0x57a>
 8012eb4:	e7d3      	b.n	8012e5e <_dtoa_r+0x5be>
 8012eb6:	bf00      	nop
 8012eb8:	08014d60 	.word	0x08014d60
 8012ebc:	08014d38 	.word	0x08014d38
 8012ec0:	9907      	ldr	r1, [sp, #28]
 8012ec2:	2900      	cmp	r1, #0
 8012ec4:	f000 80d0 	beq.w	8013068 <_dtoa_r+0x7c8>
 8012ec8:	9906      	ldr	r1, [sp, #24]
 8012eca:	2901      	cmp	r1, #1
 8012ecc:	f300 80b4 	bgt.w	8013038 <_dtoa_r+0x798>
 8012ed0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012ed2:	2900      	cmp	r1, #0
 8012ed4:	f000 80ac 	beq.w	8013030 <_dtoa_r+0x790>
 8012ed8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8012edc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8012ee0:	461c      	mov	r4, r3
 8012ee2:	930a      	str	r3, [sp, #40]	; 0x28
 8012ee4:	9b04      	ldr	r3, [sp, #16]
 8012ee6:	4413      	add	r3, r2
 8012ee8:	9304      	str	r3, [sp, #16]
 8012eea:	9b05      	ldr	r3, [sp, #20]
 8012eec:	2101      	movs	r1, #1
 8012eee:	4413      	add	r3, r2
 8012ef0:	4630      	mov	r0, r6
 8012ef2:	9305      	str	r3, [sp, #20]
 8012ef4:	f000 fb4a 	bl	801358c <__i2b>
 8012ef8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012efa:	4607      	mov	r7, r0
 8012efc:	f1b8 0f00 	cmp.w	r8, #0
 8012f00:	dd0d      	ble.n	8012f1e <_dtoa_r+0x67e>
 8012f02:	9a05      	ldr	r2, [sp, #20]
 8012f04:	2a00      	cmp	r2, #0
 8012f06:	dd0a      	ble.n	8012f1e <_dtoa_r+0x67e>
 8012f08:	4542      	cmp	r2, r8
 8012f0a:	9904      	ldr	r1, [sp, #16]
 8012f0c:	bfa8      	it	ge
 8012f0e:	4642      	movge	r2, r8
 8012f10:	1a89      	subs	r1, r1, r2
 8012f12:	9104      	str	r1, [sp, #16]
 8012f14:	9905      	ldr	r1, [sp, #20]
 8012f16:	eba8 0802 	sub.w	r8, r8, r2
 8012f1a:	1a8a      	subs	r2, r1, r2
 8012f1c:	9205      	str	r2, [sp, #20]
 8012f1e:	b303      	cbz	r3, 8012f62 <_dtoa_r+0x6c2>
 8012f20:	9a07      	ldr	r2, [sp, #28]
 8012f22:	2a00      	cmp	r2, #0
 8012f24:	f000 80a5 	beq.w	8013072 <_dtoa_r+0x7d2>
 8012f28:	2c00      	cmp	r4, #0
 8012f2a:	dd13      	ble.n	8012f54 <_dtoa_r+0x6b4>
 8012f2c:	4639      	mov	r1, r7
 8012f2e:	4622      	mov	r2, r4
 8012f30:	4630      	mov	r0, r6
 8012f32:	930d      	str	r3, [sp, #52]	; 0x34
 8012f34:	f000 fbea 	bl	801370c <__pow5mult>
 8012f38:	462a      	mov	r2, r5
 8012f3a:	4601      	mov	r1, r0
 8012f3c:	4607      	mov	r7, r0
 8012f3e:	4630      	mov	r0, r6
 8012f40:	f000 fb3a 	bl	80135b8 <__multiply>
 8012f44:	4629      	mov	r1, r5
 8012f46:	900a      	str	r0, [sp, #40]	; 0x28
 8012f48:	4630      	mov	r0, r6
 8012f4a:	f000 fa67 	bl	801341c <_Bfree>
 8012f4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012f50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012f52:	4615      	mov	r5, r2
 8012f54:	1b1a      	subs	r2, r3, r4
 8012f56:	d004      	beq.n	8012f62 <_dtoa_r+0x6c2>
 8012f58:	4629      	mov	r1, r5
 8012f5a:	4630      	mov	r0, r6
 8012f5c:	f000 fbd6 	bl	801370c <__pow5mult>
 8012f60:	4605      	mov	r5, r0
 8012f62:	2101      	movs	r1, #1
 8012f64:	4630      	mov	r0, r6
 8012f66:	f000 fb11 	bl	801358c <__i2b>
 8012f6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	4604      	mov	r4, r0
 8012f70:	f340 8081 	ble.w	8013076 <_dtoa_r+0x7d6>
 8012f74:	461a      	mov	r2, r3
 8012f76:	4601      	mov	r1, r0
 8012f78:	4630      	mov	r0, r6
 8012f7a:	f000 fbc7 	bl	801370c <__pow5mult>
 8012f7e:	9b06      	ldr	r3, [sp, #24]
 8012f80:	2b01      	cmp	r3, #1
 8012f82:	4604      	mov	r4, r0
 8012f84:	dd7a      	ble.n	801307c <_dtoa_r+0x7dc>
 8012f86:	2300      	movs	r3, #0
 8012f88:	930a      	str	r3, [sp, #40]	; 0x28
 8012f8a:	6922      	ldr	r2, [r4, #16]
 8012f8c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8012f90:	6910      	ldr	r0, [r2, #16]
 8012f92:	f000 faab 	bl	80134ec <__hi0bits>
 8012f96:	f1c0 0020 	rsb	r0, r0, #32
 8012f9a:	9b05      	ldr	r3, [sp, #20]
 8012f9c:	4418      	add	r0, r3
 8012f9e:	f010 001f 	ands.w	r0, r0, #31
 8012fa2:	f000 808c 	beq.w	80130be <_dtoa_r+0x81e>
 8012fa6:	f1c0 0220 	rsb	r2, r0, #32
 8012faa:	2a04      	cmp	r2, #4
 8012fac:	f340 8085 	ble.w	80130ba <_dtoa_r+0x81a>
 8012fb0:	f1c0 001c 	rsb	r0, r0, #28
 8012fb4:	9b04      	ldr	r3, [sp, #16]
 8012fb6:	4403      	add	r3, r0
 8012fb8:	9304      	str	r3, [sp, #16]
 8012fba:	9b05      	ldr	r3, [sp, #20]
 8012fbc:	4403      	add	r3, r0
 8012fbe:	4480      	add	r8, r0
 8012fc0:	9305      	str	r3, [sp, #20]
 8012fc2:	9b04      	ldr	r3, [sp, #16]
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	dd05      	ble.n	8012fd4 <_dtoa_r+0x734>
 8012fc8:	4629      	mov	r1, r5
 8012fca:	461a      	mov	r2, r3
 8012fcc:	4630      	mov	r0, r6
 8012fce:	f000 fbf7 	bl	80137c0 <__lshift>
 8012fd2:	4605      	mov	r5, r0
 8012fd4:	9b05      	ldr	r3, [sp, #20]
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	dd05      	ble.n	8012fe6 <_dtoa_r+0x746>
 8012fda:	4621      	mov	r1, r4
 8012fdc:	461a      	mov	r2, r3
 8012fde:	4630      	mov	r0, r6
 8012fe0:	f000 fbee 	bl	80137c0 <__lshift>
 8012fe4:	4604      	mov	r4, r0
 8012fe6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d06a      	beq.n	80130c2 <_dtoa_r+0x822>
 8012fec:	4621      	mov	r1, r4
 8012fee:	4628      	mov	r0, r5
 8012ff0:	f000 fc56 	bl	80138a0 <__mcmp>
 8012ff4:	2800      	cmp	r0, #0
 8012ff6:	da64      	bge.n	80130c2 <_dtoa_r+0x822>
 8012ff8:	2300      	movs	r3, #0
 8012ffa:	4629      	mov	r1, r5
 8012ffc:	220a      	movs	r2, #10
 8012ffe:	4630      	mov	r0, r6
 8013000:	f000 fa2e 	bl	8013460 <__multadd>
 8013004:	9b07      	ldr	r3, [sp, #28]
 8013006:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801300a:	4605      	mov	r5, r0
 801300c:	2b00      	cmp	r3, #0
 801300e:	f000 8191 	beq.w	8013334 <_dtoa_r+0xa94>
 8013012:	4639      	mov	r1, r7
 8013014:	2300      	movs	r3, #0
 8013016:	220a      	movs	r2, #10
 8013018:	4630      	mov	r0, r6
 801301a:	f000 fa21 	bl	8013460 <__multadd>
 801301e:	f1ba 0f00 	cmp.w	sl, #0
 8013022:	4607      	mov	r7, r0
 8013024:	f300 808d 	bgt.w	8013142 <_dtoa_r+0x8a2>
 8013028:	9b06      	ldr	r3, [sp, #24]
 801302a:	2b02      	cmp	r3, #2
 801302c:	dc50      	bgt.n	80130d0 <_dtoa_r+0x830>
 801302e:	e088      	b.n	8013142 <_dtoa_r+0x8a2>
 8013030:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013032:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013036:	e751      	b.n	8012edc <_dtoa_r+0x63c>
 8013038:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 801303c:	42a3      	cmp	r3, r4
 801303e:	bfbf      	itttt	lt
 8013040:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8013042:	1ae3      	sublt	r3, r4, r3
 8013044:	18d2      	addlt	r2, r2, r3
 8013046:	9209      	strlt	r2, [sp, #36]	; 0x24
 8013048:	bfb6      	itet	lt
 801304a:	4623      	movlt	r3, r4
 801304c:	1b1c      	subge	r4, r3, r4
 801304e:	2400      	movlt	r4, #0
 8013050:	f1b9 0f00 	cmp.w	r9, #0
 8013054:	bfb5      	itete	lt
 8013056:	9a04      	ldrlt	r2, [sp, #16]
 8013058:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 801305c:	eba2 0809 	sublt.w	r8, r2, r9
 8013060:	464a      	movge	r2, r9
 8013062:	bfb8      	it	lt
 8013064:	2200      	movlt	r2, #0
 8013066:	e73c      	b.n	8012ee2 <_dtoa_r+0x642>
 8013068:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801306c:	9f07      	ldr	r7, [sp, #28]
 801306e:	461c      	mov	r4, r3
 8013070:	e744      	b.n	8012efc <_dtoa_r+0x65c>
 8013072:	461a      	mov	r2, r3
 8013074:	e770      	b.n	8012f58 <_dtoa_r+0x6b8>
 8013076:	9b06      	ldr	r3, [sp, #24]
 8013078:	2b01      	cmp	r3, #1
 801307a:	dc18      	bgt.n	80130ae <_dtoa_r+0x80e>
 801307c:	9b02      	ldr	r3, [sp, #8]
 801307e:	b9b3      	cbnz	r3, 80130ae <_dtoa_r+0x80e>
 8013080:	9b03      	ldr	r3, [sp, #12]
 8013082:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8013086:	b9a2      	cbnz	r2, 80130b2 <_dtoa_r+0x812>
 8013088:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801308c:	0d12      	lsrs	r2, r2, #20
 801308e:	0512      	lsls	r2, r2, #20
 8013090:	b18a      	cbz	r2, 80130b6 <_dtoa_r+0x816>
 8013092:	9b04      	ldr	r3, [sp, #16]
 8013094:	3301      	adds	r3, #1
 8013096:	9304      	str	r3, [sp, #16]
 8013098:	9b05      	ldr	r3, [sp, #20]
 801309a:	3301      	adds	r3, #1
 801309c:	9305      	str	r3, [sp, #20]
 801309e:	2301      	movs	r3, #1
 80130a0:	930a      	str	r3, [sp, #40]	; 0x28
 80130a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	f47f af70 	bne.w	8012f8a <_dtoa_r+0x6ea>
 80130aa:	2001      	movs	r0, #1
 80130ac:	e775      	b.n	8012f9a <_dtoa_r+0x6fa>
 80130ae:	2300      	movs	r3, #0
 80130b0:	e7f6      	b.n	80130a0 <_dtoa_r+0x800>
 80130b2:	9b02      	ldr	r3, [sp, #8]
 80130b4:	e7f4      	b.n	80130a0 <_dtoa_r+0x800>
 80130b6:	920a      	str	r2, [sp, #40]	; 0x28
 80130b8:	e7f3      	b.n	80130a2 <_dtoa_r+0x802>
 80130ba:	d082      	beq.n	8012fc2 <_dtoa_r+0x722>
 80130bc:	4610      	mov	r0, r2
 80130be:	301c      	adds	r0, #28
 80130c0:	e778      	b.n	8012fb4 <_dtoa_r+0x714>
 80130c2:	f1b9 0f00 	cmp.w	r9, #0
 80130c6:	dc37      	bgt.n	8013138 <_dtoa_r+0x898>
 80130c8:	9b06      	ldr	r3, [sp, #24]
 80130ca:	2b02      	cmp	r3, #2
 80130cc:	dd34      	ble.n	8013138 <_dtoa_r+0x898>
 80130ce:	46ca      	mov	sl, r9
 80130d0:	f1ba 0f00 	cmp.w	sl, #0
 80130d4:	d10d      	bne.n	80130f2 <_dtoa_r+0x852>
 80130d6:	4621      	mov	r1, r4
 80130d8:	4653      	mov	r3, sl
 80130da:	2205      	movs	r2, #5
 80130dc:	4630      	mov	r0, r6
 80130de:	f000 f9bf 	bl	8013460 <__multadd>
 80130e2:	4601      	mov	r1, r0
 80130e4:	4604      	mov	r4, r0
 80130e6:	4628      	mov	r0, r5
 80130e8:	f000 fbda 	bl	80138a0 <__mcmp>
 80130ec:	2800      	cmp	r0, #0
 80130ee:	f73f adeb 	bgt.w	8012cc8 <_dtoa_r+0x428>
 80130f2:	9b08      	ldr	r3, [sp, #32]
 80130f4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80130f8:	ea6f 0b03 	mvn.w	fp, r3
 80130fc:	f04f 0900 	mov.w	r9, #0
 8013100:	4621      	mov	r1, r4
 8013102:	4630      	mov	r0, r6
 8013104:	f000 f98a 	bl	801341c <_Bfree>
 8013108:	2f00      	cmp	r7, #0
 801310a:	f43f aea8 	beq.w	8012e5e <_dtoa_r+0x5be>
 801310e:	f1b9 0f00 	cmp.w	r9, #0
 8013112:	d005      	beq.n	8013120 <_dtoa_r+0x880>
 8013114:	45b9      	cmp	r9, r7
 8013116:	d003      	beq.n	8013120 <_dtoa_r+0x880>
 8013118:	4649      	mov	r1, r9
 801311a:	4630      	mov	r0, r6
 801311c:	f000 f97e 	bl	801341c <_Bfree>
 8013120:	4639      	mov	r1, r7
 8013122:	4630      	mov	r0, r6
 8013124:	f000 f97a 	bl	801341c <_Bfree>
 8013128:	e699      	b.n	8012e5e <_dtoa_r+0x5be>
 801312a:	2400      	movs	r4, #0
 801312c:	4627      	mov	r7, r4
 801312e:	e7e0      	b.n	80130f2 <_dtoa_r+0x852>
 8013130:	46bb      	mov	fp, r7
 8013132:	4604      	mov	r4, r0
 8013134:	4607      	mov	r7, r0
 8013136:	e5c7      	b.n	8012cc8 <_dtoa_r+0x428>
 8013138:	9b07      	ldr	r3, [sp, #28]
 801313a:	46ca      	mov	sl, r9
 801313c:	2b00      	cmp	r3, #0
 801313e:	f000 8100 	beq.w	8013342 <_dtoa_r+0xaa2>
 8013142:	f1b8 0f00 	cmp.w	r8, #0
 8013146:	dd05      	ble.n	8013154 <_dtoa_r+0x8b4>
 8013148:	4639      	mov	r1, r7
 801314a:	4642      	mov	r2, r8
 801314c:	4630      	mov	r0, r6
 801314e:	f000 fb37 	bl	80137c0 <__lshift>
 8013152:	4607      	mov	r7, r0
 8013154:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013156:	2b00      	cmp	r3, #0
 8013158:	d05d      	beq.n	8013216 <_dtoa_r+0x976>
 801315a:	6879      	ldr	r1, [r7, #4]
 801315c:	4630      	mov	r0, r6
 801315e:	f000 f91d 	bl	801339c <_Balloc>
 8013162:	4680      	mov	r8, r0
 8013164:	b928      	cbnz	r0, 8013172 <_dtoa_r+0x8d2>
 8013166:	4b82      	ldr	r3, [pc, #520]	; (8013370 <_dtoa_r+0xad0>)
 8013168:	4602      	mov	r2, r0
 801316a:	f240 21ea 	movw	r1, #746	; 0x2ea
 801316e:	f7ff bbaf 	b.w	80128d0 <_dtoa_r+0x30>
 8013172:	693a      	ldr	r2, [r7, #16]
 8013174:	3202      	adds	r2, #2
 8013176:	0092      	lsls	r2, r2, #2
 8013178:	f107 010c 	add.w	r1, r7, #12
 801317c:	300c      	adds	r0, #12
 801317e:	f7fe fd73 	bl	8011c68 <memcpy>
 8013182:	2201      	movs	r2, #1
 8013184:	4641      	mov	r1, r8
 8013186:	4630      	mov	r0, r6
 8013188:	f000 fb1a 	bl	80137c0 <__lshift>
 801318c:	9b01      	ldr	r3, [sp, #4]
 801318e:	3301      	adds	r3, #1
 8013190:	9304      	str	r3, [sp, #16]
 8013192:	9b01      	ldr	r3, [sp, #4]
 8013194:	4453      	add	r3, sl
 8013196:	9308      	str	r3, [sp, #32]
 8013198:	9b02      	ldr	r3, [sp, #8]
 801319a:	f003 0301 	and.w	r3, r3, #1
 801319e:	46b9      	mov	r9, r7
 80131a0:	9307      	str	r3, [sp, #28]
 80131a2:	4607      	mov	r7, r0
 80131a4:	9b04      	ldr	r3, [sp, #16]
 80131a6:	4621      	mov	r1, r4
 80131a8:	3b01      	subs	r3, #1
 80131aa:	4628      	mov	r0, r5
 80131ac:	9302      	str	r3, [sp, #8]
 80131ae:	f7ff fae9 	bl	8012784 <quorem>
 80131b2:	4603      	mov	r3, r0
 80131b4:	3330      	adds	r3, #48	; 0x30
 80131b6:	9005      	str	r0, [sp, #20]
 80131b8:	4649      	mov	r1, r9
 80131ba:	4628      	mov	r0, r5
 80131bc:	9309      	str	r3, [sp, #36]	; 0x24
 80131be:	f000 fb6f 	bl	80138a0 <__mcmp>
 80131c2:	463a      	mov	r2, r7
 80131c4:	4682      	mov	sl, r0
 80131c6:	4621      	mov	r1, r4
 80131c8:	4630      	mov	r0, r6
 80131ca:	f000 fb85 	bl	80138d8 <__mdiff>
 80131ce:	68c2      	ldr	r2, [r0, #12]
 80131d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80131d2:	4680      	mov	r8, r0
 80131d4:	bb0a      	cbnz	r2, 801321a <_dtoa_r+0x97a>
 80131d6:	4601      	mov	r1, r0
 80131d8:	4628      	mov	r0, r5
 80131da:	f000 fb61 	bl	80138a0 <__mcmp>
 80131de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80131e0:	4602      	mov	r2, r0
 80131e2:	4641      	mov	r1, r8
 80131e4:	4630      	mov	r0, r6
 80131e6:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 80131ea:	f000 f917 	bl	801341c <_Bfree>
 80131ee:	9b06      	ldr	r3, [sp, #24]
 80131f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80131f2:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80131f6:	ea43 0102 	orr.w	r1, r3, r2
 80131fa:	9b07      	ldr	r3, [sp, #28]
 80131fc:	430b      	orrs	r3, r1
 80131fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013200:	d10d      	bne.n	801321e <_dtoa_r+0x97e>
 8013202:	2b39      	cmp	r3, #57	; 0x39
 8013204:	d029      	beq.n	801325a <_dtoa_r+0x9ba>
 8013206:	f1ba 0f00 	cmp.w	sl, #0
 801320a:	dd01      	ble.n	8013210 <_dtoa_r+0x970>
 801320c:	9b05      	ldr	r3, [sp, #20]
 801320e:	3331      	adds	r3, #49	; 0x31
 8013210:	9a02      	ldr	r2, [sp, #8]
 8013212:	7013      	strb	r3, [r2, #0]
 8013214:	e774      	b.n	8013100 <_dtoa_r+0x860>
 8013216:	4638      	mov	r0, r7
 8013218:	e7b8      	b.n	801318c <_dtoa_r+0x8ec>
 801321a:	2201      	movs	r2, #1
 801321c:	e7e1      	b.n	80131e2 <_dtoa_r+0x942>
 801321e:	f1ba 0f00 	cmp.w	sl, #0
 8013222:	db06      	blt.n	8013232 <_dtoa_r+0x992>
 8013224:	9906      	ldr	r1, [sp, #24]
 8013226:	ea41 0a0a 	orr.w	sl, r1, sl
 801322a:	9907      	ldr	r1, [sp, #28]
 801322c:	ea5a 0101 	orrs.w	r1, sl, r1
 8013230:	d120      	bne.n	8013274 <_dtoa_r+0x9d4>
 8013232:	2a00      	cmp	r2, #0
 8013234:	ddec      	ble.n	8013210 <_dtoa_r+0x970>
 8013236:	4629      	mov	r1, r5
 8013238:	2201      	movs	r2, #1
 801323a:	4630      	mov	r0, r6
 801323c:	9304      	str	r3, [sp, #16]
 801323e:	f000 fabf 	bl	80137c0 <__lshift>
 8013242:	4621      	mov	r1, r4
 8013244:	4605      	mov	r5, r0
 8013246:	f000 fb2b 	bl	80138a0 <__mcmp>
 801324a:	2800      	cmp	r0, #0
 801324c:	9b04      	ldr	r3, [sp, #16]
 801324e:	dc02      	bgt.n	8013256 <_dtoa_r+0x9b6>
 8013250:	d1de      	bne.n	8013210 <_dtoa_r+0x970>
 8013252:	07da      	lsls	r2, r3, #31
 8013254:	d5dc      	bpl.n	8013210 <_dtoa_r+0x970>
 8013256:	2b39      	cmp	r3, #57	; 0x39
 8013258:	d1d8      	bne.n	801320c <_dtoa_r+0x96c>
 801325a:	9a02      	ldr	r2, [sp, #8]
 801325c:	2339      	movs	r3, #57	; 0x39
 801325e:	7013      	strb	r3, [r2, #0]
 8013260:	4643      	mov	r3, r8
 8013262:	4698      	mov	r8, r3
 8013264:	3b01      	subs	r3, #1
 8013266:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801326a:	2a39      	cmp	r2, #57	; 0x39
 801326c:	d051      	beq.n	8013312 <_dtoa_r+0xa72>
 801326e:	3201      	adds	r2, #1
 8013270:	701a      	strb	r2, [r3, #0]
 8013272:	e745      	b.n	8013100 <_dtoa_r+0x860>
 8013274:	2a00      	cmp	r2, #0
 8013276:	dd03      	ble.n	8013280 <_dtoa_r+0x9e0>
 8013278:	2b39      	cmp	r3, #57	; 0x39
 801327a:	d0ee      	beq.n	801325a <_dtoa_r+0x9ba>
 801327c:	3301      	adds	r3, #1
 801327e:	e7c7      	b.n	8013210 <_dtoa_r+0x970>
 8013280:	9a04      	ldr	r2, [sp, #16]
 8013282:	9908      	ldr	r1, [sp, #32]
 8013284:	f802 3c01 	strb.w	r3, [r2, #-1]
 8013288:	428a      	cmp	r2, r1
 801328a:	d02b      	beq.n	80132e4 <_dtoa_r+0xa44>
 801328c:	4629      	mov	r1, r5
 801328e:	2300      	movs	r3, #0
 8013290:	220a      	movs	r2, #10
 8013292:	4630      	mov	r0, r6
 8013294:	f000 f8e4 	bl	8013460 <__multadd>
 8013298:	45b9      	cmp	r9, r7
 801329a:	4605      	mov	r5, r0
 801329c:	f04f 0300 	mov.w	r3, #0
 80132a0:	f04f 020a 	mov.w	r2, #10
 80132a4:	4649      	mov	r1, r9
 80132a6:	4630      	mov	r0, r6
 80132a8:	d107      	bne.n	80132ba <_dtoa_r+0xa1a>
 80132aa:	f000 f8d9 	bl	8013460 <__multadd>
 80132ae:	4681      	mov	r9, r0
 80132b0:	4607      	mov	r7, r0
 80132b2:	9b04      	ldr	r3, [sp, #16]
 80132b4:	3301      	adds	r3, #1
 80132b6:	9304      	str	r3, [sp, #16]
 80132b8:	e774      	b.n	80131a4 <_dtoa_r+0x904>
 80132ba:	f000 f8d1 	bl	8013460 <__multadd>
 80132be:	4639      	mov	r1, r7
 80132c0:	4681      	mov	r9, r0
 80132c2:	2300      	movs	r3, #0
 80132c4:	220a      	movs	r2, #10
 80132c6:	4630      	mov	r0, r6
 80132c8:	f000 f8ca 	bl	8013460 <__multadd>
 80132cc:	4607      	mov	r7, r0
 80132ce:	e7f0      	b.n	80132b2 <_dtoa_r+0xa12>
 80132d0:	f1ba 0f00 	cmp.w	sl, #0
 80132d4:	9a01      	ldr	r2, [sp, #4]
 80132d6:	bfcc      	ite	gt
 80132d8:	46d0      	movgt	r8, sl
 80132da:	f04f 0801 	movle.w	r8, #1
 80132de:	4490      	add	r8, r2
 80132e0:	f04f 0900 	mov.w	r9, #0
 80132e4:	4629      	mov	r1, r5
 80132e6:	2201      	movs	r2, #1
 80132e8:	4630      	mov	r0, r6
 80132ea:	9302      	str	r3, [sp, #8]
 80132ec:	f000 fa68 	bl	80137c0 <__lshift>
 80132f0:	4621      	mov	r1, r4
 80132f2:	4605      	mov	r5, r0
 80132f4:	f000 fad4 	bl	80138a0 <__mcmp>
 80132f8:	2800      	cmp	r0, #0
 80132fa:	dcb1      	bgt.n	8013260 <_dtoa_r+0x9c0>
 80132fc:	d102      	bne.n	8013304 <_dtoa_r+0xa64>
 80132fe:	9b02      	ldr	r3, [sp, #8]
 8013300:	07db      	lsls	r3, r3, #31
 8013302:	d4ad      	bmi.n	8013260 <_dtoa_r+0x9c0>
 8013304:	4643      	mov	r3, r8
 8013306:	4698      	mov	r8, r3
 8013308:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801330c:	2a30      	cmp	r2, #48	; 0x30
 801330e:	d0fa      	beq.n	8013306 <_dtoa_r+0xa66>
 8013310:	e6f6      	b.n	8013100 <_dtoa_r+0x860>
 8013312:	9a01      	ldr	r2, [sp, #4]
 8013314:	429a      	cmp	r2, r3
 8013316:	d1a4      	bne.n	8013262 <_dtoa_r+0x9c2>
 8013318:	f10b 0b01 	add.w	fp, fp, #1
 801331c:	2331      	movs	r3, #49	; 0x31
 801331e:	e778      	b.n	8013212 <_dtoa_r+0x972>
 8013320:	4b14      	ldr	r3, [pc, #80]	; (8013374 <_dtoa_r+0xad4>)
 8013322:	f7ff bb27 	b.w	8012974 <_dtoa_r+0xd4>
 8013326:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013328:	2b00      	cmp	r3, #0
 801332a:	f47f ab03 	bne.w	8012934 <_dtoa_r+0x94>
 801332e:	4b12      	ldr	r3, [pc, #72]	; (8013378 <_dtoa_r+0xad8>)
 8013330:	f7ff bb20 	b.w	8012974 <_dtoa_r+0xd4>
 8013334:	f1ba 0f00 	cmp.w	sl, #0
 8013338:	dc03      	bgt.n	8013342 <_dtoa_r+0xaa2>
 801333a:	9b06      	ldr	r3, [sp, #24]
 801333c:	2b02      	cmp	r3, #2
 801333e:	f73f aec7 	bgt.w	80130d0 <_dtoa_r+0x830>
 8013342:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013346:	4621      	mov	r1, r4
 8013348:	4628      	mov	r0, r5
 801334a:	f7ff fa1b 	bl	8012784 <quorem>
 801334e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8013352:	f808 3b01 	strb.w	r3, [r8], #1
 8013356:	9a01      	ldr	r2, [sp, #4]
 8013358:	eba8 0202 	sub.w	r2, r8, r2
 801335c:	4592      	cmp	sl, r2
 801335e:	ddb7      	ble.n	80132d0 <_dtoa_r+0xa30>
 8013360:	4629      	mov	r1, r5
 8013362:	2300      	movs	r3, #0
 8013364:	220a      	movs	r2, #10
 8013366:	4630      	mov	r0, r6
 8013368:	f000 f87a 	bl	8013460 <__multadd>
 801336c:	4605      	mov	r5, r0
 801336e:	e7ea      	b.n	8013346 <_dtoa_r+0xaa6>
 8013370:	08014cc7 	.word	0x08014cc7
 8013374:	08014c24 	.word	0x08014c24
 8013378:	08014c48 	.word	0x08014c48

0801337c <_localeconv_r>:
 801337c:	4800      	ldr	r0, [pc, #0]	; (8013380 <_localeconv_r+0x4>)
 801337e:	4770      	bx	lr
 8013380:	24000164 	.word	0x24000164

08013384 <__malloc_lock>:
 8013384:	4801      	ldr	r0, [pc, #4]	; (801338c <__malloc_lock+0x8>)
 8013386:	f000 bbd4 	b.w	8013b32 <__retarget_lock_acquire_recursive>
 801338a:	bf00      	nop
 801338c:	240009f8 	.word	0x240009f8

08013390 <__malloc_unlock>:
 8013390:	4801      	ldr	r0, [pc, #4]	; (8013398 <__malloc_unlock+0x8>)
 8013392:	f000 bbcf 	b.w	8013b34 <__retarget_lock_release_recursive>
 8013396:	bf00      	nop
 8013398:	240009f8 	.word	0x240009f8

0801339c <_Balloc>:
 801339c:	b570      	push	{r4, r5, r6, lr}
 801339e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80133a0:	4604      	mov	r4, r0
 80133a2:	460d      	mov	r5, r1
 80133a4:	b976      	cbnz	r6, 80133c4 <_Balloc+0x28>
 80133a6:	2010      	movs	r0, #16
 80133a8:	f7fe fc4e 	bl	8011c48 <malloc>
 80133ac:	4602      	mov	r2, r0
 80133ae:	6260      	str	r0, [r4, #36]	; 0x24
 80133b0:	b920      	cbnz	r0, 80133bc <_Balloc+0x20>
 80133b2:	4b18      	ldr	r3, [pc, #96]	; (8013414 <_Balloc+0x78>)
 80133b4:	4818      	ldr	r0, [pc, #96]	; (8013418 <_Balloc+0x7c>)
 80133b6:	2166      	movs	r1, #102	; 0x66
 80133b8:	f000 fb8a 	bl	8013ad0 <__assert_func>
 80133bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80133c0:	6006      	str	r6, [r0, #0]
 80133c2:	60c6      	str	r6, [r0, #12]
 80133c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80133c6:	68f3      	ldr	r3, [r6, #12]
 80133c8:	b183      	cbz	r3, 80133ec <_Balloc+0x50>
 80133ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80133cc:	68db      	ldr	r3, [r3, #12]
 80133ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80133d2:	b9b8      	cbnz	r0, 8013404 <_Balloc+0x68>
 80133d4:	2101      	movs	r1, #1
 80133d6:	fa01 f605 	lsl.w	r6, r1, r5
 80133da:	1d72      	adds	r2, r6, #5
 80133dc:	0092      	lsls	r2, r2, #2
 80133de:	4620      	mov	r0, r4
 80133e0:	f000 fb60 	bl	8013aa4 <_calloc_r>
 80133e4:	b160      	cbz	r0, 8013400 <_Balloc+0x64>
 80133e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80133ea:	e00e      	b.n	801340a <_Balloc+0x6e>
 80133ec:	2221      	movs	r2, #33	; 0x21
 80133ee:	2104      	movs	r1, #4
 80133f0:	4620      	mov	r0, r4
 80133f2:	f000 fb57 	bl	8013aa4 <_calloc_r>
 80133f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80133f8:	60f0      	str	r0, [r6, #12]
 80133fa:	68db      	ldr	r3, [r3, #12]
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d1e4      	bne.n	80133ca <_Balloc+0x2e>
 8013400:	2000      	movs	r0, #0
 8013402:	bd70      	pop	{r4, r5, r6, pc}
 8013404:	6802      	ldr	r2, [r0, #0]
 8013406:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801340a:	2300      	movs	r3, #0
 801340c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013410:	e7f7      	b.n	8013402 <_Balloc+0x66>
 8013412:	bf00      	nop
 8013414:	08014c55 	.word	0x08014c55
 8013418:	08014cd8 	.word	0x08014cd8

0801341c <_Bfree>:
 801341c:	b570      	push	{r4, r5, r6, lr}
 801341e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013420:	4605      	mov	r5, r0
 8013422:	460c      	mov	r4, r1
 8013424:	b976      	cbnz	r6, 8013444 <_Bfree+0x28>
 8013426:	2010      	movs	r0, #16
 8013428:	f7fe fc0e 	bl	8011c48 <malloc>
 801342c:	4602      	mov	r2, r0
 801342e:	6268      	str	r0, [r5, #36]	; 0x24
 8013430:	b920      	cbnz	r0, 801343c <_Bfree+0x20>
 8013432:	4b09      	ldr	r3, [pc, #36]	; (8013458 <_Bfree+0x3c>)
 8013434:	4809      	ldr	r0, [pc, #36]	; (801345c <_Bfree+0x40>)
 8013436:	218a      	movs	r1, #138	; 0x8a
 8013438:	f000 fb4a 	bl	8013ad0 <__assert_func>
 801343c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013440:	6006      	str	r6, [r0, #0]
 8013442:	60c6      	str	r6, [r0, #12]
 8013444:	b13c      	cbz	r4, 8013456 <_Bfree+0x3a>
 8013446:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013448:	6862      	ldr	r2, [r4, #4]
 801344a:	68db      	ldr	r3, [r3, #12]
 801344c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013450:	6021      	str	r1, [r4, #0]
 8013452:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013456:	bd70      	pop	{r4, r5, r6, pc}
 8013458:	08014c55 	.word	0x08014c55
 801345c:	08014cd8 	.word	0x08014cd8

08013460 <__multadd>:
 8013460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013464:	690d      	ldr	r5, [r1, #16]
 8013466:	4607      	mov	r7, r0
 8013468:	460c      	mov	r4, r1
 801346a:	461e      	mov	r6, r3
 801346c:	f101 0c14 	add.w	ip, r1, #20
 8013470:	2000      	movs	r0, #0
 8013472:	f8dc 3000 	ldr.w	r3, [ip]
 8013476:	b299      	uxth	r1, r3
 8013478:	fb02 6101 	mla	r1, r2, r1, r6
 801347c:	0c1e      	lsrs	r6, r3, #16
 801347e:	0c0b      	lsrs	r3, r1, #16
 8013480:	fb02 3306 	mla	r3, r2, r6, r3
 8013484:	b289      	uxth	r1, r1
 8013486:	3001      	adds	r0, #1
 8013488:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801348c:	4285      	cmp	r5, r0
 801348e:	f84c 1b04 	str.w	r1, [ip], #4
 8013492:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013496:	dcec      	bgt.n	8013472 <__multadd+0x12>
 8013498:	b30e      	cbz	r6, 80134de <__multadd+0x7e>
 801349a:	68a3      	ldr	r3, [r4, #8]
 801349c:	42ab      	cmp	r3, r5
 801349e:	dc19      	bgt.n	80134d4 <__multadd+0x74>
 80134a0:	6861      	ldr	r1, [r4, #4]
 80134a2:	4638      	mov	r0, r7
 80134a4:	3101      	adds	r1, #1
 80134a6:	f7ff ff79 	bl	801339c <_Balloc>
 80134aa:	4680      	mov	r8, r0
 80134ac:	b928      	cbnz	r0, 80134ba <__multadd+0x5a>
 80134ae:	4602      	mov	r2, r0
 80134b0:	4b0c      	ldr	r3, [pc, #48]	; (80134e4 <__multadd+0x84>)
 80134b2:	480d      	ldr	r0, [pc, #52]	; (80134e8 <__multadd+0x88>)
 80134b4:	21b5      	movs	r1, #181	; 0xb5
 80134b6:	f000 fb0b 	bl	8013ad0 <__assert_func>
 80134ba:	6922      	ldr	r2, [r4, #16]
 80134bc:	3202      	adds	r2, #2
 80134be:	f104 010c 	add.w	r1, r4, #12
 80134c2:	0092      	lsls	r2, r2, #2
 80134c4:	300c      	adds	r0, #12
 80134c6:	f7fe fbcf 	bl	8011c68 <memcpy>
 80134ca:	4621      	mov	r1, r4
 80134cc:	4638      	mov	r0, r7
 80134ce:	f7ff ffa5 	bl	801341c <_Bfree>
 80134d2:	4644      	mov	r4, r8
 80134d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80134d8:	3501      	adds	r5, #1
 80134da:	615e      	str	r6, [r3, #20]
 80134dc:	6125      	str	r5, [r4, #16]
 80134de:	4620      	mov	r0, r4
 80134e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134e4:	08014cc7 	.word	0x08014cc7
 80134e8:	08014cd8 	.word	0x08014cd8

080134ec <__hi0bits>:
 80134ec:	0c03      	lsrs	r3, r0, #16
 80134ee:	041b      	lsls	r3, r3, #16
 80134f0:	b9d3      	cbnz	r3, 8013528 <__hi0bits+0x3c>
 80134f2:	0400      	lsls	r0, r0, #16
 80134f4:	2310      	movs	r3, #16
 80134f6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80134fa:	bf04      	itt	eq
 80134fc:	0200      	lsleq	r0, r0, #8
 80134fe:	3308      	addeq	r3, #8
 8013500:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013504:	bf04      	itt	eq
 8013506:	0100      	lsleq	r0, r0, #4
 8013508:	3304      	addeq	r3, #4
 801350a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801350e:	bf04      	itt	eq
 8013510:	0080      	lsleq	r0, r0, #2
 8013512:	3302      	addeq	r3, #2
 8013514:	2800      	cmp	r0, #0
 8013516:	db05      	blt.n	8013524 <__hi0bits+0x38>
 8013518:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801351c:	f103 0301 	add.w	r3, r3, #1
 8013520:	bf08      	it	eq
 8013522:	2320      	moveq	r3, #32
 8013524:	4618      	mov	r0, r3
 8013526:	4770      	bx	lr
 8013528:	2300      	movs	r3, #0
 801352a:	e7e4      	b.n	80134f6 <__hi0bits+0xa>

0801352c <__lo0bits>:
 801352c:	6803      	ldr	r3, [r0, #0]
 801352e:	f013 0207 	ands.w	r2, r3, #7
 8013532:	4601      	mov	r1, r0
 8013534:	d00b      	beq.n	801354e <__lo0bits+0x22>
 8013536:	07da      	lsls	r2, r3, #31
 8013538:	d423      	bmi.n	8013582 <__lo0bits+0x56>
 801353a:	0798      	lsls	r0, r3, #30
 801353c:	bf49      	itett	mi
 801353e:	085b      	lsrmi	r3, r3, #1
 8013540:	089b      	lsrpl	r3, r3, #2
 8013542:	2001      	movmi	r0, #1
 8013544:	600b      	strmi	r3, [r1, #0]
 8013546:	bf5c      	itt	pl
 8013548:	600b      	strpl	r3, [r1, #0]
 801354a:	2002      	movpl	r0, #2
 801354c:	4770      	bx	lr
 801354e:	b298      	uxth	r0, r3
 8013550:	b9a8      	cbnz	r0, 801357e <__lo0bits+0x52>
 8013552:	0c1b      	lsrs	r3, r3, #16
 8013554:	2010      	movs	r0, #16
 8013556:	b2da      	uxtb	r2, r3
 8013558:	b90a      	cbnz	r2, 801355e <__lo0bits+0x32>
 801355a:	3008      	adds	r0, #8
 801355c:	0a1b      	lsrs	r3, r3, #8
 801355e:	071a      	lsls	r2, r3, #28
 8013560:	bf04      	itt	eq
 8013562:	091b      	lsreq	r3, r3, #4
 8013564:	3004      	addeq	r0, #4
 8013566:	079a      	lsls	r2, r3, #30
 8013568:	bf04      	itt	eq
 801356a:	089b      	lsreq	r3, r3, #2
 801356c:	3002      	addeq	r0, #2
 801356e:	07da      	lsls	r2, r3, #31
 8013570:	d403      	bmi.n	801357a <__lo0bits+0x4e>
 8013572:	085b      	lsrs	r3, r3, #1
 8013574:	f100 0001 	add.w	r0, r0, #1
 8013578:	d005      	beq.n	8013586 <__lo0bits+0x5a>
 801357a:	600b      	str	r3, [r1, #0]
 801357c:	4770      	bx	lr
 801357e:	4610      	mov	r0, r2
 8013580:	e7e9      	b.n	8013556 <__lo0bits+0x2a>
 8013582:	2000      	movs	r0, #0
 8013584:	4770      	bx	lr
 8013586:	2020      	movs	r0, #32
 8013588:	4770      	bx	lr
	...

0801358c <__i2b>:
 801358c:	b510      	push	{r4, lr}
 801358e:	460c      	mov	r4, r1
 8013590:	2101      	movs	r1, #1
 8013592:	f7ff ff03 	bl	801339c <_Balloc>
 8013596:	4602      	mov	r2, r0
 8013598:	b928      	cbnz	r0, 80135a6 <__i2b+0x1a>
 801359a:	4b05      	ldr	r3, [pc, #20]	; (80135b0 <__i2b+0x24>)
 801359c:	4805      	ldr	r0, [pc, #20]	; (80135b4 <__i2b+0x28>)
 801359e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80135a2:	f000 fa95 	bl	8013ad0 <__assert_func>
 80135a6:	2301      	movs	r3, #1
 80135a8:	6144      	str	r4, [r0, #20]
 80135aa:	6103      	str	r3, [r0, #16]
 80135ac:	bd10      	pop	{r4, pc}
 80135ae:	bf00      	nop
 80135b0:	08014cc7 	.word	0x08014cc7
 80135b4:	08014cd8 	.word	0x08014cd8

080135b8 <__multiply>:
 80135b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135bc:	4691      	mov	r9, r2
 80135be:	690a      	ldr	r2, [r1, #16]
 80135c0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80135c4:	429a      	cmp	r2, r3
 80135c6:	bfb8      	it	lt
 80135c8:	460b      	movlt	r3, r1
 80135ca:	460c      	mov	r4, r1
 80135cc:	bfbc      	itt	lt
 80135ce:	464c      	movlt	r4, r9
 80135d0:	4699      	movlt	r9, r3
 80135d2:	6927      	ldr	r7, [r4, #16]
 80135d4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80135d8:	68a3      	ldr	r3, [r4, #8]
 80135da:	6861      	ldr	r1, [r4, #4]
 80135dc:	eb07 060a 	add.w	r6, r7, sl
 80135e0:	42b3      	cmp	r3, r6
 80135e2:	b085      	sub	sp, #20
 80135e4:	bfb8      	it	lt
 80135e6:	3101      	addlt	r1, #1
 80135e8:	f7ff fed8 	bl	801339c <_Balloc>
 80135ec:	b930      	cbnz	r0, 80135fc <__multiply+0x44>
 80135ee:	4602      	mov	r2, r0
 80135f0:	4b44      	ldr	r3, [pc, #272]	; (8013704 <__multiply+0x14c>)
 80135f2:	4845      	ldr	r0, [pc, #276]	; (8013708 <__multiply+0x150>)
 80135f4:	f240 115d 	movw	r1, #349	; 0x15d
 80135f8:	f000 fa6a 	bl	8013ad0 <__assert_func>
 80135fc:	f100 0514 	add.w	r5, r0, #20
 8013600:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013604:	462b      	mov	r3, r5
 8013606:	2200      	movs	r2, #0
 8013608:	4543      	cmp	r3, r8
 801360a:	d321      	bcc.n	8013650 <__multiply+0x98>
 801360c:	f104 0314 	add.w	r3, r4, #20
 8013610:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8013614:	f109 0314 	add.w	r3, r9, #20
 8013618:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801361c:	9202      	str	r2, [sp, #8]
 801361e:	1b3a      	subs	r2, r7, r4
 8013620:	3a15      	subs	r2, #21
 8013622:	f022 0203 	bic.w	r2, r2, #3
 8013626:	3204      	adds	r2, #4
 8013628:	f104 0115 	add.w	r1, r4, #21
 801362c:	428f      	cmp	r7, r1
 801362e:	bf38      	it	cc
 8013630:	2204      	movcc	r2, #4
 8013632:	9201      	str	r2, [sp, #4]
 8013634:	9a02      	ldr	r2, [sp, #8]
 8013636:	9303      	str	r3, [sp, #12]
 8013638:	429a      	cmp	r2, r3
 801363a:	d80c      	bhi.n	8013656 <__multiply+0x9e>
 801363c:	2e00      	cmp	r6, #0
 801363e:	dd03      	ble.n	8013648 <__multiply+0x90>
 8013640:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013644:	2b00      	cmp	r3, #0
 8013646:	d05a      	beq.n	80136fe <__multiply+0x146>
 8013648:	6106      	str	r6, [r0, #16]
 801364a:	b005      	add	sp, #20
 801364c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013650:	f843 2b04 	str.w	r2, [r3], #4
 8013654:	e7d8      	b.n	8013608 <__multiply+0x50>
 8013656:	f8b3 a000 	ldrh.w	sl, [r3]
 801365a:	f1ba 0f00 	cmp.w	sl, #0
 801365e:	d024      	beq.n	80136aa <__multiply+0xf2>
 8013660:	f104 0e14 	add.w	lr, r4, #20
 8013664:	46a9      	mov	r9, r5
 8013666:	f04f 0c00 	mov.w	ip, #0
 801366a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801366e:	f8d9 1000 	ldr.w	r1, [r9]
 8013672:	fa1f fb82 	uxth.w	fp, r2
 8013676:	b289      	uxth	r1, r1
 8013678:	fb0a 110b 	mla	r1, sl, fp, r1
 801367c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8013680:	f8d9 2000 	ldr.w	r2, [r9]
 8013684:	4461      	add	r1, ip
 8013686:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801368a:	fb0a c20b 	mla	r2, sl, fp, ip
 801368e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013692:	b289      	uxth	r1, r1
 8013694:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013698:	4577      	cmp	r7, lr
 801369a:	f849 1b04 	str.w	r1, [r9], #4
 801369e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80136a2:	d8e2      	bhi.n	801366a <__multiply+0xb2>
 80136a4:	9a01      	ldr	r2, [sp, #4]
 80136a6:	f845 c002 	str.w	ip, [r5, r2]
 80136aa:	9a03      	ldr	r2, [sp, #12]
 80136ac:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80136b0:	3304      	adds	r3, #4
 80136b2:	f1b9 0f00 	cmp.w	r9, #0
 80136b6:	d020      	beq.n	80136fa <__multiply+0x142>
 80136b8:	6829      	ldr	r1, [r5, #0]
 80136ba:	f104 0c14 	add.w	ip, r4, #20
 80136be:	46ae      	mov	lr, r5
 80136c0:	f04f 0a00 	mov.w	sl, #0
 80136c4:	f8bc b000 	ldrh.w	fp, [ip]
 80136c8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80136cc:	fb09 220b 	mla	r2, r9, fp, r2
 80136d0:	4492      	add	sl, r2
 80136d2:	b289      	uxth	r1, r1
 80136d4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80136d8:	f84e 1b04 	str.w	r1, [lr], #4
 80136dc:	f85c 2b04 	ldr.w	r2, [ip], #4
 80136e0:	f8be 1000 	ldrh.w	r1, [lr]
 80136e4:	0c12      	lsrs	r2, r2, #16
 80136e6:	fb09 1102 	mla	r1, r9, r2, r1
 80136ea:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80136ee:	4567      	cmp	r7, ip
 80136f0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80136f4:	d8e6      	bhi.n	80136c4 <__multiply+0x10c>
 80136f6:	9a01      	ldr	r2, [sp, #4]
 80136f8:	50a9      	str	r1, [r5, r2]
 80136fa:	3504      	adds	r5, #4
 80136fc:	e79a      	b.n	8013634 <__multiply+0x7c>
 80136fe:	3e01      	subs	r6, #1
 8013700:	e79c      	b.n	801363c <__multiply+0x84>
 8013702:	bf00      	nop
 8013704:	08014cc7 	.word	0x08014cc7
 8013708:	08014cd8 	.word	0x08014cd8

0801370c <__pow5mult>:
 801370c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013710:	4615      	mov	r5, r2
 8013712:	f012 0203 	ands.w	r2, r2, #3
 8013716:	4606      	mov	r6, r0
 8013718:	460f      	mov	r7, r1
 801371a:	d007      	beq.n	801372c <__pow5mult+0x20>
 801371c:	4c25      	ldr	r4, [pc, #148]	; (80137b4 <__pow5mult+0xa8>)
 801371e:	3a01      	subs	r2, #1
 8013720:	2300      	movs	r3, #0
 8013722:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013726:	f7ff fe9b 	bl	8013460 <__multadd>
 801372a:	4607      	mov	r7, r0
 801372c:	10ad      	asrs	r5, r5, #2
 801372e:	d03d      	beq.n	80137ac <__pow5mult+0xa0>
 8013730:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013732:	b97c      	cbnz	r4, 8013754 <__pow5mult+0x48>
 8013734:	2010      	movs	r0, #16
 8013736:	f7fe fa87 	bl	8011c48 <malloc>
 801373a:	4602      	mov	r2, r0
 801373c:	6270      	str	r0, [r6, #36]	; 0x24
 801373e:	b928      	cbnz	r0, 801374c <__pow5mult+0x40>
 8013740:	4b1d      	ldr	r3, [pc, #116]	; (80137b8 <__pow5mult+0xac>)
 8013742:	481e      	ldr	r0, [pc, #120]	; (80137bc <__pow5mult+0xb0>)
 8013744:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8013748:	f000 f9c2 	bl	8013ad0 <__assert_func>
 801374c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013750:	6004      	str	r4, [r0, #0]
 8013752:	60c4      	str	r4, [r0, #12]
 8013754:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013758:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801375c:	b94c      	cbnz	r4, 8013772 <__pow5mult+0x66>
 801375e:	f240 2171 	movw	r1, #625	; 0x271
 8013762:	4630      	mov	r0, r6
 8013764:	f7ff ff12 	bl	801358c <__i2b>
 8013768:	2300      	movs	r3, #0
 801376a:	f8c8 0008 	str.w	r0, [r8, #8]
 801376e:	4604      	mov	r4, r0
 8013770:	6003      	str	r3, [r0, #0]
 8013772:	f04f 0900 	mov.w	r9, #0
 8013776:	07eb      	lsls	r3, r5, #31
 8013778:	d50a      	bpl.n	8013790 <__pow5mult+0x84>
 801377a:	4639      	mov	r1, r7
 801377c:	4622      	mov	r2, r4
 801377e:	4630      	mov	r0, r6
 8013780:	f7ff ff1a 	bl	80135b8 <__multiply>
 8013784:	4639      	mov	r1, r7
 8013786:	4680      	mov	r8, r0
 8013788:	4630      	mov	r0, r6
 801378a:	f7ff fe47 	bl	801341c <_Bfree>
 801378e:	4647      	mov	r7, r8
 8013790:	106d      	asrs	r5, r5, #1
 8013792:	d00b      	beq.n	80137ac <__pow5mult+0xa0>
 8013794:	6820      	ldr	r0, [r4, #0]
 8013796:	b938      	cbnz	r0, 80137a8 <__pow5mult+0x9c>
 8013798:	4622      	mov	r2, r4
 801379a:	4621      	mov	r1, r4
 801379c:	4630      	mov	r0, r6
 801379e:	f7ff ff0b 	bl	80135b8 <__multiply>
 80137a2:	6020      	str	r0, [r4, #0]
 80137a4:	f8c0 9000 	str.w	r9, [r0]
 80137a8:	4604      	mov	r4, r0
 80137aa:	e7e4      	b.n	8013776 <__pow5mult+0x6a>
 80137ac:	4638      	mov	r0, r7
 80137ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80137b2:	bf00      	nop
 80137b4:	08014e28 	.word	0x08014e28
 80137b8:	08014c55 	.word	0x08014c55
 80137bc:	08014cd8 	.word	0x08014cd8

080137c0 <__lshift>:
 80137c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80137c4:	460c      	mov	r4, r1
 80137c6:	6849      	ldr	r1, [r1, #4]
 80137c8:	6923      	ldr	r3, [r4, #16]
 80137ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80137ce:	68a3      	ldr	r3, [r4, #8]
 80137d0:	4607      	mov	r7, r0
 80137d2:	4691      	mov	r9, r2
 80137d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80137d8:	f108 0601 	add.w	r6, r8, #1
 80137dc:	42b3      	cmp	r3, r6
 80137de:	db0b      	blt.n	80137f8 <__lshift+0x38>
 80137e0:	4638      	mov	r0, r7
 80137e2:	f7ff fddb 	bl	801339c <_Balloc>
 80137e6:	4605      	mov	r5, r0
 80137e8:	b948      	cbnz	r0, 80137fe <__lshift+0x3e>
 80137ea:	4602      	mov	r2, r0
 80137ec:	4b2a      	ldr	r3, [pc, #168]	; (8013898 <__lshift+0xd8>)
 80137ee:	482b      	ldr	r0, [pc, #172]	; (801389c <__lshift+0xdc>)
 80137f0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80137f4:	f000 f96c 	bl	8013ad0 <__assert_func>
 80137f8:	3101      	adds	r1, #1
 80137fa:	005b      	lsls	r3, r3, #1
 80137fc:	e7ee      	b.n	80137dc <__lshift+0x1c>
 80137fe:	2300      	movs	r3, #0
 8013800:	f100 0114 	add.w	r1, r0, #20
 8013804:	f100 0210 	add.w	r2, r0, #16
 8013808:	4618      	mov	r0, r3
 801380a:	4553      	cmp	r3, sl
 801380c:	db37      	blt.n	801387e <__lshift+0xbe>
 801380e:	6920      	ldr	r0, [r4, #16]
 8013810:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013814:	f104 0314 	add.w	r3, r4, #20
 8013818:	f019 091f 	ands.w	r9, r9, #31
 801381c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013820:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8013824:	d02f      	beq.n	8013886 <__lshift+0xc6>
 8013826:	f1c9 0e20 	rsb	lr, r9, #32
 801382a:	468a      	mov	sl, r1
 801382c:	f04f 0c00 	mov.w	ip, #0
 8013830:	681a      	ldr	r2, [r3, #0]
 8013832:	fa02 f209 	lsl.w	r2, r2, r9
 8013836:	ea42 020c 	orr.w	r2, r2, ip
 801383a:	f84a 2b04 	str.w	r2, [sl], #4
 801383e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013842:	4298      	cmp	r0, r3
 8013844:	fa22 fc0e 	lsr.w	ip, r2, lr
 8013848:	d8f2      	bhi.n	8013830 <__lshift+0x70>
 801384a:	1b03      	subs	r3, r0, r4
 801384c:	3b15      	subs	r3, #21
 801384e:	f023 0303 	bic.w	r3, r3, #3
 8013852:	3304      	adds	r3, #4
 8013854:	f104 0215 	add.w	r2, r4, #21
 8013858:	4290      	cmp	r0, r2
 801385a:	bf38      	it	cc
 801385c:	2304      	movcc	r3, #4
 801385e:	f841 c003 	str.w	ip, [r1, r3]
 8013862:	f1bc 0f00 	cmp.w	ip, #0
 8013866:	d001      	beq.n	801386c <__lshift+0xac>
 8013868:	f108 0602 	add.w	r6, r8, #2
 801386c:	3e01      	subs	r6, #1
 801386e:	4638      	mov	r0, r7
 8013870:	612e      	str	r6, [r5, #16]
 8013872:	4621      	mov	r1, r4
 8013874:	f7ff fdd2 	bl	801341c <_Bfree>
 8013878:	4628      	mov	r0, r5
 801387a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801387e:	f842 0f04 	str.w	r0, [r2, #4]!
 8013882:	3301      	adds	r3, #1
 8013884:	e7c1      	b.n	801380a <__lshift+0x4a>
 8013886:	3904      	subs	r1, #4
 8013888:	f853 2b04 	ldr.w	r2, [r3], #4
 801388c:	f841 2f04 	str.w	r2, [r1, #4]!
 8013890:	4298      	cmp	r0, r3
 8013892:	d8f9      	bhi.n	8013888 <__lshift+0xc8>
 8013894:	e7ea      	b.n	801386c <__lshift+0xac>
 8013896:	bf00      	nop
 8013898:	08014cc7 	.word	0x08014cc7
 801389c:	08014cd8 	.word	0x08014cd8

080138a0 <__mcmp>:
 80138a0:	b530      	push	{r4, r5, lr}
 80138a2:	6902      	ldr	r2, [r0, #16]
 80138a4:	690c      	ldr	r4, [r1, #16]
 80138a6:	1b12      	subs	r2, r2, r4
 80138a8:	d10e      	bne.n	80138c8 <__mcmp+0x28>
 80138aa:	f100 0314 	add.w	r3, r0, #20
 80138ae:	3114      	adds	r1, #20
 80138b0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80138b4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80138b8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80138bc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80138c0:	42a5      	cmp	r5, r4
 80138c2:	d003      	beq.n	80138cc <__mcmp+0x2c>
 80138c4:	d305      	bcc.n	80138d2 <__mcmp+0x32>
 80138c6:	2201      	movs	r2, #1
 80138c8:	4610      	mov	r0, r2
 80138ca:	bd30      	pop	{r4, r5, pc}
 80138cc:	4283      	cmp	r3, r0
 80138ce:	d3f3      	bcc.n	80138b8 <__mcmp+0x18>
 80138d0:	e7fa      	b.n	80138c8 <__mcmp+0x28>
 80138d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80138d6:	e7f7      	b.n	80138c8 <__mcmp+0x28>

080138d8 <__mdiff>:
 80138d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138dc:	460c      	mov	r4, r1
 80138de:	4606      	mov	r6, r0
 80138e0:	4611      	mov	r1, r2
 80138e2:	4620      	mov	r0, r4
 80138e4:	4690      	mov	r8, r2
 80138e6:	f7ff ffdb 	bl	80138a0 <__mcmp>
 80138ea:	1e05      	subs	r5, r0, #0
 80138ec:	d110      	bne.n	8013910 <__mdiff+0x38>
 80138ee:	4629      	mov	r1, r5
 80138f0:	4630      	mov	r0, r6
 80138f2:	f7ff fd53 	bl	801339c <_Balloc>
 80138f6:	b930      	cbnz	r0, 8013906 <__mdiff+0x2e>
 80138f8:	4b3a      	ldr	r3, [pc, #232]	; (80139e4 <__mdiff+0x10c>)
 80138fa:	4602      	mov	r2, r0
 80138fc:	f240 2132 	movw	r1, #562	; 0x232
 8013900:	4839      	ldr	r0, [pc, #228]	; (80139e8 <__mdiff+0x110>)
 8013902:	f000 f8e5 	bl	8013ad0 <__assert_func>
 8013906:	2301      	movs	r3, #1
 8013908:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801390c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013910:	bfa4      	itt	ge
 8013912:	4643      	movge	r3, r8
 8013914:	46a0      	movge	r8, r4
 8013916:	4630      	mov	r0, r6
 8013918:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801391c:	bfa6      	itte	ge
 801391e:	461c      	movge	r4, r3
 8013920:	2500      	movge	r5, #0
 8013922:	2501      	movlt	r5, #1
 8013924:	f7ff fd3a 	bl	801339c <_Balloc>
 8013928:	b920      	cbnz	r0, 8013934 <__mdiff+0x5c>
 801392a:	4b2e      	ldr	r3, [pc, #184]	; (80139e4 <__mdiff+0x10c>)
 801392c:	4602      	mov	r2, r0
 801392e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8013932:	e7e5      	b.n	8013900 <__mdiff+0x28>
 8013934:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013938:	6926      	ldr	r6, [r4, #16]
 801393a:	60c5      	str	r5, [r0, #12]
 801393c:	f104 0914 	add.w	r9, r4, #20
 8013940:	f108 0514 	add.w	r5, r8, #20
 8013944:	f100 0e14 	add.w	lr, r0, #20
 8013948:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801394c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8013950:	f108 0210 	add.w	r2, r8, #16
 8013954:	46f2      	mov	sl, lr
 8013956:	2100      	movs	r1, #0
 8013958:	f859 3b04 	ldr.w	r3, [r9], #4
 801395c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013960:	fa1f f883 	uxth.w	r8, r3
 8013964:	fa11 f18b 	uxtah	r1, r1, fp
 8013968:	0c1b      	lsrs	r3, r3, #16
 801396a:	eba1 0808 	sub.w	r8, r1, r8
 801396e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013972:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013976:	fa1f f888 	uxth.w	r8, r8
 801397a:	1419      	asrs	r1, r3, #16
 801397c:	454e      	cmp	r6, r9
 801397e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013982:	f84a 3b04 	str.w	r3, [sl], #4
 8013986:	d8e7      	bhi.n	8013958 <__mdiff+0x80>
 8013988:	1b33      	subs	r3, r6, r4
 801398a:	3b15      	subs	r3, #21
 801398c:	f023 0303 	bic.w	r3, r3, #3
 8013990:	3304      	adds	r3, #4
 8013992:	3415      	adds	r4, #21
 8013994:	42a6      	cmp	r6, r4
 8013996:	bf38      	it	cc
 8013998:	2304      	movcc	r3, #4
 801399a:	441d      	add	r5, r3
 801399c:	4473      	add	r3, lr
 801399e:	469e      	mov	lr, r3
 80139a0:	462e      	mov	r6, r5
 80139a2:	4566      	cmp	r6, ip
 80139a4:	d30e      	bcc.n	80139c4 <__mdiff+0xec>
 80139a6:	f10c 0203 	add.w	r2, ip, #3
 80139aa:	1b52      	subs	r2, r2, r5
 80139ac:	f022 0203 	bic.w	r2, r2, #3
 80139b0:	3d03      	subs	r5, #3
 80139b2:	45ac      	cmp	ip, r5
 80139b4:	bf38      	it	cc
 80139b6:	2200      	movcc	r2, #0
 80139b8:	441a      	add	r2, r3
 80139ba:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80139be:	b17b      	cbz	r3, 80139e0 <__mdiff+0x108>
 80139c0:	6107      	str	r7, [r0, #16]
 80139c2:	e7a3      	b.n	801390c <__mdiff+0x34>
 80139c4:	f856 8b04 	ldr.w	r8, [r6], #4
 80139c8:	fa11 f288 	uxtah	r2, r1, r8
 80139cc:	1414      	asrs	r4, r2, #16
 80139ce:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80139d2:	b292      	uxth	r2, r2
 80139d4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80139d8:	f84e 2b04 	str.w	r2, [lr], #4
 80139dc:	1421      	asrs	r1, r4, #16
 80139de:	e7e0      	b.n	80139a2 <__mdiff+0xca>
 80139e0:	3f01      	subs	r7, #1
 80139e2:	e7ea      	b.n	80139ba <__mdiff+0xe2>
 80139e4:	08014cc7 	.word	0x08014cc7
 80139e8:	08014cd8 	.word	0x08014cd8

080139ec <__d2b>:
 80139ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80139f0:	4689      	mov	r9, r1
 80139f2:	2101      	movs	r1, #1
 80139f4:	ec57 6b10 	vmov	r6, r7, d0
 80139f8:	4690      	mov	r8, r2
 80139fa:	f7ff fccf 	bl	801339c <_Balloc>
 80139fe:	4604      	mov	r4, r0
 8013a00:	b930      	cbnz	r0, 8013a10 <__d2b+0x24>
 8013a02:	4602      	mov	r2, r0
 8013a04:	4b25      	ldr	r3, [pc, #148]	; (8013a9c <__d2b+0xb0>)
 8013a06:	4826      	ldr	r0, [pc, #152]	; (8013aa0 <__d2b+0xb4>)
 8013a08:	f240 310a 	movw	r1, #778	; 0x30a
 8013a0c:	f000 f860 	bl	8013ad0 <__assert_func>
 8013a10:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8013a14:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013a18:	bb35      	cbnz	r5, 8013a68 <__d2b+0x7c>
 8013a1a:	2e00      	cmp	r6, #0
 8013a1c:	9301      	str	r3, [sp, #4]
 8013a1e:	d028      	beq.n	8013a72 <__d2b+0x86>
 8013a20:	4668      	mov	r0, sp
 8013a22:	9600      	str	r6, [sp, #0]
 8013a24:	f7ff fd82 	bl	801352c <__lo0bits>
 8013a28:	9900      	ldr	r1, [sp, #0]
 8013a2a:	b300      	cbz	r0, 8013a6e <__d2b+0x82>
 8013a2c:	9a01      	ldr	r2, [sp, #4]
 8013a2e:	f1c0 0320 	rsb	r3, r0, #32
 8013a32:	fa02 f303 	lsl.w	r3, r2, r3
 8013a36:	430b      	orrs	r3, r1
 8013a38:	40c2      	lsrs	r2, r0
 8013a3a:	6163      	str	r3, [r4, #20]
 8013a3c:	9201      	str	r2, [sp, #4]
 8013a3e:	9b01      	ldr	r3, [sp, #4]
 8013a40:	61a3      	str	r3, [r4, #24]
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	bf14      	ite	ne
 8013a46:	2202      	movne	r2, #2
 8013a48:	2201      	moveq	r2, #1
 8013a4a:	6122      	str	r2, [r4, #16]
 8013a4c:	b1d5      	cbz	r5, 8013a84 <__d2b+0x98>
 8013a4e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013a52:	4405      	add	r5, r0
 8013a54:	f8c9 5000 	str.w	r5, [r9]
 8013a58:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013a5c:	f8c8 0000 	str.w	r0, [r8]
 8013a60:	4620      	mov	r0, r4
 8013a62:	b003      	add	sp, #12
 8013a64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013a68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013a6c:	e7d5      	b.n	8013a1a <__d2b+0x2e>
 8013a6e:	6161      	str	r1, [r4, #20]
 8013a70:	e7e5      	b.n	8013a3e <__d2b+0x52>
 8013a72:	a801      	add	r0, sp, #4
 8013a74:	f7ff fd5a 	bl	801352c <__lo0bits>
 8013a78:	9b01      	ldr	r3, [sp, #4]
 8013a7a:	6163      	str	r3, [r4, #20]
 8013a7c:	2201      	movs	r2, #1
 8013a7e:	6122      	str	r2, [r4, #16]
 8013a80:	3020      	adds	r0, #32
 8013a82:	e7e3      	b.n	8013a4c <__d2b+0x60>
 8013a84:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013a88:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013a8c:	f8c9 0000 	str.w	r0, [r9]
 8013a90:	6918      	ldr	r0, [r3, #16]
 8013a92:	f7ff fd2b 	bl	80134ec <__hi0bits>
 8013a96:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013a9a:	e7df      	b.n	8013a5c <__d2b+0x70>
 8013a9c:	08014cc7 	.word	0x08014cc7
 8013aa0:	08014cd8 	.word	0x08014cd8

08013aa4 <_calloc_r>:
 8013aa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013aa6:	fba1 2402 	umull	r2, r4, r1, r2
 8013aaa:	b94c      	cbnz	r4, 8013ac0 <_calloc_r+0x1c>
 8013aac:	4611      	mov	r1, r2
 8013aae:	9201      	str	r2, [sp, #4]
 8013ab0:	f7fe f95c 	bl	8011d6c <_malloc_r>
 8013ab4:	9a01      	ldr	r2, [sp, #4]
 8013ab6:	4605      	mov	r5, r0
 8013ab8:	b930      	cbnz	r0, 8013ac8 <_calloc_r+0x24>
 8013aba:	4628      	mov	r0, r5
 8013abc:	b003      	add	sp, #12
 8013abe:	bd30      	pop	{r4, r5, pc}
 8013ac0:	220c      	movs	r2, #12
 8013ac2:	6002      	str	r2, [r0, #0]
 8013ac4:	2500      	movs	r5, #0
 8013ac6:	e7f8      	b.n	8013aba <_calloc_r+0x16>
 8013ac8:	4621      	mov	r1, r4
 8013aca:	f7fe f8db 	bl	8011c84 <memset>
 8013ace:	e7f4      	b.n	8013aba <_calloc_r+0x16>

08013ad0 <__assert_func>:
 8013ad0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013ad2:	4614      	mov	r4, r2
 8013ad4:	461a      	mov	r2, r3
 8013ad6:	4b09      	ldr	r3, [pc, #36]	; (8013afc <__assert_func+0x2c>)
 8013ad8:	681b      	ldr	r3, [r3, #0]
 8013ada:	4605      	mov	r5, r0
 8013adc:	68d8      	ldr	r0, [r3, #12]
 8013ade:	b14c      	cbz	r4, 8013af4 <__assert_func+0x24>
 8013ae0:	4b07      	ldr	r3, [pc, #28]	; (8013b00 <__assert_func+0x30>)
 8013ae2:	9100      	str	r1, [sp, #0]
 8013ae4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013ae8:	4906      	ldr	r1, [pc, #24]	; (8013b04 <__assert_func+0x34>)
 8013aea:	462b      	mov	r3, r5
 8013aec:	f000 f80e 	bl	8013b0c <fiprintf>
 8013af0:	f7fe f878 	bl	8011be4 <abort>
 8013af4:	4b04      	ldr	r3, [pc, #16]	; (8013b08 <__assert_func+0x38>)
 8013af6:	461c      	mov	r4, r3
 8013af8:	e7f3      	b.n	8013ae2 <__assert_func+0x12>
 8013afa:	bf00      	nop
 8013afc:	24000010 	.word	0x24000010
 8013b00:	08014e34 	.word	0x08014e34
 8013b04:	08014e41 	.word	0x08014e41
 8013b08:	08014e6f 	.word	0x08014e6f

08013b0c <fiprintf>:
 8013b0c:	b40e      	push	{r1, r2, r3}
 8013b0e:	b503      	push	{r0, r1, lr}
 8013b10:	4601      	mov	r1, r0
 8013b12:	ab03      	add	r3, sp, #12
 8013b14:	4805      	ldr	r0, [pc, #20]	; (8013b2c <fiprintf+0x20>)
 8013b16:	f853 2b04 	ldr.w	r2, [r3], #4
 8013b1a:	6800      	ldr	r0, [r0, #0]
 8013b1c:	9301      	str	r3, [sp, #4]
 8013b1e:	f000 f845 	bl	8013bac <_vfiprintf_r>
 8013b22:	b002      	add	sp, #8
 8013b24:	f85d eb04 	ldr.w	lr, [sp], #4
 8013b28:	b003      	add	sp, #12
 8013b2a:	4770      	bx	lr
 8013b2c:	24000010 	.word	0x24000010

08013b30 <__retarget_lock_init_recursive>:
 8013b30:	4770      	bx	lr

08013b32 <__retarget_lock_acquire_recursive>:
 8013b32:	4770      	bx	lr

08013b34 <__retarget_lock_release_recursive>:
 8013b34:	4770      	bx	lr

08013b36 <__ascii_mbtowc>:
 8013b36:	b082      	sub	sp, #8
 8013b38:	b901      	cbnz	r1, 8013b3c <__ascii_mbtowc+0x6>
 8013b3a:	a901      	add	r1, sp, #4
 8013b3c:	b142      	cbz	r2, 8013b50 <__ascii_mbtowc+0x1a>
 8013b3e:	b14b      	cbz	r3, 8013b54 <__ascii_mbtowc+0x1e>
 8013b40:	7813      	ldrb	r3, [r2, #0]
 8013b42:	600b      	str	r3, [r1, #0]
 8013b44:	7812      	ldrb	r2, [r2, #0]
 8013b46:	1e10      	subs	r0, r2, #0
 8013b48:	bf18      	it	ne
 8013b4a:	2001      	movne	r0, #1
 8013b4c:	b002      	add	sp, #8
 8013b4e:	4770      	bx	lr
 8013b50:	4610      	mov	r0, r2
 8013b52:	e7fb      	b.n	8013b4c <__ascii_mbtowc+0x16>
 8013b54:	f06f 0001 	mvn.w	r0, #1
 8013b58:	e7f8      	b.n	8013b4c <__ascii_mbtowc+0x16>

08013b5a <__sfputc_r>:
 8013b5a:	6893      	ldr	r3, [r2, #8]
 8013b5c:	3b01      	subs	r3, #1
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	b410      	push	{r4}
 8013b62:	6093      	str	r3, [r2, #8]
 8013b64:	da08      	bge.n	8013b78 <__sfputc_r+0x1e>
 8013b66:	6994      	ldr	r4, [r2, #24]
 8013b68:	42a3      	cmp	r3, r4
 8013b6a:	db01      	blt.n	8013b70 <__sfputc_r+0x16>
 8013b6c:	290a      	cmp	r1, #10
 8013b6e:	d103      	bne.n	8013b78 <__sfputc_r+0x1e>
 8013b70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013b74:	f000 b94a 	b.w	8013e0c <__swbuf_r>
 8013b78:	6813      	ldr	r3, [r2, #0]
 8013b7a:	1c58      	adds	r0, r3, #1
 8013b7c:	6010      	str	r0, [r2, #0]
 8013b7e:	7019      	strb	r1, [r3, #0]
 8013b80:	4608      	mov	r0, r1
 8013b82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013b86:	4770      	bx	lr

08013b88 <__sfputs_r>:
 8013b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b8a:	4606      	mov	r6, r0
 8013b8c:	460f      	mov	r7, r1
 8013b8e:	4614      	mov	r4, r2
 8013b90:	18d5      	adds	r5, r2, r3
 8013b92:	42ac      	cmp	r4, r5
 8013b94:	d101      	bne.n	8013b9a <__sfputs_r+0x12>
 8013b96:	2000      	movs	r0, #0
 8013b98:	e007      	b.n	8013baa <__sfputs_r+0x22>
 8013b9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b9e:	463a      	mov	r2, r7
 8013ba0:	4630      	mov	r0, r6
 8013ba2:	f7ff ffda 	bl	8013b5a <__sfputc_r>
 8013ba6:	1c43      	adds	r3, r0, #1
 8013ba8:	d1f3      	bne.n	8013b92 <__sfputs_r+0xa>
 8013baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013bac <_vfiprintf_r>:
 8013bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bb0:	460d      	mov	r5, r1
 8013bb2:	b09d      	sub	sp, #116	; 0x74
 8013bb4:	4614      	mov	r4, r2
 8013bb6:	4698      	mov	r8, r3
 8013bb8:	4606      	mov	r6, r0
 8013bba:	b118      	cbz	r0, 8013bc4 <_vfiprintf_r+0x18>
 8013bbc:	6983      	ldr	r3, [r0, #24]
 8013bbe:	b90b      	cbnz	r3, 8013bc4 <_vfiprintf_r+0x18>
 8013bc0:	f000 fb0c 	bl	80141dc <__sinit>
 8013bc4:	4b89      	ldr	r3, [pc, #548]	; (8013dec <_vfiprintf_r+0x240>)
 8013bc6:	429d      	cmp	r5, r3
 8013bc8:	d11b      	bne.n	8013c02 <_vfiprintf_r+0x56>
 8013bca:	6875      	ldr	r5, [r6, #4]
 8013bcc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013bce:	07d9      	lsls	r1, r3, #31
 8013bd0:	d405      	bmi.n	8013bde <_vfiprintf_r+0x32>
 8013bd2:	89ab      	ldrh	r3, [r5, #12]
 8013bd4:	059a      	lsls	r2, r3, #22
 8013bd6:	d402      	bmi.n	8013bde <_vfiprintf_r+0x32>
 8013bd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013bda:	f7ff ffaa 	bl	8013b32 <__retarget_lock_acquire_recursive>
 8013bde:	89ab      	ldrh	r3, [r5, #12]
 8013be0:	071b      	lsls	r3, r3, #28
 8013be2:	d501      	bpl.n	8013be8 <_vfiprintf_r+0x3c>
 8013be4:	692b      	ldr	r3, [r5, #16]
 8013be6:	b9eb      	cbnz	r3, 8013c24 <_vfiprintf_r+0x78>
 8013be8:	4629      	mov	r1, r5
 8013bea:	4630      	mov	r0, r6
 8013bec:	f000 f96e 	bl	8013ecc <__swsetup_r>
 8013bf0:	b1c0      	cbz	r0, 8013c24 <_vfiprintf_r+0x78>
 8013bf2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013bf4:	07dc      	lsls	r4, r3, #31
 8013bf6:	d50e      	bpl.n	8013c16 <_vfiprintf_r+0x6a>
 8013bf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013bfc:	b01d      	add	sp, #116	; 0x74
 8013bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c02:	4b7b      	ldr	r3, [pc, #492]	; (8013df0 <_vfiprintf_r+0x244>)
 8013c04:	429d      	cmp	r5, r3
 8013c06:	d101      	bne.n	8013c0c <_vfiprintf_r+0x60>
 8013c08:	68b5      	ldr	r5, [r6, #8]
 8013c0a:	e7df      	b.n	8013bcc <_vfiprintf_r+0x20>
 8013c0c:	4b79      	ldr	r3, [pc, #484]	; (8013df4 <_vfiprintf_r+0x248>)
 8013c0e:	429d      	cmp	r5, r3
 8013c10:	bf08      	it	eq
 8013c12:	68f5      	ldreq	r5, [r6, #12]
 8013c14:	e7da      	b.n	8013bcc <_vfiprintf_r+0x20>
 8013c16:	89ab      	ldrh	r3, [r5, #12]
 8013c18:	0598      	lsls	r0, r3, #22
 8013c1a:	d4ed      	bmi.n	8013bf8 <_vfiprintf_r+0x4c>
 8013c1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013c1e:	f7ff ff89 	bl	8013b34 <__retarget_lock_release_recursive>
 8013c22:	e7e9      	b.n	8013bf8 <_vfiprintf_r+0x4c>
 8013c24:	2300      	movs	r3, #0
 8013c26:	9309      	str	r3, [sp, #36]	; 0x24
 8013c28:	2320      	movs	r3, #32
 8013c2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013c2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8013c32:	2330      	movs	r3, #48	; 0x30
 8013c34:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013df8 <_vfiprintf_r+0x24c>
 8013c38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013c3c:	f04f 0901 	mov.w	r9, #1
 8013c40:	4623      	mov	r3, r4
 8013c42:	469a      	mov	sl, r3
 8013c44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013c48:	b10a      	cbz	r2, 8013c4e <_vfiprintf_r+0xa2>
 8013c4a:	2a25      	cmp	r2, #37	; 0x25
 8013c4c:	d1f9      	bne.n	8013c42 <_vfiprintf_r+0x96>
 8013c4e:	ebba 0b04 	subs.w	fp, sl, r4
 8013c52:	d00b      	beq.n	8013c6c <_vfiprintf_r+0xc0>
 8013c54:	465b      	mov	r3, fp
 8013c56:	4622      	mov	r2, r4
 8013c58:	4629      	mov	r1, r5
 8013c5a:	4630      	mov	r0, r6
 8013c5c:	f7ff ff94 	bl	8013b88 <__sfputs_r>
 8013c60:	3001      	adds	r0, #1
 8013c62:	f000 80aa 	beq.w	8013dba <_vfiprintf_r+0x20e>
 8013c66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013c68:	445a      	add	r2, fp
 8013c6a:	9209      	str	r2, [sp, #36]	; 0x24
 8013c6c:	f89a 3000 	ldrb.w	r3, [sl]
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	f000 80a2 	beq.w	8013dba <_vfiprintf_r+0x20e>
 8013c76:	2300      	movs	r3, #0
 8013c78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013c7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013c80:	f10a 0a01 	add.w	sl, sl, #1
 8013c84:	9304      	str	r3, [sp, #16]
 8013c86:	9307      	str	r3, [sp, #28]
 8013c88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013c8c:	931a      	str	r3, [sp, #104]	; 0x68
 8013c8e:	4654      	mov	r4, sl
 8013c90:	2205      	movs	r2, #5
 8013c92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013c96:	4858      	ldr	r0, [pc, #352]	; (8013df8 <_vfiprintf_r+0x24c>)
 8013c98:	f7ec fb2a 	bl	80002f0 <memchr>
 8013c9c:	9a04      	ldr	r2, [sp, #16]
 8013c9e:	b9d8      	cbnz	r0, 8013cd8 <_vfiprintf_r+0x12c>
 8013ca0:	06d1      	lsls	r1, r2, #27
 8013ca2:	bf44      	itt	mi
 8013ca4:	2320      	movmi	r3, #32
 8013ca6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013caa:	0713      	lsls	r3, r2, #28
 8013cac:	bf44      	itt	mi
 8013cae:	232b      	movmi	r3, #43	; 0x2b
 8013cb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013cb4:	f89a 3000 	ldrb.w	r3, [sl]
 8013cb8:	2b2a      	cmp	r3, #42	; 0x2a
 8013cba:	d015      	beq.n	8013ce8 <_vfiprintf_r+0x13c>
 8013cbc:	9a07      	ldr	r2, [sp, #28]
 8013cbe:	4654      	mov	r4, sl
 8013cc0:	2000      	movs	r0, #0
 8013cc2:	f04f 0c0a 	mov.w	ip, #10
 8013cc6:	4621      	mov	r1, r4
 8013cc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013ccc:	3b30      	subs	r3, #48	; 0x30
 8013cce:	2b09      	cmp	r3, #9
 8013cd0:	d94e      	bls.n	8013d70 <_vfiprintf_r+0x1c4>
 8013cd2:	b1b0      	cbz	r0, 8013d02 <_vfiprintf_r+0x156>
 8013cd4:	9207      	str	r2, [sp, #28]
 8013cd6:	e014      	b.n	8013d02 <_vfiprintf_r+0x156>
 8013cd8:	eba0 0308 	sub.w	r3, r0, r8
 8013cdc:	fa09 f303 	lsl.w	r3, r9, r3
 8013ce0:	4313      	orrs	r3, r2
 8013ce2:	9304      	str	r3, [sp, #16]
 8013ce4:	46a2      	mov	sl, r4
 8013ce6:	e7d2      	b.n	8013c8e <_vfiprintf_r+0xe2>
 8013ce8:	9b03      	ldr	r3, [sp, #12]
 8013cea:	1d19      	adds	r1, r3, #4
 8013cec:	681b      	ldr	r3, [r3, #0]
 8013cee:	9103      	str	r1, [sp, #12]
 8013cf0:	2b00      	cmp	r3, #0
 8013cf2:	bfbb      	ittet	lt
 8013cf4:	425b      	neglt	r3, r3
 8013cf6:	f042 0202 	orrlt.w	r2, r2, #2
 8013cfa:	9307      	strge	r3, [sp, #28]
 8013cfc:	9307      	strlt	r3, [sp, #28]
 8013cfe:	bfb8      	it	lt
 8013d00:	9204      	strlt	r2, [sp, #16]
 8013d02:	7823      	ldrb	r3, [r4, #0]
 8013d04:	2b2e      	cmp	r3, #46	; 0x2e
 8013d06:	d10c      	bne.n	8013d22 <_vfiprintf_r+0x176>
 8013d08:	7863      	ldrb	r3, [r4, #1]
 8013d0a:	2b2a      	cmp	r3, #42	; 0x2a
 8013d0c:	d135      	bne.n	8013d7a <_vfiprintf_r+0x1ce>
 8013d0e:	9b03      	ldr	r3, [sp, #12]
 8013d10:	1d1a      	adds	r2, r3, #4
 8013d12:	681b      	ldr	r3, [r3, #0]
 8013d14:	9203      	str	r2, [sp, #12]
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	bfb8      	it	lt
 8013d1a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013d1e:	3402      	adds	r4, #2
 8013d20:	9305      	str	r3, [sp, #20]
 8013d22:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013e08 <_vfiprintf_r+0x25c>
 8013d26:	7821      	ldrb	r1, [r4, #0]
 8013d28:	2203      	movs	r2, #3
 8013d2a:	4650      	mov	r0, sl
 8013d2c:	f7ec fae0 	bl	80002f0 <memchr>
 8013d30:	b140      	cbz	r0, 8013d44 <_vfiprintf_r+0x198>
 8013d32:	2340      	movs	r3, #64	; 0x40
 8013d34:	eba0 000a 	sub.w	r0, r0, sl
 8013d38:	fa03 f000 	lsl.w	r0, r3, r0
 8013d3c:	9b04      	ldr	r3, [sp, #16]
 8013d3e:	4303      	orrs	r3, r0
 8013d40:	3401      	adds	r4, #1
 8013d42:	9304      	str	r3, [sp, #16]
 8013d44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013d48:	482c      	ldr	r0, [pc, #176]	; (8013dfc <_vfiprintf_r+0x250>)
 8013d4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013d4e:	2206      	movs	r2, #6
 8013d50:	f7ec face 	bl	80002f0 <memchr>
 8013d54:	2800      	cmp	r0, #0
 8013d56:	d03f      	beq.n	8013dd8 <_vfiprintf_r+0x22c>
 8013d58:	4b29      	ldr	r3, [pc, #164]	; (8013e00 <_vfiprintf_r+0x254>)
 8013d5a:	bb1b      	cbnz	r3, 8013da4 <_vfiprintf_r+0x1f8>
 8013d5c:	9b03      	ldr	r3, [sp, #12]
 8013d5e:	3307      	adds	r3, #7
 8013d60:	f023 0307 	bic.w	r3, r3, #7
 8013d64:	3308      	adds	r3, #8
 8013d66:	9303      	str	r3, [sp, #12]
 8013d68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d6a:	443b      	add	r3, r7
 8013d6c:	9309      	str	r3, [sp, #36]	; 0x24
 8013d6e:	e767      	b.n	8013c40 <_vfiprintf_r+0x94>
 8013d70:	fb0c 3202 	mla	r2, ip, r2, r3
 8013d74:	460c      	mov	r4, r1
 8013d76:	2001      	movs	r0, #1
 8013d78:	e7a5      	b.n	8013cc6 <_vfiprintf_r+0x11a>
 8013d7a:	2300      	movs	r3, #0
 8013d7c:	3401      	adds	r4, #1
 8013d7e:	9305      	str	r3, [sp, #20]
 8013d80:	4619      	mov	r1, r3
 8013d82:	f04f 0c0a 	mov.w	ip, #10
 8013d86:	4620      	mov	r0, r4
 8013d88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013d8c:	3a30      	subs	r2, #48	; 0x30
 8013d8e:	2a09      	cmp	r2, #9
 8013d90:	d903      	bls.n	8013d9a <_vfiprintf_r+0x1ee>
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	d0c5      	beq.n	8013d22 <_vfiprintf_r+0x176>
 8013d96:	9105      	str	r1, [sp, #20]
 8013d98:	e7c3      	b.n	8013d22 <_vfiprintf_r+0x176>
 8013d9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8013d9e:	4604      	mov	r4, r0
 8013da0:	2301      	movs	r3, #1
 8013da2:	e7f0      	b.n	8013d86 <_vfiprintf_r+0x1da>
 8013da4:	ab03      	add	r3, sp, #12
 8013da6:	9300      	str	r3, [sp, #0]
 8013da8:	462a      	mov	r2, r5
 8013daa:	4b16      	ldr	r3, [pc, #88]	; (8013e04 <_vfiprintf_r+0x258>)
 8013dac:	a904      	add	r1, sp, #16
 8013dae:	4630      	mov	r0, r6
 8013db0:	f7fe f8e2 	bl	8011f78 <_printf_float>
 8013db4:	4607      	mov	r7, r0
 8013db6:	1c78      	adds	r0, r7, #1
 8013db8:	d1d6      	bne.n	8013d68 <_vfiprintf_r+0x1bc>
 8013dba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013dbc:	07d9      	lsls	r1, r3, #31
 8013dbe:	d405      	bmi.n	8013dcc <_vfiprintf_r+0x220>
 8013dc0:	89ab      	ldrh	r3, [r5, #12]
 8013dc2:	059a      	lsls	r2, r3, #22
 8013dc4:	d402      	bmi.n	8013dcc <_vfiprintf_r+0x220>
 8013dc6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013dc8:	f7ff feb4 	bl	8013b34 <__retarget_lock_release_recursive>
 8013dcc:	89ab      	ldrh	r3, [r5, #12]
 8013dce:	065b      	lsls	r3, r3, #25
 8013dd0:	f53f af12 	bmi.w	8013bf8 <_vfiprintf_r+0x4c>
 8013dd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013dd6:	e711      	b.n	8013bfc <_vfiprintf_r+0x50>
 8013dd8:	ab03      	add	r3, sp, #12
 8013dda:	9300      	str	r3, [sp, #0]
 8013ddc:	462a      	mov	r2, r5
 8013dde:	4b09      	ldr	r3, [pc, #36]	; (8013e04 <_vfiprintf_r+0x258>)
 8013de0:	a904      	add	r1, sp, #16
 8013de2:	4630      	mov	r0, r6
 8013de4:	f7fe fb54 	bl	8012490 <_printf_i>
 8013de8:	e7e4      	b.n	8013db4 <_vfiprintf_r+0x208>
 8013dea:	bf00      	nop
 8013dec:	08014fac 	.word	0x08014fac
 8013df0:	08014fcc 	.word	0x08014fcc
 8013df4:	08014f8c 	.word	0x08014f8c
 8013df8:	08014e7a 	.word	0x08014e7a
 8013dfc:	08014e84 	.word	0x08014e84
 8013e00:	08011f79 	.word	0x08011f79
 8013e04:	08013b89 	.word	0x08013b89
 8013e08:	08014e80 	.word	0x08014e80

08013e0c <__swbuf_r>:
 8013e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e0e:	460e      	mov	r6, r1
 8013e10:	4614      	mov	r4, r2
 8013e12:	4605      	mov	r5, r0
 8013e14:	b118      	cbz	r0, 8013e1e <__swbuf_r+0x12>
 8013e16:	6983      	ldr	r3, [r0, #24]
 8013e18:	b90b      	cbnz	r3, 8013e1e <__swbuf_r+0x12>
 8013e1a:	f000 f9df 	bl	80141dc <__sinit>
 8013e1e:	4b21      	ldr	r3, [pc, #132]	; (8013ea4 <__swbuf_r+0x98>)
 8013e20:	429c      	cmp	r4, r3
 8013e22:	d12b      	bne.n	8013e7c <__swbuf_r+0x70>
 8013e24:	686c      	ldr	r4, [r5, #4]
 8013e26:	69a3      	ldr	r3, [r4, #24]
 8013e28:	60a3      	str	r3, [r4, #8]
 8013e2a:	89a3      	ldrh	r3, [r4, #12]
 8013e2c:	071a      	lsls	r2, r3, #28
 8013e2e:	d52f      	bpl.n	8013e90 <__swbuf_r+0x84>
 8013e30:	6923      	ldr	r3, [r4, #16]
 8013e32:	b36b      	cbz	r3, 8013e90 <__swbuf_r+0x84>
 8013e34:	6923      	ldr	r3, [r4, #16]
 8013e36:	6820      	ldr	r0, [r4, #0]
 8013e38:	1ac0      	subs	r0, r0, r3
 8013e3a:	6963      	ldr	r3, [r4, #20]
 8013e3c:	b2f6      	uxtb	r6, r6
 8013e3e:	4283      	cmp	r3, r0
 8013e40:	4637      	mov	r7, r6
 8013e42:	dc04      	bgt.n	8013e4e <__swbuf_r+0x42>
 8013e44:	4621      	mov	r1, r4
 8013e46:	4628      	mov	r0, r5
 8013e48:	f000 f934 	bl	80140b4 <_fflush_r>
 8013e4c:	bb30      	cbnz	r0, 8013e9c <__swbuf_r+0x90>
 8013e4e:	68a3      	ldr	r3, [r4, #8]
 8013e50:	3b01      	subs	r3, #1
 8013e52:	60a3      	str	r3, [r4, #8]
 8013e54:	6823      	ldr	r3, [r4, #0]
 8013e56:	1c5a      	adds	r2, r3, #1
 8013e58:	6022      	str	r2, [r4, #0]
 8013e5a:	701e      	strb	r6, [r3, #0]
 8013e5c:	6963      	ldr	r3, [r4, #20]
 8013e5e:	3001      	adds	r0, #1
 8013e60:	4283      	cmp	r3, r0
 8013e62:	d004      	beq.n	8013e6e <__swbuf_r+0x62>
 8013e64:	89a3      	ldrh	r3, [r4, #12]
 8013e66:	07db      	lsls	r3, r3, #31
 8013e68:	d506      	bpl.n	8013e78 <__swbuf_r+0x6c>
 8013e6a:	2e0a      	cmp	r6, #10
 8013e6c:	d104      	bne.n	8013e78 <__swbuf_r+0x6c>
 8013e6e:	4621      	mov	r1, r4
 8013e70:	4628      	mov	r0, r5
 8013e72:	f000 f91f 	bl	80140b4 <_fflush_r>
 8013e76:	b988      	cbnz	r0, 8013e9c <__swbuf_r+0x90>
 8013e78:	4638      	mov	r0, r7
 8013e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e7c:	4b0a      	ldr	r3, [pc, #40]	; (8013ea8 <__swbuf_r+0x9c>)
 8013e7e:	429c      	cmp	r4, r3
 8013e80:	d101      	bne.n	8013e86 <__swbuf_r+0x7a>
 8013e82:	68ac      	ldr	r4, [r5, #8]
 8013e84:	e7cf      	b.n	8013e26 <__swbuf_r+0x1a>
 8013e86:	4b09      	ldr	r3, [pc, #36]	; (8013eac <__swbuf_r+0xa0>)
 8013e88:	429c      	cmp	r4, r3
 8013e8a:	bf08      	it	eq
 8013e8c:	68ec      	ldreq	r4, [r5, #12]
 8013e8e:	e7ca      	b.n	8013e26 <__swbuf_r+0x1a>
 8013e90:	4621      	mov	r1, r4
 8013e92:	4628      	mov	r0, r5
 8013e94:	f000 f81a 	bl	8013ecc <__swsetup_r>
 8013e98:	2800      	cmp	r0, #0
 8013e9a:	d0cb      	beq.n	8013e34 <__swbuf_r+0x28>
 8013e9c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8013ea0:	e7ea      	b.n	8013e78 <__swbuf_r+0x6c>
 8013ea2:	bf00      	nop
 8013ea4:	08014fac 	.word	0x08014fac
 8013ea8:	08014fcc 	.word	0x08014fcc
 8013eac:	08014f8c 	.word	0x08014f8c

08013eb0 <__ascii_wctomb>:
 8013eb0:	b149      	cbz	r1, 8013ec6 <__ascii_wctomb+0x16>
 8013eb2:	2aff      	cmp	r2, #255	; 0xff
 8013eb4:	bf85      	ittet	hi
 8013eb6:	238a      	movhi	r3, #138	; 0x8a
 8013eb8:	6003      	strhi	r3, [r0, #0]
 8013eba:	700a      	strbls	r2, [r1, #0]
 8013ebc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8013ec0:	bf98      	it	ls
 8013ec2:	2001      	movls	r0, #1
 8013ec4:	4770      	bx	lr
 8013ec6:	4608      	mov	r0, r1
 8013ec8:	4770      	bx	lr
	...

08013ecc <__swsetup_r>:
 8013ecc:	4b32      	ldr	r3, [pc, #200]	; (8013f98 <__swsetup_r+0xcc>)
 8013ece:	b570      	push	{r4, r5, r6, lr}
 8013ed0:	681d      	ldr	r5, [r3, #0]
 8013ed2:	4606      	mov	r6, r0
 8013ed4:	460c      	mov	r4, r1
 8013ed6:	b125      	cbz	r5, 8013ee2 <__swsetup_r+0x16>
 8013ed8:	69ab      	ldr	r3, [r5, #24]
 8013eda:	b913      	cbnz	r3, 8013ee2 <__swsetup_r+0x16>
 8013edc:	4628      	mov	r0, r5
 8013ede:	f000 f97d 	bl	80141dc <__sinit>
 8013ee2:	4b2e      	ldr	r3, [pc, #184]	; (8013f9c <__swsetup_r+0xd0>)
 8013ee4:	429c      	cmp	r4, r3
 8013ee6:	d10f      	bne.n	8013f08 <__swsetup_r+0x3c>
 8013ee8:	686c      	ldr	r4, [r5, #4]
 8013eea:	89a3      	ldrh	r3, [r4, #12]
 8013eec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013ef0:	0719      	lsls	r1, r3, #28
 8013ef2:	d42c      	bmi.n	8013f4e <__swsetup_r+0x82>
 8013ef4:	06dd      	lsls	r5, r3, #27
 8013ef6:	d411      	bmi.n	8013f1c <__swsetup_r+0x50>
 8013ef8:	2309      	movs	r3, #9
 8013efa:	6033      	str	r3, [r6, #0]
 8013efc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013f00:	81a3      	strh	r3, [r4, #12]
 8013f02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013f06:	e03e      	b.n	8013f86 <__swsetup_r+0xba>
 8013f08:	4b25      	ldr	r3, [pc, #148]	; (8013fa0 <__swsetup_r+0xd4>)
 8013f0a:	429c      	cmp	r4, r3
 8013f0c:	d101      	bne.n	8013f12 <__swsetup_r+0x46>
 8013f0e:	68ac      	ldr	r4, [r5, #8]
 8013f10:	e7eb      	b.n	8013eea <__swsetup_r+0x1e>
 8013f12:	4b24      	ldr	r3, [pc, #144]	; (8013fa4 <__swsetup_r+0xd8>)
 8013f14:	429c      	cmp	r4, r3
 8013f16:	bf08      	it	eq
 8013f18:	68ec      	ldreq	r4, [r5, #12]
 8013f1a:	e7e6      	b.n	8013eea <__swsetup_r+0x1e>
 8013f1c:	0758      	lsls	r0, r3, #29
 8013f1e:	d512      	bpl.n	8013f46 <__swsetup_r+0x7a>
 8013f20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013f22:	b141      	cbz	r1, 8013f36 <__swsetup_r+0x6a>
 8013f24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013f28:	4299      	cmp	r1, r3
 8013f2a:	d002      	beq.n	8013f32 <__swsetup_r+0x66>
 8013f2c:	4630      	mov	r0, r6
 8013f2e:	f7fd feb1 	bl	8011c94 <_free_r>
 8013f32:	2300      	movs	r3, #0
 8013f34:	6363      	str	r3, [r4, #52]	; 0x34
 8013f36:	89a3      	ldrh	r3, [r4, #12]
 8013f38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013f3c:	81a3      	strh	r3, [r4, #12]
 8013f3e:	2300      	movs	r3, #0
 8013f40:	6063      	str	r3, [r4, #4]
 8013f42:	6923      	ldr	r3, [r4, #16]
 8013f44:	6023      	str	r3, [r4, #0]
 8013f46:	89a3      	ldrh	r3, [r4, #12]
 8013f48:	f043 0308 	orr.w	r3, r3, #8
 8013f4c:	81a3      	strh	r3, [r4, #12]
 8013f4e:	6923      	ldr	r3, [r4, #16]
 8013f50:	b94b      	cbnz	r3, 8013f66 <__swsetup_r+0x9a>
 8013f52:	89a3      	ldrh	r3, [r4, #12]
 8013f54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013f58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013f5c:	d003      	beq.n	8013f66 <__swsetup_r+0x9a>
 8013f5e:	4621      	mov	r1, r4
 8013f60:	4630      	mov	r0, r6
 8013f62:	f000 f9fd 	bl	8014360 <__smakebuf_r>
 8013f66:	89a0      	ldrh	r0, [r4, #12]
 8013f68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013f6c:	f010 0301 	ands.w	r3, r0, #1
 8013f70:	d00a      	beq.n	8013f88 <__swsetup_r+0xbc>
 8013f72:	2300      	movs	r3, #0
 8013f74:	60a3      	str	r3, [r4, #8]
 8013f76:	6963      	ldr	r3, [r4, #20]
 8013f78:	425b      	negs	r3, r3
 8013f7a:	61a3      	str	r3, [r4, #24]
 8013f7c:	6923      	ldr	r3, [r4, #16]
 8013f7e:	b943      	cbnz	r3, 8013f92 <__swsetup_r+0xc6>
 8013f80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013f84:	d1ba      	bne.n	8013efc <__swsetup_r+0x30>
 8013f86:	bd70      	pop	{r4, r5, r6, pc}
 8013f88:	0781      	lsls	r1, r0, #30
 8013f8a:	bf58      	it	pl
 8013f8c:	6963      	ldrpl	r3, [r4, #20]
 8013f8e:	60a3      	str	r3, [r4, #8]
 8013f90:	e7f4      	b.n	8013f7c <__swsetup_r+0xb0>
 8013f92:	2000      	movs	r0, #0
 8013f94:	e7f7      	b.n	8013f86 <__swsetup_r+0xba>
 8013f96:	bf00      	nop
 8013f98:	24000010 	.word	0x24000010
 8013f9c:	08014fac 	.word	0x08014fac
 8013fa0:	08014fcc 	.word	0x08014fcc
 8013fa4:	08014f8c 	.word	0x08014f8c

08013fa8 <__sflush_r>:
 8013fa8:	898a      	ldrh	r2, [r1, #12]
 8013faa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013fae:	4605      	mov	r5, r0
 8013fb0:	0710      	lsls	r0, r2, #28
 8013fb2:	460c      	mov	r4, r1
 8013fb4:	d458      	bmi.n	8014068 <__sflush_r+0xc0>
 8013fb6:	684b      	ldr	r3, [r1, #4]
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	dc05      	bgt.n	8013fc8 <__sflush_r+0x20>
 8013fbc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	dc02      	bgt.n	8013fc8 <__sflush_r+0x20>
 8013fc2:	2000      	movs	r0, #0
 8013fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013fc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013fca:	2e00      	cmp	r6, #0
 8013fcc:	d0f9      	beq.n	8013fc2 <__sflush_r+0x1a>
 8013fce:	2300      	movs	r3, #0
 8013fd0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013fd4:	682f      	ldr	r7, [r5, #0]
 8013fd6:	602b      	str	r3, [r5, #0]
 8013fd8:	d032      	beq.n	8014040 <__sflush_r+0x98>
 8013fda:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013fdc:	89a3      	ldrh	r3, [r4, #12]
 8013fde:	075a      	lsls	r2, r3, #29
 8013fe0:	d505      	bpl.n	8013fee <__sflush_r+0x46>
 8013fe2:	6863      	ldr	r3, [r4, #4]
 8013fe4:	1ac0      	subs	r0, r0, r3
 8013fe6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013fe8:	b10b      	cbz	r3, 8013fee <__sflush_r+0x46>
 8013fea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013fec:	1ac0      	subs	r0, r0, r3
 8013fee:	2300      	movs	r3, #0
 8013ff0:	4602      	mov	r2, r0
 8013ff2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013ff4:	6a21      	ldr	r1, [r4, #32]
 8013ff6:	4628      	mov	r0, r5
 8013ff8:	47b0      	blx	r6
 8013ffa:	1c43      	adds	r3, r0, #1
 8013ffc:	89a3      	ldrh	r3, [r4, #12]
 8013ffe:	d106      	bne.n	801400e <__sflush_r+0x66>
 8014000:	6829      	ldr	r1, [r5, #0]
 8014002:	291d      	cmp	r1, #29
 8014004:	d82c      	bhi.n	8014060 <__sflush_r+0xb8>
 8014006:	4a2a      	ldr	r2, [pc, #168]	; (80140b0 <__sflush_r+0x108>)
 8014008:	40ca      	lsrs	r2, r1
 801400a:	07d6      	lsls	r6, r2, #31
 801400c:	d528      	bpl.n	8014060 <__sflush_r+0xb8>
 801400e:	2200      	movs	r2, #0
 8014010:	6062      	str	r2, [r4, #4]
 8014012:	04d9      	lsls	r1, r3, #19
 8014014:	6922      	ldr	r2, [r4, #16]
 8014016:	6022      	str	r2, [r4, #0]
 8014018:	d504      	bpl.n	8014024 <__sflush_r+0x7c>
 801401a:	1c42      	adds	r2, r0, #1
 801401c:	d101      	bne.n	8014022 <__sflush_r+0x7a>
 801401e:	682b      	ldr	r3, [r5, #0]
 8014020:	b903      	cbnz	r3, 8014024 <__sflush_r+0x7c>
 8014022:	6560      	str	r0, [r4, #84]	; 0x54
 8014024:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014026:	602f      	str	r7, [r5, #0]
 8014028:	2900      	cmp	r1, #0
 801402a:	d0ca      	beq.n	8013fc2 <__sflush_r+0x1a>
 801402c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014030:	4299      	cmp	r1, r3
 8014032:	d002      	beq.n	801403a <__sflush_r+0x92>
 8014034:	4628      	mov	r0, r5
 8014036:	f7fd fe2d 	bl	8011c94 <_free_r>
 801403a:	2000      	movs	r0, #0
 801403c:	6360      	str	r0, [r4, #52]	; 0x34
 801403e:	e7c1      	b.n	8013fc4 <__sflush_r+0x1c>
 8014040:	6a21      	ldr	r1, [r4, #32]
 8014042:	2301      	movs	r3, #1
 8014044:	4628      	mov	r0, r5
 8014046:	47b0      	blx	r6
 8014048:	1c41      	adds	r1, r0, #1
 801404a:	d1c7      	bne.n	8013fdc <__sflush_r+0x34>
 801404c:	682b      	ldr	r3, [r5, #0]
 801404e:	2b00      	cmp	r3, #0
 8014050:	d0c4      	beq.n	8013fdc <__sflush_r+0x34>
 8014052:	2b1d      	cmp	r3, #29
 8014054:	d001      	beq.n	801405a <__sflush_r+0xb2>
 8014056:	2b16      	cmp	r3, #22
 8014058:	d101      	bne.n	801405e <__sflush_r+0xb6>
 801405a:	602f      	str	r7, [r5, #0]
 801405c:	e7b1      	b.n	8013fc2 <__sflush_r+0x1a>
 801405e:	89a3      	ldrh	r3, [r4, #12]
 8014060:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014064:	81a3      	strh	r3, [r4, #12]
 8014066:	e7ad      	b.n	8013fc4 <__sflush_r+0x1c>
 8014068:	690f      	ldr	r7, [r1, #16]
 801406a:	2f00      	cmp	r7, #0
 801406c:	d0a9      	beq.n	8013fc2 <__sflush_r+0x1a>
 801406e:	0793      	lsls	r3, r2, #30
 8014070:	680e      	ldr	r6, [r1, #0]
 8014072:	bf08      	it	eq
 8014074:	694b      	ldreq	r3, [r1, #20]
 8014076:	600f      	str	r7, [r1, #0]
 8014078:	bf18      	it	ne
 801407a:	2300      	movne	r3, #0
 801407c:	eba6 0807 	sub.w	r8, r6, r7
 8014080:	608b      	str	r3, [r1, #8]
 8014082:	f1b8 0f00 	cmp.w	r8, #0
 8014086:	dd9c      	ble.n	8013fc2 <__sflush_r+0x1a>
 8014088:	6a21      	ldr	r1, [r4, #32]
 801408a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801408c:	4643      	mov	r3, r8
 801408e:	463a      	mov	r2, r7
 8014090:	4628      	mov	r0, r5
 8014092:	47b0      	blx	r6
 8014094:	2800      	cmp	r0, #0
 8014096:	dc06      	bgt.n	80140a6 <__sflush_r+0xfe>
 8014098:	89a3      	ldrh	r3, [r4, #12]
 801409a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801409e:	81a3      	strh	r3, [r4, #12]
 80140a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80140a4:	e78e      	b.n	8013fc4 <__sflush_r+0x1c>
 80140a6:	4407      	add	r7, r0
 80140a8:	eba8 0800 	sub.w	r8, r8, r0
 80140ac:	e7e9      	b.n	8014082 <__sflush_r+0xda>
 80140ae:	bf00      	nop
 80140b0:	20400001 	.word	0x20400001

080140b4 <_fflush_r>:
 80140b4:	b538      	push	{r3, r4, r5, lr}
 80140b6:	690b      	ldr	r3, [r1, #16]
 80140b8:	4605      	mov	r5, r0
 80140ba:	460c      	mov	r4, r1
 80140bc:	b913      	cbnz	r3, 80140c4 <_fflush_r+0x10>
 80140be:	2500      	movs	r5, #0
 80140c0:	4628      	mov	r0, r5
 80140c2:	bd38      	pop	{r3, r4, r5, pc}
 80140c4:	b118      	cbz	r0, 80140ce <_fflush_r+0x1a>
 80140c6:	6983      	ldr	r3, [r0, #24]
 80140c8:	b90b      	cbnz	r3, 80140ce <_fflush_r+0x1a>
 80140ca:	f000 f887 	bl	80141dc <__sinit>
 80140ce:	4b14      	ldr	r3, [pc, #80]	; (8014120 <_fflush_r+0x6c>)
 80140d0:	429c      	cmp	r4, r3
 80140d2:	d11b      	bne.n	801410c <_fflush_r+0x58>
 80140d4:	686c      	ldr	r4, [r5, #4]
 80140d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80140da:	2b00      	cmp	r3, #0
 80140dc:	d0ef      	beq.n	80140be <_fflush_r+0xa>
 80140de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80140e0:	07d0      	lsls	r0, r2, #31
 80140e2:	d404      	bmi.n	80140ee <_fflush_r+0x3a>
 80140e4:	0599      	lsls	r1, r3, #22
 80140e6:	d402      	bmi.n	80140ee <_fflush_r+0x3a>
 80140e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80140ea:	f7ff fd22 	bl	8013b32 <__retarget_lock_acquire_recursive>
 80140ee:	4628      	mov	r0, r5
 80140f0:	4621      	mov	r1, r4
 80140f2:	f7ff ff59 	bl	8013fa8 <__sflush_r>
 80140f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80140f8:	07da      	lsls	r2, r3, #31
 80140fa:	4605      	mov	r5, r0
 80140fc:	d4e0      	bmi.n	80140c0 <_fflush_r+0xc>
 80140fe:	89a3      	ldrh	r3, [r4, #12]
 8014100:	059b      	lsls	r3, r3, #22
 8014102:	d4dd      	bmi.n	80140c0 <_fflush_r+0xc>
 8014104:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014106:	f7ff fd15 	bl	8013b34 <__retarget_lock_release_recursive>
 801410a:	e7d9      	b.n	80140c0 <_fflush_r+0xc>
 801410c:	4b05      	ldr	r3, [pc, #20]	; (8014124 <_fflush_r+0x70>)
 801410e:	429c      	cmp	r4, r3
 8014110:	d101      	bne.n	8014116 <_fflush_r+0x62>
 8014112:	68ac      	ldr	r4, [r5, #8]
 8014114:	e7df      	b.n	80140d6 <_fflush_r+0x22>
 8014116:	4b04      	ldr	r3, [pc, #16]	; (8014128 <_fflush_r+0x74>)
 8014118:	429c      	cmp	r4, r3
 801411a:	bf08      	it	eq
 801411c:	68ec      	ldreq	r4, [r5, #12]
 801411e:	e7da      	b.n	80140d6 <_fflush_r+0x22>
 8014120:	08014fac 	.word	0x08014fac
 8014124:	08014fcc 	.word	0x08014fcc
 8014128:	08014f8c 	.word	0x08014f8c

0801412c <std>:
 801412c:	2300      	movs	r3, #0
 801412e:	b510      	push	{r4, lr}
 8014130:	4604      	mov	r4, r0
 8014132:	e9c0 3300 	strd	r3, r3, [r0]
 8014136:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801413a:	6083      	str	r3, [r0, #8]
 801413c:	8181      	strh	r1, [r0, #12]
 801413e:	6643      	str	r3, [r0, #100]	; 0x64
 8014140:	81c2      	strh	r2, [r0, #14]
 8014142:	6183      	str	r3, [r0, #24]
 8014144:	4619      	mov	r1, r3
 8014146:	2208      	movs	r2, #8
 8014148:	305c      	adds	r0, #92	; 0x5c
 801414a:	f7fd fd9b 	bl	8011c84 <memset>
 801414e:	4b05      	ldr	r3, [pc, #20]	; (8014164 <std+0x38>)
 8014150:	6263      	str	r3, [r4, #36]	; 0x24
 8014152:	4b05      	ldr	r3, [pc, #20]	; (8014168 <std+0x3c>)
 8014154:	62a3      	str	r3, [r4, #40]	; 0x28
 8014156:	4b05      	ldr	r3, [pc, #20]	; (801416c <std+0x40>)
 8014158:	62e3      	str	r3, [r4, #44]	; 0x2c
 801415a:	4b05      	ldr	r3, [pc, #20]	; (8014170 <std+0x44>)
 801415c:	6224      	str	r4, [r4, #32]
 801415e:	6323      	str	r3, [r4, #48]	; 0x30
 8014160:	bd10      	pop	{r4, pc}
 8014162:	bf00      	nop
 8014164:	080143e1 	.word	0x080143e1
 8014168:	08014403 	.word	0x08014403
 801416c:	0801443b 	.word	0x0801443b
 8014170:	0801445f 	.word	0x0801445f

08014174 <_cleanup_r>:
 8014174:	4901      	ldr	r1, [pc, #4]	; (801417c <_cleanup_r+0x8>)
 8014176:	f000 b8af 	b.w	80142d8 <_fwalk_reent>
 801417a:	bf00      	nop
 801417c:	080140b5 	.word	0x080140b5

08014180 <__sfmoreglue>:
 8014180:	b570      	push	{r4, r5, r6, lr}
 8014182:	2268      	movs	r2, #104	; 0x68
 8014184:	1e4d      	subs	r5, r1, #1
 8014186:	4355      	muls	r5, r2
 8014188:	460e      	mov	r6, r1
 801418a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801418e:	f7fd fded 	bl	8011d6c <_malloc_r>
 8014192:	4604      	mov	r4, r0
 8014194:	b140      	cbz	r0, 80141a8 <__sfmoreglue+0x28>
 8014196:	2100      	movs	r1, #0
 8014198:	e9c0 1600 	strd	r1, r6, [r0]
 801419c:	300c      	adds	r0, #12
 801419e:	60a0      	str	r0, [r4, #8]
 80141a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80141a4:	f7fd fd6e 	bl	8011c84 <memset>
 80141a8:	4620      	mov	r0, r4
 80141aa:	bd70      	pop	{r4, r5, r6, pc}

080141ac <__sfp_lock_acquire>:
 80141ac:	4801      	ldr	r0, [pc, #4]	; (80141b4 <__sfp_lock_acquire+0x8>)
 80141ae:	f7ff bcc0 	b.w	8013b32 <__retarget_lock_acquire_recursive>
 80141b2:	bf00      	nop
 80141b4:	240009f9 	.word	0x240009f9

080141b8 <__sfp_lock_release>:
 80141b8:	4801      	ldr	r0, [pc, #4]	; (80141c0 <__sfp_lock_release+0x8>)
 80141ba:	f7ff bcbb 	b.w	8013b34 <__retarget_lock_release_recursive>
 80141be:	bf00      	nop
 80141c0:	240009f9 	.word	0x240009f9

080141c4 <__sinit_lock_acquire>:
 80141c4:	4801      	ldr	r0, [pc, #4]	; (80141cc <__sinit_lock_acquire+0x8>)
 80141c6:	f7ff bcb4 	b.w	8013b32 <__retarget_lock_acquire_recursive>
 80141ca:	bf00      	nop
 80141cc:	240009fa 	.word	0x240009fa

080141d0 <__sinit_lock_release>:
 80141d0:	4801      	ldr	r0, [pc, #4]	; (80141d8 <__sinit_lock_release+0x8>)
 80141d2:	f7ff bcaf 	b.w	8013b34 <__retarget_lock_release_recursive>
 80141d6:	bf00      	nop
 80141d8:	240009fa 	.word	0x240009fa

080141dc <__sinit>:
 80141dc:	b510      	push	{r4, lr}
 80141de:	4604      	mov	r4, r0
 80141e0:	f7ff fff0 	bl	80141c4 <__sinit_lock_acquire>
 80141e4:	69a3      	ldr	r3, [r4, #24]
 80141e6:	b11b      	cbz	r3, 80141f0 <__sinit+0x14>
 80141e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80141ec:	f7ff bff0 	b.w	80141d0 <__sinit_lock_release>
 80141f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80141f4:	6523      	str	r3, [r4, #80]	; 0x50
 80141f6:	4b13      	ldr	r3, [pc, #76]	; (8014244 <__sinit+0x68>)
 80141f8:	4a13      	ldr	r2, [pc, #76]	; (8014248 <__sinit+0x6c>)
 80141fa:	681b      	ldr	r3, [r3, #0]
 80141fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80141fe:	42a3      	cmp	r3, r4
 8014200:	bf04      	itt	eq
 8014202:	2301      	moveq	r3, #1
 8014204:	61a3      	streq	r3, [r4, #24]
 8014206:	4620      	mov	r0, r4
 8014208:	f000 f820 	bl	801424c <__sfp>
 801420c:	6060      	str	r0, [r4, #4]
 801420e:	4620      	mov	r0, r4
 8014210:	f000 f81c 	bl	801424c <__sfp>
 8014214:	60a0      	str	r0, [r4, #8]
 8014216:	4620      	mov	r0, r4
 8014218:	f000 f818 	bl	801424c <__sfp>
 801421c:	2200      	movs	r2, #0
 801421e:	60e0      	str	r0, [r4, #12]
 8014220:	2104      	movs	r1, #4
 8014222:	6860      	ldr	r0, [r4, #4]
 8014224:	f7ff ff82 	bl	801412c <std>
 8014228:	68a0      	ldr	r0, [r4, #8]
 801422a:	2201      	movs	r2, #1
 801422c:	2109      	movs	r1, #9
 801422e:	f7ff ff7d 	bl	801412c <std>
 8014232:	68e0      	ldr	r0, [r4, #12]
 8014234:	2202      	movs	r2, #2
 8014236:	2112      	movs	r1, #18
 8014238:	f7ff ff78 	bl	801412c <std>
 801423c:	2301      	movs	r3, #1
 801423e:	61a3      	str	r3, [r4, #24]
 8014240:	e7d2      	b.n	80141e8 <__sinit+0xc>
 8014242:	bf00      	nop
 8014244:	08014c10 	.word	0x08014c10
 8014248:	08014175 	.word	0x08014175

0801424c <__sfp>:
 801424c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801424e:	4607      	mov	r7, r0
 8014250:	f7ff ffac 	bl	80141ac <__sfp_lock_acquire>
 8014254:	4b1e      	ldr	r3, [pc, #120]	; (80142d0 <__sfp+0x84>)
 8014256:	681e      	ldr	r6, [r3, #0]
 8014258:	69b3      	ldr	r3, [r6, #24]
 801425a:	b913      	cbnz	r3, 8014262 <__sfp+0x16>
 801425c:	4630      	mov	r0, r6
 801425e:	f7ff ffbd 	bl	80141dc <__sinit>
 8014262:	3648      	adds	r6, #72	; 0x48
 8014264:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014268:	3b01      	subs	r3, #1
 801426a:	d503      	bpl.n	8014274 <__sfp+0x28>
 801426c:	6833      	ldr	r3, [r6, #0]
 801426e:	b30b      	cbz	r3, 80142b4 <__sfp+0x68>
 8014270:	6836      	ldr	r6, [r6, #0]
 8014272:	e7f7      	b.n	8014264 <__sfp+0x18>
 8014274:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014278:	b9d5      	cbnz	r5, 80142b0 <__sfp+0x64>
 801427a:	4b16      	ldr	r3, [pc, #88]	; (80142d4 <__sfp+0x88>)
 801427c:	60e3      	str	r3, [r4, #12]
 801427e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014282:	6665      	str	r5, [r4, #100]	; 0x64
 8014284:	f7ff fc54 	bl	8013b30 <__retarget_lock_init_recursive>
 8014288:	f7ff ff96 	bl	80141b8 <__sfp_lock_release>
 801428c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014290:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014294:	6025      	str	r5, [r4, #0]
 8014296:	61a5      	str	r5, [r4, #24]
 8014298:	2208      	movs	r2, #8
 801429a:	4629      	mov	r1, r5
 801429c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80142a0:	f7fd fcf0 	bl	8011c84 <memset>
 80142a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80142a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80142ac:	4620      	mov	r0, r4
 80142ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80142b0:	3468      	adds	r4, #104	; 0x68
 80142b2:	e7d9      	b.n	8014268 <__sfp+0x1c>
 80142b4:	2104      	movs	r1, #4
 80142b6:	4638      	mov	r0, r7
 80142b8:	f7ff ff62 	bl	8014180 <__sfmoreglue>
 80142bc:	4604      	mov	r4, r0
 80142be:	6030      	str	r0, [r6, #0]
 80142c0:	2800      	cmp	r0, #0
 80142c2:	d1d5      	bne.n	8014270 <__sfp+0x24>
 80142c4:	f7ff ff78 	bl	80141b8 <__sfp_lock_release>
 80142c8:	230c      	movs	r3, #12
 80142ca:	603b      	str	r3, [r7, #0]
 80142cc:	e7ee      	b.n	80142ac <__sfp+0x60>
 80142ce:	bf00      	nop
 80142d0:	08014c10 	.word	0x08014c10
 80142d4:	ffff0001 	.word	0xffff0001

080142d8 <_fwalk_reent>:
 80142d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80142dc:	4606      	mov	r6, r0
 80142de:	4688      	mov	r8, r1
 80142e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80142e4:	2700      	movs	r7, #0
 80142e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80142ea:	f1b9 0901 	subs.w	r9, r9, #1
 80142ee:	d505      	bpl.n	80142fc <_fwalk_reent+0x24>
 80142f0:	6824      	ldr	r4, [r4, #0]
 80142f2:	2c00      	cmp	r4, #0
 80142f4:	d1f7      	bne.n	80142e6 <_fwalk_reent+0xe>
 80142f6:	4638      	mov	r0, r7
 80142f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80142fc:	89ab      	ldrh	r3, [r5, #12]
 80142fe:	2b01      	cmp	r3, #1
 8014300:	d907      	bls.n	8014312 <_fwalk_reent+0x3a>
 8014302:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014306:	3301      	adds	r3, #1
 8014308:	d003      	beq.n	8014312 <_fwalk_reent+0x3a>
 801430a:	4629      	mov	r1, r5
 801430c:	4630      	mov	r0, r6
 801430e:	47c0      	blx	r8
 8014310:	4307      	orrs	r7, r0
 8014312:	3568      	adds	r5, #104	; 0x68
 8014314:	e7e9      	b.n	80142ea <_fwalk_reent+0x12>

08014316 <__swhatbuf_r>:
 8014316:	b570      	push	{r4, r5, r6, lr}
 8014318:	460e      	mov	r6, r1
 801431a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801431e:	2900      	cmp	r1, #0
 8014320:	b096      	sub	sp, #88	; 0x58
 8014322:	4614      	mov	r4, r2
 8014324:	461d      	mov	r5, r3
 8014326:	da08      	bge.n	801433a <__swhatbuf_r+0x24>
 8014328:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801432c:	2200      	movs	r2, #0
 801432e:	602a      	str	r2, [r5, #0]
 8014330:	061a      	lsls	r2, r3, #24
 8014332:	d410      	bmi.n	8014356 <__swhatbuf_r+0x40>
 8014334:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014338:	e00e      	b.n	8014358 <__swhatbuf_r+0x42>
 801433a:	466a      	mov	r2, sp
 801433c:	f000 f8b6 	bl	80144ac <_fstat_r>
 8014340:	2800      	cmp	r0, #0
 8014342:	dbf1      	blt.n	8014328 <__swhatbuf_r+0x12>
 8014344:	9a01      	ldr	r2, [sp, #4]
 8014346:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801434a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801434e:	425a      	negs	r2, r3
 8014350:	415a      	adcs	r2, r3
 8014352:	602a      	str	r2, [r5, #0]
 8014354:	e7ee      	b.n	8014334 <__swhatbuf_r+0x1e>
 8014356:	2340      	movs	r3, #64	; 0x40
 8014358:	2000      	movs	r0, #0
 801435a:	6023      	str	r3, [r4, #0]
 801435c:	b016      	add	sp, #88	; 0x58
 801435e:	bd70      	pop	{r4, r5, r6, pc}

08014360 <__smakebuf_r>:
 8014360:	898b      	ldrh	r3, [r1, #12]
 8014362:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014364:	079d      	lsls	r5, r3, #30
 8014366:	4606      	mov	r6, r0
 8014368:	460c      	mov	r4, r1
 801436a:	d507      	bpl.n	801437c <__smakebuf_r+0x1c>
 801436c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014370:	6023      	str	r3, [r4, #0]
 8014372:	6123      	str	r3, [r4, #16]
 8014374:	2301      	movs	r3, #1
 8014376:	6163      	str	r3, [r4, #20]
 8014378:	b002      	add	sp, #8
 801437a:	bd70      	pop	{r4, r5, r6, pc}
 801437c:	ab01      	add	r3, sp, #4
 801437e:	466a      	mov	r2, sp
 8014380:	f7ff ffc9 	bl	8014316 <__swhatbuf_r>
 8014384:	9900      	ldr	r1, [sp, #0]
 8014386:	4605      	mov	r5, r0
 8014388:	4630      	mov	r0, r6
 801438a:	f7fd fcef 	bl	8011d6c <_malloc_r>
 801438e:	b948      	cbnz	r0, 80143a4 <__smakebuf_r+0x44>
 8014390:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014394:	059a      	lsls	r2, r3, #22
 8014396:	d4ef      	bmi.n	8014378 <__smakebuf_r+0x18>
 8014398:	f023 0303 	bic.w	r3, r3, #3
 801439c:	f043 0302 	orr.w	r3, r3, #2
 80143a0:	81a3      	strh	r3, [r4, #12]
 80143a2:	e7e3      	b.n	801436c <__smakebuf_r+0xc>
 80143a4:	4b0d      	ldr	r3, [pc, #52]	; (80143dc <__smakebuf_r+0x7c>)
 80143a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80143a8:	89a3      	ldrh	r3, [r4, #12]
 80143aa:	6020      	str	r0, [r4, #0]
 80143ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80143b0:	81a3      	strh	r3, [r4, #12]
 80143b2:	9b00      	ldr	r3, [sp, #0]
 80143b4:	6163      	str	r3, [r4, #20]
 80143b6:	9b01      	ldr	r3, [sp, #4]
 80143b8:	6120      	str	r0, [r4, #16]
 80143ba:	b15b      	cbz	r3, 80143d4 <__smakebuf_r+0x74>
 80143bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80143c0:	4630      	mov	r0, r6
 80143c2:	f000 f885 	bl	80144d0 <_isatty_r>
 80143c6:	b128      	cbz	r0, 80143d4 <__smakebuf_r+0x74>
 80143c8:	89a3      	ldrh	r3, [r4, #12]
 80143ca:	f023 0303 	bic.w	r3, r3, #3
 80143ce:	f043 0301 	orr.w	r3, r3, #1
 80143d2:	81a3      	strh	r3, [r4, #12]
 80143d4:	89a0      	ldrh	r0, [r4, #12]
 80143d6:	4305      	orrs	r5, r0
 80143d8:	81a5      	strh	r5, [r4, #12]
 80143da:	e7cd      	b.n	8014378 <__smakebuf_r+0x18>
 80143dc:	08014175 	.word	0x08014175

080143e0 <__sread>:
 80143e0:	b510      	push	{r4, lr}
 80143e2:	460c      	mov	r4, r1
 80143e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80143e8:	f000 f894 	bl	8014514 <_read_r>
 80143ec:	2800      	cmp	r0, #0
 80143ee:	bfab      	itete	ge
 80143f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80143f2:	89a3      	ldrhlt	r3, [r4, #12]
 80143f4:	181b      	addge	r3, r3, r0
 80143f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80143fa:	bfac      	ite	ge
 80143fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80143fe:	81a3      	strhlt	r3, [r4, #12]
 8014400:	bd10      	pop	{r4, pc}

08014402 <__swrite>:
 8014402:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014406:	461f      	mov	r7, r3
 8014408:	898b      	ldrh	r3, [r1, #12]
 801440a:	05db      	lsls	r3, r3, #23
 801440c:	4605      	mov	r5, r0
 801440e:	460c      	mov	r4, r1
 8014410:	4616      	mov	r6, r2
 8014412:	d505      	bpl.n	8014420 <__swrite+0x1e>
 8014414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014418:	2302      	movs	r3, #2
 801441a:	2200      	movs	r2, #0
 801441c:	f000 f868 	bl	80144f0 <_lseek_r>
 8014420:	89a3      	ldrh	r3, [r4, #12]
 8014422:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014426:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801442a:	81a3      	strh	r3, [r4, #12]
 801442c:	4632      	mov	r2, r6
 801442e:	463b      	mov	r3, r7
 8014430:	4628      	mov	r0, r5
 8014432:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014436:	f000 b817 	b.w	8014468 <_write_r>

0801443a <__sseek>:
 801443a:	b510      	push	{r4, lr}
 801443c:	460c      	mov	r4, r1
 801443e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014442:	f000 f855 	bl	80144f0 <_lseek_r>
 8014446:	1c43      	adds	r3, r0, #1
 8014448:	89a3      	ldrh	r3, [r4, #12]
 801444a:	bf15      	itete	ne
 801444c:	6560      	strne	r0, [r4, #84]	; 0x54
 801444e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014452:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014456:	81a3      	strheq	r3, [r4, #12]
 8014458:	bf18      	it	ne
 801445a:	81a3      	strhne	r3, [r4, #12]
 801445c:	bd10      	pop	{r4, pc}

0801445e <__sclose>:
 801445e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014462:	f000 b813 	b.w	801448c <_close_r>
	...

08014468 <_write_r>:
 8014468:	b538      	push	{r3, r4, r5, lr}
 801446a:	4d07      	ldr	r5, [pc, #28]	; (8014488 <_write_r+0x20>)
 801446c:	4604      	mov	r4, r0
 801446e:	4608      	mov	r0, r1
 8014470:	4611      	mov	r1, r2
 8014472:	2200      	movs	r2, #0
 8014474:	602a      	str	r2, [r5, #0]
 8014476:	461a      	mov	r2, r3
 8014478:	f7f1 feb3 	bl	80061e2 <_write>
 801447c:	1c43      	adds	r3, r0, #1
 801447e:	d102      	bne.n	8014486 <_write_r+0x1e>
 8014480:	682b      	ldr	r3, [r5, #0]
 8014482:	b103      	cbz	r3, 8014486 <_write_r+0x1e>
 8014484:	6023      	str	r3, [r4, #0]
 8014486:	bd38      	pop	{r3, r4, r5, pc}
 8014488:	240009f4 	.word	0x240009f4

0801448c <_close_r>:
 801448c:	b538      	push	{r3, r4, r5, lr}
 801448e:	4d06      	ldr	r5, [pc, #24]	; (80144a8 <_close_r+0x1c>)
 8014490:	2300      	movs	r3, #0
 8014492:	4604      	mov	r4, r0
 8014494:	4608      	mov	r0, r1
 8014496:	602b      	str	r3, [r5, #0]
 8014498:	f7f1 febf 	bl	800621a <_close>
 801449c:	1c43      	adds	r3, r0, #1
 801449e:	d102      	bne.n	80144a6 <_close_r+0x1a>
 80144a0:	682b      	ldr	r3, [r5, #0]
 80144a2:	b103      	cbz	r3, 80144a6 <_close_r+0x1a>
 80144a4:	6023      	str	r3, [r4, #0]
 80144a6:	bd38      	pop	{r3, r4, r5, pc}
 80144a8:	240009f4 	.word	0x240009f4

080144ac <_fstat_r>:
 80144ac:	b538      	push	{r3, r4, r5, lr}
 80144ae:	4d07      	ldr	r5, [pc, #28]	; (80144cc <_fstat_r+0x20>)
 80144b0:	2300      	movs	r3, #0
 80144b2:	4604      	mov	r4, r0
 80144b4:	4608      	mov	r0, r1
 80144b6:	4611      	mov	r1, r2
 80144b8:	602b      	str	r3, [r5, #0]
 80144ba:	f7f1 feba 	bl	8006232 <_fstat>
 80144be:	1c43      	adds	r3, r0, #1
 80144c0:	d102      	bne.n	80144c8 <_fstat_r+0x1c>
 80144c2:	682b      	ldr	r3, [r5, #0]
 80144c4:	b103      	cbz	r3, 80144c8 <_fstat_r+0x1c>
 80144c6:	6023      	str	r3, [r4, #0]
 80144c8:	bd38      	pop	{r3, r4, r5, pc}
 80144ca:	bf00      	nop
 80144cc:	240009f4 	.word	0x240009f4

080144d0 <_isatty_r>:
 80144d0:	b538      	push	{r3, r4, r5, lr}
 80144d2:	4d06      	ldr	r5, [pc, #24]	; (80144ec <_isatty_r+0x1c>)
 80144d4:	2300      	movs	r3, #0
 80144d6:	4604      	mov	r4, r0
 80144d8:	4608      	mov	r0, r1
 80144da:	602b      	str	r3, [r5, #0]
 80144dc:	f7f1 feb9 	bl	8006252 <_isatty>
 80144e0:	1c43      	adds	r3, r0, #1
 80144e2:	d102      	bne.n	80144ea <_isatty_r+0x1a>
 80144e4:	682b      	ldr	r3, [r5, #0]
 80144e6:	b103      	cbz	r3, 80144ea <_isatty_r+0x1a>
 80144e8:	6023      	str	r3, [r4, #0]
 80144ea:	bd38      	pop	{r3, r4, r5, pc}
 80144ec:	240009f4 	.word	0x240009f4

080144f0 <_lseek_r>:
 80144f0:	b538      	push	{r3, r4, r5, lr}
 80144f2:	4d07      	ldr	r5, [pc, #28]	; (8014510 <_lseek_r+0x20>)
 80144f4:	4604      	mov	r4, r0
 80144f6:	4608      	mov	r0, r1
 80144f8:	4611      	mov	r1, r2
 80144fa:	2200      	movs	r2, #0
 80144fc:	602a      	str	r2, [r5, #0]
 80144fe:	461a      	mov	r2, r3
 8014500:	f7f1 feb2 	bl	8006268 <_lseek>
 8014504:	1c43      	adds	r3, r0, #1
 8014506:	d102      	bne.n	801450e <_lseek_r+0x1e>
 8014508:	682b      	ldr	r3, [r5, #0]
 801450a:	b103      	cbz	r3, 801450e <_lseek_r+0x1e>
 801450c:	6023      	str	r3, [r4, #0]
 801450e:	bd38      	pop	{r3, r4, r5, pc}
 8014510:	240009f4 	.word	0x240009f4

08014514 <_read_r>:
 8014514:	b538      	push	{r3, r4, r5, lr}
 8014516:	4d07      	ldr	r5, [pc, #28]	; (8014534 <_read_r+0x20>)
 8014518:	4604      	mov	r4, r0
 801451a:	4608      	mov	r0, r1
 801451c:	4611      	mov	r1, r2
 801451e:	2200      	movs	r2, #0
 8014520:	602a      	str	r2, [r5, #0]
 8014522:	461a      	mov	r2, r3
 8014524:	f7f1 fe40 	bl	80061a8 <_read>
 8014528:	1c43      	adds	r3, r0, #1
 801452a:	d102      	bne.n	8014532 <_read_r+0x1e>
 801452c:	682b      	ldr	r3, [r5, #0]
 801452e:	b103      	cbz	r3, 8014532 <_read_r+0x1e>
 8014530:	6023      	str	r3, [r4, #0]
 8014532:	bd38      	pop	{r3, r4, r5, pc}
 8014534:	240009f4 	.word	0x240009f4

08014538 <_init>:
 8014538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801453a:	bf00      	nop
 801453c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801453e:	bc08      	pop	{r3}
 8014540:	469e      	mov	lr, r3
 8014542:	4770      	bx	lr

08014544 <_fini>:
 8014544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014546:	bf00      	nop
 8014548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801454a:	bc08      	pop	{r3}
 801454c:	469e      	mov	lr, r3
 801454e:	4770      	bx	lr
