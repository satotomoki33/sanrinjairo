
tutrc_lib_encoder_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000142a0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a9c  08014540  08014540  00024540  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014fdc  08014fdc  00024fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000010  08014fe4  08014fe4  00024fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000010  08014ff4  08014ff4  00024ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e0  24000000  08015004  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000081c  240001e0  080151e4  000301e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240009fc  080151e4  000309fc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0004e200  00000000  00000000  0003020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000058cd  00000000  00000000  0007e40e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002ae8  00000000  00000000  00083ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000029b8  00000000  00000000  000867c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003eba4  00000000  00000000  00089180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00025554  00000000  00000000  000c7d24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001ae299  00000000  00000000  000ed278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0029b511  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000d380  00000000  00000000  0029b564  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e0 	.word	0x240001e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08014528 	.word	0x08014528

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e4 	.word	0x240001e4
 80002dc:	08014528 	.word	0x08014528

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_frsub>:
 8000390:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__addsf3>
 8000396:	bf00      	nop

08000398 <__aeabi_fsub>:
 8000398:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800039c <__addsf3>:
 800039c:	0042      	lsls	r2, r0, #1
 800039e:	bf1f      	itttt	ne
 80003a0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80003a4:	ea92 0f03 	teqne	r2, r3
 80003a8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80003ac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003b0:	d06a      	beq.n	8000488 <__addsf3+0xec>
 80003b2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80003b6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80003ba:	bfc1      	itttt	gt
 80003bc:	18d2      	addgt	r2, r2, r3
 80003be:	4041      	eorgt	r1, r0
 80003c0:	4048      	eorgt	r0, r1
 80003c2:	4041      	eorgt	r1, r0
 80003c4:	bfb8      	it	lt
 80003c6:	425b      	neglt	r3, r3
 80003c8:	2b19      	cmp	r3, #25
 80003ca:	bf88      	it	hi
 80003cc:	4770      	bxhi	lr
 80003ce:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80003d2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003d6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80003da:	bf18      	it	ne
 80003dc:	4240      	negne	r0, r0
 80003de:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003e2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80003e6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80003ea:	bf18      	it	ne
 80003ec:	4249      	negne	r1, r1
 80003ee:	ea92 0f03 	teq	r2, r3
 80003f2:	d03f      	beq.n	8000474 <__addsf3+0xd8>
 80003f4:	f1a2 0201 	sub.w	r2, r2, #1
 80003f8:	fa41 fc03 	asr.w	ip, r1, r3
 80003fc:	eb10 000c 	adds.w	r0, r0, ip
 8000400:	f1c3 0320 	rsb	r3, r3, #32
 8000404:	fa01 f103 	lsl.w	r1, r1, r3
 8000408:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800040c:	d502      	bpl.n	8000414 <__addsf3+0x78>
 800040e:	4249      	negs	r1, r1
 8000410:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000414:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000418:	d313      	bcc.n	8000442 <__addsf3+0xa6>
 800041a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800041e:	d306      	bcc.n	800042e <__addsf3+0x92>
 8000420:	0840      	lsrs	r0, r0, #1
 8000422:	ea4f 0131 	mov.w	r1, r1, rrx
 8000426:	f102 0201 	add.w	r2, r2, #1
 800042a:	2afe      	cmp	r2, #254	; 0xfe
 800042c:	d251      	bcs.n	80004d2 <__addsf3+0x136>
 800042e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000432:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000436:	bf08      	it	eq
 8000438:	f020 0001 	biceq.w	r0, r0, #1
 800043c:	ea40 0003 	orr.w	r0, r0, r3
 8000440:	4770      	bx	lr
 8000442:	0049      	lsls	r1, r1, #1
 8000444:	eb40 0000 	adc.w	r0, r0, r0
 8000448:	3a01      	subs	r2, #1
 800044a:	bf28      	it	cs
 800044c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000450:	d2ed      	bcs.n	800042e <__addsf3+0x92>
 8000452:	fab0 fc80 	clz	ip, r0
 8000456:	f1ac 0c08 	sub.w	ip, ip, #8
 800045a:	ebb2 020c 	subs.w	r2, r2, ip
 800045e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000462:	bfaa      	itet	ge
 8000464:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000468:	4252      	neglt	r2, r2
 800046a:	4318      	orrge	r0, r3
 800046c:	bfbc      	itt	lt
 800046e:	40d0      	lsrlt	r0, r2
 8000470:	4318      	orrlt	r0, r3
 8000472:	4770      	bx	lr
 8000474:	f092 0f00 	teq	r2, #0
 8000478:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800047c:	bf06      	itte	eq
 800047e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000482:	3201      	addeq	r2, #1
 8000484:	3b01      	subne	r3, #1
 8000486:	e7b5      	b.n	80003f4 <__addsf3+0x58>
 8000488:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800048c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000490:	bf18      	it	ne
 8000492:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000496:	d021      	beq.n	80004dc <__addsf3+0x140>
 8000498:	ea92 0f03 	teq	r2, r3
 800049c:	d004      	beq.n	80004a8 <__addsf3+0x10c>
 800049e:	f092 0f00 	teq	r2, #0
 80004a2:	bf08      	it	eq
 80004a4:	4608      	moveq	r0, r1
 80004a6:	4770      	bx	lr
 80004a8:	ea90 0f01 	teq	r0, r1
 80004ac:	bf1c      	itt	ne
 80004ae:	2000      	movne	r0, #0
 80004b0:	4770      	bxne	lr
 80004b2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80004b6:	d104      	bne.n	80004c2 <__addsf3+0x126>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	bf28      	it	cs
 80004bc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80004c0:	4770      	bx	lr
 80004c2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80004c6:	bf3c      	itt	cc
 80004c8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80004cc:	4770      	bxcc	lr
 80004ce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80004d2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80004d6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004da:	4770      	bx	lr
 80004dc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80004e0:	bf16      	itet	ne
 80004e2:	4608      	movne	r0, r1
 80004e4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80004e8:	4601      	movne	r1, r0
 80004ea:	0242      	lsls	r2, r0, #9
 80004ec:	bf06      	itte	eq
 80004ee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80004f2:	ea90 0f01 	teqeq	r0, r1
 80004f6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80004fa:	4770      	bx	lr

080004fc <__aeabi_ui2f>:
 80004fc:	f04f 0300 	mov.w	r3, #0
 8000500:	e004      	b.n	800050c <__aeabi_i2f+0x8>
 8000502:	bf00      	nop

08000504 <__aeabi_i2f>:
 8000504:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000508:	bf48      	it	mi
 800050a:	4240      	negmi	r0, r0
 800050c:	ea5f 0c00 	movs.w	ip, r0
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000518:	4601      	mov	r1, r0
 800051a:	f04f 0000 	mov.w	r0, #0
 800051e:	e01c      	b.n	800055a <__aeabi_l2f+0x2a>

08000520 <__aeabi_ul2f>:
 8000520:	ea50 0201 	orrs.w	r2, r0, r1
 8000524:	bf08      	it	eq
 8000526:	4770      	bxeq	lr
 8000528:	f04f 0300 	mov.w	r3, #0
 800052c:	e00a      	b.n	8000544 <__aeabi_l2f+0x14>
 800052e:	bf00      	nop

08000530 <__aeabi_l2f>:
 8000530:	ea50 0201 	orrs.w	r2, r0, r1
 8000534:	bf08      	it	eq
 8000536:	4770      	bxeq	lr
 8000538:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800053c:	d502      	bpl.n	8000544 <__aeabi_l2f+0x14>
 800053e:	4240      	negs	r0, r0
 8000540:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000544:	ea5f 0c01 	movs.w	ip, r1
 8000548:	bf02      	ittt	eq
 800054a:	4684      	moveq	ip, r0
 800054c:	4601      	moveq	r1, r0
 800054e:	2000      	moveq	r0, #0
 8000550:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000554:	bf08      	it	eq
 8000556:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800055a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800055e:	fabc f28c 	clz	r2, ip
 8000562:	3a08      	subs	r2, #8
 8000564:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000568:	db10      	blt.n	800058c <__aeabi_l2f+0x5c>
 800056a:	fa01 fc02 	lsl.w	ip, r1, r2
 800056e:	4463      	add	r3, ip
 8000570:	fa00 fc02 	lsl.w	ip, r0, r2
 8000574:	f1c2 0220 	rsb	r2, r2, #32
 8000578:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800057c:	fa20 f202 	lsr.w	r2, r0, r2
 8000580:	eb43 0002 	adc.w	r0, r3, r2
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f102 0220 	add.w	r2, r2, #32
 8000590:	fa01 fc02 	lsl.w	ip, r1, r2
 8000594:	f1c2 0220 	rsb	r2, r2, #32
 8000598:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800059c:	fa21 f202 	lsr.w	r2, r1, r2
 80005a0:	eb43 0002 	adc.w	r0, r3, r2
 80005a4:	bf08      	it	eq
 80005a6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80005aa:	4770      	bx	lr

080005ac <__aeabi_uldivmod>:
 80005ac:	b953      	cbnz	r3, 80005c4 <__aeabi_uldivmod+0x18>
 80005ae:	b94a      	cbnz	r2, 80005c4 <__aeabi_uldivmod+0x18>
 80005b0:	2900      	cmp	r1, #0
 80005b2:	bf08      	it	eq
 80005b4:	2800      	cmpeq	r0, #0
 80005b6:	bf1c      	itt	ne
 80005b8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80005bc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80005c0:	f000 b974 	b.w	80008ac <__aeabi_idiv0>
 80005c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80005c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80005cc:	f000 f806 	bl	80005dc <__udivmoddi4>
 80005d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80005d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005d8:	b004      	add	sp, #16
 80005da:	4770      	bx	lr

080005dc <__udivmoddi4>:
 80005dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005e0:	9d08      	ldr	r5, [sp, #32]
 80005e2:	4604      	mov	r4, r0
 80005e4:	468e      	mov	lr, r1
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d14d      	bne.n	8000686 <__udivmoddi4+0xaa>
 80005ea:	428a      	cmp	r2, r1
 80005ec:	4694      	mov	ip, r2
 80005ee:	d969      	bls.n	80006c4 <__udivmoddi4+0xe8>
 80005f0:	fab2 f282 	clz	r2, r2
 80005f4:	b152      	cbz	r2, 800060c <__udivmoddi4+0x30>
 80005f6:	fa01 f302 	lsl.w	r3, r1, r2
 80005fa:	f1c2 0120 	rsb	r1, r2, #32
 80005fe:	fa20 f101 	lsr.w	r1, r0, r1
 8000602:	fa0c fc02 	lsl.w	ip, ip, r2
 8000606:	ea41 0e03 	orr.w	lr, r1, r3
 800060a:	4094      	lsls	r4, r2
 800060c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000610:	0c21      	lsrs	r1, r4, #16
 8000612:	fbbe f6f8 	udiv	r6, lr, r8
 8000616:	fa1f f78c 	uxth.w	r7, ip
 800061a:	fb08 e316 	mls	r3, r8, r6, lr
 800061e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000622:	fb06 f107 	mul.w	r1, r6, r7
 8000626:	4299      	cmp	r1, r3
 8000628:	d90a      	bls.n	8000640 <__udivmoddi4+0x64>
 800062a:	eb1c 0303 	adds.w	r3, ip, r3
 800062e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000632:	f080 811f 	bcs.w	8000874 <__udivmoddi4+0x298>
 8000636:	4299      	cmp	r1, r3
 8000638:	f240 811c 	bls.w	8000874 <__udivmoddi4+0x298>
 800063c:	3e02      	subs	r6, #2
 800063e:	4463      	add	r3, ip
 8000640:	1a5b      	subs	r3, r3, r1
 8000642:	b2a4      	uxth	r4, r4
 8000644:	fbb3 f0f8 	udiv	r0, r3, r8
 8000648:	fb08 3310 	mls	r3, r8, r0, r3
 800064c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000650:	fb00 f707 	mul.w	r7, r0, r7
 8000654:	42a7      	cmp	r7, r4
 8000656:	d90a      	bls.n	800066e <__udivmoddi4+0x92>
 8000658:	eb1c 0404 	adds.w	r4, ip, r4
 800065c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000660:	f080 810a 	bcs.w	8000878 <__udivmoddi4+0x29c>
 8000664:	42a7      	cmp	r7, r4
 8000666:	f240 8107 	bls.w	8000878 <__udivmoddi4+0x29c>
 800066a:	4464      	add	r4, ip
 800066c:	3802      	subs	r0, #2
 800066e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000672:	1be4      	subs	r4, r4, r7
 8000674:	2600      	movs	r6, #0
 8000676:	b11d      	cbz	r5, 8000680 <__udivmoddi4+0xa4>
 8000678:	40d4      	lsrs	r4, r2
 800067a:	2300      	movs	r3, #0
 800067c:	e9c5 4300 	strd	r4, r3, [r5]
 8000680:	4631      	mov	r1, r6
 8000682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000686:	428b      	cmp	r3, r1
 8000688:	d909      	bls.n	800069e <__udivmoddi4+0xc2>
 800068a:	2d00      	cmp	r5, #0
 800068c:	f000 80ef 	beq.w	800086e <__udivmoddi4+0x292>
 8000690:	2600      	movs	r6, #0
 8000692:	e9c5 0100 	strd	r0, r1, [r5]
 8000696:	4630      	mov	r0, r6
 8000698:	4631      	mov	r1, r6
 800069a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800069e:	fab3 f683 	clz	r6, r3
 80006a2:	2e00      	cmp	r6, #0
 80006a4:	d14a      	bne.n	800073c <__udivmoddi4+0x160>
 80006a6:	428b      	cmp	r3, r1
 80006a8:	d302      	bcc.n	80006b0 <__udivmoddi4+0xd4>
 80006aa:	4282      	cmp	r2, r0
 80006ac:	f200 80f9 	bhi.w	80008a2 <__udivmoddi4+0x2c6>
 80006b0:	1a84      	subs	r4, r0, r2
 80006b2:	eb61 0303 	sbc.w	r3, r1, r3
 80006b6:	2001      	movs	r0, #1
 80006b8:	469e      	mov	lr, r3
 80006ba:	2d00      	cmp	r5, #0
 80006bc:	d0e0      	beq.n	8000680 <__udivmoddi4+0xa4>
 80006be:	e9c5 4e00 	strd	r4, lr, [r5]
 80006c2:	e7dd      	b.n	8000680 <__udivmoddi4+0xa4>
 80006c4:	b902      	cbnz	r2, 80006c8 <__udivmoddi4+0xec>
 80006c6:	deff      	udf	#255	; 0xff
 80006c8:	fab2 f282 	clz	r2, r2
 80006cc:	2a00      	cmp	r2, #0
 80006ce:	f040 8092 	bne.w	80007f6 <__udivmoddi4+0x21a>
 80006d2:	eba1 010c 	sub.w	r1, r1, ip
 80006d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006da:	fa1f fe8c 	uxth.w	lr, ip
 80006de:	2601      	movs	r6, #1
 80006e0:	0c20      	lsrs	r0, r4, #16
 80006e2:	fbb1 f3f7 	udiv	r3, r1, r7
 80006e6:	fb07 1113 	mls	r1, r7, r3, r1
 80006ea:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80006ee:	fb0e f003 	mul.w	r0, lr, r3
 80006f2:	4288      	cmp	r0, r1
 80006f4:	d908      	bls.n	8000708 <__udivmoddi4+0x12c>
 80006f6:	eb1c 0101 	adds.w	r1, ip, r1
 80006fa:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80006fe:	d202      	bcs.n	8000706 <__udivmoddi4+0x12a>
 8000700:	4288      	cmp	r0, r1
 8000702:	f200 80cb 	bhi.w	800089c <__udivmoddi4+0x2c0>
 8000706:	4643      	mov	r3, r8
 8000708:	1a09      	subs	r1, r1, r0
 800070a:	b2a4      	uxth	r4, r4
 800070c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000710:	fb07 1110 	mls	r1, r7, r0, r1
 8000714:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000718:	fb0e fe00 	mul.w	lr, lr, r0
 800071c:	45a6      	cmp	lr, r4
 800071e:	d908      	bls.n	8000732 <__udivmoddi4+0x156>
 8000720:	eb1c 0404 	adds.w	r4, ip, r4
 8000724:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000728:	d202      	bcs.n	8000730 <__udivmoddi4+0x154>
 800072a:	45a6      	cmp	lr, r4
 800072c:	f200 80bb 	bhi.w	80008a6 <__udivmoddi4+0x2ca>
 8000730:	4608      	mov	r0, r1
 8000732:	eba4 040e 	sub.w	r4, r4, lr
 8000736:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800073a:	e79c      	b.n	8000676 <__udivmoddi4+0x9a>
 800073c:	f1c6 0720 	rsb	r7, r6, #32
 8000740:	40b3      	lsls	r3, r6
 8000742:	fa22 fc07 	lsr.w	ip, r2, r7
 8000746:	ea4c 0c03 	orr.w	ip, ip, r3
 800074a:	fa20 f407 	lsr.w	r4, r0, r7
 800074e:	fa01 f306 	lsl.w	r3, r1, r6
 8000752:	431c      	orrs	r4, r3
 8000754:	40f9      	lsrs	r1, r7
 8000756:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800075a:	fa00 f306 	lsl.w	r3, r0, r6
 800075e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000762:	0c20      	lsrs	r0, r4, #16
 8000764:	fa1f fe8c 	uxth.w	lr, ip
 8000768:	fb09 1118 	mls	r1, r9, r8, r1
 800076c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000770:	fb08 f00e 	mul.w	r0, r8, lr
 8000774:	4288      	cmp	r0, r1
 8000776:	fa02 f206 	lsl.w	r2, r2, r6
 800077a:	d90b      	bls.n	8000794 <__udivmoddi4+0x1b8>
 800077c:	eb1c 0101 	adds.w	r1, ip, r1
 8000780:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000784:	f080 8088 	bcs.w	8000898 <__udivmoddi4+0x2bc>
 8000788:	4288      	cmp	r0, r1
 800078a:	f240 8085 	bls.w	8000898 <__udivmoddi4+0x2bc>
 800078e:	f1a8 0802 	sub.w	r8, r8, #2
 8000792:	4461      	add	r1, ip
 8000794:	1a09      	subs	r1, r1, r0
 8000796:	b2a4      	uxth	r4, r4
 8000798:	fbb1 f0f9 	udiv	r0, r1, r9
 800079c:	fb09 1110 	mls	r1, r9, r0, r1
 80007a0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80007a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80007a8:	458e      	cmp	lr, r1
 80007aa:	d908      	bls.n	80007be <__udivmoddi4+0x1e2>
 80007ac:	eb1c 0101 	adds.w	r1, ip, r1
 80007b0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80007b4:	d26c      	bcs.n	8000890 <__udivmoddi4+0x2b4>
 80007b6:	458e      	cmp	lr, r1
 80007b8:	d96a      	bls.n	8000890 <__udivmoddi4+0x2b4>
 80007ba:	3802      	subs	r0, #2
 80007bc:	4461      	add	r1, ip
 80007be:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80007c2:	fba0 9402 	umull	r9, r4, r0, r2
 80007c6:	eba1 010e 	sub.w	r1, r1, lr
 80007ca:	42a1      	cmp	r1, r4
 80007cc:	46c8      	mov	r8, r9
 80007ce:	46a6      	mov	lr, r4
 80007d0:	d356      	bcc.n	8000880 <__udivmoddi4+0x2a4>
 80007d2:	d053      	beq.n	800087c <__udivmoddi4+0x2a0>
 80007d4:	b15d      	cbz	r5, 80007ee <__udivmoddi4+0x212>
 80007d6:	ebb3 0208 	subs.w	r2, r3, r8
 80007da:	eb61 010e 	sbc.w	r1, r1, lr
 80007de:	fa01 f707 	lsl.w	r7, r1, r7
 80007e2:	fa22 f306 	lsr.w	r3, r2, r6
 80007e6:	40f1      	lsrs	r1, r6
 80007e8:	431f      	orrs	r7, r3
 80007ea:	e9c5 7100 	strd	r7, r1, [r5]
 80007ee:	2600      	movs	r6, #0
 80007f0:	4631      	mov	r1, r6
 80007f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007f6:	f1c2 0320 	rsb	r3, r2, #32
 80007fa:	40d8      	lsrs	r0, r3
 80007fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000800:	fa21 f303 	lsr.w	r3, r1, r3
 8000804:	4091      	lsls	r1, r2
 8000806:	4301      	orrs	r1, r0
 8000808:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800080c:	fa1f fe8c 	uxth.w	lr, ip
 8000810:	fbb3 f0f7 	udiv	r0, r3, r7
 8000814:	fb07 3610 	mls	r6, r7, r0, r3
 8000818:	0c0b      	lsrs	r3, r1, #16
 800081a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800081e:	fb00 f60e 	mul.w	r6, r0, lr
 8000822:	429e      	cmp	r6, r3
 8000824:	fa04 f402 	lsl.w	r4, r4, r2
 8000828:	d908      	bls.n	800083c <__udivmoddi4+0x260>
 800082a:	eb1c 0303 	adds.w	r3, ip, r3
 800082e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000832:	d22f      	bcs.n	8000894 <__udivmoddi4+0x2b8>
 8000834:	429e      	cmp	r6, r3
 8000836:	d92d      	bls.n	8000894 <__udivmoddi4+0x2b8>
 8000838:	3802      	subs	r0, #2
 800083a:	4463      	add	r3, ip
 800083c:	1b9b      	subs	r3, r3, r6
 800083e:	b289      	uxth	r1, r1
 8000840:	fbb3 f6f7 	udiv	r6, r3, r7
 8000844:	fb07 3316 	mls	r3, r7, r6, r3
 8000848:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800084c:	fb06 f30e 	mul.w	r3, r6, lr
 8000850:	428b      	cmp	r3, r1
 8000852:	d908      	bls.n	8000866 <__udivmoddi4+0x28a>
 8000854:	eb1c 0101 	adds.w	r1, ip, r1
 8000858:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800085c:	d216      	bcs.n	800088c <__udivmoddi4+0x2b0>
 800085e:	428b      	cmp	r3, r1
 8000860:	d914      	bls.n	800088c <__udivmoddi4+0x2b0>
 8000862:	3e02      	subs	r6, #2
 8000864:	4461      	add	r1, ip
 8000866:	1ac9      	subs	r1, r1, r3
 8000868:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800086c:	e738      	b.n	80006e0 <__udivmoddi4+0x104>
 800086e:	462e      	mov	r6, r5
 8000870:	4628      	mov	r0, r5
 8000872:	e705      	b.n	8000680 <__udivmoddi4+0xa4>
 8000874:	4606      	mov	r6, r0
 8000876:	e6e3      	b.n	8000640 <__udivmoddi4+0x64>
 8000878:	4618      	mov	r0, r3
 800087a:	e6f8      	b.n	800066e <__udivmoddi4+0x92>
 800087c:	454b      	cmp	r3, r9
 800087e:	d2a9      	bcs.n	80007d4 <__udivmoddi4+0x1f8>
 8000880:	ebb9 0802 	subs.w	r8, r9, r2
 8000884:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000888:	3801      	subs	r0, #1
 800088a:	e7a3      	b.n	80007d4 <__udivmoddi4+0x1f8>
 800088c:	4646      	mov	r6, r8
 800088e:	e7ea      	b.n	8000866 <__udivmoddi4+0x28a>
 8000890:	4620      	mov	r0, r4
 8000892:	e794      	b.n	80007be <__udivmoddi4+0x1e2>
 8000894:	4640      	mov	r0, r8
 8000896:	e7d1      	b.n	800083c <__udivmoddi4+0x260>
 8000898:	46d0      	mov	r8, sl
 800089a:	e77b      	b.n	8000794 <__udivmoddi4+0x1b8>
 800089c:	3b02      	subs	r3, #2
 800089e:	4461      	add	r1, ip
 80008a0:	e732      	b.n	8000708 <__udivmoddi4+0x12c>
 80008a2:	4630      	mov	r0, r6
 80008a4:	e709      	b.n	80006ba <__udivmoddi4+0xde>
 80008a6:	4464      	add	r4, ip
 80008a8:	3802      	subs	r0, #2
 80008aa:	e742      	b.n	8000732 <__udivmoddi4+0x156>

080008ac <__aeabi_idiv0>:
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop

080008b0 <_ZSt17__size_to_integerj>:

  // Used by fill_n, generate_n, etc. to convert _Size to an integral type:
  inline _GLIBCXX_CONSTEXPR int
  __size_to_integer(int __n) { return __n; }
  inline _GLIBCXX_CONSTEXPR unsigned
  __size_to_integer(unsigned __n) { return __n; }
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	4618      	mov	r0, r3
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr

080008c6 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80008c6:	b480      	push	{r7}
 80008c8:	b083      	sub	sp, #12
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	6078      	str	r0, [r7, #4]
 80008ce:	6039      	str	r1, [r7, #0]
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	4618      	mov	r0, r3
 80008d4:	370c      	adds	r7, #12
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr

080008de <_ZN18tutrc_harurobo_lib4UARTC1EP20__UART_HandleTypeDefj>:

namespace tutrc_harurobo_lib {

class UART {
public:
  UART(UART_HandleTypeDef *huart, size_t rx_buf_size = 64)
 80008de:	b5b0      	push	{r4, r5, r7, lr}
 80008e0:	b086      	sub	sp, #24
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	60f8      	str	r0, [r7, #12]
 80008e6:	60b9      	str	r1, [r7, #8]
 80008e8:	607a      	str	r2, [r7, #4]
      : huart_(huart), buf_(rx_buf_size) {
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	68ba      	ldr	r2, [r7, #8]
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	1d1c      	adds	r4, r3, #4
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	4618      	mov	r0, r3
 80008fa:	f001 f91b 	bl	8001b34 <_ZNSaIhEC1Ev>
 80008fe:	f107 0314 	add.w	r3, r7, #20
 8000902:	461a      	mov	r2, r3
 8000904:	6879      	ldr	r1, [r7, #4]
 8000906:	4620      	mov	r0, r4
 8000908:	f001 f92c 	bl	8001b64 <_ZNSt6vectorIhSaIhEEC1EjRKS0_>
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	4618      	mov	r0, r3
 8000912:	f001 f91b 	bl	8001b4c <_ZNSaIhED1Ev>
    HAL_UART_Receive_DMA(huart_, buf_.data(), buf_.size());
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	681c      	ldr	r4, [r3, #0]
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	3304      	adds	r3, #4
 800091e:	4618      	mov	r0, r3
 8000920:	f001 f93a 	bl	8001b98 <_ZNSt6vectorIhSaIhEE4dataEv>
 8000924:	4605      	mov	r5, r0
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	3304      	adds	r3, #4
 800092a:	4618      	mov	r0, r3
 800092c:	f001 f943 	bl	8001bb6 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8000930:	4603      	mov	r3, r0
 8000932:	b29b      	uxth	r3, r3
 8000934:	461a      	mov	r2, r3
 8000936:	4629      	mov	r1, r5
 8000938:	4620      	mov	r0, r4
 800093a:	f00e fb6b 	bl	800f014 <HAL_UART_Receive_DMA>
  }
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	4618      	mov	r0, r3
 8000942:	3718      	adds	r7, #24
 8000944:	46bd      	mov	sp, r7
 8000946:	bdb0      	pop	{r4, r5, r7, pc}

08000948 <_ZN18tutrc_harurobo_lib4UART9availableEv>:

  size_t available() {
 8000948:	b590      	push	{r4, r7, lr}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
    size_t write_idx = buf_.size() - __HAL_DMA_GET_COUNTER(huart_->hdmarx);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	3304      	adds	r3, #4
 8000954:	4618      	mov	r0, r3
 8000956:	f001 f92e 	bl	8001bb6 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 800095a:	4602      	mov	r2, r0
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4949      	ldr	r1, [pc, #292]	; (8000a8c <_ZN18tutrc_harurobo_lib4UART9availableEv+0x144>)
 8000966:	428b      	cmp	r3, r1
 8000968:	d068      	beq.n	8000a3c <_ZN18tutrc_harurobo_lib4UART9availableEv+0xf4>
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4947      	ldr	r1, [pc, #284]	; (8000a90 <_ZN18tutrc_harurobo_lib4UART9availableEv+0x148>)
 8000974:	428b      	cmp	r3, r1
 8000976:	d061      	beq.n	8000a3c <_ZN18tutrc_harurobo_lib4UART9availableEv+0xf4>
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4944      	ldr	r1, [pc, #272]	; (8000a94 <_ZN18tutrc_harurobo_lib4UART9availableEv+0x14c>)
 8000982:	428b      	cmp	r3, r1
 8000984:	d05a      	beq.n	8000a3c <_ZN18tutrc_harurobo_lib4UART9availableEv+0xf4>
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4942      	ldr	r1, [pc, #264]	; (8000a98 <_ZN18tutrc_harurobo_lib4UART9availableEv+0x150>)
 8000990:	428b      	cmp	r3, r1
 8000992:	d053      	beq.n	8000a3c <_ZN18tutrc_harurobo_lib4UART9availableEv+0xf4>
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	493f      	ldr	r1, [pc, #252]	; (8000a9c <_ZN18tutrc_harurobo_lib4UART9availableEv+0x154>)
 800099e:	428b      	cmp	r3, r1
 80009a0:	d04c      	beq.n	8000a3c <_ZN18tutrc_harurobo_lib4UART9availableEv+0xf4>
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	493d      	ldr	r1, [pc, #244]	; (8000aa0 <_ZN18tutrc_harurobo_lib4UART9availableEv+0x158>)
 80009ac:	428b      	cmp	r3, r1
 80009ae:	d045      	beq.n	8000a3c <_ZN18tutrc_harurobo_lib4UART9availableEv+0xf4>
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	493a      	ldr	r1, [pc, #232]	; (8000aa4 <_ZN18tutrc_harurobo_lib4UART9availableEv+0x15c>)
 80009ba:	428b      	cmp	r3, r1
 80009bc:	d03e      	beq.n	8000a3c <_ZN18tutrc_harurobo_lib4UART9availableEv+0xf4>
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4938      	ldr	r1, [pc, #224]	; (8000aa8 <_ZN18tutrc_harurobo_lib4UART9availableEv+0x160>)
 80009c8:	428b      	cmp	r3, r1
 80009ca:	d037      	beq.n	8000a3c <_ZN18tutrc_harurobo_lib4UART9availableEv+0xf4>
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4935      	ldr	r1, [pc, #212]	; (8000aac <_ZN18tutrc_harurobo_lib4UART9availableEv+0x164>)
 80009d6:	428b      	cmp	r3, r1
 80009d8:	d030      	beq.n	8000a3c <_ZN18tutrc_harurobo_lib4UART9availableEv+0xf4>
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4933      	ldr	r1, [pc, #204]	; (8000ab0 <_ZN18tutrc_harurobo_lib4UART9availableEv+0x168>)
 80009e4:	428b      	cmp	r3, r1
 80009e6:	d029      	beq.n	8000a3c <_ZN18tutrc_harurobo_lib4UART9availableEv+0xf4>
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4930      	ldr	r1, [pc, #192]	; (8000ab4 <_ZN18tutrc_harurobo_lib4UART9availableEv+0x16c>)
 80009f2:	428b      	cmp	r3, r1
 80009f4:	d022      	beq.n	8000a3c <_ZN18tutrc_harurobo_lib4UART9availableEv+0xf4>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	492e      	ldr	r1, [pc, #184]	; (8000ab8 <_ZN18tutrc_harurobo_lib4UART9availableEv+0x170>)
 8000a00:	428b      	cmp	r3, r1
 8000a02:	d01b      	beq.n	8000a3c <_ZN18tutrc_harurobo_lib4UART9availableEv+0xf4>
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	492b      	ldr	r1, [pc, #172]	; (8000abc <_ZN18tutrc_harurobo_lib4UART9availableEv+0x174>)
 8000a0e:	428b      	cmp	r3, r1
 8000a10:	d014      	beq.n	8000a3c <_ZN18tutrc_harurobo_lib4UART9availableEv+0xf4>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4929      	ldr	r1, [pc, #164]	; (8000ac0 <_ZN18tutrc_harurobo_lib4UART9availableEv+0x178>)
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	d00d      	beq.n	8000a3c <_ZN18tutrc_harurobo_lib4UART9availableEv+0xf4>
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4926      	ldr	r1, [pc, #152]	; (8000ac4 <_ZN18tutrc_harurobo_lib4UART9availableEv+0x17c>)
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	d006      	beq.n	8000a3c <_ZN18tutrc_harurobo_lib4UART9availableEv+0xf4>
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4924      	ldr	r1, [pc, #144]	; (8000ac8 <_ZN18tutrc_harurobo_lib4UART9availableEv+0x180>)
 8000a38:	428b      	cmp	r3, r1
 8000a3a:	d105      	bne.n	8000a48 <_ZN18tutrc_harurobo_lib4UART9availableEv+0x100>
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	e004      	b.n	8000a52 <_ZN18tutrc_harurobo_lib4UART9availableEv+0x10a>
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	1ad3      	subs	r3, r2, r3
 8000a54:	60fb      	str	r3, [r7, #12]
    return (buf_.size() + write_idx - read_idx_) % buf_.size();
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	3304      	adds	r3, #4
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f001 f8ab 	bl	8001bb6 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8000a60:	4602      	mov	r2, r0
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	441a      	add	r2, r3
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	691b      	ldr	r3, [r3, #16]
 8000a6a:	1ad4      	subs	r4, r2, r3
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	3304      	adds	r3, #4
 8000a70:	4618      	mov	r0, r3
 8000a72:	f001 f8a0 	bl	8001bb6 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8000a76:	4603      	mov	r3, r0
 8000a78:	fbb4 f2f3 	udiv	r2, r4, r3
 8000a7c:	fb02 f303 	mul.w	r3, r2, r3
 8000a80:	1ae3      	subs	r3, r4, r3
  }
 8000a82:	4618      	mov	r0, r3
 8000a84:	3714      	adds	r7, #20
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd90      	pop	{r4, r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40020010 	.word	0x40020010
 8000a90:	40020028 	.word	0x40020028
 8000a94:	40020040 	.word	0x40020040
 8000a98:	40020058 	.word	0x40020058
 8000a9c:	40020070 	.word	0x40020070
 8000aa0:	40020088 	.word	0x40020088
 8000aa4:	400200a0 	.word	0x400200a0
 8000aa8:	400200b8 	.word	0x400200b8
 8000aac:	40020410 	.word	0x40020410
 8000ab0:	40020428 	.word	0x40020428
 8000ab4:	40020440 	.word	0x40020440
 8000ab8:	40020458 	.word	0x40020458
 8000abc:	40020470 	.word	0x40020470
 8000ac0:	40020488 	.word	0x40020488
 8000ac4:	400204a0 	.word	0x400204a0
 8000ac8:	400204b8 	.word	0x400204b8

08000acc <_ZN18tutrc_harurobo_lib4UART5flushEv>:

  void flush() { read_idx_ = (read_idx_ + available()) % buf_.size(); }
 8000acc:	b590      	push	{r4, r7, lr}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	691c      	ldr	r4, [r3, #16]
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f7ff ff35 	bl	8000948 <_ZN18tutrc_harurobo_lib4UART9availableEv>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	441c      	add	r4, r3
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	3304      	adds	r3, #4
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f001 f865 	bl	8001bb6 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8000aec:	4603      	mov	r3, r0
 8000aee:	fbb4 f2f3 	udiv	r2, r4, r3
 8000af2:	fb02 f303 	mul.w	r3, r2, r3
 8000af6:	1ae2      	subs	r2, r4, r3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	611a      	str	r2, [r3, #16]
 8000afc:	bf00      	nop
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd90      	pop	{r4, r7, pc}

08000b04 <_ZN18tutrc_harurobo_lib4UART8transmitEPhj>:

  HAL_StatusTypeDef transmit(uint8_t *data, size_t size) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60f8      	str	r0, [r7, #12]
 8000b0c:	60b9      	str	r1, [r7, #8]
 8000b0e:	607a      	str	r2, [r7, #4]
    return HAL_UART_Transmit(huart_, data, size, HAL_MAX_DELAY);
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	6818      	ldr	r0, [r3, #0]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	b29a      	uxth	r2, r3
 8000b18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b1c:	68b9      	ldr	r1, [r7, #8]
 8000b1e:	f00e f9e3 	bl	800eee8 <HAL_UART_Transmit>
 8000b22:	4603      	mov	r3, r0
  }
 8000b24:	4618      	mov	r0, r3
 8000b26:	3710      	adds	r7, #16
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <_ZN18tutrc_harurobo_lib4UART7receiveEPhj>:

  void receive(uint8_t *data, size_t size) {
 8000b2c:	b590      	push	{r4, r7, lr}
 8000b2e:	b087      	sub	sp, #28
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
    for (size_t i = 0; i < size; ++i) {
 8000b38:	2300      	movs	r3, #0
 8000b3a:	617b      	str	r3, [r7, #20]
 8000b3c:	697a      	ldr	r2, [r7, #20]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d221      	bcs.n	8000b88 <_ZN18tutrc_harurobo_lib4UART7receiveEPhj+0x5c>
      data[i] = buf_[read_idx_];
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	1d1a      	adds	r2, r3, #4
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	691b      	ldr	r3, [r3, #16]
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4610      	mov	r0, r2
 8000b50:	f001 f840 	bl	8001bd4 <_ZNSt6vectorIhSaIhEEixEj>
 8000b54:	4601      	mov	r1, r0
 8000b56:	68ba      	ldr	r2, [r7, #8]
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	780a      	ldrb	r2, [r1, #0]
 8000b5e:	701a      	strb	r2, [r3, #0]
      read_idx_ = (read_idx_ + 1) % buf_.size();
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	691b      	ldr	r3, [r3, #16]
 8000b64:	1c5c      	adds	r4, r3, #1
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	3304      	adds	r3, #4
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f001 f823 	bl	8001bb6 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8000b70:	4603      	mov	r3, r0
 8000b72:	fbb4 f2f3 	udiv	r2, r4, r3
 8000b76:	fb02 f303 	mul.w	r3, r2, r3
 8000b7a:	1ae2      	subs	r2, r4, r3
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
    for (size_t i = 0; i < size; ++i) {
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	3301      	adds	r3, #1
 8000b84:	617b      	str	r3, [r7, #20]
 8000b86:	e7d9      	b.n	8000b3c <_ZN18tutrc_harurobo_lib4UART7receiveEPhj+0x10>
    }
  }
 8000b88:	bf00      	nop
 8000b8a:	371c      	adds	r7, #28
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd90      	pop	{r4, r7, pc}

08000b90 <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 8000ba6:	b480      	push	{r7}
 8000ba8:	b083      	sub	sp, #12
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	609a      	str	r2, [r3, #8]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	689b      	ldr	r3, [r3, #8]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d005      	beq.n	8000bf4 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	689b      	ldr	r3, [r3, #8]
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	6879      	ldr	r1, [r7, #4]
 8000bf0:	2203      	movs	r2, #3
 8000bf2:	4798      	blx	r3
    }
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <_ZNSt8__detail15_Hash_node_baseC1Ev>:
   */
  struct _Hash_node_base
  {
    _Hash_node_base* _M_nxt;

    _Hash_node_base() noexcept : _M_nxt() { }
 8000bfe:	b480      	push	{r7}
 8000c00:	b083      	sub	sp, #12
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	4618      	mov	r0, r3
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <_ZNKSt8__detail18_Mod_range_hashingclEjj>:
    typedef std::size_t first_argument_type;
    typedef std::size_t second_argument_type;
    typedef std::size_t result_type;

    result_type
    operator()(first_argument_type __num,
 8000c1a:	b480      	push	{r7}
 8000c1c:	b085      	sub	sp, #20
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	60f8      	str	r0, [r7, #12]
 8000c22:	60b9      	str	r1, [r7, #8]
 8000c24:	607a      	str	r2, [r7, #4]
	       second_argument_type __den) const noexcept
    { return __num % __den; }
 8000c26:	68bb      	ldr	r3, [r7, #8]
 8000c28:	687a      	ldr	r2, [r7, #4]
 8000c2a:	fbb3 f2f2 	udiv	r2, r3, r2
 8000c2e:	6879      	ldr	r1, [r7, #4]
 8000c30:	fb01 f202 	mul.w	r2, r1, r2
 8000c34:	1a9b      	subs	r3, r3, r2
 8000c36:	4618      	mov	r0, r3
 8000c38:	3714      	adds	r7, #20
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr

08000c42 <_ZNKSt8__detail20_Prime_rehash_policy8_M_stateEv>:
		   std::size_t __n_ins) const;

    typedef std::size_t _State;

    _State
    _M_state() const
 8000c42:	b480      	push	{r7}
 8000c44:	b083      	sub	sp, #12
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
    { return _M_next_resize; }
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	4618      	mov	r0, r3
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr

08000c5a <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8000c5a:	b480      	push	{r7}
 8000c5c:	b083      	sub	sp, #12
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
 8000c62:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d201      	bcs.n	8000c74 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	e000      	b.n	8000c76 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8000c74:	687b      	ldr	r3, [r7, #4]
    }
 8000c76:	4618      	mov	r0, r3
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <_ZN18tutrc_harurobo_lib3CANC1EP19FDCAN_HandleTypeDefmm>:

namespace tutrc_harurobo_lib {

class CAN {
public:
  CAN(FDCAN_HandleTypeDef *hfdcan, uint32_t filter_id = 0,
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b08e      	sub	sp, #56	; 0x38
 8000c86:	af02      	add	r7, sp, #8
 8000c88:	60f8      	str	r0, [r7, #12]
 8000c8a:	60b9      	str	r1, [r7, #8]
 8000c8c:	607a      	str	r2, [r7, #4]
 8000c8e:	603b      	str	r3, [r7, #0]
      uint32_t filter_mask = 0)
      : hfdcan_(hfdcan) {
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	68ba      	ldr	r2, [r7, #8]
 8000c94:	601a      	str	r2, [r3, #0]
    if (hfdcan_->State == HAL_FDCAN_STATE_READY) {
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	bf0c      	ite	eq
 8000ca4:	2301      	moveq	r3, #1
 8000ca6:	2300      	movne	r3, #0
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d050      	beq.n	8000d50 <_ZN18tutrc_harurobo_lib3CANC1EP19FDCAN_HandleTypeDefmm+0xce>
      FDCAN_FilterTypeDef filter;
      filter.IdType = FDCAN_STANDARD_ID;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	613b      	str	r3, [r7, #16]
      filter.FilterIndex = 0;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	617b      	str	r3, [r7, #20]
      filter.FilterType = FDCAN_FILTER_MASK;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	61bb      	str	r3, [r7, #24]
      filter.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	61fb      	str	r3, [r7, #28]
      filter.FilterID1 = filter_id;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	623b      	str	r3, [r7, #32]
      filter.FilterID2 = filter_mask;
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24

      if (HAL_FDCAN_ConfigFilter(hfdcan_, &filter) != HAL_OK) {
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f107 0210 	add.w	r2, r7, #16
 8000cce:	4611      	mov	r1, r2
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f009 fc05 	bl	800a4e0 <HAL_FDCAN_ConfigFilter>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	bf14      	ite	ne
 8000cdc:	2301      	movne	r3, #1
 8000cde:	2300      	moveq	r3, #0
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <_ZN18tutrc_harurobo_lib3CANC1EP19FDCAN_HandleTypeDefmm+0x68>
        Error_Handler();
 8000ce6:	f004 fcdd 	bl	80056a4 <Error_Handler>
      }

      if (HAL_FDCAN_ConfigGlobalFilter(hfdcan_, FDCAN_REJECT, FDCAN_REJECT,
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	6818      	ldr	r0, [r3, #0]
 8000cee:	2301      	movs	r3, #1
 8000cf0:	9300      	str	r3, [sp, #0]
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	2202      	movs	r2, #2
 8000cf6:	2102      	movs	r1, #2
 8000cf8:	f009 fc68 	bl	800a5cc <HAL_FDCAN_ConfigGlobalFilter>
 8000cfc:	4603      	mov	r3, r0
                                       FDCAN_REJECT_REMOTE,
                                       FDCAN_REJECT_REMOTE) != HAL_OK) {
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	bf14      	ite	ne
 8000d02:	2301      	movne	r3, #1
 8000d04:	2300      	moveq	r3, #0
 8000d06:	b2db      	uxtb	r3, r3
      if (HAL_FDCAN_ConfigGlobalFilter(hfdcan_, FDCAN_REJECT, FDCAN_REJECT,
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <_ZN18tutrc_harurobo_lib3CANC1EP19FDCAN_HandleTypeDefmm+0x8e>
        Error_Handler();
 8000d0c:	f004 fcca 	bl	80056a4 <Error_Handler>
      }

      if (HAL_FDCAN_ActivateNotification(hfdcan_, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2200      	movs	r2, #0
 8000d16:	2101      	movs	r1, #1
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f009 fe79 	bl	800aa10 <HAL_FDCAN_ActivateNotification>
 8000d1e:	4603      	mov	r3, r0
                                         0) != HAL_OK) {
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	bf14      	ite	ne
 8000d24:	2301      	movne	r3, #1
 8000d26:	2300      	moveq	r3, #0
 8000d28:	b2db      	uxtb	r3, r3
      if (HAL_FDCAN_ActivateNotification(hfdcan_, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <_ZN18tutrc_harurobo_lib3CANC1EP19FDCAN_HandleTypeDefmm+0xb0>
        Error_Handler();
 8000d2e:	f004 fcb9 	bl	80056a4 <Error_Handler>
      }

      if (HAL_FDCAN_Start(hfdcan_) != HAL_OK) {
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4618      	mov	r0, r3
 8000d38:	f009 fc75 	bl	800a626 <HAL_FDCAN_Start>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	bf14      	ite	ne
 8000d42:	2301      	movne	r3, #1
 8000d44:	2300      	moveq	r3, #0
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <_ZN18tutrc_harurobo_lib3CANC1EP19FDCAN_HandleTypeDefmm+0xce>
        Error_Handler();
 8000d4c:	f004 fcaa 	bl	80056a4 <Error_Handler>
      }
    }
  }
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	4618      	mov	r0, r3
 8000d54:	3730      	adds	r7, #48	; 0x30
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <_ZN18tutrc_harurobo_lib3CAN8transmitEmPhj>:

  HAL_StatusTypeDef transmit(uint32_t id, uint8_t *data, size_t size) {
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b08e      	sub	sp, #56	; 0x38
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	60f8      	str	r0, [r7, #12]
 8000d62:	60b9      	str	r1, [r7, #8]
 8000d64:	607a      	str	r2, [r7, #4]
 8000d66:	603b      	str	r3, [r7, #0]
    FDCAN_TxHeaderTypeDef tx_header;
    tx_header.Identifier = id;
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	617b      	str	r3, [r7, #20]
    tx_header.IdType = FDCAN_STANDARD_ID;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	61bb      	str	r3, [r7, #24]
    tx_header.TxFrameType = FDCAN_DATA_FRAME;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61fb      	str	r3, [r7, #28]
    tx_header.DataLength = (size > 8 ? 8 : size) << 16;
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	2b08      	cmp	r3, #8
 8000d78:	bf28      	it	cs
 8000d7a:	2308      	movcs	r3, #8
 8000d7c:	041b      	lsls	r3, r3, #16
 8000d7e:	623b      	str	r3, [r7, #32]
    tx_header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000d80:	2300      	movs	r3, #0
 8000d82:	627b      	str	r3, [r7, #36]	; 0x24
    tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 8000d84:	2300      	movs	r3, #0
 8000d86:	62bb      	str	r3, [r7, #40]	; 0x28
    tx_header.FDFormat = FDCAN_CLASSIC_CAN;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    tx_header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	633b      	str	r3, [r7, #48]	; 0x30
    tx_header.MessageMarker = 0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	637b      	str	r3, [r7, #52]	; 0x34

    return HAL_FDCAN_AddMessageToTxFifoQ(hfdcan_, &tx_header, data);
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f107 0114 	add.w	r1, r7, #20
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f009 fc6c 	bl	800a67c <HAL_FDCAN_AddMessageToTxFifoQ>
 8000da4:	4603      	mov	r3, r0
  }
 8000da6:	4618      	mov	r0, r3
 8000da8:	3738      	adds	r7, #56	; 0x38
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
	...

08000db0 <_ZN18tutrc_harurobo_lib3CAN15set_rx_callbackEOSt8functionIFvmPhjEE>:

  void
  set_rx_callback(std::function<void(uint32_t, uint8_t *, size_t)> &&callback) {
 8000db0:	b590      	push	{r4, r7, lr}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	6039      	str	r1, [r7, #0]
    rx_callbacks_[hfdcan_] = std::move(callback);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4808      	ldr	r0, [pc, #32]	; (8000de0 <_ZN18tutrc_harurobo_lib3CAN15set_rx_callbackEOSt8functionIFvmPhjEE+0x30>)
 8000dc0:	f000 ff17 	bl	8001bf2 <_ZNSt13unordered_mapIP19FDCAN_HandleTypeDefSt8functionIFvmPhjEESt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_S5_EEEixERSB_>
 8000dc4:	4604      	mov	r4, r0
 8000dc6:	6838      	ldr	r0, [r7, #0]
 8000dc8:	f000 ff22 	bl	8001c10 <_ZSt4moveIRSt8functionIFvmPhjEEEONSt16remove_referenceIT_E4typeEOS6_>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4620      	mov	r0, r4
 8000dd2:	f000 ff28 	bl	8001c26 <_ZNSt8functionIFvmPhjEEaSEOS2_>
  }
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd90      	pop	{r4, r7, pc}
 8000dde:	bf00      	nop
 8000de0:	24000990 	.word	0x24000990

08000de4 <_ZN18tutrc_harurobo_lib3PS3C1EP20__UART_HandleTypeDef>:
    R2,
    START,
    SELECT,
  };

  PS3(UART_HandleTypeDef *huart) : huart_(huart) {
 8000de4:	b5b0      	push	{r4, r5, r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	6039      	str	r1, [r7, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	683a      	ldr	r2, [r7, #0]
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	3304      	adds	r3, #4
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	330c      	adds	r3, #12
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]
 8000e0a:	60da      	str	r2, [r3, #12]
    HAL_UART_Receive_DMA(huart_, buf_.data(), buf_.size());
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681c      	ldr	r4, [r3, #0]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3304      	adds	r3, #4
 8000e14:	4618      	mov	r0, r3
 8000e16:	f000 ff25 	bl	8001c64 <_ZNSt5arrayIhLj8EE4dataEv>
 8000e1a:	4605      	mov	r5, r0
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3304      	adds	r3, #4
 8000e20:	4618      	mov	r0, r3
 8000e22:	f000 ff2c 	bl	8001c7e <_ZNKSt5arrayIhLj8EE4sizeEv>
 8000e26:	4603      	mov	r3, r0
 8000e28:	b29b      	uxth	r3, r3
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	4629      	mov	r1, r5
 8000e2e:	4620      	mov	r0, r4
 8000e30:	f00e f8f0 	bl	800f014 <HAL_UART_Receive_DMA>
  }
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	4618      	mov	r0, r3
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000e40 <_ZN18tutrc_harurobo_lib3PS36updateEv>:

  void update() {
 8000e40:	b590      	push	{r4, r7, lr}
 8000e42:	ed2d 8b02 	vpush	{d8}
 8000e46:	b087      	sub	sp, #28
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
    uint8_t checksum = 0;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	75fb      	strb	r3, [r7, #23]

    for (size_t i = 0; i < 8; ++i) {
 8000e50:	2300      	movs	r3, #0
 8000e52:	613b      	str	r3, [r7, #16]
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	2b07      	cmp	r3, #7
 8000e58:	f200 80b6 	bhi.w	8000fc8 <_ZN18tutrc_harurobo_lib3PS36updateEv+0x188>
      if (buf_[i] == 0x80) {
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	3304      	adds	r3, #4
 8000e60:	6939      	ldr	r1, [r7, #16]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f000 ff16 	bl	8001c94 <_ZNSt5arrayIhLj8EEixEj>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	2b80      	cmp	r3, #128	; 0x80
 8000e6e:	bf0c      	ite	eq
 8000e70:	2301      	moveq	r3, #1
 8000e72:	2300      	movne	r3, #0
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	f000 80a1 	beq.w	8000fbe <_ZN18tutrc_harurobo_lib3PS36updateEv+0x17e>
        for (size_t j = 1; j < 7; ++j) {
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	2b06      	cmp	r3, #6
 8000e84:	d812      	bhi.n	8000eac <_ZN18tutrc_harurobo_lib3PS36updateEv+0x6c>
          checksum += buf_[(i + j) % 8];
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	1d18      	adds	r0, r3, #4
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	4413      	add	r3, r2
 8000e90:	f003 0307 	and.w	r3, r3, #7
 8000e94:	4619      	mov	r1, r3
 8000e96:	f000 fefd 	bl	8001c94 <_ZNSt5arrayIhLj8EEixEj>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	781a      	ldrb	r2, [r3, #0]
 8000e9e:	7dfb      	ldrb	r3, [r7, #23]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	75fb      	strb	r3, [r7, #23]
        for (size_t j = 1; j < 7; ++j) {
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	e7e9      	b.n	8000e80 <_ZN18tutrc_harurobo_lib3PS36updateEv+0x40>
        }
        if ((checksum & 0x7F) == buf_[(i + 7) % 8]) {
 8000eac:	7dfb      	ldrb	r3, [r7, #23]
 8000eae:	f003 047f 	and.w	r4, r3, #127	; 0x7f
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	1d1a      	adds	r2, r3, #4
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	3307      	adds	r3, #7
 8000eba:	f003 0307 	and.w	r3, r3, #7
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	f000 fee7 	bl	8001c94 <_ZNSt5arrayIhLj8EEixEj>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	429c      	cmp	r4, r3
 8000ecc:	bf0c      	ite	eq
 8000ece:	2301      	moveq	r3, #1
 8000ed0:	2300      	movne	r3, #0
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d076      	beq.n	8000fc6 <_ZN18tutrc_harurobo_lib3PS36updateEv+0x186>
          keys_ = (buf_[(i + 1) % 8] << 8) | buf_[(i + 2) % 8];
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	1d1a      	adds	r2, r3, #4
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	f003 0307 	and.w	r3, r3, #7
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4610      	mov	r0, r2
 8000ee8:	f000 fed4 	bl	8001c94 <_ZNSt5arrayIhLj8EEixEj>
 8000eec:	4603      	mov	r3, r0
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	021b      	lsls	r3, r3, #8
 8000ef2:	b21c      	sxth	r4, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	1d1a      	adds	r2, r3, #4
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	3302      	adds	r3, #2
 8000efc:	f003 0307 	and.w	r3, r3, #7
 8000f00:	4619      	mov	r1, r3
 8000f02:	4610      	mov	r0, r2
 8000f04:	f000 fec6 	bl	8001c94 <_ZNSt5arrayIhLj8EEixEj>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	b21b      	sxth	r3, r3
 8000f0e:	4323      	orrs	r3, r4
 8000f10:	b21b      	sxth	r3, r3
 8000f12:	b29a      	uxth	r2, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	839a      	strh	r2, [r3, #28]
          if ((keys_ & 0x03) == 0x03) {
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	8b9b      	ldrh	r3, [r3, #28]
 8000f1c:	f003 0303 	and.w	r3, r3, #3
 8000f20:	2b03      	cmp	r3, #3
 8000f22:	d10d      	bne.n	8000f40 <_ZN18tutrc_harurobo_lib3PS36updateEv+0x100>
            keys_ &= ~0x03;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	8b9b      	ldrh	r3, [r3, #28]
 8000f28:	f023 0303 	bic.w	r3, r3, #3
 8000f2c:	b29a      	uxth	r2, r3
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	839a      	strh	r2, [r3, #28]
            keys_ |= 1 << 13;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	8b9b      	ldrh	r3, [r3, #28]
 8000f36:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	839a      	strh	r2, [r3, #28]
          }
          if ((keys_ & 0x0C) == 0x0C) {
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	8b9b      	ldrh	r3, [r3, #28]
 8000f44:	f003 030c 	and.w	r3, r3, #12
 8000f48:	2b0c      	cmp	r3, #12
 8000f4a:	d10d      	bne.n	8000f68 <_ZN18tutrc_harurobo_lib3PS36updateEv+0x128>
            keys_ &= ~0x0C;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	8b9b      	ldrh	r3, [r3, #28]
 8000f50:	f023 030c 	bic.w	r3, r3, #12
 8000f54:	b29a      	uxth	r2, r3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	839a      	strh	r2, [r3, #28]
            keys_ |= 1 << 14;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	8b9b      	ldrh	r3, [r3, #28]
 8000f5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f62:	b29a      	uxth	r2, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	839a      	strh	r2, [r3, #28]
          }

          for (size_t j = 0; j < 4; ++j) {
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	2b03      	cmp	r3, #3
 8000f70:	d829      	bhi.n	8000fc6 <_ZN18tutrc_harurobo_lib3PS36updateEv+0x186>
            axes_[j] = ((float)buf_[(i + j + 3) % 8] - 64) / 64;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	1d18      	adds	r0, r3, #4
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	3303      	adds	r3, #3
 8000f7e:	f003 0307 	and.w	r3, r3, #7
 8000f82:	4619      	mov	r1, r3
 8000f84:	f000 fe86 	bl	8001c94 <_ZNSt5arrayIhLj8EEixEj>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	ee07 3a90 	vmov	s15, r3
 8000f90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f94:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000fd4 <_ZN18tutrc_harurobo_lib3PS36updateEv+0x194>
 8000f98:	ee37 8ac7 	vsub.f32	s16, s15, s14
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	330c      	adds	r3, #12
 8000fa0:	68b9      	ldr	r1, [r7, #8]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f000 fe85 	bl	8001cb2 <_ZNSt5arrayIfLj4EEixEj>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8000fd4 <_ZN18tutrc_harurobo_lib3PS36updateEv+0x194>
 8000fae:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8000fb2:	edc3 7a00 	vstr	s15, [r3]
          for (size_t j = 0; j < 4; ++j) {
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	60bb      	str	r3, [r7, #8]
 8000fbc:	e7d6      	b.n	8000f6c <_ZN18tutrc_harurobo_lib3PS36updateEv+0x12c>
    for (size_t i = 0; i < 8; ++i) {
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	613b      	str	r3, [r7, #16]
 8000fc4:	e746      	b.n	8000e54 <_ZN18tutrc_harurobo_lib3PS36updateEv+0x14>
          }
        }
        return;
 8000fc6:	bf00      	nop
      }
    }
  }
 8000fc8:	371c      	adds	r7, #28
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	ecbd 8b02 	vpop	{d8}
 8000fd0:	bd90      	pop	{r4, r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	42800000 	.word	0x42800000

08000fd8 <_ZN18tutrc_harurobo_lib13to_underlyingINS_3PS34AxisEEENSt15underlying_typeIT_E4typeES4_>:
#include <string>
#include <type_traits>

namespace tutrc_harurobo_lib {

template <class T> constexpr std::underlying_type_t<T> to_underlying(T value) {
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  return static_cast<std::underlying_type_t<T>>(value);
 8000fe0:	687b      	ldr	r3, [r7, #4]
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <_ZN18tutrc_harurobo_lib3PS38get_axisENS0_4AxisE>:

  float get_axis(Axis axis) { return axes_[to_underlying(axis)]; }
 8000fee:	b590      	push	{r4, r7, lr}
 8000ff0:	b083      	sub	sp, #12
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
 8000ff6:	6039      	str	r1, [r7, #0]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f103 040c 	add.w	r4, r3, #12
 8000ffe:	6838      	ldr	r0, [r7, #0]
 8001000:	f7ff ffea 	bl	8000fd8 <_ZN18tutrc_harurobo_lib13to_underlyingINS_3PS34AxisEEENSt15underlying_typeIT_E4typeES4_>
 8001004:	4603      	mov	r3, r0
 8001006:	4619      	mov	r1, r3
 8001008:	4620      	mov	r0, r4
 800100a:	f000 fe52 	bl	8001cb2 <_ZNSt5arrayIfLj4EEixEj>
 800100e:	4603      	mov	r3, r0
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	ee07 3a90 	vmov	s15, r3
 8001016:	eeb0 0a67 	vmov.f32	s0, s15
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	bd90      	pop	{r4, r7, pc}

08001020 <_ZN18tutrc_harurobo_lib3PS37get_keyENS0_3KeyE>:

  bool get_key(Key key) { return (keys_ & (1 << to_underlying(key))) != 0; }
 8001020:	b590      	push	{r4, r7, lr}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	8b9b      	ldrh	r3, [r3, #28]
 800102e:	461c      	mov	r4, r3
 8001030:	6838      	ldr	r0, [r7, #0]
 8001032:	f000 fe4d 	bl	8001cd0 <_ZN18tutrc_harurobo_lib13to_underlyingINS_3PS33KeyEEENSt15underlying_typeIT_E4typeES4_>
 8001036:	4603      	mov	r3, r0
 8001038:	fa44 f303 	asr.w	r3, r4, r3
 800103c:	f003 0301 	and.w	r3, r3, #1
 8001040:	2b00      	cmp	r3, #0
 8001042:	bf14      	ite	ne
 8001044:	2301      	movne	r3, #1
 8001046:	2300      	moveq	r3, #0
 8001048:	b2db      	uxtb	r3, r3
 800104a:	4618      	mov	r0, r3
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	bd90      	pop	{r4, r7, pc}

08001052 <_ZZN18tutrc_harurobo_lib4C610C4ERNS_3CANEENKUlmPhjE_clEmS3_j>:
    ID7,
    ID8,
  };

  C610(CAN &can) : can_(can) {
    can_.set_rx_callback([this](uint32_t id, uint8_t *data, size_t size) {
 8001052:	b5b0      	push	{r4, r5, r7, lr}
 8001054:	b086      	sub	sp, #24
 8001056:	af00      	add	r7, sp, #0
 8001058:	60f8      	str	r0, [r7, #12]
 800105a:	60b9      	str	r1, [r7, #8]
 800105c:	607a      	str	r2, [r7, #4]
 800105e:	603b      	str	r3, [r7, #0]
      for (size_t i = 0; i < 8; ++i) {
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	2b07      	cmp	r3, #7
 8001068:	d820      	bhi.n	80010ac <_ZZN18tutrc_harurobo_lib4C610C4ERNS_3CANEENKUlmPhjE_clEmS3_j+0x5a>
        if (id == 0x201 + i) {
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	f203 2301 	addw	r3, r3, #513	; 0x201
 8001070:	68ba      	ldr	r2, [r7, #8]
 8001072:	429a      	cmp	r2, r3
 8001074:	d116      	bne.n	80010a4 <_ZZN18tutrc_harurobo_lib4C610C4ERNS_3CANEENKUlmPhjE_clEmS3_j+0x52>
          rpm_[i] = static_cast<int16_t>(data[2] << 8 | data[3]);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	3302      	adds	r3, #2
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	021b      	lsls	r3, r3, #8
 800107e:	b21d      	sxth	r5, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3303      	adds	r3, #3
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	b21c      	sxth	r4, r3
    can_.set_rx_callback([this](uint32_t id, uint8_t *data, size_t size) {
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	681b      	ldr	r3, [r3, #0]
          rpm_[i] = static_cast<int16_t>(data[2] << 8 | data[3]);
 800108c:	3304      	adds	r3, #4
 800108e:	6979      	ldr	r1, [r7, #20]
 8001090:	4618      	mov	r0, r3
 8001092:	f000 fe28 	bl	8001ce6 <_ZNSt5arrayIsLj8EEixEj>
 8001096:	4603      	mov	r3, r0
 8001098:	ea45 0204 	orr.w	r2, r5, r4
 800109c:	b212      	sxth	r2, r2
 800109e:	801a      	strh	r2, [r3, #0]
          break;
 80010a0:	bf00      	nop
        }
      }
    });
 80010a2:	e003      	b.n	80010ac <_ZZN18tutrc_harurobo_lib4C610C4ERNS_3CANEENKUlmPhjE_clEmS3_j+0x5a>
      for (size_t i = 0; i < 8; ++i) {
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	3301      	adds	r3, #1
 80010a8:	617b      	str	r3, [r7, #20]
 80010aa:	e7db      	b.n	8001064 <_ZZN18tutrc_harurobo_lib4C610C4ERNS_3CANEENKUlmPhjE_clEmS3_j+0x12>
    });
 80010ac:	bf00      	nop
 80010ae:	3718      	adds	r7, #24
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bdb0      	pop	{r4, r5, r7, pc}

080010b4 <_ZNSt8functionIFvmPhjEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff fd8a 	bl	8000bd8 <_ZNSt14_Function_baseD1Ev>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <_ZN18tutrc_harurobo_lib4C610C1ERNS_3CANE>:
  C610(CAN &can) : can_(can) {
 80010ce:	b590      	push	{r4, r7, lr}
 80010d0:	b087      	sub	sp, #28
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
 80010d6:	6039      	str	r1, [r7, #0]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	683a      	ldr	r2, [r7, #0]
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	3304      	adds	r3, #4
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	609a      	str	r2, [r3, #8]
 80010ea:	60da      	str	r2, [r3, #12]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3314      	adds	r3, #20
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
    can_.set_rx_callback([this](uint32_t id, uint8_t *data, size_t size) {
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681c      	ldr	r4, [r3, #0]
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	f107 0308 	add.w	r3, r7, #8
 8001104:	4611      	mov	r1, r2
 8001106:	4618      	mov	r0, r3
 8001108:	f000 fdfc 	bl	8001d04 <_ZNSt8functionIFvmPhjEEC1IZN18tutrc_harurobo_lib4C610C4ERNS4_3CANEEUlmS0_jE_vvEET_>
 800110c:	f107 0308 	add.w	r3, r7, #8
 8001110:	4619      	mov	r1, r3
 8001112:	4620      	mov	r0, r4
 8001114:	f7ff fe4c 	bl	8000db0 <_ZN18tutrc_harurobo_lib3CAN15set_rx_callbackEOSt8functionIFvmPhjEE>
 8001118:	f107 0308 	add.w	r3, r7, #8
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ffc9 	bl	80010b4 <_ZNSt8functionIFvmPhjEED1Ev>
  }
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4618      	mov	r0, r3
 8001126:	371c      	adds	r7, #28
 8001128:	46bd      	mov	sp, r7
 800112a:	bd90      	pop	{r4, r7, pc}

0800112c <_ZN18tutrc_harurobo_lib13to_underlyingINS_4C6102IDEEENSt15underlying_typeIT_E4typeES4_>:
template <class T> constexpr std::underlying_type_t<T> to_underlying(T value) {
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  return static_cast<std::underlying_type_t<T>>(value);
 8001134:	687b      	ldr	r3, [r7, #4]
}
 8001136:	4618      	mov	r0, r3
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <_ZN18tutrc_harurobo_lib4C6107get_rpmENS0_2IDE>:

  int16_t get_rpm(ID id) { return rpm_[to_underlying(id)]; }
 8001142:	b590      	push	{r4, r7, lr}
 8001144:	b083      	sub	sp, #12
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
 800114a:	6039      	str	r1, [r7, #0]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	1d1c      	adds	r4, r3, #4
 8001150:	6838      	ldr	r0, [r7, #0]
 8001152:	f7ff ffeb 	bl	800112c <_ZN18tutrc_harurobo_lib13to_underlyingINS_4C6102IDEEENSt15underlying_typeIT_E4typeES4_>
 8001156:	4603      	mov	r3, r0
 8001158:	4619      	mov	r1, r3
 800115a:	4620      	mov	r0, r4
 800115c:	f000 fdc3 	bl	8001ce6 <_ZNSt5arrayIsLj8EEixEj>
 8001160:	4603      	mov	r3, r0
 8001162:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001166:	4618      	mov	r0, r3
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	bd90      	pop	{r4, r7, pc}
	...

08001170 <_ZN18tutrc_harurobo_lib4C6107get_rpsENS0_2IDE>:

  float get_rps(ID id) { return get_rpm(id) / 60.0f; }
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
 800117a:	6839      	ldr	r1, [r7, #0]
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff ffe0 	bl	8001142 <_ZN18tutrc_harurobo_lib4C6107get_rpmENS0_2IDE>
 8001182:	4603      	mov	r3, r0
 8001184:	ee07 3a90 	vmov	s15, r3
 8001188:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800118c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80011a4 <_ZN18tutrc_harurobo_lib4C6107get_rpsENS0_2IDE+0x34>
 8001190:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001194:	eef0 7a66 	vmov.f32	s15, s13
 8001198:	eeb0 0a67 	vmov.f32	s0, s15
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	42700000 	.word	0x42700000

080011a8 <_ZN18tutrc_harurobo_lib4C61011set_currentENS0_2IDEs>:

  // -10000 ~ 10000 mA の間で指定
  void set_current(ID id, int16_t current) {
 80011a8:	b590      	push	{r4, r7, lr}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	4613      	mov	r3, r2
 80011b4:	80fb      	strh	r3, [r7, #6]
    current_[to_underlying(id)] = current;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	f103 0414 	add.w	r4, r3, #20
 80011bc:	68b8      	ldr	r0, [r7, #8]
 80011be:	f7ff ffb5 	bl	800112c <_ZN18tutrc_harurobo_lib13to_underlyingINS_4C6102IDEEENSt15underlying_typeIT_E4typeES4_>
 80011c2:	4603      	mov	r3, r0
 80011c4:	4619      	mov	r1, r3
 80011c6:	4620      	mov	r0, r4
 80011c8:	f000 fd8d 	bl	8001ce6 <_ZNSt5arrayIsLj8EEixEj>
 80011cc:	4602      	mov	r2, r0
 80011ce:	88fb      	ldrh	r3, [r7, #6]
 80011d0:	8013      	strh	r3, [r2, #0]
  }
 80011d2:	bf00      	nop
 80011d4:	3714      	adds	r7, #20
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd90      	pop	{r4, r7, pc}

080011da <_ZN18tutrc_harurobo_lib4C6108transmitEv>:

  void transmit() {
 80011da:	b5b0      	push	{r4, r5, r7, lr}
 80011dc:	b086      	sub	sp, #24
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
    std::array<uint8_t, 8> data;
    for (size_t i = 0; i < 4; ++i) {
 80011e2:	2300      	movs	r3, #0
 80011e4:	617b      	str	r3, [r7, #20]
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	2b03      	cmp	r3, #3
 80011ea:	d82e      	bhi.n	800124a <_ZN18tutrc_harurobo_lib4C6108transmitEv+0x70>
      data[i * 2] = current_[i] >> 8;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3314      	adds	r3, #20
 80011f0:	6979      	ldr	r1, [r7, #20]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 fd77 	bl	8001ce6 <_ZNSt5arrayIsLj8EEixEj>
 80011f8:	4603      	mov	r3, r0
 80011fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011fe:	121b      	asrs	r3, r3, #8
 8001200:	b21c      	sxth	r4, r3
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	005a      	lsls	r2, r3, #1
 8001206:	f107 0308 	add.w	r3, r7, #8
 800120a:	4611      	mov	r1, r2
 800120c:	4618      	mov	r0, r3
 800120e:	f000 fd41 	bl	8001c94 <_ZNSt5arrayIhLj8EEixEj>
 8001212:	4603      	mov	r3, r0
 8001214:	b2e2      	uxtb	r2, r4
 8001216:	701a      	strb	r2, [r3, #0]
      data[i * 2 + 1] = current_[i];
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3314      	adds	r3, #20
 800121c:	6979      	ldr	r1, [r7, #20]
 800121e:	4618      	mov	r0, r3
 8001220:	f000 fd61 	bl	8001ce6 <_ZNSt5arrayIsLj8EEixEj>
 8001224:	4603      	mov	r3, r0
 8001226:	f9b3 4000 	ldrsh.w	r4, [r3]
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	1c5a      	adds	r2, r3, #1
 8001230:	f107 0308 	add.w	r3, r7, #8
 8001234:	4611      	mov	r1, r2
 8001236:	4618      	mov	r0, r3
 8001238:	f000 fd2c 	bl	8001c94 <_ZNSt5arrayIhLj8EEixEj>
 800123c:	4603      	mov	r3, r0
 800123e:	b2e2      	uxtb	r2, r4
 8001240:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < 4; ++i) {
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	3301      	adds	r3, #1
 8001246:	617b      	str	r3, [r7, #20]
 8001248:	e7cd      	b.n	80011e6 <_ZN18tutrc_harurobo_lib4C6108transmitEv+0xc>
    }
    can_.transmit(0x200, data.data(), data.size());
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681c      	ldr	r4, [r3, #0]
 800124e:	f107 0308 	add.w	r3, r7, #8
 8001252:	4618      	mov	r0, r3
 8001254:	f000 fd06 	bl	8001c64 <_ZNSt5arrayIhLj8EE4dataEv>
 8001258:	4605      	mov	r5, r0
 800125a:	f107 0308 	add.w	r3, r7, #8
 800125e:	4618      	mov	r0, r3
 8001260:	f000 fd0d 	bl	8001c7e <_ZNKSt5arrayIhLj8EE4sizeEv>
 8001264:	4603      	mov	r3, r0
 8001266:	462a      	mov	r2, r5
 8001268:	f44f 7100 	mov.w	r1, #512	; 0x200
 800126c:	4620      	mov	r0, r4
 800126e:	f7ff fd74 	bl	8000d5a <_ZN18tutrc_harurobo_lib3CAN8transmitEmPhj>
    for (size_t i = 0; i < 4; ++i) {
 8001272:	2300      	movs	r3, #0
 8001274:	613b      	str	r3, [r7, #16]
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	2b03      	cmp	r3, #3
 800127a:	d834      	bhi.n	80012e6 <_ZN18tutrc_harurobo_lib4C6108transmitEv+0x10c>
      data[i * 2] = current_[i + 4] >> 8;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f103 0214 	add.w	r2, r3, #20
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	3304      	adds	r3, #4
 8001286:	4619      	mov	r1, r3
 8001288:	4610      	mov	r0, r2
 800128a:	f000 fd2c 	bl	8001ce6 <_ZNSt5arrayIsLj8EEixEj>
 800128e:	4603      	mov	r3, r0
 8001290:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001294:	121b      	asrs	r3, r3, #8
 8001296:	b21c      	sxth	r4, r3
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	005a      	lsls	r2, r3, #1
 800129c:	f107 0308 	add.w	r3, r7, #8
 80012a0:	4611      	mov	r1, r2
 80012a2:	4618      	mov	r0, r3
 80012a4:	f000 fcf6 	bl	8001c94 <_ZNSt5arrayIhLj8EEixEj>
 80012a8:	4603      	mov	r3, r0
 80012aa:	b2e2      	uxtb	r2, r4
 80012ac:	701a      	strb	r2, [r3, #0]
      data[i * 2 + 1] = current_[i + 4];
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f103 0214 	add.w	r2, r3, #20
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	3304      	adds	r3, #4
 80012b8:	4619      	mov	r1, r3
 80012ba:	4610      	mov	r0, r2
 80012bc:	f000 fd13 	bl	8001ce6 <_ZNSt5arrayIsLj8EEixEj>
 80012c0:	4603      	mov	r3, r0
 80012c2:	f9b3 4000 	ldrsh.w	r4, [r3]
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	1c5a      	adds	r2, r3, #1
 80012cc:	f107 0308 	add.w	r3, r7, #8
 80012d0:	4611      	mov	r1, r2
 80012d2:	4618      	mov	r0, r3
 80012d4:	f000 fcde 	bl	8001c94 <_ZNSt5arrayIhLj8EEixEj>
 80012d8:	4603      	mov	r3, r0
 80012da:	b2e2      	uxtb	r2, r4
 80012dc:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < 4; ++i) {
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	3301      	adds	r3, #1
 80012e2:	613b      	str	r3, [r7, #16]
 80012e4:	e7c7      	b.n	8001276 <_ZN18tutrc_harurobo_lib4C6108transmitEv+0x9c>
    }
    can_.transmit(0x1FF, data.data(), data.size());
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681c      	ldr	r4, [r3, #0]
 80012ea:	f107 0308 	add.w	r3, r7, #8
 80012ee:	4618      	mov	r0, r3
 80012f0:	f000 fcb8 	bl	8001c64 <_ZNSt5arrayIhLj8EE4dataEv>
 80012f4:	4605      	mov	r5, r0
 80012f6:	f107 0308 	add.w	r3, r7, #8
 80012fa:	4618      	mov	r0, r3
 80012fc:	f000 fcbf 	bl	8001c7e <_ZNKSt5arrayIhLj8EE4sizeEv>
 8001300:	4603      	mov	r3, r0
 8001302:	462a      	mov	r2, r5
 8001304:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001308:	4620      	mov	r0, r4
 800130a:	f7ff fd26 	bl	8000d5a <_ZN18tutrc_harurobo_lib3CAN8transmitEmPhj>
  }
 800130e:	bf00      	nop
 8001310:	3718      	adds	r7, #24
 8001312:	46bd      	mov	sp, r7
 8001314:	bdb0      	pop	{r4, r5, r7, pc}

08001316 <_ZN18tutrc_harurobo_lib5TimerC1EP17TIM_HandleTypeDef>:

namespace tutrc_harurobo_lib {

class Timer {
public:
  Timer(TIM_HandleTypeDef *htim) : htim_(htim) { HAL_TIM_Base_Start_IT(htim_); }
 8001316:	b580      	push	{r7, lr}
 8001318:	b082      	sub	sp, #8
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
 800131e:	6039      	str	r1, [r7, #0]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	683a      	ldr	r2, [r7, #0]
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4618      	mov	r0, r3
 800132c:	f00c ff96 	bl	800e25c <HAL_TIM_Base_Start_IT>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4618      	mov	r0, r3
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
	...

0800133c <_ZN18tutrc_harurobo_lib5Timer18set_timer_callbackEOSt8functionIFvvEE>:

  uint32_t get_counter() { return __HAL_TIM_GET_COUNTER(htim_); }

  void set_counter(uint32_t counter) { __HAL_TIM_SET_COUNTER(htim_, counter); }

  void set_timer_callback(std::function<void()> &&callback) {
 800133c:	b590      	push	{r4, r7, lr}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	6039      	str	r1, [r7, #0]
    timer_callbacks_[htim_] = std::move(callback);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4619      	mov	r1, r3
 800134a:	4808      	ldr	r0, [pc, #32]	; (800136c <_ZN18tutrc_harurobo_lib5Timer18set_timer_callbackEOSt8functionIFvvEE+0x30>)
 800134c:	f000 fd04 	bl	8001d58 <_ZNSt13unordered_mapIP17TIM_HandleTypeDefSt8functionIFvvEESt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_S4_EEEixERSA_>
 8001350:	4604      	mov	r4, r0
 8001352:	6838      	ldr	r0, [r7, #0]
 8001354:	f000 fd0f 	bl	8001d76 <_ZSt4moveIRSt8functionIFvvEEEONSt16remove_referenceIT_E4typeEOS5_>
 8001358:	4603      	mov	r3, r0
 800135a:	4619      	mov	r1, r3
 800135c:	4620      	mov	r0, r4
 800135e:	f000 fd15 	bl	8001d8c <_ZNSt8functionIFvvEEaSEOS1_>
  }
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	bd90      	pop	{r4, r7, pc}
 800136a:	bf00      	nop
 800136c:	240009c8 	.word	0x240009c8

08001370 <_ZN18tutrc_harurobo_lib7EncoderC1EP17TIM_HandleTypeDeftf>:

namespace tutrc_harurobo_lib {

class Encoder {
public:
  Encoder(TIM_HandleTypeDef *htim, uint16_t ppr, float period)
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	4613      	mov	r3, r2
 800137c:	ed87 0a00 	vstr	s0, [r7]
 8001380:	80fb      	strh	r3, [r7, #6]
      : htim_(htim), ppr_(ppr), period_(period) {
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	68ba      	ldr	r2, [r7, #8]
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	88fa      	ldrh	r2, [r7, #6]
 800138c:	809a      	strh	r2, [r3, #4]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	683a      	ldr	r2, [r7, #0]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	68f9      	ldr	r1, [r7, #12]
 8001396:	f04f 0200 	mov.w	r2, #0
 800139a:	f04f 0300 	mov.w	r3, #0
 800139e:	e9c1 2304 	strd	r2, r3, [r1, #16]
    HAL_TIM_Encoder_Start(htim_, TIM_CHANNEL_ALL);
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	213c      	movs	r1, #60	; 0x3c
 80013a8:	4618      	mov	r0, r3
 80013aa:	f00d f875 	bl	800e498 <HAL_TIM_Encoder_Start>
  }
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	4618      	mov	r0, r3
 80013b2:	3710      	adds	r7, #16
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <_ZN18tutrc_harurobo_lib7Encoder6updateEv>:

  void update() {
 80013b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013bc:	b084      	sub	sp, #16
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
    int16_t delta = __HAL_TIM_GET_COUNTER(htim_);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ca:	81fb      	strh	r3, [r7, #14]
    __HAL_TIM_SET_COUNTER(htim_, 0);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2200      	movs	r2, #0
 80013d4:	625a      	str	r2, [r3, #36]	; 0x24

    float cpr = ppr_ * 4;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	889b      	ldrh	r3, [r3, #4]
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	ee07 3a90 	vmov	s15, r3
 80013e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013e4:	edc7 7a02 	vstr	s15, [r7, #8]
    count_ += delta;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80013ee:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80013f2:	17c8      	asrs	r0, r1, #31
 80013f4:	460c      	mov	r4, r1
 80013f6:	4605      	mov	r5, r0
 80013f8:	eb12 0804 	adds.w	r8, r2, r4
 80013fc:	eb43 0905 	adc.w	r9, r3, r5
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	e9c3 8904 	strd	r8, r9, [r3, #16]
    rps_ = delta / period_ / cpr;
 8001406:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800140a:	ee07 3a90 	vmov	s15, r3
 800140e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	edd3 7a02 	vldr	s15, [r3, #8]
 8001418:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800141c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001420:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	edc3 7a06 	vstr	s15, [r3, #24]
    position_ = count_ / cpr;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001430:	4610      	mov	r0, r2
 8001432:	4619      	mov	r1, r3
 8001434:	f7ff f87c 	bl	8000530 <__aeabi_l2f>
 8001438:	ee06 0a90 	vmov	s13, r0
 800143c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001440:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	edc3 7a07 	vstr	s15, [r3, #28]
  }
 800144a:	bf00      	nop
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001454 <_ZN18tutrc_harurobo_lib6BNO055C1ERNS_4UARTE>:

namespace tutrc_harurobo_lib {

class BNO055 {
public:
  BNO055(UART &uart) : uart_(uart) {
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	683a      	ldr	r2, [r7, #0]
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3304      	adds	r3, #4
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	809a      	strh	r2, [r3, #4]
    int start = HAL_GetTick();
 800146e:	f005 fed1 	bl	8007214 <HAL_GetTick>
 8001472:	4603      	mov	r3, r0
 8001474:	60fb      	str	r3, [r7, #12]
    while (HAL_GetTick() - start < 500) {
 8001476:	f005 fecd 	bl	8007214 <HAL_GetTick>
 800147a:	4602      	mov	r2, r0
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001484:	4293      	cmp	r3, r2
 8001486:	bf94      	ite	ls
 8001488:	2301      	movls	r3, #1
 800148a:	2300      	movhi	r3, #0
 800148c:	b2db      	uxtb	r3, r3
 800148e:	2b00      	cmp	r3, #0
 8001490:	d009      	beq.n	80014a6 <_ZN18tutrc_harurobo_lib6BNO055C1ERNS_4UARTE+0x52>
    	uint8_t data = 0x08;
 8001492:	2308      	movs	r3, #8
 8001494:	72fb      	strb	r3, [r7, #11]
      write(0x3D, &data, 1);
 8001496:	f107 020b 	add.w	r2, r7, #11
 800149a:	2301      	movs	r3, #1
 800149c:	213d      	movs	r1, #61	; 0x3d
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f000 f831 	bl	8001506 <_ZN18tutrc_harurobo_lib6BNO0555writeEhPhj>
    while (HAL_GetTick() - start < 500) {
 80014a4:	e7e7      	b.n	8001476 <_ZN18tutrc_harurobo_lib6BNO055C1ERNS_4UARTE+0x22>
    }
  }
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4618      	mov	r0, r3
 80014aa:	3710      	adds	r7, #16
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <_ZN18tutrc_harurobo_lib6BNO0556updateEv>:

  void update() { read(0x1A, reinterpret_cast<uint8_t *>(euler_.data()), 6); }
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3304      	adds	r3, #4
 80014bc:	4618      	mov	r0, r3
 80014be:	f000 fc84 	bl	8001dca <_ZNSt5arrayIsLj3EE4dataEv>
 80014c2:	4602      	mov	r2, r0
 80014c4:	2306      	movs	r3, #6
 80014c6:	211a      	movs	r1, #26
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f000 f86a 	bl	80015a2 <_ZN18tutrc_harurobo_lib6BNO0554readEhPhj>
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <_ZN18tutrc_harurobo_lib6BNO05511get_euler_xEv>:

  float get_euler_x() { return to_rad(euler_[0]); }
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b082      	sub	sp, #8
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	3304      	adds	r3, #4
 80014e2:	2100      	movs	r1, #0
 80014e4:	4618      	mov	r0, r3
 80014e6:	f000 fc7d 	bl	8001de4 <_ZNSt5arrayIsLj3EEixEj>
 80014ea:	4603      	mov	r3, r0
 80014ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014f0:	4619      	mov	r1, r3
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f000 f8c0 	bl	8001678 <_ZN18tutrc_harurobo_lib6BNO0556to_radEs>
 80014f8:	eef0 7a40 	vmov.f32	s15, s0
 80014fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <_ZN18tutrc_harurobo_lib6BNO0555writeEhPhj>:

private:
  UART &uart_;
  std::array<int16_t, 3> euler_ = {};

  bool write(uint8_t addr, uint8_t *data, size_t size) {
 8001506:	b590      	push	{r4, r7, lr}
 8001508:	b087      	sub	sp, #28
 800150a:	af00      	add	r7, sp, #0
 800150c:	60f8      	str	r0, [r7, #12]
 800150e:	607a      	str	r2, [r7, #4]
 8001510:	603b      	str	r3, [r7, #0]
 8001512:	460b      	mov	r3, r1
 8001514:	72fb      	strb	r3, [r7, #11]
    std::array<uint8_t, 4> buf = {0xAA, 0x00, addr, size};
 8001516:	2300      	movs	r3, #0
 8001518:	617b      	str	r3, [r7, #20]
 800151a:	23aa      	movs	r3, #170	; 0xaa
 800151c:	753b      	strb	r3, [r7, #20]
 800151e:	7afb      	ldrb	r3, [r7, #11]
 8001520:	75bb      	strb	r3, [r7, #22]
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	b2db      	uxtb	r3, r3
 8001526:	75fb      	strb	r3, [r7, #23]
    uart_.flush();
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff facd 	bl	8000acc <_ZN18tutrc_harurobo_lib4UART5flushEv>
    uart_.transmit(buf.data(), 4);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681c      	ldr	r4, [r3, #0]
 8001536:	f107 0314 	add.w	r3, r7, #20
 800153a:	4618      	mov	r0, r3
 800153c:	f000 fc61 	bl	8001e02 <_ZNSt5arrayIhLj4EE4dataEv>
 8001540:	4603      	mov	r3, r0
 8001542:	2204      	movs	r2, #4
 8001544:	4619      	mov	r1, r3
 8001546:	4620      	mov	r0, r4
 8001548:	f7ff fadc 	bl	8000b04 <_ZN18tutrc_harurobo_lib4UART8transmitEPhj>
    uart_.transmit(data, size);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	683a      	ldr	r2, [r7, #0]
 8001552:	6879      	ldr	r1, [r7, #4]
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff fad5 	bl	8000b04 <_ZN18tutrc_harurobo_lib4UART8transmitEPhj>
    HAL_Delay(5);
 800155a:	2005      	movs	r0, #5
 800155c:	f005 fe66 	bl	800722c <HAL_Delay>
    if (uart_.available() < 2) {
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff f9ef 	bl	8000948 <_ZN18tutrc_harurobo_lib4UART9availableEv>
 800156a:	4603      	mov	r3, r0
 800156c:	2b01      	cmp	r3, #1
 800156e:	bf94      	ite	ls
 8001570:	2301      	movls	r3, #1
 8001572:	2300      	movhi	r3, #0
 8001574:	b2db      	uxtb	r3, r3
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <_ZN18tutrc_harurobo_lib6BNO0555writeEhPhj+0x78>
      return false;
 800157a:	2300      	movs	r3, #0
 800157c:	e00d      	b.n	800159a <_ZN18tutrc_harurobo_lib6BNO0555writeEhPhj+0x94>
    }
    uart_.receive(buf.data(), 2);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681c      	ldr	r4, [r3, #0]
 8001582:	f107 0314 	add.w	r3, r7, #20
 8001586:	4618      	mov	r0, r3
 8001588:	f000 fc3b 	bl	8001e02 <_ZNSt5arrayIhLj4EE4dataEv>
 800158c:	4603      	mov	r3, r0
 800158e:	2202      	movs	r2, #2
 8001590:	4619      	mov	r1, r3
 8001592:	4620      	mov	r0, r4
 8001594:	f7ff faca 	bl	8000b2c <_ZN18tutrc_harurobo_lib4UART7receiveEPhj>
    return true; // TODO: ステータスチェック
 8001598:	2301      	movs	r3, #1
  }
 800159a:	4618      	mov	r0, r3
 800159c:	371c      	adds	r7, #28
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd90      	pop	{r4, r7, pc}

080015a2 <_ZN18tutrc_harurobo_lib6BNO0554readEhPhj>:

  bool read(uint8_t addr, uint8_t *data, size_t size) {
 80015a2:	b590      	push	{r4, r7, lr}
 80015a4:	b087      	sub	sp, #28
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	60f8      	str	r0, [r7, #12]
 80015aa:	607a      	str	r2, [r7, #4]
 80015ac:	603b      	str	r3, [r7, #0]
 80015ae:	460b      	mov	r3, r1
 80015b0:	72fb      	strb	r3, [r7, #11]
    std::array<uint8_t, 4> buf = {0xAA, 0x01, addr, size};
 80015b2:	2300      	movs	r3, #0
 80015b4:	617b      	str	r3, [r7, #20]
 80015b6:	23aa      	movs	r3, #170	; 0xaa
 80015b8:	753b      	strb	r3, [r7, #20]
 80015ba:	2301      	movs	r3, #1
 80015bc:	757b      	strb	r3, [r7, #21]
 80015be:	7afb      	ldrb	r3, [r7, #11]
 80015c0:	75bb      	strb	r3, [r7, #22]
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	75fb      	strb	r3, [r7, #23]
    uart_.flush();
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff fa7d 	bl	8000acc <_ZN18tutrc_harurobo_lib4UART5flushEv>
    uart_.transmit(buf.data(), 4);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681c      	ldr	r4, [r3, #0]
 80015d6:	f107 0314 	add.w	r3, r7, #20
 80015da:	4618      	mov	r0, r3
 80015dc:	f000 fc11 	bl	8001e02 <_ZNSt5arrayIhLj4EE4dataEv>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2204      	movs	r2, #4
 80015e4:	4619      	mov	r1, r3
 80015e6:	4620      	mov	r0, r4
 80015e8:	f7ff fa8c 	bl	8000b04 <_ZN18tutrc_harurobo_lib4UART8transmitEPhj>
    HAL_Delay(5);
 80015ec:	2005      	movs	r0, #5
 80015ee:	f005 fe1d 	bl	800722c <HAL_Delay>
    if (uart_.available() < 2) {
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff f9a6 	bl	8000948 <_ZN18tutrc_harurobo_lib4UART9availableEv>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b01      	cmp	r3, #1
 8001600:	bf94      	ite	ls
 8001602:	2301      	movls	r3, #1
 8001604:	2300      	movhi	r3, #0
 8001606:	b2db      	uxtb	r3, r3
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <_ZN18tutrc_harurobo_lib6BNO0554readEhPhj+0x6e>
      return false;
 800160c:	2300      	movs	r3, #0
 800160e:	e02e      	b.n	800166e <_ZN18tutrc_harurobo_lib6BNO0554readEhPhj+0xcc>
    }
    uart_.receive(buf.data(), 2);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681c      	ldr	r4, [r3, #0]
 8001614:	f107 0314 	add.w	r3, r7, #20
 8001618:	4618      	mov	r0, r3
 800161a:	f000 fbf2 	bl	8001e02 <_ZNSt5arrayIhLj4EE4dataEv>
 800161e:	4603      	mov	r3, r0
 8001620:	2202      	movs	r2, #2
 8001622:	4619      	mov	r1, r3
 8001624:	4620      	mov	r0, r4
 8001626:	f7ff fa81 	bl	8000b2c <_ZN18tutrc_harurobo_lib4UART7receiveEPhj>
    if (buf[0] == 0xEE || uart_.available() < size) {
 800162a:	f107 0314 	add.w	r3, r7, #20
 800162e:	2100      	movs	r1, #0
 8001630:	4618      	mov	r0, r3
 8001632:	f000 fbf3 	bl	8001e1c <_ZNSt5arrayIhLj4EEixEj>
 8001636:	4603      	mov	r3, r0
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	2bee      	cmp	r3, #238	; 0xee
 800163c:	d008      	beq.n	8001650 <_ZN18tutrc_harurobo_lib6BNO0554readEhPhj+0xae>
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff f980 	bl	8000948 <_ZN18tutrc_harurobo_lib4UART9availableEv>
 8001648:	4602      	mov	r2, r0
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	4293      	cmp	r3, r2
 800164e:	d901      	bls.n	8001654 <_ZN18tutrc_harurobo_lib6BNO0554readEhPhj+0xb2>
 8001650:	2301      	movs	r3, #1
 8001652:	e000      	b.n	8001656 <_ZN18tutrc_harurobo_lib6BNO0554readEhPhj+0xb4>
 8001654:	2300      	movs	r3, #0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <_ZN18tutrc_harurobo_lib6BNO0554readEhPhj+0xbc>
      return false;
 800165a:	2300      	movs	r3, #0
 800165c:	e007      	b.n	800166e <_ZN18tutrc_harurobo_lib6BNO0554readEhPhj+0xcc>
    }
    uart_.receive(data, size);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	683a      	ldr	r2, [r7, #0]
 8001664:	6879      	ldr	r1, [r7, #4]
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff fa60 	bl	8000b2c <_ZN18tutrc_harurobo_lib4UART7receiveEPhj>
    return true;
 800166c:	2301      	movs	r3, #1
  }
 800166e:	4618      	mov	r0, r3
 8001670:	371c      	adds	r7, #28
 8001672:	46bd      	mov	sp, r7
 8001674:	bd90      	pop	{r4, r7, pc}
	...

08001678 <_ZN18tutrc_harurobo_lib6BNO0556to_radEs>:

  float to_rad(int16_t x) { return x * 2 * M_PI / (360 * 16); }
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	460b      	mov	r3, r1
 8001682:	807b      	strh	r3, [r7, #2]
 8001684:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	ee07 3a90 	vmov	s15, r3
 800168e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001692:	ed9f 6b09 	vldr	d6, [pc, #36]	; 80016b8 <_ZN18tutrc_harurobo_lib6BNO0556to_radEs+0x40>
 8001696:	ee27 6b06 	vmul.f64	d6, d7, d6
 800169a:	ed9f 5b09 	vldr	d5, [pc, #36]	; 80016c0 <_ZN18tutrc_harurobo_lib6BNO0556to_radEs+0x48>
 800169e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80016a2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80016a6:	eeb0 0a67 	vmov.f32	s0, s15
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	f3af 8000 	nop.w
 80016b8:	54442d18 	.word	0x54442d18
 80016bc:	400921fb 	.word	0x400921fb
 80016c0:	00000000 	.word	0x00000000
 80016c4:	40b68000 	.word	0x40b68000

080016c8 <_Z5clampiii>:
extern TIM_HandleTypeDef htim3;

using namespace std;
using namespace tutrc_harurobo_lib;

int clamp(int x, int a, int b) {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
	return min(max(x, a), b);
 80016d4:	f107 0208 	add.w	r2, r7, #8
 80016d8:	f107 030c 	add.w	r3, r7, #12
 80016dc:	4611      	mov	r1, r2
 80016de:	4618      	mov	r0, r3
 80016e0:	f000 fbab 	bl	8001e3a <_ZSt3maxIiERKT_S2_S2_>
 80016e4:	4602      	mov	r2, r0
 80016e6:	1d3b      	adds	r3, r7, #4
 80016e8:	4619      	mov	r1, r3
 80016ea:	4610      	mov	r0, r2
 80016ec:	f000 fbb9 	bl	8001e62 <_ZSt3minIiERKT_S2_S2_>
 80016f0:	4603      	mov	r3, r0
 80016f2:	681b      	ldr	r3, [r3, #0]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3710      	adds	r7, #16
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	0000      	movs	r0, r0
	...

08001700 <_ZZ7cppmainENKUlvE_clEv>:
	Timer timer(&htim5);
	BNO055 bno(uart3);

	Encoder enc(&htim3, 2048, 0.01);

	timer.set_timer_callback([&]() {
 8001700:	b580      	push	{r7, lr}
 8001702:	ed2d 8b02 	vpush	{d8}
 8001706:	b09c      	sub	sp, #112	; 0x70
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
		ps3.update();
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff fb95 	bl	8000e40 <_ZN18tutrc_harurobo_lib3PS36updateEv>
		enc.update();
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff fe4c 	bl	80013b8 <_ZN18tutrc_harurobo_lib7Encoder6updateEv>
		ps3.update();
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]

		double vx = ps3.get_axis(PS3::Axis::LEFT_X);
 8001724:	2100      	movs	r1, #0
 8001726:	4618      	mov	r0, r3
 8001728:	f7ff fc61 	bl	8000fee <_ZN18tutrc_harurobo_lib3PS38get_axisENS0_4AxisE>
 800172c:	eef0 7a40 	vmov.f32	s15, s0
 8001730:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001734:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
		ps3.update();
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
		double vy = -ps3.get_axis(PS3::Axis::LEFT_Y);
 800173c:	2101      	movs	r1, #1
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff fc55 	bl	8000fee <_ZN18tutrc_harurobo_lib3PS38get_axisENS0_4AxisE>
 8001744:	eef0 7a40 	vmov.f32	s15, s0
 8001748:	eef1 7a67 	vneg.f32	s15, s15
 800174c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001750:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48

		double R = -bno.get_euler_x();
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff febc 	bl	80014d6 <_ZN18tutrc_harurobo_lib6BNO05511get_euler_xEv>
 800175e:	eef0 7a40 	vmov.f32	s15, s0
 8001762:	eef1 7a67 	vneg.f32	s15, s15
 8001766:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800176a:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
		//double R = 0;

		double v1 = 60 * (vx * cos(0 + R) + vy * sin(0 + R));
 800176e:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8001772:	ed9f 6ba1 	vldr	d6, [pc, #644]	; 80019f8 <_ZZ7cppmainENKUlvE_clEv+0x2f8>
 8001776:	ee37 7b06 	vadd.f64	d7, d7, d6
 800177a:	eeb0 0b47 	vmov.f64	d0, d7
 800177e:	f00f fbe7 	bl	8010f50 <cos>
 8001782:	eeb0 6b40 	vmov.f64	d6, d0
 8001786:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 800178a:	ee26 8b07 	vmul.f64	d8, d6, d7
 800178e:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8001792:	ed9f 6b99 	vldr	d6, [pc, #612]	; 80019f8 <_ZZ7cppmainENKUlvE_clEv+0x2f8>
 8001796:	ee37 7b06 	vadd.f64	d7, d7, d6
 800179a:	eeb0 0b47 	vmov.f64	d0, d7
 800179e:	f00f fc23 	bl	8010fe8 <sin>
 80017a2:	eeb0 6b40 	vmov.f64	d6, d0
 80017a6:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 80017aa:	ee26 7b07 	vmul.f64	d7, d6, d7
 80017ae:	ee38 7b07 	vadd.f64	d7, d8, d7
 80017b2:	ed9f 6b93 	vldr	d6, [pc, #588]	; 8001a00 <_ZZ7cppmainENKUlvE_clEv+0x300>
 80017b6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80017ba:	ed87 7b1a 	vstr	d7, [r7, #104]	; 0x68
		double v2 = 60 * (vx * cos((M_PI * 2 / 3) + R) + vy * sin((M_PI * 2 / 3)+ R));
 80017be:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 80017c2:	ed9f 6b91 	vldr	d6, [pc, #580]	; 8001a08 <_ZZ7cppmainENKUlvE_clEv+0x308>
 80017c6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80017ca:	eeb0 0b47 	vmov.f64	d0, d7
 80017ce:	f00f fbbf 	bl	8010f50 <cos>
 80017d2:	eeb0 6b40 	vmov.f64	d6, d0
 80017d6:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 80017da:	ee26 8b07 	vmul.f64	d8, d6, d7
 80017de:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 80017e2:	ed9f 6b89 	vldr	d6, [pc, #548]	; 8001a08 <_ZZ7cppmainENKUlvE_clEv+0x308>
 80017e6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80017ea:	eeb0 0b47 	vmov.f64	d0, d7
 80017ee:	f00f fbfb 	bl	8010fe8 <sin>
 80017f2:	eeb0 6b40 	vmov.f64	d6, d0
 80017f6:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 80017fa:	ee26 7b07 	vmul.f64	d7, d6, d7
 80017fe:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001802:	ed9f 6b7f 	vldr	d6, [pc, #508]	; 8001a00 <_ZZ7cppmainENKUlvE_clEv+0x300>
 8001806:	ee27 7b06 	vmul.f64	d7, d7, d6
 800180a:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
		double v3 = 60
				* (vx * cos((M_PI * 4 / 3) + R) + vy * sin((M_PI * 4 / 3) + R));
 800180e:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8001812:	ed9f 6b7f 	vldr	d6, [pc, #508]	; 8001a10 <_ZZ7cppmainENKUlvE_clEv+0x310>
 8001816:	ee37 7b06 	vadd.f64	d7, d7, d6
 800181a:	eeb0 0b47 	vmov.f64	d0, d7
 800181e:	f00f fb97 	bl	8010f50 <cos>
 8001822:	eeb0 6b40 	vmov.f64	d6, d0
 8001826:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 800182a:	ee26 8b07 	vmul.f64	d8, d6, d7
 800182e:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8001832:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8001a10 <_ZZ7cppmainENKUlvE_clEv+0x310>
 8001836:	ee37 7b06 	vadd.f64	d7, d7, d6
 800183a:	eeb0 0b47 	vmov.f64	d0, d7
 800183e:	f00f fbd3 	bl	8010fe8 <sin>
 8001842:	eeb0 6b40 	vmov.f64	d6, d0
 8001846:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 800184a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800184e:	ee38 7b07 	vadd.f64	d7, d8, d7
		double v3 = 60
 8001852:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 8001a00 <_ZZ7cppmainENKUlvE_clEv+0x300>
 8001856:	ee27 7b06 	vmul.f64	d7, d7, d6
 800185a:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
		ps3.update();
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]

		if (ps3.get_key(PS3::Key::L1)) {
 8001862:	2109      	movs	r1, #9
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff fbdb 	bl	8001020 <_ZN18tutrc_harurobo_lib3PS37get_keyENS0_3KeyE>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d017      	beq.n	80018a0 <_ZZ7cppmainENKUlvE_clEv+0x1a0>
			v1 -= 40;
 8001870:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 8001874:	ed9f 6b68 	vldr	d6, [pc, #416]	; 8001a18 <_ZZ7cppmainENKUlvE_clEv+0x318>
 8001878:	ee37 7b46 	vsub.f64	d7, d7, d6
 800187c:	ed87 7b1a 	vstr	d7, [r7, #104]	; 0x68
			v2 -= 40;
 8001880:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 8001884:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8001a18 <_ZZ7cppmainENKUlvE_clEv+0x318>
 8001888:	ee37 7b46 	vsub.f64	d7, d7, d6
 800188c:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
			v3 -= 40;
 8001890:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8001894:	ed9f 6b60 	vldr	d6, [pc, #384]	; 8001a18 <_ZZ7cppmainENKUlvE_clEv+0x318>
 8001898:	ee37 7b46 	vsub.f64	d7, d7, d6
 800189c:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
		ps3.update();
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
		}

		if (ps3.get_key(PS3::Key::R1)) {
 80018a4:	210b      	movs	r1, #11
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff fbba 	bl	8001020 <_ZN18tutrc_harurobo_lib3PS37get_keyENS0_3KeyE>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d017      	beq.n	80018e2 <_ZZ7cppmainENKUlvE_clEv+0x1e2>
			v1 += 40;
 80018b2:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 80018b6:	ed9f 6b58 	vldr	d6, [pc, #352]	; 8001a18 <_ZZ7cppmainENKUlvE_clEv+0x318>
 80018ba:	ee37 7b06 	vadd.f64	d7, d7, d6
 80018be:	ed87 7b1a 	vstr	d7, [r7, #104]	; 0x68
			v2 += 40;
 80018c2:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 80018c6:	ed9f 6b54 	vldr	d6, [pc, #336]	; 8001a18 <_ZZ7cppmainENKUlvE_clEv+0x318>
 80018ca:	ee37 7b06 	vadd.f64	d7, d7, d6
 80018ce:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
			v3 += 40;
 80018d2:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 80018d6:	ed9f 6b50 	vldr	d6, [pc, #320]	; 8001a18 <_ZZ7cppmainENKUlvE_clEv+0x318>
 80018da:	ee37 7b06 	vadd.f64	d7, d7, d6
 80018de:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
		}

		double K = 100;
 80018e2:	f04f 0200 	mov.w	r2, #0
 80018e6:	4b4e      	ldr	r3, [pc, #312]	; (8001a20 <_ZZ7cppmainENKUlvE_clEv+0x320>)
 80018e8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
		double e1 = v1 - c610.get_rps(C610::ID::ID1);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	2100      	movs	r1, #0
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff fc3c 	bl	8001170 <_ZN18tutrc_harurobo_lib4C6107get_rpsENS0_2IDE>
 80018f8:	eef0 7a40 	vmov.f32	s15, s0
 80018fc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001900:	ed97 6b1a 	vldr	d6, [r7, #104]	; 0x68
 8001904:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001908:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
		int c1 = clamp(K * e1, -2500, 2500);
 800190c:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 8001910:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8001914:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001918:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800191c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001920:	4940      	ldr	r1, [pc, #256]	; (8001a24 <_ZZ7cppmainENKUlvE_clEv+0x324>)
 8001922:	ee17 0a90 	vmov	r0, s15
 8001926:	f7ff fecf 	bl	80016c8 <_Z5clampiii>
 800192a:	62f8      	str	r0, [r7, #44]	; 0x2c
		double e1 = v1 - c610.get_rps(C610::ID::ID1);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	68db      	ldr	r3, [r3, #12]

		double e2 = v2 - c610.get_rps(C610::ID::ID2);
 8001930:	2101      	movs	r1, #1
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff fc1c 	bl	8001170 <_ZN18tutrc_harurobo_lib4C6107get_rpsENS0_2IDE>
 8001938:	eef0 7a40 	vmov.f32	s15, s0
 800193c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001940:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 8001944:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001948:	ed87 7b08 	vstr	d7, [r7, #32]
		int c2 = clamp(K * e2, -2500, 2500);
 800194c:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 8001950:	ed97 7b08 	vldr	d7, [r7, #32]
 8001954:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001958:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800195c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001960:	4930      	ldr	r1, [pc, #192]	; (8001a24 <_ZZ7cppmainENKUlvE_clEv+0x324>)
 8001962:	ee17 0a90 	vmov	r0, s15
 8001966:	f7ff feaf 	bl	80016c8 <_Z5clampiii>
 800196a:	61f8      	str	r0, [r7, #28]
		double e1 = v1 - c610.get_rps(C610::ID::ID1);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	68db      	ldr	r3, [r3, #12]

		double e3 = v3 - c610.get_rps(C610::ID::ID3);
 8001970:	2102      	movs	r1, #2
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff fbfc 	bl	8001170 <_ZN18tutrc_harurobo_lib4C6107get_rpsENS0_2IDE>
 8001978:	eef0 7a40 	vmov.f32	s15, s0
 800197c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001980:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
 8001984:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001988:	ed87 7b04 	vstr	d7, [r7, #16]
		int c3 = clamp(K * e3, -2500, 2500); //P制御
 800198c:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 8001990:	ed97 7b04 	vldr	d7, [r7, #16]
 8001994:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001998:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800199c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80019a0:	4920      	ldr	r1, [pc, #128]	; (8001a24 <_ZZ7cppmainENKUlvE_clEv+0x324>)
 80019a2:	ee17 0a90 	vmov	r0, s15
 80019a6:	f7ff fe8f 	bl	80016c8 <_Z5clampiii>
 80019aa:	60f8      	str	r0, [r7, #12]
		double e1 = v1 - c610.get_rps(C610::ID::ID1);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	68db      	ldr	r3, [r3, #12]

		c610.set_current(C610::ID::ID1, c1);
 80019b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019b2:	b212      	sxth	r2, r2
 80019b4:	2100      	movs	r1, #0
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff fbf6 	bl	80011a8 <_ZN18tutrc_harurobo_lib4C61011set_currentENS0_2IDEs>
		double e1 = v1 - c610.get_rps(C610::ID::ID1);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	68db      	ldr	r3, [r3, #12]
		c610.set_current(C610::ID::ID2, c2);
 80019c0:	69fa      	ldr	r2, [r7, #28]
 80019c2:	b212      	sxth	r2, r2
 80019c4:	2101      	movs	r1, #1
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff fbee 	bl	80011a8 <_ZN18tutrc_harurobo_lib4C61011set_currentENS0_2IDEs>
		double e1 = v1 - c610.get_rps(C610::ID::ID1);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	68db      	ldr	r3, [r3, #12]
		c610.set_current(C610::ID::ID3, c3); //モーターを動かす
 80019d0:	68fa      	ldr	r2, [r7, #12]
 80019d2:	b212      	sxth	r2, r2
 80019d4:	2102      	movs	r1, #2
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff fbe6 	bl	80011a8 <_ZN18tutrc_harurobo_lib4C61011set_currentENS0_2IDEs>
		double e1 = v1 - c610.get_rps(C610::ID::ID1);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	68db      	ldr	r3, [r3, #12]

		c610.transmit(); //3つのモーターの指示
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff fbfa 	bl	80011da <_ZN18tutrc_harurobo_lib4C6108transmitEv>

		//debug.printf("%f\t%f\t%f\t%f\t%f\r\n", vx, vy, v1, v2, v3);
	});
 80019e6:	bf00      	nop
 80019e8:	3770      	adds	r7, #112	; 0x70
 80019ea:	46bd      	mov	sp, r7
 80019ec:	ecbd 8b02 	vpop	{d8}
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	f3af 8000 	nop.w
	...
 8001a04:	404e0000 	.word	0x404e0000
 8001a08:	382d7365 	.word	0x382d7365
 8001a0c:	4000c152 	.word	0x4000c152
 8001a10:	382d7365 	.word	0x382d7365
 8001a14:	4010c152 	.word	0x4010c152
 8001a18:	00000000 	.word	0x00000000
 8001a1c:	40440000 	.word	0x40440000
 8001a20:	40590000 	.word	0x40590000
 8001a24:	fffff63c 	.word	0xfffff63c

08001a28 <_ZNSt8functionIFvvEED1Ev>:
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff f8d0 	bl	8000bd8 <_ZNSt14_Function_baseD1Ev>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
	...

08001a44 <cppmain>:
extern "C" void cppmain() {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b0b2      	sub	sp, #200	; 0xc8
 8001a48:	af02      	add	r7, sp, #8
	UART debug(&huart2);
 8001a4a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001a4e:	2240      	movs	r2, #64	; 0x40
 8001a50:	4931      	ldr	r1, [pc, #196]	; (8001b18 <cppmain+0xd4>)
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7fe ff43 	bl	80008de <_ZN18tutrc_harurobo_lib4UARTC1EP20__UART_HandleTypeDefj>
	UART uart3(&huart3);
 8001a58:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001a5c:	2240      	movs	r2, #64	; 0x40
 8001a5e:	492f      	ldr	r1, [pc, #188]	; (8001b1c <cppmain+0xd8>)
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7fe ff3c 	bl	80008de <_ZN18tutrc_harurobo_lib4UARTC1EP20__UART_HandleTypeDefj>
	CAN can(&hfdcan1);
 8001a66:	f107 0074 	add.w	r0, r7, #116	; 0x74
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	492c      	ldr	r1, [pc, #176]	; (8001b20 <cppmain+0xdc>)
 8001a70:	f7ff f907 	bl	8000c82 <_ZN18tutrc_harurobo_lib3CANC1EP19FDCAN_HandleTypeDefmm>
	PS3 ps3(&huart1);
 8001a74:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a78:	492a      	ldr	r1, [pc, #168]	; (8001b24 <cppmain+0xe0>)
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff f9b2 	bl	8000de4 <_ZN18tutrc_harurobo_lib3PS3C1EP20__UART_HandleTypeDef>
	C610 c610(can);
 8001a80:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8001a84:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a88:	4611      	mov	r1, r2
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff fb1f 	bl	80010ce <_ZN18tutrc_harurobo_lib4C610C1ERNS_3CANE>
	Timer timer(&htim5);
 8001a90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a94:	4924      	ldr	r1, [pc, #144]	; (8001b28 <cppmain+0xe4>)
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff fc3d 	bl	8001316 <_ZN18tutrc_harurobo_lib5TimerC1EP17TIM_HandleTypeDef>
	BNO055 bno(uart3);
 8001a9c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001aa0:	f107 0320 	add.w	r3, r7, #32
 8001aa4:	4611      	mov	r1, r2
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff fcd4 	bl	8001454 <_ZN18tutrc_harurobo_lib6BNO055C1ERNS_4UARTE>
	Encoder enc(&htim3, 2048, 0.01);
 8001aac:	463b      	mov	r3, r7
 8001aae:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8001b2c <cppmain+0xe8>
 8001ab2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ab6:	491e      	ldr	r1, [pc, #120]	; (8001b30 <cppmain+0xec>)
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff fc59 	bl	8001370 <_ZN18tutrc_harurobo_lib7EncoderC1EP17TIM_HandleTypeDeftf>
	timer.set_timer_callback([&]() {
 8001abe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ac2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001ac6:	463b      	mov	r3, r7
 8001ac8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001acc:	f107 0320 	add.w	r3, r7, #32
 8001ad0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001ad4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ad8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001adc:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 8001ae0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001aea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001aec:	f000 f9ce 	bl	8001e8c <_ZNSt8functionIFvvEEC1IZ7cppmainEUlvE_vvEET_>
 8001af0:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8001af4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001af8:	4611      	mov	r1, r2
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff fc1e 	bl	800133c <_ZN18tutrc_harurobo_lib5Timer18set_timer_callbackEOSt8functionIFvvEE>
 8001b00:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff ff8f 	bl	8001a28 <_ZNSt8functionIFvvEED1Ev>

	while (true) {
		bno.update();
 8001b0a:	f107 0320 	add.w	r3, r7, #32
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff fcce 	bl	80014b0 <_ZN18tutrc_harurobo_lib6BNO0556updateEv>
 8001b14:	e7f9      	b.n	8001b0a <cppmain+0xc6>
 8001b16:	bf00      	nop
 8001b18:	24000700 	.word	0x24000700
 8001b1c:	24000790 	.word	0x24000790
 8001b20:	240001fc 	.word	0x240001fc
 8001b24:	24000670 	.word	0x24000670
 8001b28:	240004f4 	.word	0x240004f4
 8001b2c:	3c23d70a 	.word	0x3c23d70a
 8001b30:	2400045c 	.word	0x2400045c

08001b34 <_ZNSaIhEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f000 f9d7 	bl	8001ef0 <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4618      	mov	r0, r3
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <_ZNSaIhED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f000 f9d6 	bl	8001f06 <_ZN9__gnu_cxx13new_allocatorIhED1Ev>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <_ZNSt6vectorIhSaIhEEC1EjRKS0_>:
       *
       *  This constructor fills the %vector with @a __n default
       *  constructed elements.
       */
      explicit
      vector(size_type __n, const allocator_type& __a = allocator_type())
 8001b64:	b590      	push	{r4, r7, lr}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
      : _Base(_S_check_init_len(__n, __a), __a)
 8001b70:	68fc      	ldr	r4, [r7, #12]
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	68b8      	ldr	r0, [r7, #8]
 8001b76:	f000 f9d1 	bl	8001f1c <_ZNSt6vectorIhSaIhEE17_S_check_init_lenEjRKS0_>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4620      	mov	r0, r4
 8001b82:	f000 f9f3 	bl	8001f6c <_ZNSt12_Vector_baseIhSaIhEEC1EjRKS0_>
      { _M_default_initialize(__n); }
 8001b86:	68b9      	ldr	r1, [r7, #8]
 8001b88:	68f8      	ldr	r0, [r7, #12]
 8001b8a:	f000 fa03 	bl	8001f94 <_ZNSt6vectorIhSaIhEE21_M_default_initializeEj>
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	4618      	mov	r0, r3
 8001b92:	3714      	adds	r7, #20
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd90      	pop	{r4, r7, pc}

08001b98 <_ZNSt6vectorIhSaIhEE4dataEv>:
      /**
       *   Returns a pointer such that [data(), data() + size()) is a valid
       *   range.  For a non-empty %vector, data() == &front().
       */
      _Tp*
      data() _GLIBCXX_NOEXCEPT
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
      { return _M_data_ptr(this->_M_impl._M_start); }
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 fa17 	bl	8001fda <_ZNKSt6vectorIhSaIhEE11_M_data_ptrIhEEPT_S4_>
 8001bac:	4603      	mov	r3, r0
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <_ZNKSt6vectorIhSaIhEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8001bb6:	b480      	push	{r7}
 8001bb8:	b083      	sub	sp, #12
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685a      	ldr	r2, [r3, #4]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	4618      	mov	r0, r3
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <_ZNSt6vectorIhSaIhEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	4413      	add	r3, r2
      }
 8001be6:	4618      	mov	r0, r3
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <_ZNSt13unordered_mapIP19FDCAN_HandleTypeDefSt8functionIFvmPhjEESt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_S5_EEEixERSB_>:
       *  is then returned.
       *
       *  Lookup requires constant time.
       */
      mapped_type&
      operator[](const key_type& __k)
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b082      	sub	sp, #8
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
 8001bfa:	6039      	str	r1, [r7, #0]
      { return _M_h[__k]; }
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6839      	ldr	r1, [r7, #0]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f000 fa01 	bl	8002008 <_ZNSt8__detail9_Map_baseIP19FDCAN_HandleTypeDefSt4pairIKS2_St8functionIFvmPhjEEESaIS9_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEELb1EEixERS4_>
 8001c06:	4603      	mov	r3, r0
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <_ZSt4moveIRSt8functionIFvmPhjEEEONSt16remove_referenceIT_E4typeEOS6_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <_ZNSt8functionIFvmPhjEEaSEOS2_>:
       *
       *  If @a __x targets a function pointer or a reference to a function
       *  object, then this operation will not throw an %exception.
       */
      function&
      operator=(function&& __x) noexcept
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b086      	sub	sp, #24
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
 8001c2e:	6039      	str	r1, [r7, #0]
      {
	function(std::move(__x)).swap(*this);
 8001c30:	6838      	ldr	r0, [r7, #0]
 8001c32:	f7ff ffed 	bl	8001c10 <_ZSt4moveIRSt8functionIFvmPhjEEEONSt16remove_referenceIT_E4typeEOS6_>
 8001c36:	4602      	mov	r2, r0
 8001c38:	f107 0308 	add.w	r3, r7, #8
 8001c3c:	4611      	mov	r1, r2
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f000 fa38 	bl	80020b4 <_ZNSt8functionIFvmPhjEEC1EOS2_>
 8001c44:	f107 0308 	add.w	r3, r7, #8
 8001c48:	6879      	ldr	r1, [r7, #4]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f000 fa44 	bl	80020d8 <_ZNSt8functionIFvmPhjEE4swapERS2_>
 8001c50:	f107 0308 	add.w	r3, r7, #8
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff fa2d 	bl	80010b4 <_ZNSt8functionIFvmPhjEED1Ev>
	return *this;
 8001c5a:	687b      	ldr	r3, [r7, #4]
      }
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3718      	adds	r7, #24
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <_ZNSt5arrayIhLj8EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f000 fa53 	bl	800211a <_ZNSt14__array_traitsIhLj8EE6_S_ptrERA8_Kh>
 8001c74:	4603      	mov	r3, r0
 8001c76:	4618      	mov	r0, r3
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <_ZNKSt5arrayIhLj8EE4sizeEv>:
      size() const noexcept { return _Nm; }
 8001c7e:	b480      	push	{r7}
 8001c80:	b083      	sub	sp, #12
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
 8001c86:	2308      	movs	r3, #8
 8001c88:	4618      	mov	r0, r3
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <_ZNSt5arrayIhLj8EEixEj>:
      operator[](size_type __n) noexcept
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6839      	ldr	r1, [r7, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f000 fa44 	bl	8002130 <_ZNSt14__array_traitsIhLj8EE6_S_refERA8_Khj>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	4618      	mov	r0, r3
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <_ZNSt5arrayIfLj4EEixEj>:
      operator[](size_type __n) noexcept
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b082      	sub	sp, #8
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
 8001cba:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6839      	ldr	r1, [r7, #0]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f000 fa43 	bl	800214c <_ZNSt14__array_traitsIfLj4EE6_S_refERA4_Kfj>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3708      	adds	r7, #8
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <_ZN18tutrc_harurobo_lib13to_underlyingINS_3PS33KeyEEENSt15underlying_typeIT_E4typeES4_>:
template <class T> constexpr std::underlying_type_t<T> to_underlying(T value) {
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  return static_cast<std::underlying_type_t<T>>(value);
 8001cd8:	687b      	ldr	r3, [r7, #4]
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <_ZNSt5arrayIsLj8EEixEj>:
      operator[](size_type __n) noexcept
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b082      	sub	sp, #8
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
 8001cee:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6839      	ldr	r1, [r7, #0]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f000 fa38 	bl	800216a <_ZNSt14__array_traitsIsLj8EE6_S_refERA8_Ksj>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3708      	adds	r7, #8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <_ZNSt8functionIFvmPhjEEC1IZN18tutrc_harurobo_lib4C610C4ERNS4_3CANEEUlmS0_jE_vvEET_>:
	}
    }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor, typename, typename>
      function<_Res(_ArgTypes...)>::
 8001d04:	b590      	push	{r4, r7, lr}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
      function(_Functor __f)
      : _Function_base()
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7fe ff53 	bl	8000bbc <_ZNSt14_Function_baseC1Ev>
      {
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
 8001d16:	463b      	mov	r3, r7
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f000 fa35 	bl	8002188 <_ZNSt14_Function_base13_Base_managerIZN18tutrc_harurobo_lib4C610C4ERNS1_3CANEEUlmPhjE_E21_M_not_empty_functionIS6_EEbRKT_>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d00f      	beq.n	8001d44 <_ZNSt8functionIFvmPhjEEC1IZN18tutrc_harurobo_lib4C610C4ERNS4_3CANEEUlmS0_jE_vvEET_+0x40>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8001d24:	687c      	ldr	r4, [r7, #4]
 8001d26:	463b      	mov	r3, r7
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f000 fa38 	bl	800219e <_ZSt4moveIRZN18tutrc_harurobo_lib4C610C4ERNS0_3CANEEUlmPhjE_EONSt16remove_referenceIT_E4typeEOS8_>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	4619      	mov	r1, r3
 8001d32:	4620      	mov	r0, r4
 8001d34:	f000 fa3e 	bl	80021b4 <_ZNSt14_Function_base13_Base_managerIZN18tutrc_harurobo_lib4C610C4ERNS1_3CANEEUlmPhjE_E15_M_init_functorERSt9_Any_dataOS6_>
	    _M_invoker = &_My_handler::_M_invoke;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a05      	ldr	r2, [pc, #20]	; (8001d50 <_ZNSt8functionIFvmPhjEEC1IZN18tutrc_harurobo_lib4C610C4ERNS4_3CANEEUlmS0_jE_vvEET_+0x4c>)
 8001d3c:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a04      	ldr	r2, [pc, #16]	; (8001d54 <_ZNSt8functionIFvmPhjEEC1IZN18tutrc_harurobo_lib4C610C4ERNS4_3CANEEUlmS0_jE_vvEET_+0x50>)
 8001d42:	609a      	str	r2, [r3, #8]
	  }
      }
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4618      	mov	r0, r3
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd90      	pop	{r4, r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	080021d9 	.word	0x080021d9
 8001d54:	08002219 	.word	0x08002219

08001d58 <_ZNSt13unordered_mapIP17TIM_HandleTypeDefSt8functionIFvvEESt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_S4_EEEixERSA_>:
      operator[](const key_type& __k)
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
      { return _M_h[__k]; }
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6839      	ldr	r1, [r7, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f000 fa76 	bl	8002258 <_ZNSt8__detail9_Map_baseIP17TIM_HandleTypeDefSt4pairIKS2_St8functionIFvvEEESaIS8_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEELb1EEixERS4_>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <_ZSt4moveIRSt8functionIFvvEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8001d76:	b480      	push	{r7}
 8001d78:	b083      	sub	sp, #12
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4618      	mov	r0, r3
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <_ZNSt8functionIFvvEEaSEOS1_>:
      operator=(function&& __x) noexcept
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
	function(std::move(__x)).swap(*this);
 8001d96:	6838      	ldr	r0, [r7, #0]
 8001d98:	f7ff ffed 	bl	8001d76 <_ZSt4moveIRSt8functionIFvvEEEONSt16remove_referenceIT_E4typeEOS5_>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	f107 0308 	add.w	r3, r7, #8
 8001da2:	4611      	mov	r1, r2
 8001da4:	4618      	mov	r0, r3
 8001da6:	f000 faad 	bl	8002304 <_ZNSt8functionIFvvEEC1EOS1_>
 8001daa:	f107 0308 	add.w	r3, r7, #8
 8001dae:	6879      	ldr	r1, [r7, #4]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f000 fab9 	bl	8002328 <_ZNSt8functionIFvvEE4swapERS1_>
 8001db6:	f107 0308 	add.w	r3, r7, #8
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff fe34 	bl	8001a28 <_ZNSt8functionIFvvEED1Ev>
	return *this;
 8001dc0:	687b      	ldr	r3, [r7, #4]
      }
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3718      	adds	r7, #24
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <_ZNSt5arrayIsLj3EE4dataEv>:
      data() noexcept
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b082      	sub	sp, #8
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f000 fac8 	bl	800236a <_ZNSt14__array_traitsIsLj3EE6_S_ptrERA3_Ks>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <_ZNSt5arrayIsLj3EEixEj>:
      operator[](size_type __n) noexcept
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6839      	ldr	r1, [r7, #0]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f000 fac4 	bl	8002380 <_ZNSt14__array_traitsIsLj3EE6_S_refERA3_Ksj>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <_ZNSt5arrayIhLj4EE4dataEv>:
      data() noexcept
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b082      	sub	sp, #8
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f000 fac6 	bl	800239e <_ZNSt14__array_traitsIhLj4EE6_S_ptrERA4_Kh>
 8001e12:	4603      	mov	r3, r0
 8001e14:	4618      	mov	r0, r3
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <_ZNSt5arrayIhLj4EEixEj>:
      operator[](size_type __n) noexcept
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6839      	ldr	r1, [r7, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f000 fac2 	bl	80023b4 <_ZNSt14__array_traitsIhLj4EE6_S_refERA4_Khj>
 8001e30:	4603      	mov	r3, r0
 8001e32:	4618      	mov	r0, r3
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <_ZSt3maxIiERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8001e3a:	b480      	push	{r7}
 8001e3c:	b083      	sub	sp, #12
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
 8001e42:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	da01      	bge.n	8001e54 <_ZSt3maxIiERKT_S2_S2_+0x1a>
	return __b;
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	e000      	b.n	8001e56 <_ZSt3maxIiERKT_S2_S2_+0x1c>
      return __a;
 8001e54:	687b      	ldr	r3, [r7, #4]
    }
 8001e56:	4618      	mov	r0, r3
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <_ZSt3minIiERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8001e62:	b480      	push	{r7}
 8001e64:	b083      	sub	sp, #12
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
 8001e6a:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	da01      	bge.n	8001e7c <_ZSt3minIiERKT_S2_S2_+0x1a>
	return __b;
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	e000      	b.n	8001e7e <_ZSt3minIiERKT_S2_S2_+0x1c>
      return __a;
 8001e7c:	687b      	ldr	r3, [r7, #4]
    }
 8001e7e:	4618      	mov	r0, r3
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
	...

08001e8c <_ZNSt8functionIFvvEEC1IZ7cppmainEUlvE_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8001e8c:	b084      	sub	sp, #16
 8001e8e:	b590      	push	{r4, r7, lr}
 8001e90:	b083      	sub	sp, #12
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
 8001e96:	f107 001c 	add.w	r0, r7, #28
 8001e9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
      : _Function_base()
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7fe fe8b 	bl	8000bbc <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 8001ea6:	f107 031c 	add.w	r3, r7, #28
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f000 fa90 	bl	80023d0 <_ZNSt14_Function_base13_Base_managerIZ7cppmainEUlvE_E21_M_not_empty_functionIS1_EEbRKT_>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d010      	beq.n	8001ed8 <_ZNSt8functionIFvvEEC1IZ7cppmainEUlvE_vvEET_+0x4c>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8001eb6:	687c      	ldr	r4, [r7, #4]
 8001eb8:	f107 031c 	add.w	r3, r7, #28
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f000 fa92 	bl	80023e6 <_ZSt4moveIRZ7cppmainEUlvE_EONSt16remove_referenceIT_E4typeEOS3_>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4620      	mov	r0, r4
 8001ec8:	f000 fa98 	bl	80023fc <_ZNSt14_Function_base13_Base_managerIZ7cppmainEUlvE_E15_M_init_functorERSt9_Any_dataOS1_>
	    _M_invoker = &_My_handler::_M_invoke;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a06      	ldr	r2, [pc, #24]	; (8001ee8 <_ZNSt8functionIFvvEEC1IZ7cppmainEUlvE_vvEET_+0x5c>)
 8001ed0:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a05      	ldr	r2, [pc, #20]	; (8001eec <_ZNSt8functionIFvvEEC1IZ7cppmainEUlvE_vvEET_+0x60>)
 8001ed6:	609a      	str	r2, [r3, #8]
      }
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4618      	mov	r0, r3
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001ee4:	b004      	add	sp, #16
 8001ee6:	4770      	bx	lr
 8001ee8:	08002421 	.word	0x08002421
 8001eec:	0800243f 	.word	0x0800243f

08001ef0 <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4618      	mov	r0, r3
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr

08001f06 <_ZN9__gnu_cxx13new_allocatorIhED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001f06:	b480      	push	{r7}
 8001f08:	b083      	sub	sp, #12
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4618      	mov	r0, r3
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <_ZNSt6vectorIhSaIhEE17_S_check_init_lenEjRKS0_>:
	return (__len < size() || __len > max_size()) ? max_size() : __len;
      }

      // Called by constructors to check initial size.
      static size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
 8001f1c:	b590      	push	{r4, r7, lr}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8001f26:	f107 030c 	add.w	r3, r7, #12
 8001f2a:	6839      	ldr	r1, [r7, #0]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f000 fabf 	bl	80024b0 <_ZNSaIhEC1ERKS_>
 8001f32:	f107 030c 	add.w	r3, r7, #12
 8001f36:	4618      	mov	r0, r3
 8001f38:	f000 faa0 	bl	800247c <_ZNSt6vectorIhSaIhEE11_S_max_sizeERKS0_>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4293      	cmp	r3, r2
 8001f42:	bf8c      	ite	hi
 8001f44:	2301      	movhi	r3, #1
 8001f46:	2300      	movls	r3, #0
 8001f48:	b2dc      	uxtb	r4, r3
 8001f4a:	f107 030c 	add.w	r3, r7, #12
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7ff fdfc 	bl	8001b4c <_ZNSaIhED1Ev>
 8001f54:	2c00      	cmp	r4, #0
 8001f56:	d002      	beq.n	8001f5e <_ZNSt6vectorIhSaIhEE17_S_check_init_lenEjRKS0_+0x42>
	  __throw_length_error(
 8001f58:	4803      	ldr	r0, [pc, #12]	; (8001f68 <_ZNSt6vectorIhSaIhEE17_S_check_init_lenEjRKS0_+0x4c>)
 8001f5a:	f00e ff57 	bl	8010e0c <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
 8001f5e:	687b      	ldr	r3, [r7, #4]
      }
 8001f60:	4618      	mov	r0, r3
 8001f62:	3714      	adds	r7, #20
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd90      	pop	{r4, r7, pc}
 8001f68:	08014540 	.word	0x08014540

08001f6c <_ZNSt12_Vector_baseIhSaIhEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6879      	ldr	r1, [r7, #4]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f000 faa5 	bl	80024cc <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 8001f82:	68b9      	ldr	r1, [r7, #8]
 8001f84:	68f8      	ldr	r0, [r7, #12]
 8001f86:	f000 fab3 	bl	80024f0 <_ZNSt12_Vector_baseIhSaIhEE17_M_create_storageEj>
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3710      	adds	r7, #16
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <_ZNSt6vectorIhSaIhEE21_M_default_initializeEj>:
      _M_default_initialize(size_type __n)
 8001f94:	b590      	push	{r4, r7, lr}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681c      	ldr	r4, [r3, #0]
					   _M_get_Tp_allocator());
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f000 f80d 	bl	8001fc4 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8001faa:	4603      	mov	r3, r0
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
 8001fac:	461a      	mov	r2, r3
 8001fae:	6839      	ldr	r1, [r7, #0]
 8001fb0:	4620      	mov	r0, r4
 8001fb2:	f000 fab7 	bl	8002524 <_ZSt27__uninitialized_default_n_aIPhjhET_S1_T0_RSaIT1_E>
 8001fb6:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	605a      	str	r2, [r3, #4]
      }
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd90      	pop	{r4, r7, pc}

08001fc4 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <_ZNKSt6vectorIhSaIhEE11_M_data_ptrIhEEPT_S4_>:
      }
#endif

      template<typename _Up>
	_Up*
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
 8001fda:	b480      	push	{r7}
 8001fdc:	b083      	sub	sp, #12
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
 8001fe2:	6039      	str	r1, [r7, #0]
	{ return __ptr; }
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001ff2:	b480      	push	{r7}
 8001ff4:	b083      	sub	sp, #12
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <_ZNSt8__detail9_Map_baseIP19FDCAN_HandleTypeDefSt4pairIKS2_St8functionIFvmPhjEEESaIS9_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEELb1EEixERS4_>:

  template<typename _Key, typename _Pair, typename _Alloc, typename _Equal,
	   typename _H1, typename _H2, typename _Hash,
	   typename _RehashPolicy, typename _Traits>
    auto
    _Map_base<_Key, _Pair, _Alloc, _Select1st, _Equal,
 8002008:	b590      	push	{r4, r7, lr}
 800200a:	b08f      	sub	sp, #60	; 0x3c
 800200c:	af02      	add	r7, sp, #8
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
	      _H1, _H2, _Hash, _RehashPolicy, _Traits, true>::
    operator[](const key_type& __k)
    -> mapped_type&
    {
      __hashtable* __h = static_cast<__hashtable*>(this);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	62fb      	str	r3, [r7, #44]	; 0x2c
      __hash_code __code = __h->_M_hash_code(__k);
 8002016:	6839      	ldr	r1, [r7, #0]
 8002018:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800201a:	f000 fa92 	bl	8002542 <_ZNKSt8__detail15_Hash_code_baseIP19FDCAN_HandleTypeDefSt4pairIKS2_St8functionIFvmPhjEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS4_>
 800201e:	62b8      	str	r0, [r7, #40]	; 0x28
      std::size_t __bkt = __h->_M_bucket_index(__k, __code);
 8002020:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002022:	6839      	ldr	r1, [r7, #0]
 8002024:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002026:	f000 faa0 	bl	800256a <_ZNKSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERS3_j>
 800202a:	6278      	str	r0, [r7, #36]	; 0x24
      if (__node_type* __node = __h->_M_find_node(__bkt, __k, __code))
 800202c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002032:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002034:	f000 faab 	bl	800258e <_ZNKSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS3_j>
 8002038:	6238      	str	r0, [r7, #32]
 800203a:	6a3b      	ldr	r3, [r7, #32]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d006      	beq.n	800204e <_ZNSt8__detail9_Map_baseIP19FDCAN_HandleTypeDefSt4pairIKS2_St8functionIFvmPhjEEESaIS9_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEELb1EEixERS4_+0x46>
	return __node->_M_v().second;
 8002040:	6a3b      	ldr	r3, [r7, #32]
 8002042:	4618      	mov	r0, r3
 8002044:	f000 fabc 	bl	80025c0 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEE4_M_vEv>
 8002048:	4603      	mov	r3, r0
 800204a:	1d1c      	adds	r4, r3, #4
 800204c:	e02b      	b.n	80020a6 <_ZNSt8__detail9_Map_baseIP19FDCAN_HandleTypeDefSt4pairIKS2_St8functionIFvmPhjEEESaIS9_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEELb1EEixERS4_+0x9e>

      typename __hashtable::_Scoped_node __node {
	__h,
	std::piecewise_construct,
	std::tuple<const key_type&>(__k),
 800204e:	f107 0318 	add.w	r3, r7, #24
 8002052:	6839      	ldr	r1, [r7, #0]
 8002054:	4618      	mov	r0, r3
 8002056:	f000 fabf 	bl	80025d8 <_ZNSt5tupleIJRKP19FDCAN_HandleTypeDefEEC1ILb1ELb1EEES3_>
      typename __hashtable::_Scoped_node __node {
 800205a:	f107 0218 	add.w	r2, r7, #24
 800205e:	f107 0010 	add.w	r0, r7, #16
 8002062:	f107 031c 	add.w	r3, r7, #28
 8002066:	9300      	str	r3, [sp, #0]
 8002068:	4613      	mov	r3, r2
 800206a:	4a11      	ldr	r2, [pc, #68]	; (80020b0 <_ZNSt8__detail9_Map_baseIP19FDCAN_HandleTypeDefSt4pairIKS2_St8functionIFvmPhjEEESaIS9_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEELb1EEixERS4_+0xa8>)
 800206c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800206e:	f000 fac2 	bl	80025f6 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJRS3_EESR_IJEEEEEPNSA_16_Hashtable_allocISaINSA_10_Hash_nodeIS8_Lb0EEEEEEDpOT_>
	std::tuple<>()
      };
      auto __pos
	= __h->_M_insert_unique_node(__k, __bkt, __code, __node._M_node);
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	2201      	movs	r2, #1
 8002076:	9201      	str	r2, [sp, #4]
 8002078:	9300      	str	r3, [sp, #0]
 800207a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800207c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800207e:	6839      	ldr	r1, [r7, #0]
 8002080:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002082:	f000 faf0 	bl	8002666 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_insert_unique_nodeERS3_jjPNSA_10_Hash_nodeIS8_Lb0EEEj>
 8002086:	4603      	mov	r3, r0
 8002088:	60fb      	str	r3, [r7, #12]
      __node._M_node = nullptr;
 800208a:	2300      	movs	r3, #0
 800208c:	617b      	str	r3, [r7, #20]
      return __pos->second;
 800208e:	f107 030c 	add.w	r3, r7, #12
 8002092:	4618      	mov	r0, r3
 8002094:	f000 fb2f 	bl	80026f6 <_ZNKSt8__detail14_Node_iteratorISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0ELb0EEptEv>
 8002098:	4603      	mov	r3, r0
 800209a:	1d1c      	adds	r4, r3, #4
      typename __hashtable::_Scoped_node __node {
 800209c:	f107 0310 	add.w	r3, r7, #16
 80020a0:	4618      	mov	r0, r3
 80020a2:	f000 facb 	bl	800263c <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeD1Ev>
    }
 80020a6:	4623      	mov	r3, r4
 80020a8:	4618      	mov	r0, r3
 80020aa:	3734      	adds	r7, #52	; 0x34
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd90      	pop	{r4, r7, pc}
 80020b0:	080145c0 	.word	0x080145c0

080020b4 <_ZNSt8functionIFvmPhjEEC1EOS2_>:
      function(function&& __x) noexcept : _Function_base()
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7fe fd7b 	bl	8000bbc <_ZNSt14_Function_baseC1Ev>
	__x.swap(*this);
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	6838      	ldr	r0, [r7, #0]
 80020ca:	f000 f805 	bl	80020d8 <_ZNSt8functionIFvmPhjEE4swapERS2_>
      }
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4618      	mov	r0, r3
 80020d2:	3708      	adds	r7, #8
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <_ZNSt8functionIFvmPhjEE4swapERS2_>:
      void swap(function& __x) noexcept
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	4611      	mov	r1, r2
 80020e8:	4618      	mov	r0, r3
 80020ea:	f000 fb1d 	bl	8002728 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f103 0208 	add.w	r2, r3, #8
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	3308      	adds	r3, #8
 80020f8:	4619      	mov	r1, r3
 80020fa:	4610      	mov	r0, r2
 80020fc:	f000 fb46 	bl	800278c <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f103 020c 	add.w	r2, r3, #12
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	330c      	adds	r3, #12
 800210a:	4619      	mov	r1, r3
 800210c:	4610      	mov	r0, r2
 800210e:	f000 fb67 	bl	80027e0 <_ZSt4swapIPFvRKSt9_Any_dataOmOPhOjEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISD_ESt18is_move_assignableISD_EEE5valueEvE4typeERSD_SN_>
      }
 8002112:	bf00      	nop
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <_ZNSt14__array_traitsIhLj8EE6_S_ptrERA8_Kh>:
      _S_ptr(const _Type& __t) noexcept
 800211a:	b480      	push	{r7}
 800211c:	b083      	sub	sp, #12
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4618      	mov	r0, r3
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <_ZNSt14__array_traitsIhLj8EE6_S_refERA8_Khj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	4413      	add	r3, r2
 8002140:	4618      	mov	r0, r3
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <_ZNSt14__array_traitsIfLj4EE6_S_refERA4_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	4413      	add	r3, r2
 800215e:	4618      	mov	r0, r3
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <_ZNSt14__array_traitsIsLj8EE6_S_refERA8_Ksj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800216a:	b480      	push	{r7}
 800216c:	b083      	sub	sp, #12
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
 8002172:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	4413      	add	r3, r2
 800217c:	4618      	mov	r0, r3
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <_ZNSt14_Function_base13_Base_managerIZN18tutrc_harurobo_lib4C610C4ERNS1_3CANEEUlmPhjE_E21_M_not_empty_functionIS6_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
	  { return true; }
 8002190:	2301      	movs	r3, #1
 8002192:	4618      	mov	r0, r3
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr

0800219e <_ZSt4moveIRZN18tutrc_harurobo_lib4C610C4ERNS0_3CANEEUlmPhjE_EONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 800219e:	b480      	push	{r7}
 80021a0:	b083      	sub	sp, #12
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4618      	mov	r0, r3
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <_ZNSt14_Function_base13_Base_managerIZN18tutrc_harurobo_lib4C610C4ERNS1_3CANEEUlmPhjE_E15_M_init_functorERSt9_Any_dataOS6_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 80021b4:	b590      	push	{r4, r7, lr}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 80021be:	6838      	ldr	r0, [r7, #0]
 80021c0:	f7ff ffed 	bl	800219e <_ZSt4moveIRZN18tutrc_harurobo_lib4C610C4ERNS0_3CANEEUlmPhjE_EONSt16remove_referenceIT_E4typeEOS8_>
 80021c4:	4603      	mov	r3, r0
 80021c6:	4622      	mov	r2, r4
 80021c8:	4619      	mov	r1, r3
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f000 fb27 	bl	800281e <_ZNSt14_Function_base13_Base_managerIZN18tutrc_harurobo_lib4C610C4ERNS1_3CANEEUlmPhjE_E15_M_init_functorERSt9_Any_dataOS6_St17integral_constantIbLb1EE>
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd90      	pop	{r4, r7, pc}

080021d8 <_ZNSt17_Function_handlerIFvmPhjEZN18tutrc_harurobo_lib4C610C4ERNS2_3CANEEUlmS0_jE_E9_M_invokeERKSt9_Any_dataOmOS0_Oj>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80021d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
 80021e4:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 80021e6:	68f8      	ldr	r0, [r7, #12]
 80021e8:	f000 fb32 	bl	8002850 <_ZNSt14_Function_base13_Base_managerIZN18tutrc_harurobo_lib4C610C4ERNS1_3CANEEUlmPhjE_E14_M_get_pointerERKSt9_Any_data>
 80021ec:	4604      	mov	r4, r0
 80021ee:	68b8      	ldr	r0, [r7, #8]
 80021f0:	f000 fb3f 	bl	8002872 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 80021f4:	4605      	mov	r5, r0
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f000 fb46 	bl	8002888 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 80021fc:	4606      	mov	r6, r0
 80021fe:	6838      	ldr	r0, [r7, #0]
 8002200:	f7ff fef7 	bl	8001ff2 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8002204:	4603      	mov	r3, r0
 8002206:	4632      	mov	r2, r6
 8002208:	4629      	mov	r1, r5
 800220a:	4620      	mov	r0, r4
 800220c:	f000 fb47 	bl	800289e <_ZSt10__invoke_rIvRZN18tutrc_harurobo_lib4C610C4ERNS0_3CANEEUlmPhjE_JmS4_jEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueESA_E4typeEOSD_DpOSE_>
				     std::forward<_ArgTypes>(__args)...);
 8002210:	bf00      	nop
      }
 8002212:	3714      	adds	r7, #20
 8002214:	46bd      	mov	sp, r7
 8002216:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002218 <_ZNSt17_Function_handlerIFvmPhjEZN18tutrc_harurobo_lib4C610C4ERNS2_3CANEEUlmS0_jE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8002218:	b590      	push	{r4, r7, lr}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	4613      	mov	r3, r2
 8002224:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8002226:	79fb      	ldrb	r3, [r7, #7]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d109      	bne.n	8002240 <_ZNSt17_Function_handlerIFvmPhjEZN18tutrc_harurobo_lib4C610C4ERNS2_3CANEEUlmS0_jE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800222c:	68f8      	ldr	r0, [r7, #12]
 800222e:	f000 fb5a 	bl	80028e6 <_ZNSt9_Any_data9_M_accessIPZN18tutrc_harurobo_lib4C610C4ERNS1_3CANEEUlmPhjE_EERT_v>
 8002232:	4604      	mov	r4, r0
 8002234:	68b8      	ldr	r0, [r7, #8]
 8002236:	f000 fb0b 	bl	8002850 <_ZNSt14_Function_base13_Base_managerIZN18tutrc_harurobo_lib4C610C4ERNS1_3CANEEUlmPhjE_E14_M_get_pointerERKSt9_Any_data>
 800223a:	4603      	mov	r3, r0
 800223c:	6023      	str	r3, [r4, #0]
	    break;
 800223e:	e005      	b.n	800224c <_ZNSt17_Function_handlerIFvmPhjEZN18tutrc_harurobo_lib4C610C4ERNS2_3CANEEUlmS0_jE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8002240:	79fb      	ldrb	r3, [r7, #7]
 8002242:	461a      	mov	r2, r3
 8002244:	68b9      	ldr	r1, [r7, #8]
 8002246:	68f8      	ldr	r0, [r7, #12]
 8002248:	f000 fb59 	bl	80028fe <_ZNSt14_Function_base13_Base_managerIZN18tutrc_harurobo_lib4C610C4ERNS1_3CANEEUlmPhjE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>
	return false;
 800224c:	2300      	movs	r3, #0
      }
 800224e:	4618      	mov	r0, r3
 8002250:	3714      	adds	r7, #20
 8002252:	46bd      	mov	sp, r7
 8002254:	bd90      	pop	{r4, r7, pc}
	...

08002258 <_ZNSt8__detail9_Map_baseIP17TIM_HandleTypeDefSt4pairIKS2_St8functionIFvvEEESaIS8_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEELb1EEixERS4_>:
    _Map_base<_Key, _Pair, _Alloc, _Select1st, _Equal,
 8002258:	b590      	push	{r4, r7, lr}
 800225a:	b08f      	sub	sp, #60	; 0x3c
 800225c:	af02      	add	r7, sp, #8
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
      __hashtable* __h = static_cast<__hashtable*>(this);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	62fb      	str	r3, [r7, #44]	; 0x2c
      __hash_code __code = __h->_M_hash_code(__k);
 8002266:	6839      	ldr	r1, [r7, #0]
 8002268:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800226a:	f000 fb73 	bl	8002954 <_ZNKSt8__detail15_Hash_code_baseIP17TIM_HandleTypeDefSt4pairIKS2_St8functionIFvvEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS4_>
 800226e:	62b8      	str	r0, [r7, #40]	; 0x28
      std::size_t __bkt = __h->_M_bucket_index(__k, __code);
 8002270:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002272:	6839      	ldr	r1, [r7, #0]
 8002274:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002276:	f000 fb81 	bl	800297c <_ZNKSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERS3_j>
 800227a:	6278      	str	r0, [r7, #36]	; 0x24
      if (__node_type* __node = __h->_M_find_node(__bkt, __k, __code))
 800227c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800227e:	683a      	ldr	r2, [r7, #0]
 8002280:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002282:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002284:	f000 fb8c 	bl	80029a0 <_ZNKSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS3_j>
 8002288:	6238      	str	r0, [r7, #32]
 800228a:	6a3b      	ldr	r3, [r7, #32]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d006      	beq.n	800229e <_ZNSt8__detail9_Map_baseIP17TIM_HandleTypeDefSt4pairIKS2_St8functionIFvvEEESaIS8_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEELb1EEixERS4_+0x46>
	return __node->_M_v().second;
 8002290:	6a3b      	ldr	r3, [r7, #32]
 8002292:	4618      	mov	r0, r3
 8002294:	f000 fb9d 	bl	80029d2 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEEE4_M_vEv>
 8002298:	4603      	mov	r3, r0
 800229a:	1d1c      	adds	r4, r3, #4
 800229c:	e02b      	b.n	80022f6 <_ZNSt8__detail9_Map_baseIP17TIM_HandleTypeDefSt4pairIKS2_St8functionIFvvEEESaIS8_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEELb1EEixERS4_+0x9e>
	std::tuple<const key_type&>(__k),
 800229e:	f107 0318 	add.w	r3, r7, #24
 80022a2:	6839      	ldr	r1, [r7, #0]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f000 fba0 	bl	80029ea <_ZNSt5tupleIJRKP17TIM_HandleTypeDefEEC1ILb1ELb1EEES3_>
      typename __hashtable::_Scoped_node __node {
 80022aa:	f107 0218 	add.w	r2, r7, #24
 80022ae:	f107 0010 	add.w	r0, r7, #16
 80022b2:	f107 031c 	add.w	r3, r7, #28
 80022b6:	9300      	str	r3, [sp, #0]
 80022b8:	4613      	mov	r3, r2
 80022ba:	4a11      	ldr	r2, [pc, #68]	; (8002300 <_ZNSt8__detail9_Map_baseIP17TIM_HandleTypeDefSt4pairIKS2_St8functionIFvvEEESaIS8_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEELb1EEixERS4_+0xa8>)
 80022bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80022be:	f000 fba3 	bl	8002a08 <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJRS3_EESQ_IJEEEEEPNS9_16_Hashtable_allocISaINS9_10_Hash_nodeIS7_Lb0EEEEEEDpOT_>
	= __h->_M_insert_unique_node(__k, __bkt, __code, __node._M_node);
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	2201      	movs	r2, #1
 80022c6:	9201      	str	r2, [sp, #4]
 80022c8:	9300      	str	r3, [sp, #0]
 80022ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ce:	6839      	ldr	r1, [r7, #0]
 80022d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80022d2:	f000 fbd1 	bl	8002a78 <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_insert_unique_nodeERS3_jjPNS9_10_Hash_nodeIS7_Lb0EEEj>
 80022d6:	4603      	mov	r3, r0
 80022d8:	60fb      	str	r3, [r7, #12]
      __node._M_node = nullptr;
 80022da:	2300      	movs	r3, #0
 80022dc:	617b      	str	r3, [r7, #20]
      return __pos->second;
 80022de:	f107 030c 	add.w	r3, r7, #12
 80022e2:	4618      	mov	r0, r3
 80022e4:	f000 fc10 	bl	8002b08 <_ZNKSt8__detail14_Node_iteratorISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0ELb0EEptEv>
 80022e8:	4603      	mov	r3, r0
 80022ea:	1d1c      	adds	r4, r3, #4
      typename __hashtable::_Scoped_node __node {
 80022ec:	f107 0310 	add.w	r3, r7, #16
 80022f0:	4618      	mov	r0, r3
 80022f2:	f000 fbac 	bl	8002a4e <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeD1Ev>
    }
 80022f6:	4623      	mov	r3, r4
 80022f8:	4618      	mov	r0, r3
 80022fa:	3734      	adds	r7, #52	; 0x34
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd90      	pop	{r4, r7, pc}
 8002300:	080145c0 	.word	0x080145c0

08002304 <_ZNSt8functionIFvvEEC1EOS1_>:
      function(function&& __x) noexcept : _Function_base()
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4618      	mov	r0, r3
 8002312:	f7fe fc53 	bl	8000bbc <_ZNSt14_Function_baseC1Ev>
	__x.swap(*this);
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	6838      	ldr	r0, [r7, #0]
 800231a:	f000 f805 	bl	8002328 <_ZNSt8functionIFvvEE4swapERS1_>
      }
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4618      	mov	r0, r3
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <_ZNSt8functionIFvvEE4swapERS1_>:
      void swap(function& __x) noexcept
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	4611      	mov	r1, r2
 8002338:	4618      	mov	r0, r3
 800233a:	f000 f9f5 	bl	8002728 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f103 0208 	add.w	r2, r3, #8
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	3308      	adds	r3, #8
 8002348:	4619      	mov	r1, r3
 800234a:	4610      	mov	r0, r2
 800234c:	f000 fa1e 	bl	800278c <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f103 020c 	add.w	r2, r3, #12
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	330c      	adds	r3, #12
 800235a:	4619      	mov	r1, r3
 800235c:	4610      	mov	r0, r2
 800235e:	f000 fbec 	bl	8002b3a <_ZSt4swapIPFvRKSt9_Any_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>
      }
 8002362:	bf00      	nop
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <_ZNSt14__array_traitsIsLj3EE6_S_ptrERA3_Ks>:
      _S_ptr(const _Type& __t) noexcept
 800236a:	b480      	push	{r7}
 800236c:	b083      	sub	sp, #12
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4618      	mov	r0, r3
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <_ZNSt14__array_traitsIsLj3EE6_S_refERA3_Ksj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	4413      	add	r3, r2
 8002392:	4618      	mov	r0, r3
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <_ZNSt14__array_traitsIhLj4EE6_S_ptrERA4_Kh>:
      _S_ptr(const _Type& __t) noexcept
 800239e:	b480      	push	{r7}
 80023a0:	b083      	sub	sp, #12
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4618      	mov	r0, r3
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <_ZNSt14__array_traitsIhLj4EE6_S_refERA4_Khj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	4413      	add	r3, r2
 80023c4:	4618      	mov	r0, r3
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <_ZNSt14_Function_base13_Base_managerIZ7cppmainEUlvE_E21_M_not_empty_functionIS1_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
	  { return true; }
 80023d8:	2301      	movs	r3, #1
 80023da:	4618      	mov	r0, r3
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr

080023e6 <_ZSt4moveIRZ7cppmainEUlvE_EONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 80023e6:	b480      	push	{r7}
 80023e8:	b083      	sub	sp, #12
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4618      	mov	r0, r3
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <_ZNSt14_Function_base13_Base_managerIZ7cppmainEUlvE_E15_M_init_functorERSt9_Any_dataOS1_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 80023fc:	b590      	push	{r4, r7, lr}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8002406:	6838      	ldr	r0, [r7, #0]
 8002408:	f7ff ffed 	bl	80023e6 <_ZSt4moveIRZ7cppmainEUlvE_EONSt16remove_referenceIT_E4typeEOS3_>
 800240c:	4603      	mov	r3, r0
 800240e:	4622      	mov	r2, r4
 8002410:	4619      	mov	r1, r3
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 fbb0 	bl	8002b78 <_ZNSt14_Function_base13_Base_managerIZ7cppmainEUlvE_E15_M_init_functorERSt9_Any_dataOS1_St17integral_constantIbLb0EE>
 8002418:	bf00      	nop
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	bd90      	pop	{r4, r7, pc}

08002420 <_ZNSt17_Function_handlerIFvvEZ7cppmainEUlvE_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f000 fbc2 	bl	8002bb2 <_ZNSt14_Function_base13_Base_managerIZ7cppmainEUlvE_E14_M_get_pointerERKSt9_Any_data>
 800242e:	4603      	mov	r3, r0
 8002430:	4618      	mov	r0, r3
 8002432:	f000 fbcb 	bl	8002bcc <_ZSt10__invoke_rIvRZ7cppmainEUlvE_JEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES5_E4typeEOS8_DpOS9_>
				     std::forward<_ArgTypes>(__args)...);
 8002436:	bf00      	nop
      }
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <_ZNSt17_Function_handlerIFvvEZ7cppmainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800243e:	b590      	push	{r4, r7, lr}
 8002440:	b085      	sub	sp, #20
 8002442:	af00      	add	r7, sp, #0
 8002444:	60f8      	str	r0, [r7, #12]
 8002446:	60b9      	str	r1, [r7, #8]
 8002448:	4613      	mov	r3, r2
 800244a:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800244c:	79fb      	ldrb	r3, [r7, #7]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d109      	bne.n	8002466 <_ZNSt17_Function_handlerIFvvEZ7cppmainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8002452:	68f8      	ldr	r0, [r7, #12]
 8002454:	f000 fbca 	bl	8002bec <_ZNSt9_Any_data9_M_accessIPZ7cppmainEUlvE_EERT_v>
 8002458:	4604      	mov	r4, r0
 800245a:	68b8      	ldr	r0, [r7, #8]
 800245c:	f000 fba9 	bl	8002bb2 <_ZNSt14_Function_base13_Base_managerIZ7cppmainEUlvE_E14_M_get_pointerERKSt9_Any_data>
 8002460:	4603      	mov	r3, r0
 8002462:	6023      	str	r3, [r4, #0]
	    break;
 8002464:	e005      	b.n	8002472 <_ZNSt17_Function_handlerIFvvEZ7cppmainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8002466:	79fb      	ldrb	r3, [r7, #7]
 8002468:	461a      	mov	r2, r3
 800246a:	68b9      	ldr	r1, [r7, #8]
 800246c:	68f8      	ldr	r0, [r7, #12]
 800246e:	f000 fbc9 	bl	8002c04 <_ZNSt14_Function_base13_Base_managerIZ7cppmainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>
	return false;
 8002472:	2300      	movs	r3, #0
      }
 8002474:	4618      	mov	r0, r3
 8002476:	3714      	adds	r7, #20
 8002478:	46bd      	mov	sp, r7
 800247a:	bd90      	pop	{r4, r7, pc}

0800247c <_ZNSt6vectorIhSaIhEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8002484:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8002488:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 fbe5 	bl	8002c5a <_ZNSt16allocator_traitsISaIhEE8max_sizeERKS0_>
 8002490:	4603      	mov	r3, r0
 8002492:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8002494:	f107 0208 	add.w	r2, r7, #8
 8002498:	f107 030c 	add.w	r3, r7, #12
 800249c:	4611      	mov	r1, r2
 800249e:	4618      	mov	r0, r3
 80024a0:	f7fe fbdb 	bl	8000c5a <_ZSt3minIjERKT_S2_S2_>
 80024a4:	4603      	mov	r3, r0
 80024a6:	681b      	ldr	r3, [r3, #0]
      }
 80024a8:	4618      	mov	r0, r3
 80024aa:	3710      	adds	r7, #16
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <_ZNSaIhEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80024ba:	6839      	ldr	r1, [r7, #0]
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f000 fbd8 	bl	8002c72 <_ZN9__gnu_cxx13new_allocatorIhEC1ERKS1_>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4618      	mov	r0, r3
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 80024d6:	6839      	ldr	r1, [r7, #0]
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f7ff ffe9 	bl	80024b0 <_ZNSaIhEC1ERKS_>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f000 fbd2 	bl	8002c8a <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>
	{ }
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4618      	mov	r0, r3
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <_ZNSt12_Vector_baseIhSaIhEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 80024fa:	6839      	ldr	r1, [r7, #0]
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f000 fbd8 	bl	8002cb2 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 8002502:	4602      	mov	r2, r0
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	441a      	add	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	609a      	str	r2, [r3, #8]
      }
 800251c:	bf00      	nop
 800251e:	3708      	adds	r7, #8
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <_ZSt27__uninitialized_default_n_aIPhjhET_S1_T0_RSaIT1_E>:
	}
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline _ForwardIterator
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n, 
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
				allocator<_Tp>&)
    { return std::__uninitialized_default_n(__first, __n); }
 8002530:	68b9      	ldr	r1, [r7, #8]
 8002532:	68f8      	ldr	r0, [r7, #12]
 8002534:	f000 fbd1 	bl	8002cda <_ZSt25__uninitialized_default_nIPhjET_S1_T0_>
 8002538:	4603      	mov	r3, r0
 800253a:	4618      	mov	r0, r3
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <_ZNKSt8__detail15_Hash_code_baseIP19FDCAN_HandleTypeDefSt4pairIKS2_St8functionIFvmPhjEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS4_>:
		      const _H1& __h1, const _H2& __h2,
		      const _Default_ranged_hash&)
      : __ebo_extract_key(__ex), __ebo_h1(__h1), __ebo_h2(__h2) { }

      __hash_code
      _M_hash_code(const _Key& __k) const
 8002542:	b580      	push	{r7, lr}
 8002544:	b082      	sub	sp, #8
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
 800254a:	6039      	str	r1, [r7, #0]
      {
	static_assert(__is_invocable<const _H1&, const _Key&>{},
	    "hash function must be invocable with an argument of key type");
	return _M_h1()(__k);
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f000 fbd4 	bl	8002cfa <_ZNKSt8__detail15_Hash_code_baseIP19FDCAN_HandleTypeDefSt4pairIKS2_St8functionIFvmPhjEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE5_M_h1Ev>
 8002552:	4602      	mov	r2, r0
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4619      	mov	r1, r3
 800255a:	4610      	mov	r0, r2
 800255c:	f000 fbd9 	bl	8002d12 <_ZNKSt4hashIP19FDCAN_HandleTypeDefEclES1_>
 8002560:	4603      	mov	r3, r0
      }
 8002562:	4618      	mov	r0, r3
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <_ZNKSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERS3_j>:
      size_type
      _M_bucket_index(__node_type* __n) const noexcept
      { return __hash_code_base::_M_bucket_index(__n, _M_bucket_count); }

      size_type
      _M_bucket_index(const key_type& __k, __hash_code __c) const
 800256a:	b580      	push	{r7, lr}
 800256c:	b084      	sub	sp, #16
 800256e:	af00      	add	r7, sp, #0
 8002570:	60f8      	str	r0, [r7, #12]
 8002572:	60b9      	str	r1, [r7, #8]
 8002574:	607a      	str	r2, [r7, #4]
      { return __hash_code_base::_M_bucket_index(__k, __c, _M_bucket_count); }
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	68b9      	ldr	r1, [r7, #8]
 800257e:	68f8      	ldr	r0, [r7, #12]
 8002580:	f000 fbd3 	bl	8002d2a <_ZNKSt8__detail15_Hash_code_baseIP19FDCAN_HandleTypeDefSt4pairIKS2_St8functionIFvmPhjEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexERS4_jj>
 8002584:	4603      	mov	r3, r0
 8002586:	4618      	mov	r0, r3
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <_ZNKSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS3_j>:
      // Find the node before the one matching the criteria.
      __node_base*
      _M_find_before_node(size_type, const key_type&, __hash_code) const;

      __node_type*
      _M_find_node(size_type __bkt, const key_type& __key,
 800258e:	b580      	push	{r7, lr}
 8002590:	b086      	sub	sp, #24
 8002592:	af00      	add	r7, sp, #0
 8002594:	60f8      	str	r0, [r7, #12]
 8002596:	60b9      	str	r1, [r7, #8]
 8002598:	607a      	str	r2, [r7, #4]
 800259a:	603b      	str	r3, [r7, #0]
		   __hash_code __c) const
      {
	__node_base* __before_n = _M_find_before_node(__bkt, __key, __c);
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	68b9      	ldr	r1, [r7, #8]
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f000 fbd6 	bl	8002d54 <_ZNKSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j>
 80025a8:	6178      	str	r0, [r7, #20]
	if (__before_n)
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d002      	beq.n	80025b6 <_ZNKSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS3_j+0x28>
	  return static_cast<__node_type*>(__before_n->_M_nxt);
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	e000      	b.n	80025b8 <_ZNKSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS3_j+0x2a>
	return nullptr;
 80025b6:	2300      	movs	r3, #0
      }
 80025b8:	4618      	mov	r0, r3
 80025ba:	3718      	adds	r7, #24
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEE4_M_vEv>:
      _M_v() noexcept
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
      { return *_M_valptr(); }
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f000 fc06 	bl	8002dda <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEE9_M_valptrEv>
 80025ce:	4603      	mov	r3, r0
 80025d0:	4618      	mov	r0, r3
 80025d2:	3708      	adds	r7, #8
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <_ZNSt5tupleIJRKP19FDCAN_HandleTypeDefEEC1ILb1ELb1EEES3_>:
	: _Inherited() { }

      template<bool _NotEmpty = (sizeof...(_Elements) >= 1),
	       _ImplicitCtor<_NotEmpty, const _Elements&...> = true>
	constexpr
	tuple(const _Elements&... __elements)
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
	noexcept(__nothrow_constructible<const _Elements&...>())
	: _Inherited(__elements...) { }
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6839      	ldr	r1, [r7, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f000 fc05 	bl	8002df6 <_ZNSt11_Tuple_implILj0EJRKP19FDCAN_HandleTypeDefEEC1ES3_>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4618      	mov	r0, r3
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJRS3_EESR_IJEEEEEPNSA_16_Hashtable_allocISaINSA_10_Hash_nodeIS8_Lb0EEEEEEDpOT_>:
	  _Scoped_node(__hashtable_alloc* __h, _Args&&... __args)
 80025f6:	b5b0      	push	{r4, r5, r7, lr}
 80025f8:	b084      	sub	sp, #16
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	60f8      	str	r0, [r7, #12]
 80025fe:	60b9      	str	r1, [r7, #8]
 8002600:	607a      	str	r2, [r7, #4]
 8002602:	603b      	str	r3, [r7, #0]
	    _M_node(__h->_M_allocate_node(std::forward<_Args>(__args)...))
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	68ba      	ldr	r2, [r7, #8]
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 fc02 	bl	8002e14 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8002610:	4604      	mov	r4, r0
 8002612:	6838      	ldr	r0, [r7, #0]
 8002614:	f000 fc09 	bl	8002e2a <_ZSt7forwardISt5tupleIJRKP19FDCAN_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8002618:	4605      	mov	r5, r0
 800261a:	6a38      	ldr	r0, [r7, #32]
 800261c:	f000 fc10 	bl	8002e40 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8002620:	4603      	mov	r3, r0
 8002622:	462a      	mov	r2, r5
 8002624:	4621      	mov	r1, r4
 8002626:	68b8      	ldr	r0, [r7, #8]
 8002628:	f000 fc2f 	bl	8002e8a <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEE16_M_allocate_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS5_EESI_IJEEEEEPSB_DpOT_>
 800262c:	4602      	mov	r2, r0
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	605a      	str	r2, [r3, #4]
	  { }
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	4618      	mov	r0, r3
 8002636:	3710      	adds	r7, #16
 8002638:	46bd      	mov	sp, r7
 800263a:	bdb0      	pop	{r4, r5, r7, pc}

0800263c <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeD1Ev>:
	~_Scoped_node() { if (_M_node) _M_h->_M_deallocate_node(_M_node); };
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d007      	beq.n	800265c <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeD1Ev+0x20>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	4619      	mov	r1, r3
 8002656:	4610      	mov	r0, r2
 8002658:	f000 fc57 	bl	8002f0a <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEE18_M_deallocate_nodeEPSB_>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4618      	mov	r0, r3
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_insert_unique_nodeERS3_jjPNSA_10_Hash_nodeIS8_Lb0EEEj>:
  template<typename _Key, typename _Value,
	   typename _Alloc, typename _ExtractKey, typename _Equal,
	   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
	   typename _Traits>
    auto
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8002666:	b590      	push	{r4, r7, lr}
 8002668:	b08d      	sub	sp, #52	; 0x34
 800266a:	af02      	add	r7, sp, #8
 800266c:	60f8      	str	r0, [r7, #12]
 800266e:	60b9      	str	r1, [r7, #8]
 8002670:	607a      	str	r2, [r7, #4]
 8002672:	603b      	str	r3, [r7, #0]
    _M_insert_unique_node(const key_type& __k, size_type __bkt,
			  __hash_code __code, __node_type* __node,
			  size_type __n_elt)
    -> iterator
    {
      const __rehash_state& __saved_state = _M_rehash_policy._M_state();
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	3310      	adds	r3, #16
 8002678:	4618      	mov	r0, r3
 800267a:	f7fe fae2 	bl	8000c42 <_ZNKSt8__detail20_Prime_rehash_policy8_M_stateEv>
 800267e:	4603      	mov	r3, r0
 8002680:	61fb      	str	r3, [r7, #28]
 8002682:	f107 031c 	add.w	r3, r7, #28
 8002686:	627b      	str	r3, [r7, #36]	; 0x24
      std::pair<bool, std::size_t> __do_rehash
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count,
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f103 0110 	add.w	r1, r3, #16
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	685a      	ldr	r2, [r3, #4]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	68dc      	ldr	r4, [r3, #12]
 8002696:	f107 0014 	add.w	r0, r7, #20
 800269a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800269c:	9300      	str	r3, [sp, #0]
 800269e:	4623      	mov	r3, r4
 80026a0:	f00e fc06 	bl	8010eb0 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj>
					  __n_elt);

      if (__do_rehash.first)
 80026a4:	7d3b      	ldrb	r3, [r7, #20]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00b      	beq.n	80026c2 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_insert_unique_nodeERS3_jjPNSA_10_Hash_nodeIS8_Lb0EEEj+0x5c>
	{
	  _M_rehash(__do_rehash.second, __saved_state);
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ae:	4619      	mov	r1, r3
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	f000 fc44 	bl	8002f3e <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_rehashEjRKj>
	  __bkt = _M_bucket_index(__k, __code);
 80026b6:	683a      	ldr	r2, [r7, #0]
 80026b8:	68b9      	ldr	r1, [r7, #8]
 80026ba:	68f8      	ldr	r0, [r7, #12]
 80026bc:	f7ff ff55 	bl	800256a <_ZNKSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERS3_j>
 80026c0:	6078      	str	r0, [r7, #4]
	}

      this->_M_store_code(__node, __code);
 80026c2:	683a      	ldr	r2, [r7, #0]
 80026c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80026c6:	68f8      	ldr	r0, [r7, #12]
 80026c8:	f000 fc48 	bl	8002f5c <_ZNKSt8__detail15_Hash_code_baseIP19FDCAN_HandleTypeDefSt4pairIKS2_St8functionIFvmPhjEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE13_M_store_codeEPNS_10_Hash_nodeIS9_Lb0EEEj>

      // Always insert at the beginning of the bucket.
      _M_insert_bucket_begin(__bkt, __node);
 80026cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	68f8      	ldr	r0, [r7, #12]
 80026d2:	f000 fc4f 	bl	8002f74 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNSA_10_Hash_nodeIS8_Lb0EEE>
      ++_M_element_count;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	1c5a      	adds	r2, r3, #1
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	60da      	str	r2, [r3, #12]
      return iterator(__node);
 80026e0:	f107 0320 	add.w	r3, r7, #32
 80026e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80026e6:	4618      	mov	r0, r3
 80026e8:	f000 fc8a 	bl	8003000 <_ZNSt8__detail14_Node_iteratorISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0ELb0EEC1EPNS_10_Hash_nodeIS9_Lb0EEE>
 80026ec:	6a3b      	ldr	r3, [r7, #32]
    }
 80026ee:	4618      	mov	r0, r3
 80026f0:	372c      	adds	r7, #44	; 0x2c
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd90      	pop	{r4, r7, pc}

080026f6 <_ZNKSt8__detail14_Node_iteratorISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0ELb0EEptEv>:
      operator->() const noexcept
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b082      	sub	sp, #8
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
      { return this->_M_cur->_M_valptr(); }
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f000 fb69 	bl	8002dda <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEE9_M_valptrEv>
 8002708:	4603      	mov	r3, r0
 800270a:	4618      	mov	r0, r3
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8002712:	b480      	push	{r7}
 8002714:	b083      	sub	sp, #12
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4618      	mov	r0, r3
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f7ff ffed 	bl	8002712 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8002738:	4602      	mov	r2, r0
 800273a:	f107 0308 	add.w	r3, r7, #8
 800273e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002742:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8002746:	6838      	ldr	r0, [r7, #0]
 8002748:	f7ff ffe3 	bl	8002712 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800274c:	4602      	mov	r2, r0
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002754:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8002758:	f107 0308 	add.w	r3, r7, #8
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff ffd8 	bl	8002712 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8002762:	4602      	mov	r2, r0
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	e892 0003 	ldmia.w	r2, {r0, r1}
 800276a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800276e:	bf00      	nop
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8002776:	b480      	push	{r7}
 8002778:	b083      	sub	sp, #12
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4618      	mov	r0, r3
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f7ff ffed 	bl	8002776 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800279c:	4603      	mov	r3, r0
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80027a2:	6838      	ldr	r0, [r7, #0]
 80027a4:	f7ff ffe7 	bl	8002776 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80027a8:	4603      	mov	r3, r0
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80027b0:	f107 030c 	add.w	r3, r7, #12
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff ffde 	bl	8002776 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80027ba:	4603      	mov	r3, r0
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	601a      	str	r2, [r3, #0]
    }
 80027c2:	bf00      	nop
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <_ZSt4moveIRPFvRKSt9_Any_dataOmOPhOjEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 80027ca:	b480      	push	{r7}
 80027cc:	b083      	sub	sp, #12
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4618      	mov	r0, r3
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <_ZSt4swapIPFvRKSt9_Any_dataOmOPhOjEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISD_ESt18is_move_assignableISD_EEE5valueEvE4typeERSD_SN_>:
    swap(_Tp& __a, _Tp& __b)
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f7ff ffed 	bl	80027ca <_ZSt4moveIRPFvRKSt9_Any_dataOmOPhOjEEONSt16remove_referenceIT_E4typeEOSB_>
 80027f0:	4603      	mov	r3, r0
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80027f6:	6838      	ldr	r0, [r7, #0]
 80027f8:	f7ff ffe7 	bl	80027ca <_ZSt4moveIRPFvRKSt9_Any_dataOmOPhOjEEONSt16remove_referenceIT_E4typeEOSB_>
 80027fc:	4603      	mov	r3, r0
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8002804:	f107 030c 	add.w	r3, r7, #12
 8002808:	4618      	mov	r0, r3
 800280a:	f7ff ffde 	bl	80027ca <_ZSt4moveIRPFvRKSt9_Any_dataOmOPhOjEEONSt16remove_referenceIT_E4typeEOSB_>
 800280e:	4603      	mov	r3, r0
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	601a      	str	r2, [r3, #0]
    }
 8002816:	bf00      	nop
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <_ZNSt14_Function_base13_Base_managerIZN18tutrc_harurobo_lib4C610C4ERNS1_3CANEEUlmPhjE_E15_M_init_functorERSt9_Any_dataOS6_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 800281e:	b590      	push	{r4, r7, lr}
 8002820:	b085      	sub	sp, #20
 8002822:	af00      	add	r7, sp, #0
 8002824:	60f8      	str	r0, [r7, #12]
 8002826:	60b9      	str	r1, [r7, #8]
 8002828:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 800282a:	68b8      	ldr	r0, [r7, #8]
 800282c:	f7ff fcb7 	bl	800219e <_ZSt4moveIRZN18tutrc_harurobo_lib4C610C4ERNS0_3CANEEUlmPhjE_EONSt16remove_referenceIT_E4typeEOS8_>
 8002830:	4604      	mov	r4, r0
 8002832:	68f8      	ldr	r0, [r7, #12]
 8002834:	f7fe f9ac 	bl	8000b90 <_ZNSt9_Any_data9_M_accessEv>
 8002838:	4603      	mov	r3, r0
 800283a:	4619      	mov	r1, r3
 800283c:	2004      	movs	r0, #4
 800283e:	f7fe f842 	bl	80008c6 <_ZnwjPv>
 8002842:	4602      	mov	r2, r0
 8002844:	6823      	ldr	r3, [r4, #0]
 8002846:	6013      	str	r3, [r2, #0]
 8002848:	bf00      	nop
 800284a:	3714      	adds	r7, #20
 800284c:	46bd      	mov	sp, r7
 800284e:	bd90      	pop	{r4, r7, pc}

08002850 <_ZNSt14_Function_base13_Base_managerIZN18tutrc_harurobo_lib4C610C4ERNS1_3CANEEUlmPhjE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f000 fbe0 	bl	800301e <_ZNKSt9_Any_data9_M_accessIZN18tutrc_harurobo_lib4C610C4ERNS1_3CANEEUlmPhjE_EERKT_v>
 800285e:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8002860:	68f8      	ldr	r0, [r7, #12]
 8002862:	f000 fbe8 	bl	8003036 <_ZSt11__addressofIKZN18tutrc_harurobo_lib4C610C4ERNS0_3CANEEUlmPhjE_EPT_RS7_>
 8002866:	4603      	mov	r3, r0
 8002868:	bf00      	nop
	}
 800286a:	4618      	mov	r0, r3
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002872:	b480      	push	{r7}
 8002874:	b083      	sub	sp, #12
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4618      	mov	r0, r3
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4618      	mov	r0, r3
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr

0800289e <_ZSt10__invoke_rIvRZN18tutrc_harurobo_lib4C610C4ERNS0_3CANEEUlmPhjE_JmS4_jEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueESA_E4typeEOSD_DpOSE_>:
    }

  // INVOKE<R> when R is cv void
  template<typename _Res, typename _Callable, typename... _Args>
    _GLIBCXX14_CONSTEXPR __can_invoke_as_void<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 800289e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af02      	add	r7, sp, #8
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	607a      	str	r2, [r7, #4]
 80028ac:	603b      	str	r3, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	f000 fbcc 	bl	800304c <_ZSt7forwardIRZN18tutrc_harurobo_lib4C610C4ERNS0_3CANEEUlmPhjE_EOT_RNSt16remove_referenceIS7_E4typeE>
 80028b4:	4604      	mov	r4, r0
 80028b6:	68b8      	ldr	r0, [r7, #8]
 80028b8:	f7ff ffdb 	bl	8002872 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 80028bc:	4605      	mov	r5, r0
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f7ff ffe2 	bl	8002888 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 80028c4:	4606      	mov	r6, r0
 80028c6:	6838      	ldr	r0, [r7, #0]
 80028c8:	f7ff fb93 	bl	8001ff2 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80028cc:	4603      	mov	r3, r0
 80028ce:	9300      	str	r3, [sp, #0]
 80028d0:	4633      	mov	r3, r6
 80028d2:	462a      	mov	r2, r5
 80028d4:	4621      	mov	r1, r4
 80028d6:	4640      	mov	r0, r8
 80028d8:	f000 fbc3 	bl	8003062 <_ZSt13__invoke_implIvRZN18tutrc_harurobo_lib4C610C4ERNS0_3CANEEUlmPhjE_JmS4_jEET_St14__invoke_otherOT0_DpOT1_>
				 std::forward<_Args>(__args)...);
    }
 80028dc:	bf00      	nop
 80028de:	3710      	adds	r7, #16
 80028e0:	46bd      	mov	sp, r7
 80028e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080028e6 <_ZNSt9_Any_data9_M_accessIPZN18tutrc_harurobo_lib4C610C4ERNS1_3CANEEUlmPhjE_EERT_v>:
      _M_access()
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b082      	sub	sp, #8
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7fe f94e 	bl	8000b90 <_ZNSt9_Any_data9_M_accessEv>
 80028f4:	4603      	mov	r3, r0
 80028f6:	4618      	mov	r0, r3
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <_ZNSt14_Function_base13_Base_managerIZN18tutrc_harurobo_lib4C610C4ERNS1_3CANEEUlmPhjE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80028fe:	b5b0      	push	{r4, r5, r7, lr}
 8002900:	b084      	sub	sp, #16
 8002902:	af00      	add	r7, sp, #0
 8002904:	60f8      	str	r0, [r7, #12]
 8002906:	60b9      	str	r1, [r7, #8]
 8002908:	4613      	mov	r3, r2
 800290a:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800290c:	79fb      	ldrb	r3, [r7, #7]
 800290e:	2b03      	cmp	r3, #3
 8002910:	d016      	beq.n	8002940 <_ZNSt14_Function_base13_Base_managerIZN18tutrc_harurobo_lib4C610C4ERNS1_3CANEEUlmPhjE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x42>
 8002912:	2b03      	cmp	r3, #3
 8002914:	dc19      	bgt.n	800294a <_ZNSt14_Function_base13_Base_managerIZN18tutrc_harurobo_lib4C610C4ERNS1_3CANEEUlmPhjE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x4c>
 8002916:	2b01      	cmp	r3, #1
 8002918:	d002      	beq.n	8002920 <_ZNSt14_Function_base13_Base_managerIZN18tutrc_harurobo_lib4C610C4ERNS1_3CANEEUlmPhjE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x22>
 800291a:	2b02      	cmp	r3, #2
 800291c:	d00a      	beq.n	8002934 <_ZNSt14_Function_base13_Base_managerIZN18tutrc_harurobo_lib4C610C4ERNS1_3CANEEUlmPhjE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x36>
 800291e:	e014      	b.n	800294a <_ZNSt14_Function_base13_Base_managerIZN18tutrc_harurobo_lib4C610C4ERNS1_3CANEEUlmPhjE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8002920:	68f8      	ldr	r0, [r7, #12]
 8002922:	f7ff ffe0 	bl	80028e6 <_ZNSt9_Any_data9_M_accessIPZN18tutrc_harurobo_lib4C610C4ERNS1_3CANEEUlmPhjE_EERT_v>
 8002926:	4604      	mov	r4, r0
 8002928:	68b8      	ldr	r0, [r7, #8]
 800292a:	f7ff ff91 	bl	8002850 <_ZNSt14_Function_base13_Base_managerIZN18tutrc_harurobo_lib4C610C4ERNS1_3CANEEUlmPhjE_E14_M_get_pointerERKSt9_Any_data>
 800292e:	4603      	mov	r3, r0
 8002930:	6023      	str	r3, [r4, #0]
	      break;
 8002932:	e00a      	b.n	800294a <_ZNSt14_Function_base13_Base_managerIZN18tutrc_harurobo_lib4C610C4ERNS1_3CANEEUlmPhjE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8002934:	462a      	mov	r2, r5
 8002936:	68b9      	ldr	r1, [r7, #8]
 8002938:	68f8      	ldr	r0, [r7, #12]
 800293a:	f000 fbb5 	bl	80030a8 <_ZNSt14_Function_base13_Base_managerIZN18tutrc_harurobo_lib4C610C4ERNS1_3CANEEUlmPhjE_E8_M_cloneERSt9_Any_dataRKS8_St17integral_constantIbLb1EE>
	      break;
 800293e:	e004      	b.n	800294a <_ZNSt14_Function_base13_Base_managerIZN18tutrc_harurobo_lib4C610C4ERNS1_3CANEEUlmPhjE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8002940:	4621      	mov	r1, r4
 8002942:	68f8      	ldr	r0, [r7, #12]
 8002944:	f000 fbc9 	bl	80030da <_ZNSt14_Function_base13_Base_managerIZN18tutrc_harurobo_lib4C610C4ERNS1_3CANEEUlmPhjE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8002948:	bf00      	nop
	  return false;
 800294a:	2300      	movs	r3, #0
	}
 800294c:	4618      	mov	r0, r3
 800294e:	3710      	adds	r7, #16
 8002950:	46bd      	mov	sp, r7
 8002952:	bdb0      	pop	{r4, r5, r7, pc}

08002954 <_ZNKSt8__detail15_Hash_code_baseIP17TIM_HandleTypeDefSt4pairIKS2_St8functionIFvvEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS4_>:
      _M_hash_code(const _Key& __k) const
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
	return _M_h1()(__k);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 fbc7 	bl	80030f2 <_ZNKSt8__detail15_Hash_code_baseIP17TIM_HandleTypeDefSt4pairIKS2_St8functionIFvvEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE5_M_h1Ev>
 8002964:	4602      	mov	r2, r0
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4619      	mov	r1, r3
 800296c:	4610      	mov	r0, r2
 800296e:	f000 fbcc 	bl	800310a <_ZNKSt4hashIP17TIM_HandleTypeDefEclES1_>
 8002972:	4603      	mov	r3, r0
      }
 8002974:	4618      	mov	r0, r3
 8002976:	3708      	adds	r7, #8
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <_ZNKSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERS3_j>:
      _M_bucket_index(const key_type& __k, __hash_code __c) const
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
      { return __hash_code_base::_M_bucket_index(__k, __c, _M_bucket_count); }
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	68b9      	ldr	r1, [r7, #8]
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	f000 fbc6 	bl	8003122 <_ZNKSt8__detail15_Hash_code_baseIP17TIM_HandleTypeDefSt4pairIKS2_St8functionIFvvEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexERS4_jj>
 8002996:	4603      	mov	r3, r0
 8002998:	4618      	mov	r0, r3
 800299a:	3710      	adds	r7, #16
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <_ZNKSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS3_j>:
      _M_find_node(size_type __bkt, const key_type& __key,
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b086      	sub	sp, #24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
 80029ac:	603b      	str	r3, [r7, #0]
	__node_base* __before_n = _M_find_before_node(__bkt, __key, __c);
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	68b9      	ldr	r1, [r7, #8]
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f000 fbc9 	bl	800314c <_ZNKSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j>
 80029ba:	6178      	str	r0, [r7, #20]
	if (__before_n)
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d002      	beq.n	80029c8 <_ZNKSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS3_j+0x28>
	  return static_cast<__node_type*>(__before_n->_M_nxt);
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	e000      	b.n	80029ca <_ZNKSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS3_j+0x2a>
	return nullptr;
 80029c8:	2300      	movs	r3, #0
      }
 80029ca:	4618      	mov	r0, r3
 80029cc:	3718      	adds	r7, #24
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEEE4_M_vEv>:
      _M_v() noexcept
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b082      	sub	sp, #8
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
      { return *_M_valptr(); }
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f000 fbf9 	bl	80031d2 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEEE9_M_valptrEv>
 80029e0:	4603      	mov	r3, r0
 80029e2:	4618      	mov	r0, r3
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <_ZNSt5tupleIJRKP17TIM_HandleTypeDefEEC1ILb1ELb1EEES3_>:
	tuple(const _Elements&... __elements)
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b082      	sub	sp, #8
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
 80029f2:	6039      	str	r1, [r7, #0]
	: _Inherited(__elements...) { }
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6839      	ldr	r1, [r7, #0]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f000 fbf8 	bl	80031ee <_ZNSt11_Tuple_implILj0EJRKP17TIM_HandleTypeDefEEC1ES3_>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4618      	mov	r0, r3
 8002a02:	3708      	adds	r7, #8
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJRS3_EESQ_IJEEEEEPNS9_16_Hashtable_allocISaINS9_10_Hash_nodeIS7_Lb0EEEEEEDpOT_>:
	  _Scoped_node(__hashtable_alloc* __h, _Args&&... __args)
 8002a08:	b5b0      	push	{r4, r5, r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
 8002a14:	603b      	str	r3, [r7, #0]
	    _M_node(__h->_M_allocate_node(std::forward<_Args>(__args)...))
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	68ba      	ldr	r2, [r7, #8]
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f000 f9f9 	bl	8002e14 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8002a22:	4604      	mov	r4, r0
 8002a24:	6838      	ldr	r0, [r7, #0]
 8002a26:	f000 fbf1 	bl	800320c <_ZSt7forwardISt5tupleIJRKP17TIM_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8002a2a:	4605      	mov	r5, r0
 8002a2c:	6a38      	ldr	r0, [r7, #32]
 8002a2e:	f000 fa07 	bl	8002e40 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8002a32:	4603      	mov	r3, r0
 8002a34:	462a      	mov	r2, r5
 8002a36:	4621      	mov	r1, r4
 8002a38:	68b8      	ldr	r0, [r7, #8]
 8002a3a:	f000 fc0c 	bl	8003256 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEE16_M_allocate_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS5_EESH_IJEEEEEPSA_DpOT_>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	605a      	str	r2, [r3, #4]
	  { }
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	4618      	mov	r0, r3
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bdb0      	pop	{r4, r5, r7, pc}

08002a4e <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeD1Ev>:
	~_Scoped_node() { if (_M_node) _M_h->_M_deallocate_node(_M_node); };
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b082      	sub	sp, #8
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d007      	beq.n	8002a6e <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeD1Ev+0x20>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	4619      	mov	r1, r3
 8002a68:	4610      	mov	r0, r2
 8002a6a:	f000 fc34 	bl	80032d6 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEE18_M_deallocate_nodeEPSA_>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4618      	mov	r0, r3
 8002a72:	3708      	adds	r7, #8
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_insert_unique_nodeERS3_jjPNS9_10_Hash_nodeIS7_Lb0EEEj>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8002a78:	b590      	push	{r4, r7, lr}
 8002a7a:	b08d      	sub	sp, #52	; 0x34
 8002a7c:	af02      	add	r7, sp, #8
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
 8002a84:	603b      	str	r3, [r7, #0]
      const __rehash_state& __saved_state = _M_rehash_policy._M_state();
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	3310      	adds	r3, #16
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7fe f8d9 	bl	8000c42 <_ZNKSt8__detail20_Prime_rehash_policy8_M_stateEv>
 8002a90:	4603      	mov	r3, r0
 8002a92:	61fb      	str	r3, [r7, #28]
 8002a94:	f107 031c 	add.w	r3, r7, #28
 8002a98:	627b      	str	r3, [r7, #36]	; 0x24
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count,
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f103 0110 	add.w	r1, r3, #16
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	685a      	ldr	r2, [r3, #4]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	68dc      	ldr	r4, [r3, #12]
 8002aa8:	f107 0014 	add.w	r0, r7, #20
 8002aac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aae:	9300      	str	r3, [sp, #0]
 8002ab0:	4623      	mov	r3, r4
 8002ab2:	f00e f9fd 	bl	8010eb0 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj>
      if (__do_rehash.first)
 8002ab6:	7d3b      	ldrb	r3, [r7, #20]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d00b      	beq.n	8002ad4 <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_insert_unique_nodeERS3_jjPNS9_10_Hash_nodeIS7_Lb0EEEj+0x5c>
	  _M_rehash(__do_rehash.second, __saved_state);
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	68f8      	ldr	r0, [r7, #12]
 8002ac4:	f000 fc21 	bl	800330a <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_rehashEjRKj>
	  __bkt = _M_bucket_index(__k, __code);
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	68b9      	ldr	r1, [r7, #8]
 8002acc:	68f8      	ldr	r0, [r7, #12]
 8002ace:	f7ff ff55 	bl	800297c <_ZNKSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERS3_j>
 8002ad2:	6078      	str	r0, [r7, #4]
      this->_M_store_code(__node, __code);
 8002ad4:	683a      	ldr	r2, [r7, #0]
 8002ad6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f000 fc25 	bl	8003328 <_ZNKSt8__detail15_Hash_code_baseIP17TIM_HandleTypeDefSt4pairIKS2_St8functionIFvvEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE13_M_store_codeEPNS_10_Hash_nodeIS8_Lb0EEEj>
      _M_insert_bucket_begin(__bkt, __node);
 8002ade:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ae0:	6879      	ldr	r1, [r7, #4]
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f000 fc2c 	bl	8003340 <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS9_10_Hash_nodeIS7_Lb0EEE>
      ++_M_element_count;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	1c5a      	adds	r2, r3, #1
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	60da      	str	r2, [r3, #12]
      return iterator(__node);
 8002af2:	f107 0320 	add.w	r3, r7, #32
 8002af6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002af8:	4618      	mov	r0, r3
 8002afa:	f000 fc67 	bl	80033cc <_ZNSt8__detail14_Node_iteratorISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0ELb0EEC1EPNS_10_Hash_nodeIS8_Lb0EEE>
 8002afe:	6a3b      	ldr	r3, [r7, #32]
    }
 8002b00:	4618      	mov	r0, r3
 8002b02:	372c      	adds	r7, #44	; 0x2c
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd90      	pop	{r4, r7, pc}

08002b08 <_ZNKSt8__detail14_Node_iteratorISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0ELb0EEptEv>:
      operator->() const noexcept
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
      { return this->_M_cur->_M_valptr(); }
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f000 fb5c 	bl	80031d2 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEEE9_M_valptrEv>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3708      	adds	r7, #8
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr

08002b3a <_ZSt4swapIPFvRKSt9_Any_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>:
    swap(_Tp& __a, _Tp& __b)
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b084      	sub	sp, #16
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
 8002b42:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f7ff ffed 	bl	8002b24 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8002b50:	6838      	ldr	r0, [r7, #0]
 8002b52:	f7ff ffe7 	bl	8002b24 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8002b56:	4603      	mov	r3, r0
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8002b5e:	f107 030c 	add.w	r3, r7, #12
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7ff ffde 	bl	8002b24 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	601a      	str	r2, [r3, #0]
    }
 8002b70:	bf00      	nop
 8002b72:	3710      	adds	r7, #16
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <_ZNSt14_Function_base13_Base_managerIZ7cppmainEUlvE_E15_M_init_functorERSt9_Any_dataOS1_St17integral_constantIbLb0EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
 8002b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	713a      	strb	r2, [r7, #4]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8002b84:	68b8      	ldr	r0, [r7, #8]
 8002b86:	f7ff fc2e 	bl	80023e6 <_ZSt4moveIRZ7cppmainEUlvE_EONSt16remove_referenceIT_E4typeEOS3_>
 8002b8a:	4606      	mov	r6, r0
 8002b8c:	2010      	movs	r0, #16
 8002b8e:	f00e f929 	bl	8010de4 <_Znwj>
 8002b92:	4603      	mov	r3, r0
 8002b94:	461d      	mov	r5, r3
 8002b96:	462c      	mov	r4, r5
 8002b98:	4633      	mov	r3, r6
 8002b9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002ba0:	68f8      	ldr	r0, [r7, #12]
 8002ba2:	f000 f823 	bl	8002bec <_ZNSt9_Any_data9_M_accessIPZ7cppmainEUlvE_EERT_v>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	601d      	str	r5, [r3, #0]
 8002baa:	bf00      	nop
 8002bac:	3714      	adds	r7, #20
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002bb2 <_ZNSt14_Function_base13_Base_managerIZ7cppmainEUlvE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b082      	sub	sp, #8
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
	    return __source._M_access<_Functor*>();
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 fc15 	bl	80033ea <_ZNKSt9_Any_data9_M_accessIPZ7cppmainEUlvE_EERKT_v>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	681b      	ldr	r3, [r3, #0]
	}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3708      	adds	r7, #8
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <_ZSt10__invoke_rIvRZ7cppmainEUlvE_JEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES5_E4typeEOS8_DpOS9_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8002bcc:	b590      	push	{r4, r7, lr}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f000 fc14 	bl	8003402 <_ZSt7forwardIRZ7cppmainEUlvE_EOT_RNSt16remove_referenceIS2_E4typeE>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	4619      	mov	r1, r3
 8002bde:	4620      	mov	r0, r4
 8002be0:	f000 fc1a 	bl	8003418 <_ZSt13__invoke_implIvRZ7cppmainEUlvE_JEET_St14__invoke_otherOT0_DpOT1_>
    }
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd90      	pop	{r4, r7, pc}

08002bec <_ZNSt9_Any_data9_M_accessIPZ7cppmainEUlvE_EERT_v>:
      _M_access()
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f7fd ffcb 	bl	8000b90 <_ZNSt9_Any_data9_M_accessEv>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3708      	adds	r7, #8
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <_ZNSt14_Function_base13_Base_managerIZ7cppmainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8002c04:	b5b0      	push	{r4, r5, r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	4613      	mov	r3, r2
 8002c10:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8002c12:	79fb      	ldrb	r3, [r7, #7]
 8002c14:	2b03      	cmp	r3, #3
 8002c16:	d016      	beq.n	8002c46 <_ZNSt14_Function_base13_Base_managerIZ7cppmainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x42>
 8002c18:	2b03      	cmp	r3, #3
 8002c1a:	dc19      	bgt.n	8002c50 <_ZNSt14_Function_base13_Base_managerIZ7cppmainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x4c>
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d002      	beq.n	8002c26 <_ZNSt14_Function_base13_Base_managerIZ7cppmainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x22>
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d00a      	beq.n	8002c3a <_ZNSt14_Function_base13_Base_managerIZ7cppmainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x36>
 8002c24:	e014      	b.n	8002c50 <_ZNSt14_Function_base13_Base_managerIZ7cppmainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8002c26:	68f8      	ldr	r0, [r7, #12]
 8002c28:	f7ff ffe0 	bl	8002bec <_ZNSt9_Any_data9_M_accessIPZ7cppmainEUlvE_EERT_v>
 8002c2c:	4604      	mov	r4, r0
 8002c2e:	68b8      	ldr	r0, [r7, #8]
 8002c30:	f7ff ffbf 	bl	8002bb2 <_ZNSt14_Function_base13_Base_managerIZ7cppmainEUlvE_E14_M_get_pointerERKSt9_Any_data>
 8002c34:	4603      	mov	r3, r0
 8002c36:	6023      	str	r3, [r4, #0]
	      break;
 8002c38:	e00a      	b.n	8002c50 <_ZNSt14_Function_base13_Base_managerIZ7cppmainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8002c3a:	462a      	mov	r2, r5
 8002c3c:	68b9      	ldr	r1, [r7, #8]
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f000 fbfa 	bl	8003438 <_ZNSt14_Function_base13_Base_managerIZ7cppmainEUlvE_E8_M_cloneERSt9_Any_dataRKS3_St17integral_constantIbLb0EE>
	      break;
 8002c44:	e004      	b.n	8002c50 <_ZNSt14_Function_base13_Base_managerIZ7cppmainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8002c46:	4621      	mov	r1, r4
 8002c48:	68f8      	ldr	r0, [r7, #12]
 8002c4a:	f000 fc13 	bl	8003474 <_ZNSt14_Function_base13_Base_managerIZ7cppmainEUlvE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>
	      break;
 8002c4e:	bf00      	nop
	  return false;
 8002c50:	2300      	movs	r3, #0
	}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bdb0      	pop	{r4, r5, r7, pc}

08002c5a <_ZNSt16allocator_traitsISaIhEE8max_sizeERKS0_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static _GLIBCXX20_CONSTEXPR size_type
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b082      	sub	sp, #8
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
      {
#if __cplusplus <= 201703L
	return __a.max_size();
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 fc1a 	bl	800349c <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>
 8002c68:	4603      	mov	r3, r0
#else
	return size_t(-1) / sizeof(value_type);
#endif
      }
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <_ZN9__gnu_cxx13new_allocatorIhEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8002c72:	b480      	push	{r7}
 8002c74:	b083      	sub	sp, #12
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
 8002c7a:	6039      	str	r1, [r7, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr

08002c8a <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8002c8a:	b480      	push	{r7}
 8002c8c:	b083      	sub	sp, #12
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	605a      	str	r2, [r3, #4]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	609a      	str	r2, [r3, #8]
	{ }
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr

08002cb2 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b082      	sub	sp, #8
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
 8002cba:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d006      	beq.n	8002cd0 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x1e>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6839      	ldr	r1, [r7, #0]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f000 fbf4 	bl	80034b4 <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	e000      	b.n	8002cd2 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x20>
 8002cd0:	2300      	movs	r3, #0
      }
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <_ZSt25__uninitialized_default_nIPhjET_S1_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b084      	sub	sp, #16
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
 8002ce2:	6039      	str	r1, [r7, #0]
      const bool __assignable = is_copy_assignable<_ValueType>::value;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	73fb      	strb	r3, [r7, #15]
	__uninit_default_n(__first, __n);
 8002ce8:	6839      	ldr	r1, [r7, #0]
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 fbf1 	bl	80034d2 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPhjEET_S3_T0_>
 8002cf0:	4603      	mov	r3, r0
    }
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3710      	adds	r7, #16
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <_ZNKSt8__detail15_Hash_code_baseIP19FDCAN_HandleTypeDefSt4pairIKS2_St8functionIFvmPhjEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE5_M_h1Ev>:

      const _ExtractKey&
      _M_extract() const { return __ebo_extract_key::_M_cget(); }

      const _H1&
      _M_h1() const { return __ebo_h1::_M_cget(); }
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b082      	sub	sp, #8
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 fbf8 	bl	80034f8 <_ZNKSt8__detail21_Hashtable_ebo_helperILi1ESt4hashIP19FDCAN_HandleTypeDefELb1EE7_M_cgetEv>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <_ZNKSt4hashIP19FDCAN_HandleTypeDefEclES1_>:
  /// Partial specializations for pointer types.
  template<typename _Tp>
    struct hash<_Tp*> : public __hash_base<size_t, _Tp*>
    {
      size_t
      operator()(_Tp* __p) const noexcept
 8002d12:	b480      	push	{r7}
 8002d14:	b083      	sub	sp, #12
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
 8002d1a:	6039      	str	r1, [r7, #0]
      { return reinterpret_cast<size_t>(__p); }
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr

08002d2a <_ZNKSt8__detail15_Hash_code_baseIP19FDCAN_HandleTypeDefSt4pairIKS2_St8functionIFvmPhjEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexERS4_jj>:
      _M_bucket_index(const _Key&, __hash_code __c,
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b084      	sub	sp, #16
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	60f8      	str	r0, [r7, #12]
 8002d32:	60b9      	str	r1, [r7, #8]
 8002d34:	607a      	str	r2, [r7, #4]
 8002d36:	603b      	str	r3, [r7, #0]
      { return _M_h2()(__c, __bkt_count); }
 8002d38:	68f8      	ldr	r0, [r7, #12]
 8002d3a:	f000 fbe8 	bl	800350e <_ZNKSt8__detail15_Hash_code_baseIP19FDCAN_HandleTypeDefSt4pairIKS2_St8functionIFvmPhjEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE5_M_h2Ev>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	6879      	ldr	r1, [r7, #4]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7fd ff68 	bl	8000c1a <_ZNKSt8__detail18_Mod_range_hashingclEjj>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3710      	adds	r7, #16
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <_ZNKSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b086      	sub	sp, #24
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
 8002d60:	603b      	str	r3, [r7, #0]
      __node_base* __prev_p = _M_buckets[__bkt];
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	4413      	add	r3, r2
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	617b      	str	r3, [r7, #20]
      if (!__prev_p)
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <_ZNKSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x26>
	return nullptr;
 8002d76:	2300      	movs	r3, #0
 8002d78:	e02b      	b.n	8002dd2 <_ZNKSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x7e>
      for (__node_type* __p = static_cast<__node_type*>(__prev_p->_M_nxt);;
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	613b      	str	r3, [r7, #16]
	  if (this->_M_equals(__k, __code, __p))
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	6879      	ldr	r1, [r7, #4]
 8002d86:	68f8      	ldr	r0, [r7, #12]
 8002d88:	f000 fbd9 	bl	800353e <_ZNKSt8__detail15_Hashtable_baseIP19FDCAN_HandleTypeDefSt4pairIKS2_St8functionIFvmPhjEEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS4_jPNS_10_Hash_nodeIS9_Lb0EEE>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <_ZNKSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x42>
	    return __prev_p;
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	e01d      	b.n	8002dd2 <_ZNKSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x7e>
	  if (!__p->_M_nxt || _M_bucket_index(__p->_M_next()) != __bkt)
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00b      	beq.n	8002db6 <_ZNKSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x62>
 8002d9e:	6938      	ldr	r0, [r7, #16]
 8002da0:	f000 fbc1 	bl	8003526 <_ZNKSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EE7_M_nextEv>
 8002da4:	4603      	mov	r3, r0
 8002da6:	4619      	mov	r1, r3
 8002da8:	68f8      	ldr	r0, [r7, #12]
 8002daa:	f000 fbf7 	bl	800359c <_ZNKSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEPNSA_10_Hash_nodeIS8_Lb0EEE>
 8002dae:	4602      	mov	r2, r0
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d001      	beq.n	8002dba <_ZNKSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x66>
 8002db6:	2301      	movs	r3, #1
 8002db8:	e000      	b.n	8002dbc <_ZNKSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x68>
 8002dba:	2300      	movs	r3, #0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d106      	bne.n	8002dce <_ZNKSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x7a>
	  __prev_p = __p;
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	617b      	str	r3, [r7, #20]
	   __p = __p->_M_next())
 8002dc4:	6938      	ldr	r0, [r7, #16]
 8002dc6:	f000 fbae 	bl	8003526 <_ZNKSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EE7_M_nextEv>
 8002dca:	6138      	str	r0, [r7, #16]
	  if (this->_M_equals(__k, __code, __p))
 8002dcc:	e7d8      	b.n	8002d80 <_ZNKSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x2c>
	    break;
 8002dce:	bf00      	nop
      return nullptr;
 8002dd0:	2300      	movs	r3, #0
    }
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3718      	adds	r7, #24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEE9_M_valptrEv>:
      _M_valptr() noexcept
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b082      	sub	sp, #8
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	3304      	adds	r3, #4
 8002de6:	4618      	mov	r0, r3
 8002de8:	f000 fbe9 	bl	80035be <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEE6_M_ptrEv>
 8002dec:	4603      	mov	r3, r0
 8002dee:	4618      	mov	r0, r3
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <_ZNSt11_Tuple_implILj0EJRKP19FDCAN_HandleTypeDefEEC1ES3_>:
      constexpr _Tuple_impl(const _Head& __head)
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b082      	sub	sp, #8
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
 8002dfe:	6039      	str	r1, [r7, #0]
      : _Base(__head) { }
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6839      	ldr	r1, [r7, #0]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f000 fbe6 	bl	80035d6 <_ZNSt10_Head_baseILj0ERKP19FDCAN_HandleTypeDefLb0EEC1ES3_>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3708      	adds	r7, #8
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr

08002e2a <_ZSt7forwardISt5tupleIJRKP19FDCAN_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002e2a:	b480      	push	{r7}
 8002e2c:	b083      	sub	sp, #12
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4618      	mov	r0, r3
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr

08002e56 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEEC1Ev>:
    struct _Hash_node_value_base : _Hash_node_base
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b082      	sub	sp, #8
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7fd fecc 	bl	8000bfe <_ZNSt8__detail15_Hash_node_baseC1Ev>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3708      	adds	r7, #8
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <_ZNSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEC1Ev>:
    struct _Hash_node<_Value, false> : _Hash_node_value_base<_Value>
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7ff ffeb 	bl	8002e56 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEEC1Ev>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4618      	mov	r0, r3
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEE16_M_allocate_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS5_EESI_IJEEEEEPSB_DpOT_>:
  // Definitions of class template _Hashtable_alloc's out-of-line member
  // functions.
  template<typename _NodeAlloc>
    template<typename... _Args>
      auto
      _Hashtable_alloc<_NodeAlloc>::_M_allocate_node(_Args&&... __args)
 8002e8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e8e:	b088      	sub	sp, #32
 8002e90:	af02      	add	r7, sp, #8
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]
 8002e98:	603b      	str	r3, [r7, #0]
      -> __node_type*
      {
	auto __nptr = __node_alloc_traits::allocate(_M_node_allocator(), 1);
 8002e9a:	68f8      	ldr	r0, [r7, #12]
 8002e9c:	f000 fbaa 	bl	80035f4 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEE17_M_node_allocatorEv>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2101      	movs	r1, #1
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f000 fbb1 	bl	800360c <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEE8allocateERSC_j>
 8002eaa:	6178      	str	r0, [r7, #20]
	__node_type* __n = std::__to_address(__nptr);
 8002eac:	6978      	ldr	r0, [r7, #20]
 8002eae:	f000 fbbc 	bl	800362a <_ZSt12__to_addressINSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEPT_SD_>
 8002eb2:	6138      	str	r0, [r7, #16]
	__try
	  {
	    ::new ((void*)__n) __node_type;
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	2018      	movs	r0, #24
 8002eba:	f7fd fd04 	bl	80008c6 <_ZnwjPv>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7ff ffd5 	bl	8002e70 <_ZNSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEC1Ev>
	    __node_alloc_traits::construct(_M_node_allocator(),
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f000 fb94 	bl	80035f4 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEE17_M_node_allocatorEv>
 8002ecc:	4604      	mov	r4, r0
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff ff82 	bl	8002dda <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEE9_M_valptrEv>
 8002ed6:	4605      	mov	r5, r0
 8002ed8:	68b8      	ldr	r0, [r7, #8]
 8002eda:	f7ff ff9b 	bl	8002e14 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8002ede:	4606      	mov	r6, r0
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f7ff ffa2 	bl	8002e2a <_ZSt7forwardISt5tupleIJRKP19FDCAN_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8002ee6:	4680      	mov	r8, r0
 8002ee8:	6838      	ldr	r0, [r7, #0]
 8002eea:	f7ff ffa9 	bl	8002e40 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	9300      	str	r3, [sp, #0]
 8002ef2:	4643      	mov	r3, r8
 8002ef4:	4632      	mov	r2, r6
 8002ef6:	4629      	mov	r1, r5
 8002ef8:	4620      	mov	r0, r4
 8002efa:	f000 fba1 	bl	8003640 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEE9constructISA_JRKSt21piecewise_construct_tSt5tupleIJRS5_EESI_IJEEEEEvRSC_PT_DpOT0_>
					   __n->_M_valptr(),
					   std::forward<_Args>(__args)...);
	    return __n;
 8002efe:	693b      	ldr	r3, [r7, #16]
	__catch(...)
	  {
	    __node_alloc_traits::deallocate(_M_node_allocator(), __nptr, 1);
	    __throw_exception_again;
	  }
      }
 8002f00:	4618      	mov	r0, r3
 8002f02:	3718      	adds	r7, #24
 8002f04:	46bd      	mov	sp, r7
 8002f06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002f0a <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEE18_M_deallocate_nodeEPSB_>:

  template<typename _NodeAlloc>
    void
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node(__node_type* __n)
 8002f0a:	b590      	push	{r4, r7, lr}
 8002f0c:	b083      	sub	sp, #12
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
 8002f12:	6039      	str	r1, [r7, #0]
    {
      __node_alloc_traits::destroy(_M_node_allocator(), __n->_M_valptr());
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f000 fb6d 	bl	80035f4 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEE17_M_node_allocatorEv>
 8002f1a:	4604      	mov	r4, r0
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff ff5b 	bl	8002dda <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEE9_M_valptrEv>
 8002f24:	4603      	mov	r3, r0
 8002f26:	4619      	mov	r1, r3
 8002f28:	4620      	mov	r0, r4
 8002f2a:	f000 fbb6 	bl	800369a <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEE7destroyISA_EEvRSC_PT_>
      _M_deallocate_node_ptr(__n);
 8002f2e:	6839      	ldr	r1, [r7, #0]
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f000 fbbf 	bl	80036b4 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEE22_M_deallocate_node_ptrEPSB_>
    }
 8002f36:	bf00      	nop
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd90      	pop	{r4, r7, pc}

08002f3e <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_rehashEjRKj>:
  template<typename _Key, typename _Value,
	   typename _Alloc, typename _ExtractKey, typename _Equal,
	   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
	   typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b084      	sub	sp, #16
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	60f8      	str	r0, [r7, #12]
 8002f46:	60b9      	str	r1, [r7, #8]
 8002f48:	607a      	str	r2, [r7, #4]
	       _H1, _H2, _Hash, _RehashPolicy, _Traits>::
    _M_rehash(size_type __bkt_count, const __rehash_state& __state)
    {
      __try
	{
	  _M_rehash_aux(__bkt_count, __unique_keys());
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	68b9      	ldr	r1, [r7, #8]
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f000 fbc6 	bl	80036e0 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE>
	  // A failure here means that buckets allocation failed.  We only
	  // have to restore hash policy previous state.
	  _M_rehash_policy._M_reset(__state);
	  __throw_exception_again;
	}
    }
 8002f54:	bf00      	nop
 8002f56:	3710      	adds	r7, #16
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <_ZNKSt8__detail15_Hash_code_baseIP19FDCAN_HandleTypeDefSt4pairIKS2_St8functionIFvmPhjEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE13_M_store_codeEPNS_10_Hash_nodeIS9_Lb0EEEj>:
      _M_store_code(__node_type*, __hash_code) const
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]
      { }
 8002f68:	bf00      	nop
 8002f6a:	3714      	adds	r7, #20
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNSA_10_Hash_nodeIS8_Lb0EEE>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8002f74:	b590      	push	{r4, r7, lr}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
      if (_M_buckets[__bkt])
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	4413      	add	r3, r2
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d011      	beq.n	8002fb4 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNSA_10_Hash_nodeIS8_Lb0EEE+0x40>
	  __node->_M_nxt = _M_buckets[__bkt]->_M_nxt;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	4413      	add	r3, r2
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	601a      	str	r2, [r3, #0]
	  _M_buckets[__bkt]->_M_nxt = __node;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	4413      	add	r3, r2
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	601a      	str	r2, [r3, #0]
    }
 8002fb2:	e021      	b.n	8002ff8 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNSA_10_Hash_nodeIS8_Lb0EEE+0x84>
	  __node->_M_nxt = _M_before_begin._M_nxt;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	689a      	ldr	r2, [r3, #8]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	601a      	str	r2, [r3, #0]
	  _M_before_begin._M_nxt = __node;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	609a      	str	r2, [r3, #8]
	  if (__node->_M_nxt)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00e      	beq.n	8002fe8 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNSA_10_Hash_nodeIS8_Lb0EEE+0x74>
	    _M_buckets[_M_bucket_index(__node->_M_next())] = __node;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681c      	ldr	r4, [r3, #0]
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 faa9 	bl	8003526 <_ZNKSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EE7_M_nextEv>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f000 fadf 	bl	800359c <_ZNKSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEPNSA_10_Hash_nodeIS8_Lb0EEE>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	4423      	add	r3, r4
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	601a      	str	r2, [r3, #0]
	  _M_buckets[__bkt] = &_M_before_begin;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	4413      	add	r3, r2
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	3208      	adds	r2, #8
 8002ff6:	601a      	str	r2, [r3, #0]
    }
 8002ff8:	bf00      	nop
 8002ffa:	3714      	adds	r7, #20
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd90      	pop	{r4, r7, pc}

08003000 <_ZNSt8__detail14_Node_iteratorISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0ELb0EEC1EPNS_10_Hash_nodeIS9_Lb0EEE>:
      _Node_iterator(__node_type* __p) noexcept
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
      : __base_type(__p) { }
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6839      	ldr	r1, [r7, #0]
 800300e:	4618      	mov	r0, r3
 8003010:	f000 fbc8 	bl	80037a4 <_ZNSt8__detail19_Node_iterator_baseISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEC1EPNS_10_Hash_nodeIS9_Lb0EEE>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4618      	mov	r0, r3
 8003018:	3708      	adds	r7, #8
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <_ZNKSt9_Any_data9_M_accessIZN18tutrc_harurobo_lib4C610C4ERNS1_3CANEEUlmPhjE_EERKT_v>:
      _M_access() const
 800301e:	b580      	push	{r7, lr}
 8003020:	b082      	sub	sp, #8
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7fd fdbd 	bl	8000ba6 <_ZNKSt9_Any_data9_M_accessEv>
 800302c:	4603      	mov	r3, r0
 800302e:	4618      	mov	r0, r3
 8003030:	3708      	adds	r7, #8
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <_ZSt11__addressofIKZN18tutrc_harurobo_lib4C610C4ERNS0_3CANEEUlmPhjE_EPT_RS7_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8003036:	b480      	push	{r7}
 8003038:	b083      	sub	sp, #12
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4618      	mov	r0, r3
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <_ZSt7forwardIRZN18tutrc_harurobo_lib4C610C4ERNS0_3CANEEUlmPhjE_EOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4618      	mov	r0, r3
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr

08003062 <_ZSt13__invoke_implIvRZN18tutrc_harurobo_lib4C610C4ERNS0_3CANEEUlmPhjE_JmS4_jEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8003062:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003064:	b085      	sub	sp, #20
 8003066:	af00      	add	r7, sp, #0
 8003068:	7338      	strb	r0, [r7, #12]
 800306a:	60b9      	str	r1, [r7, #8]
 800306c:	607a      	str	r2, [r7, #4]
 800306e:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8003070:	68b8      	ldr	r0, [r7, #8]
 8003072:	f7ff ffeb 	bl	800304c <_ZSt7forwardIRZN18tutrc_harurobo_lib4C610C4ERNS0_3CANEEUlmPhjE_EOT_RNSt16remove_referenceIS7_E4typeE>
 8003076:	4606      	mov	r6, r0
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f7ff fbfa 	bl	8002872 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 800307e:	4603      	mov	r3, r0
 8003080:	681c      	ldr	r4, [r3, #0]
 8003082:	6838      	ldr	r0, [r7, #0]
 8003084:	f7ff fc00 	bl	8002888 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 8003088:	4603      	mov	r3, r0
 800308a:	681d      	ldr	r5, [r3, #0]
 800308c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800308e:	f7fe ffb0 	bl	8001ff2 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8003092:	4603      	mov	r3, r0
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	462a      	mov	r2, r5
 8003098:	4621      	mov	r1, r4
 800309a:	4630      	mov	r0, r6
 800309c:	f7fd ffd9 	bl	8001052 <_ZZN18tutrc_harurobo_lib4C610C4ERNS_3CANEENKUlmPhjE_clEmS3_j>
 80030a0:	bf00      	nop
 80030a2:	3714      	adds	r7, #20
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080030a8 <_ZNSt14_Function_base13_Base_managerIZN18tutrc_harurobo_lib4C610C4ERNS1_3CANEEUlmPhjE_E8_M_cloneERSt9_Any_dataRKS8_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 80030a8:	b590      	push	{r4, r7, lr}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80030b4:	68b8      	ldr	r0, [r7, #8]
 80030b6:	f7ff ffb2 	bl	800301e <_ZNKSt9_Any_data9_M_accessIZN18tutrc_harurobo_lib4C610C4ERNS1_3CANEEUlmPhjE_EERKT_v>
 80030ba:	4604      	mov	r4, r0
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	f7fd fd67 	bl	8000b90 <_ZNSt9_Any_data9_M_accessEv>
 80030c2:	4603      	mov	r3, r0
 80030c4:	4619      	mov	r1, r3
 80030c6:	2004      	movs	r0, #4
 80030c8:	f7fd fbfd 	bl	80008c6 <_ZnwjPv>
 80030cc:	4602      	mov	r2, r0
 80030ce:	6823      	ldr	r3, [r4, #0]
 80030d0:	6013      	str	r3, [r2, #0]
	}
 80030d2:	bf00      	nop
 80030d4:	3714      	adds	r7, #20
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd90      	pop	{r4, r7, pc}

080030da <_ZNSt14_Function_base13_Base_managerIZN18tutrc_harurobo_lib4C610C4ERNS1_3CANEEUlmPhjE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 80030da:	b580      	push	{r7, lr}
 80030dc:	b082      	sub	sp, #8
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
 80030e2:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f000 fb6c 	bl	80037c2 <_ZNSt9_Any_data9_M_accessIZN18tutrc_harurobo_lib4C610C4ERNS1_3CANEEUlmPhjE_EERT_v>
	}
 80030ea:	bf00      	nop
 80030ec:	3708      	adds	r7, #8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <_ZNKSt8__detail15_Hash_code_baseIP17TIM_HandleTypeDefSt4pairIKS2_St8functionIFvvEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE5_M_h1Ev>:
      _M_h1() const { return __ebo_h1::_M_cget(); }
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b082      	sub	sp, #8
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 fb6d 	bl	80037da <_ZNKSt8__detail21_Hashtable_ebo_helperILi1ESt4hashIP17TIM_HandleTypeDefELb1EE7_M_cgetEv>
 8003100:	4603      	mov	r3, r0
 8003102:	4618      	mov	r0, r3
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <_ZNKSt4hashIP17TIM_HandleTypeDefEclES1_>:
      operator()(_Tp* __p) const noexcept
 800310a:	b480      	push	{r7}
 800310c:	b083      	sub	sp, #12
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
 8003112:	6039      	str	r1, [r7, #0]
      { return reinterpret_cast<size_t>(__p); }
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	4618      	mov	r0, r3
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr

08003122 <_ZNKSt8__detail15_Hash_code_baseIP17TIM_HandleTypeDefSt4pairIKS2_St8functionIFvvEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexERS4_jj>:
      _M_bucket_index(const _Key&, __hash_code __c,
 8003122:	b580      	push	{r7, lr}
 8003124:	b084      	sub	sp, #16
 8003126:	af00      	add	r7, sp, #0
 8003128:	60f8      	str	r0, [r7, #12]
 800312a:	60b9      	str	r1, [r7, #8]
 800312c:	607a      	str	r2, [r7, #4]
 800312e:	603b      	str	r3, [r7, #0]
      { return _M_h2()(__c, __bkt_count); }
 8003130:	68f8      	ldr	r0, [r7, #12]
 8003132:	f000 fb5d 	bl	80037f0 <_ZNKSt8__detail15_Hash_code_baseIP17TIM_HandleTypeDefSt4pairIKS2_St8functionIFvvEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE5_M_h2Ev>
 8003136:	4603      	mov	r3, r0
 8003138:	683a      	ldr	r2, [r7, #0]
 800313a:	6879      	ldr	r1, [r7, #4]
 800313c:	4618      	mov	r0, r3
 800313e:	f7fd fd6c 	bl	8000c1a <_ZNKSt8__detail18_Mod_range_hashingclEjj>
 8003142:	4603      	mov	r3, r0
 8003144:	4618      	mov	r0, r3
 8003146:	3710      	adds	r7, #16
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <_ZNKSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]
 8003158:	603b      	str	r3, [r7, #0]
      __node_base* __prev_p = _M_buckets[__bkt];
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	4413      	add	r3, r2
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	617b      	str	r3, [r7, #20]
      if (!__prev_p)
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <_ZNKSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x26>
	return nullptr;
 800316e:	2300      	movs	r3, #0
 8003170:	e02b      	b.n	80031ca <_ZNKSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x7e>
      for (__node_type* __p = static_cast<__node_type*>(__prev_p->_M_nxt);;
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	613b      	str	r3, [r7, #16]
	  if (this->_M_equals(__k, __code, __p))
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	683a      	ldr	r2, [r7, #0]
 800317c:	6879      	ldr	r1, [r7, #4]
 800317e:	68f8      	ldr	r0, [r7, #12]
 8003180:	f000 fb4e 	bl	8003820 <_ZNKSt8__detail15_Hashtable_baseIP17TIM_HandleTypeDefSt4pairIKS2_St8functionIFvvEEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS4_jPNS_10_Hash_nodeIS8_Lb0EEE>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <_ZNKSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x42>
	    return __prev_p;
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	e01d      	b.n	80031ca <_ZNKSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x7e>
	  if (!__p->_M_nxt || _M_bucket_index(__p->_M_next()) != __bkt)
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00b      	beq.n	80031ae <_ZNKSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x62>
 8003196:	6938      	ldr	r0, [r7, #16]
 8003198:	f000 fb36 	bl	8003808 <_ZNKSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EE7_M_nextEv>
 800319c:	4603      	mov	r3, r0
 800319e:	4619      	mov	r1, r3
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f000 fb6c 	bl	800387e <_ZNKSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEPNS9_10_Hash_nodeIS7_Lb0EEE>
 80031a6:	4602      	mov	r2, r0
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d001      	beq.n	80031b2 <_ZNKSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x66>
 80031ae:	2301      	movs	r3, #1
 80031b0:	e000      	b.n	80031b4 <_ZNKSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x68>
 80031b2:	2300      	movs	r3, #0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d106      	bne.n	80031c6 <_ZNKSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x7a>
	  __prev_p = __p;
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	617b      	str	r3, [r7, #20]
	   __p = __p->_M_next())
 80031bc:	6938      	ldr	r0, [r7, #16]
 80031be:	f000 fb23 	bl	8003808 <_ZNKSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EE7_M_nextEv>
 80031c2:	6138      	str	r0, [r7, #16]
	  if (this->_M_equals(__k, __code, __p))
 80031c4:	e7d8      	b.n	8003178 <_ZNKSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x2c>
	    break;
 80031c6:	bf00      	nop
      return nullptr;
 80031c8:	2300      	movs	r3, #0
    }
 80031ca:	4618      	mov	r0, r3
 80031cc:	3718      	adds	r7, #24
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEEE9_M_valptrEv>:
      _M_valptr() noexcept
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b082      	sub	sp, #8
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	3304      	adds	r3, #4
 80031de:	4618      	mov	r0, r3
 80031e0:	f000 fb5e 	bl	80038a0 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEEE6_M_ptrEv>
 80031e4:	4603      	mov	r3, r0
 80031e6:	4618      	mov	r0, r3
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <_ZNSt11_Tuple_implILj0EJRKP17TIM_HandleTypeDefEEC1ES3_>:
      constexpr _Tuple_impl(const _Head& __head)
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b082      	sub	sp, #8
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
 80031f6:	6039      	str	r1, [r7, #0]
      : _Base(__head) { }
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6839      	ldr	r1, [r7, #0]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f000 fb5b 	bl	80038b8 <_ZNSt10_Head_baseILj0ERKP17TIM_HandleTypeDefLb0EEC1ES3_>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4618      	mov	r0, r3
 8003206:	3708      	adds	r7, #8
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <_ZSt7forwardISt5tupleIJRKP17TIM_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4618      	mov	r0, r3
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr

08003222 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEEEC1Ev>:
    struct _Hash_node_value_base : _Hash_node_base
 8003222:	b580      	push	{r7, lr}
 8003224:	b082      	sub	sp, #8
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4618      	mov	r0, r3
 800322e:	f7fd fce6 	bl	8000bfe <_ZNSt8__detail15_Hash_node_baseC1Ev>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4618      	mov	r0, r3
 8003236:	3708      	adds	r7, #8
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <_ZNSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEC1Ev>:
    struct _Hash_node<_Value, false> : _Hash_node_value_base<_Value>
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4618      	mov	r0, r3
 8003248:	f7ff ffeb 	bl	8003222 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEEEC1Ev>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4618      	mov	r0, r3
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEE16_M_allocate_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS5_EESH_IJEEEEEPSA_DpOT_>:
      _Hashtable_alloc<_NodeAlloc>::_M_allocate_node(_Args&&... __args)
 8003256:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800325a:	b088      	sub	sp, #32
 800325c:	af02      	add	r7, sp, #8
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
 8003264:	603b      	str	r3, [r7, #0]
	auto __nptr = __node_alloc_traits::allocate(_M_node_allocator(), 1);
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f000 fb35 	bl	80038d6 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEE17_M_node_allocatorEv>
 800326c:	4603      	mov	r3, r0
 800326e:	2101      	movs	r1, #1
 8003270:	4618      	mov	r0, r3
 8003272:	f000 fb3c 	bl	80038ee <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEE8allocateERSB_j>
 8003276:	6178      	str	r0, [r7, #20]
	__node_type* __n = std::__to_address(__nptr);
 8003278:	6978      	ldr	r0, [r7, #20]
 800327a:	f000 fb47 	bl	800390c <_ZSt12__to_addressINSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEPT_SC_>
 800327e:	6138      	str	r0, [r7, #16]
	    ::new ((void*)__n) __node_type;
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	4619      	mov	r1, r3
 8003284:	2018      	movs	r0, #24
 8003286:	f7fd fb1e 	bl	80008c6 <_ZnwjPv>
 800328a:	4603      	mov	r3, r0
 800328c:	4618      	mov	r0, r3
 800328e:	f7ff ffd5 	bl	800323c <_ZNSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEC1Ev>
	    __node_alloc_traits::construct(_M_node_allocator(),
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f000 fb1f 	bl	80038d6 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEE17_M_node_allocatorEv>
 8003298:	4604      	mov	r4, r0
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	4618      	mov	r0, r3
 800329e:	f7ff ff98 	bl	80031d2 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEEE9_M_valptrEv>
 80032a2:	4605      	mov	r5, r0
 80032a4:	68b8      	ldr	r0, [r7, #8]
 80032a6:	f7ff fdb5 	bl	8002e14 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80032aa:	4606      	mov	r6, r0
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f7ff ffad 	bl	800320c <_ZSt7forwardISt5tupleIJRKP17TIM_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80032b2:	4680      	mov	r8, r0
 80032b4:	6838      	ldr	r0, [r7, #0]
 80032b6:	f7ff fdc3 	bl	8002e40 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80032ba:	4603      	mov	r3, r0
 80032bc:	9300      	str	r3, [sp, #0]
 80032be:	4643      	mov	r3, r8
 80032c0:	4632      	mov	r2, r6
 80032c2:	4629      	mov	r1, r5
 80032c4:	4620      	mov	r0, r4
 80032c6:	f000 fb2c 	bl	8003922 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEE9constructIS9_JRKSt21piecewise_construct_tSt5tupleIJRS5_EESH_IJEEEEEvRSB_PT_DpOT0_>
	    return __n;
 80032ca:	693b      	ldr	r3, [r7, #16]
      }
 80032cc:	4618      	mov	r0, r3
 80032ce:	3718      	adds	r7, #24
 80032d0:	46bd      	mov	sp, r7
 80032d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080032d6 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEE18_M_deallocate_nodeEPSA_>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node(__node_type* __n)
 80032d6:	b590      	push	{r4, r7, lr}
 80032d8:	b083      	sub	sp, #12
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
 80032de:	6039      	str	r1, [r7, #0]
      __node_alloc_traits::destroy(_M_node_allocator(), __n->_M_valptr());
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 faf8 	bl	80038d6 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEE17_M_node_allocatorEv>
 80032e6:	4604      	mov	r4, r0
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7ff ff71 	bl	80031d2 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEEE9_M_valptrEv>
 80032f0:	4603      	mov	r3, r0
 80032f2:	4619      	mov	r1, r3
 80032f4:	4620      	mov	r0, r4
 80032f6:	f000 fb41 	bl	800397c <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEE7destroyIS9_EEvRSB_PT_>
      _M_deallocate_node_ptr(__n);
 80032fa:	6839      	ldr	r1, [r7, #0]
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f000 fb4a 	bl	8003996 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEE22_M_deallocate_node_ptrEPSA_>
    }
 8003302:	bf00      	nop
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	bd90      	pop	{r4, r7, pc}

0800330a <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_rehashEjRKj>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 800330a:	b580      	push	{r7, lr}
 800330c:	b084      	sub	sp, #16
 800330e:	af00      	add	r7, sp, #0
 8003310:	60f8      	str	r0, [r7, #12]
 8003312:	60b9      	str	r1, [r7, #8]
 8003314:	607a      	str	r2, [r7, #4]
	  _M_rehash_aux(__bkt_count, __unique_keys());
 8003316:	461a      	mov	r2, r3
 8003318:	68b9      	ldr	r1, [r7, #8]
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	f000 fb51 	bl	80039c2 <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE>
    }
 8003320:	bf00      	nop
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <_ZNKSt8__detail15_Hash_code_baseIP17TIM_HandleTypeDefSt4pairIKS2_St8functionIFvvEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE13_M_store_codeEPNS_10_Hash_nodeIS8_Lb0EEEj>:
      _M_store_code(__node_type*, __hash_code) const
 8003328:	b480      	push	{r7}
 800332a:	b085      	sub	sp, #20
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
      { }
 8003334:	bf00      	nop
 8003336:	3714      	adds	r7, #20
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS9_10_Hash_nodeIS7_Lb0EEE>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8003340:	b590      	push	{r4, r7, lr}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	607a      	str	r2, [r7, #4]
      if (_M_buckets[__bkt])
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	4413      	add	r3, r2
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d011      	beq.n	8003380 <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS9_10_Hash_nodeIS7_Lb0EEE+0x40>
	  __node->_M_nxt = _M_buckets[__bkt]->_M_nxt;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4413      	add	r3, r2
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	601a      	str	r2, [r3, #0]
	  _M_buckets[__bkt]->_M_nxt = __node;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4413      	add	r3, r2
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	601a      	str	r2, [r3, #0]
    }
 800337e:	e021      	b.n	80033c4 <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS9_10_Hash_nodeIS7_Lb0EEE+0x84>
	  __node->_M_nxt = _M_before_begin._M_nxt;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	689a      	ldr	r2, [r3, #8]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	601a      	str	r2, [r3, #0]
	  _M_before_begin._M_nxt = __node;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	609a      	str	r2, [r3, #8]
	  if (__node->_M_nxt)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00e      	beq.n	80033b4 <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS9_10_Hash_nodeIS7_Lb0EEE+0x74>
	    _M_buckets[_M_bucket_index(__node->_M_next())] = __node;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681c      	ldr	r4, [r3, #0]
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 fa34 	bl	8003808 <_ZNKSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EE7_M_nextEv>
 80033a0:	4603      	mov	r3, r0
 80033a2:	4619      	mov	r1, r3
 80033a4:	68f8      	ldr	r0, [r7, #12]
 80033a6:	f000 fa6a 	bl	800387e <_ZNKSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEPNS9_10_Hash_nodeIS7_Lb0EEE>
 80033aa:	4603      	mov	r3, r0
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	4423      	add	r3, r4
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	601a      	str	r2, [r3, #0]
	  _M_buckets[__bkt] = &_M_before_begin;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	4413      	add	r3, r2
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	3208      	adds	r2, #8
 80033c2:	601a      	str	r2, [r3, #0]
    }
 80033c4:	bf00      	nop
 80033c6:	3714      	adds	r7, #20
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd90      	pop	{r4, r7, pc}

080033cc <_ZNSt8__detail14_Node_iteratorISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0ELb0EEC1EPNS_10_Hash_nodeIS8_Lb0EEE>:
      _Node_iterator(__node_type* __p) noexcept
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
      : __base_type(__p) { }
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6839      	ldr	r1, [r7, #0]
 80033da:	4618      	mov	r0, r3
 80033dc:	f000 fb53 	bl	8003a86 <_ZNSt8__detail19_Node_iterator_baseISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEC1EPNS_10_Hash_nodeIS8_Lb0EEE>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4618      	mov	r0, r3
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <_ZNKSt9_Any_data9_M_accessIPZ7cppmainEUlvE_EERKT_v>:
      _M_access() const
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b082      	sub	sp, #8
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f7fd fbd7 	bl	8000ba6 <_ZNKSt9_Any_data9_M_accessEv>
 80033f8:	4603      	mov	r3, r0
 80033fa:	4618      	mov	r0, r3
 80033fc:	3708      	adds	r7, #8
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <_ZSt7forwardIRZ7cppmainEUlvE_EOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003402:	b480      	push	{r7}
 8003404:	b083      	sub	sp, #12
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4618      	mov	r0, r3
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <_ZSt13__invoke_implIvRZ7cppmainEUlvE_JEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	7138      	strb	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8003422:	6838      	ldr	r0, [r7, #0]
 8003424:	f7ff ffed 	bl	8003402 <_ZSt7forwardIRZ7cppmainEUlvE_EOT_RNSt16remove_referenceIS2_E4typeE>
 8003428:	4603      	mov	r3, r0
 800342a:	4618      	mov	r0, r3
 800342c:	f7fe f968 	bl	8001700 <_ZZ7cppmainENKUlvE_clEv>
 8003430:	bf00      	nop
 8003432:	3708      	adds	r7, #8
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <_ZNSt14_Function_base13_Base_managerIZ7cppmainEUlvE_E8_M_cloneERSt9_Any_dataRKS3_St17integral_constantIbLb0EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
 8003438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800343a:	b085      	sub	sp, #20
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	713a      	strb	r2, [r7, #4]
	    new _Functor(*__source._M_access<const _Functor*>());
 8003444:	68b8      	ldr	r0, [r7, #8]
 8003446:	f000 fb2d 	bl	8003aa4 <_ZNKSt9_Any_data9_M_accessIPKZ7cppmainEUlvE_EERKT_v>
 800344a:	4603      	mov	r3, r0
	  __dest._M_access<_Functor*>() =
 800344c:	681e      	ldr	r6, [r3, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 800344e:	2010      	movs	r0, #16
 8003450:	f00d fcc8 	bl	8010de4 <_Znwj>
 8003454:	4603      	mov	r3, r0
 8003456:	461d      	mov	r5, r3
	  __dest._M_access<_Functor*>() =
 8003458:	462c      	mov	r4, r5
 800345a:	4633      	mov	r3, r6
 800345c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800345e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f7ff fbc2 	bl	8002bec <_ZNSt9_Any_data9_M_accessIPZ7cppmainEUlvE_EERT_v>
 8003468:	4603      	mov	r3, r0
 800346a:	601d      	str	r5, [r3, #0]
	}
 800346c:	bf00      	nop
 800346e:	3714      	adds	r7, #20
 8003470:	46bd      	mov	sp, r7
 8003472:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003474 <_ZNSt14_Function_base13_Base_managerIZ7cppmainEUlvE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>:
	_M_destroy(_Any_data& __victim, false_type)
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	7039      	strb	r1, [r7, #0]
	  delete __victim._M_access<_Functor*>();
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f7ff fbb4 	bl	8002bec <_ZNSt9_Any_data9_M_accessIPZ7cppmainEUlvE_EERT_v>
 8003484:	4603      	mov	r3, r0
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d003      	beq.n	8003494 <_ZNSt14_Function_base13_Base_managerIZ7cppmainEUlvE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE+0x20>
 800348c:	2110      	movs	r1, #16
 800348e:	4618      	mov	r0, r3
 8003490:	f00d fca6 	bl	8010de0 <_ZdlPvj>
	}
 8003494:	bf00      	nop
 8003496:	3708      	adds	r7, #8
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>:
			 );
      }

#if __cplusplus <= 201703L
      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 fb09 	bl	8003abc <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>
 80034aa:	4603      	mov	r3, r0
 80034ac:	4618      	mov	r0, r3
 80034ae:	3708      	adds	r7, #8
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80034be:	2200      	movs	r2, #0
 80034c0:	6839      	ldr	r1, [r7, #0]
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 fb06 	bl	8003ad4 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>
 80034c8:	4603      	mov	r3, r0
 80034ca:	4618      	mov	r0, r3
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPhjEET_S3_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b084      	sub	sp, #16
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
 80034da:	6039      	str	r1, [r7, #0]
	  return std::fill_n(__first, __n, _ValueType());
 80034dc:	2300      	movs	r3, #0
 80034de:	73fb      	strb	r3, [r7, #15]
 80034e0:	f107 030f 	add.w	r3, r7, #15
 80034e4:	461a      	mov	r2, r3
 80034e6:	6839      	ldr	r1, [r7, #0]
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f000 fb0f 	bl	8003b0c <_ZSt6fill_nIPhjhET_S1_T0_RKT1_>
 80034ee:	4603      	mov	r3, r0
	}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3710      	adds	r7, #16
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <_ZNKSt8__detail21_Hashtable_ebo_helperILi1ESt4hashIP19FDCAN_HandleTypeDefELb1EE7_M_cgetEv>:
      const _Tp& _M_cget() const { return static_cast<const _Tp&>(*this); }
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4618      	mov	r0, r3
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr

0800350e <_ZNKSt8__detail15_Hash_code_baseIP19FDCAN_HandleTypeDefSt4pairIKS2_St8functionIFvmPhjEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE5_M_h2Ev>:
      _M_h2() const { return __ebo_h2::_M_cget(); }
 800350e:	b580      	push	{r7, lr}
 8003510:	b082      	sub	sp, #8
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 fb13 	bl	8003b42 <_ZNKSt8__detail21_Hashtable_ebo_helperILi2ENS_18_Mod_range_hashingELb1EE7_M_cgetEv>
 800351c:	4603      	mov	r3, r0
 800351e:	4618      	mov	r0, r3
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <_ZNKSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EE7_M_nextEv>:
      _M_next() const noexcept
 8003526:	b480      	push	{r7}
 8003528:	b083      	sub	sp, #12
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Hash_node*>(this->_M_nxt); }
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4618      	mov	r0, r3
 8003534:	370c      	adds	r7, #12
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr

0800353e <_ZNKSt8__detail15_Hashtable_baseIP19FDCAN_HandleTypeDefSt4pairIKS2_St8functionIFvmPhjEEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS4_jPNS_10_Hash_nodeIS9_Lb0EEE>:
    _M_equals(const _Key& __k, __hash_code __c, __node_type* __n) const
 800353e:	b5b0      	push	{r4, r5, r7, lr}
 8003540:	b084      	sub	sp, #16
 8003542:	af00      	add	r7, sp, #0
 8003544:	60f8      	str	r0, [r7, #12]
 8003546:	60b9      	str	r1, [r7, #8]
 8003548:	607a      	str	r2, [r7, #4]
 800354a:	603b      	str	r3, [r7, #0]
      return _Equal_hash_code<__node_type>::_S_equals(__c, *__n)
 800354c:	6839      	ldr	r1, [r7, #0]
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 fb02 	bl	8003b58 <_ZNSt8__detail15_Hashtable_baseIP19FDCAN_HandleTypeDefSt4pairIKS2_St8functionIFvmPhjEEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE16_Equal_hash_codeINS_10_Hash_nodeIS9_Lb0EEEE9_S_equalsEjRKSM_>
 8003554:	4603      	mov	r3, r0
	&& _M_eq()(__k, this->_M_extract()(__n->_M_v()));
 8003556:	2b00      	cmp	r3, #0
 8003558:	d01b      	beq.n	8003592 <_ZNKSt8__detail15_Hashtable_baseIP19FDCAN_HandleTypeDefSt4pairIKS2_St8functionIFvmPhjEEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS4_jPNS_10_Hash_nodeIS9_Lb0EEE+0x54>
 800355a:	68f8      	ldr	r0, [r7, #12]
 800355c:	f000 fb08 	bl	8003b70 <_ZNKSt8__detail15_Hashtable_baseIP19FDCAN_HandleTypeDefSt4pairIKS2_St8functionIFvmPhjEEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE5_M_eqEv>
 8003560:	4604      	mov	r4, r0
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	f000 fb10 	bl	8003b88 <_ZNKSt8__detail15_Hash_code_baseIP19FDCAN_HandleTypeDefSt4pairIKS2_St8functionIFvmPhjEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE10_M_extractEv>
 8003568:	4605      	mov	r5, r0
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	4618      	mov	r0, r3
 800356e:	f7ff f827 	bl	80025c0 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEE4_M_vEv>
 8003572:	4603      	mov	r3, r0
 8003574:	4619      	mov	r1, r3
 8003576:	4628      	mov	r0, r5
 8003578:	f000 fb12 	bl	8003ba0 <_ZNKSt8__detail10_Select1stclIRSt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOSC_>
 800357c:	4603      	mov	r3, r0
 800357e:	461a      	mov	r2, r3
 8003580:	68b9      	ldr	r1, [r7, #8]
 8003582:	4620      	mov	r0, r4
 8003584:	f000 fb1d 	bl	8003bc2 <_ZNKSt8equal_toIP19FDCAN_HandleTypeDefEclERKS1_S4_>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <_ZNKSt8__detail15_Hashtable_baseIP19FDCAN_HandleTypeDefSt4pairIKS2_St8functionIFvmPhjEEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS4_jPNS_10_Hash_nodeIS9_Lb0EEE+0x54>
 800358e:	2301      	movs	r3, #1
 8003590:	e000      	b.n	8003594 <_ZNKSt8__detail15_Hashtable_baseIP19FDCAN_HandleTypeDefSt4pairIKS2_St8functionIFvmPhjEEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS4_jPNS_10_Hash_nodeIS9_Lb0EEE+0x56>
 8003592:	2300      	movs	r3, #0
    }
 8003594:	4618      	mov	r0, r3
 8003596:	3710      	adds	r7, #16
 8003598:	46bd      	mov	sp, r7
 800359a:	bdb0      	pop	{r4, r5, r7, pc}

0800359c <_ZNKSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEPNSA_10_Hash_nodeIS8_Lb0EEE>:
      _M_bucket_index(__node_type* __n) const noexcept
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
      { return __hash_code_base::_M_bucket_index(__n, _M_bucket_count); }
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	461a      	mov	r2, r3
 80035ac:	6839      	ldr	r1, [r7, #0]
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 fb1c 	bl	8003bec <_ZNKSt8__detail15_Hash_code_baseIP19FDCAN_HandleTypeDefSt4pairIKS2_St8functionIFvmPhjEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexEPKNS_10_Hash_nodeIS9_Lb0EEEj>
 80035b4:	4603      	mov	r3, r0
 80035b6:	4618      	mov	r0, r3
 80035b8:	3708      	adds	r7, #8
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEE6_M_ptrEv>:
      {
        return static_cast<const void*>(&_M_storage);
      }

      _Tp*
      _M_ptr() noexcept
 80035be:	b580      	push	{r7, lr}
 80035c0:	b082      	sub	sp, #8
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 fb3c 	bl	8003c44 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEE7_M_addrEv>
 80035cc:	4603      	mov	r3, r0
 80035ce:	4618      	mov	r0, r3
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <_ZNSt10_Head_baseILj0ERKP19FDCAN_HandleTypeDefLb0EEC1ES3_>:
      constexpr _Head_base(const _Head& __h)
 80035d6:	b480      	push	{r7}
 80035d8:	b083      	sub	sp, #12
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
 80035de:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	683a      	ldr	r2, [r7, #0]
 80035e4:	601a      	str	r2, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4618      	mov	r0, r3
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEE17_M_node_allocatorEv>:
      _M_node_allocator()
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
      { return __ebo_node_alloc::_M_get(); }
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 fb2c 	bl	8003c5a <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEELb1EE6_M_getEv>
 8003602:	4603      	mov	r3, r0
 8003604:	4618      	mov	r0, r3
 8003606:	3708      	adds	r7, #8
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8003616:	2200      	movs	r2, #0
 8003618:	6839      	ldr	r1, [r7, #0]
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 fb28 	bl	8003c70 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEE8allocateEjPKv>
 8003620:	4603      	mov	r3, r0
 8003622:	4618      	mov	r0, r3
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <_ZSt12__to_addressINSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEPT_SD_>:
  template<typename _Ptr, typename _Tp>
    using __ptr_rebind = typename pointer_traits<_Ptr>::template rebind<_Tp>;

  template<typename _Tp>
    constexpr _Tp*
    __to_address(_Tp* __ptr) noexcept
 800362a:	b480      	push	{r7}
 800362c:	b083      	sub	sp, #12
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
    {
      static_assert(!std::is_function<_Tp>::value, "not a function pointer");
      return __ptr;
 8003632:	687b      	ldr	r3, [r7, #4]
    }
 8003634:	4618      	mov	r0, r3
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEE9constructISA_JRKSt21piecewise_construct_tSt5tupleIJRS5_EESI_IJEEEEEvRSC_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8003640:	b5b0      	push	{r4, r5, r7, lr}
 8003642:	b086      	sub	sp, #24
 8003644:	af02      	add	r7, sp, #8
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
 800364c:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f7ff fbe0 	bl	8002e14 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8003654:	4604      	mov	r4, r0
 8003656:	6838      	ldr	r0, [r7, #0]
 8003658:	f7ff fbe7 	bl	8002e2a <_ZSt7forwardISt5tupleIJRKP19FDCAN_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800365c:	4605      	mov	r5, r0
 800365e:	6a38      	ldr	r0, [r7, #32]
 8003660:	f7ff fbee 	bl	8002e40 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003664:	4603      	mov	r3, r0
 8003666:	9300      	str	r3, [sp, #0]
 8003668:	462b      	mov	r3, r5
 800366a:	4622      	mov	r2, r4
 800366c:	68b9      	ldr	r1, [r7, #8]
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	f000 fb2f 	bl	8003cd2 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEE9constructISB_JRKSt21piecewise_construct_tSt5tupleIJRS6_EESI_IJEEEEEvPT_DpOT0_>
	}
 8003674:	bf00      	nop
 8003676:	3710      	adds	r7, #16
 8003678:	46bd      	mov	sp, r7
 800367a:	bdb0      	pop	{r4, r5, r7, pc}

0800367c <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	68b9      	ldr	r1, [r7, #8]
 800368c:	68f8      	ldr	r0, [r7, #12]
 800368e:	f000 fb47 	bl	8003d20 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEE10deallocateEPSC_j>
 8003692:	bf00      	nop
 8003694:	3710      	adds	r7, #16
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEE7destroyISA_EEvRSC_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800369a:	b580      	push	{r7, lr}
 800369c:	b082      	sub	sp, #8
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
 80036a2:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 80036a4:	6839      	ldr	r1, [r7, #0]
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 fb5b 	bl	8003d62 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEE7destroyISB_EEvPT_>
	}
 80036ac:	bf00      	nop
 80036ae:	3708      	adds	r7, #8
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEE22_M_deallocate_node_ptrEPSB_>:

  template<typename _NodeAlloc>
    void
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node_ptr(__node_type* __n)
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
    {
      typedef typename __node_alloc_traits::pointer _Ptr;
      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__n);
 80036be:	6838      	ldr	r0, [r7, #0]
 80036c0:	f000 fb5b 	bl	8003d7a <_ZNSt14pointer_traitsIPNSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEE10pointer_toERSB_>
 80036c4:	60f8      	str	r0, [r7, #12]
      __n->~__node_type();
      __node_alloc_traits::deallocate(_M_node_allocator(), __ptr, 1);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f7ff ff94 	bl	80035f4 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEE17_M_node_allocatorEv>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2201      	movs	r2, #1
 80036d0:	68f9      	ldr	r1, [r7, #12]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7ff ffd2 	bl	800367c <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEE10deallocateERSC_PSB_j>
    }
 80036d8:	bf00      	nop
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE>:
  template<typename _Key, typename _Value,
	   typename _Alloc, typename _ExtractKey, typename _Equal,
	   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
	   typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b08a      	sub	sp, #40	; 0x28
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	713a      	strb	r2, [r7, #4]
	       _H1, _H2, _Hash, _RehashPolicy, _Traits>::
    _M_rehash_aux(size_type __bkt_count, true_type)
    {
      __bucket_type* __new_buckets = _M_allocate_buckets(__bkt_count);
 80036ec:	68b9      	ldr	r1, [r7, #8]
 80036ee:	68f8      	ldr	r0, [r7, #12]
 80036f0:	f000 fb4f 	bl	8003d92 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj>
 80036f4:	61f8      	str	r0, [r7, #28]
      __node_type* __p = _M_begin();
 80036f6:	68f8      	ldr	r0, [r7, #12]
 80036f8:	f000 fb68 	bl	8003dcc <_ZNKSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 80036fc:	6278      	str	r0, [r7, #36]	; 0x24
      _M_before_begin._M_nxt = nullptr;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	609a      	str	r2, [r3, #8]
      std::size_t __bbegin_bkt = 0;
 8003704:	2300      	movs	r3, #0
 8003706:	623b      	str	r3, [r7, #32]
      while (__p)
 8003708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370a:	2b00      	cmp	r3, #0
 800370c:	d03d      	beq.n	800378a <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0xaa>
	{
	  __node_type* __next = __p->_M_next();
 800370e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003710:	f7ff ff09 	bl	8003526 <_ZNKSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EE7_M_nextEv>
 8003714:	61b8      	str	r0, [r7, #24]
	  std::size_t __bkt
	    = __hash_code_base::_M_bucket_index(__p, __bkt_count);
 8003716:	68ba      	ldr	r2, [r7, #8]
 8003718:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	f000 fa66 	bl	8003bec <_ZNKSt8__detail15_Hash_code_baseIP19FDCAN_HandleTypeDefSt4pairIKS2_St8functionIFvmPhjEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexEPKNS_10_Hash_nodeIS9_Lb0EEEj>
 8003720:	6178      	str	r0, [r7, #20]
	  if (!__new_buckets[__bkt])
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	69fa      	ldr	r2, [r7, #28]
 8003728:	4413      	add	r3, r2
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d11a      	bne.n	8003766 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0x86>
	    {
	      __p->_M_nxt = _M_before_begin._M_nxt;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	689a      	ldr	r2, [r3, #8]
 8003734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003736:	601a      	str	r2, [r3, #0]
	      _M_before_begin._M_nxt = __p;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800373c:	609a      	str	r2, [r3, #8]
	      __new_buckets[__bkt] = &_M_before_begin;
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	69fa      	ldr	r2, [r7, #28]
 8003744:	4413      	add	r3, r2
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	3208      	adds	r2, #8
 800374a:	601a      	str	r2, [r3, #0]
	      if (__p->_M_nxt)
 800374c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d005      	beq.n	8003760 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0x80>
		__new_buckets[__bbegin_bkt] = __p;
 8003754:	6a3b      	ldr	r3, [r7, #32]
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	69fa      	ldr	r2, [r7, #28]
 800375a:	4413      	add	r3, r2
 800375c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800375e:	601a      	str	r2, [r3, #0]
	      __bbegin_bkt = __bkt;
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	623b      	str	r3, [r7, #32]
 8003764:	e00e      	b.n	8003784 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0xa4>
	    }
	  else
	    {
	      __p->_M_nxt = __new_buckets[__bkt]->_M_nxt;
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	69fa      	ldr	r2, [r7, #28]
 800376c:	4413      	add	r3, r2
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003774:	601a      	str	r2, [r3, #0]
	      __new_buckets[__bkt]->_M_nxt = __p;
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	69fa      	ldr	r2, [r7, #28]
 800377c:	4413      	add	r3, r2
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003782:	601a      	str	r2, [r3, #0]
	    }
	  __p = __next;
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	627b      	str	r3, [r7, #36]	; 0x24
      while (__p)
 8003788:	e7be      	b.n	8003708 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0x28>
	}

      _M_deallocate_buckets();
 800378a:	68f8      	ldr	r0, [r7, #12]
 800378c:	f000 fb2a 	bl	8003de4 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>
      _M_bucket_count = __bkt_count;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	68ba      	ldr	r2, [r7, #8]
 8003794:	605a      	str	r2, [r3, #4]
      _M_buckets = __new_buckets;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	69fa      	ldr	r2, [r7, #28]
 800379a:	601a      	str	r2, [r3, #0]
    }
 800379c:	bf00      	nop
 800379e:	3728      	adds	r7, #40	; 0x28
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <_ZNSt8__detail19_Node_iterator_baseISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEC1EPNS_10_Hash_nodeIS9_Lb0EEE>:
      _Node_iterator_base(__node_type* __p) noexcept
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
      : _M_cur(__p) { }
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	683a      	ldr	r2, [r7, #0]
 80037b2:	601a      	str	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4618      	mov	r0, r3
 80037b8:	370c      	adds	r7, #12
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr

080037c2 <_ZNSt9_Any_data9_M_accessIZN18tutrc_harurobo_lib4C610C4ERNS1_3CANEEUlmPhjE_EERT_v>:
      _M_access()
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b082      	sub	sp, #8
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f7fd f9e0 	bl	8000b90 <_ZNSt9_Any_data9_M_accessEv>
 80037d0:	4603      	mov	r3, r0
 80037d2:	4618      	mov	r0, r3
 80037d4:	3708      	adds	r7, #8
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}

080037da <_ZNKSt8__detail21_Hashtable_ebo_helperILi1ESt4hashIP17TIM_HandleTypeDefELb1EE7_M_cgetEv>:
      const _Tp& _M_cget() const { return static_cast<const _Tp&>(*this); }
 80037da:	b480      	push	{r7}
 80037dc:	b083      	sub	sp, #12
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4618      	mov	r0, r3
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <_ZNKSt8__detail15_Hash_code_baseIP17TIM_HandleTypeDefSt4pairIKS2_St8functionIFvvEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE5_M_h2Ev>:
      _M_h2() const { return __ebo_h2::_M_cget(); }
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f000 f9a2 	bl	8003b42 <_ZNKSt8__detail21_Hashtable_ebo_helperILi2ENS_18_Mod_range_hashingELb1EE7_M_cgetEv>
 80037fe:	4603      	mov	r3, r0
 8003800:	4618      	mov	r0, r3
 8003802:	3708      	adds	r7, #8
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <_ZNKSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EE7_M_nextEv>:
      _M_next() const noexcept
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Hash_node*>(this->_M_nxt); }
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4618      	mov	r0, r3
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <_ZNKSt8__detail15_Hashtable_baseIP17TIM_HandleTypeDefSt4pairIKS2_St8functionIFvvEEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS4_jPNS_10_Hash_nodeIS8_Lb0EEE>:
    _M_equals(const _Key& __k, __hash_code __c, __node_type* __n) const
 8003820:	b5b0      	push	{r4, r5, r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	607a      	str	r2, [r7, #4]
 800382c:	603b      	str	r3, [r7, #0]
      return _Equal_hash_code<__node_type>::_S_equals(__c, *__n)
 800382e:	6839      	ldr	r1, [r7, #0]
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f000 fae7 	bl	8003e04 <_ZNSt8__detail15_Hashtable_baseIP17TIM_HandleTypeDefSt4pairIKS2_St8functionIFvvEEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE16_Equal_hash_codeINS_10_Hash_nodeIS8_Lb0EEEE9_S_equalsEjRKSL_>
 8003836:	4603      	mov	r3, r0
	&& _M_eq()(__k, this->_M_extract()(__n->_M_v()));
 8003838:	2b00      	cmp	r3, #0
 800383a:	d01b      	beq.n	8003874 <_ZNKSt8__detail15_Hashtable_baseIP17TIM_HandleTypeDefSt4pairIKS2_St8functionIFvvEEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS4_jPNS_10_Hash_nodeIS8_Lb0EEE+0x54>
 800383c:	68f8      	ldr	r0, [r7, #12]
 800383e:	f000 faed 	bl	8003e1c <_ZNKSt8__detail15_Hashtable_baseIP17TIM_HandleTypeDefSt4pairIKS2_St8functionIFvvEEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE5_M_eqEv>
 8003842:	4604      	mov	r4, r0
 8003844:	68f8      	ldr	r0, [r7, #12]
 8003846:	f000 faf5 	bl	8003e34 <_ZNKSt8__detail15_Hash_code_baseIP17TIM_HandleTypeDefSt4pairIKS2_St8functionIFvvEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE10_M_extractEv>
 800384a:	4605      	mov	r5, r0
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	4618      	mov	r0, r3
 8003850:	f7ff f8bf 	bl	80029d2 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEEE4_M_vEv>
 8003854:	4603      	mov	r3, r0
 8003856:	4619      	mov	r1, r3
 8003858:	4628      	mov	r0, r5
 800385a:	f000 faf7 	bl	8003e4c <_ZNKSt8__detail10_Select1stclIRSt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOSB_>
 800385e:	4603      	mov	r3, r0
 8003860:	461a      	mov	r2, r3
 8003862:	68b9      	ldr	r1, [r7, #8]
 8003864:	4620      	mov	r0, r4
 8003866:	f000 fb02 	bl	8003e6e <_ZNKSt8equal_toIP17TIM_HandleTypeDefEclERKS1_S4_>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <_ZNKSt8__detail15_Hashtable_baseIP17TIM_HandleTypeDefSt4pairIKS2_St8functionIFvvEEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS4_jPNS_10_Hash_nodeIS8_Lb0EEE+0x54>
 8003870:	2301      	movs	r3, #1
 8003872:	e000      	b.n	8003876 <_ZNKSt8__detail15_Hashtable_baseIP17TIM_HandleTypeDefSt4pairIKS2_St8functionIFvvEEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS4_jPNS_10_Hash_nodeIS8_Lb0EEE+0x56>
 8003874:	2300      	movs	r3, #0
    }
 8003876:	4618      	mov	r0, r3
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bdb0      	pop	{r4, r5, r7, pc}

0800387e <_ZNKSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEPNS9_10_Hash_nodeIS7_Lb0EEE>:
      _M_bucket_index(__node_type* __n) const noexcept
 800387e:	b580      	push	{r7, lr}
 8003880:	b082      	sub	sp, #8
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
 8003886:	6039      	str	r1, [r7, #0]
      { return __hash_code_base::_M_bucket_index(__n, _M_bucket_count); }
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	461a      	mov	r2, r3
 800388e:	6839      	ldr	r1, [r7, #0]
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f000 fb01 	bl	8003e98 <_ZNKSt8__detail15_Hash_code_baseIP17TIM_HandleTypeDefSt4pairIKS2_St8functionIFvvEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexEPKNS_10_Hash_nodeIS8_Lb0EEEj>
 8003896:	4603      	mov	r3, r0
 8003898:	4618      	mov	r0, r3
 800389a:	3708      	adds	r7, #8
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEEE6_M_ptrEv>:
      _M_ptr() noexcept
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f000 fb21 	bl	8003ef0 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEEE7_M_addrEv>
 80038ae:	4603      	mov	r3, r0
 80038b0:	4618      	mov	r0, r3
 80038b2:	3708      	adds	r7, #8
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <_ZNSt10_Head_baseILj0ERKP17TIM_HandleTypeDefLb0EEC1ES3_>:
      constexpr _Head_base(const _Head& __h)
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	683a      	ldr	r2, [r7, #0]
 80038c6:	601a      	str	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4618      	mov	r0, r3
 80038cc:	370c      	adds	r7, #12
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr

080038d6 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEE17_M_node_allocatorEv>:
      _M_node_allocator()
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b082      	sub	sp, #8
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
      { return __ebo_node_alloc::_M_get(); }
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 fb11 	bl	8003f06 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEELb1EE6_M_getEv>
 80038e4:	4603      	mov	r3, r0
 80038e6:	4618      	mov	r0, r3
 80038e8:	3708      	adds	r7, #8
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEE8allocateERSB_j>:
      allocate(allocator_type& __a, size_type __n)
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b082      	sub	sp, #8
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
 80038f6:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80038f8:	2200      	movs	r2, #0
 80038fa:	6839      	ldr	r1, [r7, #0]
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f000 fb0d 	bl	8003f1c <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEE8allocateEjPKv>
 8003902:	4603      	mov	r3, r0
 8003904:	4618      	mov	r0, r3
 8003906:	3708      	adds	r7, #8
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <_ZSt12__to_addressINSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEPT_SC_>:
    __to_address(_Tp* __ptr) noexcept
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
      return __ptr;
 8003914:	687b      	ldr	r3, [r7, #4]
    }
 8003916:	4618      	mov	r0, r3
 8003918:	370c      	adds	r7, #12
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr

08003922 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEE9constructIS9_JRKSt21piecewise_construct_tSt5tupleIJRS5_EESH_IJEEEEEvRSB_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8003922:	b5b0      	push	{r4, r5, r7, lr}
 8003924:	b086      	sub	sp, #24
 8003926:	af02      	add	r7, sp, #8
 8003928:	60f8      	str	r0, [r7, #12]
 800392a:	60b9      	str	r1, [r7, #8]
 800392c:	607a      	str	r2, [r7, #4]
 800392e:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f7ff fa6f 	bl	8002e14 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8003936:	4604      	mov	r4, r0
 8003938:	6838      	ldr	r0, [r7, #0]
 800393a:	f7ff fc67 	bl	800320c <_ZSt7forwardISt5tupleIJRKP17TIM_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800393e:	4605      	mov	r5, r0
 8003940:	6a38      	ldr	r0, [r7, #32]
 8003942:	f7ff fa7d 	bl	8002e40 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003946:	4603      	mov	r3, r0
 8003948:	9300      	str	r3, [sp, #0]
 800394a:	462b      	mov	r3, r5
 800394c:	4622      	mov	r2, r4
 800394e:	68b9      	ldr	r1, [r7, #8]
 8003950:	68f8      	ldr	r0, [r7, #12]
 8003952:	f000 fb14 	bl	8003f7e <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEE9constructISA_JRKSt21piecewise_construct_tSt5tupleIJRS6_EESH_IJEEEEEvPT_DpOT0_>
	}
 8003956:	bf00      	nop
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bdb0      	pop	{r4, r5, r7, pc}

0800395e <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEE10deallocateERSB_PSA_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800395e:	b580      	push	{r7, lr}
 8003960:	b084      	sub	sp, #16
 8003962:	af00      	add	r7, sp, #0
 8003964:	60f8      	str	r0, [r7, #12]
 8003966:	60b9      	str	r1, [r7, #8]
 8003968:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	68b9      	ldr	r1, [r7, #8]
 800396e:	68f8      	ldr	r0, [r7, #12]
 8003970:	f000 fb2c 	bl	8003fcc <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEE10deallocateEPSB_j>
 8003974:	bf00      	nop
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEE7destroyIS9_EEvRSB_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8003986:	6839      	ldr	r1, [r7, #0]
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 fb40 	bl	800400e <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEE7destroyISA_EEvPT_>
	}
 800398e:	bf00      	nop
 8003990:	3708      	adds	r7, #8
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEE22_M_deallocate_node_ptrEPSA_>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node_ptr(__node_type* __n)
 8003996:	b580      	push	{r7, lr}
 8003998:	b084      	sub	sp, #16
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
 800399e:	6039      	str	r1, [r7, #0]
      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__n);
 80039a0:	6838      	ldr	r0, [r7, #0]
 80039a2:	f000 fb40 	bl	8004026 <_ZNSt14pointer_traitsIPNSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEE10pointer_toERSA_>
 80039a6:	60f8      	str	r0, [r7, #12]
      __node_alloc_traits::deallocate(_M_node_allocator(), __ptr, 1);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f7ff ff94 	bl	80038d6 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEE17_M_node_allocatorEv>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2201      	movs	r2, #1
 80039b2:	68f9      	ldr	r1, [r7, #12]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7ff ffd2 	bl	800395e <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEE10deallocateERSB_PSA_j>
    }
 80039ba:	bf00      	nop
 80039bc:	3710      	adds	r7, #16
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b08a      	sub	sp, #40	; 0x28
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	60f8      	str	r0, [r7, #12]
 80039ca:	60b9      	str	r1, [r7, #8]
 80039cc:	713a      	strb	r2, [r7, #4]
      __bucket_type* __new_buckets = _M_allocate_buckets(__bkt_count);
 80039ce:	68b9      	ldr	r1, [r7, #8]
 80039d0:	68f8      	ldr	r0, [r7, #12]
 80039d2:	f000 fb34 	bl	800403e <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj>
 80039d6:	61f8      	str	r0, [r7, #28]
      __node_type* __p = _M_begin();
 80039d8:	68f8      	ldr	r0, [r7, #12]
 80039da:	f000 fb4d 	bl	8004078 <_ZNKSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 80039de:	6278      	str	r0, [r7, #36]	; 0x24
      _M_before_begin._M_nxt = nullptr;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	609a      	str	r2, [r3, #8]
      std::size_t __bbegin_bkt = 0;
 80039e6:	2300      	movs	r3, #0
 80039e8:	623b      	str	r3, [r7, #32]
      while (__p)
 80039ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d03d      	beq.n	8003a6c <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0xaa>
	  __node_type* __next = __p->_M_next();
 80039f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80039f2:	f7ff ff09 	bl	8003808 <_ZNKSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EE7_M_nextEv>
 80039f6:	61b8      	str	r0, [r7, #24]
	    = __hash_code_base::_M_bucket_index(__p, __bkt_count);
 80039f8:	68ba      	ldr	r2, [r7, #8]
 80039fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f000 fa4b 	bl	8003e98 <_ZNKSt8__detail15_Hash_code_baseIP17TIM_HandleTypeDefSt4pairIKS2_St8functionIFvvEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexEPKNS_10_Hash_nodeIS8_Lb0EEEj>
 8003a02:	6178      	str	r0, [r7, #20]
	  if (!__new_buckets[__bkt])
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	69fa      	ldr	r2, [r7, #28]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d11a      	bne.n	8003a48 <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0x86>
	      __p->_M_nxt = _M_before_begin._M_nxt;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	689a      	ldr	r2, [r3, #8]
 8003a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a18:	601a      	str	r2, [r3, #0]
	      _M_before_begin._M_nxt = __p;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a1e:	609a      	str	r2, [r3, #8]
	      __new_buckets[__bkt] = &_M_before_begin;
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	69fa      	ldr	r2, [r7, #28]
 8003a26:	4413      	add	r3, r2
 8003a28:	68fa      	ldr	r2, [r7, #12]
 8003a2a:	3208      	adds	r2, #8
 8003a2c:	601a      	str	r2, [r3, #0]
	      if (__p->_M_nxt)
 8003a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d005      	beq.n	8003a42 <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0x80>
		__new_buckets[__bbegin_bkt] = __p;
 8003a36:	6a3b      	ldr	r3, [r7, #32]
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	69fa      	ldr	r2, [r7, #28]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a40:	601a      	str	r2, [r3, #0]
	      __bbegin_bkt = __bkt;
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	623b      	str	r3, [r7, #32]
 8003a46:	e00e      	b.n	8003a66 <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0xa4>
	      __p->_M_nxt = __new_buckets[__bkt]->_M_nxt;
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	69fa      	ldr	r2, [r7, #28]
 8003a4e:	4413      	add	r3, r2
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a56:	601a      	str	r2, [r3, #0]
	      __new_buckets[__bkt]->_M_nxt = __p;
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	69fa      	ldr	r2, [r7, #28]
 8003a5e:	4413      	add	r3, r2
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a64:	601a      	str	r2, [r3, #0]
	  __p = __next;
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	627b      	str	r3, [r7, #36]	; 0x24
      while (__p)
 8003a6a:	e7be      	b.n	80039ea <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0x28>
      _M_deallocate_buckets();
 8003a6c:	68f8      	ldr	r0, [r7, #12]
 8003a6e:	f000 fb0f 	bl	8004090 <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>
      _M_bucket_count = __bkt_count;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	68ba      	ldr	r2, [r7, #8]
 8003a76:	605a      	str	r2, [r3, #4]
      _M_buckets = __new_buckets;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	69fa      	ldr	r2, [r7, #28]
 8003a7c:	601a      	str	r2, [r3, #0]
    }
 8003a7e:	bf00      	nop
 8003a80:	3728      	adds	r7, #40	; 0x28
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <_ZNSt8__detail19_Node_iterator_baseISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEC1EPNS_10_Hash_nodeIS8_Lb0EEE>:
      _Node_iterator_base(__node_type* __p) noexcept
 8003a86:	b480      	push	{r7}
 8003a88:	b083      	sub	sp, #12
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
 8003a8e:	6039      	str	r1, [r7, #0]
      : _M_cur(__p) { }
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	683a      	ldr	r2, [r7, #0]
 8003a94:	601a      	str	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <_ZNKSt9_Any_data9_M_accessIPKZ7cppmainEUlvE_EERKT_v>:
      _M_access() const
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f7fd f87a 	bl	8000ba6 <_ZNKSt9_Any_data9_M_accessEv>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3708      	adds	r7, #8
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8003ac4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8003ac8:	4618      	mov	r0, r3
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	f7ff ffeb 	bl	8003abc <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	4293      	cmp	r3, r2
 8003aec:	bf8c      	ite	hi
 8003aee:	2301      	movhi	r3, #1
 8003af0:	2300      	movls	r3, #0
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d001      	beq.n	8003afc <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8003af8:	f00d f985 	bl	8010e06 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003afc:	68b8      	ldr	r0, [r7, #8]
 8003afe:	f00d f971 	bl	8010de4 <_Znwj>
 8003b02:	4603      	mov	r3, r0
      }
 8003b04:	4618      	mov	r0, r3
 8003b06:	3710      	adds	r7, #16
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <_ZSt6fill_nIPhjhET_S1_T0_RKT1_>:
  // DR 865. More algorithms that throw away information
  // DR 426. search_n(), fill_n(), and generate_n() with negative n
  template<typename _OI, typename _Size, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
 8003b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b0e:	b085      	sub	sp, #20
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	607a      	str	r2, [r7, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_OutputIteratorConcept<_OI, _Tp>)

      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 8003b18:	68fc      	ldr	r4, [r7, #12]
 8003b1a:	68b8      	ldr	r0, [r7, #8]
 8003b1c:	f7fc fec8 	bl	80008b0 <_ZSt17__size_to_integerj>
 8003b20:	4605      	mov	r5, r0
			       std::__iterator_category(__first));
 8003b22:	f107 030c 	add.w	r3, r7, #12
 8003b26:	4618      	mov	r0, r3
 8003b28:	f000 fac2 	bl	80040b0 <_ZSt19__iterator_categoryIPhENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 8003b2c:	4633      	mov	r3, r6
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	4629      	mov	r1, r5
 8003b32:	4620      	mov	r0, r4
 8003b34:	f000 fac7 	bl	80040c6 <_ZSt10__fill_n_aIPhjhET_S1_T0_RKT1_St26random_access_iterator_tag>
 8003b38:	4603      	mov	r3, r0
    }
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3714      	adds	r7, #20
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b42 <_ZNKSt8__detail21_Hashtable_ebo_helperILi2ENS_18_Mod_range_hashingELb1EE7_M_cgetEv>:
      const _Tp& _M_cget() const { return static_cast<const _Tp&>(*this); }
 8003b42:	b480      	push	{r7}
 8003b44:	b083      	sub	sp, #12
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <_ZNSt8__detail15_Hashtable_baseIP19FDCAN_HandleTypeDefSt4pairIKS2_St8functionIFvmPhjEEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE16_Equal_hash_codeINS_10_Hash_nodeIS9_Lb0EEEE9_S_equalsEjRKSM_>:
       _S_equals(__hash_code, const _NodeT&)
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
       { return true; }
 8003b62:	2301      	movs	r3, #1
 8003b64:	4618      	mov	r0, r3
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <_ZNKSt8__detail15_Hashtable_baseIP19FDCAN_HandleTypeDefSt4pairIKS2_St8functionIFvmPhjEEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE5_M_eqEv>:
    _M_eq() const { return _EqualEBO::_M_cget(); }
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 fabf 	bl	80040fc <_ZNKSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIP19FDCAN_HandleTypeDefELb1EE7_M_cgetEv>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	4618      	mov	r0, r3
 8003b82:	3708      	adds	r7, #8
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <_ZNKSt8__detail15_Hash_code_baseIP19FDCAN_HandleTypeDefSt4pairIKS2_St8functionIFvmPhjEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE10_M_extractEv>:
      _M_extract() const { return __ebo_extract_key::_M_cget(); }
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 fabe 	bl	8004112 <_ZNKSt8__detail21_Hashtable_ebo_helperILi0ENS_10_Select1stELb1EE7_M_cgetEv>
 8003b96:	4603      	mov	r3, r0
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3708      	adds	r7, #8
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <_ZNKSt8__detail10_Select1stclIRSt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOSC_>:
      operator()(_Tp&& __x) const
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
      { return std::get<0>(std::forward<_Tp>(__x)); }
 8003baa:	6838      	ldr	r0, [r7, #0]
 8003bac:	f000 fabc 	bl	8004128 <_ZSt7forwardIRSt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEEOT_RNSt16remove_referenceISA_E4typeE>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f000 fac3 	bl	800413e <_ZSt3getILj0EKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEERNSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeERSB_>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3708      	adds	r7, #8
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <_ZNKSt8equal_toIP19FDCAN_HandleTypeDefEclERKS1_S4_>:
  template<typename _Tp>
    struct equal_to : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 8003bc2:	b480      	push	{r7}
 8003bc4:	b085      	sub	sp, #20
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	60f8      	str	r0, [r7, #12]
 8003bca:	60b9      	str	r1, [r7, #8]
 8003bcc:	607a      	str	r2, [r7, #4]
      { return __x == __y; }
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	bf0c      	ite	eq
 8003bda:	2301      	moveq	r3, #1
 8003bdc:	2300      	movne	r3, #0
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	4618      	mov	r0, r3
 8003be2:	3714      	adds	r7, #20
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <_ZNKSt8__detail15_Hash_code_baseIP19FDCAN_HandleTypeDefSt4pairIKS2_St8functionIFvmPhjEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexEPKNS_10_Hash_nodeIS9_Lb0EEEj>:
      _M_bucket_index(const __node_type* __p, std::size_t __bkt_count) const
 8003bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
      { return _M_h2()(_M_h1()(_M_extract()(__p->_M_v())), __bkt_count); }
 8003bf8:	68f8      	ldr	r0, [r7, #12]
 8003bfa:	f7ff fc88 	bl	800350e <_ZNKSt8__detail15_Hash_code_baseIP19FDCAN_HandleTypeDefSt4pairIKS2_St8functionIFvmPhjEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE5_M_h2Ev>
 8003bfe:	4604      	mov	r4, r0
 8003c00:	68f8      	ldr	r0, [r7, #12]
 8003c02:	f7ff f87a 	bl	8002cfa <_ZNKSt8__detail15_Hash_code_baseIP19FDCAN_HandleTypeDefSt4pairIKS2_St8functionIFvmPhjEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE5_M_h1Ev>
 8003c06:	4605      	mov	r5, r0
 8003c08:	68f8      	ldr	r0, [r7, #12]
 8003c0a:	f7ff ffbd 	bl	8003b88 <_ZNKSt8__detail15_Hash_code_baseIP19FDCAN_HandleTypeDefSt4pairIKS2_St8functionIFvmPhjEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE10_M_extractEv>
 8003c0e:	4606      	mov	r6, r0
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f000 fa9f 	bl	8004156 <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEE4_M_vEv>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	4630      	mov	r0, r6
 8003c1e:	f000 faa6 	bl	800416e <_ZNKSt8__detail10_Select1stclIRKSt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOSD_>
 8003c22:	4603      	mov	r3, r0
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4619      	mov	r1, r3
 8003c28:	4628      	mov	r0, r5
 8003c2a:	f7ff f872 	bl	8002d12 <_ZNKSt4hashIP19FDCAN_HandleTypeDefEclES1_>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	4619      	mov	r1, r3
 8003c34:	4620      	mov	r0, r4
 8003c36:	f7fc fff0 	bl	8000c1a <_ZNKSt8__detail18_Mod_range_hashingclEjj>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3714      	adds	r7, #20
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c44 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEE7_M_addrEv>:
      _M_addr() noexcept
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 8003c4c:	687b      	ldr	r3, [r7, #4]
      }
 8003c4e:	4618      	mov	r0, r3
 8003c50:	370c      	adds	r7, #12
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr

08003c5a <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEELb1EE6_M_getEv>:
      _Tp& _M_get() { return static_cast<_Tp&>(*this); }
 8003c5a:	b480      	push	{r7}
 8003c5c:	b083      	sub	sp, #12
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4618      	mov	r0, r3
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	f000 fa87 	bl	8004190 <_ZNK9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEE11_M_max_sizeEv>
 8003c82:	4602      	mov	r2, r0
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	4293      	cmp	r3, r2
 8003c88:	bf8c      	ite	hi
 8003c8a:	2301      	movhi	r3, #1
 8003c8c:	2300      	movls	r3, #0
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d001      	beq.n	8003c98 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8003c94:	f00d f8b7 	bl	8010e06 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003c98:	68ba      	ldr	r2, [r7, #8]
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	005b      	lsls	r3, r3, #1
 8003c9e:	4413      	add	r3, r2
 8003ca0:	00db      	lsls	r3, r3, #3
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f00d f89e 	bl	8010de4 <_Znwj>
 8003ca8:	4603      	mov	r3, r0
      }
 8003caa:	4618      	mov	r0, r3
 8003cac:	3710      	adds	r7, #16
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}

08003cb2 <_ZNSt5tupleIJRKP19FDCAN_HandleTypeDefEEC1EOS4_>:
	noexcept(__nothrow_constructible<_UElements...>())
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 8003cb2:	b580      	push	{r7, lr}
 8003cb4:	b082      	sub	sp, #8
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
 8003cba:	6039      	str	r1, [r7, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	683a      	ldr	r2, [r7, #0]
 8003cc0:	4611      	mov	r1, r2
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f000 fa72 	bl	80041ac <_ZNSt11_Tuple_implILj0EJRKP19FDCAN_HandleTypeDefEEC1EOS4_>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3708      	adds	r7, #8
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEE9constructISB_JRKSt21piecewise_construct_tSt5tupleIJRS6_EESI_IJEEEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8003cd2:	b590      	push	{r4, r7, lr}
 8003cd4:	b089      	sub	sp, #36	; 0x24
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	60f8      	str	r0, [r7, #12]
 8003cda:	60b9      	str	r1, [r7, #8]
 8003cdc:	607a      	str	r2, [r7, #4]
 8003cde:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f7ff f897 	bl	8002e14 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8003ce6:	6838      	ldr	r0, [r7, #0]
 8003ce8:	f7ff f89f 	bl	8002e2a <_ZSt7forwardISt5tupleIJRKP19FDCAN_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8003cec:	4602      	mov	r2, r0
 8003cee:	f107 0318 	add.w	r3, r7, #24
 8003cf2:	4611      	mov	r1, r2
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f7ff ffdc 	bl	8003cb2 <_ZNSt5tupleIJRKP19FDCAN_HandleTypeDefEEC1EOS4_>
 8003cfa:	f107 0418 	add.w	r4, r7, #24
 8003cfe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d00:	f7ff f89e 	bl	8002e40 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	4619      	mov	r1, r3
 8003d08:	2014      	movs	r0, #20
 8003d0a:	f7fc fddc 	bl	80008c6 <_ZnwjPv>
 8003d0e:	7f3b      	ldrb	r3, [r7, #28]
 8003d10:	4622      	mov	r2, r4
 8003d12:	7d39      	ldrb	r1, [r7, #20]
 8003d14:	f000 fa61 	bl	80041da <_ZNSt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EESB_IJDpT0_EE>
 8003d18:	bf00      	nop
 8003d1a:	3724      	adds	r7, #36	; 0x24
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd90      	pop	{r4, r7, pc}

08003d20 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEE10deallocateEPSC_j>:
      deallocate(_Tp* __p, size_type __t)
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	005b      	lsls	r3, r3, #1
 8003d32:	4413      	add	r3, r2
 8003d34:	00db      	lsls	r3, r3, #3
 8003d36:	4619      	mov	r1, r3
 8003d38:	68b8      	ldr	r0, [r7, #8]
 8003d3a:	f00d f851 	bl	8010de0 <_ZdlPvj>
      }
 8003d3e:	bf00      	nop
 8003d40:	3710      	adds	r7, #16
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <_ZNSt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEED1Ev>:
   *  @tparam _T2  Type of second object.
   *
   *  <https://gcc.gnu.org/onlinedocs/libstdc++/manual/utilities.html>
   */
  template<typename _T1, typename _T2>
    struct pair
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b082      	sub	sp, #8
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	3304      	adds	r3, #4
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7fd f9ae 	bl	80010b4 <_ZNSt8functionIFvmPhjEED1Ev>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3708      	adds	r7, #8
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEE7destroyISB_EEvPT_>:
	destroy(_Up* __p)
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b082      	sub	sp, #8
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
 8003d6a:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8003d6c:	6838      	ldr	r0, [r7, #0]
 8003d6e:	f7ff ffea 	bl	8003d46 <_ZNSt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEED1Ev>
 8003d72:	bf00      	nop
 8003d74:	3708      	adds	r7, #8
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <_ZNSt14pointer_traitsIPNSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEE10pointer_toERSB_>:
      pointer_to(__make_not_void<element_type>& __r) noexcept
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b082      	sub	sp, #8
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
      { return std::addressof(__r); }
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 fa3d 	bl	8004202 <_ZSt9addressofINSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEPT_RSC_>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3708      	adds	r7, #8
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj>:
      _M_allocate_buckets(size_type __bkt_count)
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b082      	sub	sp, #8
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
 8003d9a:	6039      	str	r1, [r7, #0]
	if (__builtin_expect(__bkt_count == 1, false))
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	bf0c      	ite	eq
 8003da2:	2301      	moveq	r3, #1
 8003da4:	2300      	movne	r3, #0
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d005      	beq.n	8003db8 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj+0x26>
	    _M_single_bucket = nullptr;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	619a      	str	r2, [r3, #24]
	    return &_M_single_bucket;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	3318      	adds	r3, #24
 8003db6:	e005      	b.n	8003dc4 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj+0x32>
	return __hashtable_alloc::_M_allocate_buckets(__bkt_count);
 8003db8:	6839      	ldr	r1, [r7, #0]
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 fa2d 	bl	800421a <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEE19_M_allocate_bucketsEj>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	bf00      	nop
      }
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3708      	adds	r7, #8
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <_ZNKSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>:
      _M_begin() const
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
      { return static_cast<__node_type*>(_M_before_begin._M_nxt); }
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>:
      _M_deallocate_buckets()
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6819      	ldr	r1, [r3, #0]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	461a      	mov	r2, r3
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 fa3c 	bl	8004274 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNSA_15_Hash_node_baseEj>
 8003dfc:	bf00      	nop
 8003dfe:	3708      	adds	r7, #8
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <_ZNSt8__detail15_Hashtable_baseIP17TIM_HandleTypeDefSt4pairIKS2_St8functionIFvvEEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE16_Equal_hash_codeINS_10_Hash_nodeIS8_Lb0EEEE9_S_equalsEjRKSL_>:
       _S_equals(__hash_code, const _NodeT&)
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
       { return true; }
 8003e0e:	2301      	movs	r3, #1
 8003e10:	4618      	mov	r0, r3
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <_ZNKSt8__detail15_Hashtable_baseIP17TIM_HandleTypeDefSt4pairIKS2_St8functionIFvvEEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE5_M_eqEv>:
    _M_eq() const { return _EqualEBO::_M_cget(); }
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f000 fa3c 	bl	80042a2 <_ZNKSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIP17TIM_HandleTypeDefELb1EE7_M_cgetEv>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3708      	adds	r7, #8
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <_ZNKSt8__detail15_Hash_code_baseIP17TIM_HandleTypeDefSt4pairIKS2_St8functionIFvvEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE10_M_extractEv>:
      _M_extract() const { return __ebo_extract_key::_M_cget(); }
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f000 f968 	bl	8004112 <_ZNKSt8__detail21_Hashtable_ebo_helperILi0ENS_10_Select1stELb1EE7_M_cgetEv>
 8003e42:	4603      	mov	r3, r0
 8003e44:	4618      	mov	r0, r3
 8003e46:	3708      	adds	r7, #8
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <_ZNKSt8__detail10_Select1stclIRSt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOSB_>:
      operator()(_Tp&& __x) const
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
      { return std::get<0>(std::forward<_Tp>(__x)); }
 8003e56:	6838      	ldr	r0, [r7, #0]
 8003e58:	f000 fa2e 	bl	80042b8 <_ZSt7forwardIRSt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f000 fa35 	bl	80042ce <_ZSt3getILj0EKP17TIM_HandleTypeDefSt8functionIFvvEEERNSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeERSA_>
 8003e64:	4603      	mov	r3, r0
 8003e66:	4618      	mov	r0, r3
 8003e68:	3708      	adds	r7, #8
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}

08003e6e <_ZNKSt8equal_toIP17TIM_HandleTypeDefEclERKS1_S4_>:
      operator()(const _Tp& __x, const _Tp& __y) const
 8003e6e:	b480      	push	{r7}
 8003e70:	b085      	sub	sp, #20
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	60f8      	str	r0, [r7, #12]
 8003e76:	60b9      	str	r1, [r7, #8]
 8003e78:	607a      	str	r2, [r7, #4]
      { return __x == __y; }
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	bf0c      	ite	eq
 8003e86:	2301      	moveq	r3, #1
 8003e88:	2300      	movne	r3, #0
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3714      	adds	r7, #20
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <_ZNKSt8__detail15_Hash_code_baseIP17TIM_HandleTypeDefSt4pairIKS2_St8functionIFvvEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexEPKNS_10_Hash_nodeIS8_Lb0EEEj>:
      _M_bucket_index(const __node_type* __p, std::size_t __bkt_count) const
 8003e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	607a      	str	r2, [r7, #4]
      { return _M_h2()(_M_h1()(_M_extract()(__p->_M_v())), __bkt_count); }
 8003ea4:	68f8      	ldr	r0, [r7, #12]
 8003ea6:	f7ff fca3 	bl	80037f0 <_ZNKSt8__detail15_Hash_code_baseIP17TIM_HandleTypeDefSt4pairIKS2_St8functionIFvvEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE5_M_h2Ev>
 8003eaa:	4604      	mov	r4, r0
 8003eac:	68f8      	ldr	r0, [r7, #12]
 8003eae:	f7ff f920 	bl	80030f2 <_ZNKSt8__detail15_Hash_code_baseIP17TIM_HandleTypeDefSt4pairIKS2_St8functionIFvvEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE5_M_h1Ev>
 8003eb2:	4605      	mov	r5, r0
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	f7ff ffbd 	bl	8003e34 <_ZNKSt8__detail15_Hash_code_baseIP17TIM_HandleTypeDefSt4pairIKS2_St8functionIFvvEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE10_M_extractEv>
 8003eba:	4606      	mov	r6, r0
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f000 fa11 	bl	80042e6 <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEEE4_M_vEv>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	4630      	mov	r0, r6
 8003eca:	f000 fa18 	bl	80042fe <_ZNKSt8__detail10_Select1stclIRKSt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOSC_>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	4628      	mov	r0, r5
 8003ed6:	f7ff f918 	bl	800310a <_ZNKSt4hashIP17TIM_HandleTypeDefEclES1_>
 8003eda:	4603      	mov	r3, r0
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	4619      	mov	r1, r3
 8003ee0:	4620      	mov	r0, r4
 8003ee2:	f7fc fe9a 	bl	8000c1a <_ZNKSt8__detail18_Mod_range_hashingclEjj>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3714      	adds	r7, #20
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ef0 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEEE7_M_addrEv>:
      _M_addr() noexcept
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 8003ef8:	687b      	ldr	r3, [r7, #4]
      }
 8003efa:	4618      	mov	r0, r3
 8003efc:	370c      	adds	r7, #12
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr

08003f06 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEELb1EE6_M_getEv>:
      _Tp& _M_get() { return static_cast<_Tp&>(*this); }
 8003f06:	b480      	push	{r7}
 8003f08:	b083      	sub	sp, #12
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4618      	mov	r0, r3
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8003f28:	68f8      	ldr	r0, [r7, #12]
 8003f2a:	f000 f9f9 	bl	8004320 <_ZNK9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEE11_M_max_sizeEv>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	4293      	cmp	r3, r2
 8003f34:	bf8c      	ite	hi
 8003f36:	2301      	movhi	r3, #1
 8003f38:	2300      	movls	r3, #0
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d001      	beq.n	8003f44 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8003f40:	f00c ff61 	bl	8010e06 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003f44:	68ba      	ldr	r2, [r7, #8]
 8003f46:	4613      	mov	r3, r2
 8003f48:	005b      	lsls	r3, r3, #1
 8003f4a:	4413      	add	r3, r2
 8003f4c:	00db      	lsls	r3, r3, #3
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f00c ff48 	bl	8010de4 <_Znwj>
 8003f54:	4603      	mov	r3, r0
      }
 8003f56:	4618      	mov	r0, r3
 8003f58:	3710      	adds	r7, #16
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}

08003f5e <_ZNSt5tupleIJRKP17TIM_HandleTypeDefEEC1EOS4_>:
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	b082      	sub	sp, #8
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
 8003f66:	6039      	str	r1, [r7, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	4611      	mov	r1, r2
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f000 f9e4 	bl	800433c <_ZNSt11_Tuple_implILj0EJRKP17TIM_HandleTypeDefEEC1EOS4_>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4618      	mov	r0, r3
 8003f78:	3708      	adds	r7, #8
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEE9constructISA_JRKSt21piecewise_construct_tSt5tupleIJRS6_EESH_IJEEEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8003f7e:	b590      	push	{r4, r7, lr}
 8003f80:	b089      	sub	sp, #36	; 0x24
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	60f8      	str	r0, [r7, #12]
 8003f86:	60b9      	str	r1, [r7, #8]
 8003f88:	607a      	str	r2, [r7, #4]
 8003f8a:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f7fe ff41 	bl	8002e14 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8003f92:	6838      	ldr	r0, [r7, #0]
 8003f94:	f7ff f93a 	bl	800320c <_ZSt7forwardISt5tupleIJRKP17TIM_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	f107 0318 	add.w	r3, r7, #24
 8003f9e:	4611      	mov	r1, r2
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7ff ffdc 	bl	8003f5e <_ZNSt5tupleIJRKP17TIM_HandleTypeDefEEC1EOS4_>
 8003fa6:	f107 0418 	add.w	r4, r7, #24
 8003faa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fac:	f7fe ff48 	bl	8002e40 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	2014      	movs	r0, #20
 8003fb6:	f7fc fc86 	bl	80008c6 <_ZnwjPv>
 8003fba:	7f3b      	ldrb	r3, [r7, #28]
 8003fbc:	4622      	mov	r2, r4
 8003fbe:	7d39      	ldrb	r1, [r7, #20]
 8003fc0:	f000 f9d3 	bl	800436a <_ZNSt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EESA_IJDpT0_EE>
 8003fc4:	bf00      	nop
 8003fc6:	3724      	adds	r7, #36	; 0x24
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd90      	pop	{r4, r7, pc}

08003fcc <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEE10deallocateEPSB_j>:
      deallocate(_Tp* __p, size_type __t)
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	4613      	mov	r3, r2
 8003fdc:	005b      	lsls	r3, r3, #1
 8003fde:	4413      	add	r3, r2
 8003fe0:	00db      	lsls	r3, r3, #3
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	68b8      	ldr	r0, [r7, #8]
 8003fe6:	f00c fefb 	bl	8010de0 <_ZdlPvj>
      }
 8003fea:	bf00      	nop
 8003fec:	3710      	adds	r7, #16
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <_ZNSt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEED1Ev>:
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	b082      	sub	sp, #8
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	3304      	adds	r3, #4
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7fd fd12 	bl	8001a28 <_ZNSt8functionIFvvEED1Ev>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4618      	mov	r0, r3
 8004008:	3708      	adds	r7, #8
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}

0800400e <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEE7destroyISA_EEvPT_>:
	destroy(_Up* __p)
 800400e:	b580      	push	{r7, lr}
 8004010:	b082      	sub	sp, #8
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
 8004016:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8004018:	6838      	ldr	r0, [r7, #0]
 800401a:	f7ff ffea 	bl	8003ff2 <_ZNSt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEED1Ev>
 800401e:	bf00      	nop
 8004020:	3708      	adds	r7, #8
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}

08004026 <_ZNSt14pointer_traitsIPNSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEE10pointer_toERSA_>:
      pointer_to(__make_not_void<element_type>& __r) noexcept
 8004026:	b580      	push	{r7, lr}
 8004028:	b082      	sub	sp, #8
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
      { return std::addressof(__r); }
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 f9af 	bl	8004392 <_ZSt9addressofINSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEPT_RSB_>
 8004034:	4603      	mov	r3, r0
 8004036:	4618      	mov	r0, r3
 8004038:	3708      	adds	r7, #8
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj>:
      _M_allocate_buckets(size_type __bkt_count)
 800403e:	b580      	push	{r7, lr}
 8004040:	b082      	sub	sp, #8
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
 8004046:	6039      	str	r1, [r7, #0]
	if (__builtin_expect(__bkt_count == 1, false))
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	2b01      	cmp	r3, #1
 800404c:	bf0c      	ite	eq
 800404e:	2301      	moveq	r3, #1
 8004050:	2300      	movne	r3, #0
 8004052:	b2db      	uxtb	r3, r3
 8004054:	2b00      	cmp	r3, #0
 8004056:	d005      	beq.n	8004064 <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj+0x26>
	    _M_single_bucket = nullptr;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	619a      	str	r2, [r3, #24]
	    return &_M_single_bucket;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	3318      	adds	r3, #24
 8004062:	e005      	b.n	8004070 <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj+0x32>
	return __hashtable_alloc::_M_allocate_buckets(__bkt_count);
 8004064:	6839      	ldr	r1, [r7, #0]
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 f99f 	bl	80043aa <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEE19_M_allocate_bucketsEj>
 800406c:	4603      	mov	r3, r0
 800406e:	bf00      	nop
      }
 8004070:	4618      	mov	r0, r3
 8004072:	3708      	adds	r7, #8
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <_ZNKSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>:
      _M_begin() const
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
      { return static_cast<__node_type*>(_M_before_begin._M_nxt); }
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	4618      	mov	r0, r3
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>:
      _M_deallocate_buckets()
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6819      	ldr	r1, [r3, #0]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	461a      	mov	r2, r3
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f9ae 	bl	8004404 <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS9_15_Hash_node_baseEj>
 80040a8:	bf00      	nop
 80040aa:	3708      	adds	r7, #8
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <_ZSt19__iterator_categoryIPhENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 80040b8:	bf00      	nop
 80040ba:	4618      	mov	r0, r3
 80040bc:	370c      	adds	r7, #12
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr

080040c6 <_ZSt10__fill_n_aIPhjhET_S1_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b084      	sub	sp, #16
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	60f8      	str	r0, [r7, #12]
 80040ce:	60b9      	str	r1, [r7, #8]
 80040d0:	607a      	str	r2, [r7, #4]
 80040d2:	703b      	strb	r3, [r7, #0]
      if (__n <= 0)
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d101      	bne.n	80040de <_ZSt10__fill_n_aIPhjhET_S1_T0_RKT1_St26random_access_iterator_tag+0x18>
	return __first;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	e00a      	b.n	80040f4 <_ZSt10__fill_n_aIPhjhET_S1_T0_RKT1_St26random_access_iterator_tag+0x2e>
      std::__fill_a(__first, __first + __n, __value);
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	4413      	add	r3, r2
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	4619      	mov	r1, r3
 80040e8:	68f8      	ldr	r0, [r7, #12]
 80040ea:	f000 f9a2 	bl	8004432 <_ZSt8__fill_aIPhhEvT_S1_RKT0_>
      return __first + __n;
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	4413      	add	r3, r2
    }
 80040f4:	4618      	mov	r0, r3
 80040f6:	3710      	adds	r7, #16
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <_ZNKSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIP19FDCAN_HandleTypeDefELb1EE7_M_cgetEv>:
      const _Tp& _M_cget() const { return static_cast<const _Tp&>(*this); }
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4618      	mov	r0, r3
 8004108:	370c      	adds	r7, #12
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr

08004112 <_ZNKSt8__detail21_Hashtable_ebo_helperILi0ENS_10_Select1stELb1EE7_M_cgetEv>:
 8004112:	b480      	push	{r7}
 8004114:	b083      	sub	sp, #12
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4618      	mov	r0, r3
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <_ZSt7forwardIRSt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEEOT_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4618      	mov	r0, r3
 8004134:	370c      	adds	r7, #12
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr

0800413e <_ZSt3getILj0EKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEERNSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeERSB_>:
        { return std::forward<const _Tp2>(__pair.second); }
    };

  template<std::size_t _Int, class _Tp1, class _Tp2>
    constexpr typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&
    get(std::pair<_Tp1, _Tp2>& __in) noexcept
 800413e:	b580      	push	{r7, lr}
 8004140:	b082      	sub	sp, #8
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
    { return __pair_get<_Int>::__get(__in); }
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 f982 	bl	8004450 <_ZNSt10__pair_getILj0EE5__getIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEERT_RSt4pairIS9_T0_E>
 800414c:	4603      	mov	r3, r0
 800414e:	4618      	mov	r0, r3
 8004150:	3708      	adds	r7, #8
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}

08004156 <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEE4_M_vEv>:
      _M_v() const noexcept
 8004156:	b580      	push	{r7, lr}
 8004158:	b082      	sub	sp, #8
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
      { return *_M_valptr(); }
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 f981 	bl	8004466 <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEE9_M_valptrEv>
 8004164:	4603      	mov	r3, r0
 8004166:	4618      	mov	r0, r3
 8004168:	3708      	adds	r7, #8
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}

0800416e <_ZNKSt8__detail10_Select1stclIRKSt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOSD_>:
      operator()(_Tp&& __x) const
 800416e:	b580      	push	{r7, lr}
 8004170:	b082      	sub	sp, #8
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
 8004176:	6039      	str	r1, [r7, #0]
      { return std::get<0>(std::forward<_Tp>(__x)); }
 8004178:	6838      	ldr	r0, [r7, #0]
 800417a:	f000 f982 	bl	8004482 <_ZSt7forwardIRKSt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEEOT_RNSt16remove_referenceISB_E4typeE>
 800417e:	4603      	mov	r3, r0
 8004180:	4618      	mov	r0, r3
 8004182:	f000 f989 	bl	8004498 <_ZSt3getILj0EKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEERKNSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeERKSB_>
 8004186:	4603      	mov	r3, r0
 8004188:	4618      	mov	r0, r3
 800418a:	3708      	adds	r7, #8
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <_ZNK9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8004198:	4b03      	ldr	r3, [pc, #12]	; (80041a8 <_ZNK9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEE11_M_max_sizeEv+0x18>)
      }
 800419a:	4618      	mov	r0, r3
 800419c:	370c      	adds	r7, #12
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop
 80041a8:	05555555 	.word	0x05555555

080041ac <_ZNSt11_Tuple_implILj0EJRKP19FDCAN_HandleTypeDefEEC1EOS4_>:
      _Tuple_impl(_Tuple_impl&& __in)
 80041ac:	b590      	push	{r4, r7, lr}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 80041b6:	687c      	ldr	r4, [r7, #4]
 80041b8:	6838      	ldr	r0, [r7, #0]
 80041ba:	f000 f979 	bl	80044b0 <_ZNSt11_Tuple_implILj0EJRKP19FDCAN_HandleTypeDefEE7_M_headERS4_>
 80041be:	4603      	mov	r3, r0
 80041c0:	4618      	mov	r0, r3
 80041c2:	f000 f982 	bl	80044ca <_ZSt7forwardIRKP19FDCAN_HandleTypeDefEOT_RNSt16remove_referenceIS4_E4typeE>
 80041c6:	4603      	mov	r3, r0
 80041c8:	4619      	mov	r1, r3
 80041ca:	4620      	mov	r0, r4
 80041cc:	f7ff fa03 	bl	80035d6 <_ZNSt10_Head_baseILj0ERKP19FDCAN_HandleTypeDefLb0EEC1ES3_>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4618      	mov	r0, r3
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd90      	pop	{r4, r7, pc}

080041da <_ZNSt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EESB_IJDpT0_EE>:
  */
  template<class _T1, class _T2>
    template<typename... _Args1, typename... _Args2>
      _GLIBCXX20_CONSTEXPR
      inline
      pair<_T1, _T2>::
 80041da:	b5b0      	push	{r4, r5, r7, lr}
 80041dc:	b086      	sub	sp, #24
 80041de:	af02      	add	r7, sp, #8
 80041e0:	60f8      	str	r0, [r7, #12]
 80041e2:	7239      	strb	r1, [r7, #8]
 80041e4:	607a      	str	r2, [r7, #4]
 80041e6:	703b      	strb	r3, [r7, #0]
      pair(piecewise_construct_t,
	   tuple<_Args1...> __first, tuple<_Args2...> __second)
      : pair(__first, __second,
	     typename _Build_index_tuple<sizeof...(_Args1)>::__type(),
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 80041e8:	463a      	mov	r2, r7
 80041ea:	f88d 4000 	strb.w	r4, [sp]
 80041ee:	462b      	mov	r3, r5
 80041f0:	6879      	ldr	r1, [r7, #4]
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f000 f974 	bl	80044e0 <_ZNSt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERSA_IJDpT1_EESt12_Index_tupleIJXspT0_EEESJ_IJXspT2_EEE>
      { }
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	4618      	mov	r0, r3
 80041fc:	3710      	adds	r7, #16
 80041fe:	46bd      	mov	sp, r7
 8004200:	bdb0      	pop	{r4, r5, r7, pc}

08004202 <_ZSt9addressofINSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEPT_RSC_>:
    addressof(_Tp& __r) noexcept
 8004202:	b580      	push	{r7, lr}
 8004204:	b082      	sub	sp, #8
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 f984 	bl	8004518 <_ZSt11__addressofINSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEPT_RSC_>
 8004210:	4603      	mov	r3, r0
 8004212:	4618      	mov	r0, r3
 8004214:	3708      	adds	r7, #8
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}

0800421a <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEE19_M_allocate_bucketsEj>:
	}
    }

  template<typename _NodeAlloc>
    typename _Hashtable_alloc<_NodeAlloc>::__bucket_type*
    _Hashtable_alloc<_NodeAlloc>::_M_allocate_buckets(std::size_t __bkt_count)
 800421a:	b590      	push	{r4, r7, lr}
 800421c:	b087      	sub	sp, #28
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
 8004222:	6039      	str	r1, [r7, #0]
    {
      __bucket_alloc_type __alloc(_M_node_allocator());
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f7ff f9e5 	bl	80035f4 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEE17_M_node_allocatorEv>
 800422a:	4602      	mov	r2, r0
 800422c:	f107 030c 	add.w	r3, r7, #12
 8004230:	4611      	mov	r1, r2
 8004232:	4618      	mov	r0, r3
 8004234:	f000 f97b 	bl	800452e <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEERKSaIT_E>

      auto __ptr = __bucket_alloc_traits::allocate(__alloc, __bkt_count);
 8004238:	f107 030c 	add.w	r3, r7, #12
 800423c:	6839      	ldr	r1, [r7, #0]
 800423e:	4618      	mov	r0, r3
 8004240:	f000 f98e 	bl	8004560 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE8allocateERS3_j>
 8004244:	6178      	str	r0, [r7, #20]
      __bucket_type* __p = std::__to_address(__ptr);
 8004246:	6978      	ldr	r0, [r7, #20]
 8004248:	f000 f999 	bl	800457e <_ZSt12__to_addressIPNSt8__detail15_Hash_node_baseEEPT_S4_>
 800424c:	6138      	str	r0, [r7, #16]
      __builtin_memset(__p, 0, __bkt_count * sizeof(__bucket_type));
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	4610      	mov	r0, r2
 8004256:	461a      	mov	r2, r3
 8004258:	2100      	movs	r1, #0
 800425a:	f00d fd0b 	bl	8011c74 <memset>
      return __p;
 800425e:	693c      	ldr	r4, [r7, #16]
      __bucket_alloc_type __alloc(_M_node_allocator());
 8004260:	f107 030c 	add.w	r3, r7, #12
 8004264:	4618      	mov	r0, r3
 8004266:	f000 f96f 	bl	8004548 <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>
      return __p;
 800426a:	4623      	mov	r3, r4
    }
 800426c:	4618      	mov	r0, r3
 800426e:	371c      	adds	r7, #28
 8004270:	46bd      	mov	sp, r7
 8004272:	bd90      	pop	{r4, r7, pc}

08004274 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNSA_15_Hash_node_baseEj>:
      _M_deallocate_buckets(__bucket_type* __bkts, size_type __bkt_count)
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	607a      	str	r2, [r7, #4]
	if (_M_uses_single_bucket(__bkts))
 8004280:	68b9      	ldr	r1, [r7, #8]
 8004282:	68f8      	ldr	r0, [r7, #12]
 8004284:	f000 f986 	bl	8004594 <_ZNKSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_uses_single_bucketEPPNSA_15_Hash_node_baseE>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d105      	bne.n	800429a <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNSA_15_Hash_node_baseEj+0x26>
	__hashtable_alloc::_M_deallocate_buckets(__bkts, __bkt_count);
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	68b9      	ldr	r1, [r7, #8]
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	f000 f996 	bl	80045c4 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEE21_M_deallocate_bucketsEPPNS_15_Hash_node_baseEj>
 8004298:	e000      	b.n	800429c <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNSA_15_Hash_node_baseEj+0x28>
	  return;
 800429a:	bf00      	nop
      }
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <_ZNKSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIP17TIM_HandleTypeDefELb1EE7_M_cgetEv>:
      const _Tp& _M_cget() const { return static_cast<const _Tp&>(*this); }
 80042a2:	b480      	push	{r7}
 80042a4:	b083      	sub	sp, #12
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4618      	mov	r0, r3
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <_ZSt7forwardIRSt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4618      	mov	r0, r3
 80042c4:	370c      	adds	r7, #12
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr

080042ce <_ZSt3getILj0EKP17TIM_HandleTypeDefSt8functionIFvvEEERNSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeERSA_>:
    get(std::pair<_Tp1, _Tp2>& __in) noexcept
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b082      	sub	sp, #8
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
    { return __pair_get<_Int>::__get(__in); }
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 f998 	bl	800460c <_ZNSt10__pair_getILj0EE5__getIKP17TIM_HandleTypeDefSt8functionIFvvEEEERT_RSt4pairIS8_T0_E>
 80042dc:	4603      	mov	r3, r0
 80042de:	4618      	mov	r0, r3
 80042e0:	3708      	adds	r7, #8
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEEE4_M_vEv>:
      _M_v() const noexcept
 80042e6:	b580      	push	{r7, lr}
 80042e8:	b082      	sub	sp, #8
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
      { return *_M_valptr(); }
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 f997 	bl	8004622 <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEEE9_M_valptrEv>
 80042f4:	4603      	mov	r3, r0
 80042f6:	4618      	mov	r0, r3
 80042f8:	3708      	adds	r7, #8
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <_ZNKSt8__detail10_Select1stclIRKSt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOSC_>:
      operator()(_Tp&& __x) const
 80042fe:	b580      	push	{r7, lr}
 8004300:	b082      	sub	sp, #8
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
 8004306:	6039      	str	r1, [r7, #0]
      { return std::get<0>(std::forward<_Tp>(__x)); }
 8004308:	6838      	ldr	r0, [r7, #0]
 800430a:	f000 f998 	bl	800463e <_ZSt7forwardIRKSt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEEEOT_RNSt16remove_referenceISA_E4typeE>
 800430e:	4603      	mov	r3, r0
 8004310:	4618      	mov	r0, r3
 8004312:	f000 f99f 	bl	8004654 <_ZSt3getILj0EKP17TIM_HandleTypeDefSt8functionIFvvEEERKNSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeERKSA_>
 8004316:	4603      	mov	r3, r0
 8004318:	4618      	mov	r0, r3
 800431a:	3708      	adds	r7, #8
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <_ZNK9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8004328:	4b03      	ldr	r3, [pc, #12]	; (8004338 <_ZNK9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEE11_M_max_sizeEv+0x18>)
      }
 800432a:	4618      	mov	r0, r3
 800432c:	370c      	adds	r7, #12
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
 8004336:	bf00      	nop
 8004338:	05555555 	.word	0x05555555

0800433c <_ZNSt11_Tuple_implILj0EJRKP17TIM_HandleTypeDefEEC1EOS4_>:
      _Tuple_impl(_Tuple_impl&& __in)
 800433c:	b590      	push	{r4, r7, lr}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 8004346:	687c      	ldr	r4, [r7, #4]
 8004348:	6838      	ldr	r0, [r7, #0]
 800434a:	f000 f98f 	bl	800466c <_ZNSt11_Tuple_implILj0EJRKP17TIM_HandleTypeDefEE7_M_headERS4_>
 800434e:	4603      	mov	r3, r0
 8004350:	4618      	mov	r0, r3
 8004352:	f000 f998 	bl	8004686 <_ZSt7forwardIRKP17TIM_HandleTypeDefEOT_RNSt16remove_referenceIS4_E4typeE>
 8004356:	4603      	mov	r3, r0
 8004358:	4619      	mov	r1, r3
 800435a:	4620      	mov	r0, r4
 800435c:	f7ff faac 	bl	80038b8 <_ZNSt10_Head_baseILj0ERKP17TIM_HandleTypeDefLb0EEC1ES3_>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4618      	mov	r0, r3
 8004364:	370c      	adds	r7, #12
 8004366:	46bd      	mov	sp, r7
 8004368:	bd90      	pop	{r4, r7, pc}

0800436a <_ZNSt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EESA_IJDpT0_EE>:
      pair<_T1, _T2>::
 800436a:	b5b0      	push	{r4, r5, r7, lr}
 800436c:	b086      	sub	sp, #24
 800436e:	af02      	add	r7, sp, #8
 8004370:	60f8      	str	r0, [r7, #12]
 8004372:	7239      	strb	r1, [r7, #8]
 8004374:	607a      	str	r2, [r7, #4]
 8004376:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8004378:	463a      	mov	r2, r7
 800437a:	f88d 4000 	strb.w	r4, [sp]
 800437e:	462b      	mov	r3, r5
 8004380:	6879      	ldr	r1, [r7, #4]
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	f000 f98a 	bl	800469c <_ZNSt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS9_IJDpT1_EESt12_Index_tupleIJXspT0_EEESI_IJXspT2_EEE>
      { }
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	4618      	mov	r0, r3
 800438c:	3710      	adds	r7, #16
 800438e:	46bd      	mov	sp, r7
 8004390:	bdb0      	pop	{r4, r5, r7, pc}

08004392 <_ZSt9addressofINSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEPT_RSB_>:
    addressof(_Tp& __r) noexcept
 8004392:	b580      	push	{r7, lr}
 8004394:	b082      	sub	sp, #8
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 f99a 	bl	80046d4 <_ZSt11__addressofINSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEPT_RSB_>
 80043a0:	4603      	mov	r3, r0
 80043a2:	4618      	mov	r0, r3
 80043a4:	3708      	adds	r7, #8
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}

080043aa <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEE19_M_allocate_bucketsEj>:
    _Hashtable_alloc<_NodeAlloc>::_M_allocate_buckets(std::size_t __bkt_count)
 80043aa:	b590      	push	{r4, r7, lr}
 80043ac:	b087      	sub	sp, #28
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
 80043b2:	6039      	str	r1, [r7, #0]
      __bucket_alloc_type __alloc(_M_node_allocator());
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f7ff fa8e 	bl	80038d6 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEE17_M_node_allocatorEv>
 80043ba:	4602      	mov	r2, r0
 80043bc:	f107 030c 	add.w	r3, r7, #12
 80043c0:	4611      	mov	r1, r2
 80043c2:	4618      	mov	r0, r3
 80043c4:	f000 f991 	bl	80046ea <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEERKSaIT_E>
      auto __ptr = __bucket_alloc_traits::allocate(__alloc, __bkt_count);
 80043c8:	f107 030c 	add.w	r3, r7, #12
 80043cc:	6839      	ldr	r1, [r7, #0]
 80043ce:	4618      	mov	r0, r3
 80043d0:	f000 f8c6 	bl	8004560 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE8allocateERS3_j>
 80043d4:	6178      	str	r0, [r7, #20]
      __bucket_type* __p = std::__to_address(__ptr);
 80043d6:	6978      	ldr	r0, [r7, #20]
 80043d8:	f000 f8d1 	bl	800457e <_ZSt12__to_addressIPNSt8__detail15_Hash_node_baseEEPT_S4_>
 80043dc:	6138      	str	r0, [r7, #16]
      __builtin_memset(__p, 0, __bkt_count * sizeof(__bucket_type));
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	693a      	ldr	r2, [r7, #16]
 80043e4:	4610      	mov	r0, r2
 80043e6:	461a      	mov	r2, r3
 80043e8:	2100      	movs	r1, #0
 80043ea:	f00d fc43 	bl	8011c74 <memset>
      return __p;
 80043ee:	693c      	ldr	r4, [r7, #16]
      __bucket_alloc_type __alloc(_M_node_allocator());
 80043f0:	f107 030c 	add.w	r3, r7, #12
 80043f4:	4618      	mov	r0, r3
 80043f6:	f000 f8a7 	bl	8004548 <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>
      return __p;
 80043fa:	4623      	mov	r3, r4
    }
 80043fc:	4618      	mov	r0, r3
 80043fe:	371c      	adds	r7, #28
 8004400:	46bd      	mov	sp, r7
 8004402:	bd90      	pop	{r4, r7, pc}

08004404 <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS9_15_Hash_node_baseEj>:
      _M_deallocate_buckets(__bucket_type* __bkts, size_type __bkt_count)
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	607a      	str	r2, [r7, #4]
	if (_M_uses_single_bucket(__bkts))
 8004410:	68b9      	ldr	r1, [r7, #8]
 8004412:	68f8      	ldr	r0, [r7, #12]
 8004414:	f000 f976 	bl	8004704 <_ZNKSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_uses_single_bucketEPPNS9_15_Hash_node_baseE>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d105      	bne.n	800442a <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS9_15_Hash_node_baseEj+0x26>
	__hashtable_alloc::_M_deallocate_buckets(__bkts, __bkt_count);
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	68b9      	ldr	r1, [r7, #8]
 8004422:	68f8      	ldr	r0, [r7, #12]
 8004424:	f000 f986 	bl	8004734 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEE21_M_deallocate_bucketsEPPNS_15_Hash_node_baseEj>
 8004428:	e000      	b.n	800442c <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS9_15_Hash_node_baseEj+0x28>
	  return;
 800442a:	bf00      	nop
      }
 800442c:	3710      	adds	r7, #16
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}

08004432 <_ZSt8__fill_aIPhhEvT_S1_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 8004432:	b580      	push	{r7, lr}
 8004434:	b084      	sub	sp, #16
 8004436:	af00      	add	r7, sp, #0
 8004438:	60f8      	str	r0, [r7, #12]
 800443a:	60b9      	str	r1, [r7, #8]
 800443c:	607a      	str	r2, [r7, #4]
    { std::__fill_a1(__first, __last, __value); }
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	68b9      	ldr	r1, [r7, #8]
 8004442:	68f8      	ldr	r0, [r7, #12]
 8004444:	f000 f99a 	bl	800477c <_ZSt9__fill_a1IhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>
 8004448:	bf00      	nop
 800444a:	3710      	adds	r7, #16
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <_ZNSt10__pair_getILj0EE5__getIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEERT_RSt4pairIS9_T0_E>:
        __get(std::pair<_Tp1, _Tp2>& __pair) noexcept
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
        { return __pair.first; }
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4618      	mov	r0, r3
 800445c:	370c      	adds	r7, #12
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr

08004466 <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEE9_M_valptrEv>:
      _M_valptr() const noexcept
 8004466:	b580      	push	{r7, lr}
 8004468:	b082      	sub	sp, #8
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	3304      	adds	r3, #4
 8004472:	4618      	mov	r0, r3
 8004474:	f000 f99c 	bl	80047b0 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEE6_M_ptrEv>
 8004478:	4603      	mov	r3, r0
 800447a:	4618      	mov	r0, r3
 800447c:	3708      	adds	r7, #8
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}

08004482 <_ZSt7forwardIRKSt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004482:	b480      	push	{r7}
 8004484:	b083      	sub	sp, #12
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4618      	mov	r0, r3
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <_ZSt3getILj0EKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEERKNSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeERKSB_>:
    get(std::pair<_Tp1, _Tp2>&& __in) noexcept
    { return __pair_get<_Int>::__move_get(std::move(__in)); }

  template<std::size_t _Int, class _Tp1, class _Tp2>
    constexpr const typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&
    get(const std::pair<_Tp1, _Tp2>& __in) noexcept
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
    { return __pair_get<_Int>::__const_get(__in); }
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 f991 	bl	80047c8 <_ZNSt10__pair_getILj0EE11__const_getIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEERKT_RKSt4pairIS9_T0_E>
 80044a6:	4603      	mov	r3, r0
 80044a8:	4618      	mov	r0, r3
 80044aa:	3708      	adds	r7, #8
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <_ZNSt11_Tuple_implILj0EJRKP19FDCAN_HandleTypeDefEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4618      	mov	r0, r3
 80044bc:	f000 f98f 	bl	80047de <_ZNSt10_Head_baseILj0ERKP19FDCAN_HandleTypeDefLb0EE7_M_headERS4_>
 80044c0:	4603      	mov	r3, r0
 80044c2:	4618      	mov	r0, r3
 80044c4:	3708      	adds	r7, #8
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <_ZSt7forwardIRKP19FDCAN_HandleTypeDefEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80044ca:	b480      	push	{r7}
 80044cc:	b083      	sub	sp, #12
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4618      	mov	r0, r3
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <_ZNSt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERSA_IJDpT1_EESt12_Index_tupleIJXspT0_EEESJ_IJXspT2_EEE>:

  template<class _T1, class _T2>
    template<typename... _Args1, std::size_t... _Indexes1,
             typename... _Args2, std::size_t... _Indexes2>
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]
 80044ec:	703b      	strb	r3, [r7, #0]
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 80044ee:	68b8      	ldr	r0, [r7, #8]
 80044f0:	f000 f981 	bl	80047f6 <_ZSt3getILj0EJRKP19FDCAN_HandleTypeDefEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80044f4:	4603      	mov	r3, r0
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7ff ffe7 	bl	80044ca <_ZSt7forwardIRKP19FDCAN_HandleTypeDefEOT_RNSt16remove_referenceIS4_E4typeE>
 80044fc:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	601a      	str	r2, [r3, #0]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	3304      	adds	r3, #4
 8004508:	4618      	mov	r0, r3
 800450a:	f000 f981 	bl	8004810 <_ZNSt8functionIFvmPhjEEC1Ev>
      { }
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	4618      	mov	r0, r3
 8004512:	3710      	adds	r7, #16
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <_ZSt11__addressofINSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEPT_RSC_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4618      	mov	r0, r3
 8004524:	370c      	adds	r7, #12
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr

0800452e <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800452e:	b580      	push	{r7, lr}
 8004530:	b082      	sub	sp, #8
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
 8004536:	6039      	str	r1, [r7, #0]
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f000 f976 	bl	800482a <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEEC1Ev>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4618      	mov	r0, r3
 8004542:	3708      	adds	r7, #8
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f000 f975 	bl	8004840 <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEED1Ev>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4618      	mov	r0, r3
 800455a:	3708      	adds	r7, #8
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800456a:	2200      	movs	r2, #0
 800456c:	6839      	ldr	r1, [r7, #0]
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 f971 	bl	8004856 <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv>
 8004574:	4603      	mov	r3, r0
 8004576:	4618      	mov	r0, r3
 8004578:	3708      	adds	r7, #8
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <_ZSt12__to_addressIPNSt8__detail15_Hash_node_baseEEPT_S4_>:
    __to_address(_Tp* __ptr) noexcept
 800457e:	b480      	push	{r7}
 8004580:	b083      	sub	sp, #12
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
      return __ptr;
 8004586:	687b      	ldr	r3, [r7, #4]
    }
 8004588:	4618      	mov	r0, r3
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <_ZNKSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_uses_single_bucketEPPNSA_15_Hash_node_baseE>:
      _M_uses_single_bucket(__bucket_type* __bkts) const
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	3318      	adds	r3, #24
 80045a2:	683a      	ldr	r2, [r7, #0]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	bf0c      	ite	eq
 80045a8:	2301      	moveq	r3, #1
 80045aa:	2300      	movne	r3, #0
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	bf14      	ite	ne
 80045b2:	2301      	movne	r3, #1
 80045b4:	2300      	moveq	r3, #0
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	4618      	mov	r0, r3
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEE21_M_deallocate_bucketsEPPNS_15_Hash_node_baseEj>:

  template<typename _NodeAlloc>
    void
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_buckets(__bucket_type* __bkts,
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b086      	sub	sp, #24
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	607a      	str	r2, [r7, #4]
							std::size_t __bkt_count)
    {
      typedef typename __bucket_alloc_traits::pointer _Ptr;
      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__bkts);
 80045d0:	68b8      	ldr	r0, [r7, #8]
 80045d2:	f000 f95e 	bl	8004892 <_ZNSt14pointer_traitsIPPNSt8__detail15_Hash_node_baseEE10pointer_toERS2_>
 80045d6:	6178      	str	r0, [r7, #20]
      __bucket_alloc_type __alloc(_M_node_allocator());
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f7ff f80b 	bl	80035f4 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEE17_M_node_allocatorEv>
 80045de:	4602      	mov	r2, r0
 80045e0:	f107 0310 	add.w	r3, r7, #16
 80045e4:	4611      	mov	r1, r2
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7ff ffa1 	bl	800452e <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEERKSaIT_E>
      __bucket_alloc_traits::deallocate(__alloc, __ptr, __bkt_count);
 80045ec:	f107 0310 	add.w	r3, r7, #16
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	6979      	ldr	r1, [r7, #20]
 80045f4:	4618      	mov	r0, r3
 80045f6:	f000 f958 	bl	80048aa <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE10deallocateERS3_PS2_j>
      __bucket_alloc_type __alloc(_M_node_allocator());
 80045fa:	f107 0310 	add.w	r3, r7, #16
 80045fe:	4618      	mov	r0, r3
 8004600:	f7ff ffa2 	bl	8004548 <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>
    }
 8004604:	bf00      	nop
 8004606:	3718      	adds	r7, #24
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <_ZNSt10__pair_getILj0EE5__getIKP17TIM_HandleTypeDefSt8functionIFvvEEEERT_RSt4pairIS8_T0_E>:
        __get(std::pair<_Tp1, _Tp2>& __pair) noexcept
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
        { return __pair.first; }
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4618      	mov	r0, r3
 8004618:	370c      	adds	r7, #12
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr

08004622 <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEEE9_M_valptrEv>:
      _M_valptr() const noexcept
 8004622:	b580      	push	{r7, lr}
 8004624:	b082      	sub	sp, #8
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	3304      	adds	r3, #4
 800462e:	4618      	mov	r0, r3
 8004630:	f000 f94a 	bl	80048c8 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEEE6_M_ptrEv>
 8004634:	4603      	mov	r3, r0
 8004636:	4618      	mov	r0, r3
 8004638:	3708      	adds	r7, #8
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}

0800463e <_ZSt7forwardIRKSt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEEEOT_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800463e:	b480      	push	{r7}
 8004640:	b083      	sub	sp, #12
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4618      	mov	r0, r3
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <_ZSt3getILj0EKP17TIM_HandleTypeDefSt8functionIFvvEEERKNSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeERKSA_>:
    get(const std::pair<_Tp1, _Tp2>& __in) noexcept
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
    { return __pair_get<_Int>::__const_get(__in); }
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 f93f 	bl	80048e0 <_ZNSt10__pair_getILj0EE11__const_getIKP17TIM_HandleTypeDefSt8functionIFvvEEEERKT_RKSt4pairIS8_T0_E>
 8004662:	4603      	mov	r3, r0
 8004664:	4618      	mov	r0, r3
 8004666:	3708      	adds	r7, #8
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <_ZNSt11_Tuple_implILj0EJRKP17TIM_HandleTypeDefEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4618      	mov	r0, r3
 8004678:	f000 f93d 	bl	80048f6 <_ZNSt10_Head_baseILj0ERKP17TIM_HandleTypeDefLb0EE7_M_headERS4_>
 800467c:	4603      	mov	r3, r0
 800467e:	4618      	mov	r0, r3
 8004680:	3708      	adds	r7, #8
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <_ZSt7forwardIRKP17TIM_HandleTypeDefEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004686:	b480      	push	{r7}
 8004688:	b083      	sub	sp, #12
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4618      	mov	r0, r3
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <_ZNSt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS9_IJDpT1_EESt12_Index_tupleIJXspT0_EEESI_IJXspT2_EEE>:
      pair<_T1, _T2>::
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	607a      	str	r2, [r7, #4]
 80046a8:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 80046aa:	68b8      	ldr	r0, [r7, #8]
 80046ac:	f000 f92f 	bl	800490e <_ZSt3getILj0EJRKP17TIM_HandleTypeDefEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80046b0:	4603      	mov	r3, r0
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7ff ffe7 	bl	8004686 <_ZSt7forwardIRKP17TIM_HandleTypeDefEOT_RNSt16remove_referenceIS4_E4typeE>
 80046b8:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	601a      	str	r2, [r3, #0]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	3304      	adds	r3, #4
 80046c4:	4618      	mov	r0, r3
 80046c6:	f000 f92f 	bl	8004928 <_ZNSt8functionIFvvEEC1Ev>
      { }
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	4618      	mov	r0, r3
 80046ce:	3710      	adds	r7, #16
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <_ZSt11__addressofINSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEPT_RSB_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4618      	mov	r0, r3
 80046e0:	370c      	adds	r7, #12
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr

080046ea <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 80046ea:	b580      	push	{r7, lr}
 80046ec:	b082      	sub	sp, #8
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
 80046f2:	6039      	str	r1, [r7, #0]
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f000 f898 	bl	800482a <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEEC1Ev>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4618      	mov	r0, r3
 80046fe:	3708      	adds	r7, #8
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <_ZNKSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_uses_single_bucketEPPNS9_15_Hash_node_baseE>:
      _M_uses_single_bucket(__bucket_type* __bkts) const
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	3318      	adds	r3, #24
 8004712:	683a      	ldr	r2, [r7, #0]
 8004714:	429a      	cmp	r2, r3
 8004716:	bf0c      	ite	eq
 8004718:	2301      	moveq	r3, #1
 800471a:	2300      	movne	r3, #0
 800471c:	b2db      	uxtb	r3, r3
 800471e:	2b00      	cmp	r3, #0
 8004720:	bf14      	ite	ne
 8004722:	2301      	movne	r3, #1
 8004724:	2300      	moveq	r3, #0
 8004726:	b2db      	uxtb	r3, r3
 8004728:	4618      	mov	r0, r3
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEE21_M_deallocate_bucketsEPPNS_15_Hash_node_baseEj>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_buckets(__bucket_type* __bkts,
 8004734:	b580      	push	{r7, lr}
 8004736:	b086      	sub	sp, #24
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	607a      	str	r2, [r7, #4]
      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__bkts);
 8004740:	68b8      	ldr	r0, [r7, #8]
 8004742:	f000 f8a6 	bl	8004892 <_ZNSt14pointer_traitsIPPNSt8__detail15_Hash_node_baseEE10pointer_toERS2_>
 8004746:	6178      	str	r0, [r7, #20]
      __bucket_alloc_type __alloc(_M_node_allocator());
 8004748:	68f8      	ldr	r0, [r7, #12]
 800474a:	f7ff f8c4 	bl	80038d6 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEE17_M_node_allocatorEv>
 800474e:	4602      	mov	r2, r0
 8004750:	f107 0310 	add.w	r3, r7, #16
 8004754:	4611      	mov	r1, r2
 8004756:	4618      	mov	r0, r3
 8004758:	f7ff ffc7 	bl	80046ea <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEERKSaIT_E>
      __bucket_alloc_traits::deallocate(__alloc, __ptr, __bkt_count);
 800475c:	f107 0310 	add.w	r3, r7, #16
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	6979      	ldr	r1, [r7, #20]
 8004764:	4618      	mov	r0, r3
 8004766:	f000 f8a0 	bl	80048aa <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE10deallocateERS3_PS2_j>
      __bucket_alloc_type __alloc(_M_node_allocator());
 800476a:	f107 0310 	add.w	r3, r7, #16
 800476e:	4618      	mov	r0, r3
 8004770:	f7ff feea 	bl	8004548 <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>
    }
 8004774:	bf00      	nop
 8004776:	3718      	adds	r7, #24
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <_ZSt9__fill_a1IhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>:
    __fill_a1(_Tp* __first, _Tp* __last, const _Tp& __c)
 800477c:	b580      	push	{r7, lr}
 800477e:	b086      	sub	sp, #24
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __c;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	75fb      	strb	r3, [r7, #23]
      if (const size_t __len = __last - __first)
 800478e:	68ba      	ldr	r2, [r7, #8]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	613b      	str	r3, [r7, #16]
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d005      	beq.n	80047a8 <_ZSt9__fill_a1IhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_+0x2c>
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 800479c:	7dfb      	ldrb	r3, [r7, #23]
 800479e:	693a      	ldr	r2, [r7, #16]
 80047a0:	4619      	mov	r1, r3
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	f00d fa66 	bl	8011c74 <memset>
    }
 80047a8:	bf00      	nop
 80047aa:	3718      	adds	r7, #24
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f000 f8c2 	bl	8004942 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEE7_M_addrEv>
 80047be:	4603      	mov	r3, r0
 80047c0:	4618      	mov	r0, r3
 80047c2:	3708      	adds	r7, #8
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <_ZNSt10__pair_getILj0EE11__const_getIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEERKT_RKSt4pairIS9_T0_E>:
        __const_get(const std::pair<_Tp1, _Tp2>& __pair) noexcept
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
        { return __pair.first; }
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4618      	mov	r0, r3
 80047d4:	370c      	adds	r7, #12
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr

080047de <_ZNSt10_Head_baseILj0ERKP19FDCAN_HandleTypeDefLb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80047de:	b480      	push	{r7}
 80047e0:	b083      	sub	sp, #12
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4618      	mov	r0, r3
 80047ec:	370c      	adds	r7, #12
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr

080047f6 <_ZSt3getILj0EJRKP19FDCAN_HandleTypeDefEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 80047f6:	b580      	push	{r7, lr}
 80047f8:	b082      	sub	sp, #8
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4618      	mov	r0, r3
 8004802:	f000 f8a9 	bl	8004958 <_ZSt12__get_helperILj0ERKP19FDCAN_HandleTypeDefJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8004806:	4603      	mov	r3, r0
 8004808:	4618      	mov	r0, r3
 800480a:	3708      	adds	r7, #8
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <_ZNSt8functionIFvmPhjEEC1Ev>:
      function() noexcept
 8004810:	b580      	push	{r7, lr}
 8004812:	b082      	sub	sp, #8
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4618      	mov	r0, r3
 800481c:	f7fc f9ce 	bl	8000bbc <_ZNSt14_Function_baseC1Ev>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4618      	mov	r0, r3
 8004824:	3708      	adds	r7, #8
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}

0800482a <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800482a:	b480      	push	{r7}
 800482c:	b083      	sub	sp, #12
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4618      	mov	r0, r3
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4618      	mov	r0, r3
 800484c:	370c      	adds	r7, #12
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr

08004856 <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8004856:	b580      	push	{r7, lr}
 8004858:	b084      	sub	sp, #16
 800485a:	af00      	add	r7, sp, #0
 800485c:	60f8      	str	r0, [r7, #12]
 800485e:	60b9      	str	r1, [r7, #8]
 8004860:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8004862:	68f8      	ldr	r0, [r7, #12]
 8004864:	f000 f884 	bl	8004970 <_ZNK9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE11_M_max_sizeEv>
 8004868:	4602      	mov	r2, r0
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	4293      	cmp	r3, r2
 800486e:	bf8c      	ite	hi
 8004870:	2301      	movhi	r3, #1
 8004872:	2300      	movls	r3, #0
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b00      	cmp	r3, #0
 8004878:	d001      	beq.n	800487e <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800487a:	f00c fac4 	bl	8010e06 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	4618      	mov	r0, r3
 8004884:	f00c faae 	bl	8010de4 <_Znwj>
 8004888:	4603      	mov	r3, r0
      }
 800488a:	4618      	mov	r0, r3
 800488c:	3710      	adds	r7, #16
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <_ZNSt14pointer_traitsIPPNSt8__detail15_Hash_node_baseEE10pointer_toERS2_>:
      pointer_to(__make_not_void<element_type>& __r) noexcept
 8004892:	b580      	push	{r7, lr}
 8004894:	b082      	sub	sp, #8
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
      { return std::addressof(__r); }
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 f874 	bl	8004988 <_ZSt9addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>
 80048a0:	4603      	mov	r3, r0
 80048a2:	4618      	mov	r0, r3
 80048a4:	3708      	adds	r7, #8
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b084      	sub	sp, #16
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	60f8      	str	r0, [r7, #12]
 80048b2:	60b9      	str	r1, [r7, #8]
 80048b4:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	68b9      	ldr	r1, [r7, #8]
 80048ba:	68f8      	ldr	r0, [r7, #12]
 80048bc:	f000 f870 	bl	80049a0 <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE10deallocateEPS3_j>
 80048c0:	bf00      	nop
 80048c2:	3710      	adds	r7, #16
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEEE6_M_ptrEv>:
      _M_ptr() const noexcept
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 f875 	bl	80049c0 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEEE7_M_addrEv>
 80048d6:	4603      	mov	r3, r0
 80048d8:	4618      	mov	r0, r3
 80048da:	3708      	adds	r7, #8
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <_ZNSt10__pair_getILj0EE11__const_getIKP17TIM_HandleTypeDefSt8functionIFvvEEEERKT_RKSt4pairIS8_T0_E>:
        __const_get(const std::pair<_Tp1, _Tp2>& __pair) noexcept
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
        { return __pair.first; }
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4618      	mov	r0, r3
 80048ec:	370c      	adds	r7, #12
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr

080048f6 <_ZNSt10_Head_baseILj0ERKP17TIM_HandleTypeDefLb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80048f6:	b480      	push	{r7}
 80048f8:	b083      	sub	sp, #12
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4618      	mov	r0, r3
 8004904:	370c      	adds	r7, #12
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr

0800490e <_ZSt3getILj0EJRKP17TIM_HandleTypeDefEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800490e:	b580      	push	{r7, lr}
 8004910:	b082      	sub	sp, #8
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4618      	mov	r0, r3
 800491a:	f000 f85c 	bl	80049d6 <_ZSt12__get_helperILj0ERKP17TIM_HandleTypeDefJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800491e:	4603      	mov	r3, r0
 8004920:	4618      	mov	r0, r3
 8004922:	3708      	adds	r7, #8
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <_ZNSt8functionIFvvEEC1Ev>:
      function() noexcept
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4618      	mov	r0, r3
 8004934:	f7fc f942 	bl	8000bbc <_ZNSt14_Function_baseC1Ev>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4618      	mov	r0, r3
 800493c:	3708      	adds	r7, #8
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}

08004942 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEEE7_M_addrEv>:
      _M_addr() const noexcept
 8004942:	b480      	push	{r7}
 8004944:	b083      	sub	sp, #12
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
        return static_cast<const void*>(&_M_storage);
 800494a:	687b      	ldr	r3, [r7, #4]
      }
 800494c:	4618      	mov	r0, r3
 800494e:	370c      	adds	r7, #12
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <_ZSt12__get_helperILj0ERKP19FDCAN_HandleTypeDefJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f7ff fda5 	bl	80044b0 <_ZNSt11_Tuple_implILj0EJRKP19FDCAN_HandleTypeDefEE7_M_headERS4_>
 8004966:	4603      	mov	r3, r0
 8004968:	4618      	mov	r0, r3
 800496a:	3708      	adds	r7, #8
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <_ZNK9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8004978:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 800497c:	4618      	mov	r0, r3
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <_ZSt9addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>:
    addressof(_Tp& __r) noexcept
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f000 f82c 	bl	80049ee <_ZSt11__addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>
 8004996:	4603      	mov	r3, r0
 8004998:	4618      	mov	r0, r3
 800499a:	3708      	adds	r7, #8
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE10deallocateEPS3_j>:
      deallocate(_Tp* __p, size_type __t)
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	4619      	mov	r1, r3
 80049b2:	68b8      	ldr	r0, [r7, #8]
 80049b4:	f00c fa14 	bl	8010de0 <_ZdlPvj>
      }
 80049b8:	bf00      	nop
 80049ba:	3710      	adds	r7, #16
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEEE7_M_addrEv>:
      _M_addr() const noexcept
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
        return static_cast<const void*>(&_M_storage);
 80049c8:	687b      	ldr	r3, [r7, #4]
      }
 80049ca:	4618      	mov	r0, r3
 80049cc:	370c      	adds	r7, #12
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <_ZSt12__get_helperILj0ERKP17TIM_HandleTypeDefJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80049d6:	b580      	push	{r7, lr}
 80049d8:	b082      	sub	sp, #8
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f7ff fe44 	bl	800466c <_ZNSt11_Tuple_implILj0EJRKP17TIM_HandleTypeDefEE7_M_headERS4_>
 80049e4:	4603      	mov	r3, r0
 80049e6:	4618      	mov	r0, r3
 80049e8:	3708      	adds	r7, #8
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}

080049ee <_ZSt11__addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80049ee:	b480      	push	{r7}
 80049f0:	b083      	sub	sp, #12
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4618      	mov	r0, r3
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004a08:	f002 fb7e 	bl	8007108 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004a0c:	f000 f826 	bl	8004a5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004a10:	f000 fd70 	bl	80054f4 <MX_GPIO_Init>
  MX_DMA_Init();
 8004a14:	f000 fd3e 	bl	8005494 <MX_DMA_Init>
  MX_FDCAN2_Init();
 8004a18:	f000 f908 	bl	8004c2c <MX_FDCAN2_Init>
  MX_TIM1_Init();
 8004a1c:	f000 f9c4 	bl	8004da8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8004a20:	f000 fa1c 	bl	8004e5c <MX_TIM2_Init>
  MX_TIM3_Init();
 8004a24:	f000 fa6e 	bl	8004f04 <MX_TIM3_Init>
  MX_TIM4_Init();
 8004a28:	f000 fac2 	bl	8004fb0 <MX_TIM4_Init>
  MX_TIM8_Init();
 8004a2c:	f000 fbd0 	bl	80051d0 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8004a30:	f000 fc98 	bl	8005364 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8004a34:	f000 fb60 	bl	80050f8 <MX_TIM6_Init>
  MX_TIM7_Init();
 8004a38:	f000 fb94 	bl	8005164 <MX_TIM7_Init>
  MX_SPI1_Init();
 8004a3c:	f000 f95c 	bl	8004cf8 <MX_SPI1_Init>
  MX_TIM13_Init();
 8004a40:	f000 fc20 	bl	8005284 <MX_TIM13_Init>
  MX_USART1_UART_Init();
 8004a44:	f000 fc42 	bl	80052cc <MX_USART1_UART_Init>
  MX_FDCAN1_Init();
 8004a48:	f000 f88c 	bl	8004b64 <MX_FDCAN1_Init>
  MX_USART3_UART_Init();
 8004a4c:	f000 fcd6 	bl	80053fc <MX_USART3_UART_Init>
  MX_TIM5_Init();
 8004a50:	f000 fb04 	bl	800505c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
cppmain();
 8004a54:	f7fc fff6 	bl	8001a44 <cppmain>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004a58:	e7fe      	b.n	8004a58 <main+0x54>
	...

08004a5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b09c      	sub	sp, #112	; 0x70
 8004a60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004a62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a66:	224c      	movs	r2, #76	; 0x4c
 8004a68:	2100      	movs	r1, #0
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f00d f902 	bl	8011c74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004a70:	1d3b      	adds	r3, r7, #4
 8004a72:	2220      	movs	r2, #32
 8004a74:	2100      	movs	r1, #0
 8004a76:	4618      	mov	r0, r3
 8004a78:	f00d f8fc 	bl	8011c74 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8004a7c:	2002      	movs	r0, #2
 8004a7e:	f006 ff19 	bl	800b8b4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8004a82:	2300      	movs	r3, #0
 8004a84:	603b      	str	r3, [r7, #0]
 8004a86:	4b34      	ldr	r3, [pc, #208]	; (8004b58 <SystemClock_Config+0xfc>)
 8004a88:	699b      	ldr	r3, [r3, #24]
 8004a8a:	4a33      	ldr	r2, [pc, #204]	; (8004b58 <SystemClock_Config+0xfc>)
 8004a8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a90:	6193      	str	r3, [r2, #24]
 8004a92:	4b31      	ldr	r3, [pc, #196]	; (8004b58 <SystemClock_Config+0xfc>)
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004a9a:	603b      	str	r3, [r7, #0]
 8004a9c:	4b2f      	ldr	r3, [pc, #188]	; (8004b5c <SystemClock_Config+0x100>)
 8004a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa0:	4a2e      	ldr	r2, [pc, #184]	; (8004b5c <SystemClock_Config+0x100>)
 8004aa2:	f043 0301 	orr.w	r3, r3, #1
 8004aa6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004aa8:	4b2c      	ldr	r3, [pc, #176]	; (8004b5c <SystemClock_Config+0x100>)
 8004aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aac:	f003 0301 	and.w	r3, r3, #1
 8004ab0:	603b      	str	r3, [r7, #0]
 8004ab2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8004ab4:	bf00      	nop
 8004ab6:	4b28      	ldr	r3, [pc, #160]	; (8004b58 <SystemClock_Config+0xfc>)
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004abe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ac2:	d1f8      	bne.n	8004ab6 <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8004ac4:	4b26      	ldr	r3, [pc, #152]	; (8004b60 <SystemClock_Config+0x104>)
 8004ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac8:	f023 0303 	bic.w	r3, r3, #3
 8004acc:	4a24      	ldr	r2, [pc, #144]	; (8004b60 <SystemClock_Config+0x104>)
 8004ace:	f043 0302 	orr.w	r3, r3, #2
 8004ad2:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004ad8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004adc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004ade:	2302      	movs	r3, #2
 8004ae0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004ae2:	2302      	movs	r3, #2
 8004ae4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8004ae6:	2302      	movs	r3, #2
 8004ae8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8004aea:	233c      	movs	r3, #60	; 0x3c
 8004aec:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8004aee:	2302      	movs	r3, #2
 8004af0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 12;
 8004af2:	230c      	movs	r3, #12
 8004af4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004af6:	2302      	movs	r3, #2
 8004af8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8004afa:	230c      	movs	r3, #12
 8004afc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8004afe:	2300      	movs	r3, #0
 8004b00:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8004b02:	2300      	movs	r3, #0
 8004b04:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004b06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f006 ff0c 	bl	800b928 <HAL_RCC_OscConfig>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d001      	beq.n	8004b1a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8004b16:	f000 fdc5 	bl	80056a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004b1a:	233f      	movs	r3, #63	; 0x3f
 8004b1c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8004b22:	2300      	movs	r3, #0
 8004b24:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8004b26:	2308      	movs	r3, #8
 8004b28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8004b2a:	2340      	movs	r3, #64	; 0x40
 8004b2c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8004b2e:	2340      	movs	r3, #64	; 0x40
 8004b30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8004b32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b36:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8004b38:	2340      	movs	r3, #64	; 0x40
 8004b3a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004b3c:	1d3b      	adds	r3, r7, #4
 8004b3e:	2104      	movs	r1, #4
 8004b40:	4618      	mov	r0, r3
 8004b42:	f007 fb1f 	bl	800c184 <HAL_RCC_ClockConfig>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d001      	beq.n	8004b50 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8004b4c:	f000 fdaa 	bl	80056a4 <Error_Handler>
  }
}
 8004b50:	bf00      	nop
 8004b52:	3770      	adds	r7, #112	; 0x70
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	58024800 	.word	0x58024800
 8004b5c:	58000400 	.word	0x58000400
 8004b60:	58024400 	.word	0x58024400

08004b64 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8004b68:	4b2e      	ldr	r3, [pc, #184]	; (8004c24 <MX_FDCAN1_Init+0xc0>)
 8004b6a:	4a2f      	ldr	r2, [pc, #188]	; (8004c28 <MX_FDCAN1_Init+0xc4>)
 8004b6c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8004b6e:	4b2d      	ldr	r3, [pc, #180]	; (8004c24 <MX_FDCAN1_Init+0xc0>)
 8004b70:	2200      	movs	r2, #0
 8004b72:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8004b74:	4b2b      	ldr	r3, [pc, #172]	; (8004c24 <MX_FDCAN1_Init+0xc0>)
 8004b76:	2200      	movs	r2, #0
 8004b78:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8004b7a:	4b2a      	ldr	r3, [pc, #168]	; (8004c24 <MX_FDCAN1_Init+0xc0>)
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8004b80:	4b28      	ldr	r3, [pc, #160]	; (8004c24 <MX_FDCAN1_Init+0xc0>)
 8004b82:	2200      	movs	r2, #0
 8004b84:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8004b86:	4b27      	ldr	r3, [pc, #156]	; (8004c24 <MX_FDCAN1_Init+0xc0>)
 8004b88:	2200      	movs	r2, #0
 8004b8a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 5;
 8004b8c:	4b25      	ldr	r3, [pc, #148]	; (8004c24 <MX_FDCAN1_Init+0xc0>)
 8004b8e:	2205      	movs	r2, #5
 8004b90:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8004b92:	4b24      	ldr	r3, [pc, #144]	; (8004c24 <MX_FDCAN1_Init+0xc0>)
 8004b94:	2201      	movs	r2, #1
 8004b96:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8004b98:	4b22      	ldr	r3, [pc, #136]	; (8004c24 <MX_FDCAN1_Init+0xc0>)
 8004b9a:	220d      	movs	r2, #13
 8004b9c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8004b9e:	4b21      	ldr	r3, [pc, #132]	; (8004c24 <MX_FDCAN1_Init+0xc0>)
 8004ba0:	2202      	movs	r2, #2
 8004ba2:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8004ba4:	4b1f      	ldr	r3, [pc, #124]	; (8004c24 <MX_FDCAN1_Init+0xc0>)
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8004baa:	4b1e      	ldr	r3, [pc, #120]	; (8004c24 <MX_FDCAN1_Init+0xc0>)
 8004bac:	2201      	movs	r2, #1
 8004bae:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8004bb0:	4b1c      	ldr	r3, [pc, #112]	; (8004c24 <MX_FDCAN1_Init+0xc0>)
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8004bb6:	4b1b      	ldr	r3, [pc, #108]	; (8004c24 <MX_FDCAN1_Init+0xc0>)
 8004bb8:	2201      	movs	r2, #1
 8004bba:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8004bbc:	4b19      	ldr	r3, [pc, #100]	; (8004c24 <MX_FDCAN1_Init+0xc0>)
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 128;
 8004bc2:	4b18      	ldr	r3, [pc, #96]	; (8004c24 <MX_FDCAN1_Init+0xc0>)
 8004bc4:	2280      	movs	r2, #128	; 0x80
 8004bc6:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8004bc8:	4b16      	ldr	r3, [pc, #88]	; (8004c24 <MX_FDCAN1_Init+0xc0>)
 8004bca:	2200      	movs	r2, #0
 8004bcc:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 64;
 8004bce:	4b15      	ldr	r3, [pc, #84]	; (8004c24 <MX_FDCAN1_Init+0xc0>)
 8004bd0:	2240      	movs	r2, #64	; 0x40
 8004bd2:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8004bd4:	4b13      	ldr	r3, [pc, #76]	; (8004c24 <MX_FDCAN1_Init+0xc0>)
 8004bd6:	2204      	movs	r2, #4
 8004bd8:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8004bda:	4b12      	ldr	r3, [pc, #72]	; (8004c24 <MX_FDCAN1_Init+0xc0>)
 8004bdc:	2200      	movs	r2, #0
 8004bde:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8004be0:	4b10      	ldr	r3, [pc, #64]	; (8004c24 <MX_FDCAN1_Init+0xc0>)
 8004be2:	2204      	movs	r2, #4
 8004be4:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 64;
 8004be6:	4b0f      	ldr	r3, [pc, #60]	; (8004c24 <MX_FDCAN1_Init+0xc0>)
 8004be8:	2240      	movs	r2, #64	; 0x40
 8004bea:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8004bec:	4b0d      	ldr	r3, [pc, #52]	; (8004c24 <MX_FDCAN1_Init+0xc0>)
 8004bee:	2204      	movs	r2, #4
 8004bf0:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8004bf2:	4b0c      	ldr	r3, [pc, #48]	; (8004c24 <MX_FDCAN1_Init+0xc0>)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8004bf8:	4b0a      	ldr	r3, [pc, #40]	; (8004c24 <MX_FDCAN1_Init+0xc0>)
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 8004bfe:	4b09      	ldr	r3, [pc, #36]	; (8004c24 <MX_FDCAN1_Init+0xc0>)
 8004c00:	2220      	movs	r2, #32
 8004c02:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8004c04:	4b07      	ldr	r3, [pc, #28]	; (8004c24 <MX_FDCAN1_Init+0xc0>)
 8004c06:	2200      	movs	r2, #0
 8004c08:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8004c0a:	4b06      	ldr	r3, [pc, #24]	; (8004c24 <MX_FDCAN1_Init+0xc0>)
 8004c0c:	2204      	movs	r2, #4
 8004c0e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8004c10:	4804      	ldr	r0, [pc, #16]	; (8004c24 <MX_FDCAN1_Init+0xc0>)
 8004c12:	f005 fa87 	bl	800a124 <HAL_FDCAN_Init>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d001      	beq.n	8004c20 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8004c1c:	f000 fd42 	bl	80056a4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8004c20:	bf00      	nop
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	240001fc 	.word	0x240001fc
 8004c28:	4000a000 	.word	0x4000a000

08004c2c <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8004c30:	4b2f      	ldr	r3, [pc, #188]	; (8004cf0 <MX_FDCAN2_Init+0xc4>)
 8004c32:	4a30      	ldr	r2, [pc, #192]	; (8004cf4 <MX_FDCAN2_Init+0xc8>)
 8004c34:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8004c36:	4b2e      	ldr	r3, [pc, #184]	; (8004cf0 <MX_FDCAN2_Init+0xc4>)
 8004c38:	2200      	movs	r2, #0
 8004c3a:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8004c3c:	4b2c      	ldr	r3, [pc, #176]	; (8004cf0 <MX_FDCAN2_Init+0xc4>)
 8004c3e:	2200      	movs	r2, #0
 8004c40:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8004c42:	4b2b      	ldr	r3, [pc, #172]	; (8004cf0 <MX_FDCAN2_Init+0xc4>)
 8004c44:	2200      	movs	r2, #0
 8004c46:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8004c48:	4b29      	ldr	r3, [pc, #164]	; (8004cf0 <MX_FDCAN2_Init+0xc4>)
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8004c4e:	4b28      	ldr	r3, [pc, #160]	; (8004cf0 <MX_FDCAN2_Init+0xc4>)
 8004c50:	2200      	movs	r2, #0
 8004c52:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 5;
 8004c54:	4b26      	ldr	r3, [pc, #152]	; (8004cf0 <MX_FDCAN2_Init+0xc4>)
 8004c56:	2205      	movs	r2, #5
 8004c58:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8004c5a:	4b25      	ldr	r3, [pc, #148]	; (8004cf0 <MX_FDCAN2_Init+0xc4>)
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 13;
 8004c60:	4b23      	ldr	r3, [pc, #140]	; (8004cf0 <MX_FDCAN2_Init+0xc4>)
 8004c62:	220d      	movs	r2, #13
 8004c64:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8004c66:	4b22      	ldr	r3, [pc, #136]	; (8004cf0 <MX_FDCAN2_Init+0xc4>)
 8004c68:	2202      	movs	r2, #2
 8004c6a:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8004c6c:	4b20      	ldr	r3, [pc, #128]	; (8004cf0 <MX_FDCAN2_Init+0xc4>)
 8004c6e:	2201      	movs	r2, #1
 8004c70:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8004c72:	4b1f      	ldr	r3, [pc, #124]	; (8004cf0 <MX_FDCAN2_Init+0xc4>)
 8004c74:	2201      	movs	r2, #1
 8004c76:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8004c78:	4b1d      	ldr	r3, [pc, #116]	; (8004cf0 <MX_FDCAN2_Init+0xc4>)
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8004c7e:	4b1c      	ldr	r3, [pc, #112]	; (8004cf0 <MX_FDCAN2_Init+0xc4>)
 8004c80:	2201      	movs	r2, #1
 8004c82:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 2560/2;
 8004c84:	4b1a      	ldr	r3, [pc, #104]	; (8004cf0 <MX_FDCAN2_Init+0xc4>)
 8004c86:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8004c8a:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 128;
 8004c8c:	4b18      	ldr	r3, [pc, #96]	; (8004cf0 <MX_FDCAN2_Init+0xc4>)
 8004c8e:	2280      	movs	r2, #128	; 0x80
 8004c90:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8004c92:	4b17      	ldr	r3, [pc, #92]	; (8004cf0 <MX_FDCAN2_Init+0xc4>)
 8004c94:	2200      	movs	r2, #0
 8004c96:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8004c98:	4b15      	ldr	r3, [pc, #84]	; (8004cf0 <MX_FDCAN2_Init+0xc4>)
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8004c9e:	4b14      	ldr	r3, [pc, #80]	; (8004cf0 <MX_FDCAN2_Init+0xc4>)
 8004ca0:	2204      	movs	r2, #4
 8004ca2:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 64;
 8004ca4:	4b12      	ldr	r3, [pc, #72]	; (8004cf0 <MX_FDCAN2_Init+0xc4>)
 8004ca6:	2240      	movs	r2, #64	; 0x40
 8004ca8:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8004caa:	4b11      	ldr	r3, [pc, #68]	; (8004cf0 <MX_FDCAN2_Init+0xc4>)
 8004cac:	2204      	movs	r2, #4
 8004cae:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 64;
 8004cb0:	4b0f      	ldr	r3, [pc, #60]	; (8004cf0 <MX_FDCAN2_Init+0xc4>)
 8004cb2:	2240      	movs	r2, #64	; 0x40
 8004cb4:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8004cb6:	4b0e      	ldr	r3, [pc, #56]	; (8004cf0 <MX_FDCAN2_Init+0xc4>)
 8004cb8:	2204      	movs	r2, #4
 8004cba:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8004cbc:	4b0c      	ldr	r3, [pc, #48]	; (8004cf0 <MX_FDCAN2_Init+0xc4>)
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8004cc2:	4b0b      	ldr	r3, [pc, #44]	; (8004cf0 <MX_FDCAN2_Init+0xc4>)
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 32;
 8004cc8:	4b09      	ldr	r3, [pc, #36]	; (8004cf0 <MX_FDCAN2_Init+0xc4>)
 8004cca:	2220      	movs	r2, #32
 8004ccc:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8004cce:	4b08      	ldr	r3, [pc, #32]	; (8004cf0 <MX_FDCAN2_Init+0xc4>)
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8004cd4:	4b06      	ldr	r3, [pc, #24]	; (8004cf0 <MX_FDCAN2_Init+0xc4>)
 8004cd6:	2204      	movs	r2, #4
 8004cd8:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8004cda:	4805      	ldr	r0, [pc, #20]	; (8004cf0 <MX_FDCAN2_Init+0xc4>)
 8004cdc:	f005 fa22 	bl	800a124 <HAL_FDCAN_Init>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d001      	beq.n	8004cea <MX_FDCAN2_Init+0xbe>
  {
    Error_Handler();
 8004ce6:	f000 fcdd 	bl	80056a4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8004cea:	bf00      	nop
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	2400029c 	.word	0x2400029c
 8004cf4:	4000a400 	.word	0x4000a400

08004cf8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004cfc:	4b28      	ldr	r3, [pc, #160]	; (8004da0 <MX_SPI1_Init+0xa8>)
 8004cfe:	4a29      	ldr	r2, [pc, #164]	; (8004da4 <MX_SPI1_Init+0xac>)
 8004d00:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004d02:	4b27      	ldr	r3, [pc, #156]	; (8004da0 <MX_SPI1_Init+0xa8>)
 8004d04:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004d08:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004d0a:	4b25      	ldr	r3, [pc, #148]	; (8004da0 <MX_SPI1_Init+0xa8>)
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004d10:	4b23      	ldr	r3, [pc, #140]	; (8004da0 <MX_SPI1_Init+0xa8>)
 8004d12:	2207      	movs	r2, #7
 8004d14:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d16:	4b22      	ldr	r3, [pc, #136]	; (8004da0 <MX_SPI1_Init+0xa8>)
 8004d18:	2200      	movs	r2, #0
 8004d1a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004d1c:	4b20      	ldr	r3, [pc, #128]	; (8004da0 <MX_SPI1_Init+0xa8>)
 8004d1e:	2200      	movs	r2, #0
 8004d20:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004d22:	4b1f      	ldr	r3, [pc, #124]	; (8004da0 <MX_SPI1_Init+0xa8>)
 8004d24:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004d28:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d2a:	4b1d      	ldr	r3, [pc, #116]	; (8004da0 <MX_SPI1_Init+0xa8>)
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004d30:	4b1b      	ldr	r3, [pc, #108]	; (8004da0 <MX_SPI1_Init+0xa8>)
 8004d32:	2200      	movs	r2, #0
 8004d34:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004d36:	4b1a      	ldr	r3, [pc, #104]	; (8004da0 <MX_SPI1_Init+0xa8>)
 8004d38:	2200      	movs	r2, #0
 8004d3a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d3c:	4b18      	ldr	r3, [pc, #96]	; (8004da0 <MX_SPI1_Init+0xa8>)
 8004d3e:	2200      	movs	r2, #0
 8004d40:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8004d42:	4b17      	ldr	r3, [pc, #92]	; (8004da0 <MX_SPI1_Init+0xa8>)
 8004d44:	2200      	movs	r2, #0
 8004d46:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004d48:	4b15      	ldr	r3, [pc, #84]	; (8004da0 <MX_SPI1_Init+0xa8>)
 8004d4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004d4e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8004d50:	4b13      	ldr	r3, [pc, #76]	; (8004da0 <MX_SPI1_Init+0xa8>)
 8004d52:	2200      	movs	r2, #0
 8004d54:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8004d56:	4b12      	ldr	r3, [pc, #72]	; (8004da0 <MX_SPI1_Init+0xa8>)
 8004d58:	2200      	movs	r2, #0
 8004d5a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004d5c:	4b10      	ldr	r3, [pc, #64]	; (8004da0 <MX_SPI1_Init+0xa8>)
 8004d5e:	2200      	movs	r2, #0
 8004d60:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004d62:	4b0f      	ldr	r3, [pc, #60]	; (8004da0 <MX_SPI1_Init+0xa8>)
 8004d64:	2200      	movs	r2, #0
 8004d66:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8004d68:	4b0d      	ldr	r3, [pc, #52]	; (8004da0 <MX_SPI1_Init+0xa8>)
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8004d6e:	4b0c      	ldr	r3, [pc, #48]	; (8004da0 <MX_SPI1_Init+0xa8>)
 8004d70:	2200      	movs	r2, #0
 8004d72:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_ENABLE;
 8004d74:	4b0a      	ldr	r3, [pc, #40]	; (8004da0 <MX_SPI1_Init+0xa8>)
 8004d76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d7a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 8004d7c:	4b08      	ldr	r3, [pc, #32]	; (8004da0 <MX_SPI1_Init+0xa8>)
 8004d7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004d82:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_ENABLE;
 8004d84:	4b06      	ldr	r3, [pc, #24]	; (8004da0 <MX_SPI1_Init+0xa8>)
 8004d86:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004d8a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004d8c:	4804      	ldr	r0, [pc, #16]	; (8004da0 <MX_SPI1_Init+0xa8>)
 8004d8e:	f009 f8ed 	bl	800df6c <HAL_SPI_Init>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d001      	beq.n	8004d9c <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 8004d98:	f000 fc84 	bl	80056a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004d9c:	bf00      	nop
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	2400033c 	.word	0x2400033c
 8004da4:	40013000 	.word	0x40013000

08004da8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b08c      	sub	sp, #48	; 0x30
 8004dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004dae:	f107 030c 	add.w	r3, r7, #12
 8004db2:	2224      	movs	r2, #36	; 0x24
 8004db4:	2100      	movs	r1, #0
 8004db6:	4618      	mov	r0, r3
 8004db8:	f00c ff5c 	bl	8011c74 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004dbc:	463b      	mov	r3, r7
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	601a      	str	r2, [r3, #0]
 8004dc2:	605a      	str	r2, [r3, #4]
 8004dc4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004dc6:	4b23      	ldr	r3, [pc, #140]	; (8004e54 <MX_TIM1_Init+0xac>)
 8004dc8:	4a23      	ldr	r2, [pc, #140]	; (8004e58 <MX_TIM1_Init+0xb0>)
 8004dca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004dcc:	4b21      	ldr	r3, [pc, #132]	; (8004e54 <MX_TIM1_Init+0xac>)
 8004dce:	2200      	movs	r2, #0
 8004dd0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004dd2:	4b20      	ldr	r3, [pc, #128]	; (8004e54 <MX_TIM1_Init+0xac>)
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004dd8:	4b1e      	ldr	r3, [pc, #120]	; (8004e54 <MX_TIM1_Init+0xac>)
 8004dda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004dde:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004de0:	4b1c      	ldr	r3, [pc, #112]	; (8004e54 <MX_TIM1_Init+0xac>)
 8004de2:	2200      	movs	r2, #0
 8004de4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004de6:	4b1b      	ldr	r3, [pc, #108]	; (8004e54 <MX_TIM1_Init+0xac>)
 8004de8:	2200      	movs	r2, #0
 8004dea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004dec:	4b19      	ldr	r3, [pc, #100]	; (8004e54 <MX_TIM1_Init+0xac>)
 8004dee:	2200      	movs	r2, #0
 8004df0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004df2:	2303      	movs	r3, #3
 8004df4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004df6:	2300      	movs	r3, #0
 8004df8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004e02:	2300      	movs	r3, #0
 8004e04:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004e06:	2300      	movs	r3, #0
 8004e08:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004e12:	2300      	movs	r3, #0
 8004e14:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8004e16:	f107 030c 	add.w	r3, r7, #12
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	480d      	ldr	r0, [pc, #52]	; (8004e54 <MX_TIM1_Init+0xac>)
 8004e1e:	f009 fa95 	bl	800e34c <HAL_TIM_Encoder_Init>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d001      	beq.n	8004e2c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8004e28:	f000 fc3c 	bl	80056a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004e30:	2300      	movs	r3, #0
 8004e32:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e34:	2300      	movs	r3, #0
 8004e36:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004e38:	463b      	mov	r3, r7
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	4805      	ldr	r0, [pc, #20]	; (8004e54 <MX_TIM1_Init+0xac>)
 8004e3e:	f009 ff57 	bl	800ecf0 <HAL_TIMEx_MasterConfigSynchronization>
 8004e42:	4603      	mov	r3, r0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d001      	beq.n	8004e4c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8004e48:	f000 fc2c 	bl	80056a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8004e4c:	bf00      	nop
 8004e4e:	3730      	adds	r7, #48	; 0x30
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	240003c4 	.word	0x240003c4
 8004e58:	40010000 	.word	0x40010000

08004e5c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b08c      	sub	sp, #48	; 0x30
 8004e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004e62:	f107 030c 	add.w	r3, r7, #12
 8004e66:	2224      	movs	r2, #36	; 0x24
 8004e68:	2100      	movs	r1, #0
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f00c ff02 	bl	8011c74 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e70:	463b      	mov	r3, r7
 8004e72:	2200      	movs	r2, #0
 8004e74:	601a      	str	r2, [r3, #0]
 8004e76:	605a      	str	r2, [r3, #4]
 8004e78:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004e7a:	4b21      	ldr	r3, [pc, #132]	; (8004f00 <MX_TIM2_Init+0xa4>)
 8004e7c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004e80:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004e82:	4b1f      	ldr	r3, [pc, #124]	; (8004f00 <MX_TIM2_Init+0xa4>)
 8004e84:	2200      	movs	r2, #0
 8004e86:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e88:	4b1d      	ldr	r3, [pc, #116]	; (8004f00 <MX_TIM2_Init+0xa4>)
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8004e8e:	4b1c      	ldr	r3, [pc, #112]	; (8004f00 <MX_TIM2_Init+0xa4>)
 8004e90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e94:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e96:	4b1a      	ldr	r3, [pc, #104]	; (8004f00 <MX_TIM2_Init+0xa4>)
 8004e98:	2200      	movs	r2, #0
 8004e9a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e9c:	4b18      	ldr	r3, [pc, #96]	; (8004f00 <MX_TIM2_Init+0xa4>)
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8004ec6:	f107 030c 	add.w	r3, r7, #12
 8004eca:	4619      	mov	r1, r3
 8004ecc:	480c      	ldr	r0, [pc, #48]	; (8004f00 <MX_TIM2_Init+0xa4>)
 8004ece:	f009 fa3d 	bl	800e34c <HAL_TIM_Encoder_Init>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d001      	beq.n	8004edc <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8004ed8:	f000 fbe4 	bl	80056a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004edc:	2300      	movs	r3, #0
 8004ede:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004ee4:	463b      	mov	r3, r7
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	4805      	ldr	r0, [pc, #20]	; (8004f00 <MX_TIM2_Init+0xa4>)
 8004eea:	f009 ff01 	bl	800ecf0 <HAL_TIMEx_MasterConfigSynchronization>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d001      	beq.n	8004ef8 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8004ef4:	f000 fbd6 	bl	80056a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004ef8:	bf00      	nop
 8004efa:	3730      	adds	r7, #48	; 0x30
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	24000410 	.word	0x24000410

08004f04 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b08c      	sub	sp, #48	; 0x30
 8004f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004f0a:	f107 030c 	add.w	r3, r7, #12
 8004f0e:	2224      	movs	r2, #36	; 0x24
 8004f10:	2100      	movs	r1, #0
 8004f12:	4618      	mov	r0, r3
 8004f14:	f00c feae 	bl	8011c74 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f18:	463b      	mov	r3, r7
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	601a      	str	r2, [r3, #0]
 8004f1e:	605a      	str	r2, [r3, #4]
 8004f20:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004f22:	4b21      	ldr	r3, [pc, #132]	; (8004fa8 <MX_TIM3_Init+0xa4>)
 8004f24:	4a21      	ldr	r2, [pc, #132]	; (8004fac <MX_TIM3_Init+0xa8>)
 8004f26:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004f28:	4b1f      	ldr	r3, [pc, #124]	; (8004fa8 <MX_TIM3_Init+0xa4>)
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f2e:	4b1e      	ldr	r3, [pc, #120]	; (8004fa8 <MX_TIM3_Init+0xa4>)
 8004f30:	2200      	movs	r2, #0
 8004f32:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004f34:	4b1c      	ldr	r3, [pc, #112]	; (8004fa8 <MX_TIM3_Init+0xa4>)
 8004f36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f3a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f3c:	4b1a      	ldr	r3, [pc, #104]	; (8004fa8 <MX_TIM3_Init+0xa4>)
 8004f3e:	2200      	movs	r2, #0
 8004f40:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f42:	4b19      	ldr	r3, [pc, #100]	; (8004fa8 <MX_TIM3_Init+0xa4>)
 8004f44:	2200      	movs	r2, #0
 8004f46:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004f50:	2301      	movs	r3, #1
 8004f52:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004f54:	2300      	movs	r3, #0
 8004f56:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004f60:	2301      	movs	r3, #1
 8004f62:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004f64:	2300      	movs	r3, #0
 8004f66:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8004f6c:	f107 030c 	add.w	r3, r7, #12
 8004f70:	4619      	mov	r1, r3
 8004f72:	480d      	ldr	r0, [pc, #52]	; (8004fa8 <MX_TIM3_Init+0xa4>)
 8004f74:	f009 f9ea 	bl	800e34c <HAL_TIM_Encoder_Init>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d001      	beq.n	8004f82 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8004f7e:	f000 fb91 	bl	80056a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f82:	2300      	movs	r3, #0
 8004f84:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f86:	2300      	movs	r3, #0
 8004f88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004f8a:	463b      	mov	r3, r7
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	4806      	ldr	r0, [pc, #24]	; (8004fa8 <MX_TIM3_Init+0xa4>)
 8004f90:	f009 feae 	bl	800ecf0 <HAL_TIMEx_MasterConfigSynchronization>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d001      	beq.n	8004f9e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8004f9a:	f000 fb83 	bl	80056a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004f9e:	bf00      	nop
 8004fa0:	3730      	adds	r7, #48	; 0x30
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	2400045c 	.word	0x2400045c
 8004fac:	40000400 	.word	0x40000400

08004fb0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b08c      	sub	sp, #48	; 0x30
 8004fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004fb6:	f107 030c 	add.w	r3, r7, #12
 8004fba:	2224      	movs	r2, #36	; 0x24
 8004fbc:	2100      	movs	r1, #0
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f00c fe58 	bl	8011c74 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004fc4:	463b      	mov	r3, r7
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	601a      	str	r2, [r3, #0]
 8004fca:	605a      	str	r2, [r3, #4]
 8004fcc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004fce:	4b21      	ldr	r3, [pc, #132]	; (8005054 <MX_TIM4_Init+0xa4>)
 8004fd0:	4a21      	ldr	r2, [pc, #132]	; (8005058 <MX_TIM4_Init+0xa8>)
 8004fd2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004fd4:	4b1f      	ldr	r3, [pc, #124]	; (8005054 <MX_TIM4_Init+0xa4>)
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004fda:	4b1e      	ldr	r3, [pc, #120]	; (8005054 <MX_TIM4_Init+0xa4>)
 8004fdc:	2200      	movs	r2, #0
 8004fde:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8004fe0:	4b1c      	ldr	r3, [pc, #112]	; (8005054 <MX_TIM4_Init+0xa4>)
 8004fe2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004fe6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004fe8:	4b1a      	ldr	r3, [pc, #104]	; (8005054 <MX_TIM4_Init+0xa4>)
 8004fea:	2200      	movs	r2, #0
 8004fec:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004fee:	4b19      	ldr	r3, [pc, #100]	; (8005054 <MX_TIM4_Init+0xa4>)
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005000:	2300      	movs	r3, #0
 8005002:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005004:	2300      	movs	r3, #0
 8005006:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005008:	2300      	movs	r3, #0
 800500a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800500c:	2301      	movs	r3, #1
 800500e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005010:	2300      	movs	r3, #0
 8005012:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8005014:	2300      	movs	r3, #0
 8005016:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8005018:	f107 030c 	add.w	r3, r7, #12
 800501c:	4619      	mov	r1, r3
 800501e:	480d      	ldr	r0, [pc, #52]	; (8005054 <MX_TIM4_Init+0xa4>)
 8005020:	f009 f994 	bl	800e34c <HAL_TIM_Encoder_Init>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d001      	beq.n	800502e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800502a:	f000 fb3b 	bl	80056a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800502e:	2300      	movs	r3, #0
 8005030:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005032:	2300      	movs	r3, #0
 8005034:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005036:	463b      	mov	r3, r7
 8005038:	4619      	mov	r1, r3
 800503a:	4806      	ldr	r0, [pc, #24]	; (8005054 <MX_TIM4_Init+0xa4>)
 800503c:	f009 fe58 	bl	800ecf0 <HAL_TIMEx_MasterConfigSynchronization>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d001      	beq.n	800504a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8005046:	f000 fb2d 	bl	80056a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800504a:	bf00      	nop
 800504c:	3730      	adds	r7, #48	; 0x30
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	240004a8 	.word	0x240004a8
 8005058:	40000800 	.word	0x40000800

0800505c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b088      	sub	sp, #32
 8005060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005062:	f107 0310 	add.w	r3, r7, #16
 8005066:	2200      	movs	r2, #0
 8005068:	601a      	str	r2, [r3, #0]
 800506a:	605a      	str	r2, [r3, #4]
 800506c:	609a      	str	r2, [r3, #8]
 800506e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005070:	1d3b      	adds	r3, r7, #4
 8005072:	2200      	movs	r2, #0
 8005074:	601a      	str	r2, [r3, #0]
 8005076:	605a      	str	r2, [r3, #4]
 8005078:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800507a:	4b1d      	ldr	r3, [pc, #116]	; (80050f0 <MX_TIM5_Init+0x94>)
 800507c:	4a1d      	ldr	r2, [pc, #116]	; (80050f4 <MX_TIM5_Init+0x98>)
 800507e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 240-1;
 8005080:	4b1b      	ldr	r3, [pc, #108]	; (80050f0 <MX_TIM5_Init+0x94>)
 8005082:	22ef      	movs	r2, #239	; 0xef
 8005084:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005086:	4b1a      	ldr	r3, [pc, #104]	; (80050f0 <MX_TIM5_Init+0x94>)
 8005088:	2200      	movs	r2, #0
 800508a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10000-1;
 800508c:	4b18      	ldr	r3, [pc, #96]	; (80050f0 <MX_TIM5_Init+0x94>)
 800508e:	f242 720f 	movw	r2, #9999	; 0x270f
 8005092:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005094:	4b16      	ldr	r3, [pc, #88]	; (80050f0 <MX_TIM5_Init+0x94>)
 8005096:	2200      	movs	r2, #0
 8005098:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800509a:	4b15      	ldr	r3, [pc, #84]	; (80050f0 <MX_TIM5_Init+0x94>)
 800509c:	2200      	movs	r2, #0
 800509e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80050a0:	4813      	ldr	r0, [pc, #76]	; (80050f0 <MX_TIM5_Init+0x94>)
 80050a2:	f009 f884 	bl	800e1ae <HAL_TIM_Base_Init>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d001      	beq.n	80050b0 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80050ac:	f000 fafa 	bl	80056a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80050b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80050b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80050b6:	f107 0310 	add.w	r3, r7, #16
 80050ba:	4619      	mov	r1, r3
 80050bc:	480c      	ldr	r0, [pc, #48]	; (80050f0 <MX_TIM5_Init+0x94>)
 80050be:	f009 fb99 	bl	800e7f4 <HAL_TIM_ConfigClockSource>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d001      	beq.n	80050cc <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80050c8:	f000 faec 	bl	80056a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80050cc:	2300      	movs	r3, #0
 80050ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80050d0:	2300      	movs	r3, #0
 80050d2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80050d4:	1d3b      	adds	r3, r7, #4
 80050d6:	4619      	mov	r1, r3
 80050d8:	4805      	ldr	r0, [pc, #20]	; (80050f0 <MX_TIM5_Init+0x94>)
 80050da:	f009 fe09 	bl	800ecf0 <HAL_TIMEx_MasterConfigSynchronization>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d001      	beq.n	80050e8 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80050e4:	f000 fade 	bl	80056a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80050e8:	bf00      	nop
 80050ea:	3720      	adds	r7, #32
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	240004f4 	.word	0x240004f4
 80050f4:	40000c00 	.word	0x40000c00

080050f8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80050fe:	1d3b      	adds	r3, r7, #4
 8005100:	2200      	movs	r2, #0
 8005102:	601a      	str	r2, [r3, #0]
 8005104:	605a      	str	r2, [r3, #4]
 8005106:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8005108:	4b14      	ldr	r3, [pc, #80]	; (800515c <MX_TIM6_Init+0x64>)
 800510a:	4a15      	ldr	r2, [pc, #84]	; (8005160 <MX_TIM6_Init+0x68>)
 800510c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 240-1;
 800510e:	4b13      	ldr	r3, [pc, #76]	; (800515c <MX_TIM6_Init+0x64>)
 8005110:	22ef      	movs	r2, #239	; 0xef
 8005112:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005114:	4b11      	ldr	r3, [pc, #68]	; (800515c <MX_TIM6_Init+0x64>)
 8005116:	2200      	movs	r2, #0
 8005118:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800511a:	4b10      	ldr	r3, [pc, #64]	; (800515c <MX_TIM6_Init+0x64>)
 800511c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005120:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005122:	4b0e      	ldr	r3, [pc, #56]	; (800515c <MX_TIM6_Init+0x64>)
 8005124:	2200      	movs	r2, #0
 8005126:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005128:	480c      	ldr	r0, [pc, #48]	; (800515c <MX_TIM6_Init+0x64>)
 800512a:	f009 f840 	bl	800e1ae <HAL_TIM_Base_Init>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d001      	beq.n	8005138 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8005134:	f000 fab6 	bl	80056a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005138:	2300      	movs	r3, #0
 800513a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800513c:	2300      	movs	r3, #0
 800513e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005140:	1d3b      	adds	r3, r7, #4
 8005142:	4619      	mov	r1, r3
 8005144:	4805      	ldr	r0, [pc, #20]	; (800515c <MX_TIM6_Init+0x64>)
 8005146:	f009 fdd3 	bl	800ecf0 <HAL_TIMEx_MasterConfigSynchronization>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d001      	beq.n	8005154 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8005150:	f000 faa8 	bl	80056a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8005154:	bf00      	nop
 8005156:	3710      	adds	r7, #16
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}
 800515c:	24000540 	.word	0x24000540
 8005160:	40001000 	.word	0x40001000

08005164 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800516a:	1d3b      	adds	r3, r7, #4
 800516c:	2200      	movs	r2, #0
 800516e:	601a      	str	r2, [r3, #0]
 8005170:	605a      	str	r2, [r3, #4]
 8005172:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8005174:	4b14      	ldr	r3, [pc, #80]	; (80051c8 <MX_TIM7_Init+0x64>)
 8005176:	4a15      	ldr	r2, [pc, #84]	; (80051cc <MX_TIM7_Init+0x68>)
 8005178:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 240-1;
 800517a:	4b13      	ldr	r3, [pc, #76]	; (80051c8 <MX_TIM7_Init+0x64>)
 800517c:	22ef      	movs	r2, #239	; 0xef
 800517e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005180:	4b11      	ldr	r3, [pc, #68]	; (80051c8 <MX_TIM7_Init+0x64>)
 8005182:	2200      	movs	r2, #0
 8005184:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 8005186:	4b10      	ldr	r3, [pc, #64]	; (80051c8 <MX_TIM7_Init+0x64>)
 8005188:	f240 32e7 	movw	r2, #999	; 0x3e7
 800518c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800518e:	4b0e      	ldr	r3, [pc, #56]	; (80051c8 <MX_TIM7_Init+0x64>)
 8005190:	2200      	movs	r2, #0
 8005192:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005194:	480c      	ldr	r0, [pc, #48]	; (80051c8 <MX_TIM7_Init+0x64>)
 8005196:	f009 f80a 	bl	800e1ae <HAL_TIM_Base_Init>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d001      	beq.n	80051a4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80051a0:	f000 fa80 	bl	80056a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80051a4:	2300      	movs	r3, #0
 80051a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80051a8:	2300      	movs	r3, #0
 80051aa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80051ac:	1d3b      	adds	r3, r7, #4
 80051ae:	4619      	mov	r1, r3
 80051b0:	4805      	ldr	r0, [pc, #20]	; (80051c8 <MX_TIM7_Init+0x64>)
 80051b2:	f009 fd9d 	bl	800ecf0 <HAL_TIMEx_MasterConfigSynchronization>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d001      	beq.n	80051c0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80051bc:	f000 fa72 	bl	80056a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80051c0:	bf00      	nop
 80051c2:	3710      	adds	r7, #16
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	2400058c 	.word	0x2400058c
 80051cc:	40001400 	.word	0x40001400

080051d0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b08c      	sub	sp, #48	; 0x30
 80051d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80051d6:	f107 030c 	add.w	r3, r7, #12
 80051da:	2224      	movs	r2, #36	; 0x24
 80051dc:	2100      	movs	r1, #0
 80051de:	4618      	mov	r0, r3
 80051e0:	f00c fd48 	bl	8011c74 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80051e4:	463b      	mov	r3, r7
 80051e6:	2200      	movs	r2, #0
 80051e8:	601a      	str	r2, [r3, #0]
 80051ea:	605a      	str	r2, [r3, #4]
 80051ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80051ee:	4b23      	ldr	r3, [pc, #140]	; (800527c <MX_TIM8_Init+0xac>)
 80051f0:	4a23      	ldr	r2, [pc, #140]	; (8005280 <MX_TIM8_Init+0xb0>)
 80051f2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80051f4:	4b21      	ldr	r3, [pc, #132]	; (800527c <MX_TIM8_Init+0xac>)
 80051f6:	2200      	movs	r2, #0
 80051f8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80051fa:	4b20      	ldr	r3, [pc, #128]	; (800527c <MX_TIM8_Init+0xac>)
 80051fc:	2200      	movs	r2, #0
 80051fe:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8005200:	4b1e      	ldr	r3, [pc, #120]	; (800527c <MX_TIM8_Init+0xac>)
 8005202:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005206:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005208:	4b1c      	ldr	r3, [pc, #112]	; (800527c <MX_TIM8_Init+0xac>)
 800520a:	2200      	movs	r2, #0
 800520c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800520e:	4b1b      	ldr	r3, [pc, #108]	; (800527c <MX_TIM8_Init+0xac>)
 8005210:	2200      	movs	r2, #0
 8005212:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005214:	4b19      	ldr	r3, [pc, #100]	; (800527c <MX_TIM8_Init+0xac>)
 8005216:	2200      	movs	r2, #0
 8005218:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800521a:	2303      	movs	r3, #3
 800521c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800521e:	2300      	movs	r3, #0
 8005220:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005222:	2301      	movs	r3, #1
 8005224:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005226:	2300      	movs	r3, #0
 8005228:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800522a:	2300      	movs	r3, #0
 800522c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800522e:	2300      	movs	r3, #0
 8005230:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005232:	2301      	movs	r3, #1
 8005234:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005236:	2300      	movs	r3, #0
 8005238:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800523a:	2300      	movs	r3, #0
 800523c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800523e:	f107 030c 	add.w	r3, r7, #12
 8005242:	4619      	mov	r1, r3
 8005244:	480d      	ldr	r0, [pc, #52]	; (800527c <MX_TIM8_Init+0xac>)
 8005246:	f009 f881 	bl	800e34c <HAL_TIM_Encoder_Init>
 800524a:	4603      	mov	r3, r0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d001      	beq.n	8005254 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8005250:	f000 fa28 	bl	80056a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005254:	2300      	movs	r3, #0
 8005256:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005258:	2300      	movs	r3, #0
 800525a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800525c:	2300      	movs	r3, #0
 800525e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8005260:	463b      	mov	r3, r7
 8005262:	4619      	mov	r1, r3
 8005264:	4805      	ldr	r0, [pc, #20]	; (800527c <MX_TIM8_Init+0xac>)
 8005266:	f009 fd43 	bl	800ecf0 <HAL_TIMEx_MasterConfigSynchronization>
 800526a:	4603      	mov	r3, r0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d001      	beq.n	8005274 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8005270:	f000 fa18 	bl	80056a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8005274:	bf00      	nop
 8005276:	3730      	adds	r7, #48	; 0x30
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}
 800527c:	240005d8 	.word	0x240005d8
 8005280:	40010400 	.word	0x40010400

08005284 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8005288:	4b0e      	ldr	r3, [pc, #56]	; (80052c4 <MX_TIM13_Init+0x40>)
 800528a:	4a0f      	ldr	r2, [pc, #60]	; (80052c8 <MX_TIM13_Init+0x44>)
 800528c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 240-1;
 800528e:	4b0d      	ldr	r3, [pc, #52]	; (80052c4 <MX_TIM13_Init+0x40>)
 8005290:	22ef      	movs	r2, #239	; 0xef
 8005292:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005294:	4b0b      	ldr	r3, [pc, #44]	; (80052c4 <MX_TIM13_Init+0x40>)
 8005296:	2200      	movs	r2, #0
 8005298:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 10000-1;
 800529a:	4b0a      	ldr	r3, [pc, #40]	; (80052c4 <MX_TIM13_Init+0x40>)
 800529c:	f242 720f 	movw	r2, #9999	; 0x270f
 80052a0:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80052a2:	4b08      	ldr	r3, [pc, #32]	; (80052c4 <MX_TIM13_Init+0x40>)
 80052a4:	2200      	movs	r2, #0
 80052a6:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80052a8:	4b06      	ldr	r3, [pc, #24]	; (80052c4 <MX_TIM13_Init+0x40>)
 80052aa:	2200      	movs	r2, #0
 80052ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80052ae:	4805      	ldr	r0, [pc, #20]	; (80052c4 <MX_TIM13_Init+0x40>)
 80052b0:	f008 ff7d 	bl	800e1ae <HAL_TIM_Base_Init>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d001      	beq.n	80052be <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 80052ba:	f000 f9f3 	bl	80056a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80052be:	bf00      	nop
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	24000624 	.word	0x24000624
 80052c8:	40001c00 	.word	0x40001c00

080052cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80052d0:	4b22      	ldr	r3, [pc, #136]	; (800535c <MX_USART1_UART_Init+0x90>)
 80052d2:	4a23      	ldr	r2, [pc, #140]	; (8005360 <MX_USART1_UART_Init+0x94>)
 80052d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2400;
 80052d6:	4b21      	ldr	r3, [pc, #132]	; (800535c <MX_USART1_UART_Init+0x90>)
 80052d8:	f44f 6216 	mov.w	r2, #2400	; 0x960
 80052dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80052de:	4b1f      	ldr	r3, [pc, #124]	; (800535c <MX_USART1_UART_Init+0x90>)
 80052e0:	2200      	movs	r2, #0
 80052e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80052e4:	4b1d      	ldr	r3, [pc, #116]	; (800535c <MX_USART1_UART_Init+0x90>)
 80052e6:	2200      	movs	r2, #0
 80052e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80052ea:	4b1c      	ldr	r3, [pc, #112]	; (800535c <MX_USART1_UART_Init+0x90>)
 80052ec:	2200      	movs	r2, #0
 80052ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80052f0:	4b1a      	ldr	r3, [pc, #104]	; (800535c <MX_USART1_UART_Init+0x90>)
 80052f2:	220c      	movs	r2, #12
 80052f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80052f6:	4b19      	ldr	r3, [pc, #100]	; (800535c <MX_USART1_UART_Init+0x90>)
 80052f8:	2200      	movs	r2, #0
 80052fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80052fc:	4b17      	ldr	r3, [pc, #92]	; (800535c <MX_USART1_UART_Init+0x90>)
 80052fe:	2200      	movs	r2, #0
 8005300:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005302:	4b16      	ldr	r3, [pc, #88]	; (800535c <MX_USART1_UART_Init+0x90>)
 8005304:	2200      	movs	r2, #0
 8005306:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005308:	4b14      	ldr	r3, [pc, #80]	; (800535c <MX_USART1_UART_Init+0x90>)
 800530a:	2200      	movs	r2, #0
 800530c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800530e:	4b13      	ldr	r3, [pc, #76]	; (800535c <MX_USART1_UART_Init+0x90>)
 8005310:	2200      	movs	r2, #0
 8005312:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005314:	4811      	ldr	r0, [pc, #68]	; (800535c <MX_USART1_UART_Init+0x90>)
 8005316:	f009 fd97 	bl	800ee48 <HAL_UART_Init>
 800531a:	4603      	mov	r3, r0
 800531c:	2b00      	cmp	r3, #0
 800531e:	d001      	beq.n	8005324 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8005320:	f000 f9c0 	bl	80056a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005324:	2100      	movs	r1, #0
 8005326:	480d      	ldr	r0, [pc, #52]	; (800535c <MX_USART1_UART_Init+0x90>)
 8005328:	f00b fc8f 	bl	8010c4a <HAL_UARTEx_SetTxFifoThreshold>
 800532c:	4603      	mov	r3, r0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d001      	beq.n	8005336 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8005332:	f000 f9b7 	bl	80056a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005336:	2100      	movs	r1, #0
 8005338:	4808      	ldr	r0, [pc, #32]	; (800535c <MX_USART1_UART_Init+0x90>)
 800533a:	f00b fcc4 	bl	8010cc6 <HAL_UARTEx_SetRxFifoThreshold>
 800533e:	4603      	mov	r3, r0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d001      	beq.n	8005348 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8005344:	f000 f9ae 	bl	80056a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8005348:	4804      	ldr	r0, [pc, #16]	; (800535c <MX_USART1_UART_Init+0x90>)
 800534a:	f00b fc45 	bl	8010bd8 <HAL_UARTEx_DisableFifoMode>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d001      	beq.n	8005358 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8005354:	f000 f9a6 	bl	80056a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005358:	bf00      	nop
 800535a:	bd80      	pop	{r7, pc}
 800535c:	24000670 	.word	0x24000670
 8005360:	40011000 	.word	0x40011000

08005364 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005368:	4b22      	ldr	r3, [pc, #136]	; (80053f4 <MX_USART2_UART_Init+0x90>)
 800536a:	4a23      	ldr	r2, [pc, #140]	; (80053f8 <MX_USART2_UART_Init+0x94>)
 800536c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800536e:	4b21      	ldr	r3, [pc, #132]	; (80053f4 <MX_USART2_UART_Init+0x90>)
 8005370:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005374:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005376:	4b1f      	ldr	r3, [pc, #124]	; (80053f4 <MX_USART2_UART_Init+0x90>)
 8005378:	2200      	movs	r2, #0
 800537a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800537c:	4b1d      	ldr	r3, [pc, #116]	; (80053f4 <MX_USART2_UART_Init+0x90>)
 800537e:	2200      	movs	r2, #0
 8005380:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005382:	4b1c      	ldr	r3, [pc, #112]	; (80053f4 <MX_USART2_UART_Init+0x90>)
 8005384:	2200      	movs	r2, #0
 8005386:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005388:	4b1a      	ldr	r3, [pc, #104]	; (80053f4 <MX_USART2_UART_Init+0x90>)
 800538a:	220c      	movs	r2, #12
 800538c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800538e:	4b19      	ldr	r3, [pc, #100]	; (80053f4 <MX_USART2_UART_Init+0x90>)
 8005390:	2200      	movs	r2, #0
 8005392:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005394:	4b17      	ldr	r3, [pc, #92]	; (80053f4 <MX_USART2_UART_Init+0x90>)
 8005396:	2200      	movs	r2, #0
 8005398:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800539a:	4b16      	ldr	r3, [pc, #88]	; (80053f4 <MX_USART2_UART_Init+0x90>)
 800539c:	2200      	movs	r2, #0
 800539e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80053a0:	4b14      	ldr	r3, [pc, #80]	; (80053f4 <MX_USART2_UART_Init+0x90>)
 80053a2:	2200      	movs	r2, #0
 80053a4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80053a6:	4b13      	ldr	r3, [pc, #76]	; (80053f4 <MX_USART2_UART_Init+0x90>)
 80053a8:	2200      	movs	r2, #0
 80053aa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80053ac:	4811      	ldr	r0, [pc, #68]	; (80053f4 <MX_USART2_UART_Init+0x90>)
 80053ae:	f009 fd4b 	bl	800ee48 <HAL_UART_Init>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d001      	beq.n	80053bc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80053b8:	f000 f974 	bl	80056a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80053bc:	2100      	movs	r1, #0
 80053be:	480d      	ldr	r0, [pc, #52]	; (80053f4 <MX_USART2_UART_Init+0x90>)
 80053c0:	f00b fc43 	bl	8010c4a <HAL_UARTEx_SetTxFifoThreshold>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d001      	beq.n	80053ce <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80053ca:	f000 f96b 	bl	80056a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80053ce:	2100      	movs	r1, #0
 80053d0:	4808      	ldr	r0, [pc, #32]	; (80053f4 <MX_USART2_UART_Init+0x90>)
 80053d2:	f00b fc78 	bl	8010cc6 <HAL_UARTEx_SetRxFifoThreshold>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d001      	beq.n	80053e0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80053dc:	f000 f962 	bl	80056a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80053e0:	4804      	ldr	r0, [pc, #16]	; (80053f4 <MX_USART2_UART_Init+0x90>)
 80053e2:	f00b fbf9 	bl	8010bd8 <HAL_UARTEx_DisableFifoMode>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d001      	beq.n	80053f0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80053ec:	f000 f95a 	bl	80056a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80053f0:	bf00      	nop
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	24000700 	.word	0x24000700
 80053f8:	40004400 	.word	0x40004400

080053fc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005400:	4b22      	ldr	r3, [pc, #136]	; (800548c <MX_USART3_UART_Init+0x90>)
 8005402:	4a23      	ldr	r2, [pc, #140]	; (8005490 <MX_USART3_UART_Init+0x94>)
 8005404:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005406:	4b21      	ldr	r3, [pc, #132]	; (800548c <MX_USART3_UART_Init+0x90>)
 8005408:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800540c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800540e:	4b1f      	ldr	r3, [pc, #124]	; (800548c <MX_USART3_UART_Init+0x90>)
 8005410:	2200      	movs	r2, #0
 8005412:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005414:	4b1d      	ldr	r3, [pc, #116]	; (800548c <MX_USART3_UART_Init+0x90>)
 8005416:	2200      	movs	r2, #0
 8005418:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800541a:	4b1c      	ldr	r3, [pc, #112]	; (800548c <MX_USART3_UART_Init+0x90>)
 800541c:	2200      	movs	r2, #0
 800541e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005420:	4b1a      	ldr	r3, [pc, #104]	; (800548c <MX_USART3_UART_Init+0x90>)
 8005422:	220c      	movs	r2, #12
 8005424:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005426:	4b19      	ldr	r3, [pc, #100]	; (800548c <MX_USART3_UART_Init+0x90>)
 8005428:	2200      	movs	r2, #0
 800542a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800542c:	4b17      	ldr	r3, [pc, #92]	; (800548c <MX_USART3_UART_Init+0x90>)
 800542e:	2200      	movs	r2, #0
 8005430:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005432:	4b16      	ldr	r3, [pc, #88]	; (800548c <MX_USART3_UART_Init+0x90>)
 8005434:	2200      	movs	r2, #0
 8005436:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005438:	4b14      	ldr	r3, [pc, #80]	; (800548c <MX_USART3_UART_Init+0x90>)
 800543a:	2200      	movs	r2, #0
 800543c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800543e:	4b13      	ldr	r3, [pc, #76]	; (800548c <MX_USART3_UART_Init+0x90>)
 8005440:	2200      	movs	r2, #0
 8005442:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005444:	4811      	ldr	r0, [pc, #68]	; (800548c <MX_USART3_UART_Init+0x90>)
 8005446:	f009 fcff 	bl	800ee48 <HAL_UART_Init>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d001      	beq.n	8005454 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8005450:	f000 f928 	bl	80056a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005454:	2100      	movs	r1, #0
 8005456:	480d      	ldr	r0, [pc, #52]	; (800548c <MX_USART3_UART_Init+0x90>)
 8005458:	f00b fbf7 	bl	8010c4a <HAL_UARTEx_SetTxFifoThreshold>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d001      	beq.n	8005466 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8005462:	f000 f91f 	bl	80056a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005466:	2100      	movs	r1, #0
 8005468:	4808      	ldr	r0, [pc, #32]	; (800548c <MX_USART3_UART_Init+0x90>)
 800546a:	f00b fc2c 	bl	8010cc6 <HAL_UARTEx_SetRxFifoThreshold>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d001      	beq.n	8005478 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8005474:	f000 f916 	bl	80056a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8005478:	4804      	ldr	r0, [pc, #16]	; (800548c <MX_USART3_UART_Init+0x90>)
 800547a:	f00b fbad 	bl	8010bd8 <HAL_UARTEx_DisableFifoMode>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d001      	beq.n	8005488 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8005484:	f000 f90e 	bl	80056a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005488:	bf00      	nop
 800548a:	bd80      	pop	{r7, pc}
 800548c:	24000790 	.word	0x24000790
 8005490:	40004800 	.word	0x40004800

08005494 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b082      	sub	sp, #8
 8005498:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800549a:	4b15      	ldr	r3, [pc, #84]	; (80054f0 <MX_DMA_Init+0x5c>)
 800549c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80054a0:	4a13      	ldr	r2, [pc, #76]	; (80054f0 <MX_DMA_Init+0x5c>)
 80054a2:	f043 0301 	orr.w	r3, r3, #1
 80054a6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80054aa:	4b11      	ldr	r3, [pc, #68]	; (80054f0 <MX_DMA_Init+0x5c>)
 80054ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80054b0:	f003 0301 	and.w	r3, r3, #1
 80054b4:	607b      	str	r3, [r7, #4]
 80054b6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80054b8:	2200      	movs	r2, #0
 80054ba:	2100      	movs	r1, #0
 80054bc:	200b      	movs	r0, #11
 80054be:	f001 ffc0 	bl	8007442 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80054c2:	200b      	movs	r0, #11
 80054c4:	f001 ffd7 	bl	8007476 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80054c8:	2200      	movs	r2, #0
 80054ca:	2100      	movs	r1, #0
 80054cc:	200c      	movs	r0, #12
 80054ce:	f001 ffb8 	bl	8007442 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80054d2:	200c      	movs	r0, #12
 80054d4:	f001 ffcf 	bl	8007476 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80054d8:	2200      	movs	r2, #0
 80054da:	2100      	movs	r1, #0
 80054dc:	200d      	movs	r0, #13
 80054de:	f001 ffb0 	bl	8007442 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80054e2:	200d      	movs	r0, #13
 80054e4:	f001 ffc7 	bl	8007476 <HAL_NVIC_EnableIRQ>

}
 80054e8:	bf00      	nop
 80054ea:	3708      	adds	r7, #8
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	58024400 	.word	0x58024400

080054f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b08c      	sub	sp, #48	; 0x30
 80054f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054fa:	f107 031c 	add.w	r3, r7, #28
 80054fe:	2200      	movs	r2, #0
 8005500:	601a      	str	r2, [r3, #0]
 8005502:	605a      	str	r2, [r3, #4]
 8005504:	609a      	str	r2, [r3, #8]
 8005506:	60da      	str	r2, [r3, #12]
 8005508:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800550a:	4b61      	ldr	r3, [pc, #388]	; (8005690 <MX_GPIO_Init+0x19c>)
 800550c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005510:	4a5f      	ldr	r2, [pc, #380]	; (8005690 <MX_GPIO_Init+0x19c>)
 8005512:	f043 0304 	orr.w	r3, r3, #4
 8005516:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800551a:	4b5d      	ldr	r3, [pc, #372]	; (8005690 <MX_GPIO_Init+0x19c>)
 800551c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005520:	f003 0304 	and.w	r3, r3, #4
 8005524:	61bb      	str	r3, [r7, #24]
 8005526:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005528:	4b59      	ldr	r3, [pc, #356]	; (8005690 <MX_GPIO_Init+0x19c>)
 800552a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800552e:	4a58      	ldr	r2, [pc, #352]	; (8005690 <MX_GPIO_Init+0x19c>)
 8005530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005534:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005538:	4b55      	ldr	r3, [pc, #340]	; (8005690 <MX_GPIO_Init+0x19c>)
 800553a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800553e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005542:	617b      	str	r3, [r7, #20]
 8005544:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005546:	4b52      	ldr	r3, [pc, #328]	; (8005690 <MX_GPIO_Init+0x19c>)
 8005548:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800554c:	4a50      	ldr	r2, [pc, #320]	; (8005690 <MX_GPIO_Init+0x19c>)
 800554e:	f043 0301 	orr.w	r3, r3, #1
 8005552:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005556:	4b4e      	ldr	r3, [pc, #312]	; (8005690 <MX_GPIO_Init+0x19c>)
 8005558:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800555c:	f003 0301 	and.w	r3, r3, #1
 8005560:	613b      	str	r3, [r7, #16]
 8005562:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005564:	4b4a      	ldr	r3, [pc, #296]	; (8005690 <MX_GPIO_Init+0x19c>)
 8005566:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800556a:	4a49      	ldr	r2, [pc, #292]	; (8005690 <MX_GPIO_Init+0x19c>)
 800556c:	f043 0302 	orr.w	r3, r3, #2
 8005570:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005574:	4b46      	ldr	r3, [pc, #280]	; (8005690 <MX_GPIO_Init+0x19c>)
 8005576:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800557a:	f003 0302 	and.w	r3, r3, #2
 800557e:	60fb      	str	r3, [r7, #12]
 8005580:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005582:	4b43      	ldr	r3, [pc, #268]	; (8005690 <MX_GPIO_Init+0x19c>)
 8005584:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005588:	4a41      	ldr	r2, [pc, #260]	; (8005690 <MX_GPIO_Init+0x19c>)
 800558a:	f043 0310 	orr.w	r3, r3, #16
 800558e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005592:	4b3f      	ldr	r3, [pc, #252]	; (8005690 <MX_GPIO_Init+0x19c>)
 8005594:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005598:	f003 0310 	and.w	r3, r3, #16
 800559c:	60bb      	str	r3, [r7, #8]
 800559e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80055a0:	4b3b      	ldr	r3, [pc, #236]	; (8005690 <MX_GPIO_Init+0x19c>)
 80055a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80055a6:	4a3a      	ldr	r2, [pc, #232]	; (8005690 <MX_GPIO_Init+0x19c>)
 80055a8:	f043 0308 	orr.w	r3, r3, #8
 80055ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80055b0:	4b37      	ldr	r3, [pc, #220]	; (8005690 <MX_GPIO_Init+0x19c>)
 80055b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80055b6:	f003 0308 	and.w	r3, r3, #8
 80055ba:	607b      	str	r3, [r7, #4]
 80055bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80055be:	2200      	movs	r2, #0
 80055c0:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 80055c4:	4833      	ldr	r0, [pc, #204]	; (8005694 <MX_GPIO_Init+0x1a0>)
 80055c6:	f006 f95b 	bl	800b880 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80055ca:	2200      	movs	r2, #0
 80055cc:	2110      	movs	r1, #16
 80055ce:	4832      	ldr	r0, [pc, #200]	; (8005698 <MX_GPIO_Init+0x1a4>)
 80055d0:	f006 f956 	bl	800b880 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80055d4:	2200      	movs	r2, #0
 80055d6:	2138      	movs	r1, #56	; 0x38
 80055d8:	4830      	ldr	r0, [pc, #192]	; (800569c <MX_GPIO_Init+0x1a8>)
 80055da:	f006 f951 	bl	800b880 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_12;
 80055de:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80055e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80055e4:	2301      	movs	r3, #1
 80055e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055e8:	2300      	movs	r3, #0
 80055ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055ec:	2300      	movs	r3, #0
 80055ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80055f0:	f107 031c 	add.w	r3, r7, #28
 80055f4:	4619      	mov	r1, r3
 80055f6:	4827      	ldr	r0, [pc, #156]	; (8005694 <MX_GPIO_Init+0x1a0>)
 80055f8:	f005 ff92 	bl	800b520 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80055fc:	2310      	movs	r3, #16
 80055fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005600:	2301      	movs	r3, #1
 8005602:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005604:	2300      	movs	r3, #0
 8005606:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005608:	2300      	movs	r3, #0
 800560a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800560c:	f107 031c 	add.w	r3, r7, #28
 8005610:	4619      	mov	r1, r3
 8005612:	4821      	ldr	r0, [pc, #132]	; (8005698 <MX_GPIO_Init+0x1a4>)
 8005614:	f005 ff84 	bl	800b520 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005618:	2330      	movs	r3, #48	; 0x30
 800561a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800561c:	2300      	movs	r3, #0
 800561e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005620:	2300      	movs	r3, #0
 8005622:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005624:	f107 031c 	add.w	r3, r7, #28
 8005628:	4619      	mov	r1, r3
 800562a:	481a      	ldr	r0, [pc, #104]	; (8005694 <MX_GPIO_Init+0x1a0>)
 800562c:	f005 ff78 	bl	800b520 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005630:	2301      	movs	r3, #1
 8005632:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005634:	2300      	movs	r3, #0
 8005636:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005638:	2300      	movs	r3, #0
 800563a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800563c:	f107 031c 	add.w	r3, r7, #28
 8005640:	4619      	mov	r1, r3
 8005642:	4817      	ldr	r0, [pc, #92]	; (80056a0 <MX_GPIO_Init+0x1ac>)
 8005644:	f005 ff6c 	bl	800b520 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8005648:	2338      	movs	r3, #56	; 0x38
 800564a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800564c:	2301      	movs	r3, #1
 800564e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005650:	2300      	movs	r3, #0
 8005652:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005654:	2300      	movs	r3, #0
 8005656:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005658:	f107 031c 	add.w	r3, r7, #28
 800565c:	4619      	mov	r1, r3
 800565e:	480f      	ldr	r0, [pc, #60]	; (800569c <MX_GPIO_Init+0x1a8>)
 8005660:	f005 ff5e 	bl	800b520 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8005664:	f44f 7310 	mov.w	r3, #576	; 0x240
 8005668:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800566a:	2312      	movs	r3, #18
 800566c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800566e:	2300      	movs	r3, #0
 8005670:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005672:	2300      	movs	r3, #0
 8005674:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005676:	2304      	movs	r3, #4
 8005678:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800567a:	f107 031c 	add.w	r3, r7, #28
 800567e:	4619      	mov	r1, r3
 8005680:	4807      	ldr	r0, [pc, #28]	; (80056a0 <MX_GPIO_Init+0x1ac>)
 8005682:	f005 ff4d 	bl	800b520 <HAL_GPIO_Init>

}
 8005686:	bf00      	nop
 8005688:	3730      	adds	r7, #48	; 0x30
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	58024400 	.word	0x58024400
 8005694:	58020800 	.word	0x58020800
 8005698:	58020000 	.word	0x58020000
 800569c:	58020c00 	.word	0x58020c00
 80056a0:	58020400 	.word	0x58020400

080056a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80056a4:	b480      	push	{r7}
 80056a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80056a8:	b672      	cpsid	i
}
 80056aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80056ac:	e7fe      	b.n	80056ac <Error_Handler+0x8>
	...

080056b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056b6:	4b0a      	ldr	r3, [pc, #40]	; (80056e0 <HAL_MspInit+0x30>)
 80056b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80056bc:	4a08      	ldr	r2, [pc, #32]	; (80056e0 <HAL_MspInit+0x30>)
 80056be:	f043 0302 	orr.w	r3, r3, #2
 80056c2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80056c6:	4b06      	ldr	r3, [pc, #24]	; (80056e0 <HAL_MspInit+0x30>)
 80056c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80056cc:	f003 0302 	and.w	r3, r3, #2
 80056d0:	607b      	str	r3, [r7, #4]
 80056d2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80056d4:	bf00      	nop
 80056d6:	370c      	adds	r7, #12
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr
 80056e0:	58024400 	.word	0x58024400

080056e4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b0ba      	sub	sp, #232	; 0xe8
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056ec:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80056f0:	2200      	movs	r2, #0
 80056f2:	601a      	str	r2, [r3, #0]
 80056f4:	605a      	str	r2, [r3, #4]
 80056f6:	609a      	str	r2, [r3, #8]
 80056f8:	60da      	str	r2, [r3, #12]
 80056fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80056fc:	f107 0318 	add.w	r3, r7, #24
 8005700:	22bc      	movs	r2, #188	; 0xbc
 8005702:	2100      	movs	r1, #0
 8005704:	4618      	mov	r0, r3
 8005706:	f00c fab5 	bl	8011c74 <memset>
  if(hfdcan->Instance==FDCAN1)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a5c      	ldr	r2, [pc, #368]	; (8005880 <HAL_FDCAN_MspInit+0x19c>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d155      	bne.n	80057c0 <HAL_FDCAN_MspInit+0xdc>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8005714:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005718:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800571a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800571e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005722:	f107 0318 	add.w	r3, r7, #24
 8005726:	4618      	mov	r0, r3
 8005728:	f007 f8b8 	bl	800c89c <HAL_RCCEx_PeriphCLKConfig>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d001      	beq.n	8005736 <HAL_FDCAN_MspInit+0x52>
    {
      Error_Handler();
 8005732:	f7ff ffb7 	bl	80056a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8005736:	4b53      	ldr	r3, [pc, #332]	; (8005884 <HAL_FDCAN_MspInit+0x1a0>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	3301      	adds	r3, #1
 800573c:	4a51      	ldr	r2, [pc, #324]	; (8005884 <HAL_FDCAN_MspInit+0x1a0>)
 800573e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8005740:	4b50      	ldr	r3, [pc, #320]	; (8005884 <HAL_FDCAN_MspInit+0x1a0>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2b01      	cmp	r3, #1
 8005746:	d10e      	bne.n	8005766 <HAL_FDCAN_MspInit+0x82>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8005748:	4b4f      	ldr	r3, [pc, #316]	; (8005888 <HAL_FDCAN_MspInit+0x1a4>)
 800574a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800574e:	4a4e      	ldr	r2, [pc, #312]	; (8005888 <HAL_FDCAN_MspInit+0x1a4>)
 8005750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005754:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8005758:	4b4b      	ldr	r3, [pc, #300]	; (8005888 <HAL_FDCAN_MspInit+0x1a4>)
 800575a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800575e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005762:	617b      	str	r3, [r7, #20]
 8005764:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005766:	4b48      	ldr	r3, [pc, #288]	; (8005888 <HAL_FDCAN_MspInit+0x1a4>)
 8005768:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800576c:	4a46      	ldr	r2, [pc, #280]	; (8005888 <HAL_FDCAN_MspInit+0x1a4>)
 800576e:	f043 0308 	orr.w	r3, r3, #8
 8005772:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005776:	4b44      	ldr	r3, [pc, #272]	; (8005888 <HAL_FDCAN_MspInit+0x1a4>)
 8005778:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800577c:	f003 0308 	and.w	r3, r3, #8
 8005780:	613b      	str	r3, [r7, #16]
 8005782:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005784:	2303      	movs	r3, #3
 8005786:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800578a:	2302      	movs	r3, #2
 800578c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005790:	2300      	movs	r3, #0
 8005792:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005796:	2300      	movs	r3, #0
 8005798:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800579c:	2309      	movs	r3, #9
 800579e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80057a2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80057a6:	4619      	mov	r1, r3
 80057a8:	4838      	ldr	r0, [pc, #224]	; (800588c <HAL_FDCAN_MspInit+0x1a8>)
 80057aa:	f005 feb9 	bl	800b520 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80057ae:	2200      	movs	r2, #0
 80057b0:	2100      	movs	r1, #0
 80057b2:	2013      	movs	r0, #19
 80057b4:	f001 fe45 	bl	8007442 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80057b8:	2013      	movs	r0, #19
 80057ba:	f001 fe5c 	bl	8007476 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 80057be:	e05a      	b.n	8005876 <HAL_FDCAN_MspInit+0x192>
  else if(hfdcan->Instance==FDCAN2)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a32      	ldr	r2, [pc, #200]	; (8005890 <HAL_FDCAN_MspInit+0x1ac>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d155      	bne.n	8005876 <HAL_FDCAN_MspInit+0x192>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80057ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057ce:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80057d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80057d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80057d8:	f107 0318 	add.w	r3, r7, #24
 80057dc:	4618      	mov	r0, r3
 80057de:	f007 f85d 	bl	800c89c <HAL_RCCEx_PeriphCLKConfig>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d001      	beq.n	80057ec <HAL_FDCAN_MspInit+0x108>
      Error_Handler();
 80057e8:	f7ff ff5c 	bl	80056a4 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80057ec:	4b25      	ldr	r3, [pc, #148]	; (8005884 <HAL_FDCAN_MspInit+0x1a0>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	3301      	adds	r3, #1
 80057f2:	4a24      	ldr	r2, [pc, #144]	; (8005884 <HAL_FDCAN_MspInit+0x1a0>)
 80057f4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80057f6:	4b23      	ldr	r3, [pc, #140]	; (8005884 <HAL_FDCAN_MspInit+0x1a0>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d10e      	bne.n	800581c <HAL_FDCAN_MspInit+0x138>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80057fe:	4b22      	ldr	r3, [pc, #136]	; (8005888 <HAL_FDCAN_MspInit+0x1a4>)
 8005800:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8005804:	4a20      	ldr	r2, [pc, #128]	; (8005888 <HAL_FDCAN_MspInit+0x1a4>)
 8005806:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800580a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800580e:	4b1e      	ldr	r3, [pc, #120]	; (8005888 <HAL_FDCAN_MspInit+0x1a4>)
 8005810:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8005814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005818:	60fb      	str	r3, [r7, #12]
 800581a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800581c:	4b1a      	ldr	r3, [pc, #104]	; (8005888 <HAL_FDCAN_MspInit+0x1a4>)
 800581e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005822:	4a19      	ldr	r2, [pc, #100]	; (8005888 <HAL_FDCAN_MspInit+0x1a4>)
 8005824:	f043 0302 	orr.w	r3, r3, #2
 8005828:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800582c:	4b16      	ldr	r3, [pc, #88]	; (8005888 <HAL_FDCAN_MspInit+0x1a4>)
 800582e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005832:	f003 0302 	and.w	r3, r3, #2
 8005836:	60bb      	str	r3, [r7, #8]
 8005838:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800583a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800583e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005842:	2302      	movs	r3, #2
 8005844:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005848:	2300      	movs	r3, #0
 800584a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800584e:	2300      	movs	r3, #0
 8005850:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8005854:	2309      	movs	r3, #9
 8005856:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800585a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800585e:	4619      	mov	r1, r3
 8005860:	480c      	ldr	r0, [pc, #48]	; (8005894 <HAL_FDCAN_MspInit+0x1b0>)
 8005862:	f005 fe5d 	bl	800b520 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
 8005866:	2200      	movs	r2, #0
 8005868:	2100      	movs	r1, #0
 800586a:	2014      	movs	r0, #20
 800586c:	f001 fde9 	bl	8007442 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8005870:	2014      	movs	r0, #20
 8005872:	f001 fe00 	bl	8007476 <HAL_NVIC_EnableIRQ>
}
 8005876:	bf00      	nop
 8005878:	37e8      	adds	r7, #232	; 0xe8
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	4000a000 	.word	0x4000a000
 8005884:	24000988 	.word	0x24000988
 8005888:	58024400 	.word	0x58024400
 800588c:	58020c00 	.word	0x58020c00
 8005890:	4000a400 	.word	0x4000a400
 8005894:	58020400 	.word	0x58020400

08005898 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b0b8      	sub	sp, #224	; 0xe0
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058a0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80058a4:	2200      	movs	r2, #0
 80058a6:	601a      	str	r2, [r3, #0]
 80058a8:	605a      	str	r2, [r3, #4]
 80058aa:	609a      	str	r2, [r3, #8]
 80058ac:	60da      	str	r2, [r3, #12]
 80058ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80058b0:	f107 0310 	add.w	r3, r7, #16
 80058b4:	22bc      	movs	r2, #188	; 0xbc
 80058b6:	2100      	movs	r1, #0
 80058b8:	4618      	mov	r0, r3
 80058ba:	f00c f9db 	bl	8011c74 <memset>
  if(hspi->Instance==SPI1)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a2d      	ldr	r2, [pc, #180]	; (8005978 <HAL_SPI_MspInit+0xe0>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d152      	bne.n	800596e <HAL_SPI_MspInit+0xd6>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80058c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058cc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 32;
 80058ce:	2320      	movs	r3, #32
 80058d0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 240;
 80058d2:	23f0      	movs	r3, #240	; 0xf0
 80058d4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 80058d6:	2304      	movs	r3, #4
 80058d8:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80058da:	2302      	movs	r3, #2
 80058dc:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80058de:	2302      	movs	r3, #2
 80058e0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 80058e2:	2300      	movs	r3, #0
 80058e4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80058e6:	2300      	movs	r3, #0
 80058e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80058ea:	2300      	movs	r3, #0
 80058ec:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 80058ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058f2:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80058f4:	f107 0310 	add.w	r3, r7, #16
 80058f8:	4618      	mov	r0, r3
 80058fa:	f006 ffcf 	bl	800c89c <HAL_RCCEx_PeriphCLKConfig>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	d001      	beq.n	8005908 <HAL_SPI_MspInit+0x70>
    {
      Error_Handler();
 8005904:	f7ff fece 	bl	80056a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005908:	4b1c      	ldr	r3, [pc, #112]	; (800597c <HAL_SPI_MspInit+0xe4>)
 800590a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800590e:	4a1b      	ldr	r2, [pc, #108]	; (800597c <HAL_SPI_MspInit+0xe4>)
 8005910:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005914:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005918:	4b18      	ldr	r3, [pc, #96]	; (800597c <HAL_SPI_MspInit+0xe4>)
 800591a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800591e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005922:	60fb      	str	r3, [r7, #12]
 8005924:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005926:	4b15      	ldr	r3, [pc, #84]	; (800597c <HAL_SPI_MspInit+0xe4>)
 8005928:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800592c:	4a13      	ldr	r2, [pc, #76]	; (800597c <HAL_SPI_MspInit+0xe4>)
 800592e:	f043 0301 	orr.w	r3, r3, #1
 8005932:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005936:	4b11      	ldr	r3, [pc, #68]	; (800597c <HAL_SPI_MspInit+0xe4>)
 8005938:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800593c:	f003 0301 	and.w	r3, r3, #1
 8005940:	60bb      	str	r3, [r7, #8]
 8005942:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005944:	23e0      	movs	r3, #224	; 0xe0
 8005946:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800594a:	2302      	movs	r3, #2
 800594c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005950:	2300      	movs	r3, #0
 8005952:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005956:	2300      	movs	r3, #0
 8005958:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800595c:	2305      	movs	r3, #5
 800595e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005962:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005966:	4619      	mov	r1, r3
 8005968:	4805      	ldr	r0, [pc, #20]	; (8005980 <HAL_SPI_MspInit+0xe8>)
 800596a:	f005 fdd9 	bl	800b520 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800596e:	bf00      	nop
 8005970:	37e0      	adds	r7, #224	; 0xe0
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	40013000 	.word	0x40013000
 800597c:	58024400 	.word	0x58024400
 8005980:	58020000 	.word	0x58020000

08005984 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b092      	sub	sp, #72	; 0x48
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800598c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005990:	2200      	movs	r2, #0
 8005992:	601a      	str	r2, [r3, #0]
 8005994:	605a      	str	r2, [r3, #4]
 8005996:	609a      	str	r2, [r3, #8]
 8005998:	60da      	str	r2, [r3, #12]
 800599a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a87      	ldr	r2, [pc, #540]	; (8005bc0 <HAL_TIM_Encoder_MspInit+0x23c>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d12f      	bne.n	8005a06 <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80059a6:	4b87      	ldr	r3, [pc, #540]	; (8005bc4 <HAL_TIM_Encoder_MspInit+0x240>)
 80059a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80059ac:	4a85      	ldr	r2, [pc, #532]	; (8005bc4 <HAL_TIM_Encoder_MspInit+0x240>)
 80059ae:	f043 0301 	orr.w	r3, r3, #1
 80059b2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80059b6:	4b83      	ldr	r3, [pc, #524]	; (8005bc4 <HAL_TIM_Encoder_MspInit+0x240>)
 80059b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80059bc:	f003 0301 	and.w	r3, r3, #1
 80059c0:	633b      	str	r3, [r7, #48]	; 0x30
 80059c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80059c4:	4b7f      	ldr	r3, [pc, #508]	; (8005bc4 <HAL_TIM_Encoder_MspInit+0x240>)
 80059c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059ca:	4a7e      	ldr	r2, [pc, #504]	; (8005bc4 <HAL_TIM_Encoder_MspInit+0x240>)
 80059cc:	f043 0310 	orr.w	r3, r3, #16
 80059d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80059d4:	4b7b      	ldr	r3, [pc, #492]	; (8005bc4 <HAL_TIM_Encoder_MspInit+0x240>)
 80059d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059da:	f003 0310 	and.w	r3, r3, #16
 80059de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80059e2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80059e6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059e8:	2302      	movs	r3, #2
 80059ea:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059ec:	2300      	movs	r3, #0
 80059ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059f0:	2300      	movs	r3, #0
 80059f2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80059f4:	2301      	movs	r3, #1
 80059f6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80059f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80059fc:	4619      	mov	r1, r3
 80059fe:	4872      	ldr	r0, [pc, #456]	; (8005bc8 <HAL_TIM_Encoder_MspInit+0x244>)
 8005a00:	f005 fd8e 	bl	800b520 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8005a04:	e0d7      	b.n	8005bb6 <HAL_TIM_Encoder_MspInit+0x232>
  else if(htim_encoder->Instance==TIM2)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a0e:	d12e      	bne.n	8005a6e <HAL_TIM_Encoder_MspInit+0xea>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005a10:	4b6c      	ldr	r3, [pc, #432]	; (8005bc4 <HAL_TIM_Encoder_MspInit+0x240>)
 8005a12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005a16:	4a6b      	ldr	r2, [pc, #428]	; (8005bc4 <HAL_TIM_Encoder_MspInit+0x240>)
 8005a18:	f043 0301 	orr.w	r3, r3, #1
 8005a1c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005a20:	4b68      	ldr	r3, [pc, #416]	; (8005bc4 <HAL_TIM_Encoder_MspInit+0x240>)
 8005a22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005a26:	f003 0301 	and.w	r3, r3, #1
 8005a2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a2e:	4b65      	ldr	r3, [pc, #404]	; (8005bc4 <HAL_TIM_Encoder_MspInit+0x240>)
 8005a30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a34:	4a63      	ldr	r2, [pc, #396]	; (8005bc4 <HAL_TIM_Encoder_MspInit+0x240>)
 8005a36:	f043 0301 	orr.w	r3, r3, #1
 8005a3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005a3e:	4b61      	ldr	r3, [pc, #388]	; (8005bc4 <HAL_TIM_Encoder_MspInit+0x240>)
 8005a40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a44:	f003 0301 	and.w	r3, r3, #1
 8005a48:	627b      	str	r3, [r7, #36]	; 0x24
 8005a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a50:	2302      	movs	r3, #2
 8005a52:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a54:	2300      	movs	r3, #0
 8005a56:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a60:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005a64:	4619      	mov	r1, r3
 8005a66:	4859      	ldr	r0, [pc, #356]	; (8005bcc <HAL_TIM_Encoder_MspInit+0x248>)
 8005a68:	f005 fd5a 	bl	800b520 <HAL_GPIO_Init>
}
 8005a6c:	e0a3      	b.n	8005bb6 <HAL_TIM_Encoder_MspInit+0x232>
  else if(htim_encoder->Instance==TIM3)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a57      	ldr	r2, [pc, #348]	; (8005bd0 <HAL_TIM_Encoder_MspInit+0x24c>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d12e      	bne.n	8005ad6 <HAL_TIM_Encoder_MspInit+0x152>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005a78:	4b52      	ldr	r3, [pc, #328]	; (8005bc4 <HAL_TIM_Encoder_MspInit+0x240>)
 8005a7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005a7e:	4a51      	ldr	r2, [pc, #324]	; (8005bc4 <HAL_TIM_Encoder_MspInit+0x240>)
 8005a80:	f043 0302 	orr.w	r3, r3, #2
 8005a84:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005a88:	4b4e      	ldr	r3, [pc, #312]	; (8005bc4 <HAL_TIM_Encoder_MspInit+0x240>)
 8005a8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005a8e:	f003 0302 	and.w	r3, r3, #2
 8005a92:	623b      	str	r3, [r7, #32]
 8005a94:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a96:	4b4b      	ldr	r3, [pc, #300]	; (8005bc4 <HAL_TIM_Encoder_MspInit+0x240>)
 8005a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a9c:	4a49      	ldr	r2, [pc, #292]	; (8005bc4 <HAL_TIM_Encoder_MspInit+0x240>)
 8005a9e:	f043 0302 	orr.w	r3, r3, #2
 8005aa2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005aa6:	4b47      	ldr	r3, [pc, #284]	; (8005bc4 <HAL_TIM_Encoder_MspInit+0x240>)
 8005aa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005aac:	f003 0302 	and.w	r3, r3, #2
 8005ab0:	61fb      	str	r3, [r7, #28]
 8005ab2:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005ab4:	2330      	movs	r3, #48	; 0x30
 8005ab6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ab8:	2302      	movs	r3, #2
 8005aba:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005abc:	2300      	movs	r3, #0
 8005abe:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005ac4:	2302      	movs	r3, #2
 8005ac6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ac8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005acc:	4619      	mov	r1, r3
 8005ace:	4841      	ldr	r0, [pc, #260]	; (8005bd4 <HAL_TIM_Encoder_MspInit+0x250>)
 8005ad0:	f005 fd26 	bl	800b520 <HAL_GPIO_Init>
}
 8005ad4:	e06f      	b.n	8005bb6 <HAL_TIM_Encoder_MspInit+0x232>
  else if(htim_encoder->Instance==TIM4)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a3f      	ldr	r2, [pc, #252]	; (8005bd8 <HAL_TIM_Encoder_MspInit+0x254>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d12f      	bne.n	8005b40 <HAL_TIM_Encoder_MspInit+0x1bc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005ae0:	4b38      	ldr	r3, [pc, #224]	; (8005bc4 <HAL_TIM_Encoder_MspInit+0x240>)
 8005ae2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005ae6:	4a37      	ldr	r2, [pc, #220]	; (8005bc4 <HAL_TIM_Encoder_MspInit+0x240>)
 8005ae8:	f043 0304 	orr.w	r3, r3, #4
 8005aec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005af0:	4b34      	ldr	r3, [pc, #208]	; (8005bc4 <HAL_TIM_Encoder_MspInit+0x240>)
 8005af2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005af6:	f003 0304 	and.w	r3, r3, #4
 8005afa:	61bb      	str	r3, [r7, #24]
 8005afc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005afe:	4b31      	ldr	r3, [pc, #196]	; (8005bc4 <HAL_TIM_Encoder_MspInit+0x240>)
 8005b00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005b04:	4a2f      	ldr	r2, [pc, #188]	; (8005bc4 <HAL_TIM_Encoder_MspInit+0x240>)
 8005b06:	f043 0308 	orr.w	r3, r3, #8
 8005b0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005b0e:	4b2d      	ldr	r3, [pc, #180]	; (8005bc4 <HAL_TIM_Encoder_MspInit+0x240>)
 8005b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005b14:	f003 0308 	and.w	r3, r3, #8
 8005b18:	617b      	str	r3, [r7, #20]
 8005b1a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8005b1c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005b20:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b22:	2302      	movs	r3, #2
 8005b24:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b26:	2300      	movs	r3, #0
 8005b28:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005b2e:	2302      	movs	r3, #2
 8005b30:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005b32:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005b36:	4619      	mov	r1, r3
 8005b38:	4828      	ldr	r0, [pc, #160]	; (8005bdc <HAL_TIM_Encoder_MspInit+0x258>)
 8005b3a:	f005 fcf1 	bl	800b520 <HAL_GPIO_Init>
}
 8005b3e:	e03a      	b.n	8005bb6 <HAL_TIM_Encoder_MspInit+0x232>
  else if(htim_encoder->Instance==TIM8)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a26      	ldr	r2, [pc, #152]	; (8005be0 <HAL_TIM_Encoder_MspInit+0x25c>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d135      	bne.n	8005bb6 <HAL_TIM_Encoder_MspInit+0x232>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005b4a:	4b1e      	ldr	r3, [pc, #120]	; (8005bc4 <HAL_TIM_Encoder_MspInit+0x240>)
 8005b4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005b50:	4a1c      	ldr	r2, [pc, #112]	; (8005bc4 <HAL_TIM_Encoder_MspInit+0x240>)
 8005b52:	f043 0302 	orr.w	r3, r3, #2
 8005b56:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005b5a:	4b1a      	ldr	r3, [pc, #104]	; (8005bc4 <HAL_TIM_Encoder_MspInit+0x240>)
 8005b5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005b60:	f003 0302 	and.w	r3, r3, #2
 8005b64:	613b      	str	r3, [r7, #16]
 8005b66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b68:	4b16      	ldr	r3, [pc, #88]	; (8005bc4 <HAL_TIM_Encoder_MspInit+0x240>)
 8005b6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005b6e:	4a15      	ldr	r2, [pc, #84]	; (8005bc4 <HAL_TIM_Encoder_MspInit+0x240>)
 8005b70:	f043 0304 	orr.w	r3, r3, #4
 8005b74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005b78:	4b12      	ldr	r3, [pc, #72]	; (8005bc4 <HAL_TIM_Encoder_MspInit+0x240>)
 8005b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005b7e:	f003 0304 	and.w	r3, r3, #4
 8005b82:	60fb      	str	r3, [r7, #12]
 8005b84:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005b86:	23c0      	movs	r3, #192	; 0xc0
 8005b88:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b8a:	2302      	movs	r3, #2
 8005b8c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b92:	2300      	movs	r3, #0
 8005b94:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8005b96:	2303      	movs	r3, #3
 8005b98:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b9a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	4810      	ldr	r0, [pc, #64]	; (8005be4 <HAL_TIM_Encoder_MspInit+0x260>)
 8005ba2:	f005 fcbd 	bl	800b520 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	2101      	movs	r1, #1
 8005baa:	202c      	movs	r0, #44	; 0x2c
 8005bac:	f001 fc49 	bl	8007442 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8005bb0:	202c      	movs	r0, #44	; 0x2c
 8005bb2:	f001 fc60 	bl	8007476 <HAL_NVIC_EnableIRQ>
}
 8005bb6:	bf00      	nop
 8005bb8:	3748      	adds	r7, #72	; 0x48
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	40010000 	.word	0x40010000
 8005bc4:	58024400 	.word	0x58024400
 8005bc8:	58021000 	.word	0x58021000
 8005bcc:	58020000 	.word	0x58020000
 8005bd0:	40000400 	.word	0x40000400
 8005bd4:	58020400 	.word	0x58020400
 8005bd8:	40000800 	.word	0x40000800
 8005bdc:	58020c00 	.word	0x58020c00
 8005be0:	40010400 	.word	0x40010400
 8005be4:	58020800 	.word	0x58020800

08005be8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b086      	sub	sp, #24
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a3a      	ldr	r2, [pc, #232]	; (8005ce0 <HAL_TIM_Base_MspInit+0xf8>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d117      	bne.n	8005c2a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005bfa:	4b3a      	ldr	r3, [pc, #232]	; (8005ce4 <HAL_TIM_Base_MspInit+0xfc>)
 8005bfc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005c00:	4a38      	ldr	r2, [pc, #224]	; (8005ce4 <HAL_TIM_Base_MspInit+0xfc>)
 8005c02:	f043 0308 	orr.w	r3, r3, #8
 8005c06:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005c0a:	4b36      	ldr	r3, [pc, #216]	; (8005ce4 <HAL_TIM_Base_MspInit+0xfc>)
 8005c0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005c10:	f003 0308 	and.w	r3, r3, #8
 8005c14:	617b      	str	r3, [r7, #20]
 8005c16:	697b      	ldr	r3, [r7, #20]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 8005c18:	2200      	movs	r2, #0
 8005c1a:	2101      	movs	r1, #1
 8005c1c:	2032      	movs	r0, #50	; 0x32
 8005c1e:	f001 fc10 	bl	8007442 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8005c22:	2032      	movs	r0, #50	; 0x32
 8005c24:	f001 fc27 	bl	8007476 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8005c28:	e055      	b.n	8005cd6 <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM6)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a2e      	ldr	r2, [pc, #184]	; (8005ce8 <HAL_TIM_Base_MspInit+0x100>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d117      	bne.n	8005c64 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005c34:	4b2b      	ldr	r3, [pc, #172]	; (8005ce4 <HAL_TIM_Base_MspInit+0xfc>)
 8005c36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005c3a:	4a2a      	ldr	r2, [pc, #168]	; (8005ce4 <HAL_TIM_Base_MspInit+0xfc>)
 8005c3c:	f043 0310 	orr.w	r3, r3, #16
 8005c40:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005c44:	4b27      	ldr	r3, [pc, #156]	; (8005ce4 <HAL_TIM_Base_MspInit+0xfc>)
 8005c46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005c4a:	f003 0310 	and.w	r3, r3, #16
 8005c4e:	613b      	str	r3, [r7, #16]
 8005c50:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8005c52:	2200      	movs	r2, #0
 8005c54:	2100      	movs	r1, #0
 8005c56:	2036      	movs	r0, #54	; 0x36
 8005c58:	f001 fbf3 	bl	8007442 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005c5c:	2036      	movs	r0, #54	; 0x36
 8005c5e:	f001 fc0a 	bl	8007476 <HAL_NVIC_EnableIRQ>
}
 8005c62:	e038      	b.n	8005cd6 <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM7)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a20      	ldr	r2, [pc, #128]	; (8005cec <HAL_TIM_Base_MspInit+0x104>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d117      	bne.n	8005c9e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005c6e:	4b1d      	ldr	r3, [pc, #116]	; (8005ce4 <HAL_TIM_Base_MspInit+0xfc>)
 8005c70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005c74:	4a1b      	ldr	r2, [pc, #108]	; (8005ce4 <HAL_TIM_Base_MspInit+0xfc>)
 8005c76:	f043 0320 	orr.w	r3, r3, #32
 8005c7a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005c7e:	4b19      	ldr	r3, [pc, #100]	; (8005ce4 <HAL_TIM_Base_MspInit+0xfc>)
 8005c80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005c84:	f003 0320 	and.w	r3, r3, #32
 8005c88:	60fb      	str	r3, [r7, #12]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	2100      	movs	r1, #0
 8005c90:	2037      	movs	r0, #55	; 0x37
 8005c92:	f001 fbd6 	bl	8007442 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005c96:	2037      	movs	r0, #55	; 0x37
 8005c98:	f001 fbed 	bl	8007476 <HAL_NVIC_EnableIRQ>
}
 8005c9c:	e01b      	b.n	8005cd6 <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM13)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a13      	ldr	r2, [pc, #76]	; (8005cf0 <HAL_TIM_Base_MspInit+0x108>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d116      	bne.n	8005cd6 <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8005ca8:	4b0e      	ldr	r3, [pc, #56]	; (8005ce4 <HAL_TIM_Base_MspInit+0xfc>)
 8005caa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005cae:	4a0d      	ldr	r2, [pc, #52]	; (8005ce4 <HAL_TIM_Base_MspInit+0xfc>)
 8005cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cb4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005cb8:	4b0a      	ldr	r3, [pc, #40]	; (8005ce4 <HAL_TIM_Base_MspInit+0xfc>)
 8005cba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cc2:	60bb      	str	r3, [r7, #8]
 8005cc4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	2101      	movs	r1, #1
 8005cca:	202c      	movs	r0, #44	; 0x2c
 8005ccc:	f001 fbb9 	bl	8007442 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8005cd0:	202c      	movs	r0, #44	; 0x2c
 8005cd2:	f001 fbd0 	bl	8007476 <HAL_NVIC_EnableIRQ>
}
 8005cd6:	bf00      	nop
 8005cd8:	3718      	adds	r7, #24
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	40000c00 	.word	0x40000c00
 8005ce4:	58024400 	.word	0x58024400
 8005ce8:	40001000 	.word	0x40001000
 8005cec:	40001400 	.word	0x40001400
 8005cf0:	40001c00 	.word	0x40001c00

08005cf4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b0bc      	sub	sp, #240	; 0xf0
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005cfc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005d00:	2200      	movs	r2, #0
 8005d02:	601a      	str	r2, [r3, #0]
 8005d04:	605a      	str	r2, [r3, #4]
 8005d06:	609a      	str	r2, [r3, #8]
 8005d08:	60da      	str	r2, [r3, #12]
 8005d0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005d0c:	f107 0320 	add.w	r3, r7, #32
 8005d10:	22bc      	movs	r2, #188	; 0xbc
 8005d12:	2100      	movs	r1, #0
 8005d14:	4618      	mov	r0, r3
 8005d16:	f00b ffad 	bl	8011c74 <memset>
  if(huart->Instance==USART1)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a76      	ldr	r2, [pc, #472]	; (8005ef8 <HAL_UART_MspInit+0x204>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d171      	bne.n	8005e08 <HAL_UART_MspInit+0x114>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005d24:	2301      	movs	r3, #1
 8005d26:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005d2e:	f107 0320 	add.w	r3, r7, #32
 8005d32:	4618      	mov	r0, r3
 8005d34:	f006 fdb2 	bl	800c89c <HAL_RCCEx_PeriphCLKConfig>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d001      	beq.n	8005d42 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8005d3e:	f7ff fcb1 	bl	80056a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005d42:	4b6e      	ldr	r3, [pc, #440]	; (8005efc <HAL_UART_MspInit+0x208>)
 8005d44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d48:	4a6c      	ldr	r2, [pc, #432]	; (8005efc <HAL_UART_MspInit+0x208>)
 8005d4a:	f043 0310 	orr.w	r3, r3, #16
 8005d4e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005d52:	4b6a      	ldr	r3, [pc, #424]	; (8005efc <HAL_UART_MspInit+0x208>)
 8005d54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d58:	f003 0310 	and.w	r3, r3, #16
 8005d5c:	61fb      	str	r3, [r7, #28]
 8005d5e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d60:	4b66      	ldr	r3, [pc, #408]	; (8005efc <HAL_UART_MspInit+0x208>)
 8005d62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005d66:	4a65      	ldr	r2, [pc, #404]	; (8005efc <HAL_UART_MspInit+0x208>)
 8005d68:	f043 0301 	orr.w	r3, r3, #1
 8005d6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005d70:	4b62      	ldr	r3, [pc, #392]	; (8005efc <HAL_UART_MspInit+0x208>)
 8005d72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005d76:	f003 0301 	and.w	r3, r3, #1
 8005d7a:	61bb      	str	r3, [r7, #24]
 8005d7c:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA12     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 8005d7e:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
 8005d82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d86:	2302      	movs	r3, #2
 8005d88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d92:	2300      	movs	r3, #0
 8005d94:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005d98:	2307      	movs	r3, #7
 8005d9a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d9e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005da2:	4619      	mov	r1, r3
 8005da4:	4856      	ldr	r0, [pc, #344]	; (8005f00 <HAL_UART_MspInit+0x20c>)
 8005da6:	f005 fbbb 	bl	800b520 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8005daa:	4b56      	ldr	r3, [pc, #344]	; (8005f04 <HAL_UART_MspInit+0x210>)
 8005dac:	4a56      	ldr	r2, [pc, #344]	; (8005f08 <HAL_UART_MspInit+0x214>)
 8005dae:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8005db0:	4b54      	ldr	r3, [pc, #336]	; (8005f04 <HAL_UART_MspInit+0x210>)
 8005db2:	2229      	movs	r2, #41	; 0x29
 8005db4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005db6:	4b53      	ldr	r3, [pc, #332]	; (8005f04 <HAL_UART_MspInit+0x210>)
 8005db8:	2200      	movs	r2, #0
 8005dba:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005dbc:	4b51      	ldr	r3, [pc, #324]	; (8005f04 <HAL_UART_MspInit+0x210>)
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005dc2:	4b50      	ldr	r3, [pc, #320]	; (8005f04 <HAL_UART_MspInit+0x210>)
 8005dc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005dc8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005dca:	4b4e      	ldr	r3, [pc, #312]	; (8005f04 <HAL_UART_MspInit+0x210>)
 8005dcc:	2200      	movs	r2, #0
 8005dce:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005dd0:	4b4c      	ldr	r3, [pc, #304]	; (8005f04 <HAL_UART_MspInit+0x210>)
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8005dd6:	4b4b      	ldr	r3, [pc, #300]	; (8005f04 <HAL_UART_MspInit+0x210>)
 8005dd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ddc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005dde:	4b49      	ldr	r3, [pc, #292]	; (8005f04 <HAL_UART_MspInit+0x210>)
 8005de0:	2200      	movs	r2, #0
 8005de2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005de4:	4b47      	ldr	r3, [pc, #284]	; (8005f04 <HAL_UART_MspInit+0x210>)
 8005de6:	2200      	movs	r2, #0
 8005de8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8005dea:	4846      	ldr	r0, [pc, #280]	; (8005f04 <HAL_UART_MspInit+0x210>)
 8005dec:	f001 fb5e 	bl	80074ac <HAL_DMA_Init>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d001      	beq.n	8005dfa <HAL_UART_MspInit+0x106>
    {
      Error_Handler();
 8005df6:	f7ff fc55 	bl	80056a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a41      	ldr	r2, [pc, #260]	; (8005f04 <HAL_UART_MspInit+0x210>)
 8005dfe:	67da      	str	r2, [r3, #124]	; 0x7c
 8005e00:	4a40      	ldr	r2, [pc, #256]	; (8005f04 <HAL_UART_MspInit+0x210>)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005e06:	e105      	b.n	8006014 <HAL_UART_MspInit+0x320>
  else if(huart->Instance==USART2)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a3f      	ldr	r2, [pc, #252]	; (8005f0c <HAL_UART_MspInit+0x218>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	f040 8082 	bne.w	8005f18 <HAL_UART_MspInit+0x224>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005e14:	2302      	movs	r3, #2
 8005e16:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005e1e:	f107 0320 	add.w	r3, r7, #32
 8005e22:	4618      	mov	r0, r3
 8005e24:	f006 fd3a 	bl	800c89c <HAL_RCCEx_PeriphCLKConfig>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d001      	beq.n	8005e32 <HAL_UART_MspInit+0x13e>
      Error_Handler();
 8005e2e:	f7ff fc39 	bl	80056a4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005e32:	4b32      	ldr	r3, [pc, #200]	; (8005efc <HAL_UART_MspInit+0x208>)
 8005e34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005e38:	4a30      	ldr	r2, [pc, #192]	; (8005efc <HAL_UART_MspInit+0x208>)
 8005e3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e3e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005e42:	4b2e      	ldr	r3, [pc, #184]	; (8005efc <HAL_UART_MspInit+0x208>)
 8005e44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005e48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e4c:	617b      	str	r3, [r7, #20]
 8005e4e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e50:	4b2a      	ldr	r3, [pc, #168]	; (8005efc <HAL_UART_MspInit+0x208>)
 8005e52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005e56:	4a29      	ldr	r2, [pc, #164]	; (8005efc <HAL_UART_MspInit+0x208>)
 8005e58:	f043 0301 	orr.w	r3, r3, #1
 8005e5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005e60:	4b26      	ldr	r3, [pc, #152]	; (8005efc <HAL_UART_MspInit+0x208>)
 8005e62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005e66:	f003 0301 	and.w	r3, r3, #1
 8005e6a:	613b      	str	r3, [r7, #16]
 8005e6c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005e6e:	230c      	movs	r3, #12
 8005e70:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e74:	2302      	movs	r3, #2
 8005e76:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e80:	2300      	movs	r3, #0
 8005e82:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005e86:	2307      	movs	r3, #7
 8005e88:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e8c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005e90:	4619      	mov	r1, r3
 8005e92:	481b      	ldr	r0, [pc, #108]	; (8005f00 <HAL_UART_MspInit+0x20c>)
 8005e94:	f005 fb44 	bl	800b520 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream1;
 8005e98:	4b1d      	ldr	r3, [pc, #116]	; (8005f10 <HAL_UART_MspInit+0x21c>)
 8005e9a:	4a1e      	ldr	r2, [pc, #120]	; (8005f14 <HAL_UART_MspInit+0x220>)
 8005e9c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8005e9e:	4b1c      	ldr	r3, [pc, #112]	; (8005f10 <HAL_UART_MspInit+0x21c>)
 8005ea0:	222b      	movs	r2, #43	; 0x2b
 8005ea2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005ea4:	4b1a      	ldr	r3, [pc, #104]	; (8005f10 <HAL_UART_MspInit+0x21c>)
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005eaa:	4b19      	ldr	r3, [pc, #100]	; (8005f10 <HAL_UART_MspInit+0x21c>)
 8005eac:	2200      	movs	r2, #0
 8005eae:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005eb0:	4b17      	ldr	r3, [pc, #92]	; (8005f10 <HAL_UART_MspInit+0x21c>)
 8005eb2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005eb6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005eb8:	4b15      	ldr	r3, [pc, #84]	; (8005f10 <HAL_UART_MspInit+0x21c>)
 8005eba:	2200      	movs	r2, #0
 8005ebc:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005ebe:	4b14      	ldr	r3, [pc, #80]	; (8005f10 <HAL_UART_MspInit+0x21c>)
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8005ec4:	4b12      	ldr	r3, [pc, #72]	; (8005f10 <HAL_UART_MspInit+0x21c>)
 8005ec6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005eca:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005ecc:	4b10      	ldr	r3, [pc, #64]	; (8005f10 <HAL_UART_MspInit+0x21c>)
 8005ece:	2200      	movs	r2, #0
 8005ed0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005ed2:	4b0f      	ldr	r3, [pc, #60]	; (8005f10 <HAL_UART_MspInit+0x21c>)
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005ed8:	480d      	ldr	r0, [pc, #52]	; (8005f10 <HAL_UART_MspInit+0x21c>)
 8005eda:	f001 fae7 	bl	80074ac <HAL_DMA_Init>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d001      	beq.n	8005ee8 <HAL_UART_MspInit+0x1f4>
      Error_Handler();
 8005ee4:	f7ff fbde 	bl	80056a4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4a09      	ldr	r2, [pc, #36]	; (8005f10 <HAL_UART_MspInit+0x21c>)
 8005eec:	67da      	str	r2, [r3, #124]	; 0x7c
 8005eee:	4a08      	ldr	r2, [pc, #32]	; (8005f10 <HAL_UART_MspInit+0x21c>)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6393      	str	r3, [r2, #56]	; 0x38
}
 8005ef4:	e08e      	b.n	8006014 <HAL_UART_MspInit+0x320>
 8005ef6:	bf00      	nop
 8005ef8:	40011000 	.word	0x40011000
 8005efc:	58024400 	.word	0x58024400
 8005f00:	58020000 	.word	0x58020000
 8005f04:	24000820 	.word	0x24000820
 8005f08:	40020010 	.word	0x40020010
 8005f0c:	40004400 	.word	0x40004400
 8005f10:	24000898 	.word	0x24000898
 8005f14:	40020028 	.word	0x40020028
  else if(huart->Instance==USART3)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a3f      	ldr	r2, [pc, #252]	; (800601c <HAL_UART_MspInit+0x328>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d178      	bne.n	8006014 <HAL_UART_MspInit+0x320>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8005f22:	2302      	movs	r3, #2
 8005f24:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8005f26:	2300      	movs	r3, #0
 8005f28:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005f2c:	f107 0320 	add.w	r3, r7, #32
 8005f30:	4618      	mov	r0, r3
 8005f32:	f006 fcb3 	bl	800c89c <HAL_RCCEx_PeriphCLKConfig>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d001      	beq.n	8005f40 <HAL_UART_MspInit+0x24c>
      Error_Handler();
 8005f3c:	f7ff fbb2 	bl	80056a4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005f40:	4b37      	ldr	r3, [pc, #220]	; (8006020 <HAL_UART_MspInit+0x32c>)
 8005f42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005f46:	4a36      	ldr	r2, [pc, #216]	; (8006020 <HAL_UART_MspInit+0x32c>)
 8005f48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f4c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005f50:	4b33      	ldr	r3, [pc, #204]	; (8006020 <HAL_UART_MspInit+0x32c>)
 8005f52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005f56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f5a:	60fb      	str	r3, [r7, #12]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f5e:	4b30      	ldr	r3, [pc, #192]	; (8006020 <HAL_UART_MspInit+0x32c>)
 8005f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f64:	4a2e      	ldr	r2, [pc, #184]	; (8006020 <HAL_UART_MspInit+0x32c>)
 8005f66:	f043 0302 	orr.w	r3, r3, #2
 8005f6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005f6e:	4b2c      	ldr	r3, [pc, #176]	; (8006020 <HAL_UART_MspInit+0x32c>)
 8005f70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f74:	f003 0302 	and.w	r3, r3, #2
 8005f78:	60bb      	str	r3, [r7, #8]
 8005f7a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14;
 8005f7c:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 8005f80:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f84:	2302      	movs	r3, #2
 8005f86:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f90:	2300      	movs	r3, #0
 8005f92:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005f96:	2307      	movs	r3, #7
 8005f98:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f9c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	4820      	ldr	r0, [pc, #128]	; (8006024 <HAL_UART_MspInit+0x330>)
 8005fa4:	f005 fabc 	bl	800b520 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream2;
 8005fa8:	4b1f      	ldr	r3, [pc, #124]	; (8006028 <HAL_UART_MspInit+0x334>)
 8005faa:	4a20      	ldr	r2, [pc, #128]	; (800602c <HAL_UART_MspInit+0x338>)
 8005fac:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8005fae:	4b1e      	ldr	r3, [pc, #120]	; (8006028 <HAL_UART_MspInit+0x334>)
 8005fb0:	222d      	movs	r2, #45	; 0x2d
 8005fb2:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005fb4:	4b1c      	ldr	r3, [pc, #112]	; (8006028 <HAL_UART_MspInit+0x334>)
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005fba:	4b1b      	ldr	r3, [pc, #108]	; (8006028 <HAL_UART_MspInit+0x334>)
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005fc0:	4b19      	ldr	r3, [pc, #100]	; (8006028 <HAL_UART_MspInit+0x334>)
 8005fc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005fc6:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005fc8:	4b17      	ldr	r3, [pc, #92]	; (8006028 <HAL_UART_MspInit+0x334>)
 8005fca:	2200      	movs	r2, #0
 8005fcc:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005fce:	4b16      	ldr	r3, [pc, #88]	; (8006028 <HAL_UART_MspInit+0x334>)
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8005fd4:	4b14      	ldr	r3, [pc, #80]	; (8006028 <HAL_UART_MspInit+0x334>)
 8005fd6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005fda:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005fdc:	4b12      	ldr	r3, [pc, #72]	; (8006028 <HAL_UART_MspInit+0x334>)
 8005fde:	2200      	movs	r2, #0
 8005fe0:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005fe2:	4b11      	ldr	r3, [pc, #68]	; (8006028 <HAL_UART_MspInit+0x334>)
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8005fe8:	480f      	ldr	r0, [pc, #60]	; (8006028 <HAL_UART_MspInit+0x334>)
 8005fea:	f001 fa5f 	bl	80074ac <HAL_DMA_Init>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d001      	beq.n	8005ff8 <HAL_UART_MspInit+0x304>
      Error_Handler();
 8005ff4:	f7ff fb56 	bl	80056a4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4a0b      	ldr	r2, [pc, #44]	; (8006028 <HAL_UART_MspInit+0x334>)
 8005ffc:	67da      	str	r2, [r3, #124]	; 0x7c
 8005ffe:	4a0a      	ldr	r2, [pc, #40]	; (8006028 <HAL_UART_MspInit+0x334>)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8006004:	2200      	movs	r2, #0
 8006006:	2100      	movs	r1, #0
 8006008:	2027      	movs	r0, #39	; 0x27
 800600a:	f001 fa1a 	bl	8007442 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800600e:	2027      	movs	r0, #39	; 0x27
 8006010:	f001 fa31 	bl	8007476 <HAL_NVIC_EnableIRQ>
}
 8006014:	bf00      	nop
 8006016:	37f0      	adds	r7, #240	; 0xf0
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}
 800601c:	40004800 	.word	0x40004800
 8006020:	58024400 	.word	0x58024400
 8006024:	58020400 	.word	0x58020400
 8006028:	24000910 	.word	0x24000910
 800602c:	40020040 	.word	0x40020040

08006030 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006030:	b480      	push	{r7}
 8006032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006034:	e7fe      	b.n	8006034 <NMI_Handler+0x4>

08006036 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006036:	b480      	push	{r7}
 8006038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800603a:	e7fe      	b.n	800603a <HardFault_Handler+0x4>

0800603c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800603c:	b480      	push	{r7}
 800603e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006040:	e7fe      	b.n	8006040 <MemManage_Handler+0x4>

08006042 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006042:	b480      	push	{r7}
 8006044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006046:	e7fe      	b.n	8006046 <BusFault_Handler+0x4>

08006048 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006048:	b480      	push	{r7}
 800604a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800604c:	e7fe      	b.n	800604c <UsageFault_Handler+0x4>

0800604e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800604e:	b480      	push	{r7}
 8006050:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006052:	bf00      	nop
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800605c:	b480      	push	{r7}
 800605e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006060:	bf00      	nop
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr

0800606a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800606a:	b480      	push	{r7}
 800606c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800606e:	bf00      	nop
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800607c:	f001 f8b6 	bl	80071ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006080:	bf00      	nop
 8006082:	bd80      	pop	{r7, pc}

08006084 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8006088:	4802      	ldr	r0, [pc, #8]	; (8006094 <DMA1_Stream0_IRQHandler+0x10>)
 800608a:	f002 fd39 	bl	8008b00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800608e:	bf00      	nop
 8006090:	bd80      	pop	{r7, pc}
 8006092:	bf00      	nop
 8006094:	24000820 	.word	0x24000820

08006098 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800609c:	4802      	ldr	r0, [pc, #8]	; (80060a8 <DMA1_Stream1_IRQHandler+0x10>)
 800609e:	f002 fd2f 	bl	8008b00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80060a2:	bf00      	nop
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	24000898 	.word	0x24000898

080060ac <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80060b0:	4802      	ldr	r0, [pc, #8]	; (80060bc <DMA1_Stream2_IRQHandler+0x10>)
 80060b2:	f002 fd25 	bl	8008b00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80060b6:	bf00      	nop
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	bf00      	nop
 80060bc:	24000910 	.word	0x24000910

080060c0 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80060c4:	4802      	ldr	r0, [pc, #8]	; (80060d0 <FDCAN1_IT0_IRQHandler+0x10>)
 80060c6:	f004 fd1d 	bl	800ab04 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80060ca:	bf00      	nop
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	240001fc 	.word	0x240001fc

080060d4 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 80060d8:	4802      	ldr	r0, [pc, #8]	; (80060e4 <FDCAN2_IT0_IRQHandler+0x10>)
 80060da:	f004 fd13 	bl	800ab04 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 80060de:	bf00      	nop
 80060e0:	bd80      	pop	{r7, pc}
 80060e2:	bf00      	nop
 80060e4:	2400029c 	.word	0x2400029c

080060e8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80060ec:	4802      	ldr	r0, [pc, #8]	; (80060f8 <USART3_IRQHandler+0x10>)
 80060ee:	f008 ffe7 	bl	800f0c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80060f2:	bf00      	nop
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	24000790 	.word	0x24000790

080060fc <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8006100:	4803      	ldr	r0, [pc, #12]	; (8006110 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8006102:	f008 fa57 	bl	800e5b4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8006106:	4803      	ldr	r0, [pc, #12]	; (8006114 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8006108:	f008 fa54 	bl	800e5b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800610c:	bf00      	nop
 800610e:	bd80      	pop	{r7, pc}
 8006110:	240005d8 	.word	0x240005d8
 8006114:	24000624 	.word	0x24000624

08006118 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800611c:	4802      	ldr	r0, [pc, #8]	; (8006128 <TIM5_IRQHandler+0x10>)
 800611e:	f008 fa49 	bl	800e5b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8006122:	bf00      	nop
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	240004f4 	.word	0x240004f4

0800612c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006130:	4802      	ldr	r0, [pc, #8]	; (800613c <TIM6_DAC_IRQHandler+0x10>)
 8006132:	f008 fa3f 	bl	800e5b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8006136:	bf00      	nop
 8006138:	bd80      	pop	{r7, pc}
 800613a:	bf00      	nop
 800613c:	24000540 	.word	0x24000540

08006140 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8006144:	4802      	ldr	r0, [pc, #8]	; (8006150 <TIM7_IRQHandler+0x10>)
 8006146:	f008 fa35 	bl	800e5b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800614a:	bf00      	nop
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	2400058c 	.word	0x2400058c

08006154 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006154:	b480      	push	{r7}
 8006156:	af00      	add	r7, sp, #0
  return 1;
 8006158:	2301      	movs	r3, #1
}
 800615a:	4618      	mov	r0, r3
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <_kill>:

int _kill(int pid, int sig)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b082      	sub	sp, #8
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800616e:	f00b fd39 	bl	8011be4 <__errno>
 8006172:	4603      	mov	r3, r0
 8006174:	2216      	movs	r2, #22
 8006176:	601a      	str	r2, [r3, #0]
  return -1;
 8006178:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800617c:	4618      	mov	r0, r3
 800617e:	3708      	adds	r7, #8
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <_exit>:

void _exit (int status)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b082      	sub	sp, #8
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800618c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f7ff ffe7 	bl	8006164 <_kill>
  while (1) {}    /* Make sure we hang here */
 8006196:	e7fe      	b.n	8006196 <_exit+0x12>

08006198 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b086      	sub	sp, #24
 800619c:	af00      	add	r7, sp, #0
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80061a4:	2300      	movs	r3, #0
 80061a6:	617b      	str	r3, [r7, #20]
 80061a8:	e00a      	b.n	80061c0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80061aa:	f3af 8000 	nop.w
 80061ae:	4601      	mov	r1, r0
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	1c5a      	adds	r2, r3, #1
 80061b4:	60ba      	str	r2, [r7, #8]
 80061b6:	b2ca      	uxtb	r2, r1
 80061b8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	3301      	adds	r3, #1
 80061be:	617b      	str	r3, [r7, #20]
 80061c0:	697a      	ldr	r2, [r7, #20]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	429a      	cmp	r2, r3
 80061c6:	dbf0      	blt.n	80061aa <_read+0x12>
  }

  return len;
 80061c8:	687b      	ldr	r3, [r7, #4]
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3718      	adds	r7, #24
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}

080061d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80061d2:	b580      	push	{r7, lr}
 80061d4:	b086      	sub	sp, #24
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	60f8      	str	r0, [r7, #12]
 80061da:	60b9      	str	r1, [r7, #8]
 80061dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80061de:	2300      	movs	r3, #0
 80061e0:	617b      	str	r3, [r7, #20]
 80061e2:	e009      	b.n	80061f8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	1c5a      	adds	r2, r3, #1
 80061e8:	60ba      	str	r2, [r7, #8]
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	4618      	mov	r0, r3
 80061ee:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	3301      	adds	r3, #1
 80061f6:	617b      	str	r3, [r7, #20]
 80061f8:	697a      	ldr	r2, [r7, #20]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	429a      	cmp	r2, r3
 80061fe:	dbf1      	blt.n	80061e4 <_write+0x12>
  }
  return len;
 8006200:	687b      	ldr	r3, [r7, #4]
}
 8006202:	4618      	mov	r0, r3
 8006204:	3718      	adds	r7, #24
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}

0800620a <_close>:

int _close(int file)
{
 800620a:	b480      	push	{r7}
 800620c:	b083      	sub	sp, #12
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006212:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006216:	4618      	mov	r0, r3
 8006218:	370c      	adds	r7, #12
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr

08006222 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006222:	b480      	push	{r7}
 8006224:	b083      	sub	sp, #12
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
 800622a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006232:	605a      	str	r2, [r3, #4]
  return 0;
 8006234:	2300      	movs	r3, #0
}
 8006236:	4618      	mov	r0, r3
 8006238:	370c      	adds	r7, #12
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr

08006242 <_isatty>:

int _isatty(int file)
{
 8006242:	b480      	push	{r7}
 8006244:	b083      	sub	sp, #12
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800624a:	2301      	movs	r3, #1
}
 800624c:	4618      	mov	r0, r3
 800624e:	370c      	adds	r7, #12
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006258:	b480      	push	{r7}
 800625a:	b085      	sub	sp, #20
 800625c:	af00      	add	r7, sp, #0
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006264:	2300      	movs	r3, #0
}
 8006266:	4618      	mov	r0, r3
 8006268:	3714      	adds	r7, #20
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
	...

08006274 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b086      	sub	sp, #24
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800627c:	4a14      	ldr	r2, [pc, #80]	; (80062d0 <_sbrk+0x5c>)
 800627e:	4b15      	ldr	r3, [pc, #84]	; (80062d4 <_sbrk+0x60>)
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006288:	4b13      	ldr	r3, [pc, #76]	; (80062d8 <_sbrk+0x64>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d102      	bne.n	8006296 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006290:	4b11      	ldr	r3, [pc, #68]	; (80062d8 <_sbrk+0x64>)
 8006292:	4a12      	ldr	r2, [pc, #72]	; (80062dc <_sbrk+0x68>)
 8006294:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006296:	4b10      	ldr	r3, [pc, #64]	; (80062d8 <_sbrk+0x64>)
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4413      	add	r3, r2
 800629e:	693a      	ldr	r2, [r7, #16]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d207      	bcs.n	80062b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80062a4:	f00b fc9e 	bl	8011be4 <__errno>
 80062a8:	4603      	mov	r3, r0
 80062aa:	220c      	movs	r2, #12
 80062ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80062ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062b2:	e009      	b.n	80062c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80062b4:	4b08      	ldr	r3, [pc, #32]	; (80062d8 <_sbrk+0x64>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80062ba:	4b07      	ldr	r3, [pc, #28]	; (80062d8 <_sbrk+0x64>)
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4413      	add	r3, r2
 80062c2:	4a05      	ldr	r2, [pc, #20]	; (80062d8 <_sbrk+0x64>)
 80062c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80062c6:	68fb      	ldr	r3, [r7, #12]
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3718      	adds	r7, #24
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	24080000 	.word	0x24080000
 80062d4:	00000400 	.word	0x00000400
 80062d8:	2400098c 	.word	0x2400098c
 80062dc:	24000a00 	.word	0x24000a00

080062e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80062e0:	b480      	push	{r7}
 80062e2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80062e4:	4b37      	ldr	r3, [pc, #220]	; (80063c4 <SystemInit+0xe4>)
 80062e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062ea:	4a36      	ldr	r2, [pc, #216]	; (80063c4 <SystemInit+0xe4>)
 80062ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80062f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80062f4:	4b34      	ldr	r3, [pc, #208]	; (80063c8 <SystemInit+0xe8>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f003 030f 	and.w	r3, r3, #15
 80062fc:	2b06      	cmp	r3, #6
 80062fe:	d807      	bhi.n	8006310 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8006300:	4b31      	ldr	r3, [pc, #196]	; (80063c8 <SystemInit+0xe8>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f023 030f 	bic.w	r3, r3, #15
 8006308:	4a2f      	ldr	r2, [pc, #188]	; (80063c8 <SystemInit+0xe8>)
 800630a:	f043 0307 	orr.w	r3, r3, #7
 800630e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8006310:	4b2e      	ldr	r3, [pc, #184]	; (80063cc <SystemInit+0xec>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a2d      	ldr	r2, [pc, #180]	; (80063cc <SystemInit+0xec>)
 8006316:	f043 0301 	orr.w	r3, r3, #1
 800631a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800631c:	4b2b      	ldr	r3, [pc, #172]	; (80063cc <SystemInit+0xec>)
 800631e:	2200      	movs	r2, #0
 8006320:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8006322:	4b2a      	ldr	r3, [pc, #168]	; (80063cc <SystemInit+0xec>)
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	4929      	ldr	r1, [pc, #164]	; (80063cc <SystemInit+0xec>)
 8006328:	4b29      	ldr	r3, [pc, #164]	; (80063d0 <SystemInit+0xf0>)
 800632a:	4013      	ands	r3, r2
 800632c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800632e:	4b26      	ldr	r3, [pc, #152]	; (80063c8 <SystemInit+0xe8>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f003 0308 	and.w	r3, r3, #8
 8006336:	2b00      	cmp	r3, #0
 8006338:	d007      	beq.n	800634a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800633a:	4b23      	ldr	r3, [pc, #140]	; (80063c8 <SystemInit+0xe8>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f023 030f 	bic.w	r3, r3, #15
 8006342:	4a21      	ldr	r2, [pc, #132]	; (80063c8 <SystemInit+0xe8>)
 8006344:	f043 0307 	orr.w	r3, r3, #7
 8006348:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800634a:	4b20      	ldr	r3, [pc, #128]	; (80063cc <SystemInit+0xec>)
 800634c:	2200      	movs	r2, #0
 800634e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8006350:	4b1e      	ldr	r3, [pc, #120]	; (80063cc <SystemInit+0xec>)
 8006352:	2200      	movs	r2, #0
 8006354:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8006356:	4b1d      	ldr	r3, [pc, #116]	; (80063cc <SystemInit+0xec>)
 8006358:	2200      	movs	r2, #0
 800635a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800635c:	4b1b      	ldr	r3, [pc, #108]	; (80063cc <SystemInit+0xec>)
 800635e:	4a1d      	ldr	r2, [pc, #116]	; (80063d4 <SystemInit+0xf4>)
 8006360:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8006362:	4b1a      	ldr	r3, [pc, #104]	; (80063cc <SystemInit+0xec>)
 8006364:	4a1c      	ldr	r2, [pc, #112]	; (80063d8 <SystemInit+0xf8>)
 8006366:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8006368:	4b18      	ldr	r3, [pc, #96]	; (80063cc <SystemInit+0xec>)
 800636a:	4a1c      	ldr	r2, [pc, #112]	; (80063dc <SystemInit+0xfc>)
 800636c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800636e:	4b17      	ldr	r3, [pc, #92]	; (80063cc <SystemInit+0xec>)
 8006370:	2200      	movs	r2, #0
 8006372:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8006374:	4b15      	ldr	r3, [pc, #84]	; (80063cc <SystemInit+0xec>)
 8006376:	4a19      	ldr	r2, [pc, #100]	; (80063dc <SystemInit+0xfc>)
 8006378:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800637a:	4b14      	ldr	r3, [pc, #80]	; (80063cc <SystemInit+0xec>)
 800637c:	2200      	movs	r2, #0
 800637e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8006380:	4b12      	ldr	r3, [pc, #72]	; (80063cc <SystemInit+0xec>)
 8006382:	4a16      	ldr	r2, [pc, #88]	; (80063dc <SystemInit+0xfc>)
 8006384:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8006386:	4b11      	ldr	r3, [pc, #68]	; (80063cc <SystemInit+0xec>)
 8006388:	2200      	movs	r2, #0
 800638a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800638c:	4b0f      	ldr	r3, [pc, #60]	; (80063cc <SystemInit+0xec>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a0e      	ldr	r2, [pc, #56]	; (80063cc <SystemInit+0xec>)
 8006392:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006396:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8006398:	4b0c      	ldr	r3, [pc, #48]	; (80063cc <SystemInit+0xec>)
 800639a:	2200      	movs	r2, #0
 800639c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800639e:	4b10      	ldr	r3, [pc, #64]	; (80063e0 <SystemInit+0x100>)
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	4b10      	ldr	r3, [pc, #64]	; (80063e4 <SystemInit+0x104>)
 80063a4:	4013      	ands	r3, r2
 80063a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063aa:	d202      	bcs.n	80063b2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80063ac:	4b0e      	ldr	r3, [pc, #56]	; (80063e8 <SystemInit+0x108>)
 80063ae:	2201      	movs	r2, #1
 80063b0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80063b2:	4b0e      	ldr	r3, [pc, #56]	; (80063ec <SystemInit+0x10c>)
 80063b4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80063b8:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 80063ba:	bf00      	nop
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr
 80063c4:	e000ed00 	.word	0xe000ed00
 80063c8:	52002000 	.word	0x52002000
 80063cc:	58024400 	.word	0x58024400
 80063d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80063d4:	02020200 	.word	0x02020200
 80063d8:	01ff0000 	.word	0x01ff0000
 80063dc:	01010280 	.word	0x01010280
 80063e0:	5c001000 	.word	0x5c001000
 80063e4:	ffff0000 	.word	0xffff0000
 80063e8:	51008108 	.word	0x51008108
 80063ec:	52004000 	.word	0x52004000

080063f0 <_ZNKSt14_Function_base8_M_emptyEv>:
    bool _M_empty() const { return !_M_manager; }
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	bf0c      	ite	eq
 8006400:	2301      	moveq	r3, #1
 8006402:	2300      	movne	r3, #0
 8006404:	b2db      	uxtb	r3, r3
 8006406:	4618      	mov	r0, r3
 8006408:	370c      	adds	r7, #12
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr

08006412 <_ZNSt8__detail20_Prime_rehash_policyC1Ef>:
    _Prime_rehash_policy(float __z = 1.0) noexcept
 8006412:	b480      	push	{r7}
 8006414:	b083      	sub	sp, #12
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
 800641a:	ed87 0a00 	vstr	s0, [r7]
    : _M_max_load_factor(__z), _M_next_resize(0) { }
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	683a      	ldr	r2, [r7, #0]
 8006422:	601a      	str	r2, [r3, #0]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	605a      	str	r2, [r3, #4]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4618      	mov	r0, r3
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEELb1EEC1Ev>:
      _Hashtable_ebo_helper() = default;
 8006438:	b580      	push	{r7, lr}
 800643a:	b082      	sub	sp, #8
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 f8a9 	bl	8006598 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEC1Ev>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4618      	mov	r0, r3
 800644a:	3708      	adds	r7, #8
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEELb1EED1Ev>:
    struct _Hashtable_ebo_helper<_Nm, _Tp, true>
 8006450:	b580      	push	{r7, lr}
 8006452:	b082      	sub	sp, #8
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f000 f8a9 	bl	80065b0 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEED1Ev>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4618      	mov	r0, r3
 8006462:	3708      	adds	r7, #8
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEEC1Ev>:
      _Hashtable_alloc() = default;
 8006468:	b580      	push	{r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f7ff ffe1 	bl	8006438 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEELb1EEC1Ev>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4618      	mov	r0, r3
 800647a:	3708      	adds	r7, #8
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEED1Ev>:
    struct _Hashtable_alloc : private _Hashtable_ebo_helper<0, _NodeAlloc>
 8006480:	b580      	push	{r7, lr}
 8006482:	b082      	sub	sp, #8
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f7ff ffe1 	bl	8006450 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEELb1EED1Ev>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	4618      	mov	r0, r3
 8006492:	3708      	adds	r7, #8
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEEC1Ev>:
      _Hashtable() = default;
 8006498:	b580      	push	{r7, lr}
 800649a:	b082      	sub	sp, #8
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f7ff ffe1 	bl	8006468 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEEC1Ev>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f103 0218 	add.w	r2, r3, #24
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	601a      	str	r2, [r3, #0]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	605a      	str	r2, [r3, #4]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	3308      	adds	r3, #8
 80064ba:	4618      	mov	r0, r3
 80064bc:	f7fa fb9f 	bl	8000bfe <_ZNSt8__detail15_Hash_node_baseC1Ev>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	60da      	str	r2, [r3, #12]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	3310      	adds	r3, #16
 80064ca:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80064ce:	4618      	mov	r0, r3
 80064d0:	f7ff ff9f 	bl	8006412 <_ZNSt8__detail20_Prime_rehash_policyC1Ef>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	619a      	str	r2, [r3, #24]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4618      	mov	r0, r3
 80064de:	3708      	adds	r7, #8
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}

080064e4 <_ZNSt13unordered_mapIP19FDCAN_HandleTypeDefSt8functionIFvmPhjEESt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_S5_EEEC1Ev>:
      unordered_map() = default;
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b082      	sub	sp, #8
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	4618      	mov	r0, r3
 80064f0:	f7ff ffd2 	bl	8006498 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEEC1Ev>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4618      	mov	r0, r3
 80064f8:	3708      	adds	r7, #8
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
	...

08006500 <HAL_FDCAN_RxFifo0Callback>:
std::unordered_map<FDCAN_HandleTypeDef *,
                   std::function<void(uint32_t, uint8_t *, size_t)>>
    tutrc_harurobo_lib::CAN::rx_callbacks_;

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan,
                               uint32_t RxFifo0ITs) {
 8006500:	b5b0      	push	{r4, r5, r7, lr}
 8006502:	b090      	sub	sp, #64	; 0x40
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
  FDCAN_RxHeaderTypeDef rx_header;
  std::array<uint8_t, 8> data;

  if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &rx_header, data.data()) ==
 800650a:	687c      	ldr	r4, [r7, #4]
 800650c:	f107 030c 	add.w	r3, r7, #12
 8006510:	4618      	mov	r0, r3
 8006512:	f7fb fba7 	bl	8001c64 <_ZNSt5arrayIhLj8EE4dataEv>
 8006516:	4603      	mov	r3, r0
 8006518:	f107 0214 	add.w	r2, r7, #20
 800651c:	2140      	movs	r1, #64	; 0x40
 800651e:	4620      	mov	r0, r4
 8006520:	f004 f908 	bl	800a734 <HAL_FDCAN_GetRxMessage>
 8006524:	4603      	mov	r3, r0
 8006526:	2b00      	cmp	r3, #0
 8006528:	bf0c      	ite	eq
 800652a:	2301      	moveq	r3, #1
 800652c:	2300      	movne	r3, #0
 800652e:	b2db      	uxtb	r3, r3
 8006530:	2b00      	cmp	r3, #0
 8006532:	d02a      	beq.n	800658a <HAL_FDCAN_RxFifo0Callback+0x8a>
      HAL_OK) {
    auto itr = tutrc_harurobo_lib::CAN::rx_callbacks_.find(hfdcan);
 8006534:	1d3b      	adds	r3, r7, #4
 8006536:	4619      	mov	r1, r3
 8006538:	4816      	ldr	r0, [pc, #88]	; (8006594 <HAL_FDCAN_RxFifo0Callback+0x94>)
 800653a:	f000 f857 	bl	80065ec <_ZNSt13unordered_mapIP19FDCAN_HandleTypeDefSt8functionIFvmPhjEESt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_S5_EEE4findERSB_>
 800653e:	4603      	mov	r3, r0
 8006540:	60bb      	str	r3, [r7, #8]
    if (itr != tutrc_harurobo_lib::CAN::rx_callbacks_.end()) {
 8006542:	4814      	ldr	r0, [pc, #80]	; (8006594 <HAL_FDCAN_RxFifo0Callback+0x94>)
 8006544:	f000 f861 	bl	800660a <_ZNSt13unordered_mapIP19FDCAN_HandleTypeDefSt8functionIFvmPhjEESt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_S5_EEE3endEv>
 8006548:	4603      	mov	r3, r0
 800654a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800654c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8006550:	f107 0308 	add.w	r3, r7, #8
 8006554:	4611      	mov	r1, r2
 8006556:	4618      	mov	r0, r3
 8006558:	f000 f864 	bl	8006624 <_ZNSt8__detailneISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEbRKNS_19_Node_iterator_baseIT_XT0_EEESE_>
 800655c:	4603      	mov	r3, r0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d013      	beq.n	800658a <HAL_FDCAN_RxFifo0Callback+0x8a>
      itr->second(rx_header.Identifier, data.data(),
 8006562:	f107 0308 	add.w	r3, r7, #8
 8006566:	4618      	mov	r0, r3
 8006568:	f7fc f8c5 	bl	80026f6 <_ZNKSt8__detail14_Node_iteratorISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0ELb0EEptEv>
 800656c:	4603      	mov	r3, r0
 800656e:	1d1c      	adds	r4, r3, #4
 8006570:	697d      	ldr	r5, [r7, #20]
 8006572:	f107 030c 	add.w	r3, r7, #12
 8006576:	4618      	mov	r0, r3
 8006578:	f7fb fb74 	bl	8001c64 <_ZNSt5arrayIhLj8EE4dataEv>
 800657c:	4602      	mov	r2, r0
                  rx_header.DataLength >> 16);
 800657e:	6a3b      	ldr	r3, [r7, #32]
 8006580:	0c1b      	lsrs	r3, r3, #16
      itr->second(rx_header.Identifier, data.data(),
 8006582:	4629      	mov	r1, r5
 8006584:	4620      	mov	r0, r4
 8006586:	f000 f861 	bl	800664c <_ZNKSt8functionIFvmPhjEEclEmS0_j>
    }
  }
}
 800658a:	bf00      	nop
 800658c:	3740      	adds	r7, #64	; 0x40
 800658e:	46bd      	mov	sp, r7
 8006590:	bdb0      	pop	{r4, r5, r7, pc}
 8006592:	bf00      	nop
 8006594:	24000990 	.word	0x24000990

08006598 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8006598:	b580      	push	{r7, lr}
 800659a:	b082      	sub	sp, #8
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 f880 	bl	80066a6 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEC1Ev>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4618      	mov	r0, r3
 80065aa:	3708      	adds	r7, #8
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b082      	sub	sp, #8
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 f87f 	bl	80066bc <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEED1Ev>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	4618      	mov	r0, r3
 80065c2:	3708      	adds	r7, #8
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}

080065c8 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEED1Ev>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b082      	sub	sp, #8
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
      clear();
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f000 f87e 	bl	80066d2 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE5clearEv>
      _M_deallocate_buckets();
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f7fd fc04 	bl	8003de4 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>
    }
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f7ff ff4f 	bl	8006480 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEED1Ev>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	4618      	mov	r0, r3
 80065e6:	3708      	adds	r7, #8
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <_ZNSt13unordered_mapIP19FDCAN_HandleTypeDefSt8functionIFvmPhjEESt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_S5_EEE4findERSB_>:
      find(const key_type& __x)
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b082      	sub	sp, #8
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
      { return _M_h.find(__x); }
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6839      	ldr	r1, [r7, #0]
 80065fa:	4618      	mov	r0, r3
 80065fc:	f000 f889 	bl	8006712 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE4findERS3_>
 8006600:	4603      	mov	r3, r0
 8006602:	4618      	mov	r0, r3
 8006604:	3708      	adds	r7, #8
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}

0800660a <_ZNSt13unordered_mapIP19FDCAN_HandleTypeDefSt8functionIFvmPhjEESt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_S5_EEE3endEv>:
      end() noexcept
 800660a:	b580      	push	{r7, lr}
 800660c:	b082      	sub	sp, #8
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]
      { return _M_h.end(); }
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4618      	mov	r0, r3
 8006616:	f000 f8a7 	bl	8006768 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE3endEv>
 800661a:	4603      	mov	r3, r0
 800661c:	4618      	mov	r0, r3
 800661e:	3708      	adds	r7, #8
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <_ZNSt8__detailneISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEbRKNS_19_Node_iterator_baseIT_XT0_EEESE_>:
    operator!=(const _Node_iterator_base<_Value, _Cache_hash_code>& __x,
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
    { return __x._M_cur != __y._M_cur; }
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	429a      	cmp	r2, r3
 8006638:	bf14      	ite	ne
 800663a:	2301      	movne	r3, #1
 800663c:	2300      	moveq	r3, #0
 800663e:	b2db      	uxtb	r3, r3
 8006640:	4618      	mov	r0, r3
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <_ZNKSt8functionIFvmPhjEEclEmS0_j>:

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 800664c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006650:	b084      	sub	sp, #16
 8006652:	af00      	add	r7, sp, #0
 8006654:	60f8      	str	r0, [r7, #12]
 8006656:	60b9      	str	r1, [r7, #8]
 8006658:	607a      	str	r2, [r7, #4]
 800665a:	603b      	str	r3, [r7, #0]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	4618      	mov	r0, r3
 8006660:	f7ff fec6 	bl	80063f0 <_ZNKSt14_Function_base8_M_emptyEv>
 8006664:	4603      	mov	r3, r0
 8006666:	2b00      	cmp	r3, #0
 8006668:	d001      	beq.n	800666e <_ZNKSt8functionIFvmPhjEEclEmS0_j+0x22>
	__throw_bad_function_call();
 800666a:	f00a fbd2 	bl	8010e12 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	68dc      	ldr	r4, [r3, #12]
 8006672:	68fd      	ldr	r5, [r7, #12]
 8006674:	f107 0308 	add.w	r3, r7, #8
 8006678:	4618      	mov	r0, r3
 800667a:	f7fc f8fa 	bl	8002872 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 800667e:	4606      	mov	r6, r0
 8006680:	1d3b      	adds	r3, r7, #4
 8006682:	4618      	mov	r0, r3
 8006684:	f7fc f900 	bl	8002888 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 8006688:	4680      	mov	r8, r0
 800668a:	463b      	mov	r3, r7
 800668c:	4618      	mov	r0, r3
 800668e:	f7fb fcb0 	bl	8001ff2 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8006692:	4603      	mov	r3, r0
 8006694:	4642      	mov	r2, r8
 8006696:	4631      	mov	r1, r6
 8006698:	4628      	mov	r0, r5
 800669a:	47a0      	blx	r4
 800669c:	bf00      	nop
    }
 800669e:	3710      	adds	r7, #16
 80066a0:	46bd      	mov	sp, r7
 80066a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080066a6 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80066a6:	b480      	push	{r7}
 80066a8:	b083      	sub	sp, #12
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	4618      	mov	r0, r3
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80066bc:	b480      	push	{r7}
 80066be:	b083      	sub	sp, #12
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	4618      	mov	r0, r3
 80066c8:	370c      	adds	r7, #12
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr

080066d2 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE5clearEv>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 80066d2:	b580      	push	{r7, lr}
 80066d4:	b082      	sub	sp, #8
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
      this->_M_deallocate_nodes(_M_begin());
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f7fd fb76 	bl	8003dcc <_ZNKSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 80066e0:	4603      	mov	r3, r0
 80066e2:	4619      	mov	r1, r3
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 f84e 	bl	8006786 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEE19_M_deallocate_nodesEPSB_>
      __builtin_memset(_M_buckets, 0, _M_bucket_count * sizeof(__bucket_type));
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	4610      	mov	r0, r2
 80066f6:	461a      	mov	r2, r3
 80066f8:	2100      	movs	r1, #0
 80066fa:	f00b fabb 	bl	8011c74 <memset>
      _M_element_count = 0;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	60da      	str	r2, [r3, #12]
      _M_before_begin._M_nxt = nullptr;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	609a      	str	r2, [r3, #8]
    }
 800670a:	bf00      	nop
 800670c:	3708      	adds	r7, #8
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}

08006712 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE4findERS3_>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8006712:	b580      	push	{r7, lr}
 8006714:	b086      	sub	sp, #24
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
 800671a:	6039      	str	r1, [r7, #0]
      __hash_code __code = this->_M_hash_code(__k);
 800671c:	6839      	ldr	r1, [r7, #0]
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f7fb ff0f 	bl	8002542 <_ZNKSt8__detail15_Hash_code_baseIP19FDCAN_HandleTypeDefSt4pairIKS2_St8functionIFvmPhjEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS4_>
 8006724:	6178      	str	r0, [r7, #20]
      std::size_t __bkt = _M_bucket_index(__k, __code);
 8006726:	697a      	ldr	r2, [r7, #20]
 8006728:	6839      	ldr	r1, [r7, #0]
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f7fb ff1d 	bl	800256a <_ZNKSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERS3_j>
 8006730:	6138      	str	r0, [r7, #16]
      __node_type* __p = _M_find_node(__bkt, __k, __code);
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	683a      	ldr	r2, [r7, #0]
 8006736:	6939      	ldr	r1, [r7, #16]
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f7fb ff28 	bl	800258e <_ZNKSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS3_j>
 800673e:	60f8      	str	r0, [r7, #12]
      return __p ? iterator(__p) : end();
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d006      	beq.n	8006754 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE4findERS3_+0x42>
 8006746:	f107 0308 	add.w	r3, r7, #8
 800674a:	68f9      	ldr	r1, [r7, #12]
 800674c:	4618      	mov	r0, r3
 800674e:	f7fc fc57 	bl	8003000 <_ZNSt8__detail14_Node_iteratorISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0ELb0EEC1EPNS_10_Hash_nodeIS9_Lb0EEE>
 8006752:	e004      	b.n	800675e <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE4findERS3_+0x4c>
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f000 f807 	bl	8006768 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE3endEv>
 800675a:	4603      	mov	r3, r0
 800675c:	60bb      	str	r3, [r7, #8]
 800675e:	68bb      	ldr	r3, [r7, #8]
    }
 8006760:	4618      	mov	r0, r3
 8006762:	3718      	adds	r7, #24
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEE3endEv>:
      end() noexcept
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
      { return iterator(nullptr); }
 8006770:	f107 030c 	add.w	r3, r7, #12
 8006774:	2100      	movs	r1, #0
 8006776:	4618      	mov	r0, r3
 8006778:	f7fc fc42 	bl	8003000 <_ZNSt8__detail14_Node_iteratorISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0ELb0EEC1EPNS_10_Hash_nodeIS9_Lb0EEE>
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	4618      	mov	r0, r3
 8006780:	3710      	adds	r7, #16
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}

08006786 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEE19_M_deallocate_nodesEPSB_>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_nodes(__node_type* __n)
 8006786:	b580      	push	{r7, lr}
 8006788:	b084      	sub	sp, #16
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
 800678e:	6039      	str	r1, [r7, #0]
      while (__n)
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d00a      	beq.n	80067ac <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEE19_M_deallocate_nodesEPSB_+0x26>
	  __node_type* __tmp = __n;
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	60fb      	str	r3, [r7, #12]
	  __n = __n->_M_next();
 800679a:	6838      	ldr	r0, [r7, #0]
 800679c:	f7fc fec3 	bl	8003526 <_ZNKSt8__detail10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EE7_M_nextEv>
 80067a0:	6038      	str	r0, [r7, #0]
	  _M_deallocate_node(__tmp);
 80067a2:	68f9      	ldr	r1, [r7, #12]
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f7fc fbb0 	bl	8002f0a <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEE18_M_deallocate_nodeEPSB_>
      while (__n)
 80067aa:	e7f1      	b.n	8006790 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP19FDCAN_HandleTypeDefSt8functionIFvmPhjEEELb0EEEEE19_M_deallocate_nodesEPSB_+0xa>
    }
 80067ac:	bf00      	nop
 80067ae:	3710      	adds	r7, #16
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <_ZNSt13unordered_mapIP19FDCAN_HandleTypeDefSt8functionIFvmPhjEESt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_S5_EEED1Ev>:
    class unordered_map
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4618      	mov	r0, r3
 80067c0:	f7ff ff02 	bl	80065c8 <_ZNSt10_HashtableIP19FDCAN_HandleTypeDefSt4pairIKS1_St8functionIFvmPhjEEESaIS8_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSA_18_Mod_range_hashingENSA_20_Default_ranged_hashENSA_20_Prime_rehash_policyENSA_17_Hashtable_traitsILb0ELb0ELb1EEEED1Ev>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4618      	mov	r0, r3
 80067c8:	3708      	adds	r7, #8
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
	...

080067d0 <_Z41__static_initialization_and_destruction_0ii>:
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b082      	sub	sp, #8
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d107      	bne.n	80067f0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d102      	bne.n	80067f0 <_Z41__static_initialization_and_destruction_0ii+0x20>
    tutrc_harurobo_lib::CAN::rx_callbacks_;
 80067ea:	4809      	ldr	r0, [pc, #36]	; (8006810 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80067ec:	f7ff fe7a 	bl	80064e4 <_ZNSt13unordered_mapIP19FDCAN_HandleTypeDefSt8functionIFvmPhjEESt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_S5_EEEC1Ev>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d107      	bne.n	8006806 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d102      	bne.n	8006806 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8006800:	4803      	ldr	r0, [pc, #12]	; (8006810 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8006802:	f7ff ffd7 	bl	80067b4 <_ZNSt13unordered_mapIP19FDCAN_HandleTypeDefSt8functionIFvmPhjEESt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_S5_EEED1Ev>
}
 8006806:	bf00      	nop
 8006808:	3708      	adds	r7, #8
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	24000990 	.word	0x24000990

08006814 <_GLOBAL__sub_I__ZN18tutrc_harurobo_lib3CAN13rx_callbacks_E>:
 8006814:	b580      	push	{r7, lr}
 8006816:	af00      	add	r7, sp, #0
 8006818:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800681c:	2001      	movs	r0, #1
 800681e:	f7ff ffd7 	bl	80067d0 <_Z41__static_initialization_and_destruction_0ii>
 8006822:	bd80      	pop	{r7, pc}

08006824 <_GLOBAL__sub_D__ZN18tutrc_harurobo_lib3CAN13rx_callbacks_E>:
 8006824:	b580      	push	{r7, lr}
 8006826:	af00      	add	r7, sp, #0
 8006828:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800682c:	2000      	movs	r0, #0
 800682e:	f7ff ffcf 	bl	80067d0 <_Z41__static_initialization_and_destruction_0ii>
 8006832:	bd80      	pop	{r7, pc}

08006834 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEELb1EEC1Ev>:
      _Hashtable_ebo_helper() = default;
 8006834:	b580      	push	{r7, lr}
 8006836:	b082      	sub	sp, #8
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 f85c 	bl	80068fa <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEEC1Ev>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4618      	mov	r0, r3
 8006846:	3708      	adds	r7, #8
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}

0800684c <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEELb1EED1Ev>:
    struct _Hashtable_ebo_helper<_Nm, _Tp, true>
 800684c:	b580      	push	{r7, lr}
 800684e:	b082      	sub	sp, #8
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f000 f85c 	bl	8006912 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEED1Ev>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4618      	mov	r0, r3
 800685e:	3708      	adds	r7, #8
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEEEC1Ev>:
      _Hashtable_alloc() = default;
 8006864:	b580      	push	{r7, lr}
 8006866:	b082      	sub	sp, #8
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f7ff ffe1 	bl	8006834 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEELb1EEC1Ev>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	4618      	mov	r0, r3
 8006876:	3708      	adds	r7, #8
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEEED1Ev>:
    struct _Hashtable_alloc : private _Hashtable_ebo_helper<0, _NodeAlloc>
 800687c:	b580      	push	{r7, lr}
 800687e:	b082      	sub	sp, #8
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f7ff ffe1 	bl	800684c <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEELb1EED1Ev>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4618      	mov	r0, r3
 800688e:	3708      	adds	r7, #8
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}

08006894 <_ZNSt10_HashtableItSt4pairIKtSt8functionIFvvEEESaIS5_ENSt8__detail10_Select1stESt8equal_toItESt4hashItENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb0ELb0ELb1EEEEC1Ev>:
      _Hashtable() = default;
 8006894:	b580      	push	{r7, lr}
 8006896:	b082      	sub	sp, #8
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f7ff ffe1 	bl	8006864 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEEEC1Ev>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f103 0218 	add.w	r2, r3, #24
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	601a      	str	r2, [r3, #0]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	605a      	str	r2, [r3, #4]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	3308      	adds	r3, #8
 80068b6:	4618      	mov	r0, r3
 80068b8:	f7fa f9a1 	bl	8000bfe <_ZNSt8__detail15_Hash_node_baseC1Ev>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	60da      	str	r2, [r3, #12]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	3310      	adds	r3, #16
 80068c6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80068ca:	4618      	mov	r0, r3
 80068cc:	f7ff fda1 	bl	8006412 <_ZNSt8__detail20_Prime_rehash_policyC1Ef>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	619a      	str	r2, [r3, #24]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4618      	mov	r0, r3
 80068da:	3708      	adds	r7, #8
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}

080068e0 <_ZNSt13unordered_mapItSt8functionIFvvEESt4hashItESt8equal_toItESaISt4pairIKtS2_EEEC1Ev>:
      unordered_map() = default;
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b082      	sub	sp, #8
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	4618      	mov	r0, r3
 80068ec:	f7ff ffd2 	bl	8006894 <_ZNSt10_HashtableItSt4pairIKtSt8functionIFvvEEESaIS5_ENSt8__detail10_Select1stESt8equal_toItESt4hashItENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb0ELb0ELb1EEEEC1Ev>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	4618      	mov	r0, r3
 80068f4:	3708      	adds	r7, #8
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}

080068fa <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80068fa:	b580      	push	{r7, lr}
 80068fc:	b082      	sub	sp, #8
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 f839 	bl	800697a <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEEC1Ev>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	4618      	mov	r0, r3
 800690c:	3708      	adds	r7, #8
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}

08006912 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8006912:	b580      	push	{r7, lr}
 8006914:	b082      	sub	sp, #8
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 f838 	bl	8006990 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEED1Ev>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4618      	mov	r0, r3
 8006924:	3708      	adds	r7, #8
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}

0800692a <_ZNSt10_HashtableItSt4pairIKtSt8functionIFvvEEESaIS5_ENSt8__detail10_Select1stESt8equal_toItESt4hashItENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb0ELb0ELb1EEEED1Ev>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 800692a:	b580      	push	{r7, lr}
 800692c:	b082      	sub	sp, #8
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
      clear();
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 f837 	bl	80069a6 <_ZNSt10_HashtableItSt4pairIKtSt8functionIFvvEEESaIS5_ENSt8__detail10_Select1stESt8equal_toItESt4hashItENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb0ELb0ELb1EEEE5clearEv>
      _M_deallocate_buckets();
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 f854 	bl	80069e6 <_ZNSt10_HashtableItSt4pairIKtSt8functionIFvvEEESaIS5_ENSt8__detail10_Select1stESt8equal_toItESt4hashItENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>
    }
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f7ff ff9c 	bl	800687c <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEEED1Ev>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	4618      	mov	r0, r3
 8006948:	3708      	adds	r7, #8
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}

0800694e <_ZNKSt8functionIFvvEEclEv>:
    function<_Res(_ArgTypes...)>::
 800694e:	b580      	push	{r7, lr}
 8006950:	b082      	sub	sp, #8
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
      if (_M_empty())
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4618      	mov	r0, r3
 800695a:	f7ff fd49 	bl	80063f0 <_ZNKSt14_Function_base8_M_emptyEv>
 800695e:	4603      	mov	r3, r0
 8006960:	2b00      	cmp	r3, #0
 8006962:	d001      	beq.n	8006968 <_ZNKSt8functionIFvvEEclEv+0x1a>
	__throw_bad_function_call();
 8006964:	f00a fa55 	bl	8010e12 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	4610      	mov	r0, r2
 8006970:	4798      	blx	r3
 8006972:	bf00      	nop
    }
 8006974:	3708      	adds	r7, #8
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}

0800697a <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800697a:	b480      	push	{r7}
 800697c:	b083      	sub	sp, #12
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4618      	mov	r0, r3
 8006986:	370c      	adds	r7, #12
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr

08006990 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8006990:	b480      	push	{r7}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	4618      	mov	r0, r3
 800699c:	370c      	adds	r7, #12
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr

080069a6 <_ZNSt10_HashtableItSt4pairIKtSt8functionIFvvEEESaIS5_ENSt8__detail10_Select1stESt8equal_toItESt4hashItENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb0ELb0ELb1EEEE5clearEv>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 80069a6:	b580      	push	{r7, lr}
 80069a8:	b082      	sub	sp, #8
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	6078      	str	r0, [r7, #4]
      this->_M_deallocate_nodes(_M_begin());
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 f837 	bl	8006a22 <_ZNKSt10_HashtableItSt4pairIKtSt8functionIFvvEEESaIS5_ENSt8__detail10_Select1stESt8equal_toItESt4hashItENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 80069b4:	4603      	mov	r3, r0
 80069b6:	4619      	mov	r1, r3
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 f83e 	bl	8006a3a <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEEE19_M_deallocate_nodesEPS8_>
      __builtin_memset(_M_buckets, 0, _M_bucket_count * sizeof(__bucket_type));
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681a      	ldr	r2, [r3, #0]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	4610      	mov	r0, r2
 80069ca:	461a      	mov	r2, r3
 80069cc:	2100      	movs	r1, #0
 80069ce:	f00b f951 	bl	8011c74 <memset>
      _M_element_count = 0;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	60da      	str	r2, [r3, #12]
      _M_before_begin._M_nxt = nullptr;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	609a      	str	r2, [r3, #8]
    }
 80069de:	bf00      	nop
 80069e0:	3708      	adds	r7, #8
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}

080069e6 <_ZNSt10_HashtableItSt4pairIKtSt8functionIFvvEEESaIS5_ENSt8__detail10_Select1stESt8equal_toItESt4hashItENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>:
      _M_deallocate_buckets()
 80069e6:	b580      	push	{r7, lr}
 80069e8:	b082      	sub	sp, #8
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6819      	ldr	r1, [r3, #0]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	461a      	mov	r2, r3
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 f835 	bl	8006a68 <_ZNSt10_HashtableItSt4pairIKtSt8functionIFvvEEESaIS5_ENSt8__detail10_Select1stESt8equal_toItESt4hashItENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS7_15_Hash_node_baseEj>
 80069fe:	bf00      	nop
 8006a00:	3708      	adds	r7, #8
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}

08006a06 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKtSt8functionIFvvEEEE9_M_valptrEv>:
      _M_valptr() noexcept
 8006a06:	b580      	push	{r7, lr}
 8006a08:	b082      	sub	sp, #8
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	3304      	adds	r3, #4
 8006a12:	4618      	mov	r0, r3
 8006a14:	f000 f83f 	bl	8006a96 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKtSt8functionIFvvEEEE6_M_ptrEv>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3708      	adds	r7, #8
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}

08006a22 <_ZNKSt10_HashtableItSt4pairIKtSt8functionIFvvEEESaIS5_ENSt8__detail10_Select1stESt8equal_toItESt4hashItENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>:
      _M_begin() const
 8006a22:	b480      	push	{r7}
 8006a24:	b083      	sub	sp, #12
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
      { return static_cast<__node_type*>(_M_before_begin._M_nxt); }
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	4618      	mov	r0, r3
 8006a30:	370c      	adds	r7, #12
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr

08006a3a <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEEE19_M_deallocate_nodesEPS8_>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_nodes(__node_type* __n)
 8006a3a:	b580      	push	{r7, lr}
 8006a3c:	b084      	sub	sp, #16
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	6078      	str	r0, [r7, #4]
 8006a42:	6039      	str	r1, [r7, #0]
      while (__n)
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d00a      	beq.n	8006a60 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEEE19_M_deallocate_nodesEPS8_+0x26>
	  __node_type* __tmp = __n;
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	60fb      	str	r3, [r7, #12]
	  __n = __n->_M_next();
 8006a4e:	6838      	ldr	r0, [r7, #0]
 8006a50:	f000 f847 	bl	8006ae2 <_ZNKSt8__detail10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EE7_M_nextEv>
 8006a54:	6038      	str	r0, [r7, #0]
	  _M_deallocate_node(__tmp);
 8006a56:	68f9      	ldr	r1, [r7, #12]
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f000 f828 	bl	8006aae <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEEE18_M_deallocate_nodeEPS8_>
      while (__n)
 8006a5e:	e7f1      	b.n	8006a44 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEEE19_M_deallocate_nodesEPS8_+0xa>
    }
 8006a60:	bf00      	nop
 8006a62:	3710      	adds	r7, #16
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}

08006a68 <_ZNSt10_HashtableItSt4pairIKtSt8functionIFvvEEESaIS5_ENSt8__detail10_Select1stESt8equal_toItESt4hashItENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS7_15_Hash_node_baseEj>:
      _M_deallocate_buckets(__bucket_type* __bkts, size_type __bkt_count)
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	60f8      	str	r0, [r7, #12]
 8006a70:	60b9      	str	r1, [r7, #8]
 8006a72:	607a      	str	r2, [r7, #4]
	if (_M_uses_single_bucket(__bkts))
 8006a74:	68b9      	ldr	r1, [r7, #8]
 8006a76:	68f8      	ldr	r0, [r7, #12]
 8006a78:	f000 f83f 	bl	8006afa <_ZNKSt10_HashtableItSt4pairIKtSt8functionIFvvEEESaIS5_ENSt8__detail10_Select1stESt8equal_toItESt4hashItENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_uses_single_bucketEPPNS7_15_Hash_node_baseE>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d105      	bne.n	8006a8e <_ZNSt10_HashtableItSt4pairIKtSt8functionIFvvEEESaIS5_ENSt8__detail10_Select1stESt8equal_toItESt4hashItENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS7_15_Hash_node_baseEj+0x26>
	__hashtable_alloc::_M_deallocate_buckets(__bkts, __bkt_count);
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	68b9      	ldr	r1, [r7, #8]
 8006a86:	68f8      	ldr	r0, [r7, #12]
 8006a88:	f000 f84f 	bl	8006b2a <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEEE21_M_deallocate_bucketsEPPNS_15_Hash_node_baseEj>
 8006a8c:	e000      	b.n	8006a90 <_ZNSt10_HashtableItSt4pairIKtSt8functionIFvvEEESaIS5_ENSt8__detail10_Select1stESt8equal_toItESt4hashItENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS7_15_Hash_node_baseEj+0x28>
	  return;
 8006a8e:	bf00      	nop
      }
 8006a90:	3710      	adds	r7, #16
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}

08006a96 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKtSt8functionIFvvEEEE6_M_ptrEv>:
      _M_ptr() noexcept
 8006a96:	b580      	push	{r7, lr}
 8006a98:	b082      	sub	sp, #8
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 f867 	bl	8006b72 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKtSt8functionIFvvEEEE7_M_addrEv>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3708      	adds	r7, #8
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}

08006aae <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEEE18_M_deallocate_nodeEPS8_>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node(__node_type* __n)
 8006aae:	b590      	push	{r4, r7, lr}
 8006ab0:	b083      	sub	sp, #12
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	6078      	str	r0, [r7, #4]
 8006ab6:	6039      	str	r1, [r7, #0]
      __node_alloc_traits::destroy(_M_node_allocator(), __n->_M_valptr());
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f000 f865 	bl	8006b88 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEEE17_M_node_allocatorEv>
 8006abe:	4604      	mov	r4, r0
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f7ff ff9f 	bl	8006a06 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKtSt8functionIFvvEEEE9_M_valptrEv>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	4619      	mov	r1, r3
 8006acc:	4620      	mov	r0, r4
 8006ace:	f000 f876 	bl	8006bbe <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEEE7destroyIS7_EEvRS9_PT_>
      _M_deallocate_node_ptr(__n);
 8006ad2:	6839      	ldr	r1, [r7, #0]
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f000 f87f 	bl	8006bd8 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEEE22_M_deallocate_node_ptrEPS8_>
    }
 8006ada:	bf00      	nop
 8006adc:	370c      	adds	r7, #12
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd90      	pop	{r4, r7, pc}

08006ae2 <_ZNKSt8__detail10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EE7_M_nextEv>:
      _M_next() const noexcept
 8006ae2:	b480      	push	{r7}
 8006ae4:	b083      	sub	sp, #12
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
      { return static_cast<_Hash_node*>(this->_M_nxt); }
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4618      	mov	r0, r3
 8006af0:	370c      	adds	r7, #12
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr

08006afa <_ZNKSt10_HashtableItSt4pairIKtSt8functionIFvvEEESaIS5_ENSt8__detail10_Select1stESt8equal_toItESt4hashItENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_uses_single_bucketEPPNS7_15_Hash_node_baseE>:
      _M_uses_single_bucket(__bucket_type* __bkts) const
 8006afa:	b480      	push	{r7}
 8006afc:	b083      	sub	sp, #12
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
 8006b02:	6039      	str	r1, [r7, #0]
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	3318      	adds	r3, #24
 8006b08:	683a      	ldr	r2, [r7, #0]
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	bf0c      	ite	eq
 8006b0e:	2301      	moveq	r3, #1
 8006b10:	2300      	movne	r3, #0
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	bf14      	ite	ne
 8006b18:	2301      	movne	r3, #1
 8006b1a:	2300      	moveq	r3, #0
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	4618      	mov	r0, r3
 8006b20:	370c      	adds	r7, #12
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr

08006b2a <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEEE21_M_deallocate_bucketsEPPNS_15_Hash_node_baseEj>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_buckets(__bucket_type* __bkts,
 8006b2a:	b580      	push	{r7, lr}
 8006b2c:	b086      	sub	sp, #24
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	60f8      	str	r0, [r7, #12]
 8006b32:	60b9      	str	r1, [r7, #8]
 8006b34:	607a      	str	r2, [r7, #4]
      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__bkts);
 8006b36:	68b8      	ldr	r0, [r7, #8]
 8006b38:	f7fd feab 	bl	8004892 <_ZNSt14pointer_traitsIPPNSt8__detail15_Hash_node_baseEE10pointer_toERS2_>
 8006b3c:	6178      	str	r0, [r7, #20]
      __bucket_alloc_type __alloc(_M_node_allocator());
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	f000 f822 	bl	8006b88 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEEE17_M_node_allocatorEv>
 8006b44:	4602      	mov	r2, r0
 8006b46:	f107 0310 	add.w	r3, r7, #16
 8006b4a:	4611      	mov	r1, r2
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f000 f859 	bl	8006c04 <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEEERKSaIT_E>
      __bucket_alloc_traits::deallocate(__alloc, __ptr, __bkt_count);
 8006b52:	f107 0310 	add.w	r3, r7, #16
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	6979      	ldr	r1, [r7, #20]
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f7fd fea5 	bl	80048aa <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE10deallocateERS3_PS2_j>
      __bucket_alloc_type __alloc(_M_node_allocator());
 8006b60:	f107 0310 	add.w	r3, r7, #16
 8006b64:	4618      	mov	r0, r3
 8006b66:	f7fd fcef 	bl	8004548 <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>
    }
 8006b6a:	bf00      	nop
 8006b6c:	3718      	adds	r7, #24
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}

08006b72 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKtSt8functionIFvvEEEE7_M_addrEv>:
      _M_addr() noexcept
 8006b72:	b480      	push	{r7}
 8006b74:	b083      	sub	sp, #12
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 8006b7a:	687b      	ldr	r3, [r7, #4]
      }
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	370c      	adds	r7, #12
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr

08006b88 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEEE17_M_node_allocatorEv>:
      _M_node_allocator()
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b082      	sub	sp, #8
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
      { return __ebo_node_alloc::_M_get(); }
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 f844 	bl	8006c1e <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEELb1EE6_M_getEv>
 8006b96:	4603      	mov	r3, r0
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3708      	adds	r7, #8
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	60b9      	str	r1, [r7, #8]
 8006baa:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	68b9      	ldr	r1, [r7, #8]
 8006bb0:	68f8      	ldr	r0, [r7, #12]
 8006bb2:	f000 f83f 	bl	8006c34 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEE10deallocateEPS9_j>
 8006bb6:	bf00      	nop
 8006bb8:	3710      	adds	r7, #16
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}

08006bbe <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEEE7destroyIS7_EEvRS9_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8006bbe:	b580      	push	{r7, lr}
 8006bc0:	b082      	sub	sp, #8
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	6078      	str	r0, [r7, #4]
 8006bc6:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8006bc8:	6839      	ldr	r1, [r7, #0]
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 f853 	bl	8006c76 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEE7destroyIS8_EEvPT_>
	}
 8006bd0:	bf00      	nop
 8006bd2:	3708      	adds	r7, #8
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEEE22_M_deallocate_node_ptrEPS8_>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node_ptr(__node_type* __n)
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	6039      	str	r1, [r7, #0]
      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__n);
 8006be2:	6838      	ldr	r0, [r7, #0]
 8006be4:	f000 f853 	bl	8006c8e <_ZNSt14pointer_traitsIPNSt8__detail10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEE10pointer_toERS8_>
 8006be8:	60f8      	str	r0, [r7, #12]
      __node_alloc_traits::deallocate(_M_node_allocator(), __ptr, 1);
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f7ff ffcc 	bl	8006b88 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEEE17_M_node_allocatorEv>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	68f9      	ldr	r1, [r7, #12]
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f7ff ffd2 	bl	8006ba0 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEEE10deallocateERS9_PS8_j>
    }
 8006bfc:	bf00      	nop
 8006bfe:	3710      	adds	r7, #16
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b082      	sub	sp, #8
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6039      	str	r1, [r7, #0]
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f7fd fe0b 	bl	800482a <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEEC1Ev>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	4618      	mov	r0, r3
 8006c18:	3708      	adds	r7, #8
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}

08006c1e <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEELb1EE6_M_getEv>:
      _Tp& _M_get() { return static_cast<_Tp&>(*this); }
 8006c1e:	b480      	push	{r7}
 8006c20:	b083      	sub	sp, #12
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	4618      	mov	r0, r3
 8006c2a:	370c      	adds	r7, #12
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr

08006c34 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEE10deallocateEPS9_j>:
      deallocate(_Tp* __p, size_type __t)
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b084      	sub	sp, #16
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	60f8      	str	r0, [r7, #12]
 8006c3c:	60b9      	str	r1, [r7, #8]
 8006c3e:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	4613      	mov	r3, r2
 8006c44:	005b      	lsls	r3, r3, #1
 8006c46:	4413      	add	r3, r2
 8006c48:	00db      	lsls	r3, r3, #3
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	68b8      	ldr	r0, [r7, #8]
 8006c4e:	f00a f8c7 	bl	8010de0 <_ZdlPvj>
      }
 8006c52:	bf00      	nop
 8006c54:	3710      	adds	r7, #16
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}

08006c5a <_ZNSt4pairIKtSt8functionIFvvEEED1Ev>:
 8006c5a:	b580      	push	{r7, lr}
 8006c5c:	b082      	sub	sp, #8
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	6078      	str	r0, [r7, #4]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	3304      	adds	r3, #4
 8006c66:	4618      	mov	r0, r3
 8006c68:	f7fa fede 	bl	8001a28 <_ZNSt8functionIFvvEED1Ev>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3708      	adds	r7, #8
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}

08006c76 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEE7destroyIS8_EEvPT_>:
	destroy(_Up* __p)
 8006c76:	b580      	push	{r7, lr}
 8006c78:	b082      	sub	sp, #8
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	6078      	str	r0, [r7, #4]
 8006c7e:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8006c80:	6838      	ldr	r0, [r7, #0]
 8006c82:	f7ff ffea 	bl	8006c5a <_ZNSt4pairIKtSt8functionIFvvEEED1Ev>
 8006c86:	bf00      	nop
 8006c88:	3708      	adds	r7, #8
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}

08006c8e <_ZNSt14pointer_traitsIPNSt8__detail10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEE10pointer_toERS8_>:
      pointer_to(__make_not_void<element_type>& __r) noexcept
 8006c8e:	b580      	push	{r7, lr}
 8006c90:	b082      	sub	sp, #8
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	6078      	str	r0, [r7, #4]
      { return std::addressof(__r); }
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 f805 	bl	8006ca6 <_ZSt9addressofINSt8__detail10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEEPT_RS9_>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3708      	adds	r7, #8
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}

08006ca6 <_ZSt9addressofINSt8__detail10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEEPT_RS9_>:
    addressof(_Tp& __r) noexcept
 8006ca6:	b580      	push	{r7, lr}
 8006ca8:	b082      	sub	sp, #8
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 f805 	bl	8006cbe <_ZSt11__addressofINSt8__detail10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEEPT_RS9_>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3708      	adds	r7, #8
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}

08006cbe <_ZSt11__addressofINSt8__detail10_Hash_nodeISt4pairIKtSt8functionIFvvEEELb0EEEEPT_RS9_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8006cbe:	b480      	push	{r7}
 8006cc0:	b083      	sub	sp, #12
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	4618      	mov	r0, r3
 8006cca:	370c      	adds	r7, #12
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr

08006cd4 <_ZNSt13unordered_mapItSt8functionIFvvEESt4hashItESt8equal_toItESaISt4pairIKtS2_EEED1Ev>:
    class unordered_map
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b082      	sub	sp, #8
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f7ff fe23 	bl	800692a <_ZNSt10_HashtableItSt4pairIKtSt8functionIFvvEEESaIS5_ENSt8__detail10_Select1stESt8equal_toItESt4hashItENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb0ELb0ELb1EEEED1Ev>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3708      	adds	r7, #8
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
	...

08006cf0 <_Z41__static_initialization_and_destruction_0ii>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
  auto itr = tutrc_harurobo_lib::GPIO::gpio_callbacks_.find(GPIO_Pin);
  if (itr != tutrc_harurobo_lib::GPIO::gpio_callbacks_.end()) {
    itr->second();
  }
}
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b082      	sub	sp, #8
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d107      	bne.n	8006d10 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d102      	bne.n	8006d10 <_Z41__static_initialization_and_destruction_0ii+0x20>
    tutrc_harurobo_lib::GPIO::gpio_callbacks_;
 8006d0a:	4809      	ldr	r0, [pc, #36]	; (8006d30 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8006d0c:	f7ff fde8 	bl	80068e0 <_ZNSt13unordered_mapItSt8functionIFvvEESt4hashItESt8equal_toItESaISt4pairIKtS2_EEEC1Ev>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d107      	bne.n	8006d26 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d102      	bne.n	8006d26 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8006d20:	4803      	ldr	r0, [pc, #12]	; (8006d30 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8006d22:	f7ff ffd7 	bl	8006cd4 <_ZNSt13unordered_mapItSt8functionIFvvEESt4hashItESt8equal_toItESaISt4pairIKtS2_EEED1Ev>
}
 8006d26:	bf00      	nop
 8006d28:	3708      	adds	r7, #8
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	240009ac 	.word	0x240009ac

08006d34 <_GLOBAL__sub_I__ZN18tutrc_harurobo_lib4GPIO15gpio_callbacks_E>:
 8006d34:	b580      	push	{r7, lr}
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006d3c:	2001      	movs	r0, #1
 8006d3e:	f7ff ffd7 	bl	8006cf0 <_Z41__static_initialization_and_destruction_0ii>
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <_GLOBAL__sub_D__ZN18tutrc_harurobo_lib4GPIO15gpio_callbacks_E>:
 8006d44:	b580      	push	{r7, lr}
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006d4c:	2000      	movs	r0, #0
 8006d4e:	f7ff ffcf 	bl	8006cf0 <_Z41__static_initialization_and_destruction_0ii>
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEELb1EEC1Ev>:
      _Hashtable_ebo_helper() = default;
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b082      	sub	sp, #8
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 f889 	bl	8006e74 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEC1Ev>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	4618      	mov	r0, r3
 8006d66:	3708      	adds	r7, #8
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEELb1EED1Ev>:
    struct _Hashtable_ebo_helper<_Nm, _Tp, true>
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b082      	sub	sp, #8
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f000 f889 	bl	8006e8c <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEED1Ev>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3708      	adds	r7, #8
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEEC1Ev>:
      _Hashtable_alloc() = default;
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b082      	sub	sp, #8
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f7ff ffe1 	bl	8006d54 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEELb1EEC1Ev>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	4618      	mov	r0, r3
 8006d96:	3708      	adds	r7, #8
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEED1Ev>:
    struct _Hashtable_alloc : private _Hashtable_ebo_helper<0, _NodeAlloc>
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b082      	sub	sp, #8
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f7ff ffe1 	bl	8006d6c <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEELb1EED1Ev>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	4618      	mov	r0, r3
 8006dae:	3708      	adds	r7, #8
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEEC1Ev>:
      _Hashtable() = default;
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b082      	sub	sp, #8
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f7ff ffe1 	bl	8006d84 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEEC1Ev>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f103 0218 	add.w	r2, r3, #24
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	601a      	str	r2, [r3, #0]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	605a      	str	r2, [r3, #4]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	3308      	adds	r3, #8
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f7f9 ff11 	bl	8000bfe <_ZNSt8__detail15_Hash_node_baseC1Ev>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2200      	movs	r2, #0
 8006de0:	60da      	str	r2, [r3, #12]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	3310      	adds	r3, #16
 8006de6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006dea:	4618      	mov	r0, r3
 8006dec:	f7ff fb11 	bl	8006412 <_ZNSt8__detail20_Prime_rehash_policyC1Ef>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	619a      	str	r2, [r3, #24]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3708      	adds	r7, #8
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <_ZNSt13unordered_mapIP17TIM_HandleTypeDefSt8functionIFvvEESt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_S4_EEEC1Ev>:
      unordered_map() = default;
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f7ff ffd2 	bl	8006db4 <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEEC1Ev>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	4618      	mov	r0, r3
 8006e14:	3708      	adds	r7, #8
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}
	...

08006e1c <HAL_TIM_PeriodElapsedCallback>:
#ifdef HAL_TIM_MODULE_ENABLED

std::unordered_map<TIM_HandleTypeDef *, std::function<void()>>
    tutrc_harurobo_lib::Timer::timer_callbacks_;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  auto itr = tutrc_harurobo_lib::Timer::timer_callbacks_.find(htim);
 8006e24:	1d3b      	adds	r3, r7, #4
 8006e26:	4619      	mov	r1, r3
 8006e28:	4811      	ldr	r0, [pc, #68]	; (8006e70 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8006e2a:	f000 f84d 	bl	8006ec8 <_ZNSt13unordered_mapIP17TIM_HandleTypeDefSt8functionIFvvEESt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_S4_EEE4findERSA_>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	60bb      	str	r3, [r7, #8]
  if (itr != tutrc_harurobo_lib::Timer::timer_callbacks_.end()) {
 8006e32:	480f      	ldr	r0, [pc, #60]	; (8006e70 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8006e34:	f000 f857 	bl	8006ee6 <_ZNSt13unordered_mapIP17TIM_HandleTypeDefSt8functionIFvvEESt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_S4_EEE3endEv>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	60fb      	str	r3, [r7, #12]
 8006e3c:	f107 020c 	add.w	r2, r7, #12
 8006e40:	f107 0308 	add.w	r3, r7, #8
 8006e44:	4611      	mov	r1, r2
 8006e46:	4618      	mov	r0, r3
 8006e48:	f000 f85a 	bl	8006f00 <_ZNSt8__detailneISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEbRKNS_19_Node_iterator_baseIT_XT0_EEESD_>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d009      	beq.n	8006e66 <HAL_TIM_PeriodElapsedCallback+0x4a>
    itr->second();
 8006e52:	f107 0308 	add.w	r3, r7, #8
 8006e56:	4618      	mov	r0, r3
 8006e58:	f7fb fe56 	bl	8002b08 <_ZNKSt8__detail14_Node_iteratorISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0ELb0EEptEv>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	3304      	adds	r3, #4
 8006e60:	4618      	mov	r0, r3
 8006e62:	f7ff fd74 	bl	800694e <_ZNKSt8functionIFvvEEclEv>
  }
}
 8006e66:	bf00      	nop
 8006e68:	3710      	adds	r7, #16
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop
 8006e70:	240009c8 	.word	0x240009c8

08006e74 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b082      	sub	sp, #8
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 f853 	bl	8006f28 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEC1Ev>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4618      	mov	r0, r3
 8006e86:	3708      	adds	r7, #8
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b082      	sub	sp, #8
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 f852 	bl	8006f3e <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEED1Ev>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3708      	adds	r7, #8
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEED1Ev>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b082      	sub	sp, #8
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
      clear();
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 f851 	bl	8006f54 <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE5clearEv>
      _M_deallocate_buckets();
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f7fd f8ec 	bl	8004090 <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>
    }
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f7ff ff6f 	bl	8006d9c <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEED1Ev>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3708      	adds	r7, #8
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <_ZNSt13unordered_mapIP17TIM_HandleTypeDefSt8functionIFvvEESt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_S4_EEE4findERSA_>:
      find(const key_type& __x)
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	6039      	str	r1, [r7, #0]
      { return _M_h.find(__x); }
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6839      	ldr	r1, [r7, #0]
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f000 f85c 	bl	8006f94 <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE4findERS3_>
 8006edc:	4603      	mov	r3, r0
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3708      	adds	r7, #8
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}

08006ee6 <_ZNSt13unordered_mapIP17TIM_HandleTypeDefSt8functionIFvvEESt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_S4_EEE3endEv>:
      end() noexcept
 8006ee6:	b580      	push	{r7, lr}
 8006ee8:	b082      	sub	sp, #8
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
      { return _M_h.end(); }
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f000 f87a 	bl	8006fea <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE3endEv>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3708      	adds	r7, #8
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <_ZNSt8__detailneISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEbRKNS_19_Node_iterator_baseIT_XT0_EEESD_>:
    operator!=(const _Node_iterator_base<_Value, _Cache_hash_code>& __x,
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
    { return __x._M_cur != __y._M_cur; }
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	429a      	cmp	r2, r3
 8006f14:	bf14      	ite	ne
 8006f16:	2301      	movne	r3, #1
 8006f18:	2300      	moveq	r3, #0
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	370c      	adds	r7, #12
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr

08006f28 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	4618      	mov	r0, r3
 8006f34:	370c      	adds	r7, #12
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr

08006f3e <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8006f3e:	b480      	push	{r7}
 8006f40:	b083      	sub	sp, #12
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	4618      	mov	r0, r3
 8006f4a:	370c      	adds	r7, #12
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr

08006f54 <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE5clearEv>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b082      	sub	sp, #8
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
      this->_M_deallocate_nodes(_M_begin());
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f7fd f88b 	bl	8004078 <_ZNKSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 8006f62:	4603      	mov	r3, r0
 8006f64:	4619      	mov	r1, r3
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 f84e 	bl	8007008 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEE19_M_deallocate_nodesEPSA_>
      __builtin_memset(_M_buckets, 0, _M_bucket_count * sizeof(__bucket_type));
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	4610      	mov	r0, r2
 8006f78:	461a      	mov	r2, r3
 8006f7a:	2100      	movs	r1, #0
 8006f7c:	f00a fe7a 	bl	8011c74 <memset>
      _M_element_count = 0;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	60da      	str	r2, [r3, #12]
      _M_before_begin._M_nxt = nullptr;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	609a      	str	r2, [r3, #8]
    }
 8006f8c:	bf00      	nop
 8006f8e:	3708      	adds	r7, #8
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE4findERS3_>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b086      	sub	sp, #24
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
      __hash_code __code = this->_M_hash_code(__k);
 8006f9e:	6839      	ldr	r1, [r7, #0]
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f7fb fcd7 	bl	8002954 <_ZNKSt8__detail15_Hash_code_baseIP17TIM_HandleTypeDefSt4pairIKS2_St8functionIFvvEEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS4_>
 8006fa6:	6178      	str	r0, [r7, #20]
      std::size_t __bkt = _M_bucket_index(__k, __code);
 8006fa8:	697a      	ldr	r2, [r7, #20]
 8006faa:	6839      	ldr	r1, [r7, #0]
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f7fb fce5 	bl	800297c <_ZNKSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERS3_j>
 8006fb2:	6138      	str	r0, [r7, #16]
      __node_type* __p = _M_find_node(__bkt, __k, __code);
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	683a      	ldr	r2, [r7, #0]
 8006fb8:	6939      	ldr	r1, [r7, #16]
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f7fb fcf0 	bl	80029a0 <_ZNKSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS3_j>
 8006fc0:	60f8      	str	r0, [r7, #12]
      return __p ? iterator(__p) : end();
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d006      	beq.n	8006fd6 <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE4findERS3_+0x42>
 8006fc8:	f107 0308 	add.w	r3, r7, #8
 8006fcc:	68f9      	ldr	r1, [r7, #12]
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f7fc f9fc 	bl	80033cc <_ZNSt8__detail14_Node_iteratorISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0ELb0EEC1EPNS_10_Hash_nodeIS8_Lb0EEE>
 8006fd4:	e004      	b.n	8006fe0 <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE4findERS3_+0x4c>
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 f807 	bl	8006fea <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE3endEv>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	60bb      	str	r3, [r7, #8]
 8006fe0:	68bb      	ldr	r3, [r7, #8]
    }
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3718      	adds	r7, #24
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}

08006fea <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEE3endEv>:
      end() noexcept
 8006fea:	b580      	push	{r7, lr}
 8006fec:	b084      	sub	sp, #16
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	6078      	str	r0, [r7, #4]
      { return iterator(nullptr); }
 8006ff2:	f107 030c 	add.w	r3, r7, #12
 8006ff6:	2100      	movs	r1, #0
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f7fc f9e7 	bl	80033cc <_ZNSt8__detail14_Node_iteratorISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0ELb0EEC1EPNS_10_Hash_nodeIS8_Lb0EEE>
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	4618      	mov	r0, r3
 8007002:	3710      	adds	r7, #16
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEE19_M_deallocate_nodesEPSA_>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_nodes(__node_type* __n)
 8007008:	b580      	push	{r7, lr}
 800700a:	b084      	sub	sp, #16
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	6039      	str	r1, [r7, #0]
      while (__n)
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d00a      	beq.n	800702e <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEE19_M_deallocate_nodesEPSA_+0x26>
	  __node_type* __tmp = __n;
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	60fb      	str	r3, [r7, #12]
	  __n = __n->_M_next();
 800701c:	6838      	ldr	r0, [r7, #0]
 800701e:	f7fc fbf3 	bl	8003808 <_ZNKSt8__detail10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EE7_M_nextEv>
 8007022:	6038      	str	r0, [r7, #0]
	  _M_deallocate_node(__tmp);
 8007024:	68f9      	ldr	r1, [r7, #12]
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f7fc f955 	bl	80032d6 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEE18_M_deallocate_nodeEPSA_>
      while (__n)
 800702c:	e7f1      	b.n	8007012 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP17TIM_HandleTypeDefSt8functionIFvvEEELb0EEEEE19_M_deallocate_nodesEPSA_+0xa>
    }
 800702e:	bf00      	nop
 8007030:	3710      	adds	r7, #16
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}

08007036 <_ZNSt13unordered_mapIP17TIM_HandleTypeDefSt8functionIFvvEESt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_S4_EEED1Ev>:
    class unordered_map
 8007036:	b580      	push	{r7, lr}
 8007038:	b082      	sub	sp, #8
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	4618      	mov	r0, r3
 8007042:	f7ff ff2f 	bl	8006ea4 <_ZNSt10_HashtableIP17TIM_HandleTypeDefSt4pairIKS1_St8functionIFvvEEESaIS7_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS9_18_Mod_range_hashingENS9_20_Default_ranged_hashENS9_20_Prime_rehash_policyENS9_17_Hashtable_traitsILb0ELb0ELb1EEEED1Ev>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	4618      	mov	r0, r3
 800704a:	3708      	adds	r7, #8
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}

08007050 <_Z41__static_initialization_and_destruction_0ii>:
 8007050:	b580      	push	{r7, lr}
 8007052:	b082      	sub	sp, #8
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2b01      	cmp	r3, #1
 800705e:	d107      	bne.n	8007070 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007066:	4293      	cmp	r3, r2
 8007068:	d102      	bne.n	8007070 <_Z41__static_initialization_and_destruction_0ii+0x20>
    tutrc_harurobo_lib::Timer::timer_callbacks_;
 800706a:	4809      	ldr	r0, [pc, #36]	; (8007090 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800706c:	f7ff fec8 	bl	8006e00 <_ZNSt13unordered_mapIP17TIM_HandleTypeDefSt8functionIFvvEESt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_S4_EEEC1Ev>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d107      	bne.n	8007086 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800707c:	4293      	cmp	r3, r2
 800707e:	d102      	bne.n	8007086 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8007080:	4803      	ldr	r0, [pc, #12]	; (8007090 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8007082:	f7ff ffd8 	bl	8007036 <_ZNSt13unordered_mapIP17TIM_HandleTypeDefSt8functionIFvvEESt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_S4_EEED1Ev>
}
 8007086:	bf00      	nop
 8007088:	3708      	adds	r7, #8
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
 800708e:	bf00      	nop
 8007090:	240009c8 	.word	0x240009c8

08007094 <_GLOBAL__sub_I__ZN18tutrc_harurobo_lib5Timer16timer_callbacks_E>:
 8007094:	b580      	push	{r7, lr}
 8007096:	af00      	add	r7, sp, #0
 8007098:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800709c:	2001      	movs	r0, #1
 800709e:	f7ff ffd7 	bl	8007050 <_Z41__static_initialization_and_destruction_0ii>
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <_GLOBAL__sub_D__ZN18tutrc_harurobo_lib5Timer16timer_callbacks_E>:
 80070a4:	b580      	push	{r7, lr}
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80070ac:	2000      	movs	r0, #0
 80070ae:	f7ff ffcf 	bl	8007050 <_Z41__static_initialization_and_destruction_0ii>
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80070b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80070ec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80070b8:	f7ff f912 	bl	80062e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80070bc:	480c      	ldr	r0, [pc, #48]	; (80070f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80070be:	490d      	ldr	r1, [pc, #52]	; (80070f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80070c0:	4a0d      	ldr	r2, [pc, #52]	; (80070f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80070c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80070c4:	e002      	b.n	80070cc <LoopCopyDataInit>

080070c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80070c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80070c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80070ca:	3304      	adds	r3, #4

080070cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80070cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80070ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80070d0:	d3f9      	bcc.n	80070c6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80070d2:	4a0a      	ldr	r2, [pc, #40]	; (80070fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80070d4:	4c0a      	ldr	r4, [pc, #40]	; (8007100 <LoopFillZerobss+0x22>)
  movs r3, #0
 80070d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80070d8:	e001      	b.n	80070de <LoopFillZerobss>

080070da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80070da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80070dc:	3204      	adds	r2, #4

080070de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80070de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80070e0:	d3fb      	bcc.n	80070da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80070e2:	f00a fd85 	bl	8011bf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80070e6:	f7fd fc8d 	bl	8004a04 <main>
  bx  lr
 80070ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80070ec:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80070f0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80070f4:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 80070f8:	08015004 	.word	0x08015004
  ldr r2, =_sbss
 80070fc:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 8007100:	240009fc 	.word	0x240009fc

08007104 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007104:	e7fe      	b.n	8007104 <ADC3_IRQHandler>
	...

08007108 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b082      	sub	sp, #8
 800710c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800710e:	2003      	movs	r0, #3
 8007110:	f000 f98c 	bl	800742c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007114:	f005 f9ec 	bl	800c4f0 <HAL_RCC_GetSysClockFreq>
 8007118:	4602      	mov	r2, r0
 800711a:	4b15      	ldr	r3, [pc, #84]	; (8007170 <HAL_Init+0x68>)
 800711c:	699b      	ldr	r3, [r3, #24]
 800711e:	0a1b      	lsrs	r3, r3, #8
 8007120:	f003 030f 	and.w	r3, r3, #15
 8007124:	4913      	ldr	r1, [pc, #76]	; (8007174 <HAL_Init+0x6c>)
 8007126:	5ccb      	ldrb	r3, [r1, r3]
 8007128:	f003 031f 	and.w	r3, r3, #31
 800712c:	fa22 f303 	lsr.w	r3, r2, r3
 8007130:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007132:	4b0f      	ldr	r3, [pc, #60]	; (8007170 <HAL_Init+0x68>)
 8007134:	699b      	ldr	r3, [r3, #24]
 8007136:	f003 030f 	and.w	r3, r3, #15
 800713a:	4a0e      	ldr	r2, [pc, #56]	; (8007174 <HAL_Init+0x6c>)
 800713c:	5cd3      	ldrb	r3, [r2, r3]
 800713e:	f003 031f 	and.w	r3, r3, #31
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	fa22 f303 	lsr.w	r3, r2, r3
 8007148:	4a0b      	ldr	r2, [pc, #44]	; (8007178 <HAL_Init+0x70>)
 800714a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800714c:	4a0b      	ldr	r2, [pc, #44]	; (800717c <HAL_Init+0x74>)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007152:	200f      	movs	r0, #15
 8007154:	f000 f814 	bl	8007180 <HAL_InitTick>
 8007158:	4603      	mov	r3, r0
 800715a:	2b00      	cmp	r3, #0
 800715c:	d001      	beq.n	8007162 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	e002      	b.n	8007168 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8007162:	f7fe faa5 	bl	80056b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007166:	2300      	movs	r3, #0
}
 8007168:	4618      	mov	r0, r3
 800716a:	3708      	adds	r7, #8
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}
 8007170:	58024400 	.word	0x58024400
 8007174:	080145c4 	.word	0x080145c4
 8007178:	24000004 	.word	0x24000004
 800717c:	24000000 	.word	0x24000000

08007180 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b082      	sub	sp, #8
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8007188:	4b15      	ldr	r3, [pc, #84]	; (80071e0 <HAL_InitTick+0x60>)
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d101      	bne.n	8007194 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8007190:	2301      	movs	r3, #1
 8007192:	e021      	b.n	80071d8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8007194:	4b13      	ldr	r3, [pc, #76]	; (80071e4 <HAL_InitTick+0x64>)
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	4b11      	ldr	r3, [pc, #68]	; (80071e0 <HAL_InitTick+0x60>)
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	4619      	mov	r1, r3
 800719e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80071a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80071a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80071aa:	4618      	mov	r0, r3
 80071ac:	f000 f971 	bl	8007492 <HAL_SYSTICK_Config>
 80071b0:	4603      	mov	r3, r0
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d001      	beq.n	80071ba <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80071b6:	2301      	movs	r3, #1
 80071b8:	e00e      	b.n	80071d8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2b0f      	cmp	r3, #15
 80071be:	d80a      	bhi.n	80071d6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80071c0:	2200      	movs	r2, #0
 80071c2:	6879      	ldr	r1, [r7, #4]
 80071c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80071c8:	f000 f93b 	bl	8007442 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80071cc:	4a06      	ldr	r2, [pc, #24]	; (80071e8 <HAL_InitTick+0x68>)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80071d2:	2300      	movs	r3, #0
 80071d4:	e000      	b.n	80071d8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3708      	adds	r7, #8
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}
 80071e0:	2400000c 	.word	0x2400000c
 80071e4:	24000000 	.word	0x24000000
 80071e8:	24000008 	.word	0x24000008

080071ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80071ec:	b480      	push	{r7}
 80071ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80071f0:	4b06      	ldr	r3, [pc, #24]	; (800720c <HAL_IncTick+0x20>)
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	461a      	mov	r2, r3
 80071f6:	4b06      	ldr	r3, [pc, #24]	; (8007210 <HAL_IncTick+0x24>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4413      	add	r3, r2
 80071fc:	4a04      	ldr	r2, [pc, #16]	; (8007210 <HAL_IncTick+0x24>)
 80071fe:	6013      	str	r3, [r2, #0]
}
 8007200:	bf00      	nop
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr
 800720a:	bf00      	nop
 800720c:	2400000c 	.word	0x2400000c
 8007210:	240009e4 	.word	0x240009e4

08007214 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007214:	b480      	push	{r7}
 8007216:	af00      	add	r7, sp, #0
  return uwTick;
 8007218:	4b03      	ldr	r3, [pc, #12]	; (8007228 <HAL_GetTick+0x14>)
 800721a:	681b      	ldr	r3, [r3, #0]
}
 800721c:	4618      	mov	r0, r3
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr
 8007226:	bf00      	nop
 8007228:	240009e4 	.word	0x240009e4

0800722c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b084      	sub	sp, #16
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007234:	f7ff ffee 	bl	8007214 <HAL_GetTick>
 8007238:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007244:	d005      	beq.n	8007252 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007246:	4b0a      	ldr	r3, [pc, #40]	; (8007270 <HAL_Delay+0x44>)
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	461a      	mov	r2, r3
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	4413      	add	r3, r2
 8007250:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007252:	bf00      	nop
 8007254:	f7ff ffde 	bl	8007214 <HAL_GetTick>
 8007258:	4602      	mov	r2, r0
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	1ad3      	subs	r3, r2, r3
 800725e:	68fa      	ldr	r2, [r7, #12]
 8007260:	429a      	cmp	r2, r3
 8007262:	d8f7      	bhi.n	8007254 <HAL_Delay+0x28>
  {
  }
}
 8007264:	bf00      	nop
 8007266:	bf00      	nop
 8007268:	3710      	adds	r7, #16
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
 800726e:	bf00      	nop
 8007270:	2400000c 	.word	0x2400000c

08007274 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8007274:	b480      	push	{r7}
 8007276:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8007278:	4b03      	ldr	r3, [pc, #12]	; (8007288 <HAL_GetREVID+0x14>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	0c1b      	lsrs	r3, r3, #16
}
 800727e:	4618      	mov	r0, r3
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr
 8007288:	5c001000 	.word	0x5c001000

0800728c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800728c:	b480      	push	{r7}
 800728e:	b085      	sub	sp, #20
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f003 0307 	and.w	r3, r3, #7
 800729a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800729c:	4b0b      	ldr	r3, [pc, #44]	; (80072cc <__NVIC_SetPriorityGrouping+0x40>)
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80072a2:	68ba      	ldr	r2, [r7, #8]
 80072a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80072a8:	4013      	ands	r3, r2
 80072aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80072b4:	4b06      	ldr	r3, [pc, #24]	; (80072d0 <__NVIC_SetPriorityGrouping+0x44>)
 80072b6:	4313      	orrs	r3, r2
 80072b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80072ba:	4a04      	ldr	r2, [pc, #16]	; (80072cc <__NVIC_SetPriorityGrouping+0x40>)
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	60d3      	str	r3, [r2, #12]
}
 80072c0:	bf00      	nop
 80072c2:	3714      	adds	r7, #20
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr
 80072cc:	e000ed00 	.word	0xe000ed00
 80072d0:	05fa0000 	.word	0x05fa0000

080072d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80072d4:	b480      	push	{r7}
 80072d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80072d8:	4b04      	ldr	r3, [pc, #16]	; (80072ec <__NVIC_GetPriorityGrouping+0x18>)
 80072da:	68db      	ldr	r3, [r3, #12]
 80072dc:	0a1b      	lsrs	r3, r3, #8
 80072de:	f003 0307 	and.w	r3, r3, #7
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr
 80072ec:	e000ed00 	.word	0xe000ed00

080072f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b083      	sub	sp, #12
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	4603      	mov	r3, r0
 80072f8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80072fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	db0b      	blt.n	800731a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007302:	88fb      	ldrh	r3, [r7, #6]
 8007304:	f003 021f 	and.w	r2, r3, #31
 8007308:	4907      	ldr	r1, [pc, #28]	; (8007328 <__NVIC_EnableIRQ+0x38>)
 800730a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800730e:	095b      	lsrs	r3, r3, #5
 8007310:	2001      	movs	r0, #1
 8007312:	fa00 f202 	lsl.w	r2, r0, r2
 8007316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800731a:	bf00      	nop
 800731c:	370c      	adds	r7, #12
 800731e:	46bd      	mov	sp, r7
 8007320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007324:	4770      	bx	lr
 8007326:	bf00      	nop
 8007328:	e000e100 	.word	0xe000e100

0800732c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800732c:	b480      	push	{r7}
 800732e:	b083      	sub	sp, #12
 8007330:	af00      	add	r7, sp, #0
 8007332:	4603      	mov	r3, r0
 8007334:	6039      	str	r1, [r7, #0]
 8007336:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007338:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800733c:	2b00      	cmp	r3, #0
 800733e:	db0a      	blt.n	8007356 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	b2da      	uxtb	r2, r3
 8007344:	490c      	ldr	r1, [pc, #48]	; (8007378 <__NVIC_SetPriority+0x4c>)
 8007346:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800734a:	0112      	lsls	r2, r2, #4
 800734c:	b2d2      	uxtb	r2, r2
 800734e:	440b      	add	r3, r1
 8007350:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007354:	e00a      	b.n	800736c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	b2da      	uxtb	r2, r3
 800735a:	4908      	ldr	r1, [pc, #32]	; (800737c <__NVIC_SetPriority+0x50>)
 800735c:	88fb      	ldrh	r3, [r7, #6]
 800735e:	f003 030f 	and.w	r3, r3, #15
 8007362:	3b04      	subs	r3, #4
 8007364:	0112      	lsls	r2, r2, #4
 8007366:	b2d2      	uxtb	r2, r2
 8007368:	440b      	add	r3, r1
 800736a:	761a      	strb	r2, [r3, #24]
}
 800736c:	bf00      	nop
 800736e:	370c      	adds	r7, #12
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr
 8007378:	e000e100 	.word	0xe000e100
 800737c:	e000ed00 	.word	0xe000ed00

08007380 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007380:	b480      	push	{r7}
 8007382:	b089      	sub	sp, #36	; 0x24
 8007384:	af00      	add	r7, sp, #0
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	60b9      	str	r1, [r7, #8]
 800738a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f003 0307 	and.w	r3, r3, #7
 8007392:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007394:	69fb      	ldr	r3, [r7, #28]
 8007396:	f1c3 0307 	rsb	r3, r3, #7
 800739a:	2b04      	cmp	r3, #4
 800739c:	bf28      	it	cs
 800739e:	2304      	movcs	r3, #4
 80073a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80073a2:	69fb      	ldr	r3, [r7, #28]
 80073a4:	3304      	adds	r3, #4
 80073a6:	2b06      	cmp	r3, #6
 80073a8:	d902      	bls.n	80073b0 <NVIC_EncodePriority+0x30>
 80073aa:	69fb      	ldr	r3, [r7, #28]
 80073ac:	3b03      	subs	r3, #3
 80073ae:	e000      	b.n	80073b2 <NVIC_EncodePriority+0x32>
 80073b0:	2300      	movs	r3, #0
 80073b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80073b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80073b8:	69bb      	ldr	r3, [r7, #24]
 80073ba:	fa02 f303 	lsl.w	r3, r2, r3
 80073be:	43da      	mvns	r2, r3
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	401a      	ands	r2, r3
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80073c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	fa01 f303 	lsl.w	r3, r1, r3
 80073d2:	43d9      	mvns	r1, r3
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80073d8:	4313      	orrs	r3, r2
         );
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3724      	adds	r7, #36	; 0x24
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr
	...

080073e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b082      	sub	sp, #8
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	3b01      	subs	r3, #1
 80073f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80073f8:	d301      	bcc.n	80073fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80073fa:	2301      	movs	r3, #1
 80073fc:	e00f      	b.n	800741e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80073fe:	4a0a      	ldr	r2, [pc, #40]	; (8007428 <SysTick_Config+0x40>)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	3b01      	subs	r3, #1
 8007404:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007406:	210f      	movs	r1, #15
 8007408:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800740c:	f7ff ff8e 	bl	800732c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007410:	4b05      	ldr	r3, [pc, #20]	; (8007428 <SysTick_Config+0x40>)
 8007412:	2200      	movs	r2, #0
 8007414:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007416:	4b04      	ldr	r3, [pc, #16]	; (8007428 <SysTick_Config+0x40>)
 8007418:	2207      	movs	r2, #7
 800741a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800741c:	2300      	movs	r3, #0
}
 800741e:	4618      	mov	r0, r3
 8007420:	3708      	adds	r7, #8
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
 8007426:	bf00      	nop
 8007428:	e000e010 	.word	0xe000e010

0800742c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b082      	sub	sp, #8
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f7ff ff29 	bl	800728c <__NVIC_SetPriorityGrouping>
}
 800743a:	bf00      	nop
 800743c:	3708      	adds	r7, #8
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}

08007442 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007442:	b580      	push	{r7, lr}
 8007444:	b086      	sub	sp, #24
 8007446:	af00      	add	r7, sp, #0
 8007448:	4603      	mov	r3, r0
 800744a:	60b9      	str	r1, [r7, #8]
 800744c:	607a      	str	r2, [r7, #4]
 800744e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007450:	f7ff ff40 	bl	80072d4 <__NVIC_GetPriorityGrouping>
 8007454:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	68b9      	ldr	r1, [r7, #8]
 800745a:	6978      	ldr	r0, [r7, #20]
 800745c:	f7ff ff90 	bl	8007380 <NVIC_EncodePriority>
 8007460:	4602      	mov	r2, r0
 8007462:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007466:	4611      	mov	r1, r2
 8007468:	4618      	mov	r0, r3
 800746a:	f7ff ff5f 	bl	800732c <__NVIC_SetPriority>
}
 800746e:	bf00      	nop
 8007470:	3718      	adds	r7, #24
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}

08007476 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007476:	b580      	push	{r7, lr}
 8007478:	b082      	sub	sp, #8
 800747a:	af00      	add	r7, sp, #0
 800747c:	4603      	mov	r3, r0
 800747e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007480:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007484:	4618      	mov	r0, r3
 8007486:	f7ff ff33 	bl	80072f0 <__NVIC_EnableIRQ>
}
 800748a:	bf00      	nop
 800748c:	3708      	adds	r7, #8
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}

08007492 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007492:	b580      	push	{r7, lr}
 8007494:	b082      	sub	sp, #8
 8007496:	af00      	add	r7, sp, #0
 8007498:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f7ff ffa4 	bl	80073e8 <SysTick_Config>
 80074a0:	4603      	mov	r3, r0
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3708      	adds	r7, #8
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}
	...

080074ac <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b086      	sub	sp, #24
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80074b4:	f7ff feae 	bl	8007214 <HAL_GetTick>
 80074b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d101      	bne.n	80074c4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	e316      	b.n	8007af2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a66      	ldr	r2, [pc, #408]	; (8007664 <HAL_DMA_Init+0x1b8>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d04a      	beq.n	8007564 <HAL_DMA_Init+0xb8>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a65      	ldr	r2, [pc, #404]	; (8007668 <HAL_DMA_Init+0x1bc>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d045      	beq.n	8007564 <HAL_DMA_Init+0xb8>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a63      	ldr	r2, [pc, #396]	; (800766c <HAL_DMA_Init+0x1c0>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d040      	beq.n	8007564 <HAL_DMA_Init+0xb8>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a62      	ldr	r2, [pc, #392]	; (8007670 <HAL_DMA_Init+0x1c4>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d03b      	beq.n	8007564 <HAL_DMA_Init+0xb8>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a60      	ldr	r2, [pc, #384]	; (8007674 <HAL_DMA_Init+0x1c8>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d036      	beq.n	8007564 <HAL_DMA_Init+0xb8>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a5f      	ldr	r2, [pc, #380]	; (8007678 <HAL_DMA_Init+0x1cc>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d031      	beq.n	8007564 <HAL_DMA_Init+0xb8>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a5d      	ldr	r2, [pc, #372]	; (800767c <HAL_DMA_Init+0x1d0>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d02c      	beq.n	8007564 <HAL_DMA_Init+0xb8>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a5c      	ldr	r2, [pc, #368]	; (8007680 <HAL_DMA_Init+0x1d4>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d027      	beq.n	8007564 <HAL_DMA_Init+0xb8>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a5a      	ldr	r2, [pc, #360]	; (8007684 <HAL_DMA_Init+0x1d8>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d022      	beq.n	8007564 <HAL_DMA_Init+0xb8>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a59      	ldr	r2, [pc, #356]	; (8007688 <HAL_DMA_Init+0x1dc>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d01d      	beq.n	8007564 <HAL_DMA_Init+0xb8>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a57      	ldr	r2, [pc, #348]	; (800768c <HAL_DMA_Init+0x1e0>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d018      	beq.n	8007564 <HAL_DMA_Init+0xb8>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a56      	ldr	r2, [pc, #344]	; (8007690 <HAL_DMA_Init+0x1e4>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d013      	beq.n	8007564 <HAL_DMA_Init+0xb8>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a54      	ldr	r2, [pc, #336]	; (8007694 <HAL_DMA_Init+0x1e8>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d00e      	beq.n	8007564 <HAL_DMA_Init+0xb8>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a53      	ldr	r2, [pc, #332]	; (8007698 <HAL_DMA_Init+0x1ec>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d009      	beq.n	8007564 <HAL_DMA_Init+0xb8>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a51      	ldr	r2, [pc, #324]	; (800769c <HAL_DMA_Init+0x1f0>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d004      	beq.n	8007564 <HAL_DMA_Init+0xb8>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a50      	ldr	r2, [pc, #320]	; (80076a0 <HAL_DMA_Init+0x1f4>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d101      	bne.n	8007568 <HAL_DMA_Init+0xbc>
 8007564:	2301      	movs	r3, #1
 8007566:	e000      	b.n	800756a <HAL_DMA_Init+0xbe>
 8007568:	2300      	movs	r3, #0
 800756a:	2b00      	cmp	r3, #0
 800756c:	f000 813b 	beq.w	80077e6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2202      	movs	r2, #2
 8007574:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2200      	movs	r2, #0
 800757c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a37      	ldr	r2, [pc, #220]	; (8007664 <HAL_DMA_Init+0x1b8>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d04a      	beq.n	8007620 <HAL_DMA_Init+0x174>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a36      	ldr	r2, [pc, #216]	; (8007668 <HAL_DMA_Init+0x1bc>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d045      	beq.n	8007620 <HAL_DMA_Init+0x174>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a34      	ldr	r2, [pc, #208]	; (800766c <HAL_DMA_Init+0x1c0>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d040      	beq.n	8007620 <HAL_DMA_Init+0x174>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a33      	ldr	r2, [pc, #204]	; (8007670 <HAL_DMA_Init+0x1c4>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d03b      	beq.n	8007620 <HAL_DMA_Init+0x174>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a31      	ldr	r2, [pc, #196]	; (8007674 <HAL_DMA_Init+0x1c8>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d036      	beq.n	8007620 <HAL_DMA_Init+0x174>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a30      	ldr	r2, [pc, #192]	; (8007678 <HAL_DMA_Init+0x1cc>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d031      	beq.n	8007620 <HAL_DMA_Init+0x174>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a2e      	ldr	r2, [pc, #184]	; (800767c <HAL_DMA_Init+0x1d0>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d02c      	beq.n	8007620 <HAL_DMA_Init+0x174>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a2d      	ldr	r2, [pc, #180]	; (8007680 <HAL_DMA_Init+0x1d4>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d027      	beq.n	8007620 <HAL_DMA_Init+0x174>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a2b      	ldr	r2, [pc, #172]	; (8007684 <HAL_DMA_Init+0x1d8>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d022      	beq.n	8007620 <HAL_DMA_Init+0x174>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a2a      	ldr	r2, [pc, #168]	; (8007688 <HAL_DMA_Init+0x1dc>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d01d      	beq.n	8007620 <HAL_DMA_Init+0x174>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a28      	ldr	r2, [pc, #160]	; (800768c <HAL_DMA_Init+0x1e0>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d018      	beq.n	8007620 <HAL_DMA_Init+0x174>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a27      	ldr	r2, [pc, #156]	; (8007690 <HAL_DMA_Init+0x1e4>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d013      	beq.n	8007620 <HAL_DMA_Init+0x174>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a25      	ldr	r2, [pc, #148]	; (8007694 <HAL_DMA_Init+0x1e8>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d00e      	beq.n	8007620 <HAL_DMA_Init+0x174>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a24      	ldr	r2, [pc, #144]	; (8007698 <HAL_DMA_Init+0x1ec>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d009      	beq.n	8007620 <HAL_DMA_Init+0x174>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a22      	ldr	r2, [pc, #136]	; (800769c <HAL_DMA_Init+0x1f0>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d004      	beq.n	8007620 <HAL_DMA_Init+0x174>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a21      	ldr	r2, [pc, #132]	; (80076a0 <HAL_DMA_Init+0x1f4>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d108      	bne.n	8007632 <HAL_DMA_Init+0x186>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f022 0201 	bic.w	r2, r2, #1
 800762e:	601a      	str	r2, [r3, #0]
 8007630:	e007      	b.n	8007642 <HAL_DMA_Init+0x196>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f022 0201 	bic.w	r2, r2, #1
 8007640:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007642:	e02f      	b.n	80076a4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007644:	f7ff fde6 	bl	8007214 <HAL_GetTick>
 8007648:	4602      	mov	r2, r0
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	1ad3      	subs	r3, r2, r3
 800764e:	2b05      	cmp	r3, #5
 8007650:	d928      	bls.n	80076a4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2220      	movs	r2, #32
 8007656:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2203      	movs	r2, #3
 800765c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8007660:	2301      	movs	r3, #1
 8007662:	e246      	b.n	8007af2 <HAL_DMA_Init+0x646>
 8007664:	40020010 	.word	0x40020010
 8007668:	40020028 	.word	0x40020028
 800766c:	40020040 	.word	0x40020040
 8007670:	40020058 	.word	0x40020058
 8007674:	40020070 	.word	0x40020070
 8007678:	40020088 	.word	0x40020088
 800767c:	400200a0 	.word	0x400200a0
 8007680:	400200b8 	.word	0x400200b8
 8007684:	40020410 	.word	0x40020410
 8007688:	40020428 	.word	0x40020428
 800768c:	40020440 	.word	0x40020440
 8007690:	40020458 	.word	0x40020458
 8007694:	40020470 	.word	0x40020470
 8007698:	40020488 	.word	0x40020488
 800769c:	400204a0 	.word	0x400204a0
 80076a0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f003 0301 	and.w	r3, r3, #1
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d1c8      	bne.n	8007644 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80076ba:	697a      	ldr	r2, [r7, #20]
 80076bc:	4b83      	ldr	r3, [pc, #524]	; (80078cc <HAL_DMA_Init+0x420>)
 80076be:	4013      	ands	r3, r2
 80076c0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80076ca:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	691b      	ldr	r3, [r3, #16]
 80076d0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80076d6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	699b      	ldr	r3, [r3, #24]
 80076dc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80076e2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6a1b      	ldr	r3, [r3, #32]
 80076e8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80076ea:	697a      	ldr	r2, [r7, #20]
 80076ec:	4313      	orrs	r3, r2
 80076ee:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f4:	2b04      	cmp	r3, #4
 80076f6:	d107      	bne.n	8007708 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007700:	4313      	orrs	r3, r2
 8007702:	697a      	ldr	r2, [r7, #20]
 8007704:	4313      	orrs	r3, r2
 8007706:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8007708:	4b71      	ldr	r3, [pc, #452]	; (80078d0 <HAL_DMA_Init+0x424>)
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	4b71      	ldr	r3, [pc, #452]	; (80078d4 <HAL_DMA_Init+0x428>)
 800770e:	4013      	ands	r3, r2
 8007710:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007714:	d328      	bcc.n	8007768 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	2b28      	cmp	r3, #40	; 0x28
 800771c:	d903      	bls.n	8007726 <HAL_DMA_Init+0x27a>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	2b2e      	cmp	r3, #46	; 0x2e
 8007724:	d917      	bls.n	8007756 <HAL_DMA_Init+0x2aa>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	2b3e      	cmp	r3, #62	; 0x3e
 800772c:	d903      	bls.n	8007736 <HAL_DMA_Init+0x28a>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	2b42      	cmp	r3, #66	; 0x42
 8007734:	d90f      	bls.n	8007756 <HAL_DMA_Init+0x2aa>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	2b46      	cmp	r3, #70	; 0x46
 800773c:	d903      	bls.n	8007746 <HAL_DMA_Init+0x29a>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	2b48      	cmp	r3, #72	; 0x48
 8007744:	d907      	bls.n	8007756 <HAL_DMA_Init+0x2aa>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	2b4e      	cmp	r3, #78	; 0x4e
 800774c:	d905      	bls.n	800775a <HAL_DMA_Init+0x2ae>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	2b52      	cmp	r3, #82	; 0x52
 8007754:	d801      	bhi.n	800775a <HAL_DMA_Init+0x2ae>
 8007756:	2301      	movs	r3, #1
 8007758:	e000      	b.n	800775c <HAL_DMA_Init+0x2b0>
 800775a:	2300      	movs	r3, #0
 800775c:	2b00      	cmp	r3, #0
 800775e:	d003      	beq.n	8007768 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007766:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	697a      	ldr	r2, [r7, #20]
 800776e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	695b      	ldr	r3, [r3, #20]
 8007776:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	f023 0307 	bic.w	r3, r3, #7
 800777e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007784:	697a      	ldr	r2, [r7, #20]
 8007786:	4313      	orrs	r3, r2
 8007788:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800778e:	2b04      	cmp	r3, #4
 8007790:	d117      	bne.n	80077c2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007796:	697a      	ldr	r2, [r7, #20]
 8007798:	4313      	orrs	r3, r2
 800779a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d00e      	beq.n	80077c2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f002 fb33 	bl	8009e10 <DMA_CheckFifoParam>
 80077aa:	4603      	mov	r3, r0
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d008      	beq.n	80077c2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2240      	movs	r2, #64	; 0x40
 80077b4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2201      	movs	r2, #1
 80077ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80077be:	2301      	movs	r3, #1
 80077c0:	e197      	b.n	8007af2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	697a      	ldr	r2, [r7, #20]
 80077c8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f002 fa6e 	bl	8009cac <DMA_CalcBaseAndBitshift>
 80077d0:	4603      	mov	r3, r0
 80077d2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077d8:	f003 031f 	and.w	r3, r3, #31
 80077dc:	223f      	movs	r2, #63	; 0x3f
 80077de:	409a      	lsls	r2, r3
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	609a      	str	r2, [r3, #8]
 80077e4:	e0cd      	b.n	8007982 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a3b      	ldr	r2, [pc, #236]	; (80078d8 <HAL_DMA_Init+0x42c>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d022      	beq.n	8007836 <HAL_DMA_Init+0x38a>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a39      	ldr	r2, [pc, #228]	; (80078dc <HAL_DMA_Init+0x430>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d01d      	beq.n	8007836 <HAL_DMA_Init+0x38a>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a38      	ldr	r2, [pc, #224]	; (80078e0 <HAL_DMA_Init+0x434>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d018      	beq.n	8007836 <HAL_DMA_Init+0x38a>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a36      	ldr	r2, [pc, #216]	; (80078e4 <HAL_DMA_Init+0x438>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d013      	beq.n	8007836 <HAL_DMA_Init+0x38a>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a35      	ldr	r2, [pc, #212]	; (80078e8 <HAL_DMA_Init+0x43c>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d00e      	beq.n	8007836 <HAL_DMA_Init+0x38a>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a33      	ldr	r2, [pc, #204]	; (80078ec <HAL_DMA_Init+0x440>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d009      	beq.n	8007836 <HAL_DMA_Init+0x38a>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a32      	ldr	r2, [pc, #200]	; (80078f0 <HAL_DMA_Init+0x444>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d004      	beq.n	8007836 <HAL_DMA_Init+0x38a>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a30      	ldr	r2, [pc, #192]	; (80078f4 <HAL_DMA_Init+0x448>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d101      	bne.n	800783a <HAL_DMA_Init+0x38e>
 8007836:	2301      	movs	r3, #1
 8007838:	e000      	b.n	800783c <HAL_DMA_Init+0x390>
 800783a:	2300      	movs	r3, #0
 800783c:	2b00      	cmp	r3, #0
 800783e:	f000 8097 	beq.w	8007970 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a24      	ldr	r2, [pc, #144]	; (80078d8 <HAL_DMA_Init+0x42c>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d021      	beq.n	8007890 <HAL_DMA_Init+0x3e4>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a22      	ldr	r2, [pc, #136]	; (80078dc <HAL_DMA_Init+0x430>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d01c      	beq.n	8007890 <HAL_DMA_Init+0x3e4>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a21      	ldr	r2, [pc, #132]	; (80078e0 <HAL_DMA_Init+0x434>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d017      	beq.n	8007890 <HAL_DMA_Init+0x3e4>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a1f      	ldr	r2, [pc, #124]	; (80078e4 <HAL_DMA_Init+0x438>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d012      	beq.n	8007890 <HAL_DMA_Init+0x3e4>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a1e      	ldr	r2, [pc, #120]	; (80078e8 <HAL_DMA_Init+0x43c>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d00d      	beq.n	8007890 <HAL_DMA_Init+0x3e4>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a1c      	ldr	r2, [pc, #112]	; (80078ec <HAL_DMA_Init+0x440>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d008      	beq.n	8007890 <HAL_DMA_Init+0x3e4>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a1b      	ldr	r2, [pc, #108]	; (80078f0 <HAL_DMA_Init+0x444>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d003      	beq.n	8007890 <HAL_DMA_Init+0x3e4>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a19      	ldr	r2, [pc, #100]	; (80078f4 <HAL_DMA_Init+0x448>)
 800788e:	4293      	cmp	r3, r2
 8007890:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2202      	movs	r2, #2
 8007896:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80078aa:	697a      	ldr	r2, [r7, #20]
 80078ac:	4b12      	ldr	r3, [pc, #72]	; (80078f8 <HAL_DMA_Init+0x44c>)
 80078ae:	4013      	ands	r3, r2
 80078b0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	689b      	ldr	r3, [r3, #8]
 80078b6:	2b40      	cmp	r3, #64	; 0x40
 80078b8:	d020      	beq.n	80078fc <HAL_DMA_Init+0x450>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	689b      	ldr	r3, [r3, #8]
 80078be:	2b80      	cmp	r3, #128	; 0x80
 80078c0:	d102      	bne.n	80078c8 <HAL_DMA_Init+0x41c>
 80078c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80078c6:	e01a      	b.n	80078fe <HAL_DMA_Init+0x452>
 80078c8:	2300      	movs	r3, #0
 80078ca:	e018      	b.n	80078fe <HAL_DMA_Init+0x452>
 80078cc:	fe10803f 	.word	0xfe10803f
 80078d0:	5c001000 	.word	0x5c001000
 80078d4:	ffff0000 	.word	0xffff0000
 80078d8:	58025408 	.word	0x58025408
 80078dc:	5802541c 	.word	0x5802541c
 80078e0:	58025430 	.word	0x58025430
 80078e4:	58025444 	.word	0x58025444
 80078e8:	58025458 	.word	0x58025458
 80078ec:	5802546c 	.word	0x5802546c
 80078f0:	58025480 	.word	0x58025480
 80078f4:	58025494 	.word	0x58025494
 80078f8:	fffe000f 	.word	0xfffe000f
 80078fc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80078fe:	687a      	ldr	r2, [r7, #4]
 8007900:	68d2      	ldr	r2, [r2, #12]
 8007902:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007904:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	691b      	ldr	r3, [r3, #16]
 800790a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800790c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	695b      	ldr	r3, [r3, #20]
 8007912:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007914:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	699b      	ldr	r3, [r3, #24]
 800791a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800791c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	69db      	ldr	r3, [r3, #28]
 8007922:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007924:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6a1b      	ldr	r3, [r3, #32]
 800792a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800792c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800792e:	697a      	ldr	r2, [r7, #20]
 8007930:	4313      	orrs	r3, r2
 8007932:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	697a      	ldr	r2, [r7, #20]
 800793a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	461a      	mov	r2, r3
 8007942:	4b6e      	ldr	r3, [pc, #440]	; (8007afc <HAL_DMA_Init+0x650>)
 8007944:	4413      	add	r3, r2
 8007946:	4a6e      	ldr	r2, [pc, #440]	; (8007b00 <HAL_DMA_Init+0x654>)
 8007948:	fba2 2303 	umull	r2, r3, r2, r3
 800794c:	091b      	lsrs	r3, r3, #4
 800794e:	009a      	lsls	r2, r3, #2
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f002 f9a9 	bl	8009cac <DMA_CalcBaseAndBitshift>
 800795a:	4603      	mov	r3, r0
 800795c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007962:	f003 031f 	and.w	r3, r3, #31
 8007966:	2201      	movs	r2, #1
 8007968:	409a      	lsls	r2, r3
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	605a      	str	r2, [r3, #4]
 800796e:	e008      	b.n	8007982 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2240      	movs	r2, #64	; 0x40
 8007974:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2203      	movs	r2, #3
 800797a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800797e:	2301      	movs	r3, #1
 8007980:	e0b7      	b.n	8007af2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a5f      	ldr	r2, [pc, #380]	; (8007b04 <HAL_DMA_Init+0x658>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d072      	beq.n	8007a72 <HAL_DMA_Init+0x5c6>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a5d      	ldr	r2, [pc, #372]	; (8007b08 <HAL_DMA_Init+0x65c>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d06d      	beq.n	8007a72 <HAL_DMA_Init+0x5c6>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a5c      	ldr	r2, [pc, #368]	; (8007b0c <HAL_DMA_Init+0x660>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d068      	beq.n	8007a72 <HAL_DMA_Init+0x5c6>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a5a      	ldr	r2, [pc, #360]	; (8007b10 <HAL_DMA_Init+0x664>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d063      	beq.n	8007a72 <HAL_DMA_Init+0x5c6>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a59      	ldr	r2, [pc, #356]	; (8007b14 <HAL_DMA_Init+0x668>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d05e      	beq.n	8007a72 <HAL_DMA_Init+0x5c6>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a57      	ldr	r2, [pc, #348]	; (8007b18 <HAL_DMA_Init+0x66c>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d059      	beq.n	8007a72 <HAL_DMA_Init+0x5c6>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a56      	ldr	r2, [pc, #344]	; (8007b1c <HAL_DMA_Init+0x670>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d054      	beq.n	8007a72 <HAL_DMA_Init+0x5c6>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a54      	ldr	r2, [pc, #336]	; (8007b20 <HAL_DMA_Init+0x674>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d04f      	beq.n	8007a72 <HAL_DMA_Init+0x5c6>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a53      	ldr	r2, [pc, #332]	; (8007b24 <HAL_DMA_Init+0x678>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d04a      	beq.n	8007a72 <HAL_DMA_Init+0x5c6>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a51      	ldr	r2, [pc, #324]	; (8007b28 <HAL_DMA_Init+0x67c>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d045      	beq.n	8007a72 <HAL_DMA_Init+0x5c6>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a50      	ldr	r2, [pc, #320]	; (8007b2c <HAL_DMA_Init+0x680>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d040      	beq.n	8007a72 <HAL_DMA_Init+0x5c6>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a4e      	ldr	r2, [pc, #312]	; (8007b30 <HAL_DMA_Init+0x684>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d03b      	beq.n	8007a72 <HAL_DMA_Init+0x5c6>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a4d      	ldr	r2, [pc, #308]	; (8007b34 <HAL_DMA_Init+0x688>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d036      	beq.n	8007a72 <HAL_DMA_Init+0x5c6>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a4b      	ldr	r2, [pc, #300]	; (8007b38 <HAL_DMA_Init+0x68c>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d031      	beq.n	8007a72 <HAL_DMA_Init+0x5c6>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a4a      	ldr	r2, [pc, #296]	; (8007b3c <HAL_DMA_Init+0x690>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d02c      	beq.n	8007a72 <HAL_DMA_Init+0x5c6>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a48      	ldr	r2, [pc, #288]	; (8007b40 <HAL_DMA_Init+0x694>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d027      	beq.n	8007a72 <HAL_DMA_Init+0x5c6>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a47      	ldr	r2, [pc, #284]	; (8007b44 <HAL_DMA_Init+0x698>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d022      	beq.n	8007a72 <HAL_DMA_Init+0x5c6>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a45      	ldr	r2, [pc, #276]	; (8007b48 <HAL_DMA_Init+0x69c>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d01d      	beq.n	8007a72 <HAL_DMA_Init+0x5c6>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a44      	ldr	r2, [pc, #272]	; (8007b4c <HAL_DMA_Init+0x6a0>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d018      	beq.n	8007a72 <HAL_DMA_Init+0x5c6>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a42      	ldr	r2, [pc, #264]	; (8007b50 <HAL_DMA_Init+0x6a4>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d013      	beq.n	8007a72 <HAL_DMA_Init+0x5c6>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a41      	ldr	r2, [pc, #260]	; (8007b54 <HAL_DMA_Init+0x6a8>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d00e      	beq.n	8007a72 <HAL_DMA_Init+0x5c6>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a3f      	ldr	r2, [pc, #252]	; (8007b58 <HAL_DMA_Init+0x6ac>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d009      	beq.n	8007a72 <HAL_DMA_Init+0x5c6>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a3e      	ldr	r2, [pc, #248]	; (8007b5c <HAL_DMA_Init+0x6b0>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d004      	beq.n	8007a72 <HAL_DMA_Init+0x5c6>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a3c      	ldr	r2, [pc, #240]	; (8007b60 <HAL_DMA_Init+0x6b4>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d101      	bne.n	8007a76 <HAL_DMA_Init+0x5ca>
 8007a72:	2301      	movs	r3, #1
 8007a74:	e000      	b.n	8007a78 <HAL_DMA_Init+0x5cc>
 8007a76:	2300      	movs	r3, #0
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d032      	beq.n	8007ae2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f002 fa43 	bl	8009f08 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	689b      	ldr	r3, [r3, #8]
 8007a86:	2b80      	cmp	r3, #128	; 0x80
 8007a88:	d102      	bne.n	8007a90 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	685a      	ldr	r2, [r3, #4]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a98:	b2d2      	uxtb	r2, r2
 8007a9a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007aa4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d010      	beq.n	8007ad0 <HAL_DMA_Init+0x624>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	2b08      	cmp	r3, #8
 8007ab4:	d80c      	bhi.n	8007ad0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f002 fac0 	bl	800a03c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ac8:	687a      	ldr	r2, [r7, #4]
 8007aca:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007acc:	605a      	str	r2, [r3, #4]
 8007ace:	e008      	b.n	8007ae2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2201      	movs	r2, #1
 8007aec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007af0:	2300      	movs	r3, #0
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3718      	adds	r7, #24
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}
 8007afa:	bf00      	nop
 8007afc:	a7fdabf8 	.word	0xa7fdabf8
 8007b00:	cccccccd 	.word	0xcccccccd
 8007b04:	40020010 	.word	0x40020010
 8007b08:	40020028 	.word	0x40020028
 8007b0c:	40020040 	.word	0x40020040
 8007b10:	40020058 	.word	0x40020058
 8007b14:	40020070 	.word	0x40020070
 8007b18:	40020088 	.word	0x40020088
 8007b1c:	400200a0 	.word	0x400200a0
 8007b20:	400200b8 	.word	0x400200b8
 8007b24:	40020410 	.word	0x40020410
 8007b28:	40020428 	.word	0x40020428
 8007b2c:	40020440 	.word	0x40020440
 8007b30:	40020458 	.word	0x40020458
 8007b34:	40020470 	.word	0x40020470
 8007b38:	40020488 	.word	0x40020488
 8007b3c:	400204a0 	.word	0x400204a0
 8007b40:	400204b8 	.word	0x400204b8
 8007b44:	58025408 	.word	0x58025408
 8007b48:	5802541c 	.word	0x5802541c
 8007b4c:	58025430 	.word	0x58025430
 8007b50:	58025444 	.word	0x58025444
 8007b54:	58025458 	.word	0x58025458
 8007b58:	5802546c 	.word	0x5802546c
 8007b5c:	58025480 	.word	0x58025480
 8007b60:	58025494 	.word	0x58025494

08007b64 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b086      	sub	sp, #24
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	60f8      	str	r0, [r7, #12]
 8007b6c:	60b9      	str	r1, [r7, #8]
 8007b6e:	607a      	str	r2, [r7, #4]
 8007b70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b72:	2300      	movs	r3, #0
 8007b74:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d101      	bne.n	8007b80 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	e226      	b.n	8007fce <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d101      	bne.n	8007b8e <HAL_DMA_Start_IT+0x2a>
 8007b8a:	2302      	movs	r3, #2
 8007b8c:	e21f      	b.n	8007fce <HAL_DMA_Start_IT+0x46a>
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2201      	movs	r2, #1
 8007b92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007b9c:	b2db      	uxtb	r3, r3
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	f040 820a 	bne.w	8007fb8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2202      	movs	r2, #2
 8007ba8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a68      	ldr	r2, [pc, #416]	; (8007d58 <HAL_DMA_Start_IT+0x1f4>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d04a      	beq.n	8007c52 <HAL_DMA_Start_IT+0xee>
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a66      	ldr	r2, [pc, #408]	; (8007d5c <HAL_DMA_Start_IT+0x1f8>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d045      	beq.n	8007c52 <HAL_DMA_Start_IT+0xee>
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a65      	ldr	r2, [pc, #404]	; (8007d60 <HAL_DMA_Start_IT+0x1fc>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d040      	beq.n	8007c52 <HAL_DMA_Start_IT+0xee>
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a63      	ldr	r2, [pc, #396]	; (8007d64 <HAL_DMA_Start_IT+0x200>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d03b      	beq.n	8007c52 <HAL_DMA_Start_IT+0xee>
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a62      	ldr	r2, [pc, #392]	; (8007d68 <HAL_DMA_Start_IT+0x204>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d036      	beq.n	8007c52 <HAL_DMA_Start_IT+0xee>
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a60      	ldr	r2, [pc, #384]	; (8007d6c <HAL_DMA_Start_IT+0x208>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d031      	beq.n	8007c52 <HAL_DMA_Start_IT+0xee>
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a5f      	ldr	r2, [pc, #380]	; (8007d70 <HAL_DMA_Start_IT+0x20c>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d02c      	beq.n	8007c52 <HAL_DMA_Start_IT+0xee>
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a5d      	ldr	r2, [pc, #372]	; (8007d74 <HAL_DMA_Start_IT+0x210>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d027      	beq.n	8007c52 <HAL_DMA_Start_IT+0xee>
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a5c      	ldr	r2, [pc, #368]	; (8007d78 <HAL_DMA_Start_IT+0x214>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d022      	beq.n	8007c52 <HAL_DMA_Start_IT+0xee>
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a5a      	ldr	r2, [pc, #360]	; (8007d7c <HAL_DMA_Start_IT+0x218>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d01d      	beq.n	8007c52 <HAL_DMA_Start_IT+0xee>
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a59      	ldr	r2, [pc, #356]	; (8007d80 <HAL_DMA_Start_IT+0x21c>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d018      	beq.n	8007c52 <HAL_DMA_Start_IT+0xee>
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a57      	ldr	r2, [pc, #348]	; (8007d84 <HAL_DMA_Start_IT+0x220>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d013      	beq.n	8007c52 <HAL_DMA_Start_IT+0xee>
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a56      	ldr	r2, [pc, #344]	; (8007d88 <HAL_DMA_Start_IT+0x224>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d00e      	beq.n	8007c52 <HAL_DMA_Start_IT+0xee>
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a54      	ldr	r2, [pc, #336]	; (8007d8c <HAL_DMA_Start_IT+0x228>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d009      	beq.n	8007c52 <HAL_DMA_Start_IT+0xee>
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a53      	ldr	r2, [pc, #332]	; (8007d90 <HAL_DMA_Start_IT+0x22c>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d004      	beq.n	8007c52 <HAL_DMA_Start_IT+0xee>
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a51      	ldr	r2, [pc, #324]	; (8007d94 <HAL_DMA_Start_IT+0x230>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d108      	bne.n	8007c64 <HAL_DMA_Start_IT+0x100>
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f022 0201 	bic.w	r2, r2, #1
 8007c60:	601a      	str	r2, [r3, #0]
 8007c62:	e007      	b.n	8007c74 <HAL_DMA_Start_IT+0x110>
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	681a      	ldr	r2, [r3, #0]
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f022 0201 	bic.w	r2, r2, #1
 8007c72:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	68b9      	ldr	r1, [r7, #8]
 8007c7a:	68f8      	ldr	r0, [r7, #12]
 8007c7c:	f001 fe6a 	bl	8009954 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a34      	ldr	r2, [pc, #208]	; (8007d58 <HAL_DMA_Start_IT+0x1f4>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d04a      	beq.n	8007d20 <HAL_DMA_Start_IT+0x1bc>
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a33      	ldr	r2, [pc, #204]	; (8007d5c <HAL_DMA_Start_IT+0x1f8>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d045      	beq.n	8007d20 <HAL_DMA_Start_IT+0x1bc>
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a31      	ldr	r2, [pc, #196]	; (8007d60 <HAL_DMA_Start_IT+0x1fc>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d040      	beq.n	8007d20 <HAL_DMA_Start_IT+0x1bc>
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a30      	ldr	r2, [pc, #192]	; (8007d64 <HAL_DMA_Start_IT+0x200>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d03b      	beq.n	8007d20 <HAL_DMA_Start_IT+0x1bc>
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a2e      	ldr	r2, [pc, #184]	; (8007d68 <HAL_DMA_Start_IT+0x204>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d036      	beq.n	8007d20 <HAL_DMA_Start_IT+0x1bc>
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a2d      	ldr	r2, [pc, #180]	; (8007d6c <HAL_DMA_Start_IT+0x208>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d031      	beq.n	8007d20 <HAL_DMA_Start_IT+0x1bc>
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a2b      	ldr	r2, [pc, #172]	; (8007d70 <HAL_DMA_Start_IT+0x20c>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d02c      	beq.n	8007d20 <HAL_DMA_Start_IT+0x1bc>
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a2a      	ldr	r2, [pc, #168]	; (8007d74 <HAL_DMA_Start_IT+0x210>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d027      	beq.n	8007d20 <HAL_DMA_Start_IT+0x1bc>
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a28      	ldr	r2, [pc, #160]	; (8007d78 <HAL_DMA_Start_IT+0x214>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d022      	beq.n	8007d20 <HAL_DMA_Start_IT+0x1bc>
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a27      	ldr	r2, [pc, #156]	; (8007d7c <HAL_DMA_Start_IT+0x218>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d01d      	beq.n	8007d20 <HAL_DMA_Start_IT+0x1bc>
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a25      	ldr	r2, [pc, #148]	; (8007d80 <HAL_DMA_Start_IT+0x21c>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d018      	beq.n	8007d20 <HAL_DMA_Start_IT+0x1bc>
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a24      	ldr	r2, [pc, #144]	; (8007d84 <HAL_DMA_Start_IT+0x220>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d013      	beq.n	8007d20 <HAL_DMA_Start_IT+0x1bc>
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a22      	ldr	r2, [pc, #136]	; (8007d88 <HAL_DMA_Start_IT+0x224>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d00e      	beq.n	8007d20 <HAL_DMA_Start_IT+0x1bc>
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a21      	ldr	r2, [pc, #132]	; (8007d8c <HAL_DMA_Start_IT+0x228>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d009      	beq.n	8007d20 <HAL_DMA_Start_IT+0x1bc>
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a1f      	ldr	r2, [pc, #124]	; (8007d90 <HAL_DMA_Start_IT+0x22c>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d004      	beq.n	8007d20 <HAL_DMA_Start_IT+0x1bc>
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a1e      	ldr	r2, [pc, #120]	; (8007d94 <HAL_DMA_Start_IT+0x230>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d101      	bne.n	8007d24 <HAL_DMA_Start_IT+0x1c0>
 8007d20:	2301      	movs	r3, #1
 8007d22:	e000      	b.n	8007d26 <HAL_DMA_Start_IT+0x1c2>
 8007d24:	2300      	movs	r3, #0
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d036      	beq.n	8007d98 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f023 021e 	bic.w	r2, r3, #30
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f042 0216 	orr.w	r2, r2, #22
 8007d3c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d03e      	beq.n	8007dc4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	681a      	ldr	r2, [r3, #0]
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f042 0208 	orr.w	r2, r2, #8
 8007d54:	601a      	str	r2, [r3, #0]
 8007d56:	e035      	b.n	8007dc4 <HAL_DMA_Start_IT+0x260>
 8007d58:	40020010 	.word	0x40020010
 8007d5c:	40020028 	.word	0x40020028
 8007d60:	40020040 	.word	0x40020040
 8007d64:	40020058 	.word	0x40020058
 8007d68:	40020070 	.word	0x40020070
 8007d6c:	40020088 	.word	0x40020088
 8007d70:	400200a0 	.word	0x400200a0
 8007d74:	400200b8 	.word	0x400200b8
 8007d78:	40020410 	.word	0x40020410
 8007d7c:	40020428 	.word	0x40020428
 8007d80:	40020440 	.word	0x40020440
 8007d84:	40020458 	.word	0x40020458
 8007d88:	40020470 	.word	0x40020470
 8007d8c:	40020488 	.word	0x40020488
 8007d90:	400204a0 	.word	0x400204a0
 8007d94:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f023 020e 	bic.w	r2, r3, #14
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f042 020a 	orr.w	r2, r2, #10
 8007daa:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d007      	beq.n	8007dc4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	681a      	ldr	r2, [r3, #0]
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f042 0204 	orr.w	r2, r2, #4
 8007dc2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a83      	ldr	r2, [pc, #524]	; (8007fd8 <HAL_DMA_Start_IT+0x474>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d072      	beq.n	8007eb4 <HAL_DMA_Start_IT+0x350>
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a82      	ldr	r2, [pc, #520]	; (8007fdc <HAL_DMA_Start_IT+0x478>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d06d      	beq.n	8007eb4 <HAL_DMA_Start_IT+0x350>
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a80      	ldr	r2, [pc, #512]	; (8007fe0 <HAL_DMA_Start_IT+0x47c>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d068      	beq.n	8007eb4 <HAL_DMA_Start_IT+0x350>
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a7f      	ldr	r2, [pc, #508]	; (8007fe4 <HAL_DMA_Start_IT+0x480>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d063      	beq.n	8007eb4 <HAL_DMA_Start_IT+0x350>
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a7d      	ldr	r2, [pc, #500]	; (8007fe8 <HAL_DMA_Start_IT+0x484>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d05e      	beq.n	8007eb4 <HAL_DMA_Start_IT+0x350>
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a7c      	ldr	r2, [pc, #496]	; (8007fec <HAL_DMA_Start_IT+0x488>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d059      	beq.n	8007eb4 <HAL_DMA_Start_IT+0x350>
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a7a      	ldr	r2, [pc, #488]	; (8007ff0 <HAL_DMA_Start_IT+0x48c>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d054      	beq.n	8007eb4 <HAL_DMA_Start_IT+0x350>
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a79      	ldr	r2, [pc, #484]	; (8007ff4 <HAL_DMA_Start_IT+0x490>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d04f      	beq.n	8007eb4 <HAL_DMA_Start_IT+0x350>
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a77      	ldr	r2, [pc, #476]	; (8007ff8 <HAL_DMA_Start_IT+0x494>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d04a      	beq.n	8007eb4 <HAL_DMA_Start_IT+0x350>
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a76      	ldr	r2, [pc, #472]	; (8007ffc <HAL_DMA_Start_IT+0x498>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d045      	beq.n	8007eb4 <HAL_DMA_Start_IT+0x350>
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a74      	ldr	r2, [pc, #464]	; (8008000 <HAL_DMA_Start_IT+0x49c>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d040      	beq.n	8007eb4 <HAL_DMA_Start_IT+0x350>
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a73      	ldr	r2, [pc, #460]	; (8008004 <HAL_DMA_Start_IT+0x4a0>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d03b      	beq.n	8007eb4 <HAL_DMA_Start_IT+0x350>
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a71      	ldr	r2, [pc, #452]	; (8008008 <HAL_DMA_Start_IT+0x4a4>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d036      	beq.n	8007eb4 <HAL_DMA_Start_IT+0x350>
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a70      	ldr	r2, [pc, #448]	; (800800c <HAL_DMA_Start_IT+0x4a8>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d031      	beq.n	8007eb4 <HAL_DMA_Start_IT+0x350>
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a6e      	ldr	r2, [pc, #440]	; (8008010 <HAL_DMA_Start_IT+0x4ac>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d02c      	beq.n	8007eb4 <HAL_DMA_Start_IT+0x350>
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a6d      	ldr	r2, [pc, #436]	; (8008014 <HAL_DMA_Start_IT+0x4b0>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d027      	beq.n	8007eb4 <HAL_DMA_Start_IT+0x350>
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a6b      	ldr	r2, [pc, #428]	; (8008018 <HAL_DMA_Start_IT+0x4b4>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d022      	beq.n	8007eb4 <HAL_DMA_Start_IT+0x350>
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a6a      	ldr	r2, [pc, #424]	; (800801c <HAL_DMA_Start_IT+0x4b8>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d01d      	beq.n	8007eb4 <HAL_DMA_Start_IT+0x350>
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a68      	ldr	r2, [pc, #416]	; (8008020 <HAL_DMA_Start_IT+0x4bc>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d018      	beq.n	8007eb4 <HAL_DMA_Start_IT+0x350>
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a67      	ldr	r2, [pc, #412]	; (8008024 <HAL_DMA_Start_IT+0x4c0>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d013      	beq.n	8007eb4 <HAL_DMA_Start_IT+0x350>
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a65      	ldr	r2, [pc, #404]	; (8008028 <HAL_DMA_Start_IT+0x4c4>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d00e      	beq.n	8007eb4 <HAL_DMA_Start_IT+0x350>
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a64      	ldr	r2, [pc, #400]	; (800802c <HAL_DMA_Start_IT+0x4c8>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d009      	beq.n	8007eb4 <HAL_DMA_Start_IT+0x350>
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a62      	ldr	r2, [pc, #392]	; (8008030 <HAL_DMA_Start_IT+0x4cc>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d004      	beq.n	8007eb4 <HAL_DMA_Start_IT+0x350>
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a61      	ldr	r2, [pc, #388]	; (8008034 <HAL_DMA_Start_IT+0x4d0>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d101      	bne.n	8007eb8 <HAL_DMA_Start_IT+0x354>
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	e000      	b.n	8007eba <HAL_DMA_Start_IT+0x356>
 8007eb8:	2300      	movs	r3, #0
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d01a      	beq.n	8007ef4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d007      	beq.n	8007edc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ed6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007eda:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d007      	beq.n	8007ef4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007eee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ef2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a37      	ldr	r2, [pc, #220]	; (8007fd8 <HAL_DMA_Start_IT+0x474>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d04a      	beq.n	8007f94 <HAL_DMA_Start_IT+0x430>
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a36      	ldr	r2, [pc, #216]	; (8007fdc <HAL_DMA_Start_IT+0x478>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d045      	beq.n	8007f94 <HAL_DMA_Start_IT+0x430>
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a34      	ldr	r2, [pc, #208]	; (8007fe0 <HAL_DMA_Start_IT+0x47c>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d040      	beq.n	8007f94 <HAL_DMA_Start_IT+0x430>
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4a33      	ldr	r2, [pc, #204]	; (8007fe4 <HAL_DMA_Start_IT+0x480>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d03b      	beq.n	8007f94 <HAL_DMA_Start_IT+0x430>
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a31      	ldr	r2, [pc, #196]	; (8007fe8 <HAL_DMA_Start_IT+0x484>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d036      	beq.n	8007f94 <HAL_DMA_Start_IT+0x430>
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a30      	ldr	r2, [pc, #192]	; (8007fec <HAL_DMA_Start_IT+0x488>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d031      	beq.n	8007f94 <HAL_DMA_Start_IT+0x430>
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a2e      	ldr	r2, [pc, #184]	; (8007ff0 <HAL_DMA_Start_IT+0x48c>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d02c      	beq.n	8007f94 <HAL_DMA_Start_IT+0x430>
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a2d      	ldr	r2, [pc, #180]	; (8007ff4 <HAL_DMA_Start_IT+0x490>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d027      	beq.n	8007f94 <HAL_DMA_Start_IT+0x430>
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a2b      	ldr	r2, [pc, #172]	; (8007ff8 <HAL_DMA_Start_IT+0x494>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d022      	beq.n	8007f94 <HAL_DMA_Start_IT+0x430>
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a2a      	ldr	r2, [pc, #168]	; (8007ffc <HAL_DMA_Start_IT+0x498>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d01d      	beq.n	8007f94 <HAL_DMA_Start_IT+0x430>
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a28      	ldr	r2, [pc, #160]	; (8008000 <HAL_DMA_Start_IT+0x49c>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d018      	beq.n	8007f94 <HAL_DMA_Start_IT+0x430>
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a27      	ldr	r2, [pc, #156]	; (8008004 <HAL_DMA_Start_IT+0x4a0>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d013      	beq.n	8007f94 <HAL_DMA_Start_IT+0x430>
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a25      	ldr	r2, [pc, #148]	; (8008008 <HAL_DMA_Start_IT+0x4a4>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d00e      	beq.n	8007f94 <HAL_DMA_Start_IT+0x430>
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a24      	ldr	r2, [pc, #144]	; (800800c <HAL_DMA_Start_IT+0x4a8>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d009      	beq.n	8007f94 <HAL_DMA_Start_IT+0x430>
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a22      	ldr	r2, [pc, #136]	; (8008010 <HAL_DMA_Start_IT+0x4ac>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d004      	beq.n	8007f94 <HAL_DMA_Start_IT+0x430>
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a21      	ldr	r2, [pc, #132]	; (8008014 <HAL_DMA_Start_IT+0x4b0>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d108      	bne.n	8007fa6 <HAL_DMA_Start_IT+0x442>
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	681a      	ldr	r2, [r3, #0]
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f042 0201 	orr.w	r2, r2, #1
 8007fa2:	601a      	str	r2, [r3, #0]
 8007fa4:	e012      	b.n	8007fcc <HAL_DMA_Start_IT+0x468>
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	681a      	ldr	r2, [r3, #0]
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f042 0201 	orr.w	r2, r2, #1
 8007fb4:	601a      	str	r2, [r3, #0]
 8007fb6:	e009      	b.n	8007fcc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007fbe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8007fc8:	2301      	movs	r3, #1
 8007fca:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007fcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3718      	adds	r7, #24
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}
 8007fd6:	bf00      	nop
 8007fd8:	40020010 	.word	0x40020010
 8007fdc:	40020028 	.word	0x40020028
 8007fe0:	40020040 	.word	0x40020040
 8007fe4:	40020058 	.word	0x40020058
 8007fe8:	40020070 	.word	0x40020070
 8007fec:	40020088 	.word	0x40020088
 8007ff0:	400200a0 	.word	0x400200a0
 8007ff4:	400200b8 	.word	0x400200b8
 8007ff8:	40020410 	.word	0x40020410
 8007ffc:	40020428 	.word	0x40020428
 8008000:	40020440 	.word	0x40020440
 8008004:	40020458 	.word	0x40020458
 8008008:	40020470 	.word	0x40020470
 800800c:	40020488 	.word	0x40020488
 8008010:	400204a0 	.word	0x400204a0
 8008014:	400204b8 	.word	0x400204b8
 8008018:	58025408 	.word	0x58025408
 800801c:	5802541c 	.word	0x5802541c
 8008020:	58025430 	.word	0x58025430
 8008024:	58025444 	.word	0x58025444
 8008028:	58025458 	.word	0x58025458
 800802c:	5802546c 	.word	0x5802546c
 8008030:	58025480 	.word	0x58025480
 8008034:	58025494 	.word	0x58025494

08008038 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b086      	sub	sp, #24
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8008040:	f7ff f8e8 	bl	8007214 <HAL_GetTick>
 8008044:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d101      	bne.n	8008050 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800804c:	2301      	movs	r3, #1
 800804e:	e2dc      	b.n	800860a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008056:	b2db      	uxtb	r3, r3
 8008058:	2b02      	cmp	r3, #2
 800805a:	d008      	beq.n	800806e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2280      	movs	r2, #128	; 0x80
 8008060:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2200      	movs	r2, #0
 8008066:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800806a:	2301      	movs	r3, #1
 800806c:	e2cd      	b.n	800860a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a76      	ldr	r2, [pc, #472]	; (800824c <HAL_DMA_Abort+0x214>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d04a      	beq.n	800810e <HAL_DMA_Abort+0xd6>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a74      	ldr	r2, [pc, #464]	; (8008250 <HAL_DMA_Abort+0x218>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d045      	beq.n	800810e <HAL_DMA_Abort+0xd6>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4a73      	ldr	r2, [pc, #460]	; (8008254 <HAL_DMA_Abort+0x21c>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d040      	beq.n	800810e <HAL_DMA_Abort+0xd6>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a71      	ldr	r2, [pc, #452]	; (8008258 <HAL_DMA_Abort+0x220>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d03b      	beq.n	800810e <HAL_DMA_Abort+0xd6>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a70      	ldr	r2, [pc, #448]	; (800825c <HAL_DMA_Abort+0x224>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d036      	beq.n	800810e <HAL_DMA_Abort+0xd6>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a6e      	ldr	r2, [pc, #440]	; (8008260 <HAL_DMA_Abort+0x228>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d031      	beq.n	800810e <HAL_DMA_Abort+0xd6>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a6d      	ldr	r2, [pc, #436]	; (8008264 <HAL_DMA_Abort+0x22c>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d02c      	beq.n	800810e <HAL_DMA_Abort+0xd6>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a6b      	ldr	r2, [pc, #428]	; (8008268 <HAL_DMA_Abort+0x230>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d027      	beq.n	800810e <HAL_DMA_Abort+0xd6>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4a6a      	ldr	r2, [pc, #424]	; (800826c <HAL_DMA_Abort+0x234>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d022      	beq.n	800810e <HAL_DMA_Abort+0xd6>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a68      	ldr	r2, [pc, #416]	; (8008270 <HAL_DMA_Abort+0x238>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d01d      	beq.n	800810e <HAL_DMA_Abort+0xd6>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a67      	ldr	r2, [pc, #412]	; (8008274 <HAL_DMA_Abort+0x23c>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d018      	beq.n	800810e <HAL_DMA_Abort+0xd6>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a65      	ldr	r2, [pc, #404]	; (8008278 <HAL_DMA_Abort+0x240>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d013      	beq.n	800810e <HAL_DMA_Abort+0xd6>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a64      	ldr	r2, [pc, #400]	; (800827c <HAL_DMA_Abort+0x244>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d00e      	beq.n	800810e <HAL_DMA_Abort+0xd6>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a62      	ldr	r2, [pc, #392]	; (8008280 <HAL_DMA_Abort+0x248>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d009      	beq.n	800810e <HAL_DMA_Abort+0xd6>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a61      	ldr	r2, [pc, #388]	; (8008284 <HAL_DMA_Abort+0x24c>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d004      	beq.n	800810e <HAL_DMA_Abort+0xd6>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4a5f      	ldr	r2, [pc, #380]	; (8008288 <HAL_DMA_Abort+0x250>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d101      	bne.n	8008112 <HAL_DMA_Abort+0xda>
 800810e:	2301      	movs	r3, #1
 8008110:	e000      	b.n	8008114 <HAL_DMA_Abort+0xdc>
 8008112:	2300      	movs	r3, #0
 8008114:	2b00      	cmp	r3, #0
 8008116:	d013      	beq.n	8008140 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	681a      	ldr	r2, [r3, #0]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f022 021e 	bic.w	r2, r2, #30
 8008126:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	695a      	ldr	r2, [r3, #20]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008136:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	617b      	str	r3, [r7, #20]
 800813e:	e00a      	b.n	8008156 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f022 020e 	bic.w	r2, r2, #14
 800814e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a3c      	ldr	r2, [pc, #240]	; (800824c <HAL_DMA_Abort+0x214>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d072      	beq.n	8008246 <HAL_DMA_Abort+0x20e>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4a3a      	ldr	r2, [pc, #232]	; (8008250 <HAL_DMA_Abort+0x218>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d06d      	beq.n	8008246 <HAL_DMA_Abort+0x20e>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a39      	ldr	r2, [pc, #228]	; (8008254 <HAL_DMA_Abort+0x21c>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d068      	beq.n	8008246 <HAL_DMA_Abort+0x20e>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4a37      	ldr	r2, [pc, #220]	; (8008258 <HAL_DMA_Abort+0x220>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d063      	beq.n	8008246 <HAL_DMA_Abort+0x20e>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a36      	ldr	r2, [pc, #216]	; (800825c <HAL_DMA_Abort+0x224>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d05e      	beq.n	8008246 <HAL_DMA_Abort+0x20e>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4a34      	ldr	r2, [pc, #208]	; (8008260 <HAL_DMA_Abort+0x228>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d059      	beq.n	8008246 <HAL_DMA_Abort+0x20e>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4a33      	ldr	r2, [pc, #204]	; (8008264 <HAL_DMA_Abort+0x22c>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d054      	beq.n	8008246 <HAL_DMA_Abort+0x20e>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a31      	ldr	r2, [pc, #196]	; (8008268 <HAL_DMA_Abort+0x230>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d04f      	beq.n	8008246 <HAL_DMA_Abort+0x20e>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a30      	ldr	r2, [pc, #192]	; (800826c <HAL_DMA_Abort+0x234>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d04a      	beq.n	8008246 <HAL_DMA_Abort+0x20e>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a2e      	ldr	r2, [pc, #184]	; (8008270 <HAL_DMA_Abort+0x238>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d045      	beq.n	8008246 <HAL_DMA_Abort+0x20e>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a2d      	ldr	r2, [pc, #180]	; (8008274 <HAL_DMA_Abort+0x23c>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d040      	beq.n	8008246 <HAL_DMA_Abort+0x20e>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4a2b      	ldr	r2, [pc, #172]	; (8008278 <HAL_DMA_Abort+0x240>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d03b      	beq.n	8008246 <HAL_DMA_Abort+0x20e>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4a2a      	ldr	r2, [pc, #168]	; (800827c <HAL_DMA_Abort+0x244>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d036      	beq.n	8008246 <HAL_DMA_Abort+0x20e>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a28      	ldr	r2, [pc, #160]	; (8008280 <HAL_DMA_Abort+0x248>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d031      	beq.n	8008246 <HAL_DMA_Abort+0x20e>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a27      	ldr	r2, [pc, #156]	; (8008284 <HAL_DMA_Abort+0x24c>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d02c      	beq.n	8008246 <HAL_DMA_Abort+0x20e>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a25      	ldr	r2, [pc, #148]	; (8008288 <HAL_DMA_Abort+0x250>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d027      	beq.n	8008246 <HAL_DMA_Abort+0x20e>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a24      	ldr	r2, [pc, #144]	; (800828c <HAL_DMA_Abort+0x254>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d022      	beq.n	8008246 <HAL_DMA_Abort+0x20e>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a22      	ldr	r2, [pc, #136]	; (8008290 <HAL_DMA_Abort+0x258>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d01d      	beq.n	8008246 <HAL_DMA_Abort+0x20e>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a21      	ldr	r2, [pc, #132]	; (8008294 <HAL_DMA_Abort+0x25c>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d018      	beq.n	8008246 <HAL_DMA_Abort+0x20e>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a1f      	ldr	r2, [pc, #124]	; (8008298 <HAL_DMA_Abort+0x260>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d013      	beq.n	8008246 <HAL_DMA_Abort+0x20e>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a1e      	ldr	r2, [pc, #120]	; (800829c <HAL_DMA_Abort+0x264>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d00e      	beq.n	8008246 <HAL_DMA_Abort+0x20e>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a1c      	ldr	r2, [pc, #112]	; (80082a0 <HAL_DMA_Abort+0x268>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d009      	beq.n	8008246 <HAL_DMA_Abort+0x20e>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a1b      	ldr	r2, [pc, #108]	; (80082a4 <HAL_DMA_Abort+0x26c>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d004      	beq.n	8008246 <HAL_DMA_Abort+0x20e>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a19      	ldr	r2, [pc, #100]	; (80082a8 <HAL_DMA_Abort+0x270>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d132      	bne.n	80082ac <HAL_DMA_Abort+0x274>
 8008246:	2301      	movs	r3, #1
 8008248:	e031      	b.n	80082ae <HAL_DMA_Abort+0x276>
 800824a:	bf00      	nop
 800824c:	40020010 	.word	0x40020010
 8008250:	40020028 	.word	0x40020028
 8008254:	40020040 	.word	0x40020040
 8008258:	40020058 	.word	0x40020058
 800825c:	40020070 	.word	0x40020070
 8008260:	40020088 	.word	0x40020088
 8008264:	400200a0 	.word	0x400200a0
 8008268:	400200b8 	.word	0x400200b8
 800826c:	40020410 	.word	0x40020410
 8008270:	40020428 	.word	0x40020428
 8008274:	40020440 	.word	0x40020440
 8008278:	40020458 	.word	0x40020458
 800827c:	40020470 	.word	0x40020470
 8008280:	40020488 	.word	0x40020488
 8008284:	400204a0 	.word	0x400204a0
 8008288:	400204b8 	.word	0x400204b8
 800828c:	58025408 	.word	0x58025408
 8008290:	5802541c 	.word	0x5802541c
 8008294:	58025430 	.word	0x58025430
 8008298:	58025444 	.word	0x58025444
 800829c:	58025458 	.word	0x58025458
 80082a0:	5802546c 	.word	0x5802546c
 80082a4:	58025480 	.word	0x58025480
 80082a8:	58025494 	.word	0x58025494
 80082ac:	2300      	movs	r3, #0
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d007      	beq.n	80082c2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082b6:	681a      	ldr	r2, [r3, #0]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80082c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a6d      	ldr	r2, [pc, #436]	; (800847c <HAL_DMA_Abort+0x444>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d04a      	beq.n	8008362 <HAL_DMA_Abort+0x32a>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a6b      	ldr	r2, [pc, #428]	; (8008480 <HAL_DMA_Abort+0x448>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d045      	beq.n	8008362 <HAL_DMA_Abort+0x32a>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a6a      	ldr	r2, [pc, #424]	; (8008484 <HAL_DMA_Abort+0x44c>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d040      	beq.n	8008362 <HAL_DMA_Abort+0x32a>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a68      	ldr	r2, [pc, #416]	; (8008488 <HAL_DMA_Abort+0x450>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d03b      	beq.n	8008362 <HAL_DMA_Abort+0x32a>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a67      	ldr	r2, [pc, #412]	; (800848c <HAL_DMA_Abort+0x454>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d036      	beq.n	8008362 <HAL_DMA_Abort+0x32a>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a65      	ldr	r2, [pc, #404]	; (8008490 <HAL_DMA_Abort+0x458>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d031      	beq.n	8008362 <HAL_DMA_Abort+0x32a>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a64      	ldr	r2, [pc, #400]	; (8008494 <HAL_DMA_Abort+0x45c>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d02c      	beq.n	8008362 <HAL_DMA_Abort+0x32a>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a62      	ldr	r2, [pc, #392]	; (8008498 <HAL_DMA_Abort+0x460>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d027      	beq.n	8008362 <HAL_DMA_Abort+0x32a>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a61      	ldr	r2, [pc, #388]	; (800849c <HAL_DMA_Abort+0x464>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d022      	beq.n	8008362 <HAL_DMA_Abort+0x32a>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a5f      	ldr	r2, [pc, #380]	; (80084a0 <HAL_DMA_Abort+0x468>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d01d      	beq.n	8008362 <HAL_DMA_Abort+0x32a>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4a5e      	ldr	r2, [pc, #376]	; (80084a4 <HAL_DMA_Abort+0x46c>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d018      	beq.n	8008362 <HAL_DMA_Abort+0x32a>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a5c      	ldr	r2, [pc, #368]	; (80084a8 <HAL_DMA_Abort+0x470>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d013      	beq.n	8008362 <HAL_DMA_Abort+0x32a>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4a5b      	ldr	r2, [pc, #364]	; (80084ac <HAL_DMA_Abort+0x474>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d00e      	beq.n	8008362 <HAL_DMA_Abort+0x32a>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a59      	ldr	r2, [pc, #356]	; (80084b0 <HAL_DMA_Abort+0x478>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d009      	beq.n	8008362 <HAL_DMA_Abort+0x32a>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a58      	ldr	r2, [pc, #352]	; (80084b4 <HAL_DMA_Abort+0x47c>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d004      	beq.n	8008362 <HAL_DMA_Abort+0x32a>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a56      	ldr	r2, [pc, #344]	; (80084b8 <HAL_DMA_Abort+0x480>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d108      	bne.n	8008374 <HAL_DMA_Abort+0x33c>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	681a      	ldr	r2, [r3, #0]
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f022 0201 	bic.w	r2, r2, #1
 8008370:	601a      	str	r2, [r3, #0]
 8008372:	e007      	b.n	8008384 <HAL_DMA_Abort+0x34c>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	681a      	ldr	r2, [r3, #0]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f022 0201 	bic.w	r2, r2, #1
 8008382:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8008384:	e013      	b.n	80083ae <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008386:	f7fe ff45 	bl	8007214 <HAL_GetTick>
 800838a:	4602      	mov	r2, r0
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	1ad3      	subs	r3, r2, r3
 8008390:	2b05      	cmp	r3, #5
 8008392:	d90c      	bls.n	80083ae <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2220      	movs	r2, #32
 8008398:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2203      	movs	r2, #3
 800839e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2200      	movs	r2, #0
 80083a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80083aa:	2301      	movs	r3, #1
 80083ac:	e12d      	b.n	800860a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f003 0301 	and.w	r3, r3, #1
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d1e5      	bne.n	8008386 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a2f      	ldr	r2, [pc, #188]	; (800847c <HAL_DMA_Abort+0x444>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d04a      	beq.n	800845a <HAL_DMA_Abort+0x422>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a2d      	ldr	r2, [pc, #180]	; (8008480 <HAL_DMA_Abort+0x448>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d045      	beq.n	800845a <HAL_DMA_Abort+0x422>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a2c      	ldr	r2, [pc, #176]	; (8008484 <HAL_DMA_Abort+0x44c>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d040      	beq.n	800845a <HAL_DMA_Abort+0x422>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a2a      	ldr	r2, [pc, #168]	; (8008488 <HAL_DMA_Abort+0x450>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d03b      	beq.n	800845a <HAL_DMA_Abort+0x422>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a29      	ldr	r2, [pc, #164]	; (800848c <HAL_DMA_Abort+0x454>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d036      	beq.n	800845a <HAL_DMA_Abort+0x422>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a27      	ldr	r2, [pc, #156]	; (8008490 <HAL_DMA_Abort+0x458>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d031      	beq.n	800845a <HAL_DMA_Abort+0x422>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a26      	ldr	r2, [pc, #152]	; (8008494 <HAL_DMA_Abort+0x45c>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d02c      	beq.n	800845a <HAL_DMA_Abort+0x422>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a24      	ldr	r2, [pc, #144]	; (8008498 <HAL_DMA_Abort+0x460>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d027      	beq.n	800845a <HAL_DMA_Abort+0x422>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a23      	ldr	r2, [pc, #140]	; (800849c <HAL_DMA_Abort+0x464>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d022      	beq.n	800845a <HAL_DMA_Abort+0x422>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a21      	ldr	r2, [pc, #132]	; (80084a0 <HAL_DMA_Abort+0x468>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d01d      	beq.n	800845a <HAL_DMA_Abort+0x422>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a20      	ldr	r2, [pc, #128]	; (80084a4 <HAL_DMA_Abort+0x46c>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d018      	beq.n	800845a <HAL_DMA_Abort+0x422>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a1e      	ldr	r2, [pc, #120]	; (80084a8 <HAL_DMA_Abort+0x470>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d013      	beq.n	800845a <HAL_DMA_Abort+0x422>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a1d      	ldr	r2, [pc, #116]	; (80084ac <HAL_DMA_Abort+0x474>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d00e      	beq.n	800845a <HAL_DMA_Abort+0x422>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a1b      	ldr	r2, [pc, #108]	; (80084b0 <HAL_DMA_Abort+0x478>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d009      	beq.n	800845a <HAL_DMA_Abort+0x422>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a1a      	ldr	r2, [pc, #104]	; (80084b4 <HAL_DMA_Abort+0x47c>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d004      	beq.n	800845a <HAL_DMA_Abort+0x422>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a18      	ldr	r2, [pc, #96]	; (80084b8 <HAL_DMA_Abort+0x480>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d101      	bne.n	800845e <HAL_DMA_Abort+0x426>
 800845a:	2301      	movs	r3, #1
 800845c:	e000      	b.n	8008460 <HAL_DMA_Abort+0x428>
 800845e:	2300      	movs	r3, #0
 8008460:	2b00      	cmp	r3, #0
 8008462:	d02b      	beq.n	80084bc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008468:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800846e:	f003 031f 	and.w	r3, r3, #31
 8008472:	223f      	movs	r2, #63	; 0x3f
 8008474:	409a      	lsls	r2, r3
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	609a      	str	r2, [r3, #8]
 800847a:	e02a      	b.n	80084d2 <HAL_DMA_Abort+0x49a>
 800847c:	40020010 	.word	0x40020010
 8008480:	40020028 	.word	0x40020028
 8008484:	40020040 	.word	0x40020040
 8008488:	40020058 	.word	0x40020058
 800848c:	40020070 	.word	0x40020070
 8008490:	40020088 	.word	0x40020088
 8008494:	400200a0 	.word	0x400200a0
 8008498:	400200b8 	.word	0x400200b8
 800849c:	40020410 	.word	0x40020410
 80084a0:	40020428 	.word	0x40020428
 80084a4:	40020440 	.word	0x40020440
 80084a8:	40020458 	.word	0x40020458
 80084ac:	40020470 	.word	0x40020470
 80084b0:	40020488 	.word	0x40020488
 80084b4:	400204a0 	.word	0x400204a0
 80084b8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084c0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084c6:	f003 031f 	and.w	r3, r3, #31
 80084ca:	2201      	movs	r2, #1
 80084cc:	409a      	lsls	r2, r3
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a4f      	ldr	r2, [pc, #316]	; (8008614 <HAL_DMA_Abort+0x5dc>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d072      	beq.n	80085c2 <HAL_DMA_Abort+0x58a>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a4d      	ldr	r2, [pc, #308]	; (8008618 <HAL_DMA_Abort+0x5e0>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d06d      	beq.n	80085c2 <HAL_DMA_Abort+0x58a>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4a4c      	ldr	r2, [pc, #304]	; (800861c <HAL_DMA_Abort+0x5e4>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d068      	beq.n	80085c2 <HAL_DMA_Abort+0x58a>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4a4a      	ldr	r2, [pc, #296]	; (8008620 <HAL_DMA_Abort+0x5e8>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d063      	beq.n	80085c2 <HAL_DMA_Abort+0x58a>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4a49      	ldr	r2, [pc, #292]	; (8008624 <HAL_DMA_Abort+0x5ec>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d05e      	beq.n	80085c2 <HAL_DMA_Abort+0x58a>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	4a47      	ldr	r2, [pc, #284]	; (8008628 <HAL_DMA_Abort+0x5f0>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d059      	beq.n	80085c2 <HAL_DMA_Abort+0x58a>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4a46      	ldr	r2, [pc, #280]	; (800862c <HAL_DMA_Abort+0x5f4>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d054      	beq.n	80085c2 <HAL_DMA_Abort+0x58a>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a44      	ldr	r2, [pc, #272]	; (8008630 <HAL_DMA_Abort+0x5f8>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d04f      	beq.n	80085c2 <HAL_DMA_Abort+0x58a>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4a43      	ldr	r2, [pc, #268]	; (8008634 <HAL_DMA_Abort+0x5fc>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d04a      	beq.n	80085c2 <HAL_DMA_Abort+0x58a>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a41      	ldr	r2, [pc, #260]	; (8008638 <HAL_DMA_Abort+0x600>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d045      	beq.n	80085c2 <HAL_DMA_Abort+0x58a>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4a40      	ldr	r2, [pc, #256]	; (800863c <HAL_DMA_Abort+0x604>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d040      	beq.n	80085c2 <HAL_DMA_Abort+0x58a>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a3e      	ldr	r2, [pc, #248]	; (8008640 <HAL_DMA_Abort+0x608>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d03b      	beq.n	80085c2 <HAL_DMA_Abort+0x58a>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a3d      	ldr	r2, [pc, #244]	; (8008644 <HAL_DMA_Abort+0x60c>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d036      	beq.n	80085c2 <HAL_DMA_Abort+0x58a>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a3b      	ldr	r2, [pc, #236]	; (8008648 <HAL_DMA_Abort+0x610>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d031      	beq.n	80085c2 <HAL_DMA_Abort+0x58a>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4a3a      	ldr	r2, [pc, #232]	; (800864c <HAL_DMA_Abort+0x614>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d02c      	beq.n	80085c2 <HAL_DMA_Abort+0x58a>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4a38      	ldr	r2, [pc, #224]	; (8008650 <HAL_DMA_Abort+0x618>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d027      	beq.n	80085c2 <HAL_DMA_Abort+0x58a>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4a37      	ldr	r2, [pc, #220]	; (8008654 <HAL_DMA_Abort+0x61c>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d022      	beq.n	80085c2 <HAL_DMA_Abort+0x58a>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a35      	ldr	r2, [pc, #212]	; (8008658 <HAL_DMA_Abort+0x620>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d01d      	beq.n	80085c2 <HAL_DMA_Abort+0x58a>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4a34      	ldr	r2, [pc, #208]	; (800865c <HAL_DMA_Abort+0x624>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d018      	beq.n	80085c2 <HAL_DMA_Abort+0x58a>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a32      	ldr	r2, [pc, #200]	; (8008660 <HAL_DMA_Abort+0x628>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d013      	beq.n	80085c2 <HAL_DMA_Abort+0x58a>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4a31      	ldr	r2, [pc, #196]	; (8008664 <HAL_DMA_Abort+0x62c>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d00e      	beq.n	80085c2 <HAL_DMA_Abort+0x58a>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a2f      	ldr	r2, [pc, #188]	; (8008668 <HAL_DMA_Abort+0x630>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d009      	beq.n	80085c2 <HAL_DMA_Abort+0x58a>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a2e      	ldr	r2, [pc, #184]	; (800866c <HAL_DMA_Abort+0x634>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d004      	beq.n	80085c2 <HAL_DMA_Abort+0x58a>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4a2c      	ldr	r2, [pc, #176]	; (8008670 <HAL_DMA_Abort+0x638>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d101      	bne.n	80085c6 <HAL_DMA_Abort+0x58e>
 80085c2:	2301      	movs	r3, #1
 80085c4:	e000      	b.n	80085c8 <HAL_DMA_Abort+0x590>
 80085c6:	2300      	movs	r3, #0
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d015      	beq.n	80085f8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085d0:	687a      	ldr	r2, [r7, #4]
 80085d2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80085d4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d00c      	beq.n	80085f8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085e2:	681a      	ldr	r2, [r3, #0]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80085ec:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085f2:	687a      	ldr	r2, [r7, #4]
 80085f4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80085f6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2201      	movs	r2, #1
 80085fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2200      	movs	r2, #0
 8008604:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8008608:	2300      	movs	r3, #0
}
 800860a:	4618      	mov	r0, r3
 800860c:	3718      	adds	r7, #24
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
 8008612:	bf00      	nop
 8008614:	40020010 	.word	0x40020010
 8008618:	40020028 	.word	0x40020028
 800861c:	40020040 	.word	0x40020040
 8008620:	40020058 	.word	0x40020058
 8008624:	40020070 	.word	0x40020070
 8008628:	40020088 	.word	0x40020088
 800862c:	400200a0 	.word	0x400200a0
 8008630:	400200b8 	.word	0x400200b8
 8008634:	40020410 	.word	0x40020410
 8008638:	40020428 	.word	0x40020428
 800863c:	40020440 	.word	0x40020440
 8008640:	40020458 	.word	0x40020458
 8008644:	40020470 	.word	0x40020470
 8008648:	40020488 	.word	0x40020488
 800864c:	400204a0 	.word	0x400204a0
 8008650:	400204b8 	.word	0x400204b8
 8008654:	58025408 	.word	0x58025408
 8008658:	5802541c 	.word	0x5802541c
 800865c:	58025430 	.word	0x58025430
 8008660:	58025444 	.word	0x58025444
 8008664:	58025458 	.word	0x58025458
 8008668:	5802546c 	.word	0x5802546c
 800866c:	58025480 	.word	0x58025480
 8008670:	58025494 	.word	0x58025494

08008674 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b084      	sub	sp, #16
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d101      	bne.n	8008686 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8008682:	2301      	movs	r3, #1
 8008684:	e237      	b.n	8008af6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800868c:	b2db      	uxtb	r3, r3
 800868e:	2b02      	cmp	r3, #2
 8008690:	d004      	beq.n	800869c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2280      	movs	r2, #128	; 0x80
 8008696:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008698:	2301      	movs	r3, #1
 800869a:	e22c      	b.n	8008af6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a5c      	ldr	r2, [pc, #368]	; (8008814 <HAL_DMA_Abort_IT+0x1a0>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d04a      	beq.n	800873c <HAL_DMA_Abort_IT+0xc8>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a5b      	ldr	r2, [pc, #364]	; (8008818 <HAL_DMA_Abort_IT+0x1a4>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d045      	beq.n	800873c <HAL_DMA_Abort_IT+0xc8>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a59      	ldr	r2, [pc, #356]	; (800881c <HAL_DMA_Abort_IT+0x1a8>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d040      	beq.n	800873c <HAL_DMA_Abort_IT+0xc8>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4a58      	ldr	r2, [pc, #352]	; (8008820 <HAL_DMA_Abort_IT+0x1ac>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d03b      	beq.n	800873c <HAL_DMA_Abort_IT+0xc8>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a56      	ldr	r2, [pc, #344]	; (8008824 <HAL_DMA_Abort_IT+0x1b0>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d036      	beq.n	800873c <HAL_DMA_Abort_IT+0xc8>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4a55      	ldr	r2, [pc, #340]	; (8008828 <HAL_DMA_Abort_IT+0x1b4>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d031      	beq.n	800873c <HAL_DMA_Abort_IT+0xc8>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a53      	ldr	r2, [pc, #332]	; (800882c <HAL_DMA_Abort_IT+0x1b8>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d02c      	beq.n	800873c <HAL_DMA_Abort_IT+0xc8>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4a52      	ldr	r2, [pc, #328]	; (8008830 <HAL_DMA_Abort_IT+0x1bc>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d027      	beq.n	800873c <HAL_DMA_Abort_IT+0xc8>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a50      	ldr	r2, [pc, #320]	; (8008834 <HAL_DMA_Abort_IT+0x1c0>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d022      	beq.n	800873c <HAL_DMA_Abort_IT+0xc8>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4a4f      	ldr	r2, [pc, #316]	; (8008838 <HAL_DMA_Abort_IT+0x1c4>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d01d      	beq.n	800873c <HAL_DMA_Abort_IT+0xc8>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4a4d      	ldr	r2, [pc, #308]	; (800883c <HAL_DMA_Abort_IT+0x1c8>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d018      	beq.n	800873c <HAL_DMA_Abort_IT+0xc8>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4a4c      	ldr	r2, [pc, #304]	; (8008840 <HAL_DMA_Abort_IT+0x1cc>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d013      	beq.n	800873c <HAL_DMA_Abort_IT+0xc8>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a4a      	ldr	r2, [pc, #296]	; (8008844 <HAL_DMA_Abort_IT+0x1d0>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d00e      	beq.n	800873c <HAL_DMA_Abort_IT+0xc8>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4a49      	ldr	r2, [pc, #292]	; (8008848 <HAL_DMA_Abort_IT+0x1d4>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d009      	beq.n	800873c <HAL_DMA_Abort_IT+0xc8>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4a47      	ldr	r2, [pc, #284]	; (800884c <HAL_DMA_Abort_IT+0x1d8>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d004      	beq.n	800873c <HAL_DMA_Abort_IT+0xc8>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4a46      	ldr	r2, [pc, #280]	; (8008850 <HAL_DMA_Abort_IT+0x1dc>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d101      	bne.n	8008740 <HAL_DMA_Abort_IT+0xcc>
 800873c:	2301      	movs	r3, #1
 800873e:	e000      	b.n	8008742 <HAL_DMA_Abort_IT+0xce>
 8008740:	2300      	movs	r3, #0
 8008742:	2b00      	cmp	r3, #0
 8008744:	f000 8086 	beq.w	8008854 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2204      	movs	r2, #4
 800874c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a2f      	ldr	r2, [pc, #188]	; (8008814 <HAL_DMA_Abort_IT+0x1a0>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d04a      	beq.n	80087f0 <HAL_DMA_Abort_IT+0x17c>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4a2e      	ldr	r2, [pc, #184]	; (8008818 <HAL_DMA_Abort_IT+0x1a4>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d045      	beq.n	80087f0 <HAL_DMA_Abort_IT+0x17c>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4a2c      	ldr	r2, [pc, #176]	; (800881c <HAL_DMA_Abort_IT+0x1a8>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d040      	beq.n	80087f0 <HAL_DMA_Abort_IT+0x17c>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4a2b      	ldr	r2, [pc, #172]	; (8008820 <HAL_DMA_Abort_IT+0x1ac>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d03b      	beq.n	80087f0 <HAL_DMA_Abort_IT+0x17c>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4a29      	ldr	r2, [pc, #164]	; (8008824 <HAL_DMA_Abort_IT+0x1b0>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d036      	beq.n	80087f0 <HAL_DMA_Abort_IT+0x17c>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a28      	ldr	r2, [pc, #160]	; (8008828 <HAL_DMA_Abort_IT+0x1b4>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d031      	beq.n	80087f0 <HAL_DMA_Abort_IT+0x17c>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a26      	ldr	r2, [pc, #152]	; (800882c <HAL_DMA_Abort_IT+0x1b8>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d02c      	beq.n	80087f0 <HAL_DMA_Abort_IT+0x17c>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a25      	ldr	r2, [pc, #148]	; (8008830 <HAL_DMA_Abort_IT+0x1bc>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d027      	beq.n	80087f0 <HAL_DMA_Abort_IT+0x17c>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a23      	ldr	r2, [pc, #140]	; (8008834 <HAL_DMA_Abort_IT+0x1c0>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d022      	beq.n	80087f0 <HAL_DMA_Abort_IT+0x17c>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4a22      	ldr	r2, [pc, #136]	; (8008838 <HAL_DMA_Abort_IT+0x1c4>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d01d      	beq.n	80087f0 <HAL_DMA_Abort_IT+0x17c>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a20      	ldr	r2, [pc, #128]	; (800883c <HAL_DMA_Abort_IT+0x1c8>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d018      	beq.n	80087f0 <HAL_DMA_Abort_IT+0x17c>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4a1f      	ldr	r2, [pc, #124]	; (8008840 <HAL_DMA_Abort_IT+0x1cc>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d013      	beq.n	80087f0 <HAL_DMA_Abort_IT+0x17c>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a1d      	ldr	r2, [pc, #116]	; (8008844 <HAL_DMA_Abort_IT+0x1d0>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d00e      	beq.n	80087f0 <HAL_DMA_Abort_IT+0x17c>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4a1c      	ldr	r2, [pc, #112]	; (8008848 <HAL_DMA_Abort_IT+0x1d4>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d009      	beq.n	80087f0 <HAL_DMA_Abort_IT+0x17c>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a1a      	ldr	r2, [pc, #104]	; (800884c <HAL_DMA_Abort_IT+0x1d8>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d004      	beq.n	80087f0 <HAL_DMA_Abort_IT+0x17c>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a19      	ldr	r2, [pc, #100]	; (8008850 <HAL_DMA_Abort_IT+0x1dc>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d108      	bne.n	8008802 <HAL_DMA_Abort_IT+0x18e>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	681a      	ldr	r2, [r3, #0]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f022 0201 	bic.w	r2, r2, #1
 80087fe:	601a      	str	r2, [r3, #0]
 8008800:	e178      	b.n	8008af4 <HAL_DMA_Abort_IT+0x480>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	681a      	ldr	r2, [r3, #0]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f022 0201 	bic.w	r2, r2, #1
 8008810:	601a      	str	r2, [r3, #0]
 8008812:	e16f      	b.n	8008af4 <HAL_DMA_Abort_IT+0x480>
 8008814:	40020010 	.word	0x40020010
 8008818:	40020028 	.word	0x40020028
 800881c:	40020040 	.word	0x40020040
 8008820:	40020058 	.word	0x40020058
 8008824:	40020070 	.word	0x40020070
 8008828:	40020088 	.word	0x40020088
 800882c:	400200a0 	.word	0x400200a0
 8008830:	400200b8 	.word	0x400200b8
 8008834:	40020410 	.word	0x40020410
 8008838:	40020428 	.word	0x40020428
 800883c:	40020440 	.word	0x40020440
 8008840:	40020458 	.word	0x40020458
 8008844:	40020470 	.word	0x40020470
 8008848:	40020488 	.word	0x40020488
 800884c:	400204a0 	.word	0x400204a0
 8008850:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	681a      	ldr	r2, [r3, #0]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f022 020e 	bic.w	r2, r2, #14
 8008862:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a6c      	ldr	r2, [pc, #432]	; (8008a1c <HAL_DMA_Abort_IT+0x3a8>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d04a      	beq.n	8008904 <HAL_DMA_Abort_IT+0x290>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	4a6b      	ldr	r2, [pc, #428]	; (8008a20 <HAL_DMA_Abort_IT+0x3ac>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d045      	beq.n	8008904 <HAL_DMA_Abort_IT+0x290>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4a69      	ldr	r2, [pc, #420]	; (8008a24 <HAL_DMA_Abort_IT+0x3b0>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d040      	beq.n	8008904 <HAL_DMA_Abort_IT+0x290>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4a68      	ldr	r2, [pc, #416]	; (8008a28 <HAL_DMA_Abort_IT+0x3b4>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d03b      	beq.n	8008904 <HAL_DMA_Abort_IT+0x290>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4a66      	ldr	r2, [pc, #408]	; (8008a2c <HAL_DMA_Abort_IT+0x3b8>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d036      	beq.n	8008904 <HAL_DMA_Abort_IT+0x290>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	4a65      	ldr	r2, [pc, #404]	; (8008a30 <HAL_DMA_Abort_IT+0x3bc>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d031      	beq.n	8008904 <HAL_DMA_Abort_IT+0x290>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4a63      	ldr	r2, [pc, #396]	; (8008a34 <HAL_DMA_Abort_IT+0x3c0>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d02c      	beq.n	8008904 <HAL_DMA_Abort_IT+0x290>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a62      	ldr	r2, [pc, #392]	; (8008a38 <HAL_DMA_Abort_IT+0x3c4>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d027      	beq.n	8008904 <HAL_DMA_Abort_IT+0x290>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4a60      	ldr	r2, [pc, #384]	; (8008a3c <HAL_DMA_Abort_IT+0x3c8>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d022      	beq.n	8008904 <HAL_DMA_Abort_IT+0x290>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4a5f      	ldr	r2, [pc, #380]	; (8008a40 <HAL_DMA_Abort_IT+0x3cc>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d01d      	beq.n	8008904 <HAL_DMA_Abort_IT+0x290>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	4a5d      	ldr	r2, [pc, #372]	; (8008a44 <HAL_DMA_Abort_IT+0x3d0>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d018      	beq.n	8008904 <HAL_DMA_Abort_IT+0x290>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4a5c      	ldr	r2, [pc, #368]	; (8008a48 <HAL_DMA_Abort_IT+0x3d4>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d013      	beq.n	8008904 <HAL_DMA_Abort_IT+0x290>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a5a      	ldr	r2, [pc, #360]	; (8008a4c <HAL_DMA_Abort_IT+0x3d8>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d00e      	beq.n	8008904 <HAL_DMA_Abort_IT+0x290>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a59      	ldr	r2, [pc, #356]	; (8008a50 <HAL_DMA_Abort_IT+0x3dc>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d009      	beq.n	8008904 <HAL_DMA_Abort_IT+0x290>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a57      	ldr	r2, [pc, #348]	; (8008a54 <HAL_DMA_Abort_IT+0x3e0>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d004      	beq.n	8008904 <HAL_DMA_Abort_IT+0x290>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4a56      	ldr	r2, [pc, #344]	; (8008a58 <HAL_DMA_Abort_IT+0x3e4>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d108      	bne.n	8008916 <HAL_DMA_Abort_IT+0x2a2>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	681a      	ldr	r2, [r3, #0]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f022 0201 	bic.w	r2, r2, #1
 8008912:	601a      	str	r2, [r3, #0]
 8008914:	e007      	b.n	8008926 <HAL_DMA_Abort_IT+0x2b2>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	681a      	ldr	r2, [r3, #0]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f022 0201 	bic.w	r2, r2, #1
 8008924:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4a3c      	ldr	r2, [pc, #240]	; (8008a1c <HAL_DMA_Abort_IT+0x3a8>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d072      	beq.n	8008a16 <HAL_DMA_Abort_IT+0x3a2>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4a3a      	ldr	r2, [pc, #232]	; (8008a20 <HAL_DMA_Abort_IT+0x3ac>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d06d      	beq.n	8008a16 <HAL_DMA_Abort_IT+0x3a2>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4a39      	ldr	r2, [pc, #228]	; (8008a24 <HAL_DMA_Abort_IT+0x3b0>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d068      	beq.n	8008a16 <HAL_DMA_Abort_IT+0x3a2>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4a37      	ldr	r2, [pc, #220]	; (8008a28 <HAL_DMA_Abort_IT+0x3b4>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d063      	beq.n	8008a16 <HAL_DMA_Abort_IT+0x3a2>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	4a36      	ldr	r2, [pc, #216]	; (8008a2c <HAL_DMA_Abort_IT+0x3b8>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d05e      	beq.n	8008a16 <HAL_DMA_Abort_IT+0x3a2>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4a34      	ldr	r2, [pc, #208]	; (8008a30 <HAL_DMA_Abort_IT+0x3bc>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d059      	beq.n	8008a16 <HAL_DMA_Abort_IT+0x3a2>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4a33      	ldr	r2, [pc, #204]	; (8008a34 <HAL_DMA_Abort_IT+0x3c0>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d054      	beq.n	8008a16 <HAL_DMA_Abort_IT+0x3a2>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4a31      	ldr	r2, [pc, #196]	; (8008a38 <HAL_DMA_Abort_IT+0x3c4>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d04f      	beq.n	8008a16 <HAL_DMA_Abort_IT+0x3a2>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4a30      	ldr	r2, [pc, #192]	; (8008a3c <HAL_DMA_Abort_IT+0x3c8>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d04a      	beq.n	8008a16 <HAL_DMA_Abort_IT+0x3a2>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4a2e      	ldr	r2, [pc, #184]	; (8008a40 <HAL_DMA_Abort_IT+0x3cc>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d045      	beq.n	8008a16 <HAL_DMA_Abort_IT+0x3a2>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	4a2d      	ldr	r2, [pc, #180]	; (8008a44 <HAL_DMA_Abort_IT+0x3d0>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d040      	beq.n	8008a16 <HAL_DMA_Abort_IT+0x3a2>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	4a2b      	ldr	r2, [pc, #172]	; (8008a48 <HAL_DMA_Abort_IT+0x3d4>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d03b      	beq.n	8008a16 <HAL_DMA_Abort_IT+0x3a2>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	4a2a      	ldr	r2, [pc, #168]	; (8008a4c <HAL_DMA_Abort_IT+0x3d8>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d036      	beq.n	8008a16 <HAL_DMA_Abort_IT+0x3a2>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4a28      	ldr	r2, [pc, #160]	; (8008a50 <HAL_DMA_Abort_IT+0x3dc>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d031      	beq.n	8008a16 <HAL_DMA_Abort_IT+0x3a2>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	4a27      	ldr	r2, [pc, #156]	; (8008a54 <HAL_DMA_Abort_IT+0x3e0>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d02c      	beq.n	8008a16 <HAL_DMA_Abort_IT+0x3a2>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4a25      	ldr	r2, [pc, #148]	; (8008a58 <HAL_DMA_Abort_IT+0x3e4>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d027      	beq.n	8008a16 <HAL_DMA_Abort_IT+0x3a2>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4a24      	ldr	r2, [pc, #144]	; (8008a5c <HAL_DMA_Abort_IT+0x3e8>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d022      	beq.n	8008a16 <HAL_DMA_Abort_IT+0x3a2>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4a22      	ldr	r2, [pc, #136]	; (8008a60 <HAL_DMA_Abort_IT+0x3ec>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d01d      	beq.n	8008a16 <HAL_DMA_Abort_IT+0x3a2>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4a21      	ldr	r2, [pc, #132]	; (8008a64 <HAL_DMA_Abort_IT+0x3f0>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d018      	beq.n	8008a16 <HAL_DMA_Abort_IT+0x3a2>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	4a1f      	ldr	r2, [pc, #124]	; (8008a68 <HAL_DMA_Abort_IT+0x3f4>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d013      	beq.n	8008a16 <HAL_DMA_Abort_IT+0x3a2>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	4a1e      	ldr	r2, [pc, #120]	; (8008a6c <HAL_DMA_Abort_IT+0x3f8>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d00e      	beq.n	8008a16 <HAL_DMA_Abort_IT+0x3a2>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	4a1c      	ldr	r2, [pc, #112]	; (8008a70 <HAL_DMA_Abort_IT+0x3fc>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d009      	beq.n	8008a16 <HAL_DMA_Abort_IT+0x3a2>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	4a1b      	ldr	r2, [pc, #108]	; (8008a74 <HAL_DMA_Abort_IT+0x400>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d004      	beq.n	8008a16 <HAL_DMA_Abort_IT+0x3a2>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4a19      	ldr	r2, [pc, #100]	; (8008a78 <HAL_DMA_Abort_IT+0x404>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d132      	bne.n	8008a7c <HAL_DMA_Abort_IT+0x408>
 8008a16:	2301      	movs	r3, #1
 8008a18:	e031      	b.n	8008a7e <HAL_DMA_Abort_IT+0x40a>
 8008a1a:	bf00      	nop
 8008a1c:	40020010 	.word	0x40020010
 8008a20:	40020028 	.word	0x40020028
 8008a24:	40020040 	.word	0x40020040
 8008a28:	40020058 	.word	0x40020058
 8008a2c:	40020070 	.word	0x40020070
 8008a30:	40020088 	.word	0x40020088
 8008a34:	400200a0 	.word	0x400200a0
 8008a38:	400200b8 	.word	0x400200b8
 8008a3c:	40020410 	.word	0x40020410
 8008a40:	40020428 	.word	0x40020428
 8008a44:	40020440 	.word	0x40020440
 8008a48:	40020458 	.word	0x40020458
 8008a4c:	40020470 	.word	0x40020470
 8008a50:	40020488 	.word	0x40020488
 8008a54:	400204a0 	.word	0x400204a0
 8008a58:	400204b8 	.word	0x400204b8
 8008a5c:	58025408 	.word	0x58025408
 8008a60:	5802541c 	.word	0x5802541c
 8008a64:	58025430 	.word	0x58025430
 8008a68:	58025444 	.word	0x58025444
 8008a6c:	58025458 	.word	0x58025458
 8008a70:	5802546c 	.word	0x5802546c
 8008a74:	58025480 	.word	0x58025480
 8008a78:	58025494 	.word	0x58025494
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d028      	beq.n	8008ad4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a86:	681a      	ldr	r2, [r3, #0]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008a90:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a96:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a9c:	f003 031f 	and.w	r3, r3, #31
 8008aa0:	2201      	movs	r2, #1
 8008aa2:	409a      	lsls	r2, r3
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008aac:	687a      	ldr	r2, [r7, #4]
 8008aae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008ab0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d00c      	beq.n	8008ad4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008abe:	681a      	ldr	r2, [r3, #0]
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ac4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008ac8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ace:	687a      	ldr	r2, [r7, #4]
 8008ad0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008ad2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d003      	beq.n	8008af4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8008af4:	2300      	movs	r3, #0
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3710      	adds	r7, #16
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}
 8008afe:	bf00      	nop

08008b00 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b08a      	sub	sp, #40	; 0x28
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008b0c:	4b67      	ldr	r3, [pc, #412]	; (8008cac <HAL_DMA_IRQHandler+0x1ac>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4a67      	ldr	r2, [pc, #412]	; (8008cb0 <HAL_DMA_IRQHandler+0x1b0>)
 8008b12:	fba2 2303 	umull	r2, r3, r2, r3
 8008b16:	0a9b      	lsrs	r3, r3, #10
 8008b18:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b1e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b24:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8008b26:	6a3b      	ldr	r3, [r7, #32]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8008b2c:	69fb      	ldr	r3, [r7, #28]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	4a5f      	ldr	r2, [pc, #380]	; (8008cb4 <HAL_DMA_IRQHandler+0x1b4>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d04a      	beq.n	8008bd2 <HAL_DMA_IRQHandler+0xd2>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4a5d      	ldr	r2, [pc, #372]	; (8008cb8 <HAL_DMA_IRQHandler+0x1b8>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d045      	beq.n	8008bd2 <HAL_DMA_IRQHandler+0xd2>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4a5c      	ldr	r2, [pc, #368]	; (8008cbc <HAL_DMA_IRQHandler+0x1bc>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d040      	beq.n	8008bd2 <HAL_DMA_IRQHandler+0xd2>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	4a5a      	ldr	r2, [pc, #360]	; (8008cc0 <HAL_DMA_IRQHandler+0x1c0>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d03b      	beq.n	8008bd2 <HAL_DMA_IRQHandler+0xd2>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	4a59      	ldr	r2, [pc, #356]	; (8008cc4 <HAL_DMA_IRQHandler+0x1c4>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d036      	beq.n	8008bd2 <HAL_DMA_IRQHandler+0xd2>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4a57      	ldr	r2, [pc, #348]	; (8008cc8 <HAL_DMA_IRQHandler+0x1c8>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d031      	beq.n	8008bd2 <HAL_DMA_IRQHandler+0xd2>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	4a56      	ldr	r2, [pc, #344]	; (8008ccc <HAL_DMA_IRQHandler+0x1cc>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d02c      	beq.n	8008bd2 <HAL_DMA_IRQHandler+0xd2>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4a54      	ldr	r2, [pc, #336]	; (8008cd0 <HAL_DMA_IRQHandler+0x1d0>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d027      	beq.n	8008bd2 <HAL_DMA_IRQHandler+0xd2>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4a53      	ldr	r2, [pc, #332]	; (8008cd4 <HAL_DMA_IRQHandler+0x1d4>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d022      	beq.n	8008bd2 <HAL_DMA_IRQHandler+0xd2>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	4a51      	ldr	r2, [pc, #324]	; (8008cd8 <HAL_DMA_IRQHandler+0x1d8>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d01d      	beq.n	8008bd2 <HAL_DMA_IRQHandler+0xd2>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4a50      	ldr	r2, [pc, #320]	; (8008cdc <HAL_DMA_IRQHandler+0x1dc>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d018      	beq.n	8008bd2 <HAL_DMA_IRQHandler+0xd2>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4a4e      	ldr	r2, [pc, #312]	; (8008ce0 <HAL_DMA_IRQHandler+0x1e0>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d013      	beq.n	8008bd2 <HAL_DMA_IRQHandler+0xd2>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4a4d      	ldr	r2, [pc, #308]	; (8008ce4 <HAL_DMA_IRQHandler+0x1e4>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d00e      	beq.n	8008bd2 <HAL_DMA_IRQHandler+0xd2>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4a4b      	ldr	r2, [pc, #300]	; (8008ce8 <HAL_DMA_IRQHandler+0x1e8>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d009      	beq.n	8008bd2 <HAL_DMA_IRQHandler+0xd2>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	4a4a      	ldr	r2, [pc, #296]	; (8008cec <HAL_DMA_IRQHandler+0x1ec>)
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d004      	beq.n	8008bd2 <HAL_DMA_IRQHandler+0xd2>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	4a48      	ldr	r2, [pc, #288]	; (8008cf0 <HAL_DMA_IRQHandler+0x1f0>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d101      	bne.n	8008bd6 <HAL_DMA_IRQHandler+0xd6>
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	e000      	b.n	8008bd8 <HAL_DMA_IRQHandler+0xd8>
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	f000 842b 	beq.w	8009434 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008be2:	f003 031f 	and.w	r3, r3, #31
 8008be6:	2208      	movs	r2, #8
 8008be8:	409a      	lsls	r2, r3
 8008bea:	69bb      	ldr	r3, [r7, #24]
 8008bec:	4013      	ands	r3, r2
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	f000 80a2 	beq.w	8008d38 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4a2e      	ldr	r2, [pc, #184]	; (8008cb4 <HAL_DMA_IRQHandler+0x1b4>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d04a      	beq.n	8008c94 <HAL_DMA_IRQHandler+0x194>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	4a2d      	ldr	r2, [pc, #180]	; (8008cb8 <HAL_DMA_IRQHandler+0x1b8>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d045      	beq.n	8008c94 <HAL_DMA_IRQHandler+0x194>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	4a2b      	ldr	r2, [pc, #172]	; (8008cbc <HAL_DMA_IRQHandler+0x1bc>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d040      	beq.n	8008c94 <HAL_DMA_IRQHandler+0x194>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4a2a      	ldr	r2, [pc, #168]	; (8008cc0 <HAL_DMA_IRQHandler+0x1c0>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d03b      	beq.n	8008c94 <HAL_DMA_IRQHandler+0x194>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4a28      	ldr	r2, [pc, #160]	; (8008cc4 <HAL_DMA_IRQHandler+0x1c4>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d036      	beq.n	8008c94 <HAL_DMA_IRQHandler+0x194>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4a27      	ldr	r2, [pc, #156]	; (8008cc8 <HAL_DMA_IRQHandler+0x1c8>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d031      	beq.n	8008c94 <HAL_DMA_IRQHandler+0x194>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4a25      	ldr	r2, [pc, #148]	; (8008ccc <HAL_DMA_IRQHandler+0x1cc>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d02c      	beq.n	8008c94 <HAL_DMA_IRQHandler+0x194>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	4a24      	ldr	r2, [pc, #144]	; (8008cd0 <HAL_DMA_IRQHandler+0x1d0>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d027      	beq.n	8008c94 <HAL_DMA_IRQHandler+0x194>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4a22      	ldr	r2, [pc, #136]	; (8008cd4 <HAL_DMA_IRQHandler+0x1d4>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d022      	beq.n	8008c94 <HAL_DMA_IRQHandler+0x194>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4a21      	ldr	r2, [pc, #132]	; (8008cd8 <HAL_DMA_IRQHandler+0x1d8>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d01d      	beq.n	8008c94 <HAL_DMA_IRQHandler+0x194>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4a1f      	ldr	r2, [pc, #124]	; (8008cdc <HAL_DMA_IRQHandler+0x1dc>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d018      	beq.n	8008c94 <HAL_DMA_IRQHandler+0x194>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4a1e      	ldr	r2, [pc, #120]	; (8008ce0 <HAL_DMA_IRQHandler+0x1e0>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d013      	beq.n	8008c94 <HAL_DMA_IRQHandler+0x194>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4a1c      	ldr	r2, [pc, #112]	; (8008ce4 <HAL_DMA_IRQHandler+0x1e4>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d00e      	beq.n	8008c94 <HAL_DMA_IRQHandler+0x194>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4a1b      	ldr	r2, [pc, #108]	; (8008ce8 <HAL_DMA_IRQHandler+0x1e8>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d009      	beq.n	8008c94 <HAL_DMA_IRQHandler+0x194>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a19      	ldr	r2, [pc, #100]	; (8008cec <HAL_DMA_IRQHandler+0x1ec>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d004      	beq.n	8008c94 <HAL_DMA_IRQHandler+0x194>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	4a18      	ldr	r2, [pc, #96]	; (8008cf0 <HAL_DMA_IRQHandler+0x1f0>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d12f      	bne.n	8008cf4 <HAL_DMA_IRQHandler+0x1f4>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f003 0304 	and.w	r3, r3, #4
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	bf14      	ite	ne
 8008ca2:	2301      	movne	r3, #1
 8008ca4:	2300      	moveq	r3, #0
 8008ca6:	b2db      	uxtb	r3, r3
 8008ca8:	e02e      	b.n	8008d08 <HAL_DMA_IRQHandler+0x208>
 8008caa:	bf00      	nop
 8008cac:	24000000 	.word	0x24000000
 8008cb0:	1b4e81b5 	.word	0x1b4e81b5
 8008cb4:	40020010 	.word	0x40020010
 8008cb8:	40020028 	.word	0x40020028
 8008cbc:	40020040 	.word	0x40020040
 8008cc0:	40020058 	.word	0x40020058
 8008cc4:	40020070 	.word	0x40020070
 8008cc8:	40020088 	.word	0x40020088
 8008ccc:	400200a0 	.word	0x400200a0
 8008cd0:	400200b8 	.word	0x400200b8
 8008cd4:	40020410 	.word	0x40020410
 8008cd8:	40020428 	.word	0x40020428
 8008cdc:	40020440 	.word	0x40020440
 8008ce0:	40020458 	.word	0x40020458
 8008ce4:	40020470 	.word	0x40020470
 8008ce8:	40020488 	.word	0x40020488
 8008cec:	400204a0 	.word	0x400204a0
 8008cf0:	400204b8 	.word	0x400204b8
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f003 0308 	and.w	r3, r3, #8
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	bf14      	ite	ne
 8008d02:	2301      	movne	r3, #1
 8008d04:	2300      	moveq	r3, #0
 8008d06:	b2db      	uxtb	r3, r3
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d015      	beq.n	8008d38 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	681a      	ldr	r2, [r3, #0]
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f022 0204 	bic.w	r2, r2, #4
 8008d1a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d20:	f003 031f 	and.w	r3, r3, #31
 8008d24:	2208      	movs	r2, #8
 8008d26:	409a      	lsls	r2, r3
 8008d28:	6a3b      	ldr	r3, [r7, #32]
 8008d2a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d30:	f043 0201 	orr.w	r2, r3, #1
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d3c:	f003 031f 	and.w	r3, r3, #31
 8008d40:	69ba      	ldr	r2, [r7, #24]
 8008d42:	fa22 f303 	lsr.w	r3, r2, r3
 8008d46:	f003 0301 	and.w	r3, r3, #1
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d06e      	beq.n	8008e2c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	4a69      	ldr	r2, [pc, #420]	; (8008ef8 <HAL_DMA_IRQHandler+0x3f8>)
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d04a      	beq.n	8008dee <HAL_DMA_IRQHandler+0x2ee>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a67      	ldr	r2, [pc, #412]	; (8008efc <HAL_DMA_IRQHandler+0x3fc>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d045      	beq.n	8008dee <HAL_DMA_IRQHandler+0x2ee>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4a66      	ldr	r2, [pc, #408]	; (8008f00 <HAL_DMA_IRQHandler+0x400>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d040      	beq.n	8008dee <HAL_DMA_IRQHandler+0x2ee>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a64      	ldr	r2, [pc, #400]	; (8008f04 <HAL_DMA_IRQHandler+0x404>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d03b      	beq.n	8008dee <HAL_DMA_IRQHandler+0x2ee>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4a63      	ldr	r2, [pc, #396]	; (8008f08 <HAL_DMA_IRQHandler+0x408>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d036      	beq.n	8008dee <HAL_DMA_IRQHandler+0x2ee>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4a61      	ldr	r2, [pc, #388]	; (8008f0c <HAL_DMA_IRQHandler+0x40c>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d031      	beq.n	8008dee <HAL_DMA_IRQHandler+0x2ee>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	4a60      	ldr	r2, [pc, #384]	; (8008f10 <HAL_DMA_IRQHandler+0x410>)
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d02c      	beq.n	8008dee <HAL_DMA_IRQHandler+0x2ee>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	4a5e      	ldr	r2, [pc, #376]	; (8008f14 <HAL_DMA_IRQHandler+0x414>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d027      	beq.n	8008dee <HAL_DMA_IRQHandler+0x2ee>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	4a5d      	ldr	r2, [pc, #372]	; (8008f18 <HAL_DMA_IRQHandler+0x418>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d022      	beq.n	8008dee <HAL_DMA_IRQHandler+0x2ee>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4a5b      	ldr	r2, [pc, #364]	; (8008f1c <HAL_DMA_IRQHandler+0x41c>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d01d      	beq.n	8008dee <HAL_DMA_IRQHandler+0x2ee>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	4a5a      	ldr	r2, [pc, #360]	; (8008f20 <HAL_DMA_IRQHandler+0x420>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d018      	beq.n	8008dee <HAL_DMA_IRQHandler+0x2ee>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4a58      	ldr	r2, [pc, #352]	; (8008f24 <HAL_DMA_IRQHandler+0x424>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d013      	beq.n	8008dee <HAL_DMA_IRQHandler+0x2ee>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	4a57      	ldr	r2, [pc, #348]	; (8008f28 <HAL_DMA_IRQHandler+0x428>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d00e      	beq.n	8008dee <HAL_DMA_IRQHandler+0x2ee>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	4a55      	ldr	r2, [pc, #340]	; (8008f2c <HAL_DMA_IRQHandler+0x42c>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d009      	beq.n	8008dee <HAL_DMA_IRQHandler+0x2ee>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	4a54      	ldr	r2, [pc, #336]	; (8008f30 <HAL_DMA_IRQHandler+0x430>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d004      	beq.n	8008dee <HAL_DMA_IRQHandler+0x2ee>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	4a52      	ldr	r2, [pc, #328]	; (8008f34 <HAL_DMA_IRQHandler+0x434>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d10a      	bne.n	8008e04 <HAL_DMA_IRQHandler+0x304>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	695b      	ldr	r3, [r3, #20]
 8008df4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	bf14      	ite	ne
 8008dfc:	2301      	movne	r3, #1
 8008dfe:	2300      	moveq	r3, #0
 8008e00:	b2db      	uxtb	r3, r3
 8008e02:	e003      	b.n	8008e0c <HAL_DMA_IRQHandler+0x30c>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d00d      	beq.n	8008e2c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e14:	f003 031f 	and.w	r3, r3, #31
 8008e18:	2201      	movs	r2, #1
 8008e1a:	409a      	lsls	r2, r3
 8008e1c:	6a3b      	ldr	r3, [r7, #32]
 8008e1e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e24:	f043 0202 	orr.w	r2, r3, #2
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e30:	f003 031f 	and.w	r3, r3, #31
 8008e34:	2204      	movs	r2, #4
 8008e36:	409a      	lsls	r2, r3
 8008e38:	69bb      	ldr	r3, [r7, #24]
 8008e3a:	4013      	ands	r3, r2
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	f000 808f 	beq.w	8008f60 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4a2c      	ldr	r2, [pc, #176]	; (8008ef8 <HAL_DMA_IRQHandler+0x3f8>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d04a      	beq.n	8008ee2 <HAL_DMA_IRQHandler+0x3e2>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a2a      	ldr	r2, [pc, #168]	; (8008efc <HAL_DMA_IRQHandler+0x3fc>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d045      	beq.n	8008ee2 <HAL_DMA_IRQHandler+0x3e2>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4a29      	ldr	r2, [pc, #164]	; (8008f00 <HAL_DMA_IRQHandler+0x400>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d040      	beq.n	8008ee2 <HAL_DMA_IRQHandler+0x3e2>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a27      	ldr	r2, [pc, #156]	; (8008f04 <HAL_DMA_IRQHandler+0x404>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d03b      	beq.n	8008ee2 <HAL_DMA_IRQHandler+0x3e2>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4a26      	ldr	r2, [pc, #152]	; (8008f08 <HAL_DMA_IRQHandler+0x408>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d036      	beq.n	8008ee2 <HAL_DMA_IRQHandler+0x3e2>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4a24      	ldr	r2, [pc, #144]	; (8008f0c <HAL_DMA_IRQHandler+0x40c>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d031      	beq.n	8008ee2 <HAL_DMA_IRQHandler+0x3e2>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4a23      	ldr	r2, [pc, #140]	; (8008f10 <HAL_DMA_IRQHandler+0x410>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d02c      	beq.n	8008ee2 <HAL_DMA_IRQHandler+0x3e2>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a21      	ldr	r2, [pc, #132]	; (8008f14 <HAL_DMA_IRQHandler+0x414>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d027      	beq.n	8008ee2 <HAL_DMA_IRQHandler+0x3e2>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a20      	ldr	r2, [pc, #128]	; (8008f18 <HAL_DMA_IRQHandler+0x418>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d022      	beq.n	8008ee2 <HAL_DMA_IRQHandler+0x3e2>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4a1e      	ldr	r2, [pc, #120]	; (8008f1c <HAL_DMA_IRQHandler+0x41c>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d01d      	beq.n	8008ee2 <HAL_DMA_IRQHandler+0x3e2>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4a1d      	ldr	r2, [pc, #116]	; (8008f20 <HAL_DMA_IRQHandler+0x420>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d018      	beq.n	8008ee2 <HAL_DMA_IRQHandler+0x3e2>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4a1b      	ldr	r2, [pc, #108]	; (8008f24 <HAL_DMA_IRQHandler+0x424>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d013      	beq.n	8008ee2 <HAL_DMA_IRQHandler+0x3e2>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	4a1a      	ldr	r2, [pc, #104]	; (8008f28 <HAL_DMA_IRQHandler+0x428>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d00e      	beq.n	8008ee2 <HAL_DMA_IRQHandler+0x3e2>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4a18      	ldr	r2, [pc, #96]	; (8008f2c <HAL_DMA_IRQHandler+0x42c>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d009      	beq.n	8008ee2 <HAL_DMA_IRQHandler+0x3e2>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	4a17      	ldr	r2, [pc, #92]	; (8008f30 <HAL_DMA_IRQHandler+0x430>)
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d004      	beq.n	8008ee2 <HAL_DMA_IRQHandler+0x3e2>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	4a15      	ldr	r2, [pc, #84]	; (8008f34 <HAL_DMA_IRQHandler+0x434>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d12a      	bne.n	8008f38 <HAL_DMA_IRQHandler+0x438>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f003 0302 	and.w	r3, r3, #2
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	bf14      	ite	ne
 8008ef0:	2301      	movne	r3, #1
 8008ef2:	2300      	moveq	r3, #0
 8008ef4:	b2db      	uxtb	r3, r3
 8008ef6:	e023      	b.n	8008f40 <HAL_DMA_IRQHandler+0x440>
 8008ef8:	40020010 	.word	0x40020010
 8008efc:	40020028 	.word	0x40020028
 8008f00:	40020040 	.word	0x40020040
 8008f04:	40020058 	.word	0x40020058
 8008f08:	40020070 	.word	0x40020070
 8008f0c:	40020088 	.word	0x40020088
 8008f10:	400200a0 	.word	0x400200a0
 8008f14:	400200b8 	.word	0x400200b8
 8008f18:	40020410 	.word	0x40020410
 8008f1c:	40020428 	.word	0x40020428
 8008f20:	40020440 	.word	0x40020440
 8008f24:	40020458 	.word	0x40020458
 8008f28:	40020470 	.word	0x40020470
 8008f2c:	40020488 	.word	0x40020488
 8008f30:	400204a0 	.word	0x400204a0
 8008f34:	400204b8 	.word	0x400204b8
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	2300      	movs	r3, #0
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d00d      	beq.n	8008f60 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f48:	f003 031f 	and.w	r3, r3, #31
 8008f4c:	2204      	movs	r2, #4
 8008f4e:	409a      	lsls	r2, r3
 8008f50:	6a3b      	ldr	r3, [r7, #32]
 8008f52:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f58:	f043 0204 	orr.w	r2, r3, #4
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f64:	f003 031f 	and.w	r3, r3, #31
 8008f68:	2210      	movs	r2, #16
 8008f6a:	409a      	lsls	r2, r3
 8008f6c:	69bb      	ldr	r3, [r7, #24]
 8008f6e:	4013      	ands	r3, r2
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	f000 80a6 	beq.w	80090c2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4a85      	ldr	r2, [pc, #532]	; (8009190 <HAL_DMA_IRQHandler+0x690>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d04a      	beq.n	8009016 <HAL_DMA_IRQHandler+0x516>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4a83      	ldr	r2, [pc, #524]	; (8009194 <HAL_DMA_IRQHandler+0x694>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d045      	beq.n	8009016 <HAL_DMA_IRQHandler+0x516>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	4a82      	ldr	r2, [pc, #520]	; (8009198 <HAL_DMA_IRQHandler+0x698>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d040      	beq.n	8009016 <HAL_DMA_IRQHandler+0x516>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	4a80      	ldr	r2, [pc, #512]	; (800919c <HAL_DMA_IRQHandler+0x69c>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d03b      	beq.n	8009016 <HAL_DMA_IRQHandler+0x516>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4a7f      	ldr	r2, [pc, #508]	; (80091a0 <HAL_DMA_IRQHandler+0x6a0>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d036      	beq.n	8009016 <HAL_DMA_IRQHandler+0x516>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	4a7d      	ldr	r2, [pc, #500]	; (80091a4 <HAL_DMA_IRQHandler+0x6a4>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d031      	beq.n	8009016 <HAL_DMA_IRQHandler+0x516>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	4a7c      	ldr	r2, [pc, #496]	; (80091a8 <HAL_DMA_IRQHandler+0x6a8>)
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d02c      	beq.n	8009016 <HAL_DMA_IRQHandler+0x516>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a7a      	ldr	r2, [pc, #488]	; (80091ac <HAL_DMA_IRQHandler+0x6ac>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d027      	beq.n	8009016 <HAL_DMA_IRQHandler+0x516>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	4a79      	ldr	r2, [pc, #484]	; (80091b0 <HAL_DMA_IRQHandler+0x6b0>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d022      	beq.n	8009016 <HAL_DMA_IRQHandler+0x516>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4a77      	ldr	r2, [pc, #476]	; (80091b4 <HAL_DMA_IRQHandler+0x6b4>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d01d      	beq.n	8009016 <HAL_DMA_IRQHandler+0x516>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4a76      	ldr	r2, [pc, #472]	; (80091b8 <HAL_DMA_IRQHandler+0x6b8>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d018      	beq.n	8009016 <HAL_DMA_IRQHandler+0x516>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4a74      	ldr	r2, [pc, #464]	; (80091bc <HAL_DMA_IRQHandler+0x6bc>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d013      	beq.n	8009016 <HAL_DMA_IRQHandler+0x516>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	4a73      	ldr	r2, [pc, #460]	; (80091c0 <HAL_DMA_IRQHandler+0x6c0>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d00e      	beq.n	8009016 <HAL_DMA_IRQHandler+0x516>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	4a71      	ldr	r2, [pc, #452]	; (80091c4 <HAL_DMA_IRQHandler+0x6c4>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d009      	beq.n	8009016 <HAL_DMA_IRQHandler+0x516>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	4a70      	ldr	r2, [pc, #448]	; (80091c8 <HAL_DMA_IRQHandler+0x6c8>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d004      	beq.n	8009016 <HAL_DMA_IRQHandler+0x516>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4a6e      	ldr	r2, [pc, #440]	; (80091cc <HAL_DMA_IRQHandler+0x6cc>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d10a      	bne.n	800902c <HAL_DMA_IRQHandler+0x52c>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f003 0308 	and.w	r3, r3, #8
 8009020:	2b00      	cmp	r3, #0
 8009022:	bf14      	ite	ne
 8009024:	2301      	movne	r3, #1
 8009026:	2300      	moveq	r3, #0
 8009028:	b2db      	uxtb	r3, r3
 800902a:	e009      	b.n	8009040 <HAL_DMA_IRQHandler+0x540>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f003 0304 	and.w	r3, r3, #4
 8009036:	2b00      	cmp	r3, #0
 8009038:	bf14      	ite	ne
 800903a:	2301      	movne	r3, #1
 800903c:	2300      	moveq	r3, #0
 800903e:	b2db      	uxtb	r3, r3
 8009040:	2b00      	cmp	r3, #0
 8009042:	d03e      	beq.n	80090c2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009048:	f003 031f 	and.w	r3, r3, #31
 800904c:	2210      	movs	r2, #16
 800904e:	409a      	lsls	r2, r3
 8009050:	6a3b      	ldr	r3, [r7, #32]
 8009052:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800905e:	2b00      	cmp	r3, #0
 8009060:	d018      	beq.n	8009094 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800906c:	2b00      	cmp	r3, #0
 800906e:	d108      	bne.n	8009082 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009074:	2b00      	cmp	r3, #0
 8009076:	d024      	beq.n	80090c2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	4798      	blx	r3
 8009080:	e01f      	b.n	80090c2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009086:	2b00      	cmp	r3, #0
 8009088:	d01b      	beq.n	80090c2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	4798      	blx	r3
 8009092:	e016      	b.n	80090c2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d107      	bne.n	80090b2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	681a      	ldr	r2, [r3, #0]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f022 0208 	bic.w	r2, r2, #8
 80090b0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d003      	beq.n	80090c2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090c6:	f003 031f 	and.w	r3, r3, #31
 80090ca:	2220      	movs	r2, #32
 80090cc:	409a      	lsls	r2, r3
 80090ce:	69bb      	ldr	r3, [r7, #24]
 80090d0:	4013      	ands	r3, r2
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	f000 8110 	beq.w	80092f8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	4a2c      	ldr	r2, [pc, #176]	; (8009190 <HAL_DMA_IRQHandler+0x690>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d04a      	beq.n	8009178 <HAL_DMA_IRQHandler+0x678>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	4a2b      	ldr	r2, [pc, #172]	; (8009194 <HAL_DMA_IRQHandler+0x694>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d045      	beq.n	8009178 <HAL_DMA_IRQHandler+0x678>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4a29      	ldr	r2, [pc, #164]	; (8009198 <HAL_DMA_IRQHandler+0x698>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d040      	beq.n	8009178 <HAL_DMA_IRQHandler+0x678>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	4a28      	ldr	r2, [pc, #160]	; (800919c <HAL_DMA_IRQHandler+0x69c>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d03b      	beq.n	8009178 <HAL_DMA_IRQHandler+0x678>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4a26      	ldr	r2, [pc, #152]	; (80091a0 <HAL_DMA_IRQHandler+0x6a0>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d036      	beq.n	8009178 <HAL_DMA_IRQHandler+0x678>
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	4a25      	ldr	r2, [pc, #148]	; (80091a4 <HAL_DMA_IRQHandler+0x6a4>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d031      	beq.n	8009178 <HAL_DMA_IRQHandler+0x678>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	4a23      	ldr	r2, [pc, #140]	; (80091a8 <HAL_DMA_IRQHandler+0x6a8>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d02c      	beq.n	8009178 <HAL_DMA_IRQHandler+0x678>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	4a22      	ldr	r2, [pc, #136]	; (80091ac <HAL_DMA_IRQHandler+0x6ac>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d027      	beq.n	8009178 <HAL_DMA_IRQHandler+0x678>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	4a20      	ldr	r2, [pc, #128]	; (80091b0 <HAL_DMA_IRQHandler+0x6b0>)
 800912e:	4293      	cmp	r3, r2
 8009130:	d022      	beq.n	8009178 <HAL_DMA_IRQHandler+0x678>
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	4a1f      	ldr	r2, [pc, #124]	; (80091b4 <HAL_DMA_IRQHandler+0x6b4>)
 8009138:	4293      	cmp	r3, r2
 800913a:	d01d      	beq.n	8009178 <HAL_DMA_IRQHandler+0x678>
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	4a1d      	ldr	r2, [pc, #116]	; (80091b8 <HAL_DMA_IRQHandler+0x6b8>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d018      	beq.n	8009178 <HAL_DMA_IRQHandler+0x678>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	4a1c      	ldr	r2, [pc, #112]	; (80091bc <HAL_DMA_IRQHandler+0x6bc>)
 800914c:	4293      	cmp	r3, r2
 800914e:	d013      	beq.n	8009178 <HAL_DMA_IRQHandler+0x678>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4a1a      	ldr	r2, [pc, #104]	; (80091c0 <HAL_DMA_IRQHandler+0x6c0>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d00e      	beq.n	8009178 <HAL_DMA_IRQHandler+0x678>
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	4a19      	ldr	r2, [pc, #100]	; (80091c4 <HAL_DMA_IRQHandler+0x6c4>)
 8009160:	4293      	cmp	r3, r2
 8009162:	d009      	beq.n	8009178 <HAL_DMA_IRQHandler+0x678>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4a17      	ldr	r2, [pc, #92]	; (80091c8 <HAL_DMA_IRQHandler+0x6c8>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d004      	beq.n	8009178 <HAL_DMA_IRQHandler+0x678>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4a16      	ldr	r2, [pc, #88]	; (80091cc <HAL_DMA_IRQHandler+0x6cc>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d12b      	bne.n	80091d0 <HAL_DMA_IRQHandler+0x6d0>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f003 0310 	and.w	r3, r3, #16
 8009182:	2b00      	cmp	r3, #0
 8009184:	bf14      	ite	ne
 8009186:	2301      	movne	r3, #1
 8009188:	2300      	moveq	r3, #0
 800918a:	b2db      	uxtb	r3, r3
 800918c:	e02a      	b.n	80091e4 <HAL_DMA_IRQHandler+0x6e4>
 800918e:	bf00      	nop
 8009190:	40020010 	.word	0x40020010
 8009194:	40020028 	.word	0x40020028
 8009198:	40020040 	.word	0x40020040
 800919c:	40020058 	.word	0x40020058
 80091a0:	40020070 	.word	0x40020070
 80091a4:	40020088 	.word	0x40020088
 80091a8:	400200a0 	.word	0x400200a0
 80091ac:	400200b8 	.word	0x400200b8
 80091b0:	40020410 	.word	0x40020410
 80091b4:	40020428 	.word	0x40020428
 80091b8:	40020440 	.word	0x40020440
 80091bc:	40020458 	.word	0x40020458
 80091c0:	40020470 	.word	0x40020470
 80091c4:	40020488 	.word	0x40020488
 80091c8:	400204a0 	.word	0x400204a0
 80091cc:	400204b8 	.word	0x400204b8
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f003 0302 	and.w	r3, r3, #2
 80091da:	2b00      	cmp	r3, #0
 80091dc:	bf14      	ite	ne
 80091de:	2301      	movne	r3, #1
 80091e0:	2300      	moveq	r3, #0
 80091e2:	b2db      	uxtb	r3, r3
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	f000 8087 	beq.w	80092f8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091ee:	f003 031f 	and.w	r3, r3, #31
 80091f2:	2220      	movs	r2, #32
 80091f4:	409a      	lsls	r2, r3
 80091f6:	6a3b      	ldr	r3, [r7, #32]
 80091f8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009200:	b2db      	uxtb	r3, r3
 8009202:	2b04      	cmp	r3, #4
 8009204:	d139      	bne.n	800927a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	681a      	ldr	r2, [r3, #0]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f022 0216 	bic.w	r2, r2, #22
 8009214:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	695a      	ldr	r2, [r3, #20]
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009224:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800922a:	2b00      	cmp	r3, #0
 800922c:	d103      	bne.n	8009236 <HAL_DMA_IRQHandler+0x736>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009232:	2b00      	cmp	r3, #0
 8009234:	d007      	beq.n	8009246 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	681a      	ldr	r2, [r3, #0]
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f022 0208 	bic.w	r2, r2, #8
 8009244:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800924a:	f003 031f 	and.w	r3, r3, #31
 800924e:	223f      	movs	r2, #63	; 0x3f
 8009250:	409a      	lsls	r2, r3
 8009252:	6a3b      	ldr	r3, [r7, #32]
 8009254:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2201      	movs	r2, #1
 800925a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2200      	movs	r2, #0
 8009262:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800926a:	2b00      	cmp	r3, #0
 800926c:	f000 834a 	beq.w	8009904 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	4798      	blx	r3
          }
          return;
 8009278:	e344      	b.n	8009904 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009284:	2b00      	cmp	r3, #0
 8009286:	d018      	beq.n	80092ba <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009292:	2b00      	cmp	r3, #0
 8009294:	d108      	bne.n	80092a8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800929a:	2b00      	cmp	r3, #0
 800929c:	d02c      	beq.n	80092f8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	4798      	blx	r3
 80092a6:	e027      	b.n	80092f8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d023      	beq.n	80092f8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	4798      	blx	r3
 80092b8:	e01e      	b.n	80092f8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d10f      	bne.n	80092e8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	681a      	ldr	r2, [r3, #0]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f022 0210 	bic.w	r2, r2, #16
 80092d6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2201      	movs	r2, #1
 80092dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2200      	movs	r2, #0
 80092e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d003      	beq.n	80092f8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	f000 8306 	beq.w	800990e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009306:	f003 0301 	and.w	r3, r3, #1
 800930a:	2b00      	cmp	r3, #0
 800930c:	f000 8088 	beq.w	8009420 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2204      	movs	r2, #4
 8009314:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	4a7a      	ldr	r2, [pc, #488]	; (8009508 <HAL_DMA_IRQHandler+0xa08>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d04a      	beq.n	80093b8 <HAL_DMA_IRQHandler+0x8b8>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4a79      	ldr	r2, [pc, #484]	; (800950c <HAL_DMA_IRQHandler+0xa0c>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d045      	beq.n	80093b8 <HAL_DMA_IRQHandler+0x8b8>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4a77      	ldr	r2, [pc, #476]	; (8009510 <HAL_DMA_IRQHandler+0xa10>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d040      	beq.n	80093b8 <HAL_DMA_IRQHandler+0x8b8>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a76      	ldr	r2, [pc, #472]	; (8009514 <HAL_DMA_IRQHandler+0xa14>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d03b      	beq.n	80093b8 <HAL_DMA_IRQHandler+0x8b8>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4a74      	ldr	r2, [pc, #464]	; (8009518 <HAL_DMA_IRQHandler+0xa18>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d036      	beq.n	80093b8 <HAL_DMA_IRQHandler+0x8b8>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4a73      	ldr	r2, [pc, #460]	; (800951c <HAL_DMA_IRQHandler+0xa1c>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d031      	beq.n	80093b8 <HAL_DMA_IRQHandler+0x8b8>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4a71      	ldr	r2, [pc, #452]	; (8009520 <HAL_DMA_IRQHandler+0xa20>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d02c      	beq.n	80093b8 <HAL_DMA_IRQHandler+0x8b8>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	4a70      	ldr	r2, [pc, #448]	; (8009524 <HAL_DMA_IRQHandler+0xa24>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d027      	beq.n	80093b8 <HAL_DMA_IRQHandler+0x8b8>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4a6e      	ldr	r2, [pc, #440]	; (8009528 <HAL_DMA_IRQHandler+0xa28>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d022      	beq.n	80093b8 <HAL_DMA_IRQHandler+0x8b8>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	4a6d      	ldr	r2, [pc, #436]	; (800952c <HAL_DMA_IRQHandler+0xa2c>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d01d      	beq.n	80093b8 <HAL_DMA_IRQHandler+0x8b8>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4a6b      	ldr	r2, [pc, #428]	; (8009530 <HAL_DMA_IRQHandler+0xa30>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d018      	beq.n	80093b8 <HAL_DMA_IRQHandler+0x8b8>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	4a6a      	ldr	r2, [pc, #424]	; (8009534 <HAL_DMA_IRQHandler+0xa34>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d013      	beq.n	80093b8 <HAL_DMA_IRQHandler+0x8b8>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	4a68      	ldr	r2, [pc, #416]	; (8009538 <HAL_DMA_IRQHandler+0xa38>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d00e      	beq.n	80093b8 <HAL_DMA_IRQHandler+0x8b8>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	4a67      	ldr	r2, [pc, #412]	; (800953c <HAL_DMA_IRQHandler+0xa3c>)
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d009      	beq.n	80093b8 <HAL_DMA_IRQHandler+0x8b8>
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	4a65      	ldr	r2, [pc, #404]	; (8009540 <HAL_DMA_IRQHandler+0xa40>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d004      	beq.n	80093b8 <HAL_DMA_IRQHandler+0x8b8>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	4a64      	ldr	r2, [pc, #400]	; (8009544 <HAL_DMA_IRQHandler+0xa44>)
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d108      	bne.n	80093ca <HAL_DMA_IRQHandler+0x8ca>
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	681a      	ldr	r2, [r3, #0]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f022 0201 	bic.w	r2, r2, #1
 80093c6:	601a      	str	r2, [r3, #0]
 80093c8:	e007      	b.n	80093da <HAL_DMA_IRQHandler+0x8da>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	681a      	ldr	r2, [r3, #0]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f022 0201 	bic.w	r2, r2, #1
 80093d8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	3301      	adds	r3, #1
 80093de:	60fb      	str	r3, [r7, #12]
 80093e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093e2:	429a      	cmp	r2, r3
 80093e4:	d307      	bcc.n	80093f6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f003 0301 	and.w	r3, r3, #1
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d1f2      	bne.n	80093da <HAL_DMA_IRQHandler+0x8da>
 80093f4:	e000      	b.n	80093f8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80093f6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f003 0301 	and.w	r3, r3, #1
 8009402:	2b00      	cmp	r3, #0
 8009404:	d004      	beq.n	8009410 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2203      	movs	r2, #3
 800940a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800940e:	e003      	b.n	8009418 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2201      	movs	r2, #1
 8009414:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2200      	movs	r2, #0
 800941c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009424:	2b00      	cmp	r3, #0
 8009426:	f000 8272 	beq.w	800990e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	4798      	blx	r3
 8009432:	e26c      	b.n	800990e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	4a43      	ldr	r2, [pc, #268]	; (8009548 <HAL_DMA_IRQHandler+0xa48>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d022      	beq.n	8009484 <HAL_DMA_IRQHandler+0x984>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	4a42      	ldr	r2, [pc, #264]	; (800954c <HAL_DMA_IRQHandler+0xa4c>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d01d      	beq.n	8009484 <HAL_DMA_IRQHandler+0x984>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	4a40      	ldr	r2, [pc, #256]	; (8009550 <HAL_DMA_IRQHandler+0xa50>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d018      	beq.n	8009484 <HAL_DMA_IRQHandler+0x984>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	4a3f      	ldr	r2, [pc, #252]	; (8009554 <HAL_DMA_IRQHandler+0xa54>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d013      	beq.n	8009484 <HAL_DMA_IRQHandler+0x984>
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	4a3d      	ldr	r2, [pc, #244]	; (8009558 <HAL_DMA_IRQHandler+0xa58>)
 8009462:	4293      	cmp	r3, r2
 8009464:	d00e      	beq.n	8009484 <HAL_DMA_IRQHandler+0x984>
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	4a3c      	ldr	r2, [pc, #240]	; (800955c <HAL_DMA_IRQHandler+0xa5c>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d009      	beq.n	8009484 <HAL_DMA_IRQHandler+0x984>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	4a3a      	ldr	r2, [pc, #232]	; (8009560 <HAL_DMA_IRQHandler+0xa60>)
 8009476:	4293      	cmp	r3, r2
 8009478:	d004      	beq.n	8009484 <HAL_DMA_IRQHandler+0x984>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	4a39      	ldr	r2, [pc, #228]	; (8009564 <HAL_DMA_IRQHandler+0xa64>)
 8009480:	4293      	cmp	r3, r2
 8009482:	d101      	bne.n	8009488 <HAL_DMA_IRQHandler+0x988>
 8009484:	2301      	movs	r3, #1
 8009486:	e000      	b.n	800948a <HAL_DMA_IRQHandler+0x98a>
 8009488:	2300      	movs	r3, #0
 800948a:	2b00      	cmp	r3, #0
 800948c:	f000 823f 	beq.w	800990e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800949c:	f003 031f 	and.w	r3, r3, #31
 80094a0:	2204      	movs	r2, #4
 80094a2:	409a      	lsls	r2, r3
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	4013      	ands	r3, r2
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	f000 80cd 	beq.w	8009648 <HAL_DMA_IRQHandler+0xb48>
 80094ae:	693b      	ldr	r3, [r7, #16]
 80094b0:	f003 0304 	and.w	r3, r3, #4
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	f000 80c7 	beq.w	8009648 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094be:	f003 031f 	and.w	r3, r3, #31
 80094c2:	2204      	movs	r2, #4
 80094c4:	409a      	lsls	r2, r3
 80094c6:	69fb      	ldr	r3, [r7, #28]
 80094c8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d049      	beq.n	8009568 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80094d4:	693b      	ldr	r3, [r7, #16]
 80094d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d109      	bne.n	80094f2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	f000 8210 	beq.w	8009908 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80094f0:	e20a      	b.n	8009908 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	f000 8206 	beq.w	8009908 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009504:	e200      	b.n	8009908 <HAL_DMA_IRQHandler+0xe08>
 8009506:	bf00      	nop
 8009508:	40020010 	.word	0x40020010
 800950c:	40020028 	.word	0x40020028
 8009510:	40020040 	.word	0x40020040
 8009514:	40020058 	.word	0x40020058
 8009518:	40020070 	.word	0x40020070
 800951c:	40020088 	.word	0x40020088
 8009520:	400200a0 	.word	0x400200a0
 8009524:	400200b8 	.word	0x400200b8
 8009528:	40020410 	.word	0x40020410
 800952c:	40020428 	.word	0x40020428
 8009530:	40020440 	.word	0x40020440
 8009534:	40020458 	.word	0x40020458
 8009538:	40020470 	.word	0x40020470
 800953c:	40020488 	.word	0x40020488
 8009540:	400204a0 	.word	0x400204a0
 8009544:	400204b8 	.word	0x400204b8
 8009548:	58025408 	.word	0x58025408
 800954c:	5802541c 	.word	0x5802541c
 8009550:	58025430 	.word	0x58025430
 8009554:	58025444 	.word	0x58025444
 8009558:	58025458 	.word	0x58025458
 800955c:	5802546c 	.word	0x5802546c
 8009560:	58025480 	.word	0x58025480
 8009564:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009568:	693b      	ldr	r3, [r7, #16]
 800956a:	f003 0320 	and.w	r3, r3, #32
 800956e:	2b00      	cmp	r3, #0
 8009570:	d160      	bne.n	8009634 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	4a7f      	ldr	r2, [pc, #508]	; (8009774 <HAL_DMA_IRQHandler+0xc74>)
 8009578:	4293      	cmp	r3, r2
 800957a:	d04a      	beq.n	8009612 <HAL_DMA_IRQHandler+0xb12>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	4a7d      	ldr	r2, [pc, #500]	; (8009778 <HAL_DMA_IRQHandler+0xc78>)
 8009582:	4293      	cmp	r3, r2
 8009584:	d045      	beq.n	8009612 <HAL_DMA_IRQHandler+0xb12>
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	4a7c      	ldr	r2, [pc, #496]	; (800977c <HAL_DMA_IRQHandler+0xc7c>)
 800958c:	4293      	cmp	r3, r2
 800958e:	d040      	beq.n	8009612 <HAL_DMA_IRQHandler+0xb12>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	4a7a      	ldr	r2, [pc, #488]	; (8009780 <HAL_DMA_IRQHandler+0xc80>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d03b      	beq.n	8009612 <HAL_DMA_IRQHandler+0xb12>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	4a79      	ldr	r2, [pc, #484]	; (8009784 <HAL_DMA_IRQHandler+0xc84>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d036      	beq.n	8009612 <HAL_DMA_IRQHandler+0xb12>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4a77      	ldr	r2, [pc, #476]	; (8009788 <HAL_DMA_IRQHandler+0xc88>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d031      	beq.n	8009612 <HAL_DMA_IRQHandler+0xb12>
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	4a76      	ldr	r2, [pc, #472]	; (800978c <HAL_DMA_IRQHandler+0xc8c>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d02c      	beq.n	8009612 <HAL_DMA_IRQHandler+0xb12>
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	4a74      	ldr	r2, [pc, #464]	; (8009790 <HAL_DMA_IRQHandler+0xc90>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d027      	beq.n	8009612 <HAL_DMA_IRQHandler+0xb12>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	4a73      	ldr	r2, [pc, #460]	; (8009794 <HAL_DMA_IRQHandler+0xc94>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d022      	beq.n	8009612 <HAL_DMA_IRQHandler+0xb12>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4a71      	ldr	r2, [pc, #452]	; (8009798 <HAL_DMA_IRQHandler+0xc98>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d01d      	beq.n	8009612 <HAL_DMA_IRQHandler+0xb12>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4a70      	ldr	r2, [pc, #448]	; (800979c <HAL_DMA_IRQHandler+0xc9c>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d018      	beq.n	8009612 <HAL_DMA_IRQHandler+0xb12>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4a6e      	ldr	r2, [pc, #440]	; (80097a0 <HAL_DMA_IRQHandler+0xca0>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d013      	beq.n	8009612 <HAL_DMA_IRQHandler+0xb12>
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	4a6d      	ldr	r2, [pc, #436]	; (80097a4 <HAL_DMA_IRQHandler+0xca4>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d00e      	beq.n	8009612 <HAL_DMA_IRQHandler+0xb12>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	4a6b      	ldr	r2, [pc, #428]	; (80097a8 <HAL_DMA_IRQHandler+0xca8>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d009      	beq.n	8009612 <HAL_DMA_IRQHandler+0xb12>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	4a6a      	ldr	r2, [pc, #424]	; (80097ac <HAL_DMA_IRQHandler+0xcac>)
 8009604:	4293      	cmp	r3, r2
 8009606:	d004      	beq.n	8009612 <HAL_DMA_IRQHandler+0xb12>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	4a68      	ldr	r2, [pc, #416]	; (80097b0 <HAL_DMA_IRQHandler+0xcb0>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d108      	bne.n	8009624 <HAL_DMA_IRQHandler+0xb24>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	681a      	ldr	r2, [r3, #0]
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f022 0208 	bic.w	r2, r2, #8
 8009620:	601a      	str	r2, [r3, #0]
 8009622:	e007      	b.n	8009634 <HAL_DMA_IRQHandler+0xb34>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	681a      	ldr	r2, [r3, #0]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f022 0204 	bic.w	r2, r2, #4
 8009632:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009638:	2b00      	cmp	r3, #0
 800963a:	f000 8165 	beq.w	8009908 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009646:	e15f      	b.n	8009908 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800964c:	f003 031f 	and.w	r3, r3, #31
 8009650:	2202      	movs	r2, #2
 8009652:	409a      	lsls	r2, r3
 8009654:	697b      	ldr	r3, [r7, #20]
 8009656:	4013      	ands	r3, r2
 8009658:	2b00      	cmp	r3, #0
 800965a:	f000 80c5 	beq.w	80097e8 <HAL_DMA_IRQHandler+0xce8>
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	f003 0302 	and.w	r3, r3, #2
 8009664:	2b00      	cmp	r3, #0
 8009666:	f000 80bf 	beq.w	80097e8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800966e:	f003 031f 	and.w	r3, r3, #31
 8009672:	2202      	movs	r2, #2
 8009674:	409a      	lsls	r2, r3
 8009676:	69fb      	ldr	r3, [r7, #28]
 8009678:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009680:	2b00      	cmp	r3, #0
 8009682:	d018      	beq.n	80096b6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800968a:	2b00      	cmp	r3, #0
 800968c:	d109      	bne.n	80096a2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009692:	2b00      	cmp	r3, #0
 8009694:	f000 813a 	beq.w	800990c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80096a0:	e134      	b.n	800990c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	f000 8130 	beq.w	800990c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80096b4:	e12a      	b.n	800990c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80096b6:	693b      	ldr	r3, [r7, #16]
 80096b8:	f003 0320 	and.w	r3, r3, #32
 80096bc:	2b00      	cmp	r3, #0
 80096be:	f040 8089 	bne.w	80097d4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	4a2b      	ldr	r2, [pc, #172]	; (8009774 <HAL_DMA_IRQHandler+0xc74>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d04a      	beq.n	8009762 <HAL_DMA_IRQHandler+0xc62>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	4a29      	ldr	r2, [pc, #164]	; (8009778 <HAL_DMA_IRQHandler+0xc78>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d045      	beq.n	8009762 <HAL_DMA_IRQHandler+0xc62>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	4a28      	ldr	r2, [pc, #160]	; (800977c <HAL_DMA_IRQHandler+0xc7c>)
 80096dc:	4293      	cmp	r3, r2
 80096de:	d040      	beq.n	8009762 <HAL_DMA_IRQHandler+0xc62>
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	4a26      	ldr	r2, [pc, #152]	; (8009780 <HAL_DMA_IRQHandler+0xc80>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d03b      	beq.n	8009762 <HAL_DMA_IRQHandler+0xc62>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	4a25      	ldr	r2, [pc, #148]	; (8009784 <HAL_DMA_IRQHandler+0xc84>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d036      	beq.n	8009762 <HAL_DMA_IRQHandler+0xc62>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	4a23      	ldr	r2, [pc, #140]	; (8009788 <HAL_DMA_IRQHandler+0xc88>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d031      	beq.n	8009762 <HAL_DMA_IRQHandler+0xc62>
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	4a22      	ldr	r2, [pc, #136]	; (800978c <HAL_DMA_IRQHandler+0xc8c>)
 8009704:	4293      	cmp	r3, r2
 8009706:	d02c      	beq.n	8009762 <HAL_DMA_IRQHandler+0xc62>
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	4a20      	ldr	r2, [pc, #128]	; (8009790 <HAL_DMA_IRQHandler+0xc90>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d027      	beq.n	8009762 <HAL_DMA_IRQHandler+0xc62>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4a1f      	ldr	r2, [pc, #124]	; (8009794 <HAL_DMA_IRQHandler+0xc94>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d022      	beq.n	8009762 <HAL_DMA_IRQHandler+0xc62>
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4a1d      	ldr	r2, [pc, #116]	; (8009798 <HAL_DMA_IRQHandler+0xc98>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d01d      	beq.n	8009762 <HAL_DMA_IRQHandler+0xc62>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	4a1c      	ldr	r2, [pc, #112]	; (800979c <HAL_DMA_IRQHandler+0xc9c>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d018      	beq.n	8009762 <HAL_DMA_IRQHandler+0xc62>
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	4a1a      	ldr	r2, [pc, #104]	; (80097a0 <HAL_DMA_IRQHandler+0xca0>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d013      	beq.n	8009762 <HAL_DMA_IRQHandler+0xc62>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	4a19      	ldr	r2, [pc, #100]	; (80097a4 <HAL_DMA_IRQHandler+0xca4>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d00e      	beq.n	8009762 <HAL_DMA_IRQHandler+0xc62>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	4a17      	ldr	r2, [pc, #92]	; (80097a8 <HAL_DMA_IRQHandler+0xca8>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d009      	beq.n	8009762 <HAL_DMA_IRQHandler+0xc62>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	4a16      	ldr	r2, [pc, #88]	; (80097ac <HAL_DMA_IRQHandler+0xcac>)
 8009754:	4293      	cmp	r3, r2
 8009756:	d004      	beq.n	8009762 <HAL_DMA_IRQHandler+0xc62>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4a14      	ldr	r2, [pc, #80]	; (80097b0 <HAL_DMA_IRQHandler+0xcb0>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d128      	bne.n	80097b4 <HAL_DMA_IRQHandler+0xcb4>
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	681a      	ldr	r2, [r3, #0]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f022 0214 	bic.w	r2, r2, #20
 8009770:	601a      	str	r2, [r3, #0]
 8009772:	e027      	b.n	80097c4 <HAL_DMA_IRQHandler+0xcc4>
 8009774:	40020010 	.word	0x40020010
 8009778:	40020028 	.word	0x40020028
 800977c:	40020040 	.word	0x40020040
 8009780:	40020058 	.word	0x40020058
 8009784:	40020070 	.word	0x40020070
 8009788:	40020088 	.word	0x40020088
 800978c:	400200a0 	.word	0x400200a0
 8009790:	400200b8 	.word	0x400200b8
 8009794:	40020410 	.word	0x40020410
 8009798:	40020428 	.word	0x40020428
 800979c:	40020440 	.word	0x40020440
 80097a0:	40020458 	.word	0x40020458
 80097a4:	40020470 	.word	0x40020470
 80097a8:	40020488 	.word	0x40020488
 80097ac:	400204a0 	.word	0x400204a0
 80097b0:	400204b8 	.word	0x400204b8
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	681a      	ldr	r2, [r3, #0]
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f022 020a 	bic.w	r2, r2, #10
 80097c2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2201      	movs	r2, #1
 80097c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2200      	movs	r2, #0
 80097d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097d8:	2b00      	cmp	r3, #0
 80097da:	f000 8097 	beq.w	800990c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80097e6:	e091      	b.n	800990c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097ec:	f003 031f 	and.w	r3, r3, #31
 80097f0:	2208      	movs	r2, #8
 80097f2:	409a      	lsls	r2, r3
 80097f4:	697b      	ldr	r3, [r7, #20]
 80097f6:	4013      	ands	r3, r2
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	f000 8088 	beq.w	800990e <HAL_DMA_IRQHandler+0xe0e>
 80097fe:	693b      	ldr	r3, [r7, #16]
 8009800:	f003 0308 	and.w	r3, r3, #8
 8009804:	2b00      	cmp	r3, #0
 8009806:	f000 8082 	beq.w	800990e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	4a41      	ldr	r2, [pc, #260]	; (8009914 <HAL_DMA_IRQHandler+0xe14>)
 8009810:	4293      	cmp	r3, r2
 8009812:	d04a      	beq.n	80098aa <HAL_DMA_IRQHandler+0xdaa>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	4a3f      	ldr	r2, [pc, #252]	; (8009918 <HAL_DMA_IRQHandler+0xe18>)
 800981a:	4293      	cmp	r3, r2
 800981c:	d045      	beq.n	80098aa <HAL_DMA_IRQHandler+0xdaa>
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	4a3e      	ldr	r2, [pc, #248]	; (800991c <HAL_DMA_IRQHandler+0xe1c>)
 8009824:	4293      	cmp	r3, r2
 8009826:	d040      	beq.n	80098aa <HAL_DMA_IRQHandler+0xdaa>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	4a3c      	ldr	r2, [pc, #240]	; (8009920 <HAL_DMA_IRQHandler+0xe20>)
 800982e:	4293      	cmp	r3, r2
 8009830:	d03b      	beq.n	80098aa <HAL_DMA_IRQHandler+0xdaa>
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	4a3b      	ldr	r2, [pc, #236]	; (8009924 <HAL_DMA_IRQHandler+0xe24>)
 8009838:	4293      	cmp	r3, r2
 800983a:	d036      	beq.n	80098aa <HAL_DMA_IRQHandler+0xdaa>
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	4a39      	ldr	r2, [pc, #228]	; (8009928 <HAL_DMA_IRQHandler+0xe28>)
 8009842:	4293      	cmp	r3, r2
 8009844:	d031      	beq.n	80098aa <HAL_DMA_IRQHandler+0xdaa>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	4a38      	ldr	r2, [pc, #224]	; (800992c <HAL_DMA_IRQHandler+0xe2c>)
 800984c:	4293      	cmp	r3, r2
 800984e:	d02c      	beq.n	80098aa <HAL_DMA_IRQHandler+0xdaa>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	4a36      	ldr	r2, [pc, #216]	; (8009930 <HAL_DMA_IRQHandler+0xe30>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d027      	beq.n	80098aa <HAL_DMA_IRQHandler+0xdaa>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	4a35      	ldr	r2, [pc, #212]	; (8009934 <HAL_DMA_IRQHandler+0xe34>)
 8009860:	4293      	cmp	r3, r2
 8009862:	d022      	beq.n	80098aa <HAL_DMA_IRQHandler+0xdaa>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	4a33      	ldr	r2, [pc, #204]	; (8009938 <HAL_DMA_IRQHandler+0xe38>)
 800986a:	4293      	cmp	r3, r2
 800986c:	d01d      	beq.n	80098aa <HAL_DMA_IRQHandler+0xdaa>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	4a32      	ldr	r2, [pc, #200]	; (800993c <HAL_DMA_IRQHandler+0xe3c>)
 8009874:	4293      	cmp	r3, r2
 8009876:	d018      	beq.n	80098aa <HAL_DMA_IRQHandler+0xdaa>
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	4a30      	ldr	r2, [pc, #192]	; (8009940 <HAL_DMA_IRQHandler+0xe40>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d013      	beq.n	80098aa <HAL_DMA_IRQHandler+0xdaa>
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	4a2f      	ldr	r2, [pc, #188]	; (8009944 <HAL_DMA_IRQHandler+0xe44>)
 8009888:	4293      	cmp	r3, r2
 800988a:	d00e      	beq.n	80098aa <HAL_DMA_IRQHandler+0xdaa>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	4a2d      	ldr	r2, [pc, #180]	; (8009948 <HAL_DMA_IRQHandler+0xe48>)
 8009892:	4293      	cmp	r3, r2
 8009894:	d009      	beq.n	80098aa <HAL_DMA_IRQHandler+0xdaa>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	4a2c      	ldr	r2, [pc, #176]	; (800994c <HAL_DMA_IRQHandler+0xe4c>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d004      	beq.n	80098aa <HAL_DMA_IRQHandler+0xdaa>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	4a2a      	ldr	r2, [pc, #168]	; (8009950 <HAL_DMA_IRQHandler+0xe50>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d108      	bne.n	80098bc <HAL_DMA_IRQHandler+0xdbc>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	681a      	ldr	r2, [r3, #0]
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f022 021c 	bic.w	r2, r2, #28
 80098b8:	601a      	str	r2, [r3, #0]
 80098ba:	e007      	b.n	80098cc <HAL_DMA_IRQHandler+0xdcc>
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	681a      	ldr	r2, [r3, #0]
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f022 020e 	bic.w	r2, r2, #14
 80098ca:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098d0:	f003 031f 	and.w	r3, r3, #31
 80098d4:	2201      	movs	r2, #1
 80098d6:	409a      	lsls	r2, r3
 80098d8:	69fb      	ldr	r3, [r7, #28]
 80098da:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2201      	movs	r2, #1
 80098e0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2201      	movs	r2, #1
 80098e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2200      	movs	r2, #0
 80098ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d009      	beq.n	800990e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	4798      	blx	r3
 8009902:	e004      	b.n	800990e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8009904:	bf00      	nop
 8009906:	e002      	b.n	800990e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009908:	bf00      	nop
 800990a:	e000      	b.n	800990e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800990c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800990e:	3728      	adds	r7, #40	; 0x28
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}
 8009914:	40020010 	.word	0x40020010
 8009918:	40020028 	.word	0x40020028
 800991c:	40020040 	.word	0x40020040
 8009920:	40020058 	.word	0x40020058
 8009924:	40020070 	.word	0x40020070
 8009928:	40020088 	.word	0x40020088
 800992c:	400200a0 	.word	0x400200a0
 8009930:	400200b8 	.word	0x400200b8
 8009934:	40020410 	.word	0x40020410
 8009938:	40020428 	.word	0x40020428
 800993c:	40020440 	.word	0x40020440
 8009940:	40020458 	.word	0x40020458
 8009944:	40020470 	.word	0x40020470
 8009948:	40020488 	.word	0x40020488
 800994c:	400204a0 	.word	0x400204a0
 8009950:	400204b8 	.word	0x400204b8

08009954 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009954:	b480      	push	{r7}
 8009956:	b087      	sub	sp, #28
 8009958:	af00      	add	r7, sp, #0
 800995a:	60f8      	str	r0, [r7, #12]
 800995c:	60b9      	str	r1, [r7, #8]
 800995e:	607a      	str	r2, [r7, #4]
 8009960:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009966:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800996c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	4a7f      	ldr	r2, [pc, #508]	; (8009b70 <DMA_SetConfig+0x21c>)
 8009974:	4293      	cmp	r3, r2
 8009976:	d072      	beq.n	8009a5e <DMA_SetConfig+0x10a>
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	4a7d      	ldr	r2, [pc, #500]	; (8009b74 <DMA_SetConfig+0x220>)
 800997e:	4293      	cmp	r3, r2
 8009980:	d06d      	beq.n	8009a5e <DMA_SetConfig+0x10a>
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	4a7c      	ldr	r2, [pc, #496]	; (8009b78 <DMA_SetConfig+0x224>)
 8009988:	4293      	cmp	r3, r2
 800998a:	d068      	beq.n	8009a5e <DMA_SetConfig+0x10a>
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	4a7a      	ldr	r2, [pc, #488]	; (8009b7c <DMA_SetConfig+0x228>)
 8009992:	4293      	cmp	r3, r2
 8009994:	d063      	beq.n	8009a5e <DMA_SetConfig+0x10a>
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4a79      	ldr	r2, [pc, #484]	; (8009b80 <DMA_SetConfig+0x22c>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d05e      	beq.n	8009a5e <DMA_SetConfig+0x10a>
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	4a77      	ldr	r2, [pc, #476]	; (8009b84 <DMA_SetConfig+0x230>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d059      	beq.n	8009a5e <DMA_SetConfig+0x10a>
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	4a76      	ldr	r2, [pc, #472]	; (8009b88 <DMA_SetConfig+0x234>)
 80099b0:	4293      	cmp	r3, r2
 80099b2:	d054      	beq.n	8009a5e <DMA_SetConfig+0x10a>
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	4a74      	ldr	r2, [pc, #464]	; (8009b8c <DMA_SetConfig+0x238>)
 80099ba:	4293      	cmp	r3, r2
 80099bc:	d04f      	beq.n	8009a5e <DMA_SetConfig+0x10a>
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	4a73      	ldr	r2, [pc, #460]	; (8009b90 <DMA_SetConfig+0x23c>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d04a      	beq.n	8009a5e <DMA_SetConfig+0x10a>
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	4a71      	ldr	r2, [pc, #452]	; (8009b94 <DMA_SetConfig+0x240>)
 80099ce:	4293      	cmp	r3, r2
 80099d0:	d045      	beq.n	8009a5e <DMA_SetConfig+0x10a>
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	4a70      	ldr	r2, [pc, #448]	; (8009b98 <DMA_SetConfig+0x244>)
 80099d8:	4293      	cmp	r3, r2
 80099da:	d040      	beq.n	8009a5e <DMA_SetConfig+0x10a>
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4a6e      	ldr	r2, [pc, #440]	; (8009b9c <DMA_SetConfig+0x248>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d03b      	beq.n	8009a5e <DMA_SetConfig+0x10a>
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	4a6d      	ldr	r2, [pc, #436]	; (8009ba0 <DMA_SetConfig+0x24c>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d036      	beq.n	8009a5e <DMA_SetConfig+0x10a>
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	4a6b      	ldr	r2, [pc, #428]	; (8009ba4 <DMA_SetConfig+0x250>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d031      	beq.n	8009a5e <DMA_SetConfig+0x10a>
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	4a6a      	ldr	r2, [pc, #424]	; (8009ba8 <DMA_SetConfig+0x254>)
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d02c      	beq.n	8009a5e <DMA_SetConfig+0x10a>
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	4a68      	ldr	r2, [pc, #416]	; (8009bac <DMA_SetConfig+0x258>)
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d027      	beq.n	8009a5e <DMA_SetConfig+0x10a>
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	4a67      	ldr	r2, [pc, #412]	; (8009bb0 <DMA_SetConfig+0x25c>)
 8009a14:	4293      	cmp	r3, r2
 8009a16:	d022      	beq.n	8009a5e <DMA_SetConfig+0x10a>
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	4a65      	ldr	r2, [pc, #404]	; (8009bb4 <DMA_SetConfig+0x260>)
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d01d      	beq.n	8009a5e <DMA_SetConfig+0x10a>
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	4a64      	ldr	r2, [pc, #400]	; (8009bb8 <DMA_SetConfig+0x264>)
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	d018      	beq.n	8009a5e <DMA_SetConfig+0x10a>
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	4a62      	ldr	r2, [pc, #392]	; (8009bbc <DMA_SetConfig+0x268>)
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d013      	beq.n	8009a5e <DMA_SetConfig+0x10a>
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	4a61      	ldr	r2, [pc, #388]	; (8009bc0 <DMA_SetConfig+0x26c>)
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d00e      	beq.n	8009a5e <DMA_SetConfig+0x10a>
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	4a5f      	ldr	r2, [pc, #380]	; (8009bc4 <DMA_SetConfig+0x270>)
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d009      	beq.n	8009a5e <DMA_SetConfig+0x10a>
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	4a5e      	ldr	r2, [pc, #376]	; (8009bc8 <DMA_SetConfig+0x274>)
 8009a50:	4293      	cmp	r3, r2
 8009a52:	d004      	beq.n	8009a5e <DMA_SetConfig+0x10a>
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	4a5c      	ldr	r2, [pc, #368]	; (8009bcc <DMA_SetConfig+0x278>)
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d101      	bne.n	8009a62 <DMA_SetConfig+0x10e>
 8009a5e:	2301      	movs	r3, #1
 8009a60:	e000      	b.n	8009a64 <DMA_SetConfig+0x110>
 8009a62:	2300      	movs	r3, #0
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d00d      	beq.n	8009a84 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a6c:	68fa      	ldr	r2, [r7, #12]
 8009a6e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009a70:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d004      	beq.n	8009a84 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a7e:	68fa      	ldr	r2, [r7, #12]
 8009a80:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009a82:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	4a39      	ldr	r2, [pc, #228]	; (8009b70 <DMA_SetConfig+0x21c>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d04a      	beq.n	8009b24 <DMA_SetConfig+0x1d0>
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	4a38      	ldr	r2, [pc, #224]	; (8009b74 <DMA_SetConfig+0x220>)
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d045      	beq.n	8009b24 <DMA_SetConfig+0x1d0>
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	4a36      	ldr	r2, [pc, #216]	; (8009b78 <DMA_SetConfig+0x224>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d040      	beq.n	8009b24 <DMA_SetConfig+0x1d0>
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	4a35      	ldr	r2, [pc, #212]	; (8009b7c <DMA_SetConfig+0x228>)
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d03b      	beq.n	8009b24 <DMA_SetConfig+0x1d0>
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4a33      	ldr	r2, [pc, #204]	; (8009b80 <DMA_SetConfig+0x22c>)
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d036      	beq.n	8009b24 <DMA_SetConfig+0x1d0>
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	4a32      	ldr	r2, [pc, #200]	; (8009b84 <DMA_SetConfig+0x230>)
 8009abc:	4293      	cmp	r3, r2
 8009abe:	d031      	beq.n	8009b24 <DMA_SetConfig+0x1d0>
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	4a30      	ldr	r2, [pc, #192]	; (8009b88 <DMA_SetConfig+0x234>)
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	d02c      	beq.n	8009b24 <DMA_SetConfig+0x1d0>
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	4a2f      	ldr	r2, [pc, #188]	; (8009b8c <DMA_SetConfig+0x238>)
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	d027      	beq.n	8009b24 <DMA_SetConfig+0x1d0>
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	4a2d      	ldr	r2, [pc, #180]	; (8009b90 <DMA_SetConfig+0x23c>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d022      	beq.n	8009b24 <DMA_SetConfig+0x1d0>
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	4a2c      	ldr	r2, [pc, #176]	; (8009b94 <DMA_SetConfig+0x240>)
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d01d      	beq.n	8009b24 <DMA_SetConfig+0x1d0>
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	4a2a      	ldr	r2, [pc, #168]	; (8009b98 <DMA_SetConfig+0x244>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d018      	beq.n	8009b24 <DMA_SetConfig+0x1d0>
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	4a29      	ldr	r2, [pc, #164]	; (8009b9c <DMA_SetConfig+0x248>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d013      	beq.n	8009b24 <DMA_SetConfig+0x1d0>
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4a27      	ldr	r2, [pc, #156]	; (8009ba0 <DMA_SetConfig+0x24c>)
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d00e      	beq.n	8009b24 <DMA_SetConfig+0x1d0>
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	4a26      	ldr	r2, [pc, #152]	; (8009ba4 <DMA_SetConfig+0x250>)
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	d009      	beq.n	8009b24 <DMA_SetConfig+0x1d0>
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	4a24      	ldr	r2, [pc, #144]	; (8009ba8 <DMA_SetConfig+0x254>)
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d004      	beq.n	8009b24 <DMA_SetConfig+0x1d0>
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	4a23      	ldr	r2, [pc, #140]	; (8009bac <DMA_SetConfig+0x258>)
 8009b20:	4293      	cmp	r3, r2
 8009b22:	d101      	bne.n	8009b28 <DMA_SetConfig+0x1d4>
 8009b24:	2301      	movs	r3, #1
 8009b26:	e000      	b.n	8009b2a <DMA_SetConfig+0x1d6>
 8009b28:	2300      	movs	r3, #0
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d059      	beq.n	8009be2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b32:	f003 031f 	and.w	r3, r3, #31
 8009b36:	223f      	movs	r2, #63	; 0x3f
 8009b38:	409a      	lsls	r2, r3
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	681a      	ldr	r2, [r3, #0]
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009b4c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	683a      	ldr	r2, [r7, #0]
 8009b54:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	689b      	ldr	r3, [r3, #8]
 8009b5a:	2b40      	cmp	r3, #64	; 0x40
 8009b5c:	d138      	bne.n	8009bd0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	687a      	ldr	r2, [r7, #4]
 8009b64:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	68ba      	ldr	r2, [r7, #8]
 8009b6c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8009b6e:	e086      	b.n	8009c7e <DMA_SetConfig+0x32a>
 8009b70:	40020010 	.word	0x40020010
 8009b74:	40020028 	.word	0x40020028
 8009b78:	40020040 	.word	0x40020040
 8009b7c:	40020058 	.word	0x40020058
 8009b80:	40020070 	.word	0x40020070
 8009b84:	40020088 	.word	0x40020088
 8009b88:	400200a0 	.word	0x400200a0
 8009b8c:	400200b8 	.word	0x400200b8
 8009b90:	40020410 	.word	0x40020410
 8009b94:	40020428 	.word	0x40020428
 8009b98:	40020440 	.word	0x40020440
 8009b9c:	40020458 	.word	0x40020458
 8009ba0:	40020470 	.word	0x40020470
 8009ba4:	40020488 	.word	0x40020488
 8009ba8:	400204a0 	.word	0x400204a0
 8009bac:	400204b8 	.word	0x400204b8
 8009bb0:	58025408 	.word	0x58025408
 8009bb4:	5802541c 	.word	0x5802541c
 8009bb8:	58025430 	.word	0x58025430
 8009bbc:	58025444 	.word	0x58025444
 8009bc0:	58025458 	.word	0x58025458
 8009bc4:	5802546c 	.word	0x5802546c
 8009bc8:	58025480 	.word	0x58025480
 8009bcc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	68ba      	ldr	r2, [r7, #8]
 8009bd6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	687a      	ldr	r2, [r7, #4]
 8009bde:	60da      	str	r2, [r3, #12]
}
 8009be0:	e04d      	b.n	8009c7e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	4a29      	ldr	r2, [pc, #164]	; (8009c8c <DMA_SetConfig+0x338>)
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d022      	beq.n	8009c32 <DMA_SetConfig+0x2de>
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4a27      	ldr	r2, [pc, #156]	; (8009c90 <DMA_SetConfig+0x33c>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d01d      	beq.n	8009c32 <DMA_SetConfig+0x2de>
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	4a26      	ldr	r2, [pc, #152]	; (8009c94 <DMA_SetConfig+0x340>)
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d018      	beq.n	8009c32 <DMA_SetConfig+0x2de>
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	4a24      	ldr	r2, [pc, #144]	; (8009c98 <DMA_SetConfig+0x344>)
 8009c06:	4293      	cmp	r3, r2
 8009c08:	d013      	beq.n	8009c32 <DMA_SetConfig+0x2de>
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	4a23      	ldr	r2, [pc, #140]	; (8009c9c <DMA_SetConfig+0x348>)
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d00e      	beq.n	8009c32 <DMA_SetConfig+0x2de>
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	4a21      	ldr	r2, [pc, #132]	; (8009ca0 <DMA_SetConfig+0x34c>)
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	d009      	beq.n	8009c32 <DMA_SetConfig+0x2de>
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	4a20      	ldr	r2, [pc, #128]	; (8009ca4 <DMA_SetConfig+0x350>)
 8009c24:	4293      	cmp	r3, r2
 8009c26:	d004      	beq.n	8009c32 <DMA_SetConfig+0x2de>
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	4a1e      	ldr	r2, [pc, #120]	; (8009ca8 <DMA_SetConfig+0x354>)
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	d101      	bne.n	8009c36 <DMA_SetConfig+0x2e2>
 8009c32:	2301      	movs	r3, #1
 8009c34:	e000      	b.n	8009c38 <DMA_SetConfig+0x2e4>
 8009c36:	2300      	movs	r3, #0
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d020      	beq.n	8009c7e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c40:	f003 031f 	and.w	r3, r3, #31
 8009c44:	2201      	movs	r2, #1
 8009c46:	409a      	lsls	r2, r3
 8009c48:	693b      	ldr	r3, [r7, #16]
 8009c4a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	683a      	ldr	r2, [r7, #0]
 8009c52:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	689b      	ldr	r3, [r3, #8]
 8009c58:	2b40      	cmp	r3, #64	; 0x40
 8009c5a:	d108      	bne.n	8009c6e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	687a      	ldr	r2, [r7, #4]
 8009c62:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	68ba      	ldr	r2, [r7, #8]
 8009c6a:	60da      	str	r2, [r3, #12]
}
 8009c6c:	e007      	b.n	8009c7e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	68ba      	ldr	r2, [r7, #8]
 8009c74:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	687a      	ldr	r2, [r7, #4]
 8009c7c:	60da      	str	r2, [r3, #12]
}
 8009c7e:	bf00      	nop
 8009c80:	371c      	adds	r7, #28
 8009c82:	46bd      	mov	sp, r7
 8009c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c88:	4770      	bx	lr
 8009c8a:	bf00      	nop
 8009c8c:	58025408 	.word	0x58025408
 8009c90:	5802541c 	.word	0x5802541c
 8009c94:	58025430 	.word	0x58025430
 8009c98:	58025444 	.word	0x58025444
 8009c9c:	58025458 	.word	0x58025458
 8009ca0:	5802546c 	.word	0x5802546c
 8009ca4:	58025480 	.word	0x58025480
 8009ca8:	58025494 	.word	0x58025494

08009cac <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009cac:	b480      	push	{r7}
 8009cae:	b085      	sub	sp, #20
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	4a42      	ldr	r2, [pc, #264]	; (8009dc4 <DMA_CalcBaseAndBitshift+0x118>)
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d04a      	beq.n	8009d54 <DMA_CalcBaseAndBitshift+0xa8>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	4a41      	ldr	r2, [pc, #260]	; (8009dc8 <DMA_CalcBaseAndBitshift+0x11c>)
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	d045      	beq.n	8009d54 <DMA_CalcBaseAndBitshift+0xa8>
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	4a3f      	ldr	r2, [pc, #252]	; (8009dcc <DMA_CalcBaseAndBitshift+0x120>)
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d040      	beq.n	8009d54 <DMA_CalcBaseAndBitshift+0xa8>
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	4a3e      	ldr	r2, [pc, #248]	; (8009dd0 <DMA_CalcBaseAndBitshift+0x124>)
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	d03b      	beq.n	8009d54 <DMA_CalcBaseAndBitshift+0xa8>
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	4a3c      	ldr	r2, [pc, #240]	; (8009dd4 <DMA_CalcBaseAndBitshift+0x128>)
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d036      	beq.n	8009d54 <DMA_CalcBaseAndBitshift+0xa8>
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	4a3b      	ldr	r2, [pc, #236]	; (8009dd8 <DMA_CalcBaseAndBitshift+0x12c>)
 8009cec:	4293      	cmp	r3, r2
 8009cee:	d031      	beq.n	8009d54 <DMA_CalcBaseAndBitshift+0xa8>
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	4a39      	ldr	r2, [pc, #228]	; (8009ddc <DMA_CalcBaseAndBitshift+0x130>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d02c      	beq.n	8009d54 <DMA_CalcBaseAndBitshift+0xa8>
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	4a38      	ldr	r2, [pc, #224]	; (8009de0 <DMA_CalcBaseAndBitshift+0x134>)
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d027      	beq.n	8009d54 <DMA_CalcBaseAndBitshift+0xa8>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4a36      	ldr	r2, [pc, #216]	; (8009de4 <DMA_CalcBaseAndBitshift+0x138>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d022      	beq.n	8009d54 <DMA_CalcBaseAndBitshift+0xa8>
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	4a35      	ldr	r2, [pc, #212]	; (8009de8 <DMA_CalcBaseAndBitshift+0x13c>)
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d01d      	beq.n	8009d54 <DMA_CalcBaseAndBitshift+0xa8>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	4a33      	ldr	r2, [pc, #204]	; (8009dec <DMA_CalcBaseAndBitshift+0x140>)
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	d018      	beq.n	8009d54 <DMA_CalcBaseAndBitshift+0xa8>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	4a32      	ldr	r2, [pc, #200]	; (8009df0 <DMA_CalcBaseAndBitshift+0x144>)
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d013      	beq.n	8009d54 <DMA_CalcBaseAndBitshift+0xa8>
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	4a30      	ldr	r2, [pc, #192]	; (8009df4 <DMA_CalcBaseAndBitshift+0x148>)
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d00e      	beq.n	8009d54 <DMA_CalcBaseAndBitshift+0xa8>
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	4a2f      	ldr	r2, [pc, #188]	; (8009df8 <DMA_CalcBaseAndBitshift+0x14c>)
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	d009      	beq.n	8009d54 <DMA_CalcBaseAndBitshift+0xa8>
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	4a2d      	ldr	r2, [pc, #180]	; (8009dfc <DMA_CalcBaseAndBitshift+0x150>)
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d004      	beq.n	8009d54 <DMA_CalcBaseAndBitshift+0xa8>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	4a2c      	ldr	r2, [pc, #176]	; (8009e00 <DMA_CalcBaseAndBitshift+0x154>)
 8009d50:	4293      	cmp	r3, r2
 8009d52:	d101      	bne.n	8009d58 <DMA_CalcBaseAndBitshift+0xac>
 8009d54:	2301      	movs	r3, #1
 8009d56:	e000      	b.n	8009d5a <DMA_CalcBaseAndBitshift+0xae>
 8009d58:	2300      	movs	r3, #0
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d024      	beq.n	8009da8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	b2db      	uxtb	r3, r3
 8009d64:	3b10      	subs	r3, #16
 8009d66:	4a27      	ldr	r2, [pc, #156]	; (8009e04 <DMA_CalcBaseAndBitshift+0x158>)
 8009d68:	fba2 2303 	umull	r2, r3, r2, r3
 8009d6c:	091b      	lsrs	r3, r3, #4
 8009d6e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	f003 0307 	and.w	r3, r3, #7
 8009d76:	4a24      	ldr	r2, [pc, #144]	; (8009e08 <DMA_CalcBaseAndBitshift+0x15c>)
 8009d78:	5cd3      	ldrb	r3, [r2, r3]
 8009d7a:	461a      	mov	r2, r3
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	2b03      	cmp	r3, #3
 8009d84:	d908      	bls.n	8009d98 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	461a      	mov	r2, r3
 8009d8c:	4b1f      	ldr	r3, [pc, #124]	; (8009e0c <DMA_CalcBaseAndBitshift+0x160>)
 8009d8e:	4013      	ands	r3, r2
 8009d90:	1d1a      	adds	r2, r3, #4
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	659a      	str	r2, [r3, #88]	; 0x58
 8009d96:	e00d      	b.n	8009db4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	461a      	mov	r2, r3
 8009d9e:	4b1b      	ldr	r3, [pc, #108]	; (8009e0c <DMA_CalcBaseAndBitshift+0x160>)
 8009da0:	4013      	ands	r3, r2
 8009da2:	687a      	ldr	r2, [r7, #4]
 8009da4:	6593      	str	r3, [r2, #88]	; 0x58
 8009da6:	e005      	b.n	8009db4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	3714      	adds	r7, #20
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc2:	4770      	bx	lr
 8009dc4:	40020010 	.word	0x40020010
 8009dc8:	40020028 	.word	0x40020028
 8009dcc:	40020040 	.word	0x40020040
 8009dd0:	40020058 	.word	0x40020058
 8009dd4:	40020070 	.word	0x40020070
 8009dd8:	40020088 	.word	0x40020088
 8009ddc:	400200a0 	.word	0x400200a0
 8009de0:	400200b8 	.word	0x400200b8
 8009de4:	40020410 	.word	0x40020410
 8009de8:	40020428 	.word	0x40020428
 8009dec:	40020440 	.word	0x40020440
 8009df0:	40020458 	.word	0x40020458
 8009df4:	40020470 	.word	0x40020470
 8009df8:	40020488 	.word	0x40020488
 8009dfc:	400204a0 	.word	0x400204a0
 8009e00:	400204b8 	.word	0x400204b8
 8009e04:	aaaaaaab 	.word	0xaaaaaaab
 8009e08:	080145d4 	.word	0x080145d4
 8009e0c:	fffffc00 	.word	0xfffffc00

08009e10 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009e10:	b480      	push	{r7}
 8009e12:	b085      	sub	sp, #20
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	699b      	ldr	r3, [r3, #24]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d120      	bne.n	8009e66 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e28:	2b03      	cmp	r3, #3
 8009e2a:	d858      	bhi.n	8009ede <DMA_CheckFifoParam+0xce>
 8009e2c:	a201      	add	r2, pc, #4	; (adr r2, 8009e34 <DMA_CheckFifoParam+0x24>)
 8009e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e32:	bf00      	nop
 8009e34:	08009e45 	.word	0x08009e45
 8009e38:	08009e57 	.word	0x08009e57
 8009e3c:	08009e45 	.word	0x08009e45
 8009e40:	08009edf 	.word	0x08009edf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d048      	beq.n	8009ee2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8009e50:	2301      	movs	r3, #1
 8009e52:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009e54:	e045      	b.n	8009ee2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e5a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009e5e:	d142      	bne.n	8009ee6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8009e60:	2301      	movs	r3, #1
 8009e62:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009e64:	e03f      	b.n	8009ee6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	699b      	ldr	r3, [r3, #24]
 8009e6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e6e:	d123      	bne.n	8009eb8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e74:	2b03      	cmp	r3, #3
 8009e76:	d838      	bhi.n	8009eea <DMA_CheckFifoParam+0xda>
 8009e78:	a201      	add	r2, pc, #4	; (adr r2, 8009e80 <DMA_CheckFifoParam+0x70>)
 8009e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e7e:	bf00      	nop
 8009e80:	08009e91 	.word	0x08009e91
 8009e84:	08009e97 	.word	0x08009e97
 8009e88:	08009e91 	.word	0x08009e91
 8009e8c:	08009ea9 	.word	0x08009ea9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8009e90:	2301      	movs	r3, #1
 8009e92:	73fb      	strb	r3, [r7, #15]
        break;
 8009e94:	e030      	b.n	8009ef8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d025      	beq.n	8009eee <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009ea6:	e022      	b.n	8009eee <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009eb0:	d11f      	bne.n	8009ef2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009eb6:	e01c      	b.n	8009ef2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ebc:	2b02      	cmp	r3, #2
 8009ebe:	d902      	bls.n	8009ec6 <DMA_CheckFifoParam+0xb6>
 8009ec0:	2b03      	cmp	r3, #3
 8009ec2:	d003      	beq.n	8009ecc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8009ec4:	e018      	b.n	8009ef8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	73fb      	strb	r3, [r7, #15]
        break;
 8009eca:	e015      	b.n	8009ef8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ed0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d00e      	beq.n	8009ef6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8009ed8:	2301      	movs	r3, #1
 8009eda:	73fb      	strb	r3, [r7, #15]
    break;
 8009edc:	e00b      	b.n	8009ef6 <DMA_CheckFifoParam+0xe6>
        break;
 8009ede:	bf00      	nop
 8009ee0:	e00a      	b.n	8009ef8 <DMA_CheckFifoParam+0xe8>
        break;
 8009ee2:	bf00      	nop
 8009ee4:	e008      	b.n	8009ef8 <DMA_CheckFifoParam+0xe8>
        break;
 8009ee6:	bf00      	nop
 8009ee8:	e006      	b.n	8009ef8 <DMA_CheckFifoParam+0xe8>
        break;
 8009eea:	bf00      	nop
 8009eec:	e004      	b.n	8009ef8 <DMA_CheckFifoParam+0xe8>
        break;
 8009eee:	bf00      	nop
 8009ef0:	e002      	b.n	8009ef8 <DMA_CheckFifoParam+0xe8>
        break;
 8009ef2:	bf00      	nop
 8009ef4:	e000      	b.n	8009ef8 <DMA_CheckFifoParam+0xe8>
    break;
 8009ef6:	bf00      	nop
    }
  }

  return status;
 8009ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	3714      	adds	r7, #20
 8009efe:	46bd      	mov	sp, r7
 8009f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f04:	4770      	bx	lr
 8009f06:	bf00      	nop

08009f08 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b085      	sub	sp, #20
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	4a38      	ldr	r2, [pc, #224]	; (8009ffc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	d022      	beq.n	8009f66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	4a36      	ldr	r2, [pc, #216]	; (800a000 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8009f26:	4293      	cmp	r3, r2
 8009f28:	d01d      	beq.n	8009f66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	4a35      	ldr	r2, [pc, #212]	; (800a004 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8009f30:	4293      	cmp	r3, r2
 8009f32:	d018      	beq.n	8009f66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	4a33      	ldr	r2, [pc, #204]	; (800a008 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	d013      	beq.n	8009f66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	4a32      	ldr	r2, [pc, #200]	; (800a00c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8009f44:	4293      	cmp	r3, r2
 8009f46:	d00e      	beq.n	8009f66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	4a30      	ldr	r2, [pc, #192]	; (800a010 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d009      	beq.n	8009f66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	4a2f      	ldr	r2, [pc, #188]	; (800a014 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8009f58:	4293      	cmp	r3, r2
 8009f5a:	d004      	beq.n	8009f66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	4a2d      	ldr	r2, [pc, #180]	; (800a018 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8009f62:	4293      	cmp	r3, r2
 8009f64:	d101      	bne.n	8009f6a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8009f66:	2301      	movs	r3, #1
 8009f68:	e000      	b.n	8009f6c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d01a      	beq.n	8009fa6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	b2db      	uxtb	r3, r3
 8009f76:	3b08      	subs	r3, #8
 8009f78:	4a28      	ldr	r2, [pc, #160]	; (800a01c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8009f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8009f7e:	091b      	lsrs	r3, r3, #4
 8009f80:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8009f82:	68fa      	ldr	r2, [r7, #12]
 8009f84:	4b26      	ldr	r3, [pc, #152]	; (800a020 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8009f86:	4413      	add	r3, r2
 8009f88:	009b      	lsls	r3, r3, #2
 8009f8a:	461a      	mov	r2, r3
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	4a24      	ldr	r2, [pc, #144]	; (800a024 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8009f94:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	f003 031f 	and.w	r3, r3, #31
 8009f9c:	2201      	movs	r2, #1
 8009f9e:	409a      	lsls	r2, r3
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8009fa4:	e024      	b.n	8009ff0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	b2db      	uxtb	r3, r3
 8009fac:	3b10      	subs	r3, #16
 8009fae:	4a1e      	ldr	r2, [pc, #120]	; (800a028 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8009fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8009fb4:	091b      	lsrs	r3, r3, #4
 8009fb6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	4a1c      	ldr	r2, [pc, #112]	; (800a02c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	d806      	bhi.n	8009fce <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	4a1b      	ldr	r2, [pc, #108]	; (800a030 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8009fc4:	4293      	cmp	r3, r2
 8009fc6:	d902      	bls.n	8009fce <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	3308      	adds	r3, #8
 8009fcc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8009fce:	68fa      	ldr	r2, [r7, #12]
 8009fd0:	4b18      	ldr	r3, [pc, #96]	; (800a034 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8009fd2:	4413      	add	r3, r2
 8009fd4:	009b      	lsls	r3, r3, #2
 8009fd6:	461a      	mov	r2, r3
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	4a16      	ldr	r2, [pc, #88]	; (800a038 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8009fe0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	f003 031f 	and.w	r3, r3, #31
 8009fe8:	2201      	movs	r2, #1
 8009fea:	409a      	lsls	r2, r3
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009ff0:	bf00      	nop
 8009ff2:	3714      	adds	r7, #20
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffa:	4770      	bx	lr
 8009ffc:	58025408 	.word	0x58025408
 800a000:	5802541c 	.word	0x5802541c
 800a004:	58025430 	.word	0x58025430
 800a008:	58025444 	.word	0x58025444
 800a00c:	58025458 	.word	0x58025458
 800a010:	5802546c 	.word	0x5802546c
 800a014:	58025480 	.word	0x58025480
 800a018:	58025494 	.word	0x58025494
 800a01c:	cccccccd 	.word	0xcccccccd
 800a020:	16009600 	.word	0x16009600
 800a024:	58025880 	.word	0x58025880
 800a028:	aaaaaaab 	.word	0xaaaaaaab
 800a02c:	400204b8 	.word	0x400204b8
 800a030:	4002040f 	.word	0x4002040f
 800a034:	10008200 	.word	0x10008200
 800a038:	40020880 	.word	0x40020880

0800a03c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a03c:	b480      	push	{r7}
 800a03e:	b085      	sub	sp, #20
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	685b      	ldr	r3, [r3, #4]
 800a048:	b2db      	uxtb	r3, r3
 800a04a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d04a      	beq.n	800a0e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	2b08      	cmp	r3, #8
 800a056:	d847      	bhi.n	800a0e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	4a25      	ldr	r2, [pc, #148]	; (800a0f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800a05e:	4293      	cmp	r3, r2
 800a060:	d022      	beq.n	800a0a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	4a24      	ldr	r2, [pc, #144]	; (800a0f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800a068:	4293      	cmp	r3, r2
 800a06a:	d01d      	beq.n	800a0a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	4a22      	ldr	r2, [pc, #136]	; (800a0fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800a072:	4293      	cmp	r3, r2
 800a074:	d018      	beq.n	800a0a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	4a21      	ldr	r2, [pc, #132]	; (800a100 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d013      	beq.n	800a0a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	4a1f      	ldr	r2, [pc, #124]	; (800a104 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800a086:	4293      	cmp	r3, r2
 800a088:	d00e      	beq.n	800a0a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	4a1e      	ldr	r2, [pc, #120]	; (800a108 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800a090:	4293      	cmp	r3, r2
 800a092:	d009      	beq.n	800a0a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	4a1c      	ldr	r2, [pc, #112]	; (800a10c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800a09a:	4293      	cmp	r3, r2
 800a09c:	d004      	beq.n	800a0a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	4a1b      	ldr	r2, [pc, #108]	; (800a110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	d101      	bne.n	800a0ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800a0a8:	2301      	movs	r3, #1
 800a0aa:	e000      	b.n	800a0ae <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d00a      	beq.n	800a0c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800a0b2:	68fa      	ldr	r2, [r7, #12]
 800a0b4:	4b17      	ldr	r3, [pc, #92]	; (800a114 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800a0b6:	4413      	add	r3, r2
 800a0b8:	009b      	lsls	r3, r3, #2
 800a0ba:	461a      	mov	r2, r3
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	4a15      	ldr	r2, [pc, #84]	; (800a118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800a0c4:	671a      	str	r2, [r3, #112]	; 0x70
 800a0c6:	e009      	b.n	800a0dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800a0c8:	68fa      	ldr	r2, [r7, #12]
 800a0ca:	4b14      	ldr	r3, [pc, #80]	; (800a11c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800a0cc:	4413      	add	r3, r2
 800a0ce:	009b      	lsls	r3, r3, #2
 800a0d0:	461a      	mov	r2, r3
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	4a11      	ldr	r2, [pc, #68]	; (800a120 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800a0da:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	3b01      	subs	r3, #1
 800a0e0:	2201      	movs	r2, #1
 800a0e2:	409a      	lsls	r2, r3
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800a0e8:	bf00      	nop
 800a0ea:	3714      	adds	r7, #20
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f2:	4770      	bx	lr
 800a0f4:	58025408 	.word	0x58025408
 800a0f8:	5802541c 	.word	0x5802541c
 800a0fc:	58025430 	.word	0x58025430
 800a100:	58025444 	.word	0x58025444
 800a104:	58025458 	.word	0x58025458
 800a108:	5802546c 	.word	0x5802546c
 800a10c:	58025480 	.word	0x58025480
 800a110:	58025494 	.word	0x58025494
 800a114:	1600963f 	.word	0x1600963f
 800a118:	58025940 	.word	0x58025940
 800a11c:	1000823f 	.word	0x1000823f
 800a120:	40020940 	.word	0x40020940

0800a124 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b098      	sub	sp, #96	; 0x60
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800a12c:	4a84      	ldr	r2, [pc, #528]	; (800a340 <HAL_FDCAN_Init+0x21c>)
 800a12e:	f107 030c 	add.w	r3, r7, #12
 800a132:	4611      	mov	r1, r2
 800a134:	224c      	movs	r2, #76	; 0x4c
 800a136:	4618      	mov	r0, r3
 800a138:	f007 fd8e 	bl	8011c58 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d101      	bne.n	800a146 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800a142:	2301      	movs	r3, #1
 800a144:	e1c6      	b.n	800a4d4 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	4a7e      	ldr	r2, [pc, #504]	; (800a344 <HAL_FDCAN_Init+0x220>)
 800a14c:	4293      	cmp	r3, r2
 800a14e:	d106      	bne.n	800a15e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800a158:	461a      	mov	r2, r3
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a164:	b2db      	uxtb	r3, r3
 800a166:	2b00      	cmp	r3, #0
 800a168:	d106      	bne.n	800a178 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2200      	movs	r2, #0
 800a16e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f7fb fab6 	bl	80056e4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	699a      	ldr	r2, [r3, #24]
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f022 0210 	bic.w	r2, r2, #16
 800a186:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a188:	f7fd f844 	bl	8007214 <HAL_GetTick>
 800a18c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800a18e:	e014      	b.n	800a1ba <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800a190:	f7fd f840 	bl	8007214 <HAL_GetTick>
 800a194:	4602      	mov	r2, r0
 800a196:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a198:	1ad3      	subs	r3, r2, r3
 800a19a:	2b0a      	cmp	r3, #10
 800a19c:	d90d      	bls.n	800a1ba <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a1a4:	f043 0201 	orr.w	r2, r3, #1
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2203      	movs	r2, #3
 800a1b2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	e18c      	b.n	800a4d4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	699b      	ldr	r3, [r3, #24]
 800a1c0:	f003 0308 	and.w	r3, r3, #8
 800a1c4:	2b08      	cmp	r3, #8
 800a1c6:	d0e3      	beq.n	800a190 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	699a      	ldr	r2, [r3, #24]
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f042 0201 	orr.w	r2, r2, #1
 800a1d6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a1d8:	f7fd f81c 	bl	8007214 <HAL_GetTick>
 800a1dc:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800a1de:	e014      	b.n	800a20a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800a1e0:	f7fd f818 	bl	8007214 <HAL_GetTick>
 800a1e4:	4602      	mov	r2, r0
 800a1e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1e8:	1ad3      	subs	r3, r2, r3
 800a1ea:	2b0a      	cmp	r3, #10
 800a1ec:	d90d      	bls.n	800a20a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a1f4:	f043 0201 	orr.w	r2, r3, #1
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2203      	movs	r2, #3
 800a202:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800a206:	2301      	movs	r3, #1
 800a208:	e164      	b.n	800a4d4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	699b      	ldr	r3, [r3, #24]
 800a210:	f003 0301 	and.w	r3, r3, #1
 800a214:	2b00      	cmp	r3, #0
 800a216:	d0e3      	beq.n	800a1e0 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	699a      	ldr	r2, [r3, #24]
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	f042 0202 	orr.w	r2, r2, #2
 800a226:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	7c1b      	ldrb	r3, [r3, #16]
 800a22c:	2b01      	cmp	r3, #1
 800a22e:	d108      	bne.n	800a242 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	699a      	ldr	r2, [r3, #24]
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a23e:	619a      	str	r2, [r3, #24]
 800a240:	e007      	b.n	800a252 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	699a      	ldr	r2, [r3, #24]
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a250:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	7c5b      	ldrb	r3, [r3, #17]
 800a256:	2b01      	cmp	r3, #1
 800a258:	d108      	bne.n	800a26c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	699a      	ldr	r2, [r3, #24]
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a268:	619a      	str	r2, [r3, #24]
 800a26a:	e007      	b.n	800a27c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	699a      	ldr	r2, [r3, #24]
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a27a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	7c9b      	ldrb	r3, [r3, #18]
 800a280:	2b01      	cmp	r3, #1
 800a282:	d108      	bne.n	800a296 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	699a      	ldr	r2, [r3, #24]
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a292:	619a      	str	r2, [r3, #24]
 800a294:	e007      	b.n	800a2a6 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	699a      	ldr	r2, [r3, #24]
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a2a4:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	699b      	ldr	r3, [r3, #24]
 800a2ac:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	689a      	ldr	r2, [r3, #8]
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	430a      	orrs	r2, r1
 800a2ba:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	699a      	ldr	r2, [r3, #24]
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800a2ca:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	691a      	ldr	r2, [r3, #16]
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	f022 0210 	bic.w	r2, r2, #16
 800a2da:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	68db      	ldr	r3, [r3, #12]
 800a2e0:	2b01      	cmp	r3, #1
 800a2e2:	d108      	bne.n	800a2f6 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	699a      	ldr	r2, [r3, #24]
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f042 0204 	orr.w	r2, r2, #4
 800a2f2:	619a      	str	r2, [r3, #24]
 800a2f4:	e030      	b.n	800a358 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	68db      	ldr	r3, [r3, #12]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d02c      	beq.n	800a358 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	68db      	ldr	r3, [r3, #12]
 800a302:	2b02      	cmp	r3, #2
 800a304:	d020      	beq.n	800a348 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	699a      	ldr	r2, [r3, #24]
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a314:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	691a      	ldr	r2, [r3, #16]
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f042 0210 	orr.w	r2, r2, #16
 800a324:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	68db      	ldr	r3, [r3, #12]
 800a32a:	2b03      	cmp	r3, #3
 800a32c:	d114      	bne.n	800a358 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	699a      	ldr	r2, [r3, #24]
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f042 0220 	orr.w	r2, r2, #32
 800a33c:	619a      	str	r2, [r3, #24]
 800a33e:	e00b      	b.n	800a358 <HAL_FDCAN_Init+0x234>
 800a340:	08014574 	.word	0x08014574
 800a344:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	699a      	ldr	r2, [r3, #24]
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f042 0220 	orr.w	r2, r2, #32
 800a356:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	699b      	ldr	r3, [r3, #24]
 800a35c:	3b01      	subs	r3, #1
 800a35e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	69db      	ldr	r3, [r3, #28]
 800a364:	3b01      	subs	r3, #1
 800a366:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800a368:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6a1b      	ldr	r3, [r3, #32]
 800a36e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800a370:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	695b      	ldr	r3, [r3, #20]
 800a378:	3b01      	subs	r3, #1
 800a37a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800a380:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800a382:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	689b      	ldr	r3, [r3, #8]
 800a388:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a38c:	d115      	bne.n	800a3ba <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a392:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a398:	3b01      	subs	r3, #1
 800a39a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800a39c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3a2:	3b01      	subs	r3, #1
 800a3a4:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800a3a6:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ae:	3b01      	subs	r3, #1
 800a3b0:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800a3b6:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800a3b8:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d00a      	beq.n	800a3d8 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	430a      	orrs	r2, r1
 800a3d4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3e0:	4413      	add	r3, r2
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d011      	beq.n	800a40a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800a3ee:	f023 0107 	bic.w	r1, r3, #7
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a3f6:	009b      	lsls	r3, r3, #2
 800a3f8:	3360      	adds	r3, #96	; 0x60
 800a3fa:	443b      	add	r3, r7
 800a3fc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	430a      	orrs	r2, r1
 800a406:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d011      	beq.n	800a436 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a41a:	f023 0107 	bic.w	r1, r3, #7
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a422:	009b      	lsls	r3, r3, #2
 800a424:	3360      	adds	r3, #96	; 0x60
 800a426:	443b      	add	r3, r7
 800a428:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	430a      	orrs	r2, r1
 800a432:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d012      	beq.n	800a464 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a446:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a44e:	009b      	lsls	r3, r3, #2
 800a450:	3360      	adds	r3, #96	; 0x60
 800a452:	443b      	add	r3, r7
 800a454:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800a458:	011a      	lsls	r2, r3, #4
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	430a      	orrs	r2, r1
 800a460:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d012      	beq.n	800a492 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a474:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a47c:	009b      	lsls	r3, r3, #2
 800a47e:	3360      	adds	r3, #96	; 0x60
 800a480:	443b      	add	r3, r7
 800a482:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800a486:	021a      	lsls	r2, r3, #8
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	430a      	orrs	r2, r1
 800a48e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	4a11      	ldr	r2, [pc, #68]	; (800a4dc <HAL_FDCAN_Init+0x3b8>)
 800a498:	4293      	cmp	r3, r2
 800a49a:	d107      	bne.n	800a4ac <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	685b      	ldr	r3, [r3, #4]
 800a4a0:	689a      	ldr	r2, [r3, #8]
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	685b      	ldr	r3, [r3, #4]
 800a4a6:	f022 0203 	bic.w	r2, r2, #3
 800a4aa:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2201      	movs	r2, #1
 800a4c0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800a4c4:	6878      	ldr	r0, [r7, #4]
 800a4c6:	f000 fe27 	bl	800b118 <FDCAN_CalcultateRamBlockAddresses>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 800a4d0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	3760      	adds	r7, #96	; 0x60
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}
 800a4dc:	4000a000 	.word	0x4000a000

0800a4e0 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b087      	sub	sp, #28
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
 800a4e8:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a4f0:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800a4f2:	7bfb      	ldrb	r3, [r7, #15]
 800a4f4:	2b01      	cmp	r3, #1
 800a4f6:	d002      	beq.n	800a4fe <HAL_FDCAN_ConfigFilter+0x1e>
 800a4f8:	7bfb      	ldrb	r3, [r7, #15]
 800a4fa:	2b02      	cmp	r3, #2
 800a4fc:	d157      	bne.n	800a5ae <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d12b      	bne.n	800a55e <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	68db      	ldr	r3, [r3, #12]
 800a50a:	2b07      	cmp	r3, #7
 800a50c:	d10d      	bne.n	800a52a <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	691b      	ldr	r3, [r3, #16]
 800a512:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	69db      	ldr	r3, [r3, #28]
 800a518:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 800a51a:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 800a520:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 800a522:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 800a526:	617b      	str	r3, [r7, #20]
 800a528:	e00e      	b.n	800a548 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	689b      	ldr	r3, [r3, #8]
 800a52e:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	68db      	ldr	r3, [r3, #12]
 800a534:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800a536:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	691b      	ldr	r3, [r3, #16]
 800a53c:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 800a53e:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800a544:	4313      	orrs	r3, r2
 800a546:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	685b      	ldr	r3, [r3, #4]
 800a550:	009b      	lsls	r3, r3, #2
 800a552:	4413      	add	r3, r2
 800a554:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800a556:	68bb      	ldr	r3, [r7, #8]
 800a558:	697a      	ldr	r2, [r7, #20]
 800a55a:	601a      	str	r2, [r3, #0]
 800a55c:	e025      	b.n	800a5aa <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	68db      	ldr	r3, [r3, #12]
 800a562:	075a      	lsls	r2, r3, #29
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	691b      	ldr	r3, [r3, #16]
 800a568:	4313      	orrs	r3, r2
 800a56a:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	68db      	ldr	r3, [r3, #12]
 800a570:	2b07      	cmp	r3, #7
 800a572:	d103      	bne.n	800a57c <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	699b      	ldr	r3, [r3, #24]
 800a578:	613b      	str	r3, [r7, #16]
 800a57a:	e006      	b.n	800a58a <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	689b      	ldr	r3, [r3, #8]
 800a580:	079a      	lsls	r2, r3, #30
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	695b      	ldr	r3, [r3, #20]
 800a586:	4313      	orrs	r3, r2
 800a588:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	685b      	ldr	r3, [r3, #4]
 800a592:	00db      	lsls	r3, r3, #3
 800a594:	4413      	add	r3, r2
 800a596:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	697a      	ldr	r2, [r7, #20]
 800a59c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	3304      	adds	r3, #4
 800a5a2:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	693a      	ldr	r2, [r7, #16]
 800a5a8:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	e008      	b.n	800a5c0 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a5b4:	f043 0202 	orr.w	r2, r3, #2
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800a5be:	2301      	movs	r3, #1
  }
}
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	371c      	adds	r7, #28
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ca:	4770      	bx	lr

0800a5cc <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b085      	sub	sp, #20
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	60f8      	str	r0, [r7, #12]
 800a5d4:	60b9      	str	r1, [r7, #8]
 800a5d6:	607a      	str	r2, [r7, #4]
 800a5d8:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a5e0:	b2db      	uxtb	r3, r3
 800a5e2:	2b01      	cmp	r3, #1
 800a5e4:	d110      	bne.n	800a608 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800a5ee:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 800a5f4:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 800a5fc:	69ba      	ldr	r2, [r7, #24]
 800a5fe:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800a600:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 800a604:	2300      	movs	r3, #0
 800a606:	e008      	b.n	800a61a <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a60e:	f043 0204 	orr.w	r2, r3, #4
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800a618:	2301      	movs	r3, #1
  }
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	3714      	adds	r7, #20
 800a61e:	46bd      	mov	sp, r7
 800a620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a624:	4770      	bx	lr

0800a626 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800a626:	b480      	push	{r7}
 800a628:	b083      	sub	sp, #12
 800a62a:	af00      	add	r7, sp, #0
 800a62c:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a634:	b2db      	uxtb	r3, r3
 800a636:	2b01      	cmp	r3, #1
 800a638:	d111      	bne.n	800a65e <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2202      	movs	r2, #2
 800a63e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	699a      	ldr	r2, [r3, #24]
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f022 0201 	bic.w	r2, r2, #1
 800a650:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2200      	movs	r2, #0
 800a656:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 800a65a:	2300      	movs	r3, #0
 800a65c:	e008      	b.n	800a670 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a664:	f043 0204 	orr.w	r2, r3, #4
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800a66e:	2301      	movs	r3, #1
  }
}
 800a670:	4618      	mov	r0, r3
 800a672:	370c      	adds	r7, #12
 800a674:	46bd      	mov	sp, r7
 800a676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67a:	4770      	bx	lr

0800a67c <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b086      	sub	sp, #24
 800a680:	af00      	add	r7, sp, #0
 800a682:	60f8      	str	r0, [r7, #12]
 800a684:	60b9      	str	r1, [r7, #8]
 800a686:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a68e:	b2db      	uxtb	r3, r3
 800a690:	2b02      	cmp	r3, #2
 800a692:	d141      	bne.n	800a718 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800a69c:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d109      	bne.n	800a6b8 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a6aa:	f043 0220 	orr.w	r2, r3, #32
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	e038      	b.n	800a72a <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800a6c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d009      	beq.n	800a6dc <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a6ce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 800a6d8:	2301      	movs	r3, #1
 800a6da:	e026      	b.n	800a72a <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800a6e4:	0c1b      	lsrs	r3, r3, #16
 800a6e6:	f003 031f 	and.w	r3, r3, #31
 800a6ea:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	687a      	ldr	r2, [r7, #4]
 800a6f0:	68b9      	ldr	r1, [r7, #8]
 800a6f2:	68f8      	ldr	r0, [r7, #12]
 800a6f4:	f000 fe96 	bl	800b424 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	2101      	movs	r1, #1
 800a6fe:	697a      	ldr	r2, [r7, #20]
 800a700:	fa01 f202 	lsl.w	r2, r1, r2
 800a704:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800a708:	2201      	movs	r2, #1
 800a70a:	697b      	ldr	r3, [r7, #20]
 800a70c:	409a      	lsls	r2, r3
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 800a714:	2300      	movs	r3, #0
 800a716:	e008      	b.n	800a72a <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a71e:	f043 0208 	orr.w	r2, r3, #8
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800a728:	2301      	movs	r3, #1
  }
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	3718      	adds	r7, #24
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd80      	pop	{r7, pc}
	...

0800a734 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800a734:	b480      	push	{r7}
 800a736:	b08b      	sub	sp, #44	; 0x2c
 800a738:	af00      	add	r7, sp, #0
 800a73a:	60f8      	str	r0, [r7, #12]
 800a73c:	60b9      	str	r1, [r7, #8]
 800a73e:	607a      	str	r2, [r7, #4]
 800a740:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800a742:	2300      	movs	r3, #0
 800a744:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a74c:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 800a74e:	7efb      	ldrb	r3, [r7, #27]
 800a750:	2b02      	cmp	r3, #2
 800a752:	f040 814b 	bne.w	800a9ec <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	2b40      	cmp	r3, #64	; 0x40
 800a75a:	d14d      	bne.n	800a7f8 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a764:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d109      	bne.n	800a780 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a772:	f043 0220 	orr.w	r2, r3, #32
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800a77c:	2301      	movs	r3, #1
 800a77e:	e13e      	b.n	800a9fe <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a788:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d109      	bne.n	800a7a4 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a796:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	e12c      	b.n	800a9fe <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a7ac:	0e1b      	lsrs	r3, r3, #24
 800a7ae:	f003 0301 	and.w	r3, r3, #1
 800a7b2:	2b01      	cmp	r3, #1
 800a7b4:	d10b      	bne.n	800a7ce <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a7be:	0fdb      	lsrs	r3, r3, #31
 800a7c0:	f003 0301 	and.w	r3, r3, #1
 800a7c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a7c8:	d101      	bne.n	800a7ce <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a7d6:	0a1b      	lsrs	r3, r3, #8
 800a7d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a7dc:	69fa      	ldr	r2, [r7, #28]
 800a7de:	4413      	add	r3, r2
 800a7e0:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7ea:	69f9      	ldr	r1, [r7, #28]
 800a7ec:	fb01 f303 	mul.w	r3, r1, r3
 800a7f0:	009b      	lsls	r3, r3, #2
 800a7f2:	4413      	add	r3, r2
 800a7f4:	627b      	str	r3, [r7, #36]	; 0x24
 800a7f6:	e069      	b.n	800a8cc <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800a7f8:	68bb      	ldr	r3, [r7, #8]
 800a7fa:	2b41      	cmp	r3, #65	; 0x41
 800a7fc:	d14d      	bne.n	800a89a <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a806:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d109      	bne.n	800a822 <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a814:	f043 0220 	orr.w	r2, r3, #32
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800a81e:	2301      	movs	r3, #1
 800a820:	e0ed      	b.n	800a9fe <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a82a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d109      	bne.n	800a846 <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a838:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800a842:	2301      	movs	r3, #1
 800a844:	e0db      	b.n	800a9fe <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a84e:	0e1b      	lsrs	r3, r3, #24
 800a850:	f003 0301 	and.w	r3, r3, #1
 800a854:	2b01      	cmp	r3, #1
 800a856:	d10b      	bne.n	800a870 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a860:	0fdb      	lsrs	r3, r3, #31
 800a862:	f003 0301 	and.w	r3, r3, #1
 800a866:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a86a:	d101      	bne.n	800a870 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800a86c:	2301      	movs	r3, #1
 800a86e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a878:	0a1b      	lsrs	r3, r3, #8
 800a87a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a87e:	69fa      	ldr	r2, [r7, #28]
 800a880:	4413      	add	r3, r2
 800a882:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a88c:	69f9      	ldr	r1, [r7, #28]
 800a88e:	fb01 f303 	mul.w	r3, r1, r3
 800a892:	009b      	lsls	r3, r3, #2
 800a894:	4413      	add	r3, r2
 800a896:	627b      	str	r3, [r7, #36]	; 0x24
 800a898:	e018      	b.n	800a8cc <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a89e:	68ba      	ldr	r2, [r7, #8]
 800a8a0:	429a      	cmp	r2, r3
 800a8a2:	d309      	bcc.n	800a8b8 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a8aa:	f043 0220 	orr.w	r2, r3, #32
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	e0a2      	b.n	800a9fe <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8c0:	68b9      	ldr	r1, [r7, #8]
 800a8c2:	fb01 f303 	mul.w	r3, r1, r3
 800a8c6:	009b      	lsls	r3, r3, #2
 800a8c8:	4413      	add	r3, r2
 800a8ca:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800a8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	685b      	ldr	r3, [r3, #4]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d107      	bne.n	800a8f0 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 800a8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	0c9b      	lsrs	r3, r3, #18
 800a8e6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	601a      	str	r2, [r3, #0]
 800a8ee:	e005      	b.n	800a8fc <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800a8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800a8fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800a908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800a914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a916:	3304      	adds	r3, #4
 800a918:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800a91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	b29a      	uxth	r2, r3
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 800a924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800a930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800a93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 800a948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	0e1b      	lsrs	r3, r3, #24
 800a94e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 800a956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	0fda      	lsrs	r2, r3, #31
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800a960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a962:	3304      	adds	r3, #4
 800a964:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800a966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a968:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 800a96a:	2300      	movs	r3, #0
 800a96c:	623b      	str	r3, [r7, #32]
 800a96e:	e00a      	b.n	800a986 <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800a970:	697a      	ldr	r2, [r7, #20]
 800a972:	6a3b      	ldr	r3, [r7, #32]
 800a974:	441a      	add	r2, r3
 800a976:	6839      	ldr	r1, [r7, #0]
 800a978:	6a3b      	ldr	r3, [r7, #32]
 800a97a:	440b      	add	r3, r1
 800a97c:	7812      	ldrb	r2, [r2, #0]
 800a97e:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 800a980:	6a3b      	ldr	r3, [r7, #32]
 800a982:	3301      	adds	r3, #1
 800a984:	623b      	str	r3, [r7, #32]
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	68db      	ldr	r3, [r3, #12]
 800a98a:	0c1b      	lsrs	r3, r3, #16
 800a98c:	4a1f      	ldr	r2, [pc, #124]	; (800aa0c <HAL_FDCAN_GetRxMessage+0x2d8>)
 800a98e:	5cd3      	ldrb	r3, [r2, r3]
 800a990:	461a      	mov	r2, r3
 800a992:	6a3b      	ldr	r3, [r7, #32]
 800a994:	4293      	cmp	r3, r2
 800a996:	d3eb      	bcc.n	800a970 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	2b40      	cmp	r3, #64	; 0x40
 800a99c:	d105      	bne.n	800a9aa <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	69fa      	ldr	r2, [r7, #28]
 800a9a4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 800a9a8:	e01e      	b.n	800a9e8 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800a9aa:	68bb      	ldr	r3, [r7, #8]
 800a9ac:	2b41      	cmp	r3, #65	; 0x41
 800a9ae:	d105      	bne.n	800a9bc <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	69fa      	ldr	r2, [r7, #28]
 800a9b6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800a9ba:	e015      	b.n	800a9e8 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	2b1f      	cmp	r3, #31
 800a9c0:	d808      	bhi.n	800a9d4 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	2101      	movs	r1, #1
 800a9c8:	68ba      	ldr	r2, [r7, #8]
 800a9ca:	fa01 f202 	lsl.w	r2, r1, r2
 800a9ce:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800a9d2:	e009      	b.n	800a9e8 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	f003 021f 	and.w	r2, r3, #31
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	2101      	movs	r1, #1
 800a9e0:	fa01 f202 	lsl.w	r2, r1, r2
 800a9e4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	e008      	b.n	800a9fe <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a9f2:	f043 0208 	orr.w	r2, r3, #8
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800a9fc:	2301      	movs	r3, #1
  }
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	372c      	adds	r7, #44	; 0x2c
 800aa02:	46bd      	mov	sp, r7
 800aa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa08:	4770      	bx	lr
 800aa0a:	bf00      	nop
 800aa0c:	080145dc 	.word	0x080145dc

0800aa10 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 800aa10:	b480      	push	{r7}
 800aa12:	b087      	sub	sp, #28
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	60f8      	str	r0, [r7, #12]
 800aa18:	60b9      	str	r1, [r7, #8]
 800aa1a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800aa22:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800aa24:	7dfb      	ldrb	r3, [r7, #23]
 800aa26:	2b01      	cmp	r3, #1
 800aa28:	d002      	beq.n	800aa30 <HAL_FDCAN_ActivateNotification+0x20>
 800aa2a:	7dfb      	ldrb	r3, [r7, #23]
 800aa2c:	2b02      	cmp	r3, #2
 800aa2e:	d155      	bne.n	800aadc <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	4013      	ands	r3, r2
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d108      	bne.n	800aa50 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	f042 0201 	orr.w	r2, r2, #1
 800aa4c:	65da      	str	r2, [r3, #92]	; 0x5c
 800aa4e:	e014      	b.n	800aa7a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	4013      	ands	r3, r2
 800aa5a:	68ba      	ldr	r2, [r7, #8]
 800aa5c:	429a      	cmp	r2, r3
 800aa5e:	d108      	bne.n	800aa72 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	f042 0202 	orr.w	r2, r2, #2
 800aa6e:	65da      	str	r2, [r3, #92]	; 0x5c
 800aa70:	e003      	b.n	800aa7a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	2203      	movs	r2, #3
 800aa78:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d009      	beq.n	800aa98 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	687a      	ldr	r2, [r7, #4]
 800aa92:	430a      	orrs	r2, r1
 800aa94:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d009      	beq.n	800aab6 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	687a      	ldr	r2, [r7, #4]
 800aab0:	430a      	orrs	r2, r1
 800aab2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800aabc:	68ba      	ldr	r2, [r7, #8]
 800aabe:	4b0f      	ldr	r3, [pc, #60]	; (800aafc <HAL_FDCAN_ActivateNotification+0xec>)
 800aac0:	4013      	ands	r3, r2
 800aac2:	68fa      	ldr	r2, [r7, #12]
 800aac4:	6812      	ldr	r2, [r2, #0]
 800aac6:	430b      	orrs	r3, r1
 800aac8:	6553      	str	r3, [r2, #84]	; 0x54
 800aaca:	4b0d      	ldr	r3, [pc, #52]	; (800ab00 <HAL_FDCAN_ActivateNotification+0xf0>)
 800aacc:	695a      	ldr	r2, [r3, #20]
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	0f9b      	lsrs	r3, r3, #30
 800aad2:	490b      	ldr	r1, [pc, #44]	; (800ab00 <HAL_FDCAN_ActivateNotification+0xf0>)
 800aad4:	4313      	orrs	r3, r2
 800aad6:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 800aad8:	2300      	movs	r3, #0
 800aada:	e008      	b.n	800aaee <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800aae2:	f043 0202 	orr.w	r2, r3, #2
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800aaec:	2301      	movs	r3, #1
  }
}
 800aaee:	4618      	mov	r0, r3
 800aaf0:	371c      	adds	r7, #28
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf8:	4770      	bx	lr
 800aafa:	bf00      	nop
 800aafc:	3fcfffff 	.word	0x3fcfffff
 800ab00:	4000a800 	.word	0x4000a800

0800ab04 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b092      	sub	sp, #72	; 0x48
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 800ab0c:	4b90      	ldr	r3, [pc, #576]	; (800ad50 <HAL_FDCAN_IRQHandler+0x24c>)
 800ab0e:	691b      	ldr	r3, [r3, #16]
 800ab10:	079b      	lsls	r3, r3, #30
 800ab12:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 800ab14:	4b8e      	ldr	r3, [pc, #568]	; (800ad50 <HAL_FDCAN_IRQHandler+0x24c>)
 800ab16:	695b      	ldr	r3, [r3, #20]
 800ab18:	079b      	lsls	r3, r3, #30
 800ab1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab1c:	4013      	ands	r3, r2
 800ab1e:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab26:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800ab2a:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ab34:	4013      	ands	r3, r2
 800ab36:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab3e:	f003 030f 	and.w	r3, r3, #15
 800ab42:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ab4c:	4013      	ands	r3, r2
 800ab4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ab5a:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ab64:	4013      	ands	r3, r2
 800ab66:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab6e:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 800ab72:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab7c:	4013      	ands	r3, r2
 800ab7e:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab86:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 800ab8a:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab94:	4013      	ands	r3, r2
 800ab96:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d011      	beq.n	800abca <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d00a      	beq.n	800abca <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800abbc:	651a      	str	r2, [r3, #80]	; 0x50
 800abbe:	4b64      	ldr	r3, [pc, #400]	; (800ad50 <HAL_FDCAN_IRQHandler+0x24c>)
 800abc0:	2200      	movs	r2, #0
 800abc2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	f000 fa5a 	bl	800b07e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d01e      	beq.n	800ac16 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d017      	beq.n	800ac16 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800abee:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800abf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800abfa:	4013      	ands	r3, r2
 800abfc:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ac06:	651a      	str	r2, [r3, #80]	; 0x50
 800ac08:	4b51      	ldr	r3, [pc, #324]	; (800ad50 <HAL_FDCAN_IRQHandler+0x24c>)
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800ac0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	f000 fa0b 	bl	800b02c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 800ac16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d00d      	beq.n	800ac38 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681a      	ldr	r2, [r3, #0]
 800ac20:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ac22:	4b4c      	ldr	r3, [pc, #304]	; (800ad54 <HAL_FDCAN_IRQHandler+0x250>)
 800ac24:	400b      	ands	r3, r1
 800ac26:	6513      	str	r3, [r2, #80]	; 0x50
 800ac28:	4a49      	ldr	r2, [pc, #292]	; (800ad50 <HAL_FDCAN_IRQHandler+0x24c>)
 800ac2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac2c:	0f9b      	lsrs	r3, r3, #30
 800ac2e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 800ac30:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ac32:	6878      	ldr	r0, [r7, #4]
 800ac34:	f000 f9c4 	bl	800afc0 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800ac38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d00d      	beq.n	800ac5a <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681a      	ldr	r2, [r3, #0]
 800ac42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ac44:	4b43      	ldr	r3, [pc, #268]	; (800ad54 <HAL_FDCAN_IRQHandler+0x250>)
 800ac46:	400b      	ands	r3, r1
 800ac48:	6513      	str	r3, [r2, #80]	; 0x50
 800ac4a:	4a41      	ldr	r2, [pc, #260]	; (800ad50 <HAL_FDCAN_IRQHandler+0x24c>)
 800ac4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac4e:	0f9b      	lsrs	r3, r3, #30
 800ac50:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800ac52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ac54:	6878      	ldr	r0, [r7, #4]
 800ac56:	f000 f9be 	bl	800afd6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800ac5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d00d      	beq.n	800ac7c <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681a      	ldr	r2, [r3, #0]
 800ac64:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ac66:	4b3b      	ldr	r3, [pc, #236]	; (800ad54 <HAL_FDCAN_IRQHandler+0x250>)
 800ac68:	400b      	ands	r3, r1
 800ac6a:	6513      	str	r3, [r2, #80]	; 0x50
 800ac6c:	4a38      	ldr	r2, [pc, #224]	; (800ad50 <HAL_FDCAN_IRQHandler+0x24c>)
 800ac6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac70:	0f9b      	lsrs	r3, r3, #30
 800ac72:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800ac74:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ac76:	6878      	ldr	r0, [r7, #4]
 800ac78:	f7fb fc42 	bl	8006500 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800ac7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d00d      	beq.n	800ac9e <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681a      	ldr	r2, [r3, #0]
 800ac86:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ac88:	4b32      	ldr	r3, [pc, #200]	; (800ad54 <HAL_FDCAN_IRQHandler+0x250>)
 800ac8a:	400b      	ands	r3, r1
 800ac8c:	6513      	str	r3, [r2, #80]	; 0x50
 800ac8e:	4a30      	ldr	r2, [pc, #192]	; (800ad50 <HAL_FDCAN_IRQHandler+0x24c>)
 800ac90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac92:	0f9b      	lsrs	r3, r3, #30
 800ac94:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800ac96:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	f000 f9a7 	bl	800afec <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aca4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d011      	beq.n	800acd0 <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d00a      	beq.n	800acd0 <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800acc2:	651a      	str	r2, [r3, #80]	; 0x50
 800acc4:	4b22      	ldr	r3, [pc, #136]	; (800ad50 <HAL_FDCAN_IRQHandler+0x24c>)
 800acc6:	2200      	movs	r2, #0
 800acc8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f000 f999 	bl	800b002 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d01e      	beq.n	800ad1c <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ace4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d017      	beq.n	800ad1c <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800acf4:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800acfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad00:	4013      	ands	r3, r2
 800ad02:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ad0c:	651a      	str	r2, [r3, #80]	; 0x50
 800ad0e:	4b10      	ldr	r3, [pc, #64]	; (800ad50 <HAL_FDCAN_IRQHandler+0x24c>)
 800ad10:	2200      	movs	r2, #0
 800ad12:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800ad14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f000 f97d 	bl	800b016 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d016      	beq.n	800ad58 <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d00f      	beq.n	800ad58 <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800ad40:	651a      	str	r2, [r3, #80]	; 0x50
 800ad42:	4b03      	ldr	r3, [pc, #12]	; (800ad50 <HAL_FDCAN_IRQHandler+0x24c>)
 800ad44:	2200      	movs	r2, #0
 800ad46:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f000 f97a 	bl	800b042 <HAL_FDCAN_RxBufferNewMessageCallback>
 800ad4e:	e003      	b.n	800ad58 <HAL_FDCAN_IRQHandler+0x254>
 800ad50:	4000a800 	.word	0x4000a800
 800ad54:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d011      	beq.n	800ad8a <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d00a      	beq.n	800ad8a <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800ad7c:	651a      	str	r2, [r3, #80]	; 0x50
 800ad7e:	4b8d      	ldr	r3, [pc, #564]	; (800afb4 <HAL_FDCAN_IRQHandler+0x4b0>)
 800ad80:	2200      	movs	r2, #0
 800ad82:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	f000 f966 	bl	800b056 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d011      	beq.n	800adbc <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d00a      	beq.n	800adbc <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800adae:	651a      	str	r2, [r3, #80]	; 0x50
 800adb0:	4b80      	ldr	r3, [pc, #512]	; (800afb4 <HAL_FDCAN_IRQHandler+0x4b0>)
 800adb2:	2200      	movs	r2, #0
 800adb4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800adb6:	6878      	ldr	r0, [r7, #4]
 800adb8:	f000 f957 	bl	800b06a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d016      	beq.n	800adf8 <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800add0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800add4:	2b00      	cmp	r3, #0
 800add6:	d00f      	beq.n	800adf8 <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800ade0:	651a      	str	r2, [r3, #80]	; 0x50
 800ade2:	4b74      	ldr	r3, [pc, #464]	; (800afb4 <HAL_FDCAN_IRQHandler+0x4b0>)
 800ade4:	2200      	movs	r2, #0
 800ade6:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800adee:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800adf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d00d      	beq.n	800ae1a <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681a      	ldr	r2, [r3, #0]
 800ae02:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ae04:	4b6c      	ldr	r3, [pc, #432]	; (800afb8 <HAL_FDCAN_IRQHandler+0x4b4>)
 800ae06:	400b      	ands	r3, r1
 800ae08:	6513      	str	r3, [r2, #80]	; 0x50
 800ae0a:	4a6a      	ldr	r2, [pc, #424]	; (800afb4 <HAL_FDCAN_IRQHandler+0x4b0>)
 800ae0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae0e:	0f9b      	lsrs	r3, r3, #30
 800ae10:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800ae12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f000 f946 	bl	800b0a6 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800ae1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d011      	beq.n	800ae44 <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681a      	ldr	r2, [r3, #0]
 800ae24:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ae26:	4b64      	ldr	r3, [pc, #400]	; (800afb8 <HAL_FDCAN_IRQHandler+0x4b4>)
 800ae28:	400b      	ands	r3, r1
 800ae2a:	6513      	str	r3, [r2, #80]	; 0x50
 800ae2c:	4a61      	ldr	r2, [pc, #388]	; (800afb4 <HAL_FDCAN_IRQHandler+0x4b0>)
 800ae2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae30:	0f9b      	lsrs	r3, r3, #30
 800ae32:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800ae3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae3c:	431a      	orrs	r2, r3
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	4a5c      	ldr	r2, [pc, #368]	; (800afbc <HAL_FDCAN_IRQHandler+0x4b8>)
 800ae4a:	4293      	cmp	r3, r2
 800ae4c:	f040 80a6 	bne.w	800af9c <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	685b      	ldr	r3, [r3, #4]
 800ae54:	689b      	ldr	r3, [r3, #8]
 800ae56:	f003 0303 	and.w	r3, r3, #3
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	f000 809e 	beq.w	800af9c <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	685b      	ldr	r3, [r3, #4]
 800ae64:	6a1b      	ldr	r3, [r3, #32]
 800ae66:	f003 030f 	and.w	r3, r3, #15
 800ae6a:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	685b      	ldr	r3, [r3, #4]
 800ae70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae74:	4013      	ands	r3, r2
 800ae76:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	685b      	ldr	r3, [r3, #4]
 800ae7c:	6a1b      	ldr	r3, [r3, #32]
 800ae7e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ae82:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	685b      	ldr	r3, [r3, #4]
 800ae88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae8a:	6a3a      	ldr	r2, [r7, #32]
 800ae8c:	4013      	ands	r3, r2
 800ae8e:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	685b      	ldr	r3, [r3, #4]
 800ae94:	6a1b      	ldr	r3, [r3, #32]
 800ae96:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800ae9a:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	685b      	ldr	r3, [r3, #4]
 800aea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aea2:	69fa      	ldr	r2, [r7, #28]
 800aea4:	4013      	ands	r3, r2
 800aea6:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	685b      	ldr	r3, [r3, #4]
 800aeac:	6a1b      	ldr	r3, [r3, #32]
 800aeae:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 800aeb2:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	685b      	ldr	r3, [r3, #4]
 800aeb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeba:	69ba      	ldr	r2, [r7, #24]
 800aebc:	4013      	ands	r3, r2
 800aebe:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	685b      	ldr	r3, [r3, #4]
 800aec4:	6a1b      	ldr	r3, [r3, #32]
 800aec6:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 800aeca:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	685b      	ldr	r3, [r3, #4]
 800aed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aed2:	697a      	ldr	r2, [r7, #20]
 800aed4:	4013      	ands	r3, r2
 800aed6:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 800aed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d007      	beq.n	800aeee <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	685b      	ldr	r3, [r3, #4]
 800aee2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aee4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 800aee6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aee8:	6878      	ldr	r0, [r7, #4]
 800aeea:	f000 f8e7 	bl	800b0bc <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 800aeee:	6a3b      	ldr	r3, [r7, #32]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d007      	beq.n	800af04 <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	685b      	ldr	r3, [r3, #4]
 800aef8:	6a3a      	ldr	r2, [r7, #32]
 800aefa:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 800aefc:	6a39      	ldr	r1, [r7, #32]
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	f000 f8e7 	bl	800b0d2 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	685b      	ldr	r3, [r3, #4]
 800af08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d01b      	beq.n	800af4a <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	685b      	ldr	r3, [r3, #4]
 800af16:	6a1b      	ldr	r3, [r3, #32]
 800af18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d014      	beq.n	800af4a <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	685b      	ldr	r3, [r3, #4]
 800af24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af26:	0c1b      	lsrs	r3, r3, #16
 800af28:	b29b      	uxth	r3, r3
 800af2a:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	685b      	ldr	r3, [r3, #4]
 800af30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800af36:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	685b      	ldr	r3, [r3, #4]
 800af3c:	2240      	movs	r2, #64	; 0x40
 800af3e:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 800af40:	68fa      	ldr	r2, [r7, #12]
 800af42:	6939      	ldr	r1, [r7, #16]
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	f000 f8cf 	bl	800b0e8 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 800af4a:	69fb      	ldr	r3, [r7, #28]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d007      	beq.n	800af60 <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	685b      	ldr	r3, [r3, #4]
 800af54:	69fa      	ldr	r2, [r7, #28]
 800af56:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 800af58:	69f9      	ldr	r1, [r7, #28]
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f000 f8d0 	bl	800b100 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 800af60:	69bb      	ldr	r3, [r7, #24]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d00b      	beq.n	800af7e <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	685b      	ldr	r3, [r3, #4]
 800af6a:	69ba      	ldr	r2, [r7, #24]
 800af6c:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800af74:	69bb      	ldr	r3, [r7, #24]
 800af76:	431a      	orrs	r2, r3
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d00b      	beq.n	800af9c <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	685b      	ldr	r3, [r3, #4]
 800af88:	697a      	ldr	r2, [r7, #20]
 800af8a:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	431a      	orrs	r2, r3
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d002      	beq.n	800afac <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f000 f873 	bl	800b092 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800afac:	bf00      	nop
 800afae:	3748      	adds	r7, #72	; 0x48
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}
 800afb4:	4000a800 	.word	0x4000a800
 800afb8:	3fcfffff 	.word	0x3fcfffff
 800afbc:	4000a000 	.word	0x4000a000

0800afc0 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 800afc0:	b480      	push	{r7}
 800afc2:	b083      	sub	sp, #12
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
 800afc8:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 800afca:	bf00      	nop
 800afcc:	370c      	adds	r7, #12
 800afce:	46bd      	mov	sp, r7
 800afd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd4:	4770      	bx	lr

0800afd6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800afd6:	b480      	push	{r7}
 800afd8:	b083      	sub	sp, #12
 800afda:	af00      	add	r7, sp, #0
 800afdc:	6078      	str	r0, [r7, #4]
 800afde:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800afe0:	bf00      	nop
 800afe2:	370c      	adds	r7, #12
 800afe4:	46bd      	mov	sp, r7
 800afe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afea:	4770      	bx	lr

0800afec <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800afec:	b480      	push	{r7}
 800afee:	b083      	sub	sp, #12
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
 800aff4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800aff6:	bf00      	nop
 800aff8:	370c      	adds	r7, #12
 800affa:	46bd      	mov	sp, r7
 800affc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b000:	4770      	bx	lr

0800b002 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800b002:	b480      	push	{r7}
 800b004:	b083      	sub	sp, #12
 800b006:	af00      	add	r7, sp, #0
 800b008:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800b00a:	bf00      	nop
 800b00c:	370c      	adds	r7, #12
 800b00e:	46bd      	mov	sp, r7
 800b010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b014:	4770      	bx	lr

0800b016 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800b016:	b480      	push	{r7}
 800b018:	b083      	sub	sp, #12
 800b01a:	af00      	add	r7, sp, #0
 800b01c:	6078      	str	r0, [r7, #4]
 800b01e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800b020:	bf00      	nop
 800b022:	370c      	adds	r7, #12
 800b024:	46bd      	mov	sp, r7
 800b026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02a:	4770      	bx	lr

0800b02c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800b02c:	b480      	push	{r7}
 800b02e:	b083      	sub	sp, #12
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
 800b034:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800b036:	bf00      	nop
 800b038:	370c      	adds	r7, #12
 800b03a:	46bd      	mov	sp, r7
 800b03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b040:	4770      	bx	lr

0800b042 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800b042:	b480      	push	{r7}
 800b044:	b083      	sub	sp, #12
 800b046:	af00      	add	r7, sp, #0
 800b048:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 800b04a:	bf00      	nop
 800b04c:	370c      	adds	r7, #12
 800b04e:	46bd      	mov	sp, r7
 800b050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b054:	4770      	bx	lr

0800b056 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800b056:	b480      	push	{r7}
 800b058:	b083      	sub	sp, #12
 800b05a:	af00      	add	r7, sp, #0
 800b05c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800b05e:	bf00      	nop
 800b060:	370c      	adds	r7, #12
 800b062:	46bd      	mov	sp, r7
 800b064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b068:	4770      	bx	lr

0800b06a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800b06a:	b480      	push	{r7}
 800b06c:	b083      	sub	sp, #12
 800b06e:	af00      	add	r7, sp, #0
 800b070:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800b072:	bf00      	nop
 800b074:	370c      	adds	r7, #12
 800b076:	46bd      	mov	sp, r7
 800b078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07c:	4770      	bx	lr

0800b07e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800b07e:	b480      	push	{r7}
 800b080:	b083      	sub	sp, #12
 800b082:	af00      	add	r7, sp, #0
 800b084:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800b086:	bf00      	nop
 800b088:	370c      	adds	r7, #12
 800b08a:	46bd      	mov	sp, r7
 800b08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b090:	4770      	bx	lr

0800b092 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800b092:	b480      	push	{r7}
 800b094:	b083      	sub	sp, #12
 800b096:	af00      	add	r7, sp, #0
 800b098:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800b09a:	bf00      	nop
 800b09c:	370c      	adds	r7, #12
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a4:	4770      	bx	lr

0800b0a6 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800b0a6:	b480      	push	{r7}
 800b0a8:	b083      	sub	sp, #12
 800b0aa:	af00      	add	r7, sp, #0
 800b0ac:	6078      	str	r0, [r7, #4]
 800b0ae:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800b0b0:	bf00      	nop
 800b0b2:	370c      	adds	r7, #12
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ba:	4770      	bx	lr

0800b0bc <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b083      	sub	sp, #12
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
 800b0c4:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 800b0c6:	bf00      	nop
 800b0c8:	370c      	adds	r7, #12
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d0:	4770      	bx	lr

0800b0d2 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 800b0d2:	b480      	push	{r7}
 800b0d4:	b083      	sub	sp, #12
 800b0d6:	af00      	add	r7, sp, #0
 800b0d8:	6078      	str	r0, [r7, #4]
 800b0da:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 800b0dc:	bf00      	nop
 800b0de:	370c      	adds	r7, #12
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e6:	4770      	bx	lr

0800b0e8 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 800b0e8:	b480      	push	{r7}
 800b0ea:	b085      	sub	sp, #20
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	60f8      	str	r0, [r7, #12]
 800b0f0:	60b9      	str	r1, [r7, #8]
 800b0f2:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 800b0f4:	bf00      	nop
 800b0f6:	3714      	adds	r7, #20
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fe:	4770      	bx	lr

0800b100 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 800b100:	b480      	push	{r7}
 800b102:	b083      	sub	sp, #12
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
 800b108:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 800b10a:	bf00      	nop
 800b10c:	370c      	adds	r7, #12
 800b10e:	46bd      	mov	sp, r7
 800b110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b114:	4770      	bx	lr
	...

0800b118 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800b118:	b480      	push	{r7}
 800b11a:	b085      	sub	sp, #20
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b124:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800b12e:	4ba7      	ldr	r3, [pc, #668]	; (800b3cc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800b130:	4013      	ands	r3, r2
 800b132:	68ba      	ldr	r2, [r7, #8]
 800b134:	0091      	lsls	r1, r2, #2
 800b136:	687a      	ldr	r2, [r7, #4]
 800b138:	6812      	ldr	r2, [r2, #0]
 800b13a:	430b      	orrs	r3, r1
 800b13c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b148:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b150:	041a      	lsls	r2, r3, #16
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	430a      	orrs	r2, r1
 800b158:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b160:	68ba      	ldr	r2, [r7, #8]
 800b162:	4413      	add	r3, r2
 800b164:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b16e:	4b97      	ldr	r3, [pc, #604]	; (800b3cc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800b170:	4013      	ands	r3, r2
 800b172:	68ba      	ldr	r2, [r7, #8]
 800b174:	0091      	lsls	r1, r2, #2
 800b176:	687a      	ldr	r2, [r7, #4]
 800b178:	6812      	ldr	r2, [r2, #0]
 800b17a:	430b      	orrs	r3, r1
 800b17c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b188:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b190:	041a      	lsls	r2, r3, #16
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	430a      	orrs	r2, r1
 800b198:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1a0:	005b      	lsls	r3, r3, #1
 800b1a2:	68ba      	ldr	r2, [r7, #8]
 800b1a4:	4413      	add	r3, r2
 800b1a6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800b1b0:	4b86      	ldr	r3, [pc, #536]	; (800b3cc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800b1b2:	4013      	ands	r3, r2
 800b1b4:	68ba      	ldr	r2, [r7, #8]
 800b1b6:	0091      	lsls	r1, r2, #2
 800b1b8:	687a      	ldr	r2, [r7, #4]
 800b1ba:	6812      	ldr	r2, [r2, #0]
 800b1bc:	430b      	orrs	r3, r1
 800b1be:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b1ca:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1d2:	041a      	lsls	r2, r3, #16
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	430a      	orrs	r2, r1
 800b1da:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1e2:	687a      	ldr	r2, [r7, #4]
 800b1e4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800b1e6:	fb02 f303 	mul.w	r3, r2, r3
 800b1ea:	68ba      	ldr	r2, [r7, #8]
 800b1ec:	4413      	add	r3, r2
 800b1ee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800b1f8:	4b74      	ldr	r3, [pc, #464]	; (800b3cc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800b1fa:	4013      	ands	r3, r2
 800b1fc:	68ba      	ldr	r2, [r7, #8]
 800b1fe:	0091      	lsls	r1, r2, #2
 800b200:	687a      	ldr	r2, [r7, #4]
 800b202:	6812      	ldr	r2, [r2, #0]
 800b204:	430b      	orrs	r3, r1
 800b206:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b212:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b21a:	041a      	lsls	r2, r3, #16
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	430a      	orrs	r2, r1
 800b222:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b22a:	687a      	ldr	r2, [r7, #4]
 800b22c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800b22e:	fb02 f303 	mul.w	r3, r2, r3
 800b232:	68ba      	ldr	r2, [r7, #8]
 800b234:	4413      	add	r3, r2
 800b236:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800b240:	4b62      	ldr	r3, [pc, #392]	; (800b3cc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800b242:	4013      	ands	r3, r2
 800b244:	68ba      	ldr	r2, [r7, #8]
 800b246:	0091      	lsls	r1, r2, #2
 800b248:	687a      	ldr	r2, [r7, #4]
 800b24a:	6812      	ldr	r2, [r2, #0]
 800b24c:	430b      	orrs	r3, r1
 800b24e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b256:	687a      	ldr	r2, [r7, #4]
 800b258:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800b25a:	fb02 f303 	mul.w	r3, r2, r3
 800b25e:	68ba      	ldr	r2, [r7, #8]
 800b260:	4413      	add	r3, r2
 800b262:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800b26c:	4b57      	ldr	r3, [pc, #348]	; (800b3cc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800b26e:	4013      	ands	r3, r2
 800b270:	68ba      	ldr	r2, [r7, #8]
 800b272:	0091      	lsls	r1, r2, #2
 800b274:	687a      	ldr	r2, [r7, #4]
 800b276:	6812      	ldr	r2, [r2, #0]
 800b278:	430b      	orrs	r3, r1
 800b27a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b286:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b28e:	041a      	lsls	r2, r3, #16
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	430a      	orrs	r2, r1
 800b296:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b29e:	005b      	lsls	r3, r3, #1
 800b2a0:	68ba      	ldr	r2, [r7, #8]
 800b2a2:	4413      	add	r3, r2
 800b2a4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800b2ae:	4b47      	ldr	r3, [pc, #284]	; (800b3cc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800b2b0:	4013      	ands	r3, r2
 800b2b2:	68ba      	ldr	r2, [r7, #8]
 800b2b4:	0091      	lsls	r1, r2, #2
 800b2b6:	687a      	ldr	r2, [r7, #4]
 800b2b8:	6812      	ldr	r2, [r2, #0]
 800b2ba:	430b      	orrs	r3, r1
 800b2bc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800b2c8:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b2d0:	041a      	lsls	r2, r3, #16
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	430a      	orrs	r2, r1
 800b2d8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800b2e4:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b2ec:	061a      	lsls	r2, r3, #24
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	430a      	orrs	r2, r1
 800b2f4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b2fc:	4b34      	ldr	r3, [pc, #208]	; (800b3d0 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800b2fe:	4413      	add	r3, r2
 800b300:	009a      	lsls	r2, r3, #2
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b30e:	009b      	lsls	r3, r3, #2
 800b310:	441a      	add	r2, r3
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b31e:	00db      	lsls	r3, r3, #3
 800b320:	441a      	add	r2, r3
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b32e:	6879      	ldr	r1, [r7, #4]
 800b330:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800b332:	fb01 f303 	mul.w	r3, r1, r3
 800b336:	009b      	lsls	r3, r3, #2
 800b338:	441a      	add	r2, r3
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b346:	6879      	ldr	r1, [r7, #4]
 800b348:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800b34a:	fb01 f303 	mul.w	r3, r1, r3
 800b34e:	009b      	lsls	r3, r3, #2
 800b350:	441a      	add	r2, r3
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b35e:	6879      	ldr	r1, [r7, #4]
 800b360:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800b362:	fb01 f303 	mul.w	r3, r1, r3
 800b366:	009b      	lsls	r3, r3, #2
 800b368:	441a      	add	r2, r3
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b37a:	00db      	lsls	r3, r3, #3
 800b37c:	441a      	add	r2, r3
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b38e:	6879      	ldr	r1, [r7, #4]
 800b390:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800b392:	fb01 f303 	mul.w	r3, r1, r3
 800b396:	009b      	lsls	r3, r3, #2
 800b398:	441a      	add	r2, r3
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b3aa:	6879      	ldr	r1, [r7, #4]
 800b3ac:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800b3ae:	fb01 f303 	mul.w	r3, r1, r3
 800b3b2:	009b      	lsls	r3, r3, #2
 800b3b4:	441a      	add	r2, r3
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3c2:	4a04      	ldr	r2, [pc, #16]	; (800b3d4 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 800b3c4:	4293      	cmp	r3, r2
 800b3c6:	d915      	bls.n	800b3f4 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 800b3c8:	e006      	b.n	800b3d8 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800b3ca:	bf00      	nop
 800b3cc:	ffff0003 	.word	0xffff0003
 800b3d0:	10002b00 	.word	0x10002b00
 800b3d4:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b3de:	f043 0220 	orr.w	r2, r3, #32
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	2203      	movs	r2, #3
 800b3ec:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	e010      	b.n	800b416 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b3f8:	60fb      	str	r3, [r7, #12]
 800b3fa:	e005      	b.n	800b408 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	2200      	movs	r2, #0
 800b400:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	3304      	adds	r3, #4
 800b406:	60fb      	str	r3, [r7, #12]
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b40e:	68fa      	ldr	r2, [r7, #12]
 800b410:	429a      	cmp	r2, r3
 800b412:	d3f3      	bcc.n	800b3fc <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 800b414:	2300      	movs	r3, #0
}
 800b416:	4618      	mov	r0, r3
 800b418:	3714      	adds	r7, #20
 800b41a:	46bd      	mov	sp, r7
 800b41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b420:	4770      	bx	lr
 800b422:	bf00      	nop

0800b424 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 800b424:	b480      	push	{r7}
 800b426:	b089      	sub	sp, #36	; 0x24
 800b428:	af00      	add	r7, sp, #0
 800b42a:	60f8      	str	r0, [r7, #12]
 800b42c:	60b9      	str	r1, [r7, #8]
 800b42e:	607a      	str	r2, [r7, #4]
 800b430:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	685b      	ldr	r3, [r3, #4]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d10a      	bne.n	800b450 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800b43a:	68bb      	ldr	r3, [r7, #8]
 800b43c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800b442:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 800b444:	68bb      	ldr	r3, [r7, #8]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800b44a:	4313      	orrs	r3, r2
 800b44c:	61fb      	str	r3, [r7, #28]
 800b44e:	e00a      	b.n	800b466 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800b458:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800b45e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800b460:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b464:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	6a1b      	ldr	r3, [r3, #32]
 800b46a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800b470:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800b472:	68bb      	ldr	r3, [r7, #8]
 800b474:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800b476:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800b478:	68bb      	ldr	r3, [r7, #8]
 800b47a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800b47c:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 800b47e:	68bb      	ldr	r3, [r7, #8]
 800b480:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800b482:	4313      	orrs	r3, r2
 800b484:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b490:	6839      	ldr	r1, [r7, #0]
 800b492:	fb01 f303 	mul.w	r3, r1, r3
 800b496:	009b      	lsls	r3, r3, #2
 800b498:	4413      	add	r3, r2
 800b49a:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800b49c:	69bb      	ldr	r3, [r7, #24]
 800b49e:	69fa      	ldr	r2, [r7, #28]
 800b4a0:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800b4a2:	69bb      	ldr	r3, [r7, #24]
 800b4a4:	3304      	adds	r3, #4
 800b4a6:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800b4a8:	69bb      	ldr	r3, [r7, #24]
 800b4aa:	693a      	ldr	r2, [r7, #16]
 800b4ac:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800b4ae:	69bb      	ldr	r3, [r7, #24]
 800b4b0:	3304      	adds	r3, #4
 800b4b2:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	617b      	str	r3, [r7, #20]
 800b4b8:	e020      	b.n	800b4fc <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 800b4ba:	697b      	ldr	r3, [r7, #20]
 800b4bc:	3303      	adds	r3, #3
 800b4be:	687a      	ldr	r2, [r7, #4]
 800b4c0:	4413      	add	r3, r2
 800b4c2:	781b      	ldrb	r3, [r3, #0]
 800b4c4:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 800b4c6:	697b      	ldr	r3, [r7, #20]
 800b4c8:	3302      	adds	r3, #2
 800b4ca:	6879      	ldr	r1, [r7, #4]
 800b4cc:	440b      	add	r3, r1
 800b4ce:	781b      	ldrb	r3, [r3, #0]
 800b4d0:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 800b4d2:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 800b4d4:	697b      	ldr	r3, [r7, #20]
 800b4d6:	3301      	adds	r3, #1
 800b4d8:	6879      	ldr	r1, [r7, #4]
 800b4da:	440b      	add	r3, r1
 800b4dc:	781b      	ldrb	r3, [r3, #0]
 800b4de:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 800b4e0:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800b4e2:	6879      	ldr	r1, [r7, #4]
 800b4e4:	697a      	ldr	r2, [r7, #20]
 800b4e6:	440a      	add	r2, r1
 800b4e8:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 800b4ea:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 800b4ec:	69bb      	ldr	r3, [r7, #24]
 800b4ee:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800b4f0:	69bb      	ldr	r3, [r7, #24]
 800b4f2:	3304      	adds	r3, #4
 800b4f4:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 800b4f6:	697b      	ldr	r3, [r7, #20]
 800b4f8:	3304      	adds	r3, #4
 800b4fa:	617b      	str	r3, [r7, #20]
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	68db      	ldr	r3, [r3, #12]
 800b500:	0c1b      	lsrs	r3, r3, #16
 800b502:	4a06      	ldr	r2, [pc, #24]	; (800b51c <FDCAN_CopyMessageToRAM+0xf8>)
 800b504:	5cd3      	ldrb	r3, [r2, r3]
 800b506:	461a      	mov	r2, r3
 800b508:	697b      	ldr	r3, [r7, #20]
 800b50a:	4293      	cmp	r3, r2
 800b50c:	d3d5      	bcc.n	800b4ba <FDCAN_CopyMessageToRAM+0x96>
  }
}
 800b50e:	bf00      	nop
 800b510:	bf00      	nop
 800b512:	3724      	adds	r7, #36	; 0x24
 800b514:	46bd      	mov	sp, r7
 800b516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51a:	4770      	bx	lr
 800b51c:	080145dc 	.word	0x080145dc

0800b520 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b520:	b480      	push	{r7}
 800b522:	b089      	sub	sp, #36	; 0x24
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
 800b528:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b52a:	2300      	movs	r3, #0
 800b52c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800b52e:	4b89      	ldr	r3, [pc, #548]	; (800b754 <HAL_GPIO_Init+0x234>)
 800b530:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b532:	e194      	b.n	800b85e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	681a      	ldr	r2, [r3, #0]
 800b538:	2101      	movs	r1, #1
 800b53a:	69fb      	ldr	r3, [r7, #28]
 800b53c:	fa01 f303 	lsl.w	r3, r1, r3
 800b540:	4013      	ands	r3, r2
 800b542:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800b544:	693b      	ldr	r3, [r7, #16]
 800b546:	2b00      	cmp	r3, #0
 800b548:	f000 8186 	beq.w	800b858 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	685b      	ldr	r3, [r3, #4]
 800b550:	f003 0303 	and.w	r3, r3, #3
 800b554:	2b01      	cmp	r3, #1
 800b556:	d005      	beq.n	800b564 <HAL_GPIO_Init+0x44>
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	685b      	ldr	r3, [r3, #4]
 800b55c:	f003 0303 	and.w	r3, r3, #3
 800b560:	2b02      	cmp	r3, #2
 800b562:	d130      	bne.n	800b5c6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	689b      	ldr	r3, [r3, #8]
 800b568:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b56a:	69fb      	ldr	r3, [r7, #28]
 800b56c:	005b      	lsls	r3, r3, #1
 800b56e:	2203      	movs	r2, #3
 800b570:	fa02 f303 	lsl.w	r3, r2, r3
 800b574:	43db      	mvns	r3, r3
 800b576:	69ba      	ldr	r2, [r7, #24]
 800b578:	4013      	ands	r3, r2
 800b57a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	68da      	ldr	r2, [r3, #12]
 800b580:	69fb      	ldr	r3, [r7, #28]
 800b582:	005b      	lsls	r3, r3, #1
 800b584:	fa02 f303 	lsl.w	r3, r2, r3
 800b588:	69ba      	ldr	r2, [r7, #24]
 800b58a:	4313      	orrs	r3, r2
 800b58c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	69ba      	ldr	r2, [r7, #24]
 800b592:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	685b      	ldr	r3, [r3, #4]
 800b598:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b59a:	2201      	movs	r2, #1
 800b59c:	69fb      	ldr	r3, [r7, #28]
 800b59e:	fa02 f303 	lsl.w	r3, r2, r3
 800b5a2:	43db      	mvns	r3, r3
 800b5a4:	69ba      	ldr	r2, [r7, #24]
 800b5a6:	4013      	ands	r3, r2
 800b5a8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	685b      	ldr	r3, [r3, #4]
 800b5ae:	091b      	lsrs	r3, r3, #4
 800b5b0:	f003 0201 	and.w	r2, r3, #1
 800b5b4:	69fb      	ldr	r3, [r7, #28]
 800b5b6:	fa02 f303 	lsl.w	r3, r2, r3
 800b5ba:	69ba      	ldr	r2, [r7, #24]
 800b5bc:	4313      	orrs	r3, r2
 800b5be:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	69ba      	ldr	r2, [r7, #24]
 800b5c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	685b      	ldr	r3, [r3, #4]
 800b5ca:	f003 0303 	and.w	r3, r3, #3
 800b5ce:	2b03      	cmp	r3, #3
 800b5d0:	d017      	beq.n	800b602 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	68db      	ldr	r3, [r3, #12]
 800b5d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b5d8:	69fb      	ldr	r3, [r7, #28]
 800b5da:	005b      	lsls	r3, r3, #1
 800b5dc:	2203      	movs	r2, #3
 800b5de:	fa02 f303 	lsl.w	r3, r2, r3
 800b5e2:	43db      	mvns	r3, r3
 800b5e4:	69ba      	ldr	r2, [r7, #24]
 800b5e6:	4013      	ands	r3, r2
 800b5e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	689a      	ldr	r2, [r3, #8]
 800b5ee:	69fb      	ldr	r3, [r7, #28]
 800b5f0:	005b      	lsls	r3, r3, #1
 800b5f2:	fa02 f303 	lsl.w	r3, r2, r3
 800b5f6:	69ba      	ldr	r2, [r7, #24]
 800b5f8:	4313      	orrs	r3, r2
 800b5fa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	69ba      	ldr	r2, [r7, #24]
 800b600:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	685b      	ldr	r3, [r3, #4]
 800b606:	f003 0303 	and.w	r3, r3, #3
 800b60a:	2b02      	cmp	r3, #2
 800b60c:	d123      	bne.n	800b656 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b60e:	69fb      	ldr	r3, [r7, #28]
 800b610:	08da      	lsrs	r2, r3, #3
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	3208      	adds	r2, #8
 800b616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b61a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b61c:	69fb      	ldr	r3, [r7, #28]
 800b61e:	f003 0307 	and.w	r3, r3, #7
 800b622:	009b      	lsls	r3, r3, #2
 800b624:	220f      	movs	r2, #15
 800b626:	fa02 f303 	lsl.w	r3, r2, r3
 800b62a:	43db      	mvns	r3, r3
 800b62c:	69ba      	ldr	r2, [r7, #24]
 800b62e:	4013      	ands	r3, r2
 800b630:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	691a      	ldr	r2, [r3, #16]
 800b636:	69fb      	ldr	r3, [r7, #28]
 800b638:	f003 0307 	and.w	r3, r3, #7
 800b63c:	009b      	lsls	r3, r3, #2
 800b63e:	fa02 f303 	lsl.w	r3, r2, r3
 800b642:	69ba      	ldr	r2, [r7, #24]
 800b644:	4313      	orrs	r3, r2
 800b646:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b648:	69fb      	ldr	r3, [r7, #28]
 800b64a:	08da      	lsrs	r2, r3, #3
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	3208      	adds	r2, #8
 800b650:	69b9      	ldr	r1, [r7, #24]
 800b652:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b65c:	69fb      	ldr	r3, [r7, #28]
 800b65e:	005b      	lsls	r3, r3, #1
 800b660:	2203      	movs	r2, #3
 800b662:	fa02 f303 	lsl.w	r3, r2, r3
 800b666:	43db      	mvns	r3, r3
 800b668:	69ba      	ldr	r2, [r7, #24]
 800b66a:	4013      	ands	r3, r2
 800b66c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	685b      	ldr	r3, [r3, #4]
 800b672:	f003 0203 	and.w	r2, r3, #3
 800b676:	69fb      	ldr	r3, [r7, #28]
 800b678:	005b      	lsls	r3, r3, #1
 800b67a:	fa02 f303 	lsl.w	r3, r2, r3
 800b67e:	69ba      	ldr	r2, [r7, #24]
 800b680:	4313      	orrs	r3, r2
 800b682:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	69ba      	ldr	r2, [r7, #24]
 800b688:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	685b      	ldr	r3, [r3, #4]
 800b68e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b692:	2b00      	cmp	r3, #0
 800b694:	f000 80e0 	beq.w	800b858 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b698:	4b2f      	ldr	r3, [pc, #188]	; (800b758 <HAL_GPIO_Init+0x238>)
 800b69a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b69e:	4a2e      	ldr	r2, [pc, #184]	; (800b758 <HAL_GPIO_Init+0x238>)
 800b6a0:	f043 0302 	orr.w	r3, r3, #2
 800b6a4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800b6a8:	4b2b      	ldr	r3, [pc, #172]	; (800b758 <HAL_GPIO_Init+0x238>)
 800b6aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b6ae:	f003 0302 	and.w	r3, r3, #2
 800b6b2:	60fb      	str	r3, [r7, #12]
 800b6b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b6b6:	4a29      	ldr	r2, [pc, #164]	; (800b75c <HAL_GPIO_Init+0x23c>)
 800b6b8:	69fb      	ldr	r3, [r7, #28]
 800b6ba:	089b      	lsrs	r3, r3, #2
 800b6bc:	3302      	adds	r3, #2
 800b6be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b6c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b6c4:	69fb      	ldr	r3, [r7, #28]
 800b6c6:	f003 0303 	and.w	r3, r3, #3
 800b6ca:	009b      	lsls	r3, r3, #2
 800b6cc:	220f      	movs	r2, #15
 800b6ce:	fa02 f303 	lsl.w	r3, r2, r3
 800b6d2:	43db      	mvns	r3, r3
 800b6d4:	69ba      	ldr	r2, [r7, #24]
 800b6d6:	4013      	ands	r3, r2
 800b6d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	4a20      	ldr	r2, [pc, #128]	; (800b760 <HAL_GPIO_Init+0x240>)
 800b6de:	4293      	cmp	r3, r2
 800b6e0:	d052      	beq.n	800b788 <HAL_GPIO_Init+0x268>
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	4a1f      	ldr	r2, [pc, #124]	; (800b764 <HAL_GPIO_Init+0x244>)
 800b6e6:	4293      	cmp	r3, r2
 800b6e8:	d031      	beq.n	800b74e <HAL_GPIO_Init+0x22e>
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	4a1e      	ldr	r2, [pc, #120]	; (800b768 <HAL_GPIO_Init+0x248>)
 800b6ee:	4293      	cmp	r3, r2
 800b6f0:	d02b      	beq.n	800b74a <HAL_GPIO_Init+0x22a>
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	4a1d      	ldr	r2, [pc, #116]	; (800b76c <HAL_GPIO_Init+0x24c>)
 800b6f6:	4293      	cmp	r3, r2
 800b6f8:	d025      	beq.n	800b746 <HAL_GPIO_Init+0x226>
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	4a1c      	ldr	r2, [pc, #112]	; (800b770 <HAL_GPIO_Init+0x250>)
 800b6fe:	4293      	cmp	r3, r2
 800b700:	d01f      	beq.n	800b742 <HAL_GPIO_Init+0x222>
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	4a1b      	ldr	r2, [pc, #108]	; (800b774 <HAL_GPIO_Init+0x254>)
 800b706:	4293      	cmp	r3, r2
 800b708:	d019      	beq.n	800b73e <HAL_GPIO_Init+0x21e>
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	4a1a      	ldr	r2, [pc, #104]	; (800b778 <HAL_GPIO_Init+0x258>)
 800b70e:	4293      	cmp	r3, r2
 800b710:	d013      	beq.n	800b73a <HAL_GPIO_Init+0x21a>
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	4a19      	ldr	r2, [pc, #100]	; (800b77c <HAL_GPIO_Init+0x25c>)
 800b716:	4293      	cmp	r3, r2
 800b718:	d00d      	beq.n	800b736 <HAL_GPIO_Init+0x216>
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	4a18      	ldr	r2, [pc, #96]	; (800b780 <HAL_GPIO_Init+0x260>)
 800b71e:	4293      	cmp	r3, r2
 800b720:	d007      	beq.n	800b732 <HAL_GPIO_Init+0x212>
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	4a17      	ldr	r2, [pc, #92]	; (800b784 <HAL_GPIO_Init+0x264>)
 800b726:	4293      	cmp	r3, r2
 800b728:	d101      	bne.n	800b72e <HAL_GPIO_Init+0x20e>
 800b72a:	2309      	movs	r3, #9
 800b72c:	e02d      	b.n	800b78a <HAL_GPIO_Init+0x26a>
 800b72e:	230a      	movs	r3, #10
 800b730:	e02b      	b.n	800b78a <HAL_GPIO_Init+0x26a>
 800b732:	2308      	movs	r3, #8
 800b734:	e029      	b.n	800b78a <HAL_GPIO_Init+0x26a>
 800b736:	2307      	movs	r3, #7
 800b738:	e027      	b.n	800b78a <HAL_GPIO_Init+0x26a>
 800b73a:	2306      	movs	r3, #6
 800b73c:	e025      	b.n	800b78a <HAL_GPIO_Init+0x26a>
 800b73e:	2305      	movs	r3, #5
 800b740:	e023      	b.n	800b78a <HAL_GPIO_Init+0x26a>
 800b742:	2304      	movs	r3, #4
 800b744:	e021      	b.n	800b78a <HAL_GPIO_Init+0x26a>
 800b746:	2303      	movs	r3, #3
 800b748:	e01f      	b.n	800b78a <HAL_GPIO_Init+0x26a>
 800b74a:	2302      	movs	r3, #2
 800b74c:	e01d      	b.n	800b78a <HAL_GPIO_Init+0x26a>
 800b74e:	2301      	movs	r3, #1
 800b750:	e01b      	b.n	800b78a <HAL_GPIO_Init+0x26a>
 800b752:	bf00      	nop
 800b754:	58000080 	.word	0x58000080
 800b758:	58024400 	.word	0x58024400
 800b75c:	58000400 	.word	0x58000400
 800b760:	58020000 	.word	0x58020000
 800b764:	58020400 	.word	0x58020400
 800b768:	58020800 	.word	0x58020800
 800b76c:	58020c00 	.word	0x58020c00
 800b770:	58021000 	.word	0x58021000
 800b774:	58021400 	.word	0x58021400
 800b778:	58021800 	.word	0x58021800
 800b77c:	58021c00 	.word	0x58021c00
 800b780:	58022000 	.word	0x58022000
 800b784:	58022400 	.word	0x58022400
 800b788:	2300      	movs	r3, #0
 800b78a:	69fa      	ldr	r2, [r7, #28]
 800b78c:	f002 0203 	and.w	r2, r2, #3
 800b790:	0092      	lsls	r2, r2, #2
 800b792:	4093      	lsls	r3, r2
 800b794:	69ba      	ldr	r2, [r7, #24]
 800b796:	4313      	orrs	r3, r2
 800b798:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b79a:	4938      	ldr	r1, [pc, #224]	; (800b87c <HAL_GPIO_Init+0x35c>)
 800b79c:	69fb      	ldr	r3, [r7, #28]
 800b79e:	089b      	lsrs	r3, r3, #2
 800b7a0:	3302      	adds	r3, #2
 800b7a2:	69ba      	ldr	r2, [r7, #24]
 800b7a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b7a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b7b0:	693b      	ldr	r3, [r7, #16]
 800b7b2:	43db      	mvns	r3, r3
 800b7b4:	69ba      	ldr	r2, [r7, #24]
 800b7b6:	4013      	ands	r3, r2
 800b7b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	685b      	ldr	r3, [r3, #4]
 800b7be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d003      	beq.n	800b7ce <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800b7c6:	69ba      	ldr	r2, [r7, #24]
 800b7c8:	693b      	ldr	r3, [r7, #16]
 800b7ca:	4313      	orrs	r3, r2
 800b7cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800b7ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b7d2:	69bb      	ldr	r3, [r7, #24]
 800b7d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800b7d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b7da:	685b      	ldr	r3, [r3, #4]
 800b7dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b7de:	693b      	ldr	r3, [r7, #16]
 800b7e0:	43db      	mvns	r3, r3
 800b7e2:	69ba      	ldr	r2, [r7, #24]
 800b7e4:	4013      	ands	r3, r2
 800b7e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	685b      	ldr	r3, [r3, #4]
 800b7ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d003      	beq.n	800b7fc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800b7f4:	69ba      	ldr	r2, [r7, #24]
 800b7f6:	693b      	ldr	r3, [r7, #16]
 800b7f8:	4313      	orrs	r3, r2
 800b7fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800b7fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b800:	69bb      	ldr	r3, [r7, #24]
 800b802:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800b804:	697b      	ldr	r3, [r7, #20]
 800b806:	685b      	ldr	r3, [r3, #4]
 800b808:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b80a:	693b      	ldr	r3, [r7, #16]
 800b80c:	43db      	mvns	r3, r3
 800b80e:	69ba      	ldr	r2, [r7, #24]
 800b810:	4013      	ands	r3, r2
 800b812:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	685b      	ldr	r3, [r3, #4]
 800b818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d003      	beq.n	800b828 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800b820:	69ba      	ldr	r2, [r7, #24]
 800b822:	693b      	ldr	r3, [r7, #16]
 800b824:	4313      	orrs	r3, r2
 800b826:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800b828:	697b      	ldr	r3, [r7, #20]
 800b82a:	69ba      	ldr	r2, [r7, #24]
 800b82c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800b82e:	697b      	ldr	r3, [r7, #20]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b834:	693b      	ldr	r3, [r7, #16]
 800b836:	43db      	mvns	r3, r3
 800b838:	69ba      	ldr	r2, [r7, #24]
 800b83a:	4013      	ands	r3, r2
 800b83c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	685b      	ldr	r3, [r3, #4]
 800b842:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b846:	2b00      	cmp	r3, #0
 800b848:	d003      	beq.n	800b852 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800b84a:	69ba      	ldr	r2, [r7, #24]
 800b84c:	693b      	ldr	r3, [r7, #16]
 800b84e:	4313      	orrs	r3, r2
 800b850:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800b852:	697b      	ldr	r3, [r7, #20]
 800b854:	69ba      	ldr	r2, [r7, #24]
 800b856:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800b858:	69fb      	ldr	r3, [r7, #28]
 800b85a:	3301      	adds	r3, #1
 800b85c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	681a      	ldr	r2, [r3, #0]
 800b862:	69fb      	ldr	r3, [r7, #28]
 800b864:	fa22 f303 	lsr.w	r3, r2, r3
 800b868:	2b00      	cmp	r3, #0
 800b86a:	f47f ae63 	bne.w	800b534 <HAL_GPIO_Init+0x14>
  }
}
 800b86e:	bf00      	nop
 800b870:	bf00      	nop
 800b872:	3724      	adds	r7, #36	; 0x24
 800b874:	46bd      	mov	sp, r7
 800b876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87a:	4770      	bx	lr
 800b87c:	58000400 	.word	0x58000400

0800b880 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b880:	b480      	push	{r7}
 800b882:	b083      	sub	sp, #12
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
 800b888:	460b      	mov	r3, r1
 800b88a:	807b      	strh	r3, [r7, #2]
 800b88c:	4613      	mov	r3, r2
 800b88e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b890:	787b      	ldrb	r3, [r7, #1]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d003      	beq.n	800b89e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b896:	887a      	ldrh	r2, [r7, #2]
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800b89c:	e003      	b.n	800b8a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800b89e:	887b      	ldrh	r3, [r7, #2]
 800b8a0:	041a      	lsls	r2, r3, #16
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	619a      	str	r2, [r3, #24]
}
 800b8a6:	bf00      	nop
 800b8a8:	370c      	adds	r7, #12
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b0:	4770      	bx	lr
	...

0800b8b4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b084      	sub	sp, #16
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800b8bc:	4b19      	ldr	r3, [pc, #100]	; (800b924 <HAL_PWREx_ConfigSupply+0x70>)
 800b8be:	68db      	ldr	r3, [r3, #12]
 800b8c0:	f003 0304 	and.w	r3, r3, #4
 800b8c4:	2b04      	cmp	r3, #4
 800b8c6:	d00a      	beq.n	800b8de <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800b8c8:	4b16      	ldr	r3, [pc, #88]	; (800b924 <HAL_PWREx_ConfigSupply+0x70>)
 800b8ca:	68db      	ldr	r3, [r3, #12]
 800b8cc:	f003 0307 	and.w	r3, r3, #7
 800b8d0:	687a      	ldr	r2, [r7, #4]
 800b8d2:	429a      	cmp	r2, r3
 800b8d4:	d001      	beq.n	800b8da <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800b8d6:	2301      	movs	r3, #1
 800b8d8:	e01f      	b.n	800b91a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800b8da:	2300      	movs	r3, #0
 800b8dc:	e01d      	b.n	800b91a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800b8de:	4b11      	ldr	r3, [pc, #68]	; (800b924 <HAL_PWREx_ConfigSupply+0x70>)
 800b8e0:	68db      	ldr	r3, [r3, #12]
 800b8e2:	f023 0207 	bic.w	r2, r3, #7
 800b8e6:	490f      	ldr	r1, [pc, #60]	; (800b924 <HAL_PWREx_ConfigSupply+0x70>)
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	4313      	orrs	r3, r2
 800b8ec:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800b8ee:	f7fb fc91 	bl	8007214 <HAL_GetTick>
 800b8f2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b8f4:	e009      	b.n	800b90a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800b8f6:	f7fb fc8d 	bl	8007214 <HAL_GetTick>
 800b8fa:	4602      	mov	r2, r0
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	1ad3      	subs	r3, r2, r3
 800b900:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b904:	d901      	bls.n	800b90a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800b906:	2301      	movs	r3, #1
 800b908:	e007      	b.n	800b91a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b90a:	4b06      	ldr	r3, [pc, #24]	; (800b924 <HAL_PWREx_ConfigSupply+0x70>)
 800b90c:	685b      	ldr	r3, [r3, #4]
 800b90e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b912:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b916:	d1ee      	bne.n	800b8f6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800b918:	2300      	movs	r3, #0
}
 800b91a:	4618      	mov	r0, r3
 800b91c:	3710      	adds	r7, #16
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}
 800b922:	bf00      	nop
 800b924:	58024800 	.word	0x58024800

0800b928 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b08c      	sub	sp, #48	; 0x30
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d102      	bne.n	800b93c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800b936:	2301      	movs	r3, #1
 800b938:	f000 bc1d 	b.w	800c176 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	f003 0301 	and.w	r3, r3, #1
 800b944:	2b00      	cmp	r3, #0
 800b946:	f000 8087 	beq.w	800ba58 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b94a:	4b99      	ldr	r3, [pc, #612]	; (800bbb0 <HAL_RCC_OscConfig+0x288>)
 800b94c:	691b      	ldr	r3, [r3, #16]
 800b94e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b952:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b954:	4b96      	ldr	r3, [pc, #600]	; (800bbb0 <HAL_RCC_OscConfig+0x288>)
 800b956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b958:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800b95a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b95c:	2b10      	cmp	r3, #16
 800b95e:	d007      	beq.n	800b970 <HAL_RCC_OscConfig+0x48>
 800b960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b962:	2b18      	cmp	r3, #24
 800b964:	d110      	bne.n	800b988 <HAL_RCC_OscConfig+0x60>
 800b966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b968:	f003 0303 	and.w	r3, r3, #3
 800b96c:	2b02      	cmp	r3, #2
 800b96e:	d10b      	bne.n	800b988 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b970:	4b8f      	ldr	r3, [pc, #572]	; (800bbb0 <HAL_RCC_OscConfig+0x288>)
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d06c      	beq.n	800ba56 <HAL_RCC_OscConfig+0x12e>
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	685b      	ldr	r3, [r3, #4]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d168      	bne.n	800ba56 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800b984:	2301      	movs	r3, #1
 800b986:	e3f6      	b.n	800c176 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	685b      	ldr	r3, [r3, #4]
 800b98c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b990:	d106      	bne.n	800b9a0 <HAL_RCC_OscConfig+0x78>
 800b992:	4b87      	ldr	r3, [pc, #540]	; (800bbb0 <HAL_RCC_OscConfig+0x288>)
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	4a86      	ldr	r2, [pc, #536]	; (800bbb0 <HAL_RCC_OscConfig+0x288>)
 800b998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b99c:	6013      	str	r3, [r2, #0]
 800b99e:	e02e      	b.n	800b9fe <HAL_RCC_OscConfig+0xd6>
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	685b      	ldr	r3, [r3, #4]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d10c      	bne.n	800b9c2 <HAL_RCC_OscConfig+0x9a>
 800b9a8:	4b81      	ldr	r3, [pc, #516]	; (800bbb0 <HAL_RCC_OscConfig+0x288>)
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	4a80      	ldr	r2, [pc, #512]	; (800bbb0 <HAL_RCC_OscConfig+0x288>)
 800b9ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b9b2:	6013      	str	r3, [r2, #0]
 800b9b4:	4b7e      	ldr	r3, [pc, #504]	; (800bbb0 <HAL_RCC_OscConfig+0x288>)
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	4a7d      	ldr	r2, [pc, #500]	; (800bbb0 <HAL_RCC_OscConfig+0x288>)
 800b9ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b9be:	6013      	str	r3, [r2, #0]
 800b9c0:	e01d      	b.n	800b9fe <HAL_RCC_OscConfig+0xd6>
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	685b      	ldr	r3, [r3, #4]
 800b9c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b9ca:	d10c      	bne.n	800b9e6 <HAL_RCC_OscConfig+0xbe>
 800b9cc:	4b78      	ldr	r3, [pc, #480]	; (800bbb0 <HAL_RCC_OscConfig+0x288>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	4a77      	ldr	r2, [pc, #476]	; (800bbb0 <HAL_RCC_OscConfig+0x288>)
 800b9d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b9d6:	6013      	str	r3, [r2, #0]
 800b9d8:	4b75      	ldr	r3, [pc, #468]	; (800bbb0 <HAL_RCC_OscConfig+0x288>)
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	4a74      	ldr	r2, [pc, #464]	; (800bbb0 <HAL_RCC_OscConfig+0x288>)
 800b9de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b9e2:	6013      	str	r3, [r2, #0]
 800b9e4:	e00b      	b.n	800b9fe <HAL_RCC_OscConfig+0xd6>
 800b9e6:	4b72      	ldr	r3, [pc, #456]	; (800bbb0 <HAL_RCC_OscConfig+0x288>)
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	4a71      	ldr	r2, [pc, #452]	; (800bbb0 <HAL_RCC_OscConfig+0x288>)
 800b9ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b9f0:	6013      	str	r3, [r2, #0]
 800b9f2:	4b6f      	ldr	r3, [pc, #444]	; (800bbb0 <HAL_RCC_OscConfig+0x288>)
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	4a6e      	ldr	r2, [pc, #440]	; (800bbb0 <HAL_RCC_OscConfig+0x288>)
 800b9f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b9fc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	685b      	ldr	r3, [r3, #4]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d013      	beq.n	800ba2e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba06:	f7fb fc05 	bl	8007214 <HAL_GetTick>
 800ba0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ba0c:	e008      	b.n	800ba20 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ba0e:	f7fb fc01 	bl	8007214 <HAL_GetTick>
 800ba12:	4602      	mov	r2, r0
 800ba14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba16:	1ad3      	subs	r3, r2, r3
 800ba18:	2b64      	cmp	r3, #100	; 0x64
 800ba1a:	d901      	bls.n	800ba20 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800ba1c:	2303      	movs	r3, #3
 800ba1e:	e3aa      	b.n	800c176 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ba20:	4b63      	ldr	r3, [pc, #396]	; (800bbb0 <HAL_RCC_OscConfig+0x288>)
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d0f0      	beq.n	800ba0e <HAL_RCC_OscConfig+0xe6>
 800ba2c:	e014      	b.n	800ba58 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba2e:	f7fb fbf1 	bl	8007214 <HAL_GetTick>
 800ba32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ba34:	e008      	b.n	800ba48 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ba36:	f7fb fbed 	bl	8007214 <HAL_GetTick>
 800ba3a:	4602      	mov	r2, r0
 800ba3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba3e:	1ad3      	subs	r3, r2, r3
 800ba40:	2b64      	cmp	r3, #100	; 0x64
 800ba42:	d901      	bls.n	800ba48 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800ba44:	2303      	movs	r3, #3
 800ba46:	e396      	b.n	800c176 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ba48:	4b59      	ldr	r3, [pc, #356]	; (800bbb0 <HAL_RCC_OscConfig+0x288>)
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d1f0      	bne.n	800ba36 <HAL_RCC_OscConfig+0x10e>
 800ba54:	e000      	b.n	800ba58 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ba56:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	f003 0302 	and.w	r3, r3, #2
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	f000 80cb 	beq.w	800bbfc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ba66:	4b52      	ldr	r3, [pc, #328]	; (800bbb0 <HAL_RCC_OscConfig+0x288>)
 800ba68:	691b      	ldr	r3, [r3, #16]
 800ba6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ba6e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ba70:	4b4f      	ldr	r3, [pc, #316]	; (800bbb0 <HAL_RCC_OscConfig+0x288>)
 800ba72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba74:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800ba76:	6a3b      	ldr	r3, [r7, #32]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d007      	beq.n	800ba8c <HAL_RCC_OscConfig+0x164>
 800ba7c:	6a3b      	ldr	r3, [r7, #32]
 800ba7e:	2b18      	cmp	r3, #24
 800ba80:	d156      	bne.n	800bb30 <HAL_RCC_OscConfig+0x208>
 800ba82:	69fb      	ldr	r3, [r7, #28]
 800ba84:	f003 0303 	and.w	r3, r3, #3
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d151      	bne.n	800bb30 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ba8c:	4b48      	ldr	r3, [pc, #288]	; (800bbb0 <HAL_RCC_OscConfig+0x288>)
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	f003 0304 	and.w	r3, r3, #4
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d005      	beq.n	800baa4 <HAL_RCC_OscConfig+0x17c>
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	68db      	ldr	r3, [r3, #12]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d101      	bne.n	800baa4 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800baa0:	2301      	movs	r3, #1
 800baa2:	e368      	b.n	800c176 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800baa4:	4b42      	ldr	r3, [pc, #264]	; (800bbb0 <HAL_RCC_OscConfig+0x288>)
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	f023 0219 	bic.w	r2, r3, #25
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	68db      	ldr	r3, [r3, #12]
 800bab0:	493f      	ldr	r1, [pc, #252]	; (800bbb0 <HAL_RCC_OscConfig+0x288>)
 800bab2:	4313      	orrs	r3, r2
 800bab4:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800bab6:	f7fb fbad 	bl	8007214 <HAL_GetTick>
 800baba:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800babc:	e008      	b.n	800bad0 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800babe:	f7fb fba9 	bl	8007214 <HAL_GetTick>
 800bac2:	4602      	mov	r2, r0
 800bac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bac6:	1ad3      	subs	r3, r2, r3
 800bac8:	2b02      	cmp	r3, #2
 800baca:	d901      	bls.n	800bad0 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800bacc:	2303      	movs	r3, #3
 800bace:	e352      	b.n	800c176 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bad0:	4b37      	ldr	r3, [pc, #220]	; (800bbb0 <HAL_RCC_OscConfig+0x288>)
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	f003 0304 	and.w	r3, r3, #4
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d0f0      	beq.n	800babe <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800badc:	f7fb fbca 	bl	8007274 <HAL_GetREVID>
 800bae0:	4603      	mov	r3, r0
 800bae2:	f241 0203 	movw	r2, #4099	; 0x1003
 800bae6:	4293      	cmp	r3, r2
 800bae8:	d817      	bhi.n	800bb1a <HAL_RCC_OscConfig+0x1f2>
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	691b      	ldr	r3, [r3, #16]
 800baee:	2b40      	cmp	r3, #64	; 0x40
 800baf0:	d108      	bne.n	800bb04 <HAL_RCC_OscConfig+0x1dc>
 800baf2:	4b2f      	ldr	r3, [pc, #188]	; (800bbb0 <HAL_RCC_OscConfig+0x288>)
 800baf4:	685b      	ldr	r3, [r3, #4]
 800baf6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800bafa:	4a2d      	ldr	r2, [pc, #180]	; (800bbb0 <HAL_RCC_OscConfig+0x288>)
 800bafc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bb00:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bb02:	e07b      	b.n	800bbfc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bb04:	4b2a      	ldr	r3, [pc, #168]	; (800bbb0 <HAL_RCC_OscConfig+0x288>)
 800bb06:	685b      	ldr	r3, [r3, #4]
 800bb08:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	691b      	ldr	r3, [r3, #16]
 800bb10:	031b      	lsls	r3, r3, #12
 800bb12:	4927      	ldr	r1, [pc, #156]	; (800bbb0 <HAL_RCC_OscConfig+0x288>)
 800bb14:	4313      	orrs	r3, r2
 800bb16:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bb18:	e070      	b.n	800bbfc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bb1a:	4b25      	ldr	r3, [pc, #148]	; (800bbb0 <HAL_RCC_OscConfig+0x288>)
 800bb1c:	685b      	ldr	r3, [r3, #4]
 800bb1e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	691b      	ldr	r3, [r3, #16]
 800bb26:	061b      	lsls	r3, r3, #24
 800bb28:	4921      	ldr	r1, [pc, #132]	; (800bbb0 <HAL_RCC_OscConfig+0x288>)
 800bb2a:	4313      	orrs	r3, r2
 800bb2c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bb2e:	e065      	b.n	800bbfc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	68db      	ldr	r3, [r3, #12]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d048      	beq.n	800bbca <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800bb38:	4b1d      	ldr	r3, [pc, #116]	; (800bbb0 <HAL_RCC_OscConfig+0x288>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f023 0219 	bic.w	r2, r3, #25
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	68db      	ldr	r3, [r3, #12]
 800bb44:	491a      	ldr	r1, [pc, #104]	; (800bbb0 <HAL_RCC_OscConfig+0x288>)
 800bb46:	4313      	orrs	r3, r2
 800bb48:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb4a:	f7fb fb63 	bl	8007214 <HAL_GetTick>
 800bb4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bb50:	e008      	b.n	800bb64 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bb52:	f7fb fb5f 	bl	8007214 <HAL_GetTick>
 800bb56:	4602      	mov	r2, r0
 800bb58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb5a:	1ad3      	subs	r3, r2, r3
 800bb5c:	2b02      	cmp	r3, #2
 800bb5e:	d901      	bls.n	800bb64 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800bb60:	2303      	movs	r3, #3
 800bb62:	e308      	b.n	800c176 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bb64:	4b12      	ldr	r3, [pc, #72]	; (800bbb0 <HAL_RCC_OscConfig+0x288>)
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	f003 0304 	and.w	r3, r3, #4
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d0f0      	beq.n	800bb52 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bb70:	f7fb fb80 	bl	8007274 <HAL_GetREVID>
 800bb74:	4603      	mov	r3, r0
 800bb76:	f241 0203 	movw	r2, #4099	; 0x1003
 800bb7a:	4293      	cmp	r3, r2
 800bb7c:	d81a      	bhi.n	800bbb4 <HAL_RCC_OscConfig+0x28c>
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	691b      	ldr	r3, [r3, #16]
 800bb82:	2b40      	cmp	r3, #64	; 0x40
 800bb84:	d108      	bne.n	800bb98 <HAL_RCC_OscConfig+0x270>
 800bb86:	4b0a      	ldr	r3, [pc, #40]	; (800bbb0 <HAL_RCC_OscConfig+0x288>)
 800bb88:	685b      	ldr	r3, [r3, #4]
 800bb8a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800bb8e:	4a08      	ldr	r2, [pc, #32]	; (800bbb0 <HAL_RCC_OscConfig+0x288>)
 800bb90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bb94:	6053      	str	r3, [r2, #4]
 800bb96:	e031      	b.n	800bbfc <HAL_RCC_OscConfig+0x2d4>
 800bb98:	4b05      	ldr	r3, [pc, #20]	; (800bbb0 <HAL_RCC_OscConfig+0x288>)
 800bb9a:	685b      	ldr	r3, [r3, #4]
 800bb9c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	691b      	ldr	r3, [r3, #16]
 800bba4:	031b      	lsls	r3, r3, #12
 800bba6:	4902      	ldr	r1, [pc, #8]	; (800bbb0 <HAL_RCC_OscConfig+0x288>)
 800bba8:	4313      	orrs	r3, r2
 800bbaa:	604b      	str	r3, [r1, #4]
 800bbac:	e026      	b.n	800bbfc <HAL_RCC_OscConfig+0x2d4>
 800bbae:	bf00      	nop
 800bbb0:	58024400 	.word	0x58024400
 800bbb4:	4b9a      	ldr	r3, [pc, #616]	; (800be20 <HAL_RCC_OscConfig+0x4f8>)
 800bbb6:	685b      	ldr	r3, [r3, #4]
 800bbb8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	691b      	ldr	r3, [r3, #16]
 800bbc0:	061b      	lsls	r3, r3, #24
 800bbc2:	4997      	ldr	r1, [pc, #604]	; (800be20 <HAL_RCC_OscConfig+0x4f8>)
 800bbc4:	4313      	orrs	r3, r2
 800bbc6:	604b      	str	r3, [r1, #4]
 800bbc8:	e018      	b.n	800bbfc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bbca:	4b95      	ldr	r3, [pc, #596]	; (800be20 <HAL_RCC_OscConfig+0x4f8>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	4a94      	ldr	r2, [pc, #592]	; (800be20 <HAL_RCC_OscConfig+0x4f8>)
 800bbd0:	f023 0301 	bic.w	r3, r3, #1
 800bbd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bbd6:	f7fb fb1d 	bl	8007214 <HAL_GetTick>
 800bbda:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800bbdc:	e008      	b.n	800bbf0 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bbde:	f7fb fb19 	bl	8007214 <HAL_GetTick>
 800bbe2:	4602      	mov	r2, r0
 800bbe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbe6:	1ad3      	subs	r3, r2, r3
 800bbe8:	2b02      	cmp	r3, #2
 800bbea:	d901      	bls.n	800bbf0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800bbec:	2303      	movs	r3, #3
 800bbee:	e2c2      	b.n	800c176 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800bbf0:	4b8b      	ldr	r3, [pc, #556]	; (800be20 <HAL_RCC_OscConfig+0x4f8>)
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	f003 0304 	and.w	r3, r3, #4
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d1f0      	bne.n	800bbde <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	f003 0310 	and.w	r3, r3, #16
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	f000 80a9 	beq.w	800bd5c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bc0a:	4b85      	ldr	r3, [pc, #532]	; (800be20 <HAL_RCC_OscConfig+0x4f8>)
 800bc0c:	691b      	ldr	r3, [r3, #16]
 800bc0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bc12:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800bc14:	4b82      	ldr	r3, [pc, #520]	; (800be20 <HAL_RCC_OscConfig+0x4f8>)
 800bc16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc18:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800bc1a:	69bb      	ldr	r3, [r7, #24]
 800bc1c:	2b08      	cmp	r3, #8
 800bc1e:	d007      	beq.n	800bc30 <HAL_RCC_OscConfig+0x308>
 800bc20:	69bb      	ldr	r3, [r7, #24]
 800bc22:	2b18      	cmp	r3, #24
 800bc24:	d13a      	bne.n	800bc9c <HAL_RCC_OscConfig+0x374>
 800bc26:	697b      	ldr	r3, [r7, #20]
 800bc28:	f003 0303 	and.w	r3, r3, #3
 800bc2c:	2b01      	cmp	r3, #1
 800bc2e:	d135      	bne.n	800bc9c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bc30:	4b7b      	ldr	r3, [pc, #492]	; (800be20 <HAL_RCC_OscConfig+0x4f8>)
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d005      	beq.n	800bc48 <HAL_RCC_OscConfig+0x320>
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	69db      	ldr	r3, [r3, #28]
 800bc40:	2b80      	cmp	r3, #128	; 0x80
 800bc42:	d001      	beq.n	800bc48 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800bc44:	2301      	movs	r3, #1
 800bc46:	e296      	b.n	800c176 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bc48:	f7fb fb14 	bl	8007274 <HAL_GetREVID>
 800bc4c:	4603      	mov	r3, r0
 800bc4e:	f241 0203 	movw	r2, #4099	; 0x1003
 800bc52:	4293      	cmp	r3, r2
 800bc54:	d817      	bhi.n	800bc86 <HAL_RCC_OscConfig+0x35e>
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	6a1b      	ldr	r3, [r3, #32]
 800bc5a:	2b20      	cmp	r3, #32
 800bc5c:	d108      	bne.n	800bc70 <HAL_RCC_OscConfig+0x348>
 800bc5e:	4b70      	ldr	r3, [pc, #448]	; (800be20 <HAL_RCC_OscConfig+0x4f8>)
 800bc60:	685b      	ldr	r3, [r3, #4]
 800bc62:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800bc66:	4a6e      	ldr	r2, [pc, #440]	; (800be20 <HAL_RCC_OscConfig+0x4f8>)
 800bc68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bc6c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bc6e:	e075      	b.n	800bd5c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bc70:	4b6b      	ldr	r3, [pc, #428]	; (800be20 <HAL_RCC_OscConfig+0x4f8>)
 800bc72:	685b      	ldr	r3, [r3, #4]
 800bc74:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	6a1b      	ldr	r3, [r3, #32]
 800bc7c:	069b      	lsls	r3, r3, #26
 800bc7e:	4968      	ldr	r1, [pc, #416]	; (800be20 <HAL_RCC_OscConfig+0x4f8>)
 800bc80:	4313      	orrs	r3, r2
 800bc82:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bc84:	e06a      	b.n	800bd5c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bc86:	4b66      	ldr	r3, [pc, #408]	; (800be20 <HAL_RCC_OscConfig+0x4f8>)
 800bc88:	68db      	ldr	r3, [r3, #12]
 800bc8a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	6a1b      	ldr	r3, [r3, #32]
 800bc92:	061b      	lsls	r3, r3, #24
 800bc94:	4962      	ldr	r1, [pc, #392]	; (800be20 <HAL_RCC_OscConfig+0x4f8>)
 800bc96:	4313      	orrs	r3, r2
 800bc98:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bc9a:	e05f      	b.n	800bd5c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	69db      	ldr	r3, [r3, #28]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d042      	beq.n	800bd2a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800bca4:	4b5e      	ldr	r3, [pc, #376]	; (800be20 <HAL_RCC_OscConfig+0x4f8>)
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	4a5d      	ldr	r2, [pc, #372]	; (800be20 <HAL_RCC_OscConfig+0x4f8>)
 800bcaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bcb0:	f7fb fab0 	bl	8007214 <HAL_GetTick>
 800bcb4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800bcb6:	e008      	b.n	800bcca <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800bcb8:	f7fb faac 	bl	8007214 <HAL_GetTick>
 800bcbc:	4602      	mov	r2, r0
 800bcbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcc0:	1ad3      	subs	r3, r2, r3
 800bcc2:	2b02      	cmp	r3, #2
 800bcc4:	d901      	bls.n	800bcca <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800bcc6:	2303      	movs	r3, #3
 800bcc8:	e255      	b.n	800c176 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800bcca:	4b55      	ldr	r3, [pc, #340]	; (800be20 <HAL_RCC_OscConfig+0x4f8>)
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d0f0      	beq.n	800bcb8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bcd6:	f7fb facd 	bl	8007274 <HAL_GetREVID>
 800bcda:	4603      	mov	r3, r0
 800bcdc:	f241 0203 	movw	r2, #4099	; 0x1003
 800bce0:	4293      	cmp	r3, r2
 800bce2:	d817      	bhi.n	800bd14 <HAL_RCC_OscConfig+0x3ec>
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	6a1b      	ldr	r3, [r3, #32]
 800bce8:	2b20      	cmp	r3, #32
 800bcea:	d108      	bne.n	800bcfe <HAL_RCC_OscConfig+0x3d6>
 800bcec:	4b4c      	ldr	r3, [pc, #304]	; (800be20 <HAL_RCC_OscConfig+0x4f8>)
 800bcee:	685b      	ldr	r3, [r3, #4]
 800bcf0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800bcf4:	4a4a      	ldr	r2, [pc, #296]	; (800be20 <HAL_RCC_OscConfig+0x4f8>)
 800bcf6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bcfa:	6053      	str	r3, [r2, #4]
 800bcfc:	e02e      	b.n	800bd5c <HAL_RCC_OscConfig+0x434>
 800bcfe:	4b48      	ldr	r3, [pc, #288]	; (800be20 <HAL_RCC_OscConfig+0x4f8>)
 800bd00:	685b      	ldr	r3, [r3, #4]
 800bd02:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	6a1b      	ldr	r3, [r3, #32]
 800bd0a:	069b      	lsls	r3, r3, #26
 800bd0c:	4944      	ldr	r1, [pc, #272]	; (800be20 <HAL_RCC_OscConfig+0x4f8>)
 800bd0e:	4313      	orrs	r3, r2
 800bd10:	604b      	str	r3, [r1, #4]
 800bd12:	e023      	b.n	800bd5c <HAL_RCC_OscConfig+0x434>
 800bd14:	4b42      	ldr	r3, [pc, #264]	; (800be20 <HAL_RCC_OscConfig+0x4f8>)
 800bd16:	68db      	ldr	r3, [r3, #12]
 800bd18:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	6a1b      	ldr	r3, [r3, #32]
 800bd20:	061b      	lsls	r3, r3, #24
 800bd22:	493f      	ldr	r1, [pc, #252]	; (800be20 <HAL_RCC_OscConfig+0x4f8>)
 800bd24:	4313      	orrs	r3, r2
 800bd26:	60cb      	str	r3, [r1, #12]
 800bd28:	e018      	b.n	800bd5c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800bd2a:	4b3d      	ldr	r3, [pc, #244]	; (800be20 <HAL_RCC_OscConfig+0x4f8>)
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	4a3c      	ldr	r2, [pc, #240]	; (800be20 <HAL_RCC_OscConfig+0x4f8>)
 800bd30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd36:	f7fb fa6d 	bl	8007214 <HAL_GetTick>
 800bd3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800bd3c:	e008      	b.n	800bd50 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800bd3e:	f7fb fa69 	bl	8007214 <HAL_GetTick>
 800bd42:	4602      	mov	r2, r0
 800bd44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd46:	1ad3      	subs	r3, r2, r3
 800bd48:	2b02      	cmp	r3, #2
 800bd4a:	d901      	bls.n	800bd50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800bd4c:	2303      	movs	r3, #3
 800bd4e:	e212      	b.n	800c176 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800bd50:	4b33      	ldr	r3, [pc, #204]	; (800be20 <HAL_RCC_OscConfig+0x4f8>)
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d1f0      	bne.n	800bd3e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	f003 0308 	and.w	r3, r3, #8
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d036      	beq.n	800bdd6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	695b      	ldr	r3, [r3, #20]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d019      	beq.n	800bda4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bd70:	4b2b      	ldr	r3, [pc, #172]	; (800be20 <HAL_RCC_OscConfig+0x4f8>)
 800bd72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd74:	4a2a      	ldr	r2, [pc, #168]	; (800be20 <HAL_RCC_OscConfig+0x4f8>)
 800bd76:	f043 0301 	orr.w	r3, r3, #1
 800bd7a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bd7c:	f7fb fa4a 	bl	8007214 <HAL_GetTick>
 800bd80:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800bd82:	e008      	b.n	800bd96 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bd84:	f7fb fa46 	bl	8007214 <HAL_GetTick>
 800bd88:	4602      	mov	r2, r0
 800bd8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd8c:	1ad3      	subs	r3, r2, r3
 800bd8e:	2b02      	cmp	r3, #2
 800bd90:	d901      	bls.n	800bd96 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800bd92:	2303      	movs	r3, #3
 800bd94:	e1ef      	b.n	800c176 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800bd96:	4b22      	ldr	r3, [pc, #136]	; (800be20 <HAL_RCC_OscConfig+0x4f8>)
 800bd98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd9a:	f003 0302 	and.w	r3, r3, #2
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d0f0      	beq.n	800bd84 <HAL_RCC_OscConfig+0x45c>
 800bda2:	e018      	b.n	800bdd6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bda4:	4b1e      	ldr	r3, [pc, #120]	; (800be20 <HAL_RCC_OscConfig+0x4f8>)
 800bda6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bda8:	4a1d      	ldr	r2, [pc, #116]	; (800be20 <HAL_RCC_OscConfig+0x4f8>)
 800bdaa:	f023 0301 	bic.w	r3, r3, #1
 800bdae:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bdb0:	f7fb fa30 	bl	8007214 <HAL_GetTick>
 800bdb4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800bdb6:	e008      	b.n	800bdca <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bdb8:	f7fb fa2c 	bl	8007214 <HAL_GetTick>
 800bdbc:	4602      	mov	r2, r0
 800bdbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdc0:	1ad3      	subs	r3, r2, r3
 800bdc2:	2b02      	cmp	r3, #2
 800bdc4:	d901      	bls.n	800bdca <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800bdc6:	2303      	movs	r3, #3
 800bdc8:	e1d5      	b.n	800c176 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800bdca:	4b15      	ldr	r3, [pc, #84]	; (800be20 <HAL_RCC_OscConfig+0x4f8>)
 800bdcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bdce:	f003 0302 	and.w	r3, r3, #2
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d1f0      	bne.n	800bdb8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	f003 0320 	and.w	r3, r3, #32
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d039      	beq.n	800be56 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	699b      	ldr	r3, [r3, #24]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d01c      	beq.n	800be24 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800bdea:	4b0d      	ldr	r3, [pc, #52]	; (800be20 <HAL_RCC_OscConfig+0x4f8>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	4a0c      	ldr	r2, [pc, #48]	; (800be20 <HAL_RCC_OscConfig+0x4f8>)
 800bdf0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800bdf4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800bdf6:	f7fb fa0d 	bl	8007214 <HAL_GetTick>
 800bdfa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800bdfc:	e008      	b.n	800be10 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800bdfe:	f7fb fa09 	bl	8007214 <HAL_GetTick>
 800be02:	4602      	mov	r2, r0
 800be04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be06:	1ad3      	subs	r3, r2, r3
 800be08:	2b02      	cmp	r3, #2
 800be0a:	d901      	bls.n	800be10 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800be0c:	2303      	movs	r3, #3
 800be0e:	e1b2      	b.n	800c176 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800be10:	4b03      	ldr	r3, [pc, #12]	; (800be20 <HAL_RCC_OscConfig+0x4f8>)
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d0f0      	beq.n	800bdfe <HAL_RCC_OscConfig+0x4d6>
 800be1c:	e01b      	b.n	800be56 <HAL_RCC_OscConfig+0x52e>
 800be1e:	bf00      	nop
 800be20:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800be24:	4b9b      	ldr	r3, [pc, #620]	; (800c094 <HAL_RCC_OscConfig+0x76c>)
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	4a9a      	ldr	r2, [pc, #616]	; (800c094 <HAL_RCC_OscConfig+0x76c>)
 800be2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800be2e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800be30:	f7fb f9f0 	bl	8007214 <HAL_GetTick>
 800be34:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800be36:	e008      	b.n	800be4a <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800be38:	f7fb f9ec 	bl	8007214 <HAL_GetTick>
 800be3c:	4602      	mov	r2, r0
 800be3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be40:	1ad3      	subs	r3, r2, r3
 800be42:	2b02      	cmp	r3, #2
 800be44:	d901      	bls.n	800be4a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800be46:	2303      	movs	r3, #3
 800be48:	e195      	b.n	800c176 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800be4a:	4b92      	ldr	r3, [pc, #584]	; (800c094 <HAL_RCC_OscConfig+0x76c>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800be52:	2b00      	cmp	r3, #0
 800be54:	d1f0      	bne.n	800be38 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	f003 0304 	and.w	r3, r3, #4
 800be5e:	2b00      	cmp	r3, #0
 800be60:	f000 8081 	beq.w	800bf66 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800be64:	4b8c      	ldr	r3, [pc, #560]	; (800c098 <HAL_RCC_OscConfig+0x770>)
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	4a8b      	ldr	r2, [pc, #556]	; (800c098 <HAL_RCC_OscConfig+0x770>)
 800be6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800be6e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800be70:	f7fb f9d0 	bl	8007214 <HAL_GetTick>
 800be74:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800be76:	e008      	b.n	800be8a <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800be78:	f7fb f9cc 	bl	8007214 <HAL_GetTick>
 800be7c:	4602      	mov	r2, r0
 800be7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be80:	1ad3      	subs	r3, r2, r3
 800be82:	2b64      	cmp	r3, #100	; 0x64
 800be84:	d901      	bls.n	800be8a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800be86:	2303      	movs	r3, #3
 800be88:	e175      	b.n	800c176 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800be8a:	4b83      	ldr	r3, [pc, #524]	; (800c098 <HAL_RCC_OscConfig+0x770>)
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be92:	2b00      	cmp	r3, #0
 800be94:	d0f0      	beq.n	800be78 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	689b      	ldr	r3, [r3, #8]
 800be9a:	2b01      	cmp	r3, #1
 800be9c:	d106      	bne.n	800beac <HAL_RCC_OscConfig+0x584>
 800be9e:	4b7d      	ldr	r3, [pc, #500]	; (800c094 <HAL_RCC_OscConfig+0x76c>)
 800bea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bea2:	4a7c      	ldr	r2, [pc, #496]	; (800c094 <HAL_RCC_OscConfig+0x76c>)
 800bea4:	f043 0301 	orr.w	r3, r3, #1
 800bea8:	6713      	str	r3, [r2, #112]	; 0x70
 800beaa:	e02d      	b.n	800bf08 <HAL_RCC_OscConfig+0x5e0>
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	689b      	ldr	r3, [r3, #8]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d10c      	bne.n	800bece <HAL_RCC_OscConfig+0x5a6>
 800beb4:	4b77      	ldr	r3, [pc, #476]	; (800c094 <HAL_RCC_OscConfig+0x76c>)
 800beb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800beb8:	4a76      	ldr	r2, [pc, #472]	; (800c094 <HAL_RCC_OscConfig+0x76c>)
 800beba:	f023 0301 	bic.w	r3, r3, #1
 800bebe:	6713      	str	r3, [r2, #112]	; 0x70
 800bec0:	4b74      	ldr	r3, [pc, #464]	; (800c094 <HAL_RCC_OscConfig+0x76c>)
 800bec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bec4:	4a73      	ldr	r2, [pc, #460]	; (800c094 <HAL_RCC_OscConfig+0x76c>)
 800bec6:	f023 0304 	bic.w	r3, r3, #4
 800beca:	6713      	str	r3, [r2, #112]	; 0x70
 800becc:	e01c      	b.n	800bf08 <HAL_RCC_OscConfig+0x5e0>
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	689b      	ldr	r3, [r3, #8]
 800bed2:	2b05      	cmp	r3, #5
 800bed4:	d10c      	bne.n	800bef0 <HAL_RCC_OscConfig+0x5c8>
 800bed6:	4b6f      	ldr	r3, [pc, #444]	; (800c094 <HAL_RCC_OscConfig+0x76c>)
 800bed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800beda:	4a6e      	ldr	r2, [pc, #440]	; (800c094 <HAL_RCC_OscConfig+0x76c>)
 800bedc:	f043 0304 	orr.w	r3, r3, #4
 800bee0:	6713      	str	r3, [r2, #112]	; 0x70
 800bee2:	4b6c      	ldr	r3, [pc, #432]	; (800c094 <HAL_RCC_OscConfig+0x76c>)
 800bee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bee6:	4a6b      	ldr	r2, [pc, #428]	; (800c094 <HAL_RCC_OscConfig+0x76c>)
 800bee8:	f043 0301 	orr.w	r3, r3, #1
 800beec:	6713      	str	r3, [r2, #112]	; 0x70
 800beee:	e00b      	b.n	800bf08 <HAL_RCC_OscConfig+0x5e0>
 800bef0:	4b68      	ldr	r3, [pc, #416]	; (800c094 <HAL_RCC_OscConfig+0x76c>)
 800bef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bef4:	4a67      	ldr	r2, [pc, #412]	; (800c094 <HAL_RCC_OscConfig+0x76c>)
 800bef6:	f023 0301 	bic.w	r3, r3, #1
 800befa:	6713      	str	r3, [r2, #112]	; 0x70
 800befc:	4b65      	ldr	r3, [pc, #404]	; (800c094 <HAL_RCC_OscConfig+0x76c>)
 800befe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf00:	4a64      	ldr	r2, [pc, #400]	; (800c094 <HAL_RCC_OscConfig+0x76c>)
 800bf02:	f023 0304 	bic.w	r3, r3, #4
 800bf06:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	689b      	ldr	r3, [r3, #8]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d015      	beq.n	800bf3c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bf10:	f7fb f980 	bl	8007214 <HAL_GetTick>
 800bf14:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bf16:	e00a      	b.n	800bf2e <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bf18:	f7fb f97c 	bl	8007214 <HAL_GetTick>
 800bf1c:	4602      	mov	r2, r0
 800bf1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf20:	1ad3      	subs	r3, r2, r3
 800bf22:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf26:	4293      	cmp	r3, r2
 800bf28:	d901      	bls.n	800bf2e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800bf2a:	2303      	movs	r3, #3
 800bf2c:	e123      	b.n	800c176 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bf2e:	4b59      	ldr	r3, [pc, #356]	; (800c094 <HAL_RCC_OscConfig+0x76c>)
 800bf30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf32:	f003 0302 	and.w	r3, r3, #2
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d0ee      	beq.n	800bf18 <HAL_RCC_OscConfig+0x5f0>
 800bf3a:	e014      	b.n	800bf66 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bf3c:	f7fb f96a 	bl	8007214 <HAL_GetTick>
 800bf40:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800bf42:	e00a      	b.n	800bf5a <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bf44:	f7fb f966 	bl	8007214 <HAL_GetTick>
 800bf48:	4602      	mov	r2, r0
 800bf4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf4c:	1ad3      	subs	r3, r2, r3
 800bf4e:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf52:	4293      	cmp	r3, r2
 800bf54:	d901      	bls.n	800bf5a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800bf56:	2303      	movs	r3, #3
 800bf58:	e10d      	b.n	800c176 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800bf5a:	4b4e      	ldr	r3, [pc, #312]	; (800c094 <HAL_RCC_OscConfig+0x76c>)
 800bf5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf5e:	f003 0302 	and.w	r3, r3, #2
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d1ee      	bne.n	800bf44 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	f000 8102 	beq.w	800c174 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800bf70:	4b48      	ldr	r3, [pc, #288]	; (800c094 <HAL_RCC_OscConfig+0x76c>)
 800bf72:	691b      	ldr	r3, [r3, #16]
 800bf74:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bf78:	2b18      	cmp	r3, #24
 800bf7a:	f000 80bd 	beq.w	800c0f8 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf82:	2b02      	cmp	r3, #2
 800bf84:	f040 809e 	bne.w	800c0c4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bf88:	4b42      	ldr	r3, [pc, #264]	; (800c094 <HAL_RCC_OscConfig+0x76c>)
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	4a41      	ldr	r2, [pc, #260]	; (800c094 <HAL_RCC_OscConfig+0x76c>)
 800bf8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bf92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf94:	f7fb f93e 	bl	8007214 <HAL_GetTick>
 800bf98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bf9a:	e008      	b.n	800bfae <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bf9c:	f7fb f93a 	bl	8007214 <HAL_GetTick>
 800bfa0:	4602      	mov	r2, r0
 800bfa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfa4:	1ad3      	subs	r3, r2, r3
 800bfa6:	2b02      	cmp	r3, #2
 800bfa8:	d901      	bls.n	800bfae <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800bfaa:	2303      	movs	r3, #3
 800bfac:	e0e3      	b.n	800c176 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bfae:	4b39      	ldr	r3, [pc, #228]	; (800c094 <HAL_RCC_OscConfig+0x76c>)
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d1f0      	bne.n	800bf9c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bfba:	4b36      	ldr	r3, [pc, #216]	; (800c094 <HAL_RCC_OscConfig+0x76c>)
 800bfbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bfbe:	4b37      	ldr	r3, [pc, #220]	; (800c09c <HAL_RCC_OscConfig+0x774>)
 800bfc0:	4013      	ands	r3, r2
 800bfc2:	687a      	ldr	r2, [r7, #4]
 800bfc4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800bfc6:	687a      	ldr	r2, [r7, #4]
 800bfc8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800bfca:	0112      	lsls	r2, r2, #4
 800bfcc:	430a      	orrs	r2, r1
 800bfce:	4931      	ldr	r1, [pc, #196]	; (800c094 <HAL_RCC_OscConfig+0x76c>)
 800bfd0:	4313      	orrs	r3, r2
 800bfd2:	628b      	str	r3, [r1, #40]	; 0x28
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfd8:	3b01      	subs	r3, #1
 800bfda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfe2:	3b01      	subs	r3, #1
 800bfe4:	025b      	lsls	r3, r3, #9
 800bfe6:	b29b      	uxth	r3, r3
 800bfe8:	431a      	orrs	r2, r3
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfee:	3b01      	subs	r3, #1
 800bff0:	041b      	lsls	r3, r3, #16
 800bff2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bff6:	431a      	orrs	r2, r3
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bffc:	3b01      	subs	r3, #1
 800bffe:	061b      	lsls	r3, r3, #24
 800c000:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c004:	4923      	ldr	r1, [pc, #140]	; (800c094 <HAL_RCC_OscConfig+0x76c>)
 800c006:	4313      	orrs	r3, r2
 800c008:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800c00a:	4b22      	ldr	r3, [pc, #136]	; (800c094 <HAL_RCC_OscConfig+0x76c>)
 800c00c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c00e:	4a21      	ldr	r2, [pc, #132]	; (800c094 <HAL_RCC_OscConfig+0x76c>)
 800c010:	f023 0301 	bic.w	r3, r3, #1
 800c014:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800c016:	4b1f      	ldr	r3, [pc, #124]	; (800c094 <HAL_RCC_OscConfig+0x76c>)
 800c018:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c01a:	4b21      	ldr	r3, [pc, #132]	; (800c0a0 <HAL_RCC_OscConfig+0x778>)
 800c01c:	4013      	ands	r3, r2
 800c01e:	687a      	ldr	r2, [r7, #4]
 800c020:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800c022:	00d2      	lsls	r2, r2, #3
 800c024:	491b      	ldr	r1, [pc, #108]	; (800c094 <HAL_RCC_OscConfig+0x76c>)
 800c026:	4313      	orrs	r3, r2
 800c028:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800c02a:	4b1a      	ldr	r3, [pc, #104]	; (800c094 <HAL_RCC_OscConfig+0x76c>)
 800c02c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c02e:	f023 020c 	bic.w	r2, r3, #12
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c036:	4917      	ldr	r1, [pc, #92]	; (800c094 <HAL_RCC_OscConfig+0x76c>)
 800c038:	4313      	orrs	r3, r2
 800c03a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800c03c:	4b15      	ldr	r3, [pc, #84]	; (800c094 <HAL_RCC_OscConfig+0x76c>)
 800c03e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c040:	f023 0202 	bic.w	r2, r3, #2
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c048:	4912      	ldr	r1, [pc, #72]	; (800c094 <HAL_RCC_OscConfig+0x76c>)
 800c04a:	4313      	orrs	r3, r2
 800c04c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800c04e:	4b11      	ldr	r3, [pc, #68]	; (800c094 <HAL_RCC_OscConfig+0x76c>)
 800c050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c052:	4a10      	ldr	r2, [pc, #64]	; (800c094 <HAL_RCC_OscConfig+0x76c>)
 800c054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c058:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c05a:	4b0e      	ldr	r3, [pc, #56]	; (800c094 <HAL_RCC_OscConfig+0x76c>)
 800c05c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c05e:	4a0d      	ldr	r2, [pc, #52]	; (800c094 <HAL_RCC_OscConfig+0x76c>)
 800c060:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c064:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800c066:	4b0b      	ldr	r3, [pc, #44]	; (800c094 <HAL_RCC_OscConfig+0x76c>)
 800c068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c06a:	4a0a      	ldr	r2, [pc, #40]	; (800c094 <HAL_RCC_OscConfig+0x76c>)
 800c06c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c070:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800c072:	4b08      	ldr	r3, [pc, #32]	; (800c094 <HAL_RCC_OscConfig+0x76c>)
 800c074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c076:	4a07      	ldr	r2, [pc, #28]	; (800c094 <HAL_RCC_OscConfig+0x76c>)
 800c078:	f043 0301 	orr.w	r3, r3, #1
 800c07c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c07e:	4b05      	ldr	r3, [pc, #20]	; (800c094 <HAL_RCC_OscConfig+0x76c>)
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	4a04      	ldr	r2, [pc, #16]	; (800c094 <HAL_RCC_OscConfig+0x76c>)
 800c084:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c088:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c08a:	f7fb f8c3 	bl	8007214 <HAL_GetTick>
 800c08e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c090:	e011      	b.n	800c0b6 <HAL_RCC_OscConfig+0x78e>
 800c092:	bf00      	nop
 800c094:	58024400 	.word	0x58024400
 800c098:	58024800 	.word	0x58024800
 800c09c:	fffffc0c 	.word	0xfffffc0c
 800c0a0:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c0a4:	f7fb f8b6 	bl	8007214 <HAL_GetTick>
 800c0a8:	4602      	mov	r2, r0
 800c0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ac:	1ad3      	subs	r3, r2, r3
 800c0ae:	2b02      	cmp	r3, #2
 800c0b0:	d901      	bls.n	800c0b6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800c0b2:	2303      	movs	r3, #3
 800c0b4:	e05f      	b.n	800c176 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c0b6:	4b32      	ldr	r3, [pc, #200]	; (800c180 <HAL_RCC_OscConfig+0x858>)
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d0f0      	beq.n	800c0a4 <HAL_RCC_OscConfig+0x77c>
 800c0c2:	e057      	b.n	800c174 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c0c4:	4b2e      	ldr	r3, [pc, #184]	; (800c180 <HAL_RCC_OscConfig+0x858>)
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	4a2d      	ldr	r2, [pc, #180]	; (800c180 <HAL_RCC_OscConfig+0x858>)
 800c0ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c0ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c0d0:	f7fb f8a0 	bl	8007214 <HAL_GetTick>
 800c0d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c0d6:	e008      	b.n	800c0ea <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c0d8:	f7fb f89c 	bl	8007214 <HAL_GetTick>
 800c0dc:	4602      	mov	r2, r0
 800c0de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0e0:	1ad3      	subs	r3, r2, r3
 800c0e2:	2b02      	cmp	r3, #2
 800c0e4:	d901      	bls.n	800c0ea <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800c0e6:	2303      	movs	r3, #3
 800c0e8:	e045      	b.n	800c176 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c0ea:	4b25      	ldr	r3, [pc, #148]	; (800c180 <HAL_RCC_OscConfig+0x858>)
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d1f0      	bne.n	800c0d8 <HAL_RCC_OscConfig+0x7b0>
 800c0f6:	e03d      	b.n	800c174 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800c0f8:	4b21      	ldr	r3, [pc, #132]	; (800c180 <HAL_RCC_OscConfig+0x858>)
 800c0fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0fc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800c0fe:	4b20      	ldr	r3, [pc, #128]	; (800c180 <HAL_RCC_OscConfig+0x858>)
 800c100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c102:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c108:	2b01      	cmp	r3, #1
 800c10a:	d031      	beq.n	800c170 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c10c:	693b      	ldr	r3, [r7, #16]
 800c10e:	f003 0203 	and.w	r2, r3, #3
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c116:	429a      	cmp	r2, r3
 800c118:	d12a      	bne.n	800c170 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800c11a:	693b      	ldr	r3, [r7, #16]
 800c11c:	091b      	lsrs	r3, r3, #4
 800c11e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c126:	429a      	cmp	r2, r3
 800c128:	d122      	bne.n	800c170 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c134:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800c136:	429a      	cmp	r2, r3
 800c138:	d11a      	bne.n	800c170 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	0a5b      	lsrs	r3, r3, #9
 800c13e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c146:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c148:	429a      	cmp	r2, r3
 800c14a:	d111      	bne.n	800c170 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	0c1b      	lsrs	r3, r3, #16
 800c150:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c158:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c15a:	429a      	cmp	r2, r3
 800c15c:	d108      	bne.n	800c170 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	0e1b      	lsrs	r3, r3, #24
 800c162:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c16a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c16c:	429a      	cmp	r2, r3
 800c16e:	d001      	beq.n	800c174 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800c170:	2301      	movs	r3, #1
 800c172:	e000      	b.n	800c176 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800c174:	2300      	movs	r3, #0
}
 800c176:	4618      	mov	r0, r3
 800c178:	3730      	adds	r7, #48	; 0x30
 800c17a:	46bd      	mov	sp, r7
 800c17c:	bd80      	pop	{r7, pc}
 800c17e:	bf00      	nop
 800c180:	58024400 	.word	0x58024400

0800c184 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b086      	sub	sp, #24
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
 800c18c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d101      	bne.n	800c198 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c194:	2301      	movs	r3, #1
 800c196:	e19c      	b.n	800c4d2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c198:	4b8a      	ldr	r3, [pc, #552]	; (800c3c4 <HAL_RCC_ClockConfig+0x240>)
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	f003 030f 	and.w	r3, r3, #15
 800c1a0:	683a      	ldr	r2, [r7, #0]
 800c1a2:	429a      	cmp	r2, r3
 800c1a4:	d910      	bls.n	800c1c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c1a6:	4b87      	ldr	r3, [pc, #540]	; (800c3c4 <HAL_RCC_ClockConfig+0x240>)
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	f023 020f 	bic.w	r2, r3, #15
 800c1ae:	4985      	ldr	r1, [pc, #532]	; (800c3c4 <HAL_RCC_ClockConfig+0x240>)
 800c1b0:	683b      	ldr	r3, [r7, #0]
 800c1b2:	4313      	orrs	r3, r2
 800c1b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c1b6:	4b83      	ldr	r3, [pc, #524]	; (800c3c4 <HAL_RCC_ClockConfig+0x240>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	f003 030f 	and.w	r3, r3, #15
 800c1be:	683a      	ldr	r2, [r7, #0]
 800c1c0:	429a      	cmp	r2, r3
 800c1c2:	d001      	beq.n	800c1c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800c1c4:	2301      	movs	r3, #1
 800c1c6:	e184      	b.n	800c4d2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	f003 0304 	and.w	r3, r3, #4
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d010      	beq.n	800c1f6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	691a      	ldr	r2, [r3, #16]
 800c1d8:	4b7b      	ldr	r3, [pc, #492]	; (800c3c8 <HAL_RCC_ClockConfig+0x244>)
 800c1da:	699b      	ldr	r3, [r3, #24]
 800c1dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c1e0:	429a      	cmp	r2, r3
 800c1e2:	d908      	bls.n	800c1f6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c1e4:	4b78      	ldr	r3, [pc, #480]	; (800c3c8 <HAL_RCC_ClockConfig+0x244>)
 800c1e6:	699b      	ldr	r3, [r3, #24]
 800c1e8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	691b      	ldr	r3, [r3, #16]
 800c1f0:	4975      	ldr	r1, [pc, #468]	; (800c3c8 <HAL_RCC_ClockConfig+0x244>)
 800c1f2:	4313      	orrs	r3, r2
 800c1f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	f003 0308 	and.w	r3, r3, #8
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d010      	beq.n	800c224 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	695a      	ldr	r2, [r3, #20]
 800c206:	4b70      	ldr	r3, [pc, #448]	; (800c3c8 <HAL_RCC_ClockConfig+0x244>)
 800c208:	69db      	ldr	r3, [r3, #28]
 800c20a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c20e:	429a      	cmp	r2, r3
 800c210:	d908      	bls.n	800c224 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c212:	4b6d      	ldr	r3, [pc, #436]	; (800c3c8 <HAL_RCC_ClockConfig+0x244>)
 800c214:	69db      	ldr	r3, [r3, #28]
 800c216:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	695b      	ldr	r3, [r3, #20]
 800c21e:	496a      	ldr	r1, [pc, #424]	; (800c3c8 <HAL_RCC_ClockConfig+0x244>)
 800c220:	4313      	orrs	r3, r2
 800c222:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	f003 0310 	and.w	r3, r3, #16
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d010      	beq.n	800c252 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	699a      	ldr	r2, [r3, #24]
 800c234:	4b64      	ldr	r3, [pc, #400]	; (800c3c8 <HAL_RCC_ClockConfig+0x244>)
 800c236:	69db      	ldr	r3, [r3, #28]
 800c238:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c23c:	429a      	cmp	r2, r3
 800c23e:	d908      	bls.n	800c252 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c240:	4b61      	ldr	r3, [pc, #388]	; (800c3c8 <HAL_RCC_ClockConfig+0x244>)
 800c242:	69db      	ldr	r3, [r3, #28]
 800c244:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	699b      	ldr	r3, [r3, #24]
 800c24c:	495e      	ldr	r1, [pc, #376]	; (800c3c8 <HAL_RCC_ClockConfig+0x244>)
 800c24e:	4313      	orrs	r3, r2
 800c250:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	f003 0320 	and.w	r3, r3, #32
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d010      	beq.n	800c280 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	69da      	ldr	r2, [r3, #28]
 800c262:	4b59      	ldr	r3, [pc, #356]	; (800c3c8 <HAL_RCC_ClockConfig+0x244>)
 800c264:	6a1b      	ldr	r3, [r3, #32]
 800c266:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c26a:	429a      	cmp	r2, r3
 800c26c:	d908      	bls.n	800c280 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800c26e:	4b56      	ldr	r3, [pc, #344]	; (800c3c8 <HAL_RCC_ClockConfig+0x244>)
 800c270:	6a1b      	ldr	r3, [r3, #32]
 800c272:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	69db      	ldr	r3, [r3, #28]
 800c27a:	4953      	ldr	r1, [pc, #332]	; (800c3c8 <HAL_RCC_ClockConfig+0x244>)
 800c27c:	4313      	orrs	r3, r2
 800c27e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	f003 0302 	and.w	r3, r3, #2
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d010      	beq.n	800c2ae <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	68da      	ldr	r2, [r3, #12]
 800c290:	4b4d      	ldr	r3, [pc, #308]	; (800c3c8 <HAL_RCC_ClockConfig+0x244>)
 800c292:	699b      	ldr	r3, [r3, #24]
 800c294:	f003 030f 	and.w	r3, r3, #15
 800c298:	429a      	cmp	r2, r3
 800c29a:	d908      	bls.n	800c2ae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c29c:	4b4a      	ldr	r3, [pc, #296]	; (800c3c8 <HAL_RCC_ClockConfig+0x244>)
 800c29e:	699b      	ldr	r3, [r3, #24]
 800c2a0:	f023 020f 	bic.w	r2, r3, #15
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	68db      	ldr	r3, [r3, #12]
 800c2a8:	4947      	ldr	r1, [pc, #284]	; (800c3c8 <HAL_RCC_ClockConfig+0x244>)
 800c2aa:	4313      	orrs	r3, r2
 800c2ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	f003 0301 	and.w	r3, r3, #1
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d055      	beq.n	800c366 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800c2ba:	4b43      	ldr	r3, [pc, #268]	; (800c3c8 <HAL_RCC_ClockConfig+0x244>)
 800c2bc:	699b      	ldr	r3, [r3, #24]
 800c2be:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	689b      	ldr	r3, [r3, #8]
 800c2c6:	4940      	ldr	r1, [pc, #256]	; (800c3c8 <HAL_RCC_ClockConfig+0x244>)
 800c2c8:	4313      	orrs	r3, r2
 800c2ca:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	685b      	ldr	r3, [r3, #4]
 800c2d0:	2b02      	cmp	r3, #2
 800c2d2:	d107      	bne.n	800c2e4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c2d4:	4b3c      	ldr	r3, [pc, #240]	; (800c3c8 <HAL_RCC_ClockConfig+0x244>)
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d121      	bne.n	800c324 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800c2e0:	2301      	movs	r3, #1
 800c2e2:	e0f6      	b.n	800c4d2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	685b      	ldr	r3, [r3, #4]
 800c2e8:	2b03      	cmp	r3, #3
 800c2ea:	d107      	bne.n	800c2fc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c2ec:	4b36      	ldr	r3, [pc, #216]	; (800c3c8 <HAL_RCC_ClockConfig+0x244>)
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d115      	bne.n	800c324 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800c2f8:	2301      	movs	r3, #1
 800c2fa:	e0ea      	b.n	800c4d2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	685b      	ldr	r3, [r3, #4]
 800c300:	2b01      	cmp	r3, #1
 800c302:	d107      	bne.n	800c314 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c304:	4b30      	ldr	r3, [pc, #192]	; (800c3c8 <HAL_RCC_ClockConfig+0x244>)
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d109      	bne.n	800c324 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800c310:	2301      	movs	r3, #1
 800c312:	e0de      	b.n	800c4d2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c314:	4b2c      	ldr	r3, [pc, #176]	; (800c3c8 <HAL_RCC_ClockConfig+0x244>)
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	f003 0304 	and.w	r3, r3, #4
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d101      	bne.n	800c324 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800c320:	2301      	movs	r3, #1
 800c322:	e0d6      	b.n	800c4d2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c324:	4b28      	ldr	r3, [pc, #160]	; (800c3c8 <HAL_RCC_ClockConfig+0x244>)
 800c326:	691b      	ldr	r3, [r3, #16]
 800c328:	f023 0207 	bic.w	r2, r3, #7
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	685b      	ldr	r3, [r3, #4]
 800c330:	4925      	ldr	r1, [pc, #148]	; (800c3c8 <HAL_RCC_ClockConfig+0x244>)
 800c332:	4313      	orrs	r3, r2
 800c334:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c336:	f7fa ff6d 	bl	8007214 <HAL_GetTick>
 800c33a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c33c:	e00a      	b.n	800c354 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c33e:	f7fa ff69 	bl	8007214 <HAL_GetTick>
 800c342:	4602      	mov	r2, r0
 800c344:	697b      	ldr	r3, [r7, #20]
 800c346:	1ad3      	subs	r3, r2, r3
 800c348:	f241 3288 	movw	r2, #5000	; 0x1388
 800c34c:	4293      	cmp	r3, r2
 800c34e:	d901      	bls.n	800c354 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800c350:	2303      	movs	r3, #3
 800c352:	e0be      	b.n	800c4d2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c354:	4b1c      	ldr	r3, [pc, #112]	; (800c3c8 <HAL_RCC_ClockConfig+0x244>)
 800c356:	691b      	ldr	r3, [r3, #16]
 800c358:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	685b      	ldr	r3, [r3, #4]
 800c360:	00db      	lsls	r3, r3, #3
 800c362:	429a      	cmp	r2, r3
 800c364:	d1eb      	bne.n	800c33e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	f003 0302 	and.w	r3, r3, #2
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d010      	beq.n	800c394 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	68da      	ldr	r2, [r3, #12]
 800c376:	4b14      	ldr	r3, [pc, #80]	; (800c3c8 <HAL_RCC_ClockConfig+0x244>)
 800c378:	699b      	ldr	r3, [r3, #24]
 800c37a:	f003 030f 	and.w	r3, r3, #15
 800c37e:	429a      	cmp	r2, r3
 800c380:	d208      	bcs.n	800c394 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c382:	4b11      	ldr	r3, [pc, #68]	; (800c3c8 <HAL_RCC_ClockConfig+0x244>)
 800c384:	699b      	ldr	r3, [r3, #24]
 800c386:	f023 020f 	bic.w	r2, r3, #15
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	68db      	ldr	r3, [r3, #12]
 800c38e:	490e      	ldr	r1, [pc, #56]	; (800c3c8 <HAL_RCC_ClockConfig+0x244>)
 800c390:	4313      	orrs	r3, r2
 800c392:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c394:	4b0b      	ldr	r3, [pc, #44]	; (800c3c4 <HAL_RCC_ClockConfig+0x240>)
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	f003 030f 	and.w	r3, r3, #15
 800c39c:	683a      	ldr	r2, [r7, #0]
 800c39e:	429a      	cmp	r2, r3
 800c3a0:	d214      	bcs.n	800c3cc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c3a2:	4b08      	ldr	r3, [pc, #32]	; (800c3c4 <HAL_RCC_ClockConfig+0x240>)
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	f023 020f 	bic.w	r2, r3, #15
 800c3aa:	4906      	ldr	r1, [pc, #24]	; (800c3c4 <HAL_RCC_ClockConfig+0x240>)
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	4313      	orrs	r3, r2
 800c3b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c3b2:	4b04      	ldr	r3, [pc, #16]	; (800c3c4 <HAL_RCC_ClockConfig+0x240>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	f003 030f 	and.w	r3, r3, #15
 800c3ba:	683a      	ldr	r2, [r7, #0]
 800c3bc:	429a      	cmp	r2, r3
 800c3be:	d005      	beq.n	800c3cc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800c3c0:	2301      	movs	r3, #1
 800c3c2:	e086      	b.n	800c4d2 <HAL_RCC_ClockConfig+0x34e>
 800c3c4:	52002000 	.word	0x52002000
 800c3c8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	f003 0304 	and.w	r3, r3, #4
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d010      	beq.n	800c3fa <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	691a      	ldr	r2, [r3, #16]
 800c3dc:	4b3f      	ldr	r3, [pc, #252]	; (800c4dc <HAL_RCC_ClockConfig+0x358>)
 800c3de:	699b      	ldr	r3, [r3, #24]
 800c3e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c3e4:	429a      	cmp	r2, r3
 800c3e6:	d208      	bcs.n	800c3fa <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c3e8:	4b3c      	ldr	r3, [pc, #240]	; (800c4dc <HAL_RCC_ClockConfig+0x358>)
 800c3ea:	699b      	ldr	r3, [r3, #24]
 800c3ec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	691b      	ldr	r3, [r3, #16]
 800c3f4:	4939      	ldr	r1, [pc, #228]	; (800c4dc <HAL_RCC_ClockConfig+0x358>)
 800c3f6:	4313      	orrs	r3, r2
 800c3f8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	f003 0308 	and.w	r3, r3, #8
 800c402:	2b00      	cmp	r3, #0
 800c404:	d010      	beq.n	800c428 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	695a      	ldr	r2, [r3, #20]
 800c40a:	4b34      	ldr	r3, [pc, #208]	; (800c4dc <HAL_RCC_ClockConfig+0x358>)
 800c40c:	69db      	ldr	r3, [r3, #28]
 800c40e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c412:	429a      	cmp	r2, r3
 800c414:	d208      	bcs.n	800c428 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c416:	4b31      	ldr	r3, [pc, #196]	; (800c4dc <HAL_RCC_ClockConfig+0x358>)
 800c418:	69db      	ldr	r3, [r3, #28]
 800c41a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	695b      	ldr	r3, [r3, #20]
 800c422:	492e      	ldr	r1, [pc, #184]	; (800c4dc <HAL_RCC_ClockConfig+0x358>)
 800c424:	4313      	orrs	r3, r2
 800c426:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	f003 0310 	and.w	r3, r3, #16
 800c430:	2b00      	cmp	r3, #0
 800c432:	d010      	beq.n	800c456 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	699a      	ldr	r2, [r3, #24]
 800c438:	4b28      	ldr	r3, [pc, #160]	; (800c4dc <HAL_RCC_ClockConfig+0x358>)
 800c43a:	69db      	ldr	r3, [r3, #28]
 800c43c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c440:	429a      	cmp	r2, r3
 800c442:	d208      	bcs.n	800c456 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c444:	4b25      	ldr	r3, [pc, #148]	; (800c4dc <HAL_RCC_ClockConfig+0x358>)
 800c446:	69db      	ldr	r3, [r3, #28]
 800c448:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	699b      	ldr	r3, [r3, #24]
 800c450:	4922      	ldr	r1, [pc, #136]	; (800c4dc <HAL_RCC_ClockConfig+0x358>)
 800c452:	4313      	orrs	r3, r2
 800c454:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	f003 0320 	and.w	r3, r3, #32
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d010      	beq.n	800c484 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	69da      	ldr	r2, [r3, #28]
 800c466:	4b1d      	ldr	r3, [pc, #116]	; (800c4dc <HAL_RCC_ClockConfig+0x358>)
 800c468:	6a1b      	ldr	r3, [r3, #32]
 800c46a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c46e:	429a      	cmp	r2, r3
 800c470:	d208      	bcs.n	800c484 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800c472:	4b1a      	ldr	r3, [pc, #104]	; (800c4dc <HAL_RCC_ClockConfig+0x358>)
 800c474:	6a1b      	ldr	r3, [r3, #32]
 800c476:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	69db      	ldr	r3, [r3, #28]
 800c47e:	4917      	ldr	r1, [pc, #92]	; (800c4dc <HAL_RCC_ClockConfig+0x358>)
 800c480:	4313      	orrs	r3, r2
 800c482:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800c484:	f000 f834 	bl	800c4f0 <HAL_RCC_GetSysClockFreq>
 800c488:	4602      	mov	r2, r0
 800c48a:	4b14      	ldr	r3, [pc, #80]	; (800c4dc <HAL_RCC_ClockConfig+0x358>)
 800c48c:	699b      	ldr	r3, [r3, #24]
 800c48e:	0a1b      	lsrs	r3, r3, #8
 800c490:	f003 030f 	and.w	r3, r3, #15
 800c494:	4912      	ldr	r1, [pc, #72]	; (800c4e0 <HAL_RCC_ClockConfig+0x35c>)
 800c496:	5ccb      	ldrb	r3, [r1, r3]
 800c498:	f003 031f 	and.w	r3, r3, #31
 800c49c:	fa22 f303 	lsr.w	r3, r2, r3
 800c4a0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c4a2:	4b0e      	ldr	r3, [pc, #56]	; (800c4dc <HAL_RCC_ClockConfig+0x358>)
 800c4a4:	699b      	ldr	r3, [r3, #24]
 800c4a6:	f003 030f 	and.w	r3, r3, #15
 800c4aa:	4a0d      	ldr	r2, [pc, #52]	; (800c4e0 <HAL_RCC_ClockConfig+0x35c>)
 800c4ac:	5cd3      	ldrb	r3, [r2, r3]
 800c4ae:	f003 031f 	and.w	r3, r3, #31
 800c4b2:	693a      	ldr	r2, [r7, #16]
 800c4b4:	fa22 f303 	lsr.w	r3, r2, r3
 800c4b8:	4a0a      	ldr	r2, [pc, #40]	; (800c4e4 <HAL_RCC_ClockConfig+0x360>)
 800c4ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c4bc:	4a0a      	ldr	r2, [pc, #40]	; (800c4e8 <HAL_RCC_ClockConfig+0x364>)
 800c4be:	693b      	ldr	r3, [r7, #16]
 800c4c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800c4c2:	4b0a      	ldr	r3, [pc, #40]	; (800c4ec <HAL_RCC_ClockConfig+0x368>)
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	f7fa fe5a 	bl	8007180 <HAL_InitTick>
 800c4cc:	4603      	mov	r3, r0
 800c4ce:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800c4d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	3718      	adds	r7, #24
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	bd80      	pop	{r7, pc}
 800c4da:	bf00      	nop
 800c4dc:	58024400 	.word	0x58024400
 800c4e0:	080145c4 	.word	0x080145c4
 800c4e4:	24000004 	.word	0x24000004
 800c4e8:	24000000 	.word	0x24000000
 800c4ec:	24000008 	.word	0x24000008

0800c4f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c4f0:	b480      	push	{r7}
 800c4f2:	b089      	sub	sp, #36	; 0x24
 800c4f4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c4f6:	4bb3      	ldr	r3, [pc, #716]	; (800c7c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c4f8:	691b      	ldr	r3, [r3, #16]
 800c4fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c4fe:	2b18      	cmp	r3, #24
 800c500:	f200 8155 	bhi.w	800c7ae <HAL_RCC_GetSysClockFreq+0x2be>
 800c504:	a201      	add	r2, pc, #4	; (adr r2, 800c50c <HAL_RCC_GetSysClockFreq+0x1c>)
 800c506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c50a:	bf00      	nop
 800c50c:	0800c571 	.word	0x0800c571
 800c510:	0800c7af 	.word	0x0800c7af
 800c514:	0800c7af 	.word	0x0800c7af
 800c518:	0800c7af 	.word	0x0800c7af
 800c51c:	0800c7af 	.word	0x0800c7af
 800c520:	0800c7af 	.word	0x0800c7af
 800c524:	0800c7af 	.word	0x0800c7af
 800c528:	0800c7af 	.word	0x0800c7af
 800c52c:	0800c597 	.word	0x0800c597
 800c530:	0800c7af 	.word	0x0800c7af
 800c534:	0800c7af 	.word	0x0800c7af
 800c538:	0800c7af 	.word	0x0800c7af
 800c53c:	0800c7af 	.word	0x0800c7af
 800c540:	0800c7af 	.word	0x0800c7af
 800c544:	0800c7af 	.word	0x0800c7af
 800c548:	0800c7af 	.word	0x0800c7af
 800c54c:	0800c59d 	.word	0x0800c59d
 800c550:	0800c7af 	.word	0x0800c7af
 800c554:	0800c7af 	.word	0x0800c7af
 800c558:	0800c7af 	.word	0x0800c7af
 800c55c:	0800c7af 	.word	0x0800c7af
 800c560:	0800c7af 	.word	0x0800c7af
 800c564:	0800c7af 	.word	0x0800c7af
 800c568:	0800c7af 	.word	0x0800c7af
 800c56c:	0800c5a3 	.word	0x0800c5a3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c570:	4b94      	ldr	r3, [pc, #592]	; (800c7c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	f003 0320 	and.w	r3, r3, #32
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d009      	beq.n	800c590 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c57c:	4b91      	ldr	r3, [pc, #580]	; (800c7c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	08db      	lsrs	r3, r3, #3
 800c582:	f003 0303 	and.w	r3, r3, #3
 800c586:	4a90      	ldr	r2, [pc, #576]	; (800c7c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c588:	fa22 f303 	lsr.w	r3, r2, r3
 800c58c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800c58e:	e111      	b.n	800c7b4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800c590:	4b8d      	ldr	r3, [pc, #564]	; (800c7c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c592:	61bb      	str	r3, [r7, #24]
    break;
 800c594:	e10e      	b.n	800c7b4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800c596:	4b8d      	ldr	r3, [pc, #564]	; (800c7cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c598:	61bb      	str	r3, [r7, #24]
    break;
 800c59a:	e10b      	b.n	800c7b4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800c59c:	4b8c      	ldr	r3, [pc, #560]	; (800c7d0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800c59e:	61bb      	str	r3, [r7, #24]
    break;
 800c5a0:	e108      	b.n	800c7b4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c5a2:	4b88      	ldr	r3, [pc, #544]	; (800c7c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c5a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5a6:	f003 0303 	and.w	r3, r3, #3
 800c5aa:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800c5ac:	4b85      	ldr	r3, [pc, #532]	; (800c7c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c5ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5b0:	091b      	lsrs	r3, r3, #4
 800c5b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c5b6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800c5b8:	4b82      	ldr	r3, [pc, #520]	; (800c7c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c5ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5bc:	f003 0301 	and.w	r3, r3, #1
 800c5c0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800c5c2:	4b80      	ldr	r3, [pc, #512]	; (800c7c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c5c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5c6:	08db      	lsrs	r3, r3, #3
 800c5c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c5cc:	68fa      	ldr	r2, [r7, #12]
 800c5ce:	fb02 f303 	mul.w	r3, r2, r3
 800c5d2:	ee07 3a90 	vmov	s15, r3
 800c5d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5da:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800c5de:	693b      	ldr	r3, [r7, #16]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	f000 80e1 	beq.w	800c7a8 <HAL_RCC_GetSysClockFreq+0x2b8>
 800c5e6:	697b      	ldr	r3, [r7, #20]
 800c5e8:	2b02      	cmp	r3, #2
 800c5ea:	f000 8083 	beq.w	800c6f4 <HAL_RCC_GetSysClockFreq+0x204>
 800c5ee:	697b      	ldr	r3, [r7, #20]
 800c5f0:	2b02      	cmp	r3, #2
 800c5f2:	f200 80a1 	bhi.w	800c738 <HAL_RCC_GetSysClockFreq+0x248>
 800c5f6:	697b      	ldr	r3, [r7, #20]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d003      	beq.n	800c604 <HAL_RCC_GetSysClockFreq+0x114>
 800c5fc:	697b      	ldr	r3, [r7, #20]
 800c5fe:	2b01      	cmp	r3, #1
 800c600:	d056      	beq.n	800c6b0 <HAL_RCC_GetSysClockFreq+0x1c0>
 800c602:	e099      	b.n	800c738 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c604:	4b6f      	ldr	r3, [pc, #444]	; (800c7c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	f003 0320 	and.w	r3, r3, #32
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d02d      	beq.n	800c66c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c610:	4b6c      	ldr	r3, [pc, #432]	; (800c7c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	08db      	lsrs	r3, r3, #3
 800c616:	f003 0303 	and.w	r3, r3, #3
 800c61a:	4a6b      	ldr	r2, [pc, #428]	; (800c7c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c61c:	fa22 f303 	lsr.w	r3, r2, r3
 800c620:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	ee07 3a90 	vmov	s15, r3
 800c628:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c62c:	693b      	ldr	r3, [r7, #16]
 800c62e:	ee07 3a90 	vmov	s15, r3
 800c632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c636:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c63a:	4b62      	ldr	r3, [pc, #392]	; (800c7c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c63c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c63e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c642:	ee07 3a90 	vmov	s15, r3
 800c646:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c64a:	ed97 6a02 	vldr	s12, [r7, #8]
 800c64e:	eddf 5a61 	vldr	s11, [pc, #388]	; 800c7d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c652:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c656:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c65a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c65e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c662:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c666:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800c66a:	e087      	b.n	800c77c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c66c:	693b      	ldr	r3, [r7, #16]
 800c66e:	ee07 3a90 	vmov	s15, r3
 800c672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c676:	eddf 6a58 	vldr	s13, [pc, #352]	; 800c7d8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800c67a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c67e:	4b51      	ldr	r3, [pc, #324]	; (800c7c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c686:	ee07 3a90 	vmov	s15, r3
 800c68a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c68e:	ed97 6a02 	vldr	s12, [r7, #8]
 800c692:	eddf 5a50 	vldr	s11, [pc, #320]	; 800c7d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c696:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c69a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c69e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c6a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c6ae:	e065      	b.n	800c77c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c6b0:	693b      	ldr	r3, [r7, #16]
 800c6b2:	ee07 3a90 	vmov	s15, r3
 800c6b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6ba:	eddf 6a48 	vldr	s13, [pc, #288]	; 800c7dc <HAL_RCC_GetSysClockFreq+0x2ec>
 800c6be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c6c2:	4b40      	ldr	r3, [pc, #256]	; (800c7c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c6c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6ca:	ee07 3a90 	vmov	s15, r3
 800c6ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6d2:	ed97 6a02 	vldr	s12, [r7, #8]
 800c6d6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800c7d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c6da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c6de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c6e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c6e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c6f2:	e043      	b.n	800c77c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c6f4:	693b      	ldr	r3, [r7, #16]
 800c6f6:	ee07 3a90 	vmov	s15, r3
 800c6fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6fe:	eddf 6a38 	vldr	s13, [pc, #224]	; 800c7e0 <HAL_RCC_GetSysClockFreq+0x2f0>
 800c702:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c706:	4b2f      	ldr	r3, [pc, #188]	; (800c7c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c70a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c70e:	ee07 3a90 	vmov	s15, r3
 800c712:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c716:	ed97 6a02 	vldr	s12, [r7, #8]
 800c71a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800c7d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c71e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c722:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c726:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c72a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c72e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c732:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c736:	e021      	b.n	800c77c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c738:	693b      	ldr	r3, [r7, #16]
 800c73a:	ee07 3a90 	vmov	s15, r3
 800c73e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c742:	eddf 6a26 	vldr	s13, [pc, #152]	; 800c7dc <HAL_RCC_GetSysClockFreq+0x2ec>
 800c746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c74a:	4b1e      	ldr	r3, [pc, #120]	; (800c7c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c74c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c74e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c752:	ee07 3a90 	vmov	s15, r3
 800c756:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c75a:	ed97 6a02 	vldr	s12, [r7, #8]
 800c75e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800c7d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c762:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c766:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c76a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c76e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c772:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c776:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c77a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800c77c:	4b11      	ldr	r3, [pc, #68]	; (800c7c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c77e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c780:	0a5b      	lsrs	r3, r3, #9
 800c782:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c786:	3301      	adds	r3, #1
 800c788:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800c78a:	683b      	ldr	r3, [r7, #0]
 800c78c:	ee07 3a90 	vmov	s15, r3
 800c790:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c794:	edd7 6a07 	vldr	s13, [r7, #28]
 800c798:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c79c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c7a0:	ee17 3a90 	vmov	r3, s15
 800c7a4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800c7a6:	e005      	b.n	800c7b4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	61bb      	str	r3, [r7, #24]
    break;
 800c7ac:	e002      	b.n	800c7b4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800c7ae:	4b07      	ldr	r3, [pc, #28]	; (800c7cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c7b0:	61bb      	str	r3, [r7, #24]
    break;
 800c7b2:	bf00      	nop
  }

  return sysclockfreq;
 800c7b4:	69bb      	ldr	r3, [r7, #24]
}
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	3724      	adds	r7, #36	; 0x24
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c0:	4770      	bx	lr
 800c7c2:	bf00      	nop
 800c7c4:	58024400 	.word	0x58024400
 800c7c8:	03d09000 	.word	0x03d09000
 800c7cc:	003d0900 	.word	0x003d0900
 800c7d0:	01e84800 	.word	0x01e84800
 800c7d4:	46000000 	.word	0x46000000
 800c7d8:	4c742400 	.word	0x4c742400
 800c7dc:	4a742400 	.word	0x4a742400
 800c7e0:	4bf42400 	.word	0x4bf42400

0800c7e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b082      	sub	sp, #8
 800c7e8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800c7ea:	f7ff fe81 	bl	800c4f0 <HAL_RCC_GetSysClockFreq>
 800c7ee:	4602      	mov	r2, r0
 800c7f0:	4b10      	ldr	r3, [pc, #64]	; (800c834 <HAL_RCC_GetHCLKFreq+0x50>)
 800c7f2:	699b      	ldr	r3, [r3, #24]
 800c7f4:	0a1b      	lsrs	r3, r3, #8
 800c7f6:	f003 030f 	and.w	r3, r3, #15
 800c7fa:	490f      	ldr	r1, [pc, #60]	; (800c838 <HAL_RCC_GetHCLKFreq+0x54>)
 800c7fc:	5ccb      	ldrb	r3, [r1, r3]
 800c7fe:	f003 031f 	and.w	r3, r3, #31
 800c802:	fa22 f303 	lsr.w	r3, r2, r3
 800c806:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c808:	4b0a      	ldr	r3, [pc, #40]	; (800c834 <HAL_RCC_GetHCLKFreq+0x50>)
 800c80a:	699b      	ldr	r3, [r3, #24]
 800c80c:	f003 030f 	and.w	r3, r3, #15
 800c810:	4a09      	ldr	r2, [pc, #36]	; (800c838 <HAL_RCC_GetHCLKFreq+0x54>)
 800c812:	5cd3      	ldrb	r3, [r2, r3]
 800c814:	f003 031f 	and.w	r3, r3, #31
 800c818:	687a      	ldr	r2, [r7, #4]
 800c81a:	fa22 f303 	lsr.w	r3, r2, r3
 800c81e:	4a07      	ldr	r2, [pc, #28]	; (800c83c <HAL_RCC_GetHCLKFreq+0x58>)
 800c820:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c822:	4a07      	ldr	r2, [pc, #28]	; (800c840 <HAL_RCC_GetHCLKFreq+0x5c>)
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800c828:	4b04      	ldr	r3, [pc, #16]	; (800c83c <HAL_RCC_GetHCLKFreq+0x58>)
 800c82a:	681b      	ldr	r3, [r3, #0]
}
 800c82c:	4618      	mov	r0, r3
 800c82e:	3708      	adds	r7, #8
 800c830:	46bd      	mov	sp, r7
 800c832:	bd80      	pop	{r7, pc}
 800c834:	58024400 	.word	0x58024400
 800c838:	080145c4 	.word	0x080145c4
 800c83c:	24000004 	.word	0x24000004
 800c840:	24000000 	.word	0x24000000

0800c844 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c844:	b580      	push	{r7, lr}
 800c846:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800c848:	f7ff ffcc 	bl	800c7e4 <HAL_RCC_GetHCLKFreq>
 800c84c:	4602      	mov	r2, r0
 800c84e:	4b06      	ldr	r3, [pc, #24]	; (800c868 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c850:	69db      	ldr	r3, [r3, #28]
 800c852:	091b      	lsrs	r3, r3, #4
 800c854:	f003 0307 	and.w	r3, r3, #7
 800c858:	4904      	ldr	r1, [pc, #16]	; (800c86c <HAL_RCC_GetPCLK1Freq+0x28>)
 800c85a:	5ccb      	ldrb	r3, [r1, r3]
 800c85c:	f003 031f 	and.w	r3, r3, #31
 800c860:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800c864:	4618      	mov	r0, r3
 800c866:	bd80      	pop	{r7, pc}
 800c868:	58024400 	.word	0x58024400
 800c86c:	080145c4 	.word	0x080145c4

0800c870 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c870:	b580      	push	{r7, lr}
 800c872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800c874:	f7ff ffb6 	bl	800c7e4 <HAL_RCC_GetHCLKFreq>
 800c878:	4602      	mov	r2, r0
 800c87a:	4b06      	ldr	r3, [pc, #24]	; (800c894 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c87c:	69db      	ldr	r3, [r3, #28]
 800c87e:	0a1b      	lsrs	r3, r3, #8
 800c880:	f003 0307 	and.w	r3, r3, #7
 800c884:	4904      	ldr	r1, [pc, #16]	; (800c898 <HAL_RCC_GetPCLK2Freq+0x28>)
 800c886:	5ccb      	ldrb	r3, [r1, r3]
 800c888:	f003 031f 	and.w	r3, r3, #31
 800c88c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800c890:	4618      	mov	r0, r3
 800c892:	bd80      	pop	{r7, pc}
 800c894:	58024400 	.word	0x58024400
 800c898:	080145c4 	.word	0x080145c4

0800c89c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b086      	sub	sp, #24
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d03f      	beq.n	800c938 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c8bc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c8c0:	d02a      	beq.n	800c918 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800c8c2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c8c6:	d824      	bhi.n	800c912 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800c8c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c8cc:	d018      	beq.n	800c900 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800c8ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c8d2:	d81e      	bhi.n	800c912 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d003      	beq.n	800c8e0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800c8d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c8dc:	d007      	beq.n	800c8ee <HAL_RCCEx_PeriphCLKConfig+0x52>
 800c8de:	e018      	b.n	800c912 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c8e0:	4ba3      	ldr	r3, [pc, #652]	; (800cb70 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c8e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8e4:	4aa2      	ldr	r2, [pc, #648]	; (800cb70 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c8e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c8ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800c8ec:	e015      	b.n	800c91a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	3304      	adds	r3, #4
 800c8f2:	2102      	movs	r1, #2
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	f001 f9d5 	bl	800dca4 <RCCEx_PLL2_Config>
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800c8fe:	e00c      	b.n	800c91a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	3324      	adds	r3, #36	; 0x24
 800c904:	2102      	movs	r1, #2
 800c906:	4618      	mov	r0, r3
 800c908:	f001 fa7e 	bl	800de08 <RCCEx_PLL3_Config>
 800c90c:	4603      	mov	r3, r0
 800c90e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800c910:	e003      	b.n	800c91a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c912:	2301      	movs	r3, #1
 800c914:	75fb      	strb	r3, [r7, #23]
      break;
 800c916:	e000      	b.n	800c91a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800c918:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c91a:	7dfb      	ldrb	r3, [r7, #23]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d109      	bne.n	800c934 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800c920:	4b93      	ldr	r3, [pc, #588]	; (800cb70 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c924:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c92c:	4990      	ldr	r1, [pc, #576]	; (800cb70 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c92e:	4313      	orrs	r3, r2
 800c930:	650b      	str	r3, [r1, #80]	; 0x50
 800c932:	e001      	b.n	800c938 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c934:	7dfb      	ldrb	r3, [r7, #23]
 800c936:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c940:	2b00      	cmp	r3, #0
 800c942:	d03d      	beq.n	800c9c0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c948:	2b04      	cmp	r3, #4
 800c94a:	d826      	bhi.n	800c99a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800c94c:	a201      	add	r2, pc, #4	; (adr r2, 800c954 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800c94e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c952:	bf00      	nop
 800c954:	0800c969 	.word	0x0800c969
 800c958:	0800c977 	.word	0x0800c977
 800c95c:	0800c989 	.word	0x0800c989
 800c960:	0800c9a1 	.word	0x0800c9a1
 800c964:	0800c9a1 	.word	0x0800c9a1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c968:	4b81      	ldr	r3, [pc, #516]	; (800cb70 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c96a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c96c:	4a80      	ldr	r2, [pc, #512]	; (800cb70 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c96e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c972:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c974:	e015      	b.n	800c9a2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	3304      	adds	r3, #4
 800c97a:	2100      	movs	r1, #0
 800c97c:	4618      	mov	r0, r3
 800c97e:	f001 f991 	bl	800dca4 <RCCEx_PLL2_Config>
 800c982:	4603      	mov	r3, r0
 800c984:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c986:	e00c      	b.n	800c9a2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	3324      	adds	r3, #36	; 0x24
 800c98c:	2100      	movs	r1, #0
 800c98e:	4618      	mov	r0, r3
 800c990:	f001 fa3a 	bl	800de08 <RCCEx_PLL3_Config>
 800c994:	4603      	mov	r3, r0
 800c996:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c998:	e003      	b.n	800c9a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c99a:	2301      	movs	r3, #1
 800c99c:	75fb      	strb	r3, [r7, #23]
      break;
 800c99e:	e000      	b.n	800c9a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800c9a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c9a2:	7dfb      	ldrb	r3, [r7, #23]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d109      	bne.n	800c9bc <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c9a8:	4b71      	ldr	r3, [pc, #452]	; (800cb70 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c9aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c9ac:	f023 0207 	bic.w	r2, r3, #7
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9b4:	496e      	ldr	r1, [pc, #440]	; (800cb70 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c9b6:	4313      	orrs	r3, r2
 800c9b8:	650b      	str	r3, [r1, #80]	; 0x50
 800c9ba:	e001      	b.n	800c9c0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c9bc:	7dfb      	ldrb	r3, [r7, #23]
 800c9be:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d042      	beq.n	800ca52 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c9d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9d4:	d02b      	beq.n	800ca2e <HAL_RCCEx_PeriphCLKConfig+0x192>
 800c9d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9da:	d825      	bhi.n	800ca28 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800c9dc:	2bc0      	cmp	r3, #192	; 0xc0
 800c9de:	d028      	beq.n	800ca32 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800c9e0:	2bc0      	cmp	r3, #192	; 0xc0
 800c9e2:	d821      	bhi.n	800ca28 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800c9e4:	2b80      	cmp	r3, #128	; 0x80
 800c9e6:	d016      	beq.n	800ca16 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800c9e8:	2b80      	cmp	r3, #128	; 0x80
 800c9ea:	d81d      	bhi.n	800ca28 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d002      	beq.n	800c9f6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800c9f0:	2b40      	cmp	r3, #64	; 0x40
 800c9f2:	d007      	beq.n	800ca04 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800c9f4:	e018      	b.n	800ca28 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c9f6:	4b5e      	ldr	r3, [pc, #376]	; (800cb70 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c9f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9fa:	4a5d      	ldr	r2, [pc, #372]	; (800cb70 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c9fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ca00:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800ca02:	e017      	b.n	800ca34 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	3304      	adds	r3, #4
 800ca08:	2100      	movs	r1, #0
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	f001 f94a 	bl	800dca4 <RCCEx_PLL2_Config>
 800ca10:	4603      	mov	r3, r0
 800ca12:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800ca14:	e00e      	b.n	800ca34 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	3324      	adds	r3, #36	; 0x24
 800ca1a:	2100      	movs	r1, #0
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	f001 f9f3 	bl	800de08 <RCCEx_PLL3_Config>
 800ca22:	4603      	mov	r3, r0
 800ca24:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800ca26:	e005      	b.n	800ca34 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ca28:	2301      	movs	r3, #1
 800ca2a:	75fb      	strb	r3, [r7, #23]
      break;
 800ca2c:	e002      	b.n	800ca34 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800ca2e:	bf00      	nop
 800ca30:	e000      	b.n	800ca34 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800ca32:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ca34:	7dfb      	ldrb	r3, [r7, #23]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d109      	bne.n	800ca4e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800ca3a:	4b4d      	ldr	r3, [pc, #308]	; (800cb70 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ca3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca3e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca46:	494a      	ldr	r1, [pc, #296]	; (800cb70 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ca48:	4313      	orrs	r3, r2
 800ca4a:	650b      	str	r3, [r1, #80]	; 0x50
 800ca4c:	e001      	b.n	800ca52 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca4e:	7dfb      	ldrb	r3, [r7, #23]
 800ca50:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d049      	beq.n	800caf2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ca64:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ca68:	d030      	beq.n	800cacc <HAL_RCCEx_PeriphCLKConfig+0x230>
 800ca6a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ca6e:	d82a      	bhi.n	800cac6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800ca70:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ca74:	d02c      	beq.n	800cad0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800ca76:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ca7a:	d824      	bhi.n	800cac6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800ca7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ca80:	d018      	beq.n	800cab4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800ca82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ca86:	d81e      	bhi.n	800cac6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d003      	beq.n	800ca94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800ca8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ca90:	d007      	beq.n	800caa2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800ca92:	e018      	b.n	800cac6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ca94:	4b36      	ldr	r3, [pc, #216]	; (800cb70 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ca96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca98:	4a35      	ldr	r2, [pc, #212]	; (800cb70 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ca9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ca9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800caa0:	e017      	b.n	800cad2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	3304      	adds	r3, #4
 800caa6:	2100      	movs	r1, #0
 800caa8:	4618      	mov	r0, r3
 800caaa:	f001 f8fb 	bl	800dca4 <RCCEx_PLL2_Config>
 800caae:	4603      	mov	r3, r0
 800cab0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800cab2:	e00e      	b.n	800cad2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	3324      	adds	r3, #36	; 0x24
 800cab8:	2100      	movs	r1, #0
 800caba:	4618      	mov	r0, r3
 800cabc:	f001 f9a4 	bl	800de08 <RCCEx_PLL3_Config>
 800cac0:	4603      	mov	r3, r0
 800cac2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800cac4:	e005      	b.n	800cad2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800cac6:	2301      	movs	r3, #1
 800cac8:	75fb      	strb	r3, [r7, #23]
      break;
 800caca:	e002      	b.n	800cad2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800cacc:	bf00      	nop
 800cace:	e000      	b.n	800cad2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800cad0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cad2:	7dfb      	ldrb	r3, [r7, #23]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d10a      	bne.n	800caee <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800cad8:	4b25      	ldr	r3, [pc, #148]	; (800cb70 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800cada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cadc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800cae6:	4922      	ldr	r1, [pc, #136]	; (800cb70 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800cae8:	4313      	orrs	r3, r2
 800caea:	658b      	str	r3, [r1, #88]	; 0x58
 800caec:	e001      	b.n	800caf2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800caee:	7dfb      	ldrb	r3, [r7, #23]
 800caf0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d04b      	beq.n	800cb96 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800cb04:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cb08:	d030      	beq.n	800cb6c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800cb0a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cb0e:	d82a      	bhi.n	800cb66 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800cb10:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cb14:	d02e      	beq.n	800cb74 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800cb16:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cb1a:	d824      	bhi.n	800cb66 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800cb1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cb20:	d018      	beq.n	800cb54 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800cb22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cb26:	d81e      	bhi.n	800cb66 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d003      	beq.n	800cb34 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800cb2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cb30:	d007      	beq.n	800cb42 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800cb32:	e018      	b.n	800cb66 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cb34:	4b0e      	ldr	r3, [pc, #56]	; (800cb70 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800cb36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb38:	4a0d      	ldr	r2, [pc, #52]	; (800cb70 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800cb3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cb3e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800cb40:	e019      	b.n	800cb76 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	3304      	adds	r3, #4
 800cb46:	2100      	movs	r1, #0
 800cb48:	4618      	mov	r0, r3
 800cb4a:	f001 f8ab 	bl	800dca4 <RCCEx_PLL2_Config>
 800cb4e:	4603      	mov	r3, r0
 800cb50:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800cb52:	e010      	b.n	800cb76 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	3324      	adds	r3, #36	; 0x24
 800cb58:	2100      	movs	r1, #0
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	f001 f954 	bl	800de08 <RCCEx_PLL3_Config>
 800cb60:	4603      	mov	r3, r0
 800cb62:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800cb64:	e007      	b.n	800cb76 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800cb66:	2301      	movs	r3, #1
 800cb68:	75fb      	strb	r3, [r7, #23]
      break;
 800cb6a:	e004      	b.n	800cb76 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800cb6c:	bf00      	nop
 800cb6e:	e002      	b.n	800cb76 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800cb70:	58024400 	.word	0x58024400
      break;
 800cb74:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cb76:	7dfb      	ldrb	r3, [r7, #23]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d10a      	bne.n	800cb92 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800cb7c:	4b99      	ldr	r3, [pc, #612]	; (800cde4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800cb7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb80:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800cb8a:	4996      	ldr	r1, [pc, #600]	; (800cde4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800cb8c:	4313      	orrs	r3, r2
 800cb8e:	658b      	str	r3, [r1, #88]	; 0x58
 800cb90:	e001      	b.n	800cb96 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb92:	7dfb      	ldrb	r3, [r7, #23]
 800cb94:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d032      	beq.n	800cc08 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cba6:	2b30      	cmp	r3, #48	; 0x30
 800cba8:	d01c      	beq.n	800cbe4 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800cbaa:	2b30      	cmp	r3, #48	; 0x30
 800cbac:	d817      	bhi.n	800cbde <HAL_RCCEx_PeriphCLKConfig+0x342>
 800cbae:	2b20      	cmp	r3, #32
 800cbb0:	d00c      	beq.n	800cbcc <HAL_RCCEx_PeriphCLKConfig+0x330>
 800cbb2:	2b20      	cmp	r3, #32
 800cbb4:	d813      	bhi.n	800cbde <HAL_RCCEx_PeriphCLKConfig+0x342>
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d016      	beq.n	800cbe8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800cbba:	2b10      	cmp	r3, #16
 800cbbc:	d10f      	bne.n	800cbde <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cbbe:	4b89      	ldr	r3, [pc, #548]	; (800cde4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800cbc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbc2:	4a88      	ldr	r2, [pc, #544]	; (800cde4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800cbc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cbc8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800cbca:	e00e      	b.n	800cbea <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	3304      	adds	r3, #4
 800cbd0:	2102      	movs	r1, #2
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	f001 f866 	bl	800dca4 <RCCEx_PLL2_Config>
 800cbd8:	4603      	mov	r3, r0
 800cbda:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800cbdc:	e005      	b.n	800cbea <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800cbde:	2301      	movs	r3, #1
 800cbe0:	75fb      	strb	r3, [r7, #23]
      break;
 800cbe2:	e002      	b.n	800cbea <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800cbe4:	bf00      	nop
 800cbe6:	e000      	b.n	800cbea <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800cbe8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cbea:	7dfb      	ldrb	r3, [r7, #23]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d109      	bne.n	800cc04 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800cbf0:	4b7c      	ldr	r3, [pc, #496]	; (800cde4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800cbf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cbf4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cbfc:	4979      	ldr	r1, [pc, #484]	; (800cde4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800cbfe:	4313      	orrs	r3, r2
 800cc00:	64cb      	str	r3, [r1, #76]	; 0x4c
 800cc02:	e001      	b.n	800cc08 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc04:	7dfb      	ldrb	r3, [r7, #23]
 800cc06:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d047      	beq.n	800cca4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cc18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cc1c:	d030      	beq.n	800cc80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800cc1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cc22:	d82a      	bhi.n	800cc7a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800cc24:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cc28:	d02c      	beq.n	800cc84 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800cc2a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cc2e:	d824      	bhi.n	800cc7a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800cc30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cc34:	d018      	beq.n	800cc68 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800cc36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cc3a:	d81e      	bhi.n	800cc7a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d003      	beq.n	800cc48 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800cc40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cc44:	d007      	beq.n	800cc56 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800cc46:	e018      	b.n	800cc7a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cc48:	4b66      	ldr	r3, [pc, #408]	; (800cde4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800cc4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc4c:	4a65      	ldr	r2, [pc, #404]	; (800cde4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800cc4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cc52:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800cc54:	e017      	b.n	800cc86 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	3304      	adds	r3, #4
 800cc5a:	2100      	movs	r1, #0
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	f001 f821 	bl	800dca4 <RCCEx_PLL2_Config>
 800cc62:	4603      	mov	r3, r0
 800cc64:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800cc66:	e00e      	b.n	800cc86 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	3324      	adds	r3, #36	; 0x24
 800cc6c:	2100      	movs	r1, #0
 800cc6e:	4618      	mov	r0, r3
 800cc70:	f001 f8ca 	bl	800de08 <RCCEx_PLL3_Config>
 800cc74:	4603      	mov	r3, r0
 800cc76:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800cc78:	e005      	b.n	800cc86 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cc7a:	2301      	movs	r3, #1
 800cc7c:	75fb      	strb	r3, [r7, #23]
      break;
 800cc7e:	e002      	b.n	800cc86 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800cc80:	bf00      	nop
 800cc82:	e000      	b.n	800cc86 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800cc84:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cc86:	7dfb      	ldrb	r3, [r7, #23]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d109      	bne.n	800cca0 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800cc8c:	4b55      	ldr	r3, [pc, #340]	; (800cde4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800cc8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc90:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cc98:	4952      	ldr	r1, [pc, #328]	; (800cde4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800cc9a:	4313      	orrs	r3, r2
 800cc9c:	650b      	str	r3, [r1, #80]	; 0x50
 800cc9e:	e001      	b.n	800cca4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cca0:	7dfb      	ldrb	r3, [r7, #23]
 800cca2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d049      	beq.n	800cd44 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ccb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ccb8:	d02e      	beq.n	800cd18 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800ccba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ccbe:	d828      	bhi.n	800cd12 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800ccc0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ccc4:	d02a      	beq.n	800cd1c <HAL_RCCEx_PeriphCLKConfig+0x480>
 800ccc6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ccca:	d822      	bhi.n	800cd12 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800cccc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ccd0:	d026      	beq.n	800cd20 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800ccd2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ccd6:	d81c      	bhi.n	800cd12 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800ccd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ccdc:	d010      	beq.n	800cd00 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800ccde:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cce2:	d816      	bhi.n	800cd12 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d01d      	beq.n	800cd24 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800cce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ccec:	d111      	bne.n	800cd12 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	3304      	adds	r3, #4
 800ccf2:	2101      	movs	r1, #1
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	f000 ffd5 	bl	800dca4 <RCCEx_PLL2_Config>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800ccfe:	e012      	b.n	800cd26 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	3324      	adds	r3, #36	; 0x24
 800cd04:	2101      	movs	r1, #1
 800cd06:	4618      	mov	r0, r3
 800cd08:	f001 f87e 	bl	800de08 <RCCEx_PLL3_Config>
 800cd0c:	4603      	mov	r3, r0
 800cd0e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800cd10:	e009      	b.n	800cd26 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cd12:	2301      	movs	r3, #1
 800cd14:	75fb      	strb	r3, [r7, #23]
      break;
 800cd16:	e006      	b.n	800cd26 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800cd18:	bf00      	nop
 800cd1a:	e004      	b.n	800cd26 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800cd1c:	bf00      	nop
 800cd1e:	e002      	b.n	800cd26 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800cd20:	bf00      	nop
 800cd22:	e000      	b.n	800cd26 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800cd24:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cd26:	7dfb      	ldrb	r3, [r7, #23]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d109      	bne.n	800cd40 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800cd2c:	4b2d      	ldr	r3, [pc, #180]	; (800cde4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800cd2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd30:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd38:	492a      	ldr	r1, [pc, #168]	; (800cde4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800cd3a:	4313      	orrs	r3, r2
 800cd3c:	650b      	str	r3, [r1, #80]	; 0x50
 800cd3e:	e001      	b.n	800cd44 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd40:	7dfb      	ldrb	r3, [r7, #23]
 800cd42:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d04d      	beq.n	800cdec <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800cd56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cd5a:	d02e      	beq.n	800cdba <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800cd5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cd60:	d828      	bhi.n	800cdb4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800cd62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd66:	d02a      	beq.n	800cdbe <HAL_RCCEx_PeriphCLKConfig+0x522>
 800cd68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd6c:	d822      	bhi.n	800cdb4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800cd6e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cd72:	d026      	beq.n	800cdc2 <HAL_RCCEx_PeriphCLKConfig+0x526>
 800cd74:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cd78:	d81c      	bhi.n	800cdb4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800cd7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd7e:	d010      	beq.n	800cda2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800cd80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd84:	d816      	bhi.n	800cdb4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d01d      	beq.n	800cdc6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800cd8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cd8e:	d111      	bne.n	800cdb4 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	3304      	adds	r3, #4
 800cd94:	2101      	movs	r1, #1
 800cd96:	4618      	mov	r0, r3
 800cd98:	f000 ff84 	bl	800dca4 <RCCEx_PLL2_Config>
 800cd9c:	4603      	mov	r3, r0
 800cd9e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800cda0:	e012      	b.n	800cdc8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	3324      	adds	r3, #36	; 0x24
 800cda6:	2101      	movs	r1, #1
 800cda8:	4618      	mov	r0, r3
 800cdaa:	f001 f82d 	bl	800de08 <RCCEx_PLL3_Config>
 800cdae:	4603      	mov	r3, r0
 800cdb0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800cdb2:	e009      	b.n	800cdc8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800cdb4:	2301      	movs	r3, #1
 800cdb6:	75fb      	strb	r3, [r7, #23]
      break;
 800cdb8:	e006      	b.n	800cdc8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800cdba:	bf00      	nop
 800cdbc:	e004      	b.n	800cdc8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800cdbe:	bf00      	nop
 800cdc0:	e002      	b.n	800cdc8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800cdc2:	bf00      	nop
 800cdc4:	e000      	b.n	800cdc8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800cdc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cdc8:	7dfb      	ldrb	r3, [r7, #23]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d10c      	bne.n	800cde8 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800cdce:	4b05      	ldr	r3, [pc, #20]	; (800cde4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800cdd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cdd2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800cddc:	4901      	ldr	r1, [pc, #4]	; (800cde4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800cdde:	4313      	orrs	r3, r2
 800cde0:	658b      	str	r3, [r1, #88]	; 0x58
 800cde2:	e003      	b.n	800cdec <HAL_RCCEx_PeriphCLKConfig+0x550>
 800cde4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cde8:	7dfb      	ldrb	r3, [r7, #23]
 800cdea:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d02f      	beq.n	800ce58 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cdfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce00:	d00e      	beq.n	800ce20 <HAL_RCCEx_PeriphCLKConfig+0x584>
 800ce02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce06:	d814      	bhi.n	800ce32 <HAL_RCCEx_PeriphCLKConfig+0x596>
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d015      	beq.n	800ce38 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800ce0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ce10:	d10f      	bne.n	800ce32 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ce12:	4baf      	ldr	r3, [pc, #700]	; (800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ce14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce16:	4aae      	ldr	r2, [pc, #696]	; (800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ce18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ce1c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800ce1e:	e00c      	b.n	800ce3a <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	3304      	adds	r3, #4
 800ce24:	2101      	movs	r1, #1
 800ce26:	4618      	mov	r0, r3
 800ce28:	f000 ff3c 	bl	800dca4 <RCCEx_PLL2_Config>
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800ce30:	e003      	b.n	800ce3a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ce32:	2301      	movs	r3, #1
 800ce34:	75fb      	strb	r3, [r7, #23]
      break;
 800ce36:	e000      	b.n	800ce3a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800ce38:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ce3a:	7dfb      	ldrb	r3, [r7, #23]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d109      	bne.n	800ce54 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ce40:	4ba3      	ldr	r3, [pc, #652]	; (800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ce42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce44:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce4c:	49a0      	ldr	r1, [pc, #640]	; (800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ce4e:	4313      	orrs	r3, r2
 800ce50:	650b      	str	r3, [r1, #80]	; 0x50
 800ce52:	e001      	b.n	800ce58 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce54:	7dfb      	ldrb	r3, [r7, #23]
 800ce56:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d032      	beq.n	800ceca <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce68:	2b03      	cmp	r3, #3
 800ce6a:	d81b      	bhi.n	800cea4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800ce6c:	a201      	add	r2, pc, #4	; (adr r2, 800ce74 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800ce6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce72:	bf00      	nop
 800ce74:	0800ceab 	.word	0x0800ceab
 800ce78:	0800ce85 	.word	0x0800ce85
 800ce7c:	0800ce93 	.word	0x0800ce93
 800ce80:	0800ceab 	.word	0x0800ceab
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ce84:	4b92      	ldr	r3, [pc, #584]	; (800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ce86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce88:	4a91      	ldr	r2, [pc, #580]	; (800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ce8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ce8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800ce90:	e00c      	b.n	800ceac <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	3304      	adds	r3, #4
 800ce96:	2102      	movs	r1, #2
 800ce98:	4618      	mov	r0, r3
 800ce9a:	f000 ff03 	bl	800dca4 <RCCEx_PLL2_Config>
 800ce9e:	4603      	mov	r3, r0
 800cea0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800cea2:	e003      	b.n	800ceac <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800cea4:	2301      	movs	r3, #1
 800cea6:	75fb      	strb	r3, [r7, #23]
      break;
 800cea8:	e000      	b.n	800ceac <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800ceaa:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ceac:	7dfb      	ldrb	r3, [r7, #23]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d109      	bne.n	800cec6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800ceb2:	4b87      	ldr	r3, [pc, #540]	; (800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ceb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ceb6:	f023 0203 	bic.w	r2, r3, #3
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cebe:	4984      	ldr	r1, [pc, #528]	; (800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800cec0:	4313      	orrs	r3, r2
 800cec2:	64cb      	str	r3, [r1, #76]	; 0x4c
 800cec4:	e001      	b.n	800ceca <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cec6:	7dfb      	ldrb	r3, [r7, #23]
 800cec8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	f000 8086 	beq.w	800cfe4 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ced8:	4b7e      	ldr	r3, [pc, #504]	; (800d0d4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	4a7d      	ldr	r2, [pc, #500]	; (800d0d4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800cede:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cee2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800cee4:	f7fa f996 	bl	8007214 <HAL_GetTick>
 800cee8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ceea:	e009      	b.n	800cf00 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ceec:	f7fa f992 	bl	8007214 <HAL_GetTick>
 800cef0:	4602      	mov	r2, r0
 800cef2:	693b      	ldr	r3, [r7, #16]
 800cef4:	1ad3      	subs	r3, r2, r3
 800cef6:	2b64      	cmp	r3, #100	; 0x64
 800cef8:	d902      	bls.n	800cf00 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800cefa:	2303      	movs	r3, #3
 800cefc:	75fb      	strb	r3, [r7, #23]
        break;
 800cefe:	e005      	b.n	800cf0c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cf00:	4b74      	ldr	r3, [pc, #464]	; (800d0d4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d0ef      	beq.n	800ceec <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800cf0c:	7dfb      	ldrb	r3, [r7, #23]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d166      	bne.n	800cfe0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800cf12:	4b6f      	ldr	r3, [pc, #444]	; (800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800cf14:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800cf1c:	4053      	eors	r3, r2
 800cf1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d013      	beq.n	800cf4e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800cf26:	4b6a      	ldr	r3, [pc, #424]	; (800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800cf28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cf2e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800cf30:	4b67      	ldr	r3, [pc, #412]	; (800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800cf32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf34:	4a66      	ldr	r2, [pc, #408]	; (800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800cf36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cf3a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800cf3c:	4b64      	ldr	r3, [pc, #400]	; (800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800cf3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf40:	4a63      	ldr	r2, [pc, #396]	; (800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800cf42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cf46:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800cf48:	4a61      	ldr	r2, [pc, #388]	; (800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800cf54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf58:	d115      	bne.n	800cf86 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cf5a:	f7fa f95b 	bl	8007214 <HAL_GetTick>
 800cf5e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cf60:	e00b      	b.n	800cf7a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cf62:	f7fa f957 	bl	8007214 <HAL_GetTick>
 800cf66:	4602      	mov	r2, r0
 800cf68:	693b      	ldr	r3, [r7, #16]
 800cf6a:	1ad3      	subs	r3, r2, r3
 800cf6c:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf70:	4293      	cmp	r3, r2
 800cf72:	d902      	bls.n	800cf7a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800cf74:	2303      	movs	r3, #3
 800cf76:	75fb      	strb	r3, [r7, #23]
            break;
 800cf78:	e005      	b.n	800cf86 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cf7a:	4b55      	ldr	r3, [pc, #340]	; (800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800cf7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf7e:	f003 0302 	and.w	r3, r3, #2
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d0ed      	beq.n	800cf62 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800cf86:	7dfb      	ldrb	r3, [r7, #23]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d126      	bne.n	800cfda <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800cf92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cf96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cf9a:	d10d      	bne.n	800cfb8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800cf9c:	4b4c      	ldr	r3, [pc, #304]	; (800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800cf9e:	691b      	ldr	r3, [r3, #16]
 800cfa0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800cfaa:	0919      	lsrs	r1, r3, #4
 800cfac:	4b4a      	ldr	r3, [pc, #296]	; (800d0d8 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800cfae:	400b      	ands	r3, r1
 800cfb0:	4947      	ldr	r1, [pc, #284]	; (800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800cfb2:	4313      	orrs	r3, r2
 800cfb4:	610b      	str	r3, [r1, #16]
 800cfb6:	e005      	b.n	800cfc4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800cfb8:	4b45      	ldr	r3, [pc, #276]	; (800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800cfba:	691b      	ldr	r3, [r3, #16]
 800cfbc:	4a44      	ldr	r2, [pc, #272]	; (800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800cfbe:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800cfc2:	6113      	str	r3, [r2, #16]
 800cfc4:	4b42      	ldr	r3, [pc, #264]	; (800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800cfc6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800cfce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cfd2:	493f      	ldr	r1, [pc, #252]	; (800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800cfd4:	4313      	orrs	r3, r2
 800cfd6:	670b      	str	r3, [r1, #112]	; 0x70
 800cfd8:	e004      	b.n	800cfe4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800cfda:	7dfb      	ldrb	r3, [r7, #23]
 800cfdc:	75bb      	strb	r3, [r7, #22]
 800cfde:	e001      	b.n	800cfe4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cfe0:	7dfb      	ldrb	r3, [r7, #23]
 800cfe2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	f003 0301 	and.w	r3, r3, #1
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	f000 8085 	beq.w	800d0fc <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cff6:	2b28      	cmp	r3, #40	; 0x28
 800cff8:	d866      	bhi.n	800d0c8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800cffa:	a201      	add	r2, pc, #4	; (adr r2, 800d000 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800cffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d000:	0800d0dd 	.word	0x0800d0dd
 800d004:	0800d0c9 	.word	0x0800d0c9
 800d008:	0800d0c9 	.word	0x0800d0c9
 800d00c:	0800d0c9 	.word	0x0800d0c9
 800d010:	0800d0c9 	.word	0x0800d0c9
 800d014:	0800d0c9 	.word	0x0800d0c9
 800d018:	0800d0c9 	.word	0x0800d0c9
 800d01c:	0800d0c9 	.word	0x0800d0c9
 800d020:	0800d0a5 	.word	0x0800d0a5
 800d024:	0800d0c9 	.word	0x0800d0c9
 800d028:	0800d0c9 	.word	0x0800d0c9
 800d02c:	0800d0c9 	.word	0x0800d0c9
 800d030:	0800d0c9 	.word	0x0800d0c9
 800d034:	0800d0c9 	.word	0x0800d0c9
 800d038:	0800d0c9 	.word	0x0800d0c9
 800d03c:	0800d0c9 	.word	0x0800d0c9
 800d040:	0800d0b7 	.word	0x0800d0b7
 800d044:	0800d0c9 	.word	0x0800d0c9
 800d048:	0800d0c9 	.word	0x0800d0c9
 800d04c:	0800d0c9 	.word	0x0800d0c9
 800d050:	0800d0c9 	.word	0x0800d0c9
 800d054:	0800d0c9 	.word	0x0800d0c9
 800d058:	0800d0c9 	.word	0x0800d0c9
 800d05c:	0800d0c9 	.word	0x0800d0c9
 800d060:	0800d0dd 	.word	0x0800d0dd
 800d064:	0800d0c9 	.word	0x0800d0c9
 800d068:	0800d0c9 	.word	0x0800d0c9
 800d06c:	0800d0c9 	.word	0x0800d0c9
 800d070:	0800d0c9 	.word	0x0800d0c9
 800d074:	0800d0c9 	.word	0x0800d0c9
 800d078:	0800d0c9 	.word	0x0800d0c9
 800d07c:	0800d0c9 	.word	0x0800d0c9
 800d080:	0800d0dd 	.word	0x0800d0dd
 800d084:	0800d0c9 	.word	0x0800d0c9
 800d088:	0800d0c9 	.word	0x0800d0c9
 800d08c:	0800d0c9 	.word	0x0800d0c9
 800d090:	0800d0c9 	.word	0x0800d0c9
 800d094:	0800d0c9 	.word	0x0800d0c9
 800d098:	0800d0c9 	.word	0x0800d0c9
 800d09c:	0800d0c9 	.word	0x0800d0c9
 800d0a0:	0800d0dd 	.word	0x0800d0dd
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	3304      	adds	r3, #4
 800d0a8:	2101      	movs	r1, #1
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	f000 fdfa 	bl	800dca4 <RCCEx_PLL2_Config>
 800d0b0:	4603      	mov	r3, r0
 800d0b2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800d0b4:	e013      	b.n	800d0de <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	3324      	adds	r3, #36	; 0x24
 800d0ba:	2101      	movs	r1, #1
 800d0bc:	4618      	mov	r0, r3
 800d0be:	f000 fea3 	bl	800de08 <RCCEx_PLL3_Config>
 800d0c2:	4603      	mov	r3, r0
 800d0c4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800d0c6:	e00a      	b.n	800d0de <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d0c8:	2301      	movs	r3, #1
 800d0ca:	75fb      	strb	r3, [r7, #23]
      break;
 800d0cc:	e007      	b.n	800d0de <HAL_RCCEx_PeriphCLKConfig+0x842>
 800d0ce:	bf00      	nop
 800d0d0:	58024400 	.word	0x58024400
 800d0d4:	58024800 	.word	0x58024800
 800d0d8:	00ffffcf 	.word	0x00ffffcf
      break;
 800d0dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d0de:	7dfb      	ldrb	r3, [r7, #23]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d109      	bne.n	800d0f8 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800d0e4:	4b96      	ldr	r3, [pc, #600]	; (800d340 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800d0e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d0e8:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d0f0:	4993      	ldr	r1, [pc, #588]	; (800d340 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800d0f2:	4313      	orrs	r3, r2
 800d0f4:	654b      	str	r3, [r1, #84]	; 0x54
 800d0f6:	e001      	b.n	800d0fc <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d0f8:	7dfb      	ldrb	r3, [r7, #23]
 800d0fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	f003 0302 	and.w	r3, r3, #2
 800d104:	2b00      	cmp	r3, #0
 800d106:	d038      	beq.n	800d17a <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d10c:	2b05      	cmp	r3, #5
 800d10e:	d821      	bhi.n	800d154 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800d110:	a201      	add	r2, pc, #4	; (adr r2, 800d118 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800d112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d116:	bf00      	nop
 800d118:	0800d15b 	.word	0x0800d15b
 800d11c:	0800d131 	.word	0x0800d131
 800d120:	0800d143 	.word	0x0800d143
 800d124:	0800d15b 	.word	0x0800d15b
 800d128:	0800d15b 	.word	0x0800d15b
 800d12c:	0800d15b 	.word	0x0800d15b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	3304      	adds	r3, #4
 800d134:	2101      	movs	r1, #1
 800d136:	4618      	mov	r0, r3
 800d138:	f000 fdb4 	bl	800dca4 <RCCEx_PLL2_Config>
 800d13c:	4603      	mov	r3, r0
 800d13e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800d140:	e00c      	b.n	800d15c <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	3324      	adds	r3, #36	; 0x24
 800d146:	2101      	movs	r1, #1
 800d148:	4618      	mov	r0, r3
 800d14a:	f000 fe5d 	bl	800de08 <RCCEx_PLL3_Config>
 800d14e:	4603      	mov	r3, r0
 800d150:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800d152:	e003      	b.n	800d15c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d154:	2301      	movs	r3, #1
 800d156:	75fb      	strb	r3, [r7, #23]
      break;
 800d158:	e000      	b.n	800d15c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800d15a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d15c:	7dfb      	ldrb	r3, [r7, #23]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d109      	bne.n	800d176 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800d162:	4b77      	ldr	r3, [pc, #476]	; (800d340 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800d164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d166:	f023 0207 	bic.w	r2, r3, #7
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d16e:	4974      	ldr	r1, [pc, #464]	; (800d340 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800d170:	4313      	orrs	r3, r2
 800d172:	654b      	str	r3, [r1, #84]	; 0x54
 800d174:	e001      	b.n	800d17a <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d176:	7dfb      	ldrb	r3, [r7, #23]
 800d178:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	f003 0304 	and.w	r3, r3, #4
 800d182:	2b00      	cmp	r3, #0
 800d184:	d03a      	beq.n	800d1fc <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d18c:	2b05      	cmp	r3, #5
 800d18e:	d821      	bhi.n	800d1d4 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800d190:	a201      	add	r2, pc, #4	; (adr r2, 800d198 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800d192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d196:	bf00      	nop
 800d198:	0800d1db 	.word	0x0800d1db
 800d19c:	0800d1b1 	.word	0x0800d1b1
 800d1a0:	0800d1c3 	.word	0x0800d1c3
 800d1a4:	0800d1db 	.word	0x0800d1db
 800d1a8:	0800d1db 	.word	0x0800d1db
 800d1ac:	0800d1db 	.word	0x0800d1db
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	3304      	adds	r3, #4
 800d1b4:	2101      	movs	r1, #1
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	f000 fd74 	bl	800dca4 <RCCEx_PLL2_Config>
 800d1bc:	4603      	mov	r3, r0
 800d1be:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800d1c0:	e00c      	b.n	800d1dc <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	3324      	adds	r3, #36	; 0x24
 800d1c6:	2101      	movs	r1, #1
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	f000 fe1d 	bl	800de08 <RCCEx_PLL3_Config>
 800d1ce:	4603      	mov	r3, r0
 800d1d0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800d1d2:	e003      	b.n	800d1dc <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d1d4:	2301      	movs	r3, #1
 800d1d6:	75fb      	strb	r3, [r7, #23]
      break;
 800d1d8:	e000      	b.n	800d1dc <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800d1da:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d1dc:	7dfb      	ldrb	r3, [r7, #23]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d10a      	bne.n	800d1f8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d1e2:	4b57      	ldr	r3, [pc, #348]	; (800d340 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800d1e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1e6:	f023 0207 	bic.w	r2, r3, #7
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1f0:	4953      	ldr	r1, [pc, #332]	; (800d340 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800d1f2:	4313      	orrs	r3, r2
 800d1f4:	658b      	str	r3, [r1, #88]	; 0x58
 800d1f6:	e001      	b.n	800d1fc <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d1f8:	7dfb      	ldrb	r3, [r7, #23]
 800d1fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	f003 0320 	and.w	r3, r3, #32
 800d204:	2b00      	cmp	r3, #0
 800d206:	d04b      	beq.n	800d2a0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d20e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d212:	d02e      	beq.n	800d272 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800d214:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d218:	d828      	bhi.n	800d26c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800d21a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d21e:	d02a      	beq.n	800d276 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800d220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d224:	d822      	bhi.n	800d26c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800d226:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d22a:	d026      	beq.n	800d27a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800d22c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d230:	d81c      	bhi.n	800d26c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800d232:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d236:	d010      	beq.n	800d25a <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800d238:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d23c:	d816      	bhi.n	800d26c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d01d      	beq.n	800d27e <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800d242:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d246:	d111      	bne.n	800d26c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	3304      	adds	r3, #4
 800d24c:	2100      	movs	r1, #0
 800d24e:	4618      	mov	r0, r3
 800d250:	f000 fd28 	bl	800dca4 <RCCEx_PLL2_Config>
 800d254:	4603      	mov	r3, r0
 800d256:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800d258:	e012      	b.n	800d280 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	3324      	adds	r3, #36	; 0x24
 800d25e:	2102      	movs	r1, #2
 800d260:	4618      	mov	r0, r3
 800d262:	f000 fdd1 	bl	800de08 <RCCEx_PLL3_Config>
 800d266:	4603      	mov	r3, r0
 800d268:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800d26a:	e009      	b.n	800d280 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d26c:	2301      	movs	r3, #1
 800d26e:	75fb      	strb	r3, [r7, #23]
      break;
 800d270:	e006      	b.n	800d280 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800d272:	bf00      	nop
 800d274:	e004      	b.n	800d280 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800d276:	bf00      	nop
 800d278:	e002      	b.n	800d280 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800d27a:	bf00      	nop
 800d27c:	e000      	b.n	800d280 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800d27e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d280:	7dfb      	ldrb	r3, [r7, #23]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d10a      	bne.n	800d29c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d286:	4b2e      	ldr	r3, [pc, #184]	; (800d340 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800d288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d28a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d294:	492a      	ldr	r1, [pc, #168]	; (800d340 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800d296:	4313      	orrs	r3, r2
 800d298:	654b      	str	r3, [r1, #84]	; 0x54
 800d29a:	e001      	b.n	800d2a0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d29c:	7dfb      	ldrb	r3, [r7, #23]
 800d29e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d04d      	beq.n	800d348 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d2b2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800d2b6:	d02e      	beq.n	800d316 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800d2b8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800d2bc:	d828      	bhi.n	800d310 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800d2be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d2c2:	d02a      	beq.n	800d31a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800d2c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d2c8:	d822      	bhi.n	800d310 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800d2ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d2ce:	d026      	beq.n	800d31e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800d2d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d2d4:	d81c      	bhi.n	800d310 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800d2d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d2da:	d010      	beq.n	800d2fe <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800d2dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d2e0:	d816      	bhi.n	800d310 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d01d      	beq.n	800d322 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800d2e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d2ea:	d111      	bne.n	800d310 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	3304      	adds	r3, #4
 800d2f0:	2100      	movs	r1, #0
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	f000 fcd6 	bl	800dca4 <RCCEx_PLL2_Config>
 800d2f8:	4603      	mov	r3, r0
 800d2fa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800d2fc:	e012      	b.n	800d324 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	3324      	adds	r3, #36	; 0x24
 800d302:	2102      	movs	r1, #2
 800d304:	4618      	mov	r0, r3
 800d306:	f000 fd7f 	bl	800de08 <RCCEx_PLL3_Config>
 800d30a:	4603      	mov	r3, r0
 800d30c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800d30e:	e009      	b.n	800d324 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d310:	2301      	movs	r3, #1
 800d312:	75fb      	strb	r3, [r7, #23]
      break;
 800d314:	e006      	b.n	800d324 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800d316:	bf00      	nop
 800d318:	e004      	b.n	800d324 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800d31a:	bf00      	nop
 800d31c:	e002      	b.n	800d324 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800d31e:	bf00      	nop
 800d320:	e000      	b.n	800d324 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800d322:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d324:	7dfb      	ldrb	r3, [r7, #23]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d10c      	bne.n	800d344 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d32a:	4b05      	ldr	r3, [pc, #20]	; (800d340 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800d32c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d32e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d338:	4901      	ldr	r1, [pc, #4]	; (800d340 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800d33a:	4313      	orrs	r3, r2
 800d33c:	658b      	str	r3, [r1, #88]	; 0x58
 800d33e:	e003      	b.n	800d348 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800d340:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d344:	7dfb      	ldrb	r3, [r7, #23]
 800d346:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d350:	2b00      	cmp	r3, #0
 800d352:	d04b      	beq.n	800d3ec <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d35a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800d35e:	d02e      	beq.n	800d3be <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800d360:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800d364:	d828      	bhi.n	800d3b8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800d366:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d36a:	d02a      	beq.n	800d3c2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800d36c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d370:	d822      	bhi.n	800d3b8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800d372:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800d376:	d026      	beq.n	800d3c6 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800d378:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800d37c:	d81c      	bhi.n	800d3b8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800d37e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d382:	d010      	beq.n	800d3a6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800d384:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d388:	d816      	bhi.n	800d3b8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d01d      	beq.n	800d3ca <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800d38e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d392:	d111      	bne.n	800d3b8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	3304      	adds	r3, #4
 800d398:	2100      	movs	r1, #0
 800d39a:	4618      	mov	r0, r3
 800d39c:	f000 fc82 	bl	800dca4 <RCCEx_PLL2_Config>
 800d3a0:	4603      	mov	r3, r0
 800d3a2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800d3a4:	e012      	b.n	800d3cc <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	3324      	adds	r3, #36	; 0x24
 800d3aa:	2102      	movs	r1, #2
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	f000 fd2b 	bl	800de08 <RCCEx_PLL3_Config>
 800d3b2:	4603      	mov	r3, r0
 800d3b4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800d3b6:	e009      	b.n	800d3cc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d3b8:	2301      	movs	r3, #1
 800d3ba:	75fb      	strb	r3, [r7, #23]
      break;
 800d3bc:	e006      	b.n	800d3cc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800d3be:	bf00      	nop
 800d3c0:	e004      	b.n	800d3cc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800d3c2:	bf00      	nop
 800d3c4:	e002      	b.n	800d3cc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800d3c6:	bf00      	nop
 800d3c8:	e000      	b.n	800d3cc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800d3ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d3cc:	7dfb      	ldrb	r3, [r7, #23]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d10a      	bne.n	800d3e8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800d3d2:	4b9d      	ldr	r3, [pc, #628]	; (800d648 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d3d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d3d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d3e0:	4999      	ldr	r1, [pc, #612]	; (800d648 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d3e2:	4313      	orrs	r3, r2
 800d3e4:	658b      	str	r3, [r1, #88]	; 0x58
 800d3e6:	e001      	b.n	800d3ec <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d3e8:	7dfb      	ldrb	r3, [r7, #23]
 800d3ea:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	f003 0308 	and.w	r3, r3, #8
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d01a      	beq.n	800d42e <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d3fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d402:	d10a      	bne.n	800d41a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	3324      	adds	r3, #36	; 0x24
 800d408:	2102      	movs	r1, #2
 800d40a:	4618      	mov	r0, r3
 800d40c:	f000 fcfc 	bl	800de08 <RCCEx_PLL3_Config>
 800d410:	4603      	mov	r3, r0
 800d412:	2b00      	cmp	r3, #0
 800d414:	d001      	beq.n	800d41a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800d416:	2301      	movs	r3, #1
 800d418:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800d41a:	4b8b      	ldr	r3, [pc, #556]	; (800d648 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d41c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d41e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d428:	4987      	ldr	r1, [pc, #540]	; (800d648 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d42a:	4313      	orrs	r3, r2
 800d42c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	f003 0310 	and.w	r3, r3, #16
 800d436:	2b00      	cmp	r3, #0
 800d438:	d01a      	beq.n	800d470 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d440:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d444:	d10a      	bne.n	800d45c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	3324      	adds	r3, #36	; 0x24
 800d44a:	2102      	movs	r1, #2
 800d44c:	4618      	mov	r0, r3
 800d44e:	f000 fcdb 	bl	800de08 <RCCEx_PLL3_Config>
 800d452:	4603      	mov	r3, r0
 800d454:	2b00      	cmp	r3, #0
 800d456:	d001      	beq.n	800d45c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800d458:	2301      	movs	r3, #1
 800d45a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d45c:	4b7a      	ldr	r3, [pc, #488]	; (800d648 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d45e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d460:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d46a:	4977      	ldr	r1, [pc, #476]	; (800d648 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d46c:	4313      	orrs	r3, r2
 800d46e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d034      	beq.n	800d4e6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d482:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d486:	d01d      	beq.n	800d4c4 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800d488:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d48c:	d817      	bhi.n	800d4be <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d003      	beq.n	800d49a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800d492:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d496:	d009      	beq.n	800d4ac <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800d498:	e011      	b.n	800d4be <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	3304      	adds	r3, #4
 800d49e:	2100      	movs	r1, #0
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	f000 fbff 	bl	800dca4 <RCCEx_PLL2_Config>
 800d4a6:	4603      	mov	r3, r0
 800d4a8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800d4aa:	e00c      	b.n	800d4c6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	3324      	adds	r3, #36	; 0x24
 800d4b0:	2102      	movs	r1, #2
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	f000 fca8 	bl	800de08 <RCCEx_PLL3_Config>
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800d4bc:	e003      	b.n	800d4c6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d4be:	2301      	movs	r3, #1
 800d4c0:	75fb      	strb	r3, [r7, #23]
      break;
 800d4c2:	e000      	b.n	800d4c6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800d4c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d4c6:	7dfb      	ldrb	r3, [r7, #23]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d10a      	bne.n	800d4e2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d4cc:	4b5e      	ldr	r3, [pc, #376]	; (800d648 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d4ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d4d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d4da:	495b      	ldr	r1, [pc, #364]	; (800d648 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d4dc:	4313      	orrs	r3, r2
 800d4de:	658b      	str	r3, [r1, #88]	; 0x58
 800d4e0:	e001      	b.n	800d4e6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d4e2:	7dfb      	ldrb	r3, [r7, #23]
 800d4e4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d033      	beq.n	800d55a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d4f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d4fc:	d01c      	beq.n	800d538 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800d4fe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d502:	d816      	bhi.n	800d532 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800d504:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d508:	d003      	beq.n	800d512 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800d50a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d50e:	d007      	beq.n	800d520 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800d510:	e00f      	b.n	800d532 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d512:	4b4d      	ldr	r3, [pc, #308]	; (800d648 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d516:	4a4c      	ldr	r2, [pc, #304]	; (800d648 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d518:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d51c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800d51e:	e00c      	b.n	800d53a <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	3324      	adds	r3, #36	; 0x24
 800d524:	2101      	movs	r1, #1
 800d526:	4618      	mov	r0, r3
 800d528:	f000 fc6e 	bl	800de08 <RCCEx_PLL3_Config>
 800d52c:	4603      	mov	r3, r0
 800d52e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800d530:	e003      	b.n	800d53a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d532:	2301      	movs	r3, #1
 800d534:	75fb      	strb	r3, [r7, #23]
      break;
 800d536:	e000      	b.n	800d53a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800d538:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d53a:	7dfb      	ldrb	r3, [r7, #23]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d10a      	bne.n	800d556 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d540:	4b41      	ldr	r3, [pc, #260]	; (800d648 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d544:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d54e:	493e      	ldr	r1, [pc, #248]	; (800d648 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d550:	4313      	orrs	r3, r2
 800d552:	654b      	str	r3, [r1, #84]	; 0x54
 800d554:	e001      	b.n	800d55a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d556:	7dfb      	ldrb	r3, [r7, #23]
 800d558:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d562:	2b00      	cmp	r3, #0
 800d564:	d029      	beq.n	800d5ba <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d003      	beq.n	800d576 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800d56e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d572:	d007      	beq.n	800d584 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800d574:	e00f      	b.n	800d596 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d576:	4b34      	ldr	r3, [pc, #208]	; (800d648 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d57a:	4a33      	ldr	r2, [pc, #204]	; (800d648 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d57c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d580:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800d582:	e00b      	b.n	800d59c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	3304      	adds	r3, #4
 800d588:	2102      	movs	r1, #2
 800d58a:	4618      	mov	r0, r3
 800d58c:	f000 fb8a 	bl	800dca4 <RCCEx_PLL2_Config>
 800d590:	4603      	mov	r3, r0
 800d592:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800d594:	e002      	b.n	800d59c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800d596:	2301      	movs	r3, #1
 800d598:	75fb      	strb	r3, [r7, #23]
      break;
 800d59a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d59c:	7dfb      	ldrb	r3, [r7, #23]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d109      	bne.n	800d5b6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800d5a2:	4b29      	ldr	r3, [pc, #164]	; (800d648 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d5a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d5a6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d5ae:	4926      	ldr	r1, [pc, #152]	; (800d648 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d5b0:	4313      	orrs	r3, r2
 800d5b2:	64cb      	str	r3, [r1, #76]	; 0x4c
 800d5b4:	e001      	b.n	800d5ba <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d5b6:	7dfb      	ldrb	r3, [r7, #23]
 800d5b8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d00a      	beq.n	800d5dc <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	3324      	adds	r3, #36	; 0x24
 800d5ca:	2102      	movs	r1, #2
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	f000 fc1b 	bl	800de08 <RCCEx_PLL3_Config>
 800d5d2:	4603      	mov	r3, r0
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d001      	beq.n	800d5dc <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800d5d8:	2301      	movs	r3, #1
 800d5da:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d033      	beq.n	800d650 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d5ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d5f0:	d017      	beq.n	800d622 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800d5f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d5f6:	d811      	bhi.n	800d61c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800d5f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d5fc:	d013      	beq.n	800d626 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800d5fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d602:	d80b      	bhi.n	800d61c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800d604:	2b00      	cmp	r3, #0
 800d606:	d010      	beq.n	800d62a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800d608:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d60c:	d106      	bne.n	800d61c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d60e:	4b0e      	ldr	r3, [pc, #56]	; (800d648 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d612:	4a0d      	ldr	r2, [pc, #52]	; (800d648 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d618:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800d61a:	e007      	b.n	800d62c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d61c:	2301      	movs	r3, #1
 800d61e:	75fb      	strb	r3, [r7, #23]
      break;
 800d620:	e004      	b.n	800d62c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800d622:	bf00      	nop
 800d624:	e002      	b.n	800d62c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800d626:	bf00      	nop
 800d628:	e000      	b.n	800d62c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800d62a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d62c:	7dfb      	ldrb	r3, [r7, #23]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d10c      	bne.n	800d64c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d632:	4b05      	ldr	r3, [pc, #20]	; (800d648 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d636:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d63e:	4902      	ldr	r1, [pc, #8]	; (800d648 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d640:	4313      	orrs	r3, r2
 800d642:	654b      	str	r3, [r1, #84]	; 0x54
 800d644:	e004      	b.n	800d650 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800d646:	bf00      	nop
 800d648:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d64c:	7dfb      	ldrb	r3, [r7, #23]
 800d64e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d008      	beq.n	800d66e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800d65c:	4b31      	ldr	r3, [pc, #196]	; (800d724 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d65e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d660:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d668:	492e      	ldr	r1, [pc, #184]	; (800d724 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d66a:	4313      	orrs	r3, r2
 800d66c:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d676:	2b00      	cmp	r3, #0
 800d678:	d009      	beq.n	800d68e <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800d67a:	4b2a      	ldr	r3, [pc, #168]	; (800d724 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d67c:	691b      	ldr	r3, [r3, #16]
 800d67e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d688:	4926      	ldr	r1, [pc, #152]	; (800d724 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d68a:	4313      	orrs	r3, r2
 800d68c:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d696:	2b00      	cmp	r3, #0
 800d698:	d008      	beq.n	800d6ac <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800d69a:	4b22      	ldr	r3, [pc, #136]	; (800d724 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d69c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d69e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d6a6:	491f      	ldr	r1, [pc, #124]	; (800d724 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d6a8:	4313      	orrs	r3, r2
 800d6aa:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d00d      	beq.n	800d6d4 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800d6b8:	4b1a      	ldr	r3, [pc, #104]	; (800d724 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d6ba:	691b      	ldr	r3, [r3, #16]
 800d6bc:	4a19      	ldr	r2, [pc, #100]	; (800d724 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d6be:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d6c2:	6113      	str	r3, [r2, #16]
 800d6c4:	4b17      	ldr	r3, [pc, #92]	; (800d724 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d6c6:	691a      	ldr	r2, [r3, #16]
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800d6ce:	4915      	ldr	r1, [pc, #84]	; (800d724 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d6d0:	4313      	orrs	r3, r2
 800d6d2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	da08      	bge.n	800d6ee <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800d6dc:	4b11      	ldr	r3, [pc, #68]	; (800d724 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d6de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d6e0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d6e8:	490e      	ldr	r1, [pc, #56]	; (800d724 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d6ea:	4313      	orrs	r3, r2
 800d6ec:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d009      	beq.n	800d70e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800d6fa:	4b0a      	ldr	r3, [pc, #40]	; (800d724 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d6fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d708:	4906      	ldr	r1, [pc, #24]	; (800d724 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d70a:	4313      	orrs	r3, r2
 800d70c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800d70e:	7dbb      	ldrb	r3, [r7, #22]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d101      	bne.n	800d718 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800d714:	2300      	movs	r3, #0
 800d716:	e000      	b.n	800d71a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800d718:	2301      	movs	r3, #1
}
 800d71a:	4618      	mov	r0, r3
 800d71c:	3718      	adds	r7, #24
 800d71e:	46bd      	mov	sp, r7
 800d720:	bd80      	pop	{r7, pc}
 800d722:	bf00      	nop
 800d724:	58024400 	.word	0x58024400

0800d728 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800d72c:	f7ff f85a 	bl	800c7e4 <HAL_RCC_GetHCLKFreq>
 800d730:	4602      	mov	r2, r0
 800d732:	4b06      	ldr	r3, [pc, #24]	; (800d74c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d734:	6a1b      	ldr	r3, [r3, #32]
 800d736:	091b      	lsrs	r3, r3, #4
 800d738:	f003 0307 	and.w	r3, r3, #7
 800d73c:	4904      	ldr	r1, [pc, #16]	; (800d750 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d73e:	5ccb      	ldrb	r3, [r1, r3]
 800d740:	f003 031f 	and.w	r3, r3, #31
 800d744:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800d748:	4618      	mov	r0, r3
 800d74a:	bd80      	pop	{r7, pc}
 800d74c:	58024400 	.word	0x58024400
 800d750:	080145c4 	.word	0x080145c4

0800d754 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800d754:	b480      	push	{r7}
 800d756:	b089      	sub	sp, #36	; 0x24
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d75c:	4ba1      	ldr	r3, [pc, #644]	; (800d9e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d75e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d760:	f003 0303 	and.w	r3, r3, #3
 800d764:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800d766:	4b9f      	ldr	r3, [pc, #636]	; (800d9e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d76a:	0b1b      	lsrs	r3, r3, #12
 800d76c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d770:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d772:	4b9c      	ldr	r3, [pc, #624]	; (800d9e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d776:	091b      	lsrs	r3, r3, #4
 800d778:	f003 0301 	and.w	r3, r3, #1
 800d77c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800d77e:	4b99      	ldr	r3, [pc, #612]	; (800d9e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d782:	08db      	lsrs	r3, r3, #3
 800d784:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d788:	693a      	ldr	r2, [r7, #16]
 800d78a:	fb02 f303 	mul.w	r3, r2, r3
 800d78e:	ee07 3a90 	vmov	s15, r3
 800d792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d796:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d79a:	697b      	ldr	r3, [r7, #20]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	f000 8111 	beq.w	800d9c4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d7a2:	69bb      	ldr	r3, [r7, #24]
 800d7a4:	2b02      	cmp	r3, #2
 800d7a6:	f000 8083 	beq.w	800d8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d7aa:	69bb      	ldr	r3, [r7, #24]
 800d7ac:	2b02      	cmp	r3, #2
 800d7ae:	f200 80a1 	bhi.w	800d8f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d7b2:	69bb      	ldr	r3, [r7, #24]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d003      	beq.n	800d7c0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d7b8:	69bb      	ldr	r3, [r7, #24]
 800d7ba:	2b01      	cmp	r3, #1
 800d7bc:	d056      	beq.n	800d86c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d7be:	e099      	b.n	800d8f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d7c0:	4b88      	ldr	r3, [pc, #544]	; (800d9e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	f003 0320 	and.w	r3, r3, #32
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d02d      	beq.n	800d828 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d7cc:	4b85      	ldr	r3, [pc, #532]	; (800d9e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	08db      	lsrs	r3, r3, #3
 800d7d2:	f003 0303 	and.w	r3, r3, #3
 800d7d6:	4a84      	ldr	r2, [pc, #528]	; (800d9e8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d7d8:	fa22 f303 	lsr.w	r3, r2, r3
 800d7dc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d7de:	68bb      	ldr	r3, [r7, #8]
 800d7e0:	ee07 3a90 	vmov	s15, r3
 800d7e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d7e8:	697b      	ldr	r3, [r7, #20]
 800d7ea:	ee07 3a90 	vmov	s15, r3
 800d7ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d7f6:	4b7b      	ldr	r3, [pc, #492]	; (800d9e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d7f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7fe:	ee07 3a90 	vmov	s15, r3
 800d802:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d806:	ed97 6a03 	vldr	s12, [r7, #12]
 800d80a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d9ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d80e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d812:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d816:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d81a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d81e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d822:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800d826:	e087      	b.n	800d938 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d828:	697b      	ldr	r3, [r7, #20]
 800d82a:	ee07 3a90 	vmov	s15, r3
 800d82e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d832:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d9f0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d836:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d83a:	4b6a      	ldr	r3, [pc, #424]	; (800d9e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d83c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d83e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d842:	ee07 3a90 	vmov	s15, r3
 800d846:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d84a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d84e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d9ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d852:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d856:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d85a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d85e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d862:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d866:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d86a:	e065      	b.n	800d938 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d86c:	697b      	ldr	r3, [r7, #20]
 800d86e:	ee07 3a90 	vmov	s15, r3
 800d872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d876:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d9f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d87a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d87e:	4b59      	ldr	r3, [pc, #356]	; (800d9e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d886:	ee07 3a90 	vmov	s15, r3
 800d88a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d88e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d892:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d9ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d896:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d89a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d89e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d8a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d8a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d8aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d8ae:	e043      	b.n	800d938 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d8b0:	697b      	ldr	r3, [r7, #20]
 800d8b2:	ee07 3a90 	vmov	s15, r3
 800d8b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8ba:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d9f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d8be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d8c2:	4b48      	ldr	r3, [pc, #288]	; (800d9e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d8c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8ca:	ee07 3a90 	vmov	s15, r3
 800d8ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d8d2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d8d6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d9ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d8da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d8de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d8e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d8e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d8ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d8ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d8f2:	e021      	b.n	800d938 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d8f4:	697b      	ldr	r3, [r7, #20]
 800d8f6:	ee07 3a90 	vmov	s15, r3
 800d8fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8fe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d9f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d902:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d906:	4b37      	ldr	r3, [pc, #220]	; (800d9e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d90a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d90e:	ee07 3a90 	vmov	s15, r3
 800d912:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d916:	ed97 6a03 	vldr	s12, [r7, #12]
 800d91a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d9ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d91e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d922:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d926:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d92a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d92e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d932:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d936:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800d938:	4b2a      	ldr	r3, [pc, #168]	; (800d9e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d93a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d93c:	0a5b      	lsrs	r3, r3, #9
 800d93e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d942:	ee07 3a90 	vmov	s15, r3
 800d946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d94a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d94e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d952:	edd7 6a07 	vldr	s13, [r7, #28]
 800d956:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d95a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d95e:	ee17 2a90 	vmov	r2, s15
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800d966:	4b1f      	ldr	r3, [pc, #124]	; (800d9e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d96a:	0c1b      	lsrs	r3, r3, #16
 800d96c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d970:	ee07 3a90 	vmov	s15, r3
 800d974:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d978:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d97c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d980:	edd7 6a07 	vldr	s13, [r7, #28]
 800d984:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d988:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d98c:	ee17 2a90 	vmov	r2, s15
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800d994:	4b13      	ldr	r3, [pc, #76]	; (800d9e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d998:	0e1b      	lsrs	r3, r3, #24
 800d99a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d99e:	ee07 3a90 	vmov	s15, r3
 800d9a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d9aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d9ae:	edd7 6a07 	vldr	s13, [r7, #28]
 800d9b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d9b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d9ba:	ee17 2a90 	vmov	r2, s15
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d9c2:	e008      	b.n	800d9d6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	2200      	movs	r2, #0
 800d9ce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	609a      	str	r2, [r3, #8]
}
 800d9d6:	bf00      	nop
 800d9d8:	3724      	adds	r7, #36	; 0x24
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e0:	4770      	bx	lr
 800d9e2:	bf00      	nop
 800d9e4:	58024400 	.word	0x58024400
 800d9e8:	03d09000 	.word	0x03d09000
 800d9ec:	46000000 	.word	0x46000000
 800d9f0:	4c742400 	.word	0x4c742400
 800d9f4:	4a742400 	.word	0x4a742400
 800d9f8:	4bf42400 	.word	0x4bf42400

0800d9fc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800d9fc:	b480      	push	{r7}
 800d9fe:	b089      	sub	sp, #36	; 0x24
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800da04:	4ba1      	ldr	r3, [pc, #644]	; (800dc8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800da06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da08:	f003 0303 	and.w	r3, r3, #3
 800da0c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800da0e:	4b9f      	ldr	r3, [pc, #636]	; (800dc8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800da10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da12:	0d1b      	lsrs	r3, r3, #20
 800da14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800da18:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800da1a:	4b9c      	ldr	r3, [pc, #624]	; (800dc8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800da1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da1e:	0a1b      	lsrs	r3, r3, #8
 800da20:	f003 0301 	and.w	r3, r3, #1
 800da24:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800da26:	4b99      	ldr	r3, [pc, #612]	; (800dc8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800da28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da2a:	08db      	lsrs	r3, r3, #3
 800da2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800da30:	693a      	ldr	r2, [r7, #16]
 800da32:	fb02 f303 	mul.w	r3, r2, r3
 800da36:	ee07 3a90 	vmov	s15, r3
 800da3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da3e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800da42:	697b      	ldr	r3, [r7, #20]
 800da44:	2b00      	cmp	r3, #0
 800da46:	f000 8111 	beq.w	800dc6c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800da4a:	69bb      	ldr	r3, [r7, #24]
 800da4c:	2b02      	cmp	r3, #2
 800da4e:	f000 8083 	beq.w	800db58 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800da52:	69bb      	ldr	r3, [r7, #24]
 800da54:	2b02      	cmp	r3, #2
 800da56:	f200 80a1 	bhi.w	800db9c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800da5a:	69bb      	ldr	r3, [r7, #24]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d003      	beq.n	800da68 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800da60:	69bb      	ldr	r3, [r7, #24]
 800da62:	2b01      	cmp	r3, #1
 800da64:	d056      	beq.n	800db14 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800da66:	e099      	b.n	800db9c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800da68:	4b88      	ldr	r3, [pc, #544]	; (800dc8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	f003 0320 	and.w	r3, r3, #32
 800da70:	2b00      	cmp	r3, #0
 800da72:	d02d      	beq.n	800dad0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800da74:	4b85      	ldr	r3, [pc, #532]	; (800dc8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	08db      	lsrs	r3, r3, #3
 800da7a:	f003 0303 	and.w	r3, r3, #3
 800da7e:	4a84      	ldr	r2, [pc, #528]	; (800dc90 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800da80:	fa22 f303 	lsr.w	r3, r2, r3
 800da84:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800da86:	68bb      	ldr	r3, [r7, #8]
 800da88:	ee07 3a90 	vmov	s15, r3
 800da8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da90:	697b      	ldr	r3, [r7, #20]
 800da92:	ee07 3a90 	vmov	s15, r3
 800da96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da9e:	4b7b      	ldr	r3, [pc, #492]	; (800dc8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800daa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800daa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800daa6:	ee07 3a90 	vmov	s15, r3
 800daaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800daae:	ed97 6a03 	vldr	s12, [r7, #12]
 800dab2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800dc94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dab6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800daba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dabe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dac2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800daca:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800dace:	e087      	b.n	800dbe0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800dad0:	697b      	ldr	r3, [r7, #20]
 800dad2:	ee07 3a90 	vmov	s15, r3
 800dad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dada:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800dc98 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800dade:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dae2:	4b6a      	ldr	r3, [pc, #424]	; (800dc8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dae6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800daea:	ee07 3a90 	vmov	s15, r3
 800daee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800daf2:	ed97 6a03 	vldr	s12, [r7, #12]
 800daf6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800dc94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dafa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dafe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800db02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800db06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800db0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db0e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800db12:	e065      	b.n	800dbe0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800db14:	697b      	ldr	r3, [r7, #20]
 800db16:	ee07 3a90 	vmov	s15, r3
 800db1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db1e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800dc9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800db22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800db26:	4b59      	ldr	r3, [pc, #356]	; (800dc8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800db28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db2e:	ee07 3a90 	vmov	s15, r3
 800db32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800db36:	ed97 6a03 	vldr	s12, [r7, #12]
 800db3a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800dc94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800db3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800db42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800db46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800db4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800db4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db52:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800db56:	e043      	b.n	800dbe0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800db58:	697b      	ldr	r3, [r7, #20]
 800db5a:	ee07 3a90 	vmov	s15, r3
 800db5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db62:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800dca0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800db66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800db6a:	4b48      	ldr	r3, [pc, #288]	; (800dc8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800db6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db72:	ee07 3a90 	vmov	s15, r3
 800db76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800db7a:	ed97 6a03 	vldr	s12, [r7, #12]
 800db7e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800dc94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800db82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800db86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800db8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800db8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800db92:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db96:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800db9a:	e021      	b.n	800dbe0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800db9c:	697b      	ldr	r3, [r7, #20]
 800db9e:	ee07 3a90 	vmov	s15, r3
 800dba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dba6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800dc9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800dbaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dbae:	4b37      	ldr	r3, [pc, #220]	; (800dc8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dbb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dbb6:	ee07 3a90 	vmov	s15, r3
 800dbba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dbbe:	ed97 6a03 	vldr	s12, [r7, #12]
 800dbc2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800dc94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dbc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dbca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dbce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dbd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dbd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dbda:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800dbde:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800dbe0:	4b2a      	ldr	r3, [pc, #168]	; (800dc8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dbe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbe4:	0a5b      	lsrs	r3, r3, #9
 800dbe6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dbea:	ee07 3a90 	vmov	s15, r3
 800dbee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dbf2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dbf6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dbfa:	edd7 6a07 	vldr	s13, [r7, #28]
 800dbfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dc02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dc06:	ee17 2a90 	vmov	r2, s15
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800dc0e:	4b1f      	ldr	r3, [pc, #124]	; (800dc8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dc10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc12:	0c1b      	lsrs	r3, r3, #16
 800dc14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc18:	ee07 3a90 	vmov	s15, r3
 800dc1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dc24:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dc28:	edd7 6a07 	vldr	s13, [r7, #28]
 800dc2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dc30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dc34:	ee17 2a90 	vmov	r2, s15
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800dc3c:	4b13      	ldr	r3, [pc, #76]	; (800dc8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dc3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc40:	0e1b      	lsrs	r3, r3, #24
 800dc42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc46:	ee07 3a90 	vmov	s15, r3
 800dc4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dc52:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dc56:	edd7 6a07 	vldr	s13, [r7, #28]
 800dc5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dc5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dc62:	ee17 2a90 	vmov	r2, s15
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800dc6a:	e008      	b.n	800dc7e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	2200      	movs	r2, #0
 800dc70:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	2200      	movs	r2, #0
 800dc76:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	609a      	str	r2, [r3, #8]
}
 800dc7e:	bf00      	nop
 800dc80:	3724      	adds	r7, #36	; 0x24
 800dc82:	46bd      	mov	sp, r7
 800dc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc88:	4770      	bx	lr
 800dc8a:	bf00      	nop
 800dc8c:	58024400 	.word	0x58024400
 800dc90:	03d09000 	.word	0x03d09000
 800dc94:	46000000 	.word	0x46000000
 800dc98:	4c742400 	.word	0x4c742400
 800dc9c:	4a742400 	.word	0x4a742400
 800dca0:	4bf42400 	.word	0x4bf42400

0800dca4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b084      	sub	sp, #16
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]
 800dcac:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dcae:	2300      	movs	r3, #0
 800dcb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800dcb2:	4b53      	ldr	r3, [pc, #332]	; (800de00 <RCCEx_PLL2_Config+0x15c>)
 800dcb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcb6:	f003 0303 	and.w	r3, r3, #3
 800dcba:	2b03      	cmp	r3, #3
 800dcbc:	d101      	bne.n	800dcc2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800dcbe:	2301      	movs	r3, #1
 800dcc0:	e099      	b.n	800ddf6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800dcc2:	4b4f      	ldr	r3, [pc, #316]	; (800de00 <RCCEx_PLL2_Config+0x15c>)
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	4a4e      	ldr	r2, [pc, #312]	; (800de00 <RCCEx_PLL2_Config+0x15c>)
 800dcc8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800dccc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dcce:	f7f9 faa1 	bl	8007214 <HAL_GetTick>
 800dcd2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800dcd4:	e008      	b.n	800dce8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800dcd6:	f7f9 fa9d 	bl	8007214 <HAL_GetTick>
 800dcda:	4602      	mov	r2, r0
 800dcdc:	68bb      	ldr	r3, [r7, #8]
 800dcde:	1ad3      	subs	r3, r2, r3
 800dce0:	2b02      	cmp	r3, #2
 800dce2:	d901      	bls.n	800dce8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800dce4:	2303      	movs	r3, #3
 800dce6:	e086      	b.n	800ddf6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800dce8:	4b45      	ldr	r3, [pc, #276]	; (800de00 <RCCEx_PLL2_Config+0x15c>)
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d1f0      	bne.n	800dcd6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800dcf4:	4b42      	ldr	r3, [pc, #264]	; (800de00 <RCCEx_PLL2_Config+0x15c>)
 800dcf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcf8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	031b      	lsls	r3, r3, #12
 800dd02:	493f      	ldr	r1, [pc, #252]	; (800de00 <RCCEx_PLL2_Config+0x15c>)
 800dd04:	4313      	orrs	r3, r2
 800dd06:	628b      	str	r3, [r1, #40]	; 0x28
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	685b      	ldr	r3, [r3, #4]
 800dd0c:	3b01      	subs	r3, #1
 800dd0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	689b      	ldr	r3, [r3, #8]
 800dd16:	3b01      	subs	r3, #1
 800dd18:	025b      	lsls	r3, r3, #9
 800dd1a:	b29b      	uxth	r3, r3
 800dd1c:	431a      	orrs	r2, r3
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	68db      	ldr	r3, [r3, #12]
 800dd22:	3b01      	subs	r3, #1
 800dd24:	041b      	lsls	r3, r3, #16
 800dd26:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800dd2a:	431a      	orrs	r2, r3
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	691b      	ldr	r3, [r3, #16]
 800dd30:	3b01      	subs	r3, #1
 800dd32:	061b      	lsls	r3, r3, #24
 800dd34:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800dd38:	4931      	ldr	r1, [pc, #196]	; (800de00 <RCCEx_PLL2_Config+0x15c>)
 800dd3a:	4313      	orrs	r3, r2
 800dd3c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800dd3e:	4b30      	ldr	r3, [pc, #192]	; (800de00 <RCCEx_PLL2_Config+0x15c>)
 800dd40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd42:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	695b      	ldr	r3, [r3, #20]
 800dd4a:	492d      	ldr	r1, [pc, #180]	; (800de00 <RCCEx_PLL2_Config+0x15c>)
 800dd4c:	4313      	orrs	r3, r2
 800dd4e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800dd50:	4b2b      	ldr	r3, [pc, #172]	; (800de00 <RCCEx_PLL2_Config+0x15c>)
 800dd52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd54:	f023 0220 	bic.w	r2, r3, #32
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	699b      	ldr	r3, [r3, #24]
 800dd5c:	4928      	ldr	r1, [pc, #160]	; (800de00 <RCCEx_PLL2_Config+0x15c>)
 800dd5e:	4313      	orrs	r3, r2
 800dd60:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800dd62:	4b27      	ldr	r3, [pc, #156]	; (800de00 <RCCEx_PLL2_Config+0x15c>)
 800dd64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd66:	4a26      	ldr	r2, [pc, #152]	; (800de00 <RCCEx_PLL2_Config+0x15c>)
 800dd68:	f023 0310 	bic.w	r3, r3, #16
 800dd6c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800dd6e:	4b24      	ldr	r3, [pc, #144]	; (800de00 <RCCEx_PLL2_Config+0x15c>)
 800dd70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dd72:	4b24      	ldr	r3, [pc, #144]	; (800de04 <RCCEx_PLL2_Config+0x160>)
 800dd74:	4013      	ands	r3, r2
 800dd76:	687a      	ldr	r2, [r7, #4]
 800dd78:	69d2      	ldr	r2, [r2, #28]
 800dd7a:	00d2      	lsls	r2, r2, #3
 800dd7c:	4920      	ldr	r1, [pc, #128]	; (800de00 <RCCEx_PLL2_Config+0x15c>)
 800dd7e:	4313      	orrs	r3, r2
 800dd80:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800dd82:	4b1f      	ldr	r3, [pc, #124]	; (800de00 <RCCEx_PLL2_Config+0x15c>)
 800dd84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd86:	4a1e      	ldr	r2, [pc, #120]	; (800de00 <RCCEx_PLL2_Config+0x15c>)
 800dd88:	f043 0310 	orr.w	r3, r3, #16
 800dd8c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800dd8e:	683b      	ldr	r3, [r7, #0]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d106      	bne.n	800dda2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800dd94:	4b1a      	ldr	r3, [pc, #104]	; (800de00 <RCCEx_PLL2_Config+0x15c>)
 800dd96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd98:	4a19      	ldr	r2, [pc, #100]	; (800de00 <RCCEx_PLL2_Config+0x15c>)
 800dd9a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dd9e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800dda0:	e00f      	b.n	800ddc2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800dda2:	683b      	ldr	r3, [r7, #0]
 800dda4:	2b01      	cmp	r3, #1
 800dda6:	d106      	bne.n	800ddb6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800dda8:	4b15      	ldr	r3, [pc, #84]	; (800de00 <RCCEx_PLL2_Config+0x15c>)
 800ddaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddac:	4a14      	ldr	r2, [pc, #80]	; (800de00 <RCCEx_PLL2_Config+0x15c>)
 800ddae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ddb2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ddb4:	e005      	b.n	800ddc2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ddb6:	4b12      	ldr	r3, [pc, #72]	; (800de00 <RCCEx_PLL2_Config+0x15c>)
 800ddb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddba:	4a11      	ldr	r2, [pc, #68]	; (800de00 <RCCEx_PLL2_Config+0x15c>)
 800ddbc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ddc0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ddc2:	4b0f      	ldr	r3, [pc, #60]	; (800de00 <RCCEx_PLL2_Config+0x15c>)
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	4a0e      	ldr	r2, [pc, #56]	; (800de00 <RCCEx_PLL2_Config+0x15c>)
 800ddc8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ddcc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ddce:	f7f9 fa21 	bl	8007214 <HAL_GetTick>
 800ddd2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ddd4:	e008      	b.n	800dde8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800ddd6:	f7f9 fa1d 	bl	8007214 <HAL_GetTick>
 800ddda:	4602      	mov	r2, r0
 800dddc:	68bb      	ldr	r3, [r7, #8]
 800ddde:	1ad3      	subs	r3, r2, r3
 800dde0:	2b02      	cmp	r3, #2
 800dde2:	d901      	bls.n	800dde8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800dde4:	2303      	movs	r3, #3
 800dde6:	e006      	b.n	800ddf6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800dde8:	4b05      	ldr	r3, [pc, #20]	; (800de00 <RCCEx_PLL2_Config+0x15c>)
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d0f0      	beq.n	800ddd6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ddf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	3710      	adds	r7, #16
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	bd80      	pop	{r7, pc}
 800ddfe:	bf00      	nop
 800de00:	58024400 	.word	0x58024400
 800de04:	ffff0007 	.word	0xffff0007

0800de08 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	b084      	sub	sp, #16
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
 800de10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800de12:	2300      	movs	r3, #0
 800de14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800de16:	4b53      	ldr	r3, [pc, #332]	; (800df64 <RCCEx_PLL3_Config+0x15c>)
 800de18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de1a:	f003 0303 	and.w	r3, r3, #3
 800de1e:	2b03      	cmp	r3, #3
 800de20:	d101      	bne.n	800de26 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800de22:	2301      	movs	r3, #1
 800de24:	e099      	b.n	800df5a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800de26:	4b4f      	ldr	r3, [pc, #316]	; (800df64 <RCCEx_PLL3_Config+0x15c>)
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	4a4e      	ldr	r2, [pc, #312]	; (800df64 <RCCEx_PLL3_Config+0x15c>)
 800de2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800de30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800de32:	f7f9 f9ef 	bl	8007214 <HAL_GetTick>
 800de36:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800de38:	e008      	b.n	800de4c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800de3a:	f7f9 f9eb 	bl	8007214 <HAL_GetTick>
 800de3e:	4602      	mov	r2, r0
 800de40:	68bb      	ldr	r3, [r7, #8]
 800de42:	1ad3      	subs	r3, r2, r3
 800de44:	2b02      	cmp	r3, #2
 800de46:	d901      	bls.n	800de4c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800de48:	2303      	movs	r3, #3
 800de4a:	e086      	b.n	800df5a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800de4c:	4b45      	ldr	r3, [pc, #276]	; (800df64 <RCCEx_PLL3_Config+0x15c>)
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800de54:	2b00      	cmp	r3, #0
 800de56:	d1f0      	bne.n	800de3a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800de58:	4b42      	ldr	r3, [pc, #264]	; (800df64 <RCCEx_PLL3_Config+0x15c>)
 800de5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de5c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	051b      	lsls	r3, r3, #20
 800de66:	493f      	ldr	r1, [pc, #252]	; (800df64 <RCCEx_PLL3_Config+0x15c>)
 800de68:	4313      	orrs	r3, r2
 800de6a:	628b      	str	r3, [r1, #40]	; 0x28
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	685b      	ldr	r3, [r3, #4]
 800de70:	3b01      	subs	r3, #1
 800de72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	689b      	ldr	r3, [r3, #8]
 800de7a:	3b01      	subs	r3, #1
 800de7c:	025b      	lsls	r3, r3, #9
 800de7e:	b29b      	uxth	r3, r3
 800de80:	431a      	orrs	r2, r3
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	68db      	ldr	r3, [r3, #12]
 800de86:	3b01      	subs	r3, #1
 800de88:	041b      	lsls	r3, r3, #16
 800de8a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800de8e:	431a      	orrs	r2, r3
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	691b      	ldr	r3, [r3, #16]
 800de94:	3b01      	subs	r3, #1
 800de96:	061b      	lsls	r3, r3, #24
 800de98:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800de9c:	4931      	ldr	r1, [pc, #196]	; (800df64 <RCCEx_PLL3_Config+0x15c>)
 800de9e:	4313      	orrs	r3, r2
 800dea0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800dea2:	4b30      	ldr	r3, [pc, #192]	; (800df64 <RCCEx_PLL3_Config+0x15c>)
 800dea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dea6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	695b      	ldr	r3, [r3, #20]
 800deae:	492d      	ldr	r1, [pc, #180]	; (800df64 <RCCEx_PLL3_Config+0x15c>)
 800deb0:	4313      	orrs	r3, r2
 800deb2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800deb4:	4b2b      	ldr	r3, [pc, #172]	; (800df64 <RCCEx_PLL3_Config+0x15c>)
 800deb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800deb8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	699b      	ldr	r3, [r3, #24]
 800dec0:	4928      	ldr	r1, [pc, #160]	; (800df64 <RCCEx_PLL3_Config+0x15c>)
 800dec2:	4313      	orrs	r3, r2
 800dec4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800dec6:	4b27      	ldr	r3, [pc, #156]	; (800df64 <RCCEx_PLL3_Config+0x15c>)
 800dec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800deca:	4a26      	ldr	r2, [pc, #152]	; (800df64 <RCCEx_PLL3_Config+0x15c>)
 800decc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ded0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ded2:	4b24      	ldr	r3, [pc, #144]	; (800df64 <RCCEx_PLL3_Config+0x15c>)
 800ded4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ded6:	4b24      	ldr	r3, [pc, #144]	; (800df68 <RCCEx_PLL3_Config+0x160>)
 800ded8:	4013      	ands	r3, r2
 800deda:	687a      	ldr	r2, [r7, #4]
 800dedc:	69d2      	ldr	r2, [r2, #28]
 800dede:	00d2      	lsls	r2, r2, #3
 800dee0:	4920      	ldr	r1, [pc, #128]	; (800df64 <RCCEx_PLL3_Config+0x15c>)
 800dee2:	4313      	orrs	r3, r2
 800dee4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800dee6:	4b1f      	ldr	r3, [pc, #124]	; (800df64 <RCCEx_PLL3_Config+0x15c>)
 800dee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800deea:	4a1e      	ldr	r2, [pc, #120]	; (800df64 <RCCEx_PLL3_Config+0x15c>)
 800deec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800def0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800def2:	683b      	ldr	r3, [r7, #0]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d106      	bne.n	800df06 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800def8:	4b1a      	ldr	r3, [pc, #104]	; (800df64 <RCCEx_PLL3_Config+0x15c>)
 800defa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800defc:	4a19      	ldr	r2, [pc, #100]	; (800df64 <RCCEx_PLL3_Config+0x15c>)
 800defe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800df02:	62d3      	str	r3, [r2, #44]	; 0x2c
 800df04:	e00f      	b.n	800df26 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800df06:	683b      	ldr	r3, [r7, #0]
 800df08:	2b01      	cmp	r3, #1
 800df0a:	d106      	bne.n	800df1a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800df0c:	4b15      	ldr	r3, [pc, #84]	; (800df64 <RCCEx_PLL3_Config+0x15c>)
 800df0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df10:	4a14      	ldr	r2, [pc, #80]	; (800df64 <RCCEx_PLL3_Config+0x15c>)
 800df12:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800df16:	62d3      	str	r3, [r2, #44]	; 0x2c
 800df18:	e005      	b.n	800df26 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800df1a:	4b12      	ldr	r3, [pc, #72]	; (800df64 <RCCEx_PLL3_Config+0x15c>)
 800df1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df1e:	4a11      	ldr	r2, [pc, #68]	; (800df64 <RCCEx_PLL3_Config+0x15c>)
 800df20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800df24:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800df26:	4b0f      	ldr	r3, [pc, #60]	; (800df64 <RCCEx_PLL3_Config+0x15c>)
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	4a0e      	ldr	r2, [pc, #56]	; (800df64 <RCCEx_PLL3_Config+0x15c>)
 800df2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800df30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800df32:	f7f9 f96f 	bl	8007214 <HAL_GetTick>
 800df36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800df38:	e008      	b.n	800df4c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800df3a:	f7f9 f96b 	bl	8007214 <HAL_GetTick>
 800df3e:	4602      	mov	r2, r0
 800df40:	68bb      	ldr	r3, [r7, #8]
 800df42:	1ad3      	subs	r3, r2, r3
 800df44:	2b02      	cmp	r3, #2
 800df46:	d901      	bls.n	800df4c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800df48:	2303      	movs	r3, #3
 800df4a:	e006      	b.n	800df5a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800df4c:	4b05      	ldr	r3, [pc, #20]	; (800df64 <RCCEx_PLL3_Config+0x15c>)
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800df54:	2b00      	cmp	r3, #0
 800df56:	d0f0      	beq.n	800df3a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800df58:	7bfb      	ldrb	r3, [r7, #15]
}
 800df5a:	4618      	mov	r0, r3
 800df5c:	3710      	adds	r7, #16
 800df5e:	46bd      	mov	sp, r7
 800df60:	bd80      	pop	{r7, pc}
 800df62:	bf00      	nop
 800df64:	58024400 	.word	0x58024400
 800df68:	ffff0007 	.word	0xffff0007

0800df6c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800df6c:	b580      	push	{r7, lr}
 800df6e:	b084      	sub	sp, #16
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d101      	bne.n	800df7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800df7a:	2301      	movs	r3, #1
 800df7c:	e0f1      	b.n	800e162 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	2200      	movs	r2, #0
 800df82:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	4a78      	ldr	r2, [pc, #480]	; (800e16c <HAL_SPI_Init+0x200>)
 800df8a:	4293      	cmp	r3, r2
 800df8c:	d00f      	beq.n	800dfae <HAL_SPI_Init+0x42>
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	4a77      	ldr	r2, [pc, #476]	; (800e170 <HAL_SPI_Init+0x204>)
 800df94:	4293      	cmp	r3, r2
 800df96:	d00a      	beq.n	800dfae <HAL_SPI_Init+0x42>
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	4a75      	ldr	r2, [pc, #468]	; (800e174 <HAL_SPI_Init+0x208>)
 800df9e:	4293      	cmp	r3, r2
 800dfa0:	d005      	beq.n	800dfae <HAL_SPI_Init+0x42>
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	68db      	ldr	r3, [r3, #12]
 800dfa6:	2b0f      	cmp	r3, #15
 800dfa8:	d901      	bls.n	800dfae <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800dfaa:	2301      	movs	r3, #1
 800dfac:	e0d9      	b.n	800e162 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800dfae:	6878      	ldr	r0, [r7, #4]
 800dfb0:	f000 f8e2 	bl	800e178 <SPI_GetPacketSize>
 800dfb4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	4a6c      	ldr	r2, [pc, #432]	; (800e16c <HAL_SPI_Init+0x200>)
 800dfbc:	4293      	cmp	r3, r2
 800dfbe:	d00c      	beq.n	800dfda <HAL_SPI_Init+0x6e>
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	4a6a      	ldr	r2, [pc, #424]	; (800e170 <HAL_SPI_Init+0x204>)
 800dfc6:	4293      	cmp	r3, r2
 800dfc8:	d007      	beq.n	800dfda <HAL_SPI_Init+0x6e>
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	4a69      	ldr	r2, [pc, #420]	; (800e174 <HAL_SPI_Init+0x208>)
 800dfd0:	4293      	cmp	r3, r2
 800dfd2:	d002      	beq.n	800dfda <HAL_SPI_Init+0x6e>
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	2b08      	cmp	r3, #8
 800dfd8:	d811      	bhi.n	800dffe <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800dfde:	4a63      	ldr	r2, [pc, #396]	; (800e16c <HAL_SPI_Init+0x200>)
 800dfe0:	4293      	cmp	r3, r2
 800dfe2:	d009      	beq.n	800dff8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	4a61      	ldr	r2, [pc, #388]	; (800e170 <HAL_SPI_Init+0x204>)
 800dfea:	4293      	cmp	r3, r2
 800dfec:	d004      	beq.n	800dff8 <HAL_SPI_Init+0x8c>
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	4a60      	ldr	r2, [pc, #384]	; (800e174 <HAL_SPI_Init+0x208>)
 800dff4:	4293      	cmp	r3, r2
 800dff6:	d104      	bne.n	800e002 <HAL_SPI_Init+0x96>
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	2b10      	cmp	r3, #16
 800dffc:	d901      	bls.n	800e002 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800dffe:	2301      	movs	r3, #1
 800e000:	e0af      	b.n	800e162 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e008:	b2db      	uxtb	r3, r3
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d106      	bne.n	800e01c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	2200      	movs	r2, #0
 800e012:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e016:	6878      	ldr	r0, [r7, #4]
 800e018:	f7f7 fc3e 	bl	8005898 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	2202      	movs	r2, #2
 800e020:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	681a      	ldr	r2, [r3, #0]
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	f022 0201 	bic.w	r2, r2, #1
 800e032:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	689b      	ldr	r3, [r3, #8]
 800e03a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800e03e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	699b      	ldr	r3, [r3, #24]
 800e044:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e048:	d119      	bne.n	800e07e <HAL_SPI_Init+0x112>
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	685b      	ldr	r3, [r3, #4]
 800e04e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e052:	d103      	bne.n	800e05c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d008      	beq.n	800e06e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e060:	2b00      	cmp	r3, #0
 800e062:	d10c      	bne.n	800e07e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e068:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e06c:	d107      	bne.n	800e07e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	681a      	ldr	r2, [r3, #0]
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e07c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	69da      	ldr	r2, [r3, #28]
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e086:	431a      	orrs	r2, r3
 800e088:	68bb      	ldr	r3, [r7, #8]
 800e08a:	431a      	orrs	r2, r3
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e090:	ea42 0103 	orr.w	r1, r2, r3
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	68da      	ldr	r2, [r3, #12]
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	430a      	orrs	r2, r1
 800e09e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0a8:	431a      	orrs	r2, r3
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0ae:	431a      	orrs	r2, r3
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	699b      	ldr	r3, [r3, #24]
 800e0b4:	431a      	orrs	r2, r3
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	691b      	ldr	r3, [r3, #16]
 800e0ba:	431a      	orrs	r2, r3
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	695b      	ldr	r3, [r3, #20]
 800e0c0:	431a      	orrs	r2, r3
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	6a1b      	ldr	r3, [r3, #32]
 800e0c6:	431a      	orrs	r2, r3
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	685b      	ldr	r3, [r3, #4]
 800e0cc:	431a      	orrs	r2, r3
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e0d2:	431a      	orrs	r2, r3
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	689b      	ldr	r3, [r3, #8]
 800e0d8:	431a      	orrs	r2, r3
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e0de:	ea42 0103 	orr.w	r1, r2, r3
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	430a      	orrs	r2, r1
 800e0ec:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	685b      	ldr	r3, [r3, #4]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d113      	bne.n	800e11e <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	689b      	ldr	r3, [r3, #8]
 800e0fc:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e108:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	689b      	ldr	r3, [r3, #8]
 800e110:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e11c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	f022 0201 	bic.w	r2, r2, #1
 800e12c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	685b      	ldr	r3, [r3, #4]
 800e132:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e136:	2b00      	cmp	r3, #0
 800e138:	d00a      	beq.n	800e150 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	68db      	ldr	r3, [r3, #12]
 800e140:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	430a      	orrs	r2, r1
 800e14e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	2200      	movs	r2, #0
 800e154:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	2201      	movs	r2, #1
 800e15c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800e160:	2300      	movs	r3, #0
}
 800e162:	4618      	mov	r0, r3
 800e164:	3710      	adds	r7, #16
 800e166:	46bd      	mov	sp, r7
 800e168:	bd80      	pop	{r7, pc}
 800e16a:	bf00      	nop
 800e16c:	40013000 	.word	0x40013000
 800e170:	40003800 	.word	0x40003800
 800e174:	40003c00 	.word	0x40003c00

0800e178 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800e178:	b480      	push	{r7}
 800e17a:	b085      	sub	sp, #20
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e184:	095b      	lsrs	r3, r3, #5
 800e186:	3301      	adds	r3, #1
 800e188:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	68db      	ldr	r3, [r3, #12]
 800e18e:	3301      	adds	r3, #1
 800e190:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e192:	68bb      	ldr	r3, [r7, #8]
 800e194:	3307      	adds	r3, #7
 800e196:	08db      	lsrs	r3, r3, #3
 800e198:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e19a:	68bb      	ldr	r3, [r7, #8]
 800e19c:	68fa      	ldr	r2, [r7, #12]
 800e19e:	fb02 f303 	mul.w	r3, r2, r3
}
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	3714      	adds	r7, #20
 800e1a6:	46bd      	mov	sp, r7
 800e1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ac:	4770      	bx	lr

0800e1ae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e1ae:	b580      	push	{r7, lr}
 800e1b0:	b082      	sub	sp, #8
 800e1b2:	af00      	add	r7, sp, #0
 800e1b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d101      	bne.n	800e1c0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e1bc:	2301      	movs	r3, #1
 800e1be:	e049      	b.n	800e254 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e1c6:	b2db      	uxtb	r3, r3
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d106      	bne.n	800e1da <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	2200      	movs	r2, #0
 800e1d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e1d4:	6878      	ldr	r0, [r7, #4]
 800e1d6:	f7f7 fd07 	bl	8005be8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	2202      	movs	r2, #2
 800e1de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	681a      	ldr	r2, [r3, #0]
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	3304      	adds	r3, #4
 800e1ea:	4619      	mov	r1, r3
 800e1ec:	4610      	mov	r0, r2
 800e1ee:	f000 fc21 	bl	800ea34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	2201      	movs	r2, #1
 800e1f6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	2201      	movs	r2, #1
 800e1fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	2201      	movs	r2, #1
 800e206:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	2201      	movs	r2, #1
 800e20e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	2201      	movs	r2, #1
 800e216:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	2201      	movs	r2, #1
 800e21e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	2201      	movs	r2, #1
 800e226:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	2201      	movs	r2, #1
 800e22e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	2201      	movs	r2, #1
 800e236:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	2201      	movs	r2, #1
 800e23e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	2201      	movs	r2, #1
 800e246:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	2201      	movs	r2, #1
 800e24e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e252:	2300      	movs	r3, #0
}
 800e254:	4618      	mov	r0, r3
 800e256:	3708      	adds	r7, #8
 800e258:	46bd      	mov	sp, r7
 800e25a:	bd80      	pop	{r7, pc}

0800e25c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e25c:	b480      	push	{r7}
 800e25e:	b085      	sub	sp, #20
 800e260:	af00      	add	r7, sp, #0
 800e262:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e26a:	b2db      	uxtb	r3, r3
 800e26c:	2b01      	cmp	r3, #1
 800e26e:	d001      	beq.n	800e274 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e270:	2301      	movs	r3, #1
 800e272:	e054      	b.n	800e31e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	2202      	movs	r2, #2
 800e278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	68da      	ldr	r2, [r3, #12]
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	f042 0201 	orr.w	r2, r2, #1
 800e28a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	4a26      	ldr	r2, [pc, #152]	; (800e32c <HAL_TIM_Base_Start_IT+0xd0>)
 800e292:	4293      	cmp	r3, r2
 800e294:	d022      	beq.n	800e2dc <HAL_TIM_Base_Start_IT+0x80>
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e29e:	d01d      	beq.n	800e2dc <HAL_TIM_Base_Start_IT+0x80>
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	4a22      	ldr	r2, [pc, #136]	; (800e330 <HAL_TIM_Base_Start_IT+0xd4>)
 800e2a6:	4293      	cmp	r3, r2
 800e2a8:	d018      	beq.n	800e2dc <HAL_TIM_Base_Start_IT+0x80>
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	4a21      	ldr	r2, [pc, #132]	; (800e334 <HAL_TIM_Base_Start_IT+0xd8>)
 800e2b0:	4293      	cmp	r3, r2
 800e2b2:	d013      	beq.n	800e2dc <HAL_TIM_Base_Start_IT+0x80>
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	4a1f      	ldr	r2, [pc, #124]	; (800e338 <HAL_TIM_Base_Start_IT+0xdc>)
 800e2ba:	4293      	cmp	r3, r2
 800e2bc:	d00e      	beq.n	800e2dc <HAL_TIM_Base_Start_IT+0x80>
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	4a1e      	ldr	r2, [pc, #120]	; (800e33c <HAL_TIM_Base_Start_IT+0xe0>)
 800e2c4:	4293      	cmp	r3, r2
 800e2c6:	d009      	beq.n	800e2dc <HAL_TIM_Base_Start_IT+0x80>
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	4a1c      	ldr	r2, [pc, #112]	; (800e340 <HAL_TIM_Base_Start_IT+0xe4>)
 800e2ce:	4293      	cmp	r3, r2
 800e2d0:	d004      	beq.n	800e2dc <HAL_TIM_Base_Start_IT+0x80>
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	4a1b      	ldr	r2, [pc, #108]	; (800e344 <HAL_TIM_Base_Start_IT+0xe8>)
 800e2d8:	4293      	cmp	r3, r2
 800e2da:	d115      	bne.n	800e308 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	689a      	ldr	r2, [r3, #8]
 800e2e2:	4b19      	ldr	r3, [pc, #100]	; (800e348 <HAL_TIM_Base_Start_IT+0xec>)
 800e2e4:	4013      	ands	r3, r2
 800e2e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	2b06      	cmp	r3, #6
 800e2ec:	d015      	beq.n	800e31a <HAL_TIM_Base_Start_IT+0xbe>
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e2f4:	d011      	beq.n	800e31a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	681a      	ldr	r2, [r3, #0]
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	f042 0201 	orr.w	r2, r2, #1
 800e304:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e306:	e008      	b.n	800e31a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	681a      	ldr	r2, [r3, #0]
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	f042 0201 	orr.w	r2, r2, #1
 800e316:	601a      	str	r2, [r3, #0]
 800e318:	e000      	b.n	800e31c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e31a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e31c:	2300      	movs	r3, #0
}
 800e31e:	4618      	mov	r0, r3
 800e320:	3714      	adds	r7, #20
 800e322:	46bd      	mov	sp, r7
 800e324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e328:	4770      	bx	lr
 800e32a:	bf00      	nop
 800e32c:	40010000 	.word	0x40010000
 800e330:	40000400 	.word	0x40000400
 800e334:	40000800 	.word	0x40000800
 800e338:	40000c00 	.word	0x40000c00
 800e33c:	40010400 	.word	0x40010400
 800e340:	40001800 	.word	0x40001800
 800e344:	40014000 	.word	0x40014000
 800e348:	00010007 	.word	0x00010007

0800e34c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800e34c:	b580      	push	{r7, lr}
 800e34e:	b086      	sub	sp, #24
 800e350:	af00      	add	r7, sp, #0
 800e352:	6078      	str	r0, [r7, #4]
 800e354:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d101      	bne.n	800e360 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800e35c:	2301      	movs	r3, #1
 800e35e:	e08f      	b.n	800e480 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e366:	b2db      	uxtb	r3, r3
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d106      	bne.n	800e37a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	2200      	movs	r2, #0
 800e370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800e374:	6878      	ldr	r0, [r7, #4]
 800e376:	f7f7 fb05 	bl	8005984 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	2202      	movs	r2, #2
 800e37e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	6899      	ldr	r1, [r3, #8]
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	681a      	ldr	r2, [r3, #0]
 800e38c:	4b3e      	ldr	r3, [pc, #248]	; (800e488 <HAL_TIM_Encoder_Init+0x13c>)
 800e38e:	400b      	ands	r3, r1
 800e390:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	681a      	ldr	r2, [r3, #0]
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	3304      	adds	r3, #4
 800e39a:	4619      	mov	r1, r3
 800e39c:	4610      	mov	r0, r2
 800e39e:	f000 fb49 	bl	800ea34 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	689b      	ldr	r3, [r3, #8]
 800e3a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	699b      	ldr	r3, [r3, #24]
 800e3b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	6a1b      	ldr	r3, [r3, #32]
 800e3b8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800e3ba:	683b      	ldr	r3, [r7, #0]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	697a      	ldr	r2, [r7, #20]
 800e3c0:	4313      	orrs	r3, r2
 800e3c2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800e3c4:	693a      	ldr	r2, [r7, #16]
 800e3c6:	4b31      	ldr	r3, [pc, #196]	; (800e48c <HAL_TIM_Encoder_Init+0x140>)
 800e3c8:	4013      	ands	r3, r2
 800e3ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800e3cc:	683b      	ldr	r3, [r7, #0]
 800e3ce:	689a      	ldr	r2, [r3, #8]
 800e3d0:	683b      	ldr	r3, [r7, #0]
 800e3d2:	699b      	ldr	r3, [r3, #24]
 800e3d4:	021b      	lsls	r3, r3, #8
 800e3d6:	4313      	orrs	r3, r2
 800e3d8:	693a      	ldr	r2, [r7, #16]
 800e3da:	4313      	orrs	r3, r2
 800e3dc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800e3de:	693a      	ldr	r2, [r7, #16]
 800e3e0:	4b2b      	ldr	r3, [pc, #172]	; (800e490 <HAL_TIM_Encoder_Init+0x144>)
 800e3e2:	4013      	ands	r3, r2
 800e3e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800e3e6:	693a      	ldr	r2, [r7, #16]
 800e3e8:	4b2a      	ldr	r3, [pc, #168]	; (800e494 <HAL_TIM_Encoder_Init+0x148>)
 800e3ea:	4013      	ands	r3, r2
 800e3ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800e3ee:	683b      	ldr	r3, [r7, #0]
 800e3f0:	68da      	ldr	r2, [r3, #12]
 800e3f2:	683b      	ldr	r3, [r7, #0]
 800e3f4:	69db      	ldr	r3, [r3, #28]
 800e3f6:	021b      	lsls	r3, r3, #8
 800e3f8:	4313      	orrs	r3, r2
 800e3fa:	693a      	ldr	r2, [r7, #16]
 800e3fc:	4313      	orrs	r3, r2
 800e3fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800e400:	683b      	ldr	r3, [r7, #0]
 800e402:	691b      	ldr	r3, [r3, #16]
 800e404:	011a      	lsls	r2, r3, #4
 800e406:	683b      	ldr	r3, [r7, #0]
 800e408:	6a1b      	ldr	r3, [r3, #32]
 800e40a:	031b      	lsls	r3, r3, #12
 800e40c:	4313      	orrs	r3, r2
 800e40e:	693a      	ldr	r2, [r7, #16]
 800e410:	4313      	orrs	r3, r2
 800e412:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800e41a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800e422:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800e424:	683b      	ldr	r3, [r7, #0]
 800e426:	685a      	ldr	r2, [r3, #4]
 800e428:	683b      	ldr	r3, [r7, #0]
 800e42a:	695b      	ldr	r3, [r3, #20]
 800e42c:	011b      	lsls	r3, r3, #4
 800e42e:	4313      	orrs	r3, r2
 800e430:	68fa      	ldr	r2, [r7, #12]
 800e432:	4313      	orrs	r3, r2
 800e434:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	697a      	ldr	r2, [r7, #20]
 800e43c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	693a      	ldr	r2, [r7, #16]
 800e444:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	68fa      	ldr	r2, [r7, #12]
 800e44c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	2201      	movs	r2, #1
 800e452:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	2201      	movs	r2, #1
 800e45a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	2201      	movs	r2, #1
 800e462:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	2201      	movs	r2, #1
 800e46a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	2201      	movs	r2, #1
 800e472:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	2201      	movs	r2, #1
 800e47a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e47e:	2300      	movs	r3, #0
}
 800e480:	4618      	mov	r0, r3
 800e482:	3718      	adds	r7, #24
 800e484:	46bd      	mov	sp, r7
 800e486:	bd80      	pop	{r7, pc}
 800e488:	fffebff8 	.word	0xfffebff8
 800e48c:	fffffcfc 	.word	0xfffffcfc
 800e490:	fffff3f3 	.word	0xfffff3f3
 800e494:	ffff0f0f 	.word	0xffff0f0f

0800e498 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e498:	b580      	push	{r7, lr}
 800e49a:	b084      	sub	sp, #16
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	6078      	str	r0, [r7, #4]
 800e4a0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e4a8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e4b0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e4b8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e4c0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800e4c2:	683b      	ldr	r3, [r7, #0]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d110      	bne.n	800e4ea <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800e4c8:	7bfb      	ldrb	r3, [r7, #15]
 800e4ca:	2b01      	cmp	r3, #1
 800e4cc:	d102      	bne.n	800e4d4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800e4ce:	7b7b      	ldrb	r3, [r7, #13]
 800e4d0:	2b01      	cmp	r3, #1
 800e4d2:	d001      	beq.n	800e4d8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800e4d4:	2301      	movs	r3, #1
 800e4d6:	e069      	b.n	800e5ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	2202      	movs	r2, #2
 800e4dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	2202      	movs	r2, #2
 800e4e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e4e8:	e031      	b.n	800e54e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800e4ea:	683b      	ldr	r3, [r7, #0]
 800e4ec:	2b04      	cmp	r3, #4
 800e4ee:	d110      	bne.n	800e512 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800e4f0:	7bbb      	ldrb	r3, [r7, #14]
 800e4f2:	2b01      	cmp	r3, #1
 800e4f4:	d102      	bne.n	800e4fc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800e4f6:	7b3b      	ldrb	r3, [r7, #12]
 800e4f8:	2b01      	cmp	r3, #1
 800e4fa:	d001      	beq.n	800e500 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800e4fc:	2301      	movs	r3, #1
 800e4fe:	e055      	b.n	800e5ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	2202      	movs	r2, #2
 800e504:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	2202      	movs	r2, #2
 800e50c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e510:	e01d      	b.n	800e54e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800e512:	7bfb      	ldrb	r3, [r7, #15]
 800e514:	2b01      	cmp	r3, #1
 800e516:	d108      	bne.n	800e52a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800e518:	7bbb      	ldrb	r3, [r7, #14]
 800e51a:	2b01      	cmp	r3, #1
 800e51c:	d105      	bne.n	800e52a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800e51e:	7b7b      	ldrb	r3, [r7, #13]
 800e520:	2b01      	cmp	r3, #1
 800e522:	d102      	bne.n	800e52a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800e524:	7b3b      	ldrb	r3, [r7, #12]
 800e526:	2b01      	cmp	r3, #1
 800e528:	d001      	beq.n	800e52e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800e52a:	2301      	movs	r3, #1
 800e52c:	e03e      	b.n	800e5ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	2202      	movs	r2, #2
 800e532:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	2202      	movs	r2, #2
 800e53a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	2202      	movs	r2, #2
 800e542:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	2202      	movs	r2, #2
 800e54a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800e54e:	683b      	ldr	r3, [r7, #0]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d003      	beq.n	800e55c <HAL_TIM_Encoder_Start+0xc4>
 800e554:	683b      	ldr	r3, [r7, #0]
 800e556:	2b04      	cmp	r3, #4
 800e558:	d008      	beq.n	800e56c <HAL_TIM_Encoder_Start+0xd4>
 800e55a:	e00f      	b.n	800e57c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	2201      	movs	r2, #1
 800e562:	2100      	movs	r1, #0
 800e564:	4618      	mov	r0, r3
 800e566:	f000 fb9d 	bl	800eca4 <TIM_CCxChannelCmd>
      break;
 800e56a:	e016      	b.n	800e59a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	2201      	movs	r2, #1
 800e572:	2104      	movs	r1, #4
 800e574:	4618      	mov	r0, r3
 800e576:	f000 fb95 	bl	800eca4 <TIM_CCxChannelCmd>
      break;
 800e57a:	e00e      	b.n	800e59a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	2201      	movs	r2, #1
 800e582:	2100      	movs	r1, #0
 800e584:	4618      	mov	r0, r3
 800e586:	f000 fb8d 	bl	800eca4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	2201      	movs	r2, #1
 800e590:	2104      	movs	r1, #4
 800e592:	4618      	mov	r0, r3
 800e594:	f000 fb86 	bl	800eca4 <TIM_CCxChannelCmd>
      break;
 800e598:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	681a      	ldr	r2, [r3, #0]
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	f042 0201 	orr.w	r2, r2, #1
 800e5a8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800e5aa:	2300      	movs	r3, #0
}
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	3710      	adds	r7, #16
 800e5b0:	46bd      	mov	sp, r7
 800e5b2:	bd80      	pop	{r7, pc}

0800e5b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b082      	sub	sp, #8
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	691b      	ldr	r3, [r3, #16]
 800e5c2:	f003 0302 	and.w	r3, r3, #2
 800e5c6:	2b02      	cmp	r3, #2
 800e5c8:	d122      	bne.n	800e610 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	68db      	ldr	r3, [r3, #12]
 800e5d0:	f003 0302 	and.w	r3, r3, #2
 800e5d4:	2b02      	cmp	r3, #2
 800e5d6:	d11b      	bne.n	800e610 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	f06f 0202 	mvn.w	r2, #2
 800e5e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	2201      	movs	r2, #1
 800e5e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	699b      	ldr	r3, [r3, #24]
 800e5ee:	f003 0303 	and.w	r3, r3, #3
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d003      	beq.n	800e5fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e5f6:	6878      	ldr	r0, [r7, #4]
 800e5f8:	f000 f9fe 	bl	800e9f8 <HAL_TIM_IC_CaptureCallback>
 800e5fc:	e005      	b.n	800e60a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e5fe:	6878      	ldr	r0, [r7, #4]
 800e600:	f000 f9f0 	bl	800e9e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e604:	6878      	ldr	r0, [r7, #4]
 800e606:	f000 fa01 	bl	800ea0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	2200      	movs	r2, #0
 800e60e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	691b      	ldr	r3, [r3, #16]
 800e616:	f003 0304 	and.w	r3, r3, #4
 800e61a:	2b04      	cmp	r3, #4
 800e61c:	d122      	bne.n	800e664 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	68db      	ldr	r3, [r3, #12]
 800e624:	f003 0304 	and.w	r3, r3, #4
 800e628:	2b04      	cmp	r3, #4
 800e62a:	d11b      	bne.n	800e664 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	f06f 0204 	mvn.w	r2, #4
 800e634:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	2202      	movs	r2, #2
 800e63a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	699b      	ldr	r3, [r3, #24]
 800e642:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e646:	2b00      	cmp	r3, #0
 800e648:	d003      	beq.n	800e652 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e64a:	6878      	ldr	r0, [r7, #4]
 800e64c:	f000 f9d4 	bl	800e9f8 <HAL_TIM_IC_CaptureCallback>
 800e650:	e005      	b.n	800e65e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e652:	6878      	ldr	r0, [r7, #4]
 800e654:	f000 f9c6 	bl	800e9e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e658:	6878      	ldr	r0, [r7, #4]
 800e65a:	f000 f9d7 	bl	800ea0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	2200      	movs	r2, #0
 800e662:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	691b      	ldr	r3, [r3, #16]
 800e66a:	f003 0308 	and.w	r3, r3, #8
 800e66e:	2b08      	cmp	r3, #8
 800e670:	d122      	bne.n	800e6b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	68db      	ldr	r3, [r3, #12]
 800e678:	f003 0308 	and.w	r3, r3, #8
 800e67c:	2b08      	cmp	r3, #8
 800e67e:	d11b      	bne.n	800e6b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	f06f 0208 	mvn.w	r2, #8
 800e688:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	2204      	movs	r2, #4
 800e68e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	69db      	ldr	r3, [r3, #28]
 800e696:	f003 0303 	and.w	r3, r3, #3
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d003      	beq.n	800e6a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e69e:	6878      	ldr	r0, [r7, #4]
 800e6a0:	f000 f9aa 	bl	800e9f8 <HAL_TIM_IC_CaptureCallback>
 800e6a4:	e005      	b.n	800e6b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e6a6:	6878      	ldr	r0, [r7, #4]
 800e6a8:	f000 f99c 	bl	800e9e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e6ac:	6878      	ldr	r0, [r7, #4]
 800e6ae:	f000 f9ad 	bl	800ea0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	2200      	movs	r2, #0
 800e6b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	691b      	ldr	r3, [r3, #16]
 800e6be:	f003 0310 	and.w	r3, r3, #16
 800e6c2:	2b10      	cmp	r3, #16
 800e6c4:	d122      	bne.n	800e70c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	68db      	ldr	r3, [r3, #12]
 800e6cc:	f003 0310 	and.w	r3, r3, #16
 800e6d0:	2b10      	cmp	r3, #16
 800e6d2:	d11b      	bne.n	800e70c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	f06f 0210 	mvn.w	r2, #16
 800e6dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	2208      	movs	r2, #8
 800e6e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	69db      	ldr	r3, [r3, #28]
 800e6ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d003      	beq.n	800e6fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e6f2:	6878      	ldr	r0, [r7, #4]
 800e6f4:	f000 f980 	bl	800e9f8 <HAL_TIM_IC_CaptureCallback>
 800e6f8:	e005      	b.n	800e706 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e6fa:	6878      	ldr	r0, [r7, #4]
 800e6fc:	f000 f972 	bl	800e9e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e700:	6878      	ldr	r0, [r7, #4]
 800e702:	f000 f983 	bl	800ea0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	2200      	movs	r2, #0
 800e70a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	691b      	ldr	r3, [r3, #16]
 800e712:	f003 0301 	and.w	r3, r3, #1
 800e716:	2b01      	cmp	r3, #1
 800e718:	d10e      	bne.n	800e738 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	68db      	ldr	r3, [r3, #12]
 800e720:	f003 0301 	and.w	r3, r3, #1
 800e724:	2b01      	cmp	r3, #1
 800e726:	d107      	bne.n	800e738 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	f06f 0201 	mvn.w	r2, #1
 800e730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e732:	6878      	ldr	r0, [r7, #4]
 800e734:	f7f8 fb72 	bl	8006e1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	691b      	ldr	r3, [r3, #16]
 800e73e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e742:	2b80      	cmp	r3, #128	; 0x80
 800e744:	d10e      	bne.n	800e764 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	68db      	ldr	r3, [r3, #12]
 800e74c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e750:	2b80      	cmp	r3, #128	; 0x80
 800e752:	d107      	bne.n	800e764 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e75c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e75e:	6878      	ldr	r0, [r7, #4]
 800e760:	f000 fb5e 	bl	800ee20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	691b      	ldr	r3, [r3, #16]
 800e76a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e76e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e772:	d10e      	bne.n	800e792 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	68db      	ldr	r3, [r3, #12]
 800e77a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e77e:	2b80      	cmp	r3, #128	; 0x80
 800e780:	d107      	bne.n	800e792 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e78a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e78c:	6878      	ldr	r0, [r7, #4]
 800e78e:	f000 fb51 	bl	800ee34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	691b      	ldr	r3, [r3, #16]
 800e798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e79c:	2b40      	cmp	r3, #64	; 0x40
 800e79e:	d10e      	bne.n	800e7be <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	68db      	ldr	r3, [r3, #12]
 800e7a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e7aa:	2b40      	cmp	r3, #64	; 0x40
 800e7ac:	d107      	bne.n	800e7be <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e7b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e7b8:	6878      	ldr	r0, [r7, #4]
 800e7ba:	f000 f931 	bl	800ea20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	691b      	ldr	r3, [r3, #16]
 800e7c4:	f003 0320 	and.w	r3, r3, #32
 800e7c8:	2b20      	cmp	r3, #32
 800e7ca:	d10e      	bne.n	800e7ea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	68db      	ldr	r3, [r3, #12]
 800e7d2:	f003 0320 	and.w	r3, r3, #32
 800e7d6:	2b20      	cmp	r3, #32
 800e7d8:	d107      	bne.n	800e7ea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	f06f 0220 	mvn.w	r2, #32
 800e7e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e7e4:	6878      	ldr	r0, [r7, #4]
 800e7e6:	f000 fb11 	bl	800ee0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e7ea:	bf00      	nop
 800e7ec:	3708      	adds	r7, #8
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	bd80      	pop	{r7, pc}
	...

0800e7f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e7f4:	b580      	push	{r7, lr}
 800e7f6:	b084      	sub	sp, #16
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	6078      	str	r0, [r7, #4]
 800e7fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e7fe:	2300      	movs	r3, #0
 800e800:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e808:	2b01      	cmp	r3, #1
 800e80a:	d101      	bne.n	800e810 <HAL_TIM_ConfigClockSource+0x1c>
 800e80c:	2302      	movs	r3, #2
 800e80e:	e0dc      	b.n	800e9ca <HAL_TIM_ConfigClockSource+0x1d6>
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	2201      	movs	r2, #1
 800e814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	2202      	movs	r2, #2
 800e81c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	689b      	ldr	r3, [r3, #8]
 800e826:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e828:	68ba      	ldr	r2, [r7, #8]
 800e82a:	4b6a      	ldr	r3, [pc, #424]	; (800e9d4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800e82c:	4013      	ands	r3, r2
 800e82e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e830:	68bb      	ldr	r3, [r7, #8]
 800e832:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e836:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	68ba      	ldr	r2, [r7, #8]
 800e83e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e840:	683b      	ldr	r3, [r7, #0]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	4a64      	ldr	r2, [pc, #400]	; (800e9d8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800e846:	4293      	cmp	r3, r2
 800e848:	f000 80a9 	beq.w	800e99e <HAL_TIM_ConfigClockSource+0x1aa>
 800e84c:	4a62      	ldr	r2, [pc, #392]	; (800e9d8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800e84e:	4293      	cmp	r3, r2
 800e850:	f200 80ae 	bhi.w	800e9b0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e854:	4a61      	ldr	r2, [pc, #388]	; (800e9dc <HAL_TIM_ConfigClockSource+0x1e8>)
 800e856:	4293      	cmp	r3, r2
 800e858:	f000 80a1 	beq.w	800e99e <HAL_TIM_ConfigClockSource+0x1aa>
 800e85c:	4a5f      	ldr	r2, [pc, #380]	; (800e9dc <HAL_TIM_ConfigClockSource+0x1e8>)
 800e85e:	4293      	cmp	r3, r2
 800e860:	f200 80a6 	bhi.w	800e9b0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e864:	4a5e      	ldr	r2, [pc, #376]	; (800e9e0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800e866:	4293      	cmp	r3, r2
 800e868:	f000 8099 	beq.w	800e99e <HAL_TIM_ConfigClockSource+0x1aa>
 800e86c:	4a5c      	ldr	r2, [pc, #368]	; (800e9e0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800e86e:	4293      	cmp	r3, r2
 800e870:	f200 809e 	bhi.w	800e9b0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e874:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800e878:	f000 8091 	beq.w	800e99e <HAL_TIM_ConfigClockSource+0x1aa>
 800e87c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800e880:	f200 8096 	bhi.w	800e9b0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e884:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e888:	f000 8089 	beq.w	800e99e <HAL_TIM_ConfigClockSource+0x1aa>
 800e88c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e890:	f200 808e 	bhi.w	800e9b0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e894:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e898:	d03e      	beq.n	800e918 <HAL_TIM_ConfigClockSource+0x124>
 800e89a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e89e:	f200 8087 	bhi.w	800e9b0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e8a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e8a6:	f000 8086 	beq.w	800e9b6 <HAL_TIM_ConfigClockSource+0x1c2>
 800e8aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e8ae:	d87f      	bhi.n	800e9b0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e8b0:	2b70      	cmp	r3, #112	; 0x70
 800e8b2:	d01a      	beq.n	800e8ea <HAL_TIM_ConfigClockSource+0xf6>
 800e8b4:	2b70      	cmp	r3, #112	; 0x70
 800e8b6:	d87b      	bhi.n	800e9b0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e8b8:	2b60      	cmp	r3, #96	; 0x60
 800e8ba:	d050      	beq.n	800e95e <HAL_TIM_ConfigClockSource+0x16a>
 800e8bc:	2b60      	cmp	r3, #96	; 0x60
 800e8be:	d877      	bhi.n	800e9b0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e8c0:	2b50      	cmp	r3, #80	; 0x50
 800e8c2:	d03c      	beq.n	800e93e <HAL_TIM_ConfigClockSource+0x14a>
 800e8c4:	2b50      	cmp	r3, #80	; 0x50
 800e8c6:	d873      	bhi.n	800e9b0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e8c8:	2b40      	cmp	r3, #64	; 0x40
 800e8ca:	d058      	beq.n	800e97e <HAL_TIM_ConfigClockSource+0x18a>
 800e8cc:	2b40      	cmp	r3, #64	; 0x40
 800e8ce:	d86f      	bhi.n	800e9b0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e8d0:	2b30      	cmp	r3, #48	; 0x30
 800e8d2:	d064      	beq.n	800e99e <HAL_TIM_ConfigClockSource+0x1aa>
 800e8d4:	2b30      	cmp	r3, #48	; 0x30
 800e8d6:	d86b      	bhi.n	800e9b0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e8d8:	2b20      	cmp	r3, #32
 800e8da:	d060      	beq.n	800e99e <HAL_TIM_ConfigClockSource+0x1aa>
 800e8dc:	2b20      	cmp	r3, #32
 800e8de:	d867      	bhi.n	800e9b0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d05c      	beq.n	800e99e <HAL_TIM_ConfigClockSource+0x1aa>
 800e8e4:	2b10      	cmp	r3, #16
 800e8e6:	d05a      	beq.n	800e99e <HAL_TIM_ConfigClockSource+0x1aa>
 800e8e8:	e062      	b.n	800e9b0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	6818      	ldr	r0, [r3, #0]
 800e8ee:	683b      	ldr	r3, [r7, #0]
 800e8f0:	6899      	ldr	r1, [r3, #8]
 800e8f2:	683b      	ldr	r3, [r7, #0]
 800e8f4:	685a      	ldr	r2, [r3, #4]
 800e8f6:	683b      	ldr	r3, [r7, #0]
 800e8f8:	68db      	ldr	r3, [r3, #12]
 800e8fa:	f000 f9b3 	bl	800ec64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	689b      	ldr	r3, [r3, #8]
 800e904:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e906:	68bb      	ldr	r3, [r7, #8]
 800e908:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e90c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	68ba      	ldr	r2, [r7, #8]
 800e914:	609a      	str	r2, [r3, #8]
      break;
 800e916:	e04f      	b.n	800e9b8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	6818      	ldr	r0, [r3, #0]
 800e91c:	683b      	ldr	r3, [r7, #0]
 800e91e:	6899      	ldr	r1, [r3, #8]
 800e920:	683b      	ldr	r3, [r7, #0]
 800e922:	685a      	ldr	r2, [r3, #4]
 800e924:	683b      	ldr	r3, [r7, #0]
 800e926:	68db      	ldr	r3, [r3, #12]
 800e928:	f000 f99c 	bl	800ec64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	689a      	ldr	r2, [r3, #8]
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e93a:	609a      	str	r2, [r3, #8]
      break;
 800e93c:	e03c      	b.n	800e9b8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	6818      	ldr	r0, [r3, #0]
 800e942:	683b      	ldr	r3, [r7, #0]
 800e944:	6859      	ldr	r1, [r3, #4]
 800e946:	683b      	ldr	r3, [r7, #0]
 800e948:	68db      	ldr	r3, [r3, #12]
 800e94a:	461a      	mov	r2, r3
 800e94c:	f000 f90c 	bl	800eb68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	2150      	movs	r1, #80	; 0x50
 800e956:	4618      	mov	r0, r3
 800e958:	f000 f966 	bl	800ec28 <TIM_ITRx_SetConfig>
      break;
 800e95c:	e02c      	b.n	800e9b8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	6818      	ldr	r0, [r3, #0]
 800e962:	683b      	ldr	r3, [r7, #0]
 800e964:	6859      	ldr	r1, [r3, #4]
 800e966:	683b      	ldr	r3, [r7, #0]
 800e968:	68db      	ldr	r3, [r3, #12]
 800e96a:	461a      	mov	r2, r3
 800e96c:	f000 f92b 	bl	800ebc6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	2160      	movs	r1, #96	; 0x60
 800e976:	4618      	mov	r0, r3
 800e978:	f000 f956 	bl	800ec28 <TIM_ITRx_SetConfig>
      break;
 800e97c:	e01c      	b.n	800e9b8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	6818      	ldr	r0, [r3, #0]
 800e982:	683b      	ldr	r3, [r7, #0]
 800e984:	6859      	ldr	r1, [r3, #4]
 800e986:	683b      	ldr	r3, [r7, #0]
 800e988:	68db      	ldr	r3, [r3, #12]
 800e98a:	461a      	mov	r2, r3
 800e98c:	f000 f8ec 	bl	800eb68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	2140      	movs	r1, #64	; 0x40
 800e996:	4618      	mov	r0, r3
 800e998:	f000 f946 	bl	800ec28 <TIM_ITRx_SetConfig>
      break;
 800e99c:	e00c      	b.n	800e9b8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	681a      	ldr	r2, [r3, #0]
 800e9a2:	683b      	ldr	r3, [r7, #0]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	4619      	mov	r1, r3
 800e9a8:	4610      	mov	r0, r2
 800e9aa:	f000 f93d 	bl	800ec28 <TIM_ITRx_SetConfig>
      break;
 800e9ae:	e003      	b.n	800e9b8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800e9b0:	2301      	movs	r3, #1
 800e9b2:	73fb      	strb	r3, [r7, #15]
      break;
 800e9b4:	e000      	b.n	800e9b8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800e9b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	2201      	movs	r2, #1
 800e9bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	2200      	movs	r2, #0
 800e9c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e9c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	3710      	adds	r7, #16
 800e9ce:	46bd      	mov	sp, r7
 800e9d0:	bd80      	pop	{r7, pc}
 800e9d2:	bf00      	nop
 800e9d4:	ffceff88 	.word	0xffceff88
 800e9d8:	00100040 	.word	0x00100040
 800e9dc:	00100030 	.word	0x00100030
 800e9e0:	00100020 	.word	0x00100020

0800e9e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e9e4:	b480      	push	{r7}
 800e9e6:	b083      	sub	sp, #12
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e9ec:	bf00      	nop
 800e9ee:	370c      	adds	r7, #12
 800e9f0:	46bd      	mov	sp, r7
 800e9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f6:	4770      	bx	lr

0800e9f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e9f8:	b480      	push	{r7}
 800e9fa:	b083      	sub	sp, #12
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ea00:	bf00      	nop
 800ea02:	370c      	adds	r7, #12
 800ea04:	46bd      	mov	sp, r7
 800ea06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea0a:	4770      	bx	lr

0800ea0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ea0c:	b480      	push	{r7}
 800ea0e:	b083      	sub	sp, #12
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ea14:	bf00      	nop
 800ea16:	370c      	adds	r7, #12
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1e:	4770      	bx	lr

0800ea20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ea20:	b480      	push	{r7}
 800ea22:	b083      	sub	sp, #12
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ea28:	bf00      	nop
 800ea2a:	370c      	adds	r7, #12
 800ea2c:	46bd      	mov	sp, r7
 800ea2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea32:	4770      	bx	lr

0800ea34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ea34:	b480      	push	{r7}
 800ea36:	b085      	sub	sp, #20
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	6078      	str	r0, [r7, #4]
 800ea3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	4a40      	ldr	r2, [pc, #256]	; (800eb48 <TIM_Base_SetConfig+0x114>)
 800ea48:	4293      	cmp	r3, r2
 800ea4a:	d013      	beq.n	800ea74 <TIM_Base_SetConfig+0x40>
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ea52:	d00f      	beq.n	800ea74 <TIM_Base_SetConfig+0x40>
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	4a3d      	ldr	r2, [pc, #244]	; (800eb4c <TIM_Base_SetConfig+0x118>)
 800ea58:	4293      	cmp	r3, r2
 800ea5a:	d00b      	beq.n	800ea74 <TIM_Base_SetConfig+0x40>
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	4a3c      	ldr	r2, [pc, #240]	; (800eb50 <TIM_Base_SetConfig+0x11c>)
 800ea60:	4293      	cmp	r3, r2
 800ea62:	d007      	beq.n	800ea74 <TIM_Base_SetConfig+0x40>
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	4a3b      	ldr	r2, [pc, #236]	; (800eb54 <TIM_Base_SetConfig+0x120>)
 800ea68:	4293      	cmp	r3, r2
 800ea6a:	d003      	beq.n	800ea74 <TIM_Base_SetConfig+0x40>
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	4a3a      	ldr	r2, [pc, #232]	; (800eb58 <TIM_Base_SetConfig+0x124>)
 800ea70:	4293      	cmp	r3, r2
 800ea72:	d108      	bne.n	800ea86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ea7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ea7c:	683b      	ldr	r3, [r7, #0]
 800ea7e:	685b      	ldr	r3, [r3, #4]
 800ea80:	68fa      	ldr	r2, [r7, #12]
 800ea82:	4313      	orrs	r3, r2
 800ea84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	4a2f      	ldr	r2, [pc, #188]	; (800eb48 <TIM_Base_SetConfig+0x114>)
 800ea8a:	4293      	cmp	r3, r2
 800ea8c:	d01f      	beq.n	800eace <TIM_Base_SetConfig+0x9a>
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ea94:	d01b      	beq.n	800eace <TIM_Base_SetConfig+0x9a>
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	4a2c      	ldr	r2, [pc, #176]	; (800eb4c <TIM_Base_SetConfig+0x118>)
 800ea9a:	4293      	cmp	r3, r2
 800ea9c:	d017      	beq.n	800eace <TIM_Base_SetConfig+0x9a>
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	4a2b      	ldr	r2, [pc, #172]	; (800eb50 <TIM_Base_SetConfig+0x11c>)
 800eaa2:	4293      	cmp	r3, r2
 800eaa4:	d013      	beq.n	800eace <TIM_Base_SetConfig+0x9a>
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	4a2a      	ldr	r2, [pc, #168]	; (800eb54 <TIM_Base_SetConfig+0x120>)
 800eaaa:	4293      	cmp	r3, r2
 800eaac:	d00f      	beq.n	800eace <TIM_Base_SetConfig+0x9a>
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	4a29      	ldr	r2, [pc, #164]	; (800eb58 <TIM_Base_SetConfig+0x124>)
 800eab2:	4293      	cmp	r3, r2
 800eab4:	d00b      	beq.n	800eace <TIM_Base_SetConfig+0x9a>
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	4a28      	ldr	r2, [pc, #160]	; (800eb5c <TIM_Base_SetConfig+0x128>)
 800eaba:	4293      	cmp	r3, r2
 800eabc:	d007      	beq.n	800eace <TIM_Base_SetConfig+0x9a>
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	4a27      	ldr	r2, [pc, #156]	; (800eb60 <TIM_Base_SetConfig+0x12c>)
 800eac2:	4293      	cmp	r3, r2
 800eac4:	d003      	beq.n	800eace <TIM_Base_SetConfig+0x9a>
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	4a26      	ldr	r2, [pc, #152]	; (800eb64 <TIM_Base_SetConfig+0x130>)
 800eaca:	4293      	cmp	r3, r2
 800eacc:	d108      	bne.n	800eae0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ead4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ead6:	683b      	ldr	r3, [r7, #0]
 800ead8:	68db      	ldr	r3, [r3, #12]
 800eada:	68fa      	ldr	r2, [r7, #12]
 800eadc:	4313      	orrs	r3, r2
 800eade:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800eae6:	683b      	ldr	r3, [r7, #0]
 800eae8:	695b      	ldr	r3, [r3, #20]
 800eaea:	4313      	orrs	r3, r2
 800eaec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	68fa      	ldr	r2, [r7, #12]
 800eaf2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800eaf4:	683b      	ldr	r3, [r7, #0]
 800eaf6:	689a      	ldr	r2, [r3, #8]
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800eafc:	683b      	ldr	r3, [r7, #0]
 800eafe:	681a      	ldr	r2, [r3, #0]
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	4a10      	ldr	r2, [pc, #64]	; (800eb48 <TIM_Base_SetConfig+0x114>)
 800eb08:	4293      	cmp	r3, r2
 800eb0a:	d00f      	beq.n	800eb2c <TIM_Base_SetConfig+0xf8>
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	4a12      	ldr	r2, [pc, #72]	; (800eb58 <TIM_Base_SetConfig+0x124>)
 800eb10:	4293      	cmp	r3, r2
 800eb12:	d00b      	beq.n	800eb2c <TIM_Base_SetConfig+0xf8>
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	4a11      	ldr	r2, [pc, #68]	; (800eb5c <TIM_Base_SetConfig+0x128>)
 800eb18:	4293      	cmp	r3, r2
 800eb1a:	d007      	beq.n	800eb2c <TIM_Base_SetConfig+0xf8>
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	4a10      	ldr	r2, [pc, #64]	; (800eb60 <TIM_Base_SetConfig+0x12c>)
 800eb20:	4293      	cmp	r3, r2
 800eb22:	d003      	beq.n	800eb2c <TIM_Base_SetConfig+0xf8>
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	4a0f      	ldr	r2, [pc, #60]	; (800eb64 <TIM_Base_SetConfig+0x130>)
 800eb28:	4293      	cmp	r3, r2
 800eb2a:	d103      	bne.n	800eb34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800eb2c:	683b      	ldr	r3, [r7, #0]
 800eb2e:	691a      	ldr	r2, [r3, #16]
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	2201      	movs	r2, #1
 800eb38:	615a      	str	r2, [r3, #20]
}
 800eb3a:	bf00      	nop
 800eb3c:	3714      	adds	r7, #20
 800eb3e:	46bd      	mov	sp, r7
 800eb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb44:	4770      	bx	lr
 800eb46:	bf00      	nop
 800eb48:	40010000 	.word	0x40010000
 800eb4c:	40000400 	.word	0x40000400
 800eb50:	40000800 	.word	0x40000800
 800eb54:	40000c00 	.word	0x40000c00
 800eb58:	40010400 	.word	0x40010400
 800eb5c:	40014000 	.word	0x40014000
 800eb60:	40014400 	.word	0x40014400
 800eb64:	40014800 	.word	0x40014800

0800eb68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800eb68:	b480      	push	{r7}
 800eb6a:	b087      	sub	sp, #28
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	60f8      	str	r0, [r7, #12]
 800eb70:	60b9      	str	r1, [r7, #8]
 800eb72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	6a1b      	ldr	r3, [r3, #32]
 800eb78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	6a1b      	ldr	r3, [r3, #32]
 800eb7e:	f023 0201 	bic.w	r2, r3, #1
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	699b      	ldr	r3, [r3, #24]
 800eb8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800eb8c:	693b      	ldr	r3, [r7, #16]
 800eb8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800eb92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	011b      	lsls	r3, r3, #4
 800eb98:	693a      	ldr	r2, [r7, #16]
 800eb9a:	4313      	orrs	r3, r2
 800eb9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800eb9e:	697b      	ldr	r3, [r7, #20]
 800eba0:	f023 030a 	bic.w	r3, r3, #10
 800eba4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800eba6:	697a      	ldr	r2, [r7, #20]
 800eba8:	68bb      	ldr	r3, [r7, #8]
 800ebaa:	4313      	orrs	r3, r2
 800ebac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	693a      	ldr	r2, [r7, #16]
 800ebb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	697a      	ldr	r2, [r7, #20]
 800ebb8:	621a      	str	r2, [r3, #32]
}
 800ebba:	bf00      	nop
 800ebbc:	371c      	adds	r7, #28
 800ebbe:	46bd      	mov	sp, r7
 800ebc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc4:	4770      	bx	lr

0800ebc6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ebc6:	b480      	push	{r7}
 800ebc8:	b087      	sub	sp, #28
 800ebca:	af00      	add	r7, sp, #0
 800ebcc:	60f8      	str	r0, [r7, #12]
 800ebce:	60b9      	str	r1, [r7, #8]
 800ebd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	6a1b      	ldr	r3, [r3, #32]
 800ebd6:	f023 0210 	bic.w	r2, r3, #16
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	699b      	ldr	r3, [r3, #24]
 800ebe2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	6a1b      	ldr	r3, [r3, #32]
 800ebe8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ebea:	697b      	ldr	r3, [r7, #20]
 800ebec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ebf0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	031b      	lsls	r3, r3, #12
 800ebf6:	697a      	ldr	r2, [r7, #20]
 800ebf8:	4313      	orrs	r3, r2
 800ebfa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ebfc:	693b      	ldr	r3, [r7, #16]
 800ebfe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ec02:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ec04:	68bb      	ldr	r3, [r7, #8]
 800ec06:	011b      	lsls	r3, r3, #4
 800ec08:	693a      	ldr	r2, [r7, #16]
 800ec0a:	4313      	orrs	r3, r2
 800ec0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	697a      	ldr	r2, [r7, #20]
 800ec12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	693a      	ldr	r2, [r7, #16]
 800ec18:	621a      	str	r2, [r3, #32]
}
 800ec1a:	bf00      	nop
 800ec1c:	371c      	adds	r7, #28
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec24:	4770      	bx	lr
	...

0800ec28 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ec28:	b480      	push	{r7}
 800ec2a:	b085      	sub	sp, #20
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	6078      	str	r0, [r7, #4]
 800ec30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	689b      	ldr	r3, [r3, #8]
 800ec36:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ec38:	68fa      	ldr	r2, [r7, #12]
 800ec3a:	4b09      	ldr	r3, [pc, #36]	; (800ec60 <TIM_ITRx_SetConfig+0x38>)
 800ec3c:	4013      	ands	r3, r2
 800ec3e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ec40:	683a      	ldr	r2, [r7, #0]
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	4313      	orrs	r3, r2
 800ec46:	f043 0307 	orr.w	r3, r3, #7
 800ec4a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	68fa      	ldr	r2, [r7, #12]
 800ec50:	609a      	str	r2, [r3, #8]
}
 800ec52:	bf00      	nop
 800ec54:	3714      	adds	r7, #20
 800ec56:	46bd      	mov	sp, r7
 800ec58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec5c:	4770      	bx	lr
 800ec5e:	bf00      	nop
 800ec60:	ffcfff8f 	.word	0xffcfff8f

0800ec64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ec64:	b480      	push	{r7}
 800ec66:	b087      	sub	sp, #28
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	60f8      	str	r0, [r7, #12]
 800ec6c:	60b9      	str	r1, [r7, #8]
 800ec6e:	607a      	str	r2, [r7, #4]
 800ec70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	689b      	ldr	r3, [r3, #8]
 800ec76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ec78:	697b      	ldr	r3, [r7, #20]
 800ec7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ec7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ec80:	683b      	ldr	r3, [r7, #0]
 800ec82:	021a      	lsls	r2, r3, #8
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	431a      	orrs	r2, r3
 800ec88:	68bb      	ldr	r3, [r7, #8]
 800ec8a:	4313      	orrs	r3, r2
 800ec8c:	697a      	ldr	r2, [r7, #20]
 800ec8e:	4313      	orrs	r3, r2
 800ec90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	697a      	ldr	r2, [r7, #20]
 800ec96:	609a      	str	r2, [r3, #8]
}
 800ec98:	bf00      	nop
 800ec9a:	371c      	adds	r7, #28
 800ec9c:	46bd      	mov	sp, r7
 800ec9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca2:	4770      	bx	lr

0800eca4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800eca4:	b480      	push	{r7}
 800eca6:	b087      	sub	sp, #28
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	60f8      	str	r0, [r7, #12]
 800ecac:	60b9      	str	r1, [r7, #8]
 800ecae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ecb0:	68bb      	ldr	r3, [r7, #8]
 800ecb2:	f003 031f 	and.w	r3, r3, #31
 800ecb6:	2201      	movs	r2, #1
 800ecb8:	fa02 f303 	lsl.w	r3, r2, r3
 800ecbc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	6a1a      	ldr	r2, [r3, #32]
 800ecc2:	697b      	ldr	r3, [r7, #20]
 800ecc4:	43db      	mvns	r3, r3
 800ecc6:	401a      	ands	r2, r3
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	6a1a      	ldr	r2, [r3, #32]
 800ecd0:	68bb      	ldr	r3, [r7, #8]
 800ecd2:	f003 031f 	and.w	r3, r3, #31
 800ecd6:	6879      	ldr	r1, [r7, #4]
 800ecd8:	fa01 f303 	lsl.w	r3, r1, r3
 800ecdc:	431a      	orrs	r2, r3
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	621a      	str	r2, [r3, #32]
}
 800ece2:	bf00      	nop
 800ece4:	371c      	adds	r7, #28
 800ece6:	46bd      	mov	sp, r7
 800ece8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecec:	4770      	bx	lr
	...

0800ecf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ecf0:	b480      	push	{r7}
 800ecf2:	b085      	sub	sp, #20
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	6078      	str	r0, [r7, #4]
 800ecf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ed00:	2b01      	cmp	r3, #1
 800ed02:	d101      	bne.n	800ed08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ed04:	2302      	movs	r3, #2
 800ed06:	e06d      	b.n	800ede4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	2201      	movs	r2, #1
 800ed0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	2202      	movs	r2, #2
 800ed14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	685b      	ldr	r3, [r3, #4]
 800ed1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	689b      	ldr	r3, [r3, #8]
 800ed26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	4a30      	ldr	r2, [pc, #192]	; (800edf0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ed2e:	4293      	cmp	r3, r2
 800ed30:	d004      	beq.n	800ed3c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	4a2f      	ldr	r2, [pc, #188]	; (800edf4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ed38:	4293      	cmp	r3, r2
 800ed3a:	d108      	bne.n	800ed4e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ed42:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ed44:	683b      	ldr	r3, [r7, #0]
 800ed46:	685b      	ldr	r3, [r3, #4]
 800ed48:	68fa      	ldr	r2, [r7, #12]
 800ed4a:	4313      	orrs	r3, r2
 800ed4c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ed54:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ed56:	683b      	ldr	r3, [r7, #0]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	68fa      	ldr	r2, [r7, #12]
 800ed5c:	4313      	orrs	r3, r2
 800ed5e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	68fa      	ldr	r2, [r7, #12]
 800ed66:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	4a20      	ldr	r2, [pc, #128]	; (800edf0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ed6e:	4293      	cmp	r3, r2
 800ed70:	d022      	beq.n	800edb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ed7a:	d01d      	beq.n	800edb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	4a1d      	ldr	r2, [pc, #116]	; (800edf8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ed82:	4293      	cmp	r3, r2
 800ed84:	d018      	beq.n	800edb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	4a1c      	ldr	r2, [pc, #112]	; (800edfc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ed8c:	4293      	cmp	r3, r2
 800ed8e:	d013      	beq.n	800edb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	4a1a      	ldr	r2, [pc, #104]	; (800ee00 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ed96:	4293      	cmp	r3, r2
 800ed98:	d00e      	beq.n	800edb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	4a15      	ldr	r2, [pc, #84]	; (800edf4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800eda0:	4293      	cmp	r3, r2
 800eda2:	d009      	beq.n	800edb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	4a16      	ldr	r2, [pc, #88]	; (800ee04 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800edaa:	4293      	cmp	r3, r2
 800edac:	d004      	beq.n	800edb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	4a15      	ldr	r2, [pc, #84]	; (800ee08 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800edb4:	4293      	cmp	r3, r2
 800edb6:	d10c      	bne.n	800edd2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800edb8:	68bb      	ldr	r3, [r7, #8]
 800edba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800edbe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800edc0:	683b      	ldr	r3, [r7, #0]
 800edc2:	689b      	ldr	r3, [r3, #8]
 800edc4:	68ba      	ldr	r2, [r7, #8]
 800edc6:	4313      	orrs	r3, r2
 800edc8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	68ba      	ldr	r2, [r7, #8]
 800edd0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	2201      	movs	r2, #1
 800edd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	2200      	movs	r2, #0
 800edde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ede2:	2300      	movs	r3, #0
}
 800ede4:	4618      	mov	r0, r3
 800ede6:	3714      	adds	r7, #20
 800ede8:	46bd      	mov	sp, r7
 800edea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edee:	4770      	bx	lr
 800edf0:	40010000 	.word	0x40010000
 800edf4:	40010400 	.word	0x40010400
 800edf8:	40000400 	.word	0x40000400
 800edfc:	40000800 	.word	0x40000800
 800ee00:	40000c00 	.word	0x40000c00
 800ee04:	40001800 	.word	0x40001800
 800ee08:	40014000 	.word	0x40014000

0800ee0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ee0c:	b480      	push	{r7}
 800ee0e:	b083      	sub	sp, #12
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ee14:	bf00      	nop
 800ee16:	370c      	adds	r7, #12
 800ee18:	46bd      	mov	sp, r7
 800ee1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee1e:	4770      	bx	lr

0800ee20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ee20:	b480      	push	{r7}
 800ee22:	b083      	sub	sp, #12
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ee28:	bf00      	nop
 800ee2a:	370c      	adds	r7, #12
 800ee2c:	46bd      	mov	sp, r7
 800ee2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee32:	4770      	bx	lr

0800ee34 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ee34:	b480      	push	{r7}
 800ee36:	b083      	sub	sp, #12
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ee3c:	bf00      	nop
 800ee3e:	370c      	adds	r7, #12
 800ee40:	46bd      	mov	sp, r7
 800ee42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee46:	4770      	bx	lr

0800ee48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ee48:	b580      	push	{r7, lr}
 800ee4a:	b082      	sub	sp, #8
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d101      	bne.n	800ee5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ee56:	2301      	movs	r3, #1
 800ee58:	e042      	b.n	800eee0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d106      	bne.n	800ee72 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	2200      	movs	r2, #0
 800ee68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ee6c:	6878      	ldr	r0, [r7, #4]
 800ee6e:	f7f6 ff41 	bl	8005cf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	2224      	movs	r2, #36	; 0x24
 800ee76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	681a      	ldr	r2, [r3, #0]
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	f022 0201 	bic.w	r2, r2, #1
 800ee88:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ee8a:	6878      	ldr	r0, [r7, #4]
 800ee8c:	f000 fcea 	bl	800f864 <UART_SetConfig>
 800ee90:	4603      	mov	r3, r0
 800ee92:	2b01      	cmp	r3, #1
 800ee94:	d101      	bne.n	800ee9a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ee96:	2301      	movs	r3, #1
 800ee98:	e022      	b.n	800eee0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d002      	beq.n	800eea8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800eea2:	6878      	ldr	r0, [r7, #4]
 800eea4:	f001 fa46 	bl	8010334 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	685a      	ldr	r2, [r3, #4]
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800eeb6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	689a      	ldr	r2, [r3, #8]
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800eec6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	681a      	ldr	r2, [r3, #0]
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	f042 0201 	orr.w	r2, r2, #1
 800eed6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800eed8:	6878      	ldr	r0, [r7, #4]
 800eeda:	f001 facd 	bl	8010478 <UART_CheckIdleState>
 800eede:	4603      	mov	r3, r0
}
 800eee0:	4618      	mov	r0, r3
 800eee2:	3708      	adds	r7, #8
 800eee4:	46bd      	mov	sp, r7
 800eee6:	bd80      	pop	{r7, pc}

0800eee8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800eee8:	b580      	push	{r7, lr}
 800eeea:	b08a      	sub	sp, #40	; 0x28
 800eeec:	af02      	add	r7, sp, #8
 800eeee:	60f8      	str	r0, [r7, #12]
 800eef0:	60b9      	str	r1, [r7, #8]
 800eef2:	603b      	str	r3, [r7, #0]
 800eef4:	4613      	mov	r3, r2
 800eef6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eefe:	2b20      	cmp	r3, #32
 800ef00:	f040 8083 	bne.w	800f00a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800ef04:	68bb      	ldr	r3, [r7, #8]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d002      	beq.n	800ef10 <HAL_UART_Transmit+0x28>
 800ef0a:	88fb      	ldrh	r3, [r7, #6]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d101      	bne.n	800ef14 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800ef10:	2301      	movs	r3, #1
 800ef12:	e07b      	b.n	800f00c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ef1a:	2b01      	cmp	r3, #1
 800ef1c:	d101      	bne.n	800ef22 <HAL_UART_Transmit+0x3a>
 800ef1e:	2302      	movs	r3, #2
 800ef20:	e074      	b.n	800f00c <HAL_UART_Transmit+0x124>
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	2201      	movs	r2, #1
 800ef26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	2200      	movs	r2, #0
 800ef2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	2221      	movs	r2, #33	; 0x21
 800ef36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ef3a:	f7f8 f96b 	bl	8007214 <HAL_GetTick>
 800ef3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	88fa      	ldrh	r2, [r7, #6]
 800ef44:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	88fa      	ldrh	r2, [r7, #6]
 800ef4c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	689b      	ldr	r3, [r3, #8]
 800ef54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ef58:	d108      	bne.n	800ef6c <HAL_UART_Transmit+0x84>
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	691b      	ldr	r3, [r3, #16]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d104      	bne.n	800ef6c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800ef62:	2300      	movs	r3, #0
 800ef64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ef66:	68bb      	ldr	r3, [r7, #8]
 800ef68:	61bb      	str	r3, [r7, #24]
 800ef6a:	e003      	b.n	800ef74 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800ef6c:	68bb      	ldr	r3, [r7, #8]
 800ef6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ef70:	2300      	movs	r3, #0
 800ef72:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	2200      	movs	r2, #0
 800ef78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800ef7c:	e02c      	b.n	800efd8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ef7e:	683b      	ldr	r3, [r7, #0]
 800ef80:	9300      	str	r3, [sp, #0]
 800ef82:	697b      	ldr	r3, [r7, #20]
 800ef84:	2200      	movs	r2, #0
 800ef86:	2180      	movs	r1, #128	; 0x80
 800ef88:	68f8      	ldr	r0, [r7, #12]
 800ef8a:	f001 fac0 	bl	801050e <UART_WaitOnFlagUntilTimeout>
 800ef8e:	4603      	mov	r3, r0
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d001      	beq.n	800ef98 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800ef94:	2303      	movs	r3, #3
 800ef96:	e039      	b.n	800f00c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800ef98:	69fb      	ldr	r3, [r7, #28]
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d10b      	bne.n	800efb6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ef9e:	69bb      	ldr	r3, [r7, #24]
 800efa0:	881b      	ldrh	r3, [r3, #0]
 800efa2:	461a      	mov	r2, r3
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800efac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800efae:	69bb      	ldr	r3, [r7, #24]
 800efb0:	3302      	adds	r3, #2
 800efb2:	61bb      	str	r3, [r7, #24]
 800efb4:	e007      	b.n	800efc6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800efb6:	69fb      	ldr	r3, [r7, #28]
 800efb8:	781a      	ldrb	r2, [r3, #0]
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800efc0:	69fb      	ldr	r3, [r7, #28]
 800efc2:	3301      	adds	r3, #1
 800efc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800efcc:	b29b      	uxth	r3, r3
 800efce:	3b01      	subs	r3, #1
 800efd0:	b29a      	uxth	r2, r3
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800efde:	b29b      	uxth	r3, r3
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d1cc      	bne.n	800ef7e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800efe4:	683b      	ldr	r3, [r7, #0]
 800efe6:	9300      	str	r3, [sp, #0]
 800efe8:	697b      	ldr	r3, [r7, #20]
 800efea:	2200      	movs	r2, #0
 800efec:	2140      	movs	r1, #64	; 0x40
 800efee:	68f8      	ldr	r0, [r7, #12]
 800eff0:	f001 fa8d 	bl	801050e <UART_WaitOnFlagUntilTimeout>
 800eff4:	4603      	mov	r3, r0
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d001      	beq.n	800effe <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800effa:	2303      	movs	r3, #3
 800effc:	e006      	b.n	800f00c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	2220      	movs	r2, #32
 800f002:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800f006:	2300      	movs	r3, #0
 800f008:	e000      	b.n	800f00c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800f00a:	2302      	movs	r3, #2
  }
}
 800f00c:	4618      	mov	r0, r3
 800f00e:	3720      	adds	r7, #32
 800f010:	46bd      	mov	sp, r7
 800f012:	bd80      	pop	{r7, pc}

0800f014 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f014:	b580      	push	{r7, lr}
 800f016:	b08a      	sub	sp, #40	; 0x28
 800f018:	af00      	add	r7, sp, #0
 800f01a:	60f8      	str	r0, [r7, #12]
 800f01c:	60b9      	str	r1, [r7, #8]
 800f01e:	4613      	mov	r3, r2
 800f020:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f028:	2b20      	cmp	r3, #32
 800f02a:	d142      	bne.n	800f0b2 <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800f02c:	68bb      	ldr	r3, [r7, #8]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d002      	beq.n	800f038 <HAL_UART_Receive_DMA+0x24>
 800f032:	88fb      	ldrh	r3, [r7, #6]
 800f034:	2b00      	cmp	r3, #0
 800f036:	d101      	bne.n	800f03c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800f038:	2301      	movs	r3, #1
 800f03a:	e03b      	b.n	800f0b4 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f042:	2b01      	cmp	r3, #1
 800f044:	d101      	bne.n	800f04a <HAL_UART_Receive_DMA+0x36>
 800f046:	2302      	movs	r3, #2
 800f048:	e034      	b.n	800f0b4 <HAL_UART_Receive_DMA+0xa0>
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	2201      	movs	r2, #1
 800f04e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	2200      	movs	r2, #0
 800f056:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	4a17      	ldr	r2, [pc, #92]	; (800f0bc <HAL_UART_Receive_DMA+0xa8>)
 800f05e:	4293      	cmp	r3, r2
 800f060:	d01f      	beq.n	800f0a2 <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	685b      	ldr	r3, [r3, #4]
 800f068:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d018      	beq.n	800f0a2 <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f076:	697b      	ldr	r3, [r7, #20]
 800f078:	e853 3f00 	ldrex	r3, [r3]
 800f07c:	613b      	str	r3, [r7, #16]
   return(result);
 800f07e:	693b      	ldr	r3, [r7, #16]
 800f080:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f084:	627b      	str	r3, [r7, #36]	; 0x24
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	461a      	mov	r2, r3
 800f08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f08e:	623b      	str	r3, [r7, #32]
 800f090:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f092:	69f9      	ldr	r1, [r7, #28]
 800f094:	6a3a      	ldr	r2, [r7, #32]
 800f096:	e841 2300 	strex	r3, r2, [r1]
 800f09a:	61bb      	str	r3, [r7, #24]
   return(result);
 800f09c:	69bb      	ldr	r3, [r7, #24]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d1e6      	bne.n	800f070 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800f0a2:	88fb      	ldrh	r3, [r7, #6]
 800f0a4:	461a      	mov	r2, r3
 800f0a6:	68b9      	ldr	r1, [r7, #8]
 800f0a8:	68f8      	ldr	r0, [r7, #12]
 800f0aa:	f001 faf9 	bl	80106a0 <UART_Start_Receive_DMA>
 800f0ae:	4603      	mov	r3, r0
 800f0b0:	e000      	b.n	800f0b4 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800f0b2:	2302      	movs	r3, #2
  }
}
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	3728      	adds	r7, #40	; 0x28
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	bd80      	pop	{r7, pc}
 800f0bc:	58000c00 	.word	0x58000c00

0800f0c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f0c0:	b580      	push	{r7, lr}
 800f0c2:	b0ba      	sub	sp, #232	; 0xe8
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	69db      	ldr	r3, [r3, #28]
 800f0ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	689b      	ldr	r3, [r3, #8]
 800f0e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f0e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800f0ea:	f640 030f 	movw	r3, #2063	; 0x80f
 800f0ee:	4013      	ands	r3, r2
 800f0f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800f0f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d11b      	bne.n	800f134 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f0fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f100:	f003 0320 	and.w	r3, r3, #32
 800f104:	2b00      	cmp	r3, #0
 800f106:	d015      	beq.n	800f134 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f10c:	f003 0320 	and.w	r3, r3, #32
 800f110:	2b00      	cmp	r3, #0
 800f112:	d105      	bne.n	800f120 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f114:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d009      	beq.n	800f134 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f124:	2b00      	cmp	r3, #0
 800f126:	f000 835a 	beq.w	800f7de <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f12e:	6878      	ldr	r0, [r7, #4]
 800f130:	4798      	blx	r3
      }
      return;
 800f132:	e354      	b.n	800f7de <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800f134:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f138:	2b00      	cmp	r3, #0
 800f13a:	f000 811f 	beq.w	800f37c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800f13e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800f142:	4b8b      	ldr	r3, [pc, #556]	; (800f370 <HAL_UART_IRQHandler+0x2b0>)
 800f144:	4013      	ands	r3, r2
 800f146:	2b00      	cmp	r3, #0
 800f148:	d106      	bne.n	800f158 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800f14a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800f14e:	4b89      	ldr	r3, [pc, #548]	; (800f374 <HAL_UART_IRQHandler+0x2b4>)
 800f150:	4013      	ands	r3, r2
 800f152:	2b00      	cmp	r3, #0
 800f154:	f000 8112 	beq.w	800f37c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f15c:	f003 0301 	and.w	r3, r3, #1
 800f160:	2b00      	cmp	r3, #0
 800f162:	d011      	beq.n	800f188 <HAL_UART_IRQHandler+0xc8>
 800f164:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d00b      	beq.n	800f188 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	2201      	movs	r2, #1
 800f176:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f17e:	f043 0201 	orr.w	r2, r3, #1
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f188:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f18c:	f003 0302 	and.w	r3, r3, #2
 800f190:	2b00      	cmp	r3, #0
 800f192:	d011      	beq.n	800f1b8 <HAL_UART_IRQHandler+0xf8>
 800f194:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f198:	f003 0301 	and.w	r3, r3, #1
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d00b      	beq.n	800f1b8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	2202      	movs	r2, #2
 800f1a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f1ae:	f043 0204 	orr.w	r2, r3, #4
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f1b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f1bc:	f003 0304 	and.w	r3, r3, #4
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d011      	beq.n	800f1e8 <HAL_UART_IRQHandler+0x128>
 800f1c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f1c8:	f003 0301 	and.w	r3, r3, #1
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d00b      	beq.n	800f1e8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	2204      	movs	r2, #4
 800f1d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f1de:	f043 0202 	orr.w	r2, r3, #2
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f1e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f1ec:	f003 0308 	and.w	r3, r3, #8
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d017      	beq.n	800f224 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f1f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f1f8:	f003 0320 	and.w	r3, r3, #32
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d105      	bne.n	800f20c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800f200:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800f204:	4b5a      	ldr	r3, [pc, #360]	; (800f370 <HAL_UART_IRQHandler+0x2b0>)
 800f206:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d00b      	beq.n	800f224 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	2208      	movs	r2, #8
 800f212:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f21a:	f043 0208 	orr.w	r2, r3, #8
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f228:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d012      	beq.n	800f256 <HAL_UART_IRQHandler+0x196>
 800f230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f234:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d00c      	beq.n	800f256 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f244:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f24c:	f043 0220 	orr.w	r2, r3, #32
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	f000 82c0 	beq.w	800f7e2 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f266:	f003 0320 	and.w	r3, r3, #32
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d013      	beq.n	800f296 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f26e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f272:	f003 0320 	and.w	r3, r3, #32
 800f276:	2b00      	cmp	r3, #0
 800f278:	d105      	bne.n	800f286 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f27a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f27e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f282:	2b00      	cmp	r3, #0
 800f284:	d007      	beq.n	800f296 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d003      	beq.n	800f296 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f292:	6878      	ldr	r0, [r7, #4]
 800f294:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f29c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	689b      	ldr	r3, [r3, #8]
 800f2a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2aa:	2b40      	cmp	r3, #64	; 0x40
 800f2ac:	d005      	beq.n	800f2ba <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f2ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f2b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d04f      	beq.n	800f35a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f2ba:	6878      	ldr	r0, [r7, #4]
 800f2bc:	f001 fada 	bl	8010874 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	689b      	ldr	r3, [r3, #8]
 800f2c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2ca:	2b40      	cmp	r3, #64	; 0x40
 800f2cc:	d141      	bne.n	800f352 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	3308      	adds	r3, #8
 800f2d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f2dc:	e853 3f00 	ldrex	r3, [r3]
 800f2e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800f2e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f2e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f2ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	3308      	adds	r3, #8
 800f2f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800f2fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800f2fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f302:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800f306:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800f30a:	e841 2300 	strex	r3, r2, [r1]
 800f30e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800f312:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f316:	2b00      	cmp	r3, #0
 800f318:	d1d9      	bne.n	800f2ce <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d013      	beq.n	800f34a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f326:	4a14      	ldr	r2, [pc, #80]	; (800f378 <HAL_UART_IRQHandler+0x2b8>)
 800f328:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f32e:	4618      	mov	r0, r3
 800f330:	f7f9 f9a0 	bl	8008674 <HAL_DMA_Abort_IT>
 800f334:	4603      	mov	r3, r0
 800f336:	2b00      	cmp	r3, #0
 800f338:	d017      	beq.n	800f36a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f33e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f340:	687a      	ldr	r2, [r7, #4]
 800f342:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800f344:	4610      	mov	r0, r2
 800f346:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f348:	e00f      	b.n	800f36a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f34a:	6878      	ldr	r0, [r7, #4]
 800f34c:	f000 fa74 	bl	800f838 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f350:	e00b      	b.n	800f36a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f352:	6878      	ldr	r0, [r7, #4]
 800f354:	f000 fa70 	bl	800f838 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f358:	e007      	b.n	800f36a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f35a:	6878      	ldr	r0, [r7, #4]
 800f35c:	f000 fa6c 	bl	800f838 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	2200      	movs	r2, #0
 800f364:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800f368:	e23b      	b.n	800f7e2 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f36a:	bf00      	nop
    return;
 800f36c:	e239      	b.n	800f7e2 <HAL_UART_IRQHandler+0x722>
 800f36e:	bf00      	nop
 800f370:	10000001 	.word	0x10000001
 800f374:	04000120 	.word	0x04000120
 800f378:	08010b1b 	.word	0x08010b1b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f380:	2b01      	cmp	r3, #1
 800f382:	f040 81ce 	bne.w	800f722 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800f386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f38a:	f003 0310 	and.w	r3, r3, #16
 800f38e:	2b00      	cmp	r3, #0
 800f390:	f000 81c7 	beq.w	800f722 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800f394:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f398:	f003 0310 	and.w	r3, r3, #16
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	f000 81c0 	beq.w	800f722 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	2210      	movs	r2, #16
 800f3a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	689b      	ldr	r3, [r3, #8]
 800f3b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f3b4:	2b40      	cmp	r3, #64	; 0x40
 800f3b6:	f040 813b 	bne.w	800f630 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	4a8b      	ldr	r2, [pc, #556]	; (800f5f0 <HAL_UART_IRQHandler+0x530>)
 800f3c2:	4293      	cmp	r3, r2
 800f3c4:	d059      	beq.n	800f47a <HAL_UART_IRQHandler+0x3ba>
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	4a89      	ldr	r2, [pc, #548]	; (800f5f4 <HAL_UART_IRQHandler+0x534>)
 800f3ce:	4293      	cmp	r3, r2
 800f3d0:	d053      	beq.n	800f47a <HAL_UART_IRQHandler+0x3ba>
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	4a87      	ldr	r2, [pc, #540]	; (800f5f8 <HAL_UART_IRQHandler+0x538>)
 800f3da:	4293      	cmp	r3, r2
 800f3dc:	d04d      	beq.n	800f47a <HAL_UART_IRQHandler+0x3ba>
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	4a85      	ldr	r2, [pc, #532]	; (800f5fc <HAL_UART_IRQHandler+0x53c>)
 800f3e6:	4293      	cmp	r3, r2
 800f3e8:	d047      	beq.n	800f47a <HAL_UART_IRQHandler+0x3ba>
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	4a83      	ldr	r2, [pc, #524]	; (800f600 <HAL_UART_IRQHandler+0x540>)
 800f3f2:	4293      	cmp	r3, r2
 800f3f4:	d041      	beq.n	800f47a <HAL_UART_IRQHandler+0x3ba>
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	4a81      	ldr	r2, [pc, #516]	; (800f604 <HAL_UART_IRQHandler+0x544>)
 800f3fe:	4293      	cmp	r3, r2
 800f400:	d03b      	beq.n	800f47a <HAL_UART_IRQHandler+0x3ba>
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	4a7f      	ldr	r2, [pc, #508]	; (800f608 <HAL_UART_IRQHandler+0x548>)
 800f40a:	4293      	cmp	r3, r2
 800f40c:	d035      	beq.n	800f47a <HAL_UART_IRQHandler+0x3ba>
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	4a7d      	ldr	r2, [pc, #500]	; (800f60c <HAL_UART_IRQHandler+0x54c>)
 800f416:	4293      	cmp	r3, r2
 800f418:	d02f      	beq.n	800f47a <HAL_UART_IRQHandler+0x3ba>
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	4a7b      	ldr	r2, [pc, #492]	; (800f610 <HAL_UART_IRQHandler+0x550>)
 800f422:	4293      	cmp	r3, r2
 800f424:	d029      	beq.n	800f47a <HAL_UART_IRQHandler+0x3ba>
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	4a79      	ldr	r2, [pc, #484]	; (800f614 <HAL_UART_IRQHandler+0x554>)
 800f42e:	4293      	cmp	r3, r2
 800f430:	d023      	beq.n	800f47a <HAL_UART_IRQHandler+0x3ba>
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	4a77      	ldr	r2, [pc, #476]	; (800f618 <HAL_UART_IRQHandler+0x558>)
 800f43a:	4293      	cmp	r3, r2
 800f43c:	d01d      	beq.n	800f47a <HAL_UART_IRQHandler+0x3ba>
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	4a75      	ldr	r2, [pc, #468]	; (800f61c <HAL_UART_IRQHandler+0x55c>)
 800f446:	4293      	cmp	r3, r2
 800f448:	d017      	beq.n	800f47a <HAL_UART_IRQHandler+0x3ba>
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	4a73      	ldr	r2, [pc, #460]	; (800f620 <HAL_UART_IRQHandler+0x560>)
 800f452:	4293      	cmp	r3, r2
 800f454:	d011      	beq.n	800f47a <HAL_UART_IRQHandler+0x3ba>
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	4a71      	ldr	r2, [pc, #452]	; (800f624 <HAL_UART_IRQHandler+0x564>)
 800f45e:	4293      	cmp	r3, r2
 800f460:	d00b      	beq.n	800f47a <HAL_UART_IRQHandler+0x3ba>
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	4a6f      	ldr	r2, [pc, #444]	; (800f628 <HAL_UART_IRQHandler+0x568>)
 800f46a:	4293      	cmp	r3, r2
 800f46c:	d005      	beq.n	800f47a <HAL_UART_IRQHandler+0x3ba>
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	4a6d      	ldr	r2, [pc, #436]	; (800f62c <HAL_UART_IRQHandler+0x56c>)
 800f476:	4293      	cmp	r3, r2
 800f478:	d105      	bne.n	800f486 <HAL_UART_IRQHandler+0x3c6>
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	685b      	ldr	r3, [r3, #4]
 800f482:	b29b      	uxth	r3, r3
 800f484:	e004      	b.n	800f490 <HAL_UART_IRQHandler+0x3d0>
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	685b      	ldr	r3, [r3, #4]
 800f48e:	b29b      	uxth	r3, r3
 800f490:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f494:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800f498:	2b00      	cmp	r3, #0
 800f49a:	f000 81a4 	beq.w	800f7e6 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f4a4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f4a8:	429a      	cmp	r2, r3
 800f4aa:	f080 819c 	bcs.w	800f7e6 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f4b4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f4bc:	69db      	ldr	r3, [r3, #28]
 800f4be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f4c2:	f000 8086 	beq.w	800f5d2 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f4d2:	e853 3f00 	ldrex	r3, [r3]
 800f4d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800f4da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f4de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f4e2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	461a      	mov	r2, r3
 800f4ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f4f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f4f4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4f8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800f4fc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f500:	e841 2300 	strex	r3, r2, [r1]
 800f504:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800f508:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d1da      	bne.n	800f4c6 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	3308      	adds	r3, #8
 800f516:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f518:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f51a:	e853 3f00 	ldrex	r3, [r3]
 800f51e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800f520:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f522:	f023 0301 	bic.w	r3, r3, #1
 800f526:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	3308      	adds	r3, #8
 800f530:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800f534:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800f538:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f53a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800f53c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f540:	e841 2300 	strex	r3, r2, [r1]
 800f544:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800f546:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d1e1      	bne.n	800f510 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	3308      	adds	r3, #8
 800f552:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f554:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f556:	e853 3f00 	ldrex	r3, [r3]
 800f55a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f55c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f55e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f562:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	3308      	adds	r3, #8
 800f56c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800f570:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f572:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f574:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f576:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f578:	e841 2300 	strex	r3, r2, [r1]
 800f57c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f57e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f580:	2b00      	cmp	r3, #0
 800f582:	d1e3      	bne.n	800f54c <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	2220      	movs	r2, #32
 800f588:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	2200      	movs	r2, #0
 800f590:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f598:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f59a:	e853 3f00 	ldrex	r3, [r3]
 800f59e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f5a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f5a2:	f023 0310 	bic.w	r3, r3, #16
 800f5a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	461a      	mov	r2, r3
 800f5b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f5b4:	65bb      	str	r3, [r7, #88]	; 0x58
 800f5b6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f5ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f5bc:	e841 2300 	strex	r3, r2, [r1]
 800f5c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f5c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d1e4      	bne.n	800f592 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	f7f8 fd33 	bl	8008038 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f5de:	b29b      	uxth	r3, r3
 800f5e0:	1ad3      	subs	r3, r2, r3
 800f5e2:	b29b      	uxth	r3, r3
 800f5e4:	4619      	mov	r1, r3
 800f5e6:	6878      	ldr	r0, [r7, #4]
 800f5e8:	f000 f930 	bl	800f84c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f5ec:	e0fb      	b.n	800f7e6 <HAL_UART_IRQHandler+0x726>
 800f5ee:	bf00      	nop
 800f5f0:	40020010 	.word	0x40020010
 800f5f4:	40020028 	.word	0x40020028
 800f5f8:	40020040 	.word	0x40020040
 800f5fc:	40020058 	.word	0x40020058
 800f600:	40020070 	.word	0x40020070
 800f604:	40020088 	.word	0x40020088
 800f608:	400200a0 	.word	0x400200a0
 800f60c:	400200b8 	.word	0x400200b8
 800f610:	40020410 	.word	0x40020410
 800f614:	40020428 	.word	0x40020428
 800f618:	40020440 	.word	0x40020440
 800f61c:	40020458 	.word	0x40020458
 800f620:	40020470 	.word	0x40020470
 800f624:	40020488 	.word	0x40020488
 800f628:	400204a0 	.word	0x400204a0
 800f62c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f63c:	b29b      	uxth	r3, r3
 800f63e:	1ad3      	subs	r3, r2, r3
 800f640:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f64a:	b29b      	uxth	r3, r3
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	f000 80cc 	beq.w	800f7ea <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800f652:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f656:	2b00      	cmp	r3, #0
 800f658:	f000 80c7 	beq.w	800f7ea <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f664:	e853 3f00 	ldrex	r3, [r3]
 800f668:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f66a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f66c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f670:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	461a      	mov	r2, r3
 800f67a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f67e:	647b      	str	r3, [r7, #68]	; 0x44
 800f680:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f682:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f684:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f686:	e841 2300 	strex	r3, r2, [r1]
 800f68a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f68c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d1e4      	bne.n	800f65c <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	3308      	adds	r3, #8
 800f698:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f69c:	e853 3f00 	ldrex	r3, [r3]
 800f6a0:	623b      	str	r3, [r7, #32]
   return(result);
 800f6a2:	6a3a      	ldr	r2, [r7, #32]
 800f6a4:	4b54      	ldr	r3, [pc, #336]	; (800f7f8 <HAL_UART_IRQHandler+0x738>)
 800f6a6:	4013      	ands	r3, r2
 800f6a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	3308      	adds	r3, #8
 800f6b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800f6b6:	633a      	str	r2, [r7, #48]	; 0x30
 800f6b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f6bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f6be:	e841 2300 	strex	r3, r2, [r1]
 800f6c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f6c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d1e3      	bne.n	800f692 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	2220      	movs	r2, #32
 800f6ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	2200      	movs	r2, #0
 800f6d6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	2200      	movs	r2, #0
 800f6dc:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6e4:	693b      	ldr	r3, [r7, #16]
 800f6e6:	e853 3f00 	ldrex	r3, [r3]
 800f6ea:	60fb      	str	r3, [r7, #12]
   return(result);
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	f023 0310 	bic.w	r3, r3, #16
 800f6f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	461a      	mov	r2, r3
 800f6fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f700:	61fb      	str	r3, [r7, #28]
 800f702:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f704:	69b9      	ldr	r1, [r7, #24]
 800f706:	69fa      	ldr	r2, [r7, #28]
 800f708:	e841 2300 	strex	r3, r2, [r1]
 800f70c:	617b      	str	r3, [r7, #20]
   return(result);
 800f70e:	697b      	ldr	r3, [r7, #20]
 800f710:	2b00      	cmp	r3, #0
 800f712:	d1e4      	bne.n	800f6de <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f714:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f718:	4619      	mov	r1, r3
 800f71a:	6878      	ldr	r0, [r7, #4]
 800f71c:	f000 f896 	bl	800f84c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f720:	e063      	b.n	800f7ea <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f726:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d00e      	beq.n	800f74c <HAL_UART_IRQHandler+0x68c>
 800f72e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f732:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f736:	2b00      	cmp	r3, #0
 800f738:	d008      	beq.n	800f74c <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800f742:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f744:	6878      	ldr	r0, [r7, #4]
 800f746:	f001 fa29 	bl	8010b9c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f74a:	e051      	b.n	800f7f0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f74c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f754:	2b00      	cmp	r3, #0
 800f756:	d014      	beq.n	800f782 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f75c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f760:	2b00      	cmp	r3, #0
 800f762:	d105      	bne.n	800f770 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f764:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f768:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d008      	beq.n	800f782 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f774:	2b00      	cmp	r3, #0
 800f776:	d03a      	beq.n	800f7ee <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f77c:	6878      	ldr	r0, [r7, #4]
 800f77e:	4798      	blx	r3
    }
    return;
 800f780:	e035      	b.n	800f7ee <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d009      	beq.n	800f7a2 <HAL_UART_IRQHandler+0x6e2>
 800f78e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f796:	2b00      	cmp	r3, #0
 800f798:	d003      	beq.n	800f7a2 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800f79a:	6878      	ldr	r0, [r7, #4]
 800f79c:	f001 f9d3 	bl	8010b46 <UART_EndTransmit_IT>
    return;
 800f7a0:	e026      	b.n	800f7f0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800f7a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f7a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d009      	beq.n	800f7c2 <HAL_UART_IRQHandler+0x702>
 800f7ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f7b2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d003      	beq.n	800f7c2 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800f7ba:	6878      	ldr	r0, [r7, #4]
 800f7bc:	f001 fa02 	bl	8010bc4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f7c0:	e016      	b.n	800f7f0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800f7c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f7c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d010      	beq.n	800f7f0 <HAL_UART_IRQHandler+0x730>
 800f7ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	da0c      	bge.n	800f7f0 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800f7d6:	6878      	ldr	r0, [r7, #4]
 800f7d8:	f001 f9ea 	bl	8010bb0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f7dc:	e008      	b.n	800f7f0 <HAL_UART_IRQHandler+0x730>
      return;
 800f7de:	bf00      	nop
 800f7e0:	e006      	b.n	800f7f0 <HAL_UART_IRQHandler+0x730>
    return;
 800f7e2:	bf00      	nop
 800f7e4:	e004      	b.n	800f7f0 <HAL_UART_IRQHandler+0x730>
      return;
 800f7e6:	bf00      	nop
 800f7e8:	e002      	b.n	800f7f0 <HAL_UART_IRQHandler+0x730>
      return;
 800f7ea:	bf00      	nop
 800f7ec:	e000      	b.n	800f7f0 <HAL_UART_IRQHandler+0x730>
    return;
 800f7ee:	bf00      	nop
  }
}
 800f7f0:	37e8      	adds	r7, #232	; 0xe8
 800f7f2:	46bd      	mov	sp, r7
 800f7f4:	bd80      	pop	{r7, pc}
 800f7f6:	bf00      	nop
 800f7f8:	effffffe 	.word	0xeffffffe

0800f7fc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f7fc:	b480      	push	{r7}
 800f7fe:	b083      	sub	sp, #12
 800f800:	af00      	add	r7, sp, #0
 800f802:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800f804:	bf00      	nop
 800f806:	370c      	adds	r7, #12
 800f808:	46bd      	mov	sp, r7
 800f80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f80e:	4770      	bx	lr

0800f810 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800f810:	b480      	push	{r7}
 800f812:	b083      	sub	sp, #12
 800f814:	af00      	add	r7, sp, #0
 800f816:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800f818:	bf00      	nop
 800f81a:	370c      	adds	r7, #12
 800f81c:	46bd      	mov	sp, r7
 800f81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f822:	4770      	bx	lr

0800f824 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f824:	b480      	push	{r7}
 800f826:	b083      	sub	sp, #12
 800f828:	af00      	add	r7, sp, #0
 800f82a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800f82c:	bf00      	nop
 800f82e:	370c      	adds	r7, #12
 800f830:	46bd      	mov	sp, r7
 800f832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f836:	4770      	bx	lr

0800f838 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f838:	b480      	push	{r7}
 800f83a:	b083      	sub	sp, #12
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800f840:	bf00      	nop
 800f842:	370c      	adds	r7, #12
 800f844:	46bd      	mov	sp, r7
 800f846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f84a:	4770      	bx	lr

0800f84c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f84c:	b480      	push	{r7}
 800f84e:	b083      	sub	sp, #12
 800f850:	af00      	add	r7, sp, #0
 800f852:	6078      	str	r0, [r7, #4]
 800f854:	460b      	mov	r3, r1
 800f856:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f858:	bf00      	nop
 800f85a:	370c      	adds	r7, #12
 800f85c:	46bd      	mov	sp, r7
 800f85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f862:	4770      	bx	lr

0800f864 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f864:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f868:	b092      	sub	sp, #72	; 0x48
 800f86a:	af00      	add	r7, sp, #0
 800f86c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f86e:	2300      	movs	r3, #0
 800f870:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f874:	697b      	ldr	r3, [r7, #20]
 800f876:	689a      	ldr	r2, [r3, #8]
 800f878:	697b      	ldr	r3, [r7, #20]
 800f87a:	691b      	ldr	r3, [r3, #16]
 800f87c:	431a      	orrs	r2, r3
 800f87e:	697b      	ldr	r3, [r7, #20]
 800f880:	695b      	ldr	r3, [r3, #20]
 800f882:	431a      	orrs	r2, r3
 800f884:	697b      	ldr	r3, [r7, #20]
 800f886:	69db      	ldr	r3, [r3, #28]
 800f888:	4313      	orrs	r3, r2
 800f88a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f88c:	697b      	ldr	r3, [r7, #20]
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	681a      	ldr	r2, [r3, #0]
 800f892:	4bbe      	ldr	r3, [pc, #760]	; (800fb8c <UART_SetConfig+0x328>)
 800f894:	4013      	ands	r3, r2
 800f896:	697a      	ldr	r2, [r7, #20]
 800f898:	6812      	ldr	r2, [r2, #0]
 800f89a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f89c:	430b      	orrs	r3, r1
 800f89e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f8a0:	697b      	ldr	r3, [r7, #20]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	685b      	ldr	r3, [r3, #4]
 800f8a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f8aa:	697b      	ldr	r3, [r7, #20]
 800f8ac:	68da      	ldr	r2, [r3, #12]
 800f8ae:	697b      	ldr	r3, [r7, #20]
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	430a      	orrs	r2, r1
 800f8b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f8b6:	697b      	ldr	r3, [r7, #20]
 800f8b8:	699b      	ldr	r3, [r3, #24]
 800f8ba:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f8bc:	697b      	ldr	r3, [r7, #20]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	4ab3      	ldr	r2, [pc, #716]	; (800fb90 <UART_SetConfig+0x32c>)
 800f8c2:	4293      	cmp	r3, r2
 800f8c4:	d004      	beq.n	800f8d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f8c6:	697b      	ldr	r3, [r7, #20]
 800f8c8:	6a1b      	ldr	r3, [r3, #32]
 800f8ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f8cc:	4313      	orrs	r3, r2
 800f8ce:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f8d0:	697b      	ldr	r3, [r7, #20]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	689a      	ldr	r2, [r3, #8]
 800f8d6:	4baf      	ldr	r3, [pc, #700]	; (800fb94 <UART_SetConfig+0x330>)
 800f8d8:	4013      	ands	r3, r2
 800f8da:	697a      	ldr	r2, [r7, #20]
 800f8dc:	6812      	ldr	r2, [r2, #0]
 800f8de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f8e0:	430b      	orrs	r3, r1
 800f8e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f8e4:	697b      	ldr	r3, [r7, #20]
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8ea:	f023 010f 	bic.w	r1, r3, #15
 800f8ee:	697b      	ldr	r3, [r7, #20]
 800f8f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f8f2:	697b      	ldr	r3, [r7, #20]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	430a      	orrs	r2, r1
 800f8f8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f8fa:	697b      	ldr	r3, [r7, #20]
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	4aa6      	ldr	r2, [pc, #664]	; (800fb98 <UART_SetConfig+0x334>)
 800f900:	4293      	cmp	r3, r2
 800f902:	d177      	bne.n	800f9f4 <UART_SetConfig+0x190>
 800f904:	4ba5      	ldr	r3, [pc, #660]	; (800fb9c <UART_SetConfig+0x338>)
 800f906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f908:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f90c:	2b28      	cmp	r3, #40	; 0x28
 800f90e:	d86d      	bhi.n	800f9ec <UART_SetConfig+0x188>
 800f910:	a201      	add	r2, pc, #4	; (adr r2, 800f918 <UART_SetConfig+0xb4>)
 800f912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f916:	bf00      	nop
 800f918:	0800f9bd 	.word	0x0800f9bd
 800f91c:	0800f9ed 	.word	0x0800f9ed
 800f920:	0800f9ed 	.word	0x0800f9ed
 800f924:	0800f9ed 	.word	0x0800f9ed
 800f928:	0800f9ed 	.word	0x0800f9ed
 800f92c:	0800f9ed 	.word	0x0800f9ed
 800f930:	0800f9ed 	.word	0x0800f9ed
 800f934:	0800f9ed 	.word	0x0800f9ed
 800f938:	0800f9c5 	.word	0x0800f9c5
 800f93c:	0800f9ed 	.word	0x0800f9ed
 800f940:	0800f9ed 	.word	0x0800f9ed
 800f944:	0800f9ed 	.word	0x0800f9ed
 800f948:	0800f9ed 	.word	0x0800f9ed
 800f94c:	0800f9ed 	.word	0x0800f9ed
 800f950:	0800f9ed 	.word	0x0800f9ed
 800f954:	0800f9ed 	.word	0x0800f9ed
 800f958:	0800f9cd 	.word	0x0800f9cd
 800f95c:	0800f9ed 	.word	0x0800f9ed
 800f960:	0800f9ed 	.word	0x0800f9ed
 800f964:	0800f9ed 	.word	0x0800f9ed
 800f968:	0800f9ed 	.word	0x0800f9ed
 800f96c:	0800f9ed 	.word	0x0800f9ed
 800f970:	0800f9ed 	.word	0x0800f9ed
 800f974:	0800f9ed 	.word	0x0800f9ed
 800f978:	0800f9d5 	.word	0x0800f9d5
 800f97c:	0800f9ed 	.word	0x0800f9ed
 800f980:	0800f9ed 	.word	0x0800f9ed
 800f984:	0800f9ed 	.word	0x0800f9ed
 800f988:	0800f9ed 	.word	0x0800f9ed
 800f98c:	0800f9ed 	.word	0x0800f9ed
 800f990:	0800f9ed 	.word	0x0800f9ed
 800f994:	0800f9ed 	.word	0x0800f9ed
 800f998:	0800f9dd 	.word	0x0800f9dd
 800f99c:	0800f9ed 	.word	0x0800f9ed
 800f9a0:	0800f9ed 	.word	0x0800f9ed
 800f9a4:	0800f9ed 	.word	0x0800f9ed
 800f9a8:	0800f9ed 	.word	0x0800f9ed
 800f9ac:	0800f9ed 	.word	0x0800f9ed
 800f9b0:	0800f9ed 	.word	0x0800f9ed
 800f9b4:	0800f9ed 	.word	0x0800f9ed
 800f9b8:	0800f9e5 	.word	0x0800f9e5
 800f9bc:	2301      	movs	r3, #1
 800f9be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9c2:	e222      	b.n	800fe0a <UART_SetConfig+0x5a6>
 800f9c4:	2304      	movs	r3, #4
 800f9c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9ca:	e21e      	b.n	800fe0a <UART_SetConfig+0x5a6>
 800f9cc:	2308      	movs	r3, #8
 800f9ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9d2:	e21a      	b.n	800fe0a <UART_SetConfig+0x5a6>
 800f9d4:	2310      	movs	r3, #16
 800f9d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9da:	e216      	b.n	800fe0a <UART_SetConfig+0x5a6>
 800f9dc:	2320      	movs	r3, #32
 800f9de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9e2:	e212      	b.n	800fe0a <UART_SetConfig+0x5a6>
 800f9e4:	2340      	movs	r3, #64	; 0x40
 800f9e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9ea:	e20e      	b.n	800fe0a <UART_SetConfig+0x5a6>
 800f9ec:	2380      	movs	r3, #128	; 0x80
 800f9ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9f2:	e20a      	b.n	800fe0a <UART_SetConfig+0x5a6>
 800f9f4:	697b      	ldr	r3, [r7, #20]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	4a69      	ldr	r2, [pc, #420]	; (800fba0 <UART_SetConfig+0x33c>)
 800f9fa:	4293      	cmp	r3, r2
 800f9fc:	d130      	bne.n	800fa60 <UART_SetConfig+0x1fc>
 800f9fe:	4b67      	ldr	r3, [pc, #412]	; (800fb9c <UART_SetConfig+0x338>)
 800fa00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa02:	f003 0307 	and.w	r3, r3, #7
 800fa06:	2b05      	cmp	r3, #5
 800fa08:	d826      	bhi.n	800fa58 <UART_SetConfig+0x1f4>
 800fa0a:	a201      	add	r2, pc, #4	; (adr r2, 800fa10 <UART_SetConfig+0x1ac>)
 800fa0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa10:	0800fa29 	.word	0x0800fa29
 800fa14:	0800fa31 	.word	0x0800fa31
 800fa18:	0800fa39 	.word	0x0800fa39
 800fa1c:	0800fa41 	.word	0x0800fa41
 800fa20:	0800fa49 	.word	0x0800fa49
 800fa24:	0800fa51 	.word	0x0800fa51
 800fa28:	2300      	movs	r3, #0
 800fa2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa2e:	e1ec      	b.n	800fe0a <UART_SetConfig+0x5a6>
 800fa30:	2304      	movs	r3, #4
 800fa32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa36:	e1e8      	b.n	800fe0a <UART_SetConfig+0x5a6>
 800fa38:	2308      	movs	r3, #8
 800fa3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa3e:	e1e4      	b.n	800fe0a <UART_SetConfig+0x5a6>
 800fa40:	2310      	movs	r3, #16
 800fa42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa46:	e1e0      	b.n	800fe0a <UART_SetConfig+0x5a6>
 800fa48:	2320      	movs	r3, #32
 800fa4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa4e:	e1dc      	b.n	800fe0a <UART_SetConfig+0x5a6>
 800fa50:	2340      	movs	r3, #64	; 0x40
 800fa52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa56:	e1d8      	b.n	800fe0a <UART_SetConfig+0x5a6>
 800fa58:	2380      	movs	r3, #128	; 0x80
 800fa5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa5e:	e1d4      	b.n	800fe0a <UART_SetConfig+0x5a6>
 800fa60:	697b      	ldr	r3, [r7, #20]
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	4a4f      	ldr	r2, [pc, #316]	; (800fba4 <UART_SetConfig+0x340>)
 800fa66:	4293      	cmp	r3, r2
 800fa68:	d130      	bne.n	800facc <UART_SetConfig+0x268>
 800fa6a:	4b4c      	ldr	r3, [pc, #304]	; (800fb9c <UART_SetConfig+0x338>)
 800fa6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa6e:	f003 0307 	and.w	r3, r3, #7
 800fa72:	2b05      	cmp	r3, #5
 800fa74:	d826      	bhi.n	800fac4 <UART_SetConfig+0x260>
 800fa76:	a201      	add	r2, pc, #4	; (adr r2, 800fa7c <UART_SetConfig+0x218>)
 800fa78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa7c:	0800fa95 	.word	0x0800fa95
 800fa80:	0800fa9d 	.word	0x0800fa9d
 800fa84:	0800faa5 	.word	0x0800faa5
 800fa88:	0800faad 	.word	0x0800faad
 800fa8c:	0800fab5 	.word	0x0800fab5
 800fa90:	0800fabd 	.word	0x0800fabd
 800fa94:	2300      	movs	r3, #0
 800fa96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa9a:	e1b6      	b.n	800fe0a <UART_SetConfig+0x5a6>
 800fa9c:	2304      	movs	r3, #4
 800fa9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800faa2:	e1b2      	b.n	800fe0a <UART_SetConfig+0x5a6>
 800faa4:	2308      	movs	r3, #8
 800faa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800faaa:	e1ae      	b.n	800fe0a <UART_SetConfig+0x5a6>
 800faac:	2310      	movs	r3, #16
 800faae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fab2:	e1aa      	b.n	800fe0a <UART_SetConfig+0x5a6>
 800fab4:	2320      	movs	r3, #32
 800fab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800faba:	e1a6      	b.n	800fe0a <UART_SetConfig+0x5a6>
 800fabc:	2340      	movs	r3, #64	; 0x40
 800fabe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fac2:	e1a2      	b.n	800fe0a <UART_SetConfig+0x5a6>
 800fac4:	2380      	movs	r3, #128	; 0x80
 800fac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800faca:	e19e      	b.n	800fe0a <UART_SetConfig+0x5a6>
 800facc:	697b      	ldr	r3, [r7, #20]
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	4a35      	ldr	r2, [pc, #212]	; (800fba8 <UART_SetConfig+0x344>)
 800fad2:	4293      	cmp	r3, r2
 800fad4:	d130      	bne.n	800fb38 <UART_SetConfig+0x2d4>
 800fad6:	4b31      	ldr	r3, [pc, #196]	; (800fb9c <UART_SetConfig+0x338>)
 800fad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fada:	f003 0307 	and.w	r3, r3, #7
 800fade:	2b05      	cmp	r3, #5
 800fae0:	d826      	bhi.n	800fb30 <UART_SetConfig+0x2cc>
 800fae2:	a201      	add	r2, pc, #4	; (adr r2, 800fae8 <UART_SetConfig+0x284>)
 800fae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fae8:	0800fb01 	.word	0x0800fb01
 800faec:	0800fb09 	.word	0x0800fb09
 800faf0:	0800fb11 	.word	0x0800fb11
 800faf4:	0800fb19 	.word	0x0800fb19
 800faf8:	0800fb21 	.word	0x0800fb21
 800fafc:	0800fb29 	.word	0x0800fb29
 800fb00:	2300      	movs	r3, #0
 800fb02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb06:	e180      	b.n	800fe0a <UART_SetConfig+0x5a6>
 800fb08:	2304      	movs	r3, #4
 800fb0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb0e:	e17c      	b.n	800fe0a <UART_SetConfig+0x5a6>
 800fb10:	2308      	movs	r3, #8
 800fb12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb16:	e178      	b.n	800fe0a <UART_SetConfig+0x5a6>
 800fb18:	2310      	movs	r3, #16
 800fb1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb1e:	e174      	b.n	800fe0a <UART_SetConfig+0x5a6>
 800fb20:	2320      	movs	r3, #32
 800fb22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb26:	e170      	b.n	800fe0a <UART_SetConfig+0x5a6>
 800fb28:	2340      	movs	r3, #64	; 0x40
 800fb2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb2e:	e16c      	b.n	800fe0a <UART_SetConfig+0x5a6>
 800fb30:	2380      	movs	r3, #128	; 0x80
 800fb32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb36:	e168      	b.n	800fe0a <UART_SetConfig+0x5a6>
 800fb38:	697b      	ldr	r3, [r7, #20]
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	4a1b      	ldr	r2, [pc, #108]	; (800fbac <UART_SetConfig+0x348>)
 800fb3e:	4293      	cmp	r3, r2
 800fb40:	d142      	bne.n	800fbc8 <UART_SetConfig+0x364>
 800fb42:	4b16      	ldr	r3, [pc, #88]	; (800fb9c <UART_SetConfig+0x338>)
 800fb44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb46:	f003 0307 	and.w	r3, r3, #7
 800fb4a:	2b05      	cmp	r3, #5
 800fb4c:	d838      	bhi.n	800fbc0 <UART_SetConfig+0x35c>
 800fb4e:	a201      	add	r2, pc, #4	; (adr r2, 800fb54 <UART_SetConfig+0x2f0>)
 800fb50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb54:	0800fb6d 	.word	0x0800fb6d
 800fb58:	0800fb75 	.word	0x0800fb75
 800fb5c:	0800fb7d 	.word	0x0800fb7d
 800fb60:	0800fb85 	.word	0x0800fb85
 800fb64:	0800fbb1 	.word	0x0800fbb1
 800fb68:	0800fbb9 	.word	0x0800fbb9
 800fb6c:	2300      	movs	r3, #0
 800fb6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb72:	e14a      	b.n	800fe0a <UART_SetConfig+0x5a6>
 800fb74:	2304      	movs	r3, #4
 800fb76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb7a:	e146      	b.n	800fe0a <UART_SetConfig+0x5a6>
 800fb7c:	2308      	movs	r3, #8
 800fb7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb82:	e142      	b.n	800fe0a <UART_SetConfig+0x5a6>
 800fb84:	2310      	movs	r3, #16
 800fb86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb8a:	e13e      	b.n	800fe0a <UART_SetConfig+0x5a6>
 800fb8c:	cfff69f3 	.word	0xcfff69f3
 800fb90:	58000c00 	.word	0x58000c00
 800fb94:	11fff4ff 	.word	0x11fff4ff
 800fb98:	40011000 	.word	0x40011000
 800fb9c:	58024400 	.word	0x58024400
 800fba0:	40004400 	.word	0x40004400
 800fba4:	40004800 	.word	0x40004800
 800fba8:	40004c00 	.word	0x40004c00
 800fbac:	40005000 	.word	0x40005000
 800fbb0:	2320      	movs	r3, #32
 800fbb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fbb6:	e128      	b.n	800fe0a <UART_SetConfig+0x5a6>
 800fbb8:	2340      	movs	r3, #64	; 0x40
 800fbba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fbbe:	e124      	b.n	800fe0a <UART_SetConfig+0x5a6>
 800fbc0:	2380      	movs	r3, #128	; 0x80
 800fbc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fbc6:	e120      	b.n	800fe0a <UART_SetConfig+0x5a6>
 800fbc8:	697b      	ldr	r3, [r7, #20]
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	4acb      	ldr	r2, [pc, #812]	; (800fefc <UART_SetConfig+0x698>)
 800fbce:	4293      	cmp	r3, r2
 800fbd0:	d176      	bne.n	800fcc0 <UART_SetConfig+0x45c>
 800fbd2:	4bcb      	ldr	r3, [pc, #812]	; (800ff00 <UART_SetConfig+0x69c>)
 800fbd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fbd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fbda:	2b28      	cmp	r3, #40	; 0x28
 800fbdc:	d86c      	bhi.n	800fcb8 <UART_SetConfig+0x454>
 800fbde:	a201      	add	r2, pc, #4	; (adr r2, 800fbe4 <UART_SetConfig+0x380>)
 800fbe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbe4:	0800fc89 	.word	0x0800fc89
 800fbe8:	0800fcb9 	.word	0x0800fcb9
 800fbec:	0800fcb9 	.word	0x0800fcb9
 800fbf0:	0800fcb9 	.word	0x0800fcb9
 800fbf4:	0800fcb9 	.word	0x0800fcb9
 800fbf8:	0800fcb9 	.word	0x0800fcb9
 800fbfc:	0800fcb9 	.word	0x0800fcb9
 800fc00:	0800fcb9 	.word	0x0800fcb9
 800fc04:	0800fc91 	.word	0x0800fc91
 800fc08:	0800fcb9 	.word	0x0800fcb9
 800fc0c:	0800fcb9 	.word	0x0800fcb9
 800fc10:	0800fcb9 	.word	0x0800fcb9
 800fc14:	0800fcb9 	.word	0x0800fcb9
 800fc18:	0800fcb9 	.word	0x0800fcb9
 800fc1c:	0800fcb9 	.word	0x0800fcb9
 800fc20:	0800fcb9 	.word	0x0800fcb9
 800fc24:	0800fc99 	.word	0x0800fc99
 800fc28:	0800fcb9 	.word	0x0800fcb9
 800fc2c:	0800fcb9 	.word	0x0800fcb9
 800fc30:	0800fcb9 	.word	0x0800fcb9
 800fc34:	0800fcb9 	.word	0x0800fcb9
 800fc38:	0800fcb9 	.word	0x0800fcb9
 800fc3c:	0800fcb9 	.word	0x0800fcb9
 800fc40:	0800fcb9 	.word	0x0800fcb9
 800fc44:	0800fca1 	.word	0x0800fca1
 800fc48:	0800fcb9 	.word	0x0800fcb9
 800fc4c:	0800fcb9 	.word	0x0800fcb9
 800fc50:	0800fcb9 	.word	0x0800fcb9
 800fc54:	0800fcb9 	.word	0x0800fcb9
 800fc58:	0800fcb9 	.word	0x0800fcb9
 800fc5c:	0800fcb9 	.word	0x0800fcb9
 800fc60:	0800fcb9 	.word	0x0800fcb9
 800fc64:	0800fca9 	.word	0x0800fca9
 800fc68:	0800fcb9 	.word	0x0800fcb9
 800fc6c:	0800fcb9 	.word	0x0800fcb9
 800fc70:	0800fcb9 	.word	0x0800fcb9
 800fc74:	0800fcb9 	.word	0x0800fcb9
 800fc78:	0800fcb9 	.word	0x0800fcb9
 800fc7c:	0800fcb9 	.word	0x0800fcb9
 800fc80:	0800fcb9 	.word	0x0800fcb9
 800fc84:	0800fcb1 	.word	0x0800fcb1
 800fc88:	2301      	movs	r3, #1
 800fc8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc8e:	e0bc      	b.n	800fe0a <UART_SetConfig+0x5a6>
 800fc90:	2304      	movs	r3, #4
 800fc92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc96:	e0b8      	b.n	800fe0a <UART_SetConfig+0x5a6>
 800fc98:	2308      	movs	r3, #8
 800fc9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc9e:	e0b4      	b.n	800fe0a <UART_SetConfig+0x5a6>
 800fca0:	2310      	movs	r3, #16
 800fca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fca6:	e0b0      	b.n	800fe0a <UART_SetConfig+0x5a6>
 800fca8:	2320      	movs	r3, #32
 800fcaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fcae:	e0ac      	b.n	800fe0a <UART_SetConfig+0x5a6>
 800fcb0:	2340      	movs	r3, #64	; 0x40
 800fcb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fcb6:	e0a8      	b.n	800fe0a <UART_SetConfig+0x5a6>
 800fcb8:	2380      	movs	r3, #128	; 0x80
 800fcba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fcbe:	e0a4      	b.n	800fe0a <UART_SetConfig+0x5a6>
 800fcc0:	697b      	ldr	r3, [r7, #20]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	4a8f      	ldr	r2, [pc, #572]	; (800ff04 <UART_SetConfig+0x6a0>)
 800fcc6:	4293      	cmp	r3, r2
 800fcc8:	d130      	bne.n	800fd2c <UART_SetConfig+0x4c8>
 800fcca:	4b8d      	ldr	r3, [pc, #564]	; (800ff00 <UART_SetConfig+0x69c>)
 800fccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fcce:	f003 0307 	and.w	r3, r3, #7
 800fcd2:	2b05      	cmp	r3, #5
 800fcd4:	d826      	bhi.n	800fd24 <UART_SetConfig+0x4c0>
 800fcd6:	a201      	add	r2, pc, #4	; (adr r2, 800fcdc <UART_SetConfig+0x478>)
 800fcd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcdc:	0800fcf5 	.word	0x0800fcf5
 800fce0:	0800fcfd 	.word	0x0800fcfd
 800fce4:	0800fd05 	.word	0x0800fd05
 800fce8:	0800fd0d 	.word	0x0800fd0d
 800fcec:	0800fd15 	.word	0x0800fd15
 800fcf0:	0800fd1d 	.word	0x0800fd1d
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fcfa:	e086      	b.n	800fe0a <UART_SetConfig+0x5a6>
 800fcfc:	2304      	movs	r3, #4
 800fcfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd02:	e082      	b.n	800fe0a <UART_SetConfig+0x5a6>
 800fd04:	2308      	movs	r3, #8
 800fd06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd0a:	e07e      	b.n	800fe0a <UART_SetConfig+0x5a6>
 800fd0c:	2310      	movs	r3, #16
 800fd0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd12:	e07a      	b.n	800fe0a <UART_SetConfig+0x5a6>
 800fd14:	2320      	movs	r3, #32
 800fd16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd1a:	e076      	b.n	800fe0a <UART_SetConfig+0x5a6>
 800fd1c:	2340      	movs	r3, #64	; 0x40
 800fd1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd22:	e072      	b.n	800fe0a <UART_SetConfig+0x5a6>
 800fd24:	2380      	movs	r3, #128	; 0x80
 800fd26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd2a:	e06e      	b.n	800fe0a <UART_SetConfig+0x5a6>
 800fd2c:	697b      	ldr	r3, [r7, #20]
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	4a75      	ldr	r2, [pc, #468]	; (800ff08 <UART_SetConfig+0x6a4>)
 800fd32:	4293      	cmp	r3, r2
 800fd34:	d130      	bne.n	800fd98 <UART_SetConfig+0x534>
 800fd36:	4b72      	ldr	r3, [pc, #456]	; (800ff00 <UART_SetConfig+0x69c>)
 800fd38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fd3a:	f003 0307 	and.w	r3, r3, #7
 800fd3e:	2b05      	cmp	r3, #5
 800fd40:	d826      	bhi.n	800fd90 <UART_SetConfig+0x52c>
 800fd42:	a201      	add	r2, pc, #4	; (adr r2, 800fd48 <UART_SetConfig+0x4e4>)
 800fd44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd48:	0800fd61 	.word	0x0800fd61
 800fd4c:	0800fd69 	.word	0x0800fd69
 800fd50:	0800fd71 	.word	0x0800fd71
 800fd54:	0800fd79 	.word	0x0800fd79
 800fd58:	0800fd81 	.word	0x0800fd81
 800fd5c:	0800fd89 	.word	0x0800fd89
 800fd60:	2300      	movs	r3, #0
 800fd62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd66:	e050      	b.n	800fe0a <UART_SetConfig+0x5a6>
 800fd68:	2304      	movs	r3, #4
 800fd6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd6e:	e04c      	b.n	800fe0a <UART_SetConfig+0x5a6>
 800fd70:	2308      	movs	r3, #8
 800fd72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd76:	e048      	b.n	800fe0a <UART_SetConfig+0x5a6>
 800fd78:	2310      	movs	r3, #16
 800fd7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd7e:	e044      	b.n	800fe0a <UART_SetConfig+0x5a6>
 800fd80:	2320      	movs	r3, #32
 800fd82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd86:	e040      	b.n	800fe0a <UART_SetConfig+0x5a6>
 800fd88:	2340      	movs	r3, #64	; 0x40
 800fd8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd8e:	e03c      	b.n	800fe0a <UART_SetConfig+0x5a6>
 800fd90:	2380      	movs	r3, #128	; 0x80
 800fd92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd96:	e038      	b.n	800fe0a <UART_SetConfig+0x5a6>
 800fd98:	697b      	ldr	r3, [r7, #20]
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	4a5b      	ldr	r2, [pc, #364]	; (800ff0c <UART_SetConfig+0x6a8>)
 800fd9e:	4293      	cmp	r3, r2
 800fda0:	d130      	bne.n	800fe04 <UART_SetConfig+0x5a0>
 800fda2:	4b57      	ldr	r3, [pc, #348]	; (800ff00 <UART_SetConfig+0x69c>)
 800fda4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fda6:	f003 0307 	and.w	r3, r3, #7
 800fdaa:	2b05      	cmp	r3, #5
 800fdac:	d826      	bhi.n	800fdfc <UART_SetConfig+0x598>
 800fdae:	a201      	add	r2, pc, #4	; (adr r2, 800fdb4 <UART_SetConfig+0x550>)
 800fdb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdb4:	0800fdcd 	.word	0x0800fdcd
 800fdb8:	0800fdd5 	.word	0x0800fdd5
 800fdbc:	0800fddd 	.word	0x0800fddd
 800fdc0:	0800fde5 	.word	0x0800fde5
 800fdc4:	0800fded 	.word	0x0800fded
 800fdc8:	0800fdf5 	.word	0x0800fdf5
 800fdcc:	2302      	movs	r3, #2
 800fdce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fdd2:	e01a      	b.n	800fe0a <UART_SetConfig+0x5a6>
 800fdd4:	2304      	movs	r3, #4
 800fdd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fdda:	e016      	b.n	800fe0a <UART_SetConfig+0x5a6>
 800fddc:	2308      	movs	r3, #8
 800fdde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fde2:	e012      	b.n	800fe0a <UART_SetConfig+0x5a6>
 800fde4:	2310      	movs	r3, #16
 800fde6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fdea:	e00e      	b.n	800fe0a <UART_SetConfig+0x5a6>
 800fdec:	2320      	movs	r3, #32
 800fdee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fdf2:	e00a      	b.n	800fe0a <UART_SetConfig+0x5a6>
 800fdf4:	2340      	movs	r3, #64	; 0x40
 800fdf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fdfa:	e006      	b.n	800fe0a <UART_SetConfig+0x5a6>
 800fdfc:	2380      	movs	r3, #128	; 0x80
 800fdfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fe02:	e002      	b.n	800fe0a <UART_SetConfig+0x5a6>
 800fe04:	2380      	movs	r3, #128	; 0x80
 800fe06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800fe0a:	697b      	ldr	r3, [r7, #20]
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	4a3f      	ldr	r2, [pc, #252]	; (800ff0c <UART_SetConfig+0x6a8>)
 800fe10:	4293      	cmp	r3, r2
 800fe12:	f040 80f8 	bne.w	8010006 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800fe16:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fe1a:	2b20      	cmp	r3, #32
 800fe1c:	dc46      	bgt.n	800feac <UART_SetConfig+0x648>
 800fe1e:	2b02      	cmp	r3, #2
 800fe20:	f2c0 8082 	blt.w	800ff28 <UART_SetConfig+0x6c4>
 800fe24:	3b02      	subs	r3, #2
 800fe26:	2b1e      	cmp	r3, #30
 800fe28:	d87e      	bhi.n	800ff28 <UART_SetConfig+0x6c4>
 800fe2a:	a201      	add	r2, pc, #4	; (adr r2, 800fe30 <UART_SetConfig+0x5cc>)
 800fe2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe30:	0800feb3 	.word	0x0800feb3
 800fe34:	0800ff29 	.word	0x0800ff29
 800fe38:	0800febb 	.word	0x0800febb
 800fe3c:	0800ff29 	.word	0x0800ff29
 800fe40:	0800ff29 	.word	0x0800ff29
 800fe44:	0800ff29 	.word	0x0800ff29
 800fe48:	0800fecb 	.word	0x0800fecb
 800fe4c:	0800ff29 	.word	0x0800ff29
 800fe50:	0800ff29 	.word	0x0800ff29
 800fe54:	0800ff29 	.word	0x0800ff29
 800fe58:	0800ff29 	.word	0x0800ff29
 800fe5c:	0800ff29 	.word	0x0800ff29
 800fe60:	0800ff29 	.word	0x0800ff29
 800fe64:	0800ff29 	.word	0x0800ff29
 800fe68:	0800fedb 	.word	0x0800fedb
 800fe6c:	0800ff29 	.word	0x0800ff29
 800fe70:	0800ff29 	.word	0x0800ff29
 800fe74:	0800ff29 	.word	0x0800ff29
 800fe78:	0800ff29 	.word	0x0800ff29
 800fe7c:	0800ff29 	.word	0x0800ff29
 800fe80:	0800ff29 	.word	0x0800ff29
 800fe84:	0800ff29 	.word	0x0800ff29
 800fe88:	0800ff29 	.word	0x0800ff29
 800fe8c:	0800ff29 	.word	0x0800ff29
 800fe90:	0800ff29 	.word	0x0800ff29
 800fe94:	0800ff29 	.word	0x0800ff29
 800fe98:	0800ff29 	.word	0x0800ff29
 800fe9c:	0800ff29 	.word	0x0800ff29
 800fea0:	0800ff29 	.word	0x0800ff29
 800fea4:	0800ff29 	.word	0x0800ff29
 800fea8:	0800ff1b 	.word	0x0800ff1b
 800feac:	2b40      	cmp	r3, #64	; 0x40
 800feae:	d037      	beq.n	800ff20 <UART_SetConfig+0x6bc>
 800feb0:	e03a      	b.n	800ff28 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800feb2:	f7fd fc39 	bl	800d728 <HAL_RCCEx_GetD3PCLK1Freq>
 800feb6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800feb8:	e03c      	b.n	800ff34 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800feba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800febe:	4618      	mov	r0, r3
 800fec0:	f7fd fc48 	bl	800d754 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fec6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fec8:	e034      	b.n	800ff34 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800feca:	f107 0318 	add.w	r3, r7, #24
 800fece:	4618      	mov	r0, r3
 800fed0:	f7fd fd94 	bl	800d9fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fed4:	69fb      	ldr	r3, [r7, #28]
 800fed6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fed8:	e02c      	b.n	800ff34 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800feda:	4b09      	ldr	r3, [pc, #36]	; (800ff00 <UART_SetConfig+0x69c>)
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	f003 0320 	and.w	r3, r3, #32
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d016      	beq.n	800ff14 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fee6:	4b06      	ldr	r3, [pc, #24]	; (800ff00 <UART_SetConfig+0x69c>)
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	08db      	lsrs	r3, r3, #3
 800feec:	f003 0303 	and.w	r3, r3, #3
 800fef0:	4a07      	ldr	r2, [pc, #28]	; (800ff10 <UART_SetConfig+0x6ac>)
 800fef2:	fa22 f303 	lsr.w	r3, r2, r3
 800fef6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fef8:	e01c      	b.n	800ff34 <UART_SetConfig+0x6d0>
 800fefa:	bf00      	nop
 800fefc:	40011400 	.word	0x40011400
 800ff00:	58024400 	.word	0x58024400
 800ff04:	40007800 	.word	0x40007800
 800ff08:	40007c00 	.word	0x40007c00
 800ff0c:	58000c00 	.word	0x58000c00
 800ff10:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800ff14:	4b9d      	ldr	r3, [pc, #628]	; (801018c <UART_SetConfig+0x928>)
 800ff16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ff18:	e00c      	b.n	800ff34 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ff1a:	4b9d      	ldr	r3, [pc, #628]	; (8010190 <UART_SetConfig+0x92c>)
 800ff1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ff1e:	e009      	b.n	800ff34 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ff20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ff24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ff26:	e005      	b.n	800ff34 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800ff28:	2300      	movs	r3, #0
 800ff2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ff2c:	2301      	movs	r3, #1
 800ff2e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ff32:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ff34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	f000 81de 	beq.w	80102f8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ff3c:	697b      	ldr	r3, [r7, #20]
 800ff3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff40:	4a94      	ldr	r2, [pc, #592]	; (8010194 <UART_SetConfig+0x930>)
 800ff42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ff46:	461a      	mov	r2, r3
 800ff48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff4a:	fbb3 f3f2 	udiv	r3, r3, r2
 800ff4e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ff50:	697b      	ldr	r3, [r7, #20]
 800ff52:	685a      	ldr	r2, [r3, #4]
 800ff54:	4613      	mov	r3, r2
 800ff56:	005b      	lsls	r3, r3, #1
 800ff58:	4413      	add	r3, r2
 800ff5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ff5c:	429a      	cmp	r2, r3
 800ff5e:	d305      	bcc.n	800ff6c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ff60:	697b      	ldr	r3, [r7, #20]
 800ff62:	685b      	ldr	r3, [r3, #4]
 800ff64:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ff66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ff68:	429a      	cmp	r2, r3
 800ff6a:	d903      	bls.n	800ff74 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800ff6c:	2301      	movs	r3, #1
 800ff6e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ff72:	e1c1      	b.n	80102f8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ff74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff76:	2200      	movs	r2, #0
 800ff78:	60bb      	str	r3, [r7, #8]
 800ff7a:	60fa      	str	r2, [r7, #12]
 800ff7c:	697b      	ldr	r3, [r7, #20]
 800ff7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff80:	4a84      	ldr	r2, [pc, #528]	; (8010194 <UART_SetConfig+0x930>)
 800ff82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ff86:	b29b      	uxth	r3, r3
 800ff88:	2200      	movs	r2, #0
 800ff8a:	603b      	str	r3, [r7, #0]
 800ff8c:	607a      	str	r2, [r7, #4]
 800ff8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ff92:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ff96:	f7f0 fb09 	bl	80005ac <__aeabi_uldivmod>
 800ff9a:	4602      	mov	r2, r0
 800ff9c:	460b      	mov	r3, r1
 800ff9e:	4610      	mov	r0, r2
 800ffa0:	4619      	mov	r1, r3
 800ffa2:	f04f 0200 	mov.w	r2, #0
 800ffa6:	f04f 0300 	mov.w	r3, #0
 800ffaa:	020b      	lsls	r3, r1, #8
 800ffac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ffb0:	0202      	lsls	r2, r0, #8
 800ffb2:	6979      	ldr	r1, [r7, #20]
 800ffb4:	6849      	ldr	r1, [r1, #4]
 800ffb6:	0849      	lsrs	r1, r1, #1
 800ffb8:	2000      	movs	r0, #0
 800ffba:	460c      	mov	r4, r1
 800ffbc:	4605      	mov	r5, r0
 800ffbe:	eb12 0804 	adds.w	r8, r2, r4
 800ffc2:	eb43 0905 	adc.w	r9, r3, r5
 800ffc6:	697b      	ldr	r3, [r7, #20]
 800ffc8:	685b      	ldr	r3, [r3, #4]
 800ffca:	2200      	movs	r2, #0
 800ffcc:	469a      	mov	sl, r3
 800ffce:	4693      	mov	fp, r2
 800ffd0:	4652      	mov	r2, sl
 800ffd2:	465b      	mov	r3, fp
 800ffd4:	4640      	mov	r0, r8
 800ffd6:	4649      	mov	r1, r9
 800ffd8:	f7f0 fae8 	bl	80005ac <__aeabi_uldivmod>
 800ffdc:	4602      	mov	r2, r0
 800ffde:	460b      	mov	r3, r1
 800ffe0:	4613      	mov	r3, r2
 800ffe2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ffe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffe6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ffea:	d308      	bcc.n	800fffe <UART_SetConfig+0x79a>
 800ffec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fff2:	d204      	bcs.n	800fffe <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800fff4:	697b      	ldr	r3, [r7, #20]
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fffa:	60da      	str	r2, [r3, #12]
 800fffc:	e17c      	b.n	80102f8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800fffe:	2301      	movs	r3, #1
 8010000:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8010004:	e178      	b.n	80102f8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010006:	697b      	ldr	r3, [r7, #20]
 8010008:	69db      	ldr	r3, [r3, #28]
 801000a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801000e:	f040 80c5 	bne.w	801019c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8010012:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010016:	2b20      	cmp	r3, #32
 8010018:	dc48      	bgt.n	80100ac <UART_SetConfig+0x848>
 801001a:	2b00      	cmp	r3, #0
 801001c:	db7b      	blt.n	8010116 <UART_SetConfig+0x8b2>
 801001e:	2b20      	cmp	r3, #32
 8010020:	d879      	bhi.n	8010116 <UART_SetConfig+0x8b2>
 8010022:	a201      	add	r2, pc, #4	; (adr r2, 8010028 <UART_SetConfig+0x7c4>)
 8010024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010028:	080100b3 	.word	0x080100b3
 801002c:	080100bb 	.word	0x080100bb
 8010030:	08010117 	.word	0x08010117
 8010034:	08010117 	.word	0x08010117
 8010038:	080100c3 	.word	0x080100c3
 801003c:	08010117 	.word	0x08010117
 8010040:	08010117 	.word	0x08010117
 8010044:	08010117 	.word	0x08010117
 8010048:	080100d3 	.word	0x080100d3
 801004c:	08010117 	.word	0x08010117
 8010050:	08010117 	.word	0x08010117
 8010054:	08010117 	.word	0x08010117
 8010058:	08010117 	.word	0x08010117
 801005c:	08010117 	.word	0x08010117
 8010060:	08010117 	.word	0x08010117
 8010064:	08010117 	.word	0x08010117
 8010068:	080100e3 	.word	0x080100e3
 801006c:	08010117 	.word	0x08010117
 8010070:	08010117 	.word	0x08010117
 8010074:	08010117 	.word	0x08010117
 8010078:	08010117 	.word	0x08010117
 801007c:	08010117 	.word	0x08010117
 8010080:	08010117 	.word	0x08010117
 8010084:	08010117 	.word	0x08010117
 8010088:	08010117 	.word	0x08010117
 801008c:	08010117 	.word	0x08010117
 8010090:	08010117 	.word	0x08010117
 8010094:	08010117 	.word	0x08010117
 8010098:	08010117 	.word	0x08010117
 801009c:	08010117 	.word	0x08010117
 80100a0:	08010117 	.word	0x08010117
 80100a4:	08010117 	.word	0x08010117
 80100a8:	08010109 	.word	0x08010109
 80100ac:	2b40      	cmp	r3, #64	; 0x40
 80100ae:	d02e      	beq.n	801010e <UART_SetConfig+0x8aa>
 80100b0:	e031      	b.n	8010116 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80100b2:	f7fc fbc7 	bl	800c844 <HAL_RCC_GetPCLK1Freq>
 80100b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80100b8:	e033      	b.n	8010122 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80100ba:	f7fc fbd9 	bl	800c870 <HAL_RCC_GetPCLK2Freq>
 80100be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80100c0:	e02f      	b.n	8010122 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80100c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80100c6:	4618      	mov	r0, r3
 80100c8:	f7fd fb44 	bl	800d754 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80100cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80100d0:	e027      	b.n	8010122 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80100d2:	f107 0318 	add.w	r3, r7, #24
 80100d6:	4618      	mov	r0, r3
 80100d8:	f7fd fc90 	bl	800d9fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80100dc:	69fb      	ldr	r3, [r7, #28]
 80100de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80100e0:	e01f      	b.n	8010122 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80100e2:	4b2d      	ldr	r3, [pc, #180]	; (8010198 <UART_SetConfig+0x934>)
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	f003 0320 	and.w	r3, r3, #32
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d009      	beq.n	8010102 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80100ee:	4b2a      	ldr	r3, [pc, #168]	; (8010198 <UART_SetConfig+0x934>)
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	08db      	lsrs	r3, r3, #3
 80100f4:	f003 0303 	and.w	r3, r3, #3
 80100f8:	4a24      	ldr	r2, [pc, #144]	; (801018c <UART_SetConfig+0x928>)
 80100fa:	fa22 f303 	lsr.w	r3, r2, r3
 80100fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010100:	e00f      	b.n	8010122 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8010102:	4b22      	ldr	r3, [pc, #136]	; (801018c <UART_SetConfig+0x928>)
 8010104:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010106:	e00c      	b.n	8010122 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010108:	4b21      	ldr	r3, [pc, #132]	; (8010190 <UART_SetConfig+0x92c>)
 801010a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801010c:	e009      	b.n	8010122 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801010e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010112:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010114:	e005      	b.n	8010122 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8010116:	2300      	movs	r3, #0
 8010118:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801011a:	2301      	movs	r3, #1
 801011c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8010120:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010124:	2b00      	cmp	r3, #0
 8010126:	f000 80e7 	beq.w	80102f8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801012a:	697b      	ldr	r3, [r7, #20]
 801012c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801012e:	4a19      	ldr	r2, [pc, #100]	; (8010194 <UART_SetConfig+0x930>)
 8010130:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010134:	461a      	mov	r2, r3
 8010136:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010138:	fbb3 f3f2 	udiv	r3, r3, r2
 801013c:	005a      	lsls	r2, r3, #1
 801013e:	697b      	ldr	r3, [r7, #20]
 8010140:	685b      	ldr	r3, [r3, #4]
 8010142:	085b      	lsrs	r3, r3, #1
 8010144:	441a      	add	r2, r3
 8010146:	697b      	ldr	r3, [r7, #20]
 8010148:	685b      	ldr	r3, [r3, #4]
 801014a:	fbb2 f3f3 	udiv	r3, r2, r3
 801014e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010152:	2b0f      	cmp	r3, #15
 8010154:	d916      	bls.n	8010184 <UART_SetConfig+0x920>
 8010156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801015c:	d212      	bcs.n	8010184 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801015e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010160:	b29b      	uxth	r3, r3
 8010162:	f023 030f 	bic.w	r3, r3, #15
 8010166:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801016a:	085b      	lsrs	r3, r3, #1
 801016c:	b29b      	uxth	r3, r3
 801016e:	f003 0307 	and.w	r3, r3, #7
 8010172:	b29a      	uxth	r2, r3
 8010174:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010176:	4313      	orrs	r3, r2
 8010178:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 801017a:	697b      	ldr	r3, [r7, #20]
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8010180:	60da      	str	r2, [r3, #12]
 8010182:	e0b9      	b.n	80102f8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8010184:	2301      	movs	r3, #1
 8010186:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801018a:	e0b5      	b.n	80102f8 <UART_SetConfig+0xa94>
 801018c:	03d09000 	.word	0x03d09000
 8010190:	003d0900 	.word	0x003d0900
 8010194:	080145ec 	.word	0x080145ec
 8010198:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 801019c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80101a0:	2b20      	cmp	r3, #32
 80101a2:	dc49      	bgt.n	8010238 <UART_SetConfig+0x9d4>
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	db7c      	blt.n	80102a2 <UART_SetConfig+0xa3e>
 80101a8:	2b20      	cmp	r3, #32
 80101aa:	d87a      	bhi.n	80102a2 <UART_SetConfig+0xa3e>
 80101ac:	a201      	add	r2, pc, #4	; (adr r2, 80101b4 <UART_SetConfig+0x950>)
 80101ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101b2:	bf00      	nop
 80101b4:	0801023f 	.word	0x0801023f
 80101b8:	08010247 	.word	0x08010247
 80101bc:	080102a3 	.word	0x080102a3
 80101c0:	080102a3 	.word	0x080102a3
 80101c4:	0801024f 	.word	0x0801024f
 80101c8:	080102a3 	.word	0x080102a3
 80101cc:	080102a3 	.word	0x080102a3
 80101d0:	080102a3 	.word	0x080102a3
 80101d4:	0801025f 	.word	0x0801025f
 80101d8:	080102a3 	.word	0x080102a3
 80101dc:	080102a3 	.word	0x080102a3
 80101e0:	080102a3 	.word	0x080102a3
 80101e4:	080102a3 	.word	0x080102a3
 80101e8:	080102a3 	.word	0x080102a3
 80101ec:	080102a3 	.word	0x080102a3
 80101f0:	080102a3 	.word	0x080102a3
 80101f4:	0801026f 	.word	0x0801026f
 80101f8:	080102a3 	.word	0x080102a3
 80101fc:	080102a3 	.word	0x080102a3
 8010200:	080102a3 	.word	0x080102a3
 8010204:	080102a3 	.word	0x080102a3
 8010208:	080102a3 	.word	0x080102a3
 801020c:	080102a3 	.word	0x080102a3
 8010210:	080102a3 	.word	0x080102a3
 8010214:	080102a3 	.word	0x080102a3
 8010218:	080102a3 	.word	0x080102a3
 801021c:	080102a3 	.word	0x080102a3
 8010220:	080102a3 	.word	0x080102a3
 8010224:	080102a3 	.word	0x080102a3
 8010228:	080102a3 	.word	0x080102a3
 801022c:	080102a3 	.word	0x080102a3
 8010230:	080102a3 	.word	0x080102a3
 8010234:	08010295 	.word	0x08010295
 8010238:	2b40      	cmp	r3, #64	; 0x40
 801023a:	d02e      	beq.n	801029a <UART_SetConfig+0xa36>
 801023c:	e031      	b.n	80102a2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801023e:	f7fc fb01 	bl	800c844 <HAL_RCC_GetPCLK1Freq>
 8010242:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010244:	e033      	b.n	80102ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010246:	f7fc fb13 	bl	800c870 <HAL_RCC_GetPCLK2Freq>
 801024a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801024c:	e02f      	b.n	80102ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801024e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010252:	4618      	mov	r0, r3
 8010254:	f7fd fa7e 	bl	800d754 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801025a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801025c:	e027      	b.n	80102ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801025e:	f107 0318 	add.w	r3, r7, #24
 8010262:	4618      	mov	r0, r3
 8010264:	f7fd fbca 	bl	800d9fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010268:	69fb      	ldr	r3, [r7, #28]
 801026a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801026c:	e01f      	b.n	80102ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801026e:	4b2d      	ldr	r3, [pc, #180]	; (8010324 <UART_SetConfig+0xac0>)
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	f003 0320 	and.w	r3, r3, #32
 8010276:	2b00      	cmp	r3, #0
 8010278:	d009      	beq.n	801028e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801027a:	4b2a      	ldr	r3, [pc, #168]	; (8010324 <UART_SetConfig+0xac0>)
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	08db      	lsrs	r3, r3, #3
 8010280:	f003 0303 	and.w	r3, r3, #3
 8010284:	4a28      	ldr	r2, [pc, #160]	; (8010328 <UART_SetConfig+0xac4>)
 8010286:	fa22 f303 	lsr.w	r3, r2, r3
 801028a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801028c:	e00f      	b.n	80102ae <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 801028e:	4b26      	ldr	r3, [pc, #152]	; (8010328 <UART_SetConfig+0xac4>)
 8010290:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010292:	e00c      	b.n	80102ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010294:	4b25      	ldr	r3, [pc, #148]	; (801032c <UART_SetConfig+0xac8>)
 8010296:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010298:	e009      	b.n	80102ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801029a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801029e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80102a0:	e005      	b.n	80102ae <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80102a2:	2300      	movs	r3, #0
 80102a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80102a6:	2301      	movs	r3, #1
 80102a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80102ac:	bf00      	nop
    }

    if (pclk != 0U)
 80102ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d021      	beq.n	80102f8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80102b4:	697b      	ldr	r3, [r7, #20]
 80102b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102b8:	4a1d      	ldr	r2, [pc, #116]	; (8010330 <UART_SetConfig+0xacc>)
 80102ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80102be:	461a      	mov	r2, r3
 80102c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80102c2:	fbb3 f2f2 	udiv	r2, r3, r2
 80102c6:	697b      	ldr	r3, [r7, #20]
 80102c8:	685b      	ldr	r3, [r3, #4]
 80102ca:	085b      	lsrs	r3, r3, #1
 80102cc:	441a      	add	r2, r3
 80102ce:	697b      	ldr	r3, [r7, #20]
 80102d0:	685b      	ldr	r3, [r3, #4]
 80102d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80102d6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80102d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102da:	2b0f      	cmp	r3, #15
 80102dc:	d909      	bls.n	80102f2 <UART_SetConfig+0xa8e>
 80102de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80102e4:	d205      	bcs.n	80102f2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80102e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102e8:	b29a      	uxth	r2, r3
 80102ea:	697b      	ldr	r3, [r7, #20]
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	60da      	str	r2, [r3, #12]
 80102f0:	e002      	b.n	80102f8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80102f2:	2301      	movs	r3, #1
 80102f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80102f8:	697b      	ldr	r3, [r7, #20]
 80102fa:	2201      	movs	r2, #1
 80102fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8010300:	697b      	ldr	r3, [r7, #20]
 8010302:	2201      	movs	r2, #1
 8010304:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010308:	697b      	ldr	r3, [r7, #20]
 801030a:	2200      	movs	r2, #0
 801030c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 801030e:	697b      	ldr	r3, [r7, #20]
 8010310:	2200      	movs	r2, #0
 8010312:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8010314:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8010318:	4618      	mov	r0, r3
 801031a:	3748      	adds	r7, #72	; 0x48
 801031c:	46bd      	mov	sp, r7
 801031e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010322:	bf00      	nop
 8010324:	58024400 	.word	0x58024400
 8010328:	03d09000 	.word	0x03d09000
 801032c:	003d0900 	.word	0x003d0900
 8010330:	080145ec 	.word	0x080145ec

08010334 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010334:	b480      	push	{r7}
 8010336:	b083      	sub	sp, #12
 8010338:	af00      	add	r7, sp, #0
 801033a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010340:	f003 0301 	and.w	r3, r3, #1
 8010344:	2b00      	cmp	r3, #0
 8010346:	d00a      	beq.n	801035e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	685b      	ldr	r3, [r3, #4]
 801034e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	430a      	orrs	r2, r1
 801035c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010362:	f003 0302 	and.w	r3, r3, #2
 8010366:	2b00      	cmp	r3, #0
 8010368:	d00a      	beq.n	8010380 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	685b      	ldr	r3, [r3, #4]
 8010370:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	430a      	orrs	r2, r1
 801037e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010384:	f003 0304 	and.w	r3, r3, #4
 8010388:	2b00      	cmp	r3, #0
 801038a:	d00a      	beq.n	80103a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	685b      	ldr	r3, [r3, #4]
 8010392:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	430a      	orrs	r2, r1
 80103a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103a6:	f003 0308 	and.w	r3, r3, #8
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d00a      	beq.n	80103c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	685b      	ldr	r3, [r3, #4]
 80103b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	430a      	orrs	r2, r1
 80103c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103c8:	f003 0310 	and.w	r3, r3, #16
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d00a      	beq.n	80103e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	689b      	ldr	r3, [r3, #8]
 80103d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	430a      	orrs	r2, r1
 80103e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103ea:	f003 0320 	and.w	r3, r3, #32
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d00a      	beq.n	8010408 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	689b      	ldr	r3, [r3, #8]
 80103f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	430a      	orrs	r2, r1
 8010406:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801040c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010410:	2b00      	cmp	r3, #0
 8010412:	d01a      	beq.n	801044a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	685b      	ldr	r3, [r3, #4]
 801041a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	430a      	orrs	r2, r1
 8010428:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801042e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010432:	d10a      	bne.n	801044a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	685b      	ldr	r3, [r3, #4]
 801043a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	430a      	orrs	r2, r1
 8010448:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801044e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010452:	2b00      	cmp	r3, #0
 8010454:	d00a      	beq.n	801046c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	685b      	ldr	r3, [r3, #4]
 801045c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	430a      	orrs	r2, r1
 801046a:	605a      	str	r2, [r3, #4]
  }
}
 801046c:	bf00      	nop
 801046e:	370c      	adds	r7, #12
 8010470:	46bd      	mov	sp, r7
 8010472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010476:	4770      	bx	lr

08010478 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010478:	b580      	push	{r7, lr}
 801047a:	b086      	sub	sp, #24
 801047c:	af02      	add	r7, sp, #8
 801047e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	2200      	movs	r2, #0
 8010484:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010488:	f7f6 fec4 	bl	8007214 <HAL_GetTick>
 801048c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	f003 0308 	and.w	r3, r3, #8
 8010498:	2b08      	cmp	r3, #8
 801049a:	d10e      	bne.n	80104ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801049c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80104a0:	9300      	str	r3, [sp, #0]
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	2200      	movs	r2, #0
 80104a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80104aa:	6878      	ldr	r0, [r7, #4]
 80104ac:	f000 f82f 	bl	801050e <UART_WaitOnFlagUntilTimeout>
 80104b0:	4603      	mov	r3, r0
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d001      	beq.n	80104ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80104b6:	2303      	movs	r3, #3
 80104b8:	e025      	b.n	8010506 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	f003 0304 	and.w	r3, r3, #4
 80104c4:	2b04      	cmp	r3, #4
 80104c6:	d10e      	bne.n	80104e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80104c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80104cc:	9300      	str	r3, [sp, #0]
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	2200      	movs	r2, #0
 80104d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80104d6:	6878      	ldr	r0, [r7, #4]
 80104d8:	f000 f819 	bl	801050e <UART_WaitOnFlagUntilTimeout>
 80104dc:	4603      	mov	r3, r0
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d001      	beq.n	80104e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80104e2:	2303      	movs	r3, #3
 80104e4:	e00f      	b.n	8010506 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	2220      	movs	r2, #32
 80104ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	2220      	movs	r2, #32
 80104f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	2200      	movs	r2, #0
 80104fa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	2200      	movs	r2, #0
 8010500:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010504:	2300      	movs	r3, #0
}
 8010506:	4618      	mov	r0, r3
 8010508:	3710      	adds	r7, #16
 801050a:	46bd      	mov	sp, r7
 801050c:	bd80      	pop	{r7, pc}

0801050e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801050e:	b580      	push	{r7, lr}
 8010510:	b09c      	sub	sp, #112	; 0x70
 8010512:	af00      	add	r7, sp, #0
 8010514:	60f8      	str	r0, [r7, #12]
 8010516:	60b9      	str	r1, [r7, #8]
 8010518:	603b      	str	r3, [r7, #0]
 801051a:	4613      	mov	r3, r2
 801051c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801051e:	e0a9      	b.n	8010674 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010520:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010522:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010526:	f000 80a5 	beq.w	8010674 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801052a:	f7f6 fe73 	bl	8007214 <HAL_GetTick>
 801052e:	4602      	mov	r2, r0
 8010530:	683b      	ldr	r3, [r7, #0]
 8010532:	1ad3      	subs	r3, r2, r3
 8010534:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010536:	429a      	cmp	r2, r3
 8010538:	d302      	bcc.n	8010540 <UART_WaitOnFlagUntilTimeout+0x32>
 801053a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801053c:	2b00      	cmp	r3, #0
 801053e:	d140      	bne.n	80105c2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010546:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010548:	e853 3f00 	ldrex	r3, [r3]
 801054c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801054e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010550:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8010554:	667b      	str	r3, [r7, #100]	; 0x64
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	461a      	mov	r2, r3
 801055c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801055e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010560:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010562:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010564:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010566:	e841 2300 	strex	r3, r2, [r1]
 801056a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801056c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801056e:	2b00      	cmp	r3, #0
 8010570:	d1e6      	bne.n	8010540 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	3308      	adds	r3, #8
 8010578:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801057a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801057c:	e853 3f00 	ldrex	r3, [r3]
 8010580:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010584:	f023 0301 	bic.w	r3, r3, #1
 8010588:	663b      	str	r3, [r7, #96]	; 0x60
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	3308      	adds	r3, #8
 8010590:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010592:	64ba      	str	r2, [r7, #72]	; 0x48
 8010594:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010596:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010598:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801059a:	e841 2300 	strex	r3, r2, [r1]
 801059e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80105a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d1e5      	bne.n	8010572 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	2220      	movs	r2, #32
 80105aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	2220      	movs	r2, #32
 80105b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	2200      	movs	r2, #0
 80105ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80105be:	2303      	movs	r3, #3
 80105c0:	e069      	b.n	8010696 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	f003 0304 	and.w	r3, r3, #4
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d051      	beq.n	8010674 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	69db      	ldr	r3, [r3, #28]
 80105d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80105da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80105de:	d149      	bne.n	8010674 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80105e8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105f2:	e853 3f00 	ldrex	r3, [r3]
 80105f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80105f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80105fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	461a      	mov	r2, r3
 8010606:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010608:	637b      	str	r3, [r7, #52]	; 0x34
 801060a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801060c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801060e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010610:	e841 2300 	strex	r3, r2, [r1]
 8010614:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8010616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010618:	2b00      	cmp	r3, #0
 801061a:	d1e6      	bne.n	80105ea <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	3308      	adds	r3, #8
 8010622:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010624:	697b      	ldr	r3, [r7, #20]
 8010626:	e853 3f00 	ldrex	r3, [r3]
 801062a:	613b      	str	r3, [r7, #16]
   return(result);
 801062c:	693b      	ldr	r3, [r7, #16]
 801062e:	f023 0301 	bic.w	r3, r3, #1
 8010632:	66bb      	str	r3, [r7, #104]	; 0x68
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	3308      	adds	r3, #8
 801063a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801063c:	623a      	str	r2, [r7, #32]
 801063e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010640:	69f9      	ldr	r1, [r7, #28]
 8010642:	6a3a      	ldr	r2, [r7, #32]
 8010644:	e841 2300 	strex	r3, r2, [r1]
 8010648:	61bb      	str	r3, [r7, #24]
   return(result);
 801064a:	69bb      	ldr	r3, [r7, #24]
 801064c:	2b00      	cmp	r3, #0
 801064e:	d1e5      	bne.n	801061c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	2220      	movs	r2, #32
 8010654:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8010658:	68fb      	ldr	r3, [r7, #12]
 801065a:	2220      	movs	r2, #32
 801065c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	2220      	movs	r2, #32
 8010664:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	2200      	movs	r2, #0
 801066c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8010670:	2303      	movs	r3, #3
 8010672:	e010      	b.n	8010696 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	69da      	ldr	r2, [r3, #28]
 801067a:	68bb      	ldr	r3, [r7, #8]
 801067c:	4013      	ands	r3, r2
 801067e:	68ba      	ldr	r2, [r7, #8]
 8010680:	429a      	cmp	r2, r3
 8010682:	bf0c      	ite	eq
 8010684:	2301      	moveq	r3, #1
 8010686:	2300      	movne	r3, #0
 8010688:	b2db      	uxtb	r3, r3
 801068a:	461a      	mov	r2, r3
 801068c:	79fb      	ldrb	r3, [r7, #7]
 801068e:	429a      	cmp	r2, r3
 8010690:	f43f af46 	beq.w	8010520 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010694:	2300      	movs	r3, #0
}
 8010696:	4618      	mov	r0, r3
 8010698:	3770      	adds	r7, #112	; 0x70
 801069a:	46bd      	mov	sp, r7
 801069c:	bd80      	pop	{r7, pc}
	...

080106a0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80106a0:	b580      	push	{r7, lr}
 80106a2:	b096      	sub	sp, #88	; 0x58
 80106a4:	af00      	add	r7, sp, #0
 80106a6:	60f8      	str	r0, [r7, #12]
 80106a8:	60b9      	str	r1, [r7, #8]
 80106aa:	4613      	mov	r3, r2
 80106ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	68ba      	ldr	r2, [r7, #8]
 80106b2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	88fa      	ldrh	r2, [r7, #6]
 80106b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	2200      	movs	r2, #0
 80106c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	2222      	movs	r2, #34	; 0x22
 80106c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d02c      	beq.n	801072e <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80106d8:	4a42      	ldr	r2, [pc, #264]	; (80107e4 <UART_Start_Receive_DMA+0x144>)
 80106da:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80106e0:	4a41      	ldr	r2, [pc, #260]	; (80107e8 <UART_Start_Receive_DMA+0x148>)
 80106e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80106e8:	4a40      	ldr	r2, [pc, #256]	; (80107ec <UART_Start_Receive_DMA+0x14c>)
 80106ea:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80106f0:	2200      	movs	r2, #0
 80106f2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	3324      	adds	r3, #36	; 0x24
 80106fe:	4619      	mov	r1, r3
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010704:	461a      	mov	r2, r3
 8010706:	88fb      	ldrh	r3, [r7, #6]
 8010708:	f7f7 fa2c 	bl	8007b64 <HAL_DMA_Start_IT>
 801070c:	4603      	mov	r3, r0
 801070e:	2b00      	cmp	r3, #0
 8010710:	d00d      	beq.n	801072e <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	2210      	movs	r2, #16
 8010716:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	2200      	movs	r2, #0
 801071e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	2220      	movs	r2, #32
 8010726:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 801072a:	2301      	movs	r3, #1
 801072c:	e055      	b.n	80107da <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	2200      	movs	r2, #0
 8010732:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	691b      	ldr	r3, [r3, #16]
 801073a:	2b00      	cmp	r3, #0
 801073c:	d018      	beq.n	8010770 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010746:	e853 3f00 	ldrex	r3, [r3]
 801074a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801074c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801074e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010752:	657b      	str	r3, [r7, #84]	; 0x54
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	461a      	mov	r2, r3
 801075a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801075c:	64bb      	str	r3, [r7, #72]	; 0x48
 801075e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010760:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010762:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010764:	e841 2300 	strex	r3, r2, [r1]
 8010768:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801076a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801076c:	2b00      	cmp	r3, #0
 801076e:	d1e6      	bne.n	801073e <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	3308      	adds	r3, #8
 8010776:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801077a:	e853 3f00 	ldrex	r3, [r3]
 801077e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010782:	f043 0301 	orr.w	r3, r3, #1
 8010786:	653b      	str	r3, [r7, #80]	; 0x50
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	3308      	adds	r3, #8
 801078e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010790:	637a      	str	r2, [r7, #52]	; 0x34
 8010792:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010794:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010796:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010798:	e841 2300 	strex	r3, r2, [r1]
 801079c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801079e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d1e5      	bne.n	8010770 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	3308      	adds	r3, #8
 80107aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107ac:	697b      	ldr	r3, [r7, #20]
 80107ae:	e853 3f00 	ldrex	r3, [r3]
 80107b2:	613b      	str	r3, [r7, #16]
   return(result);
 80107b4:	693b      	ldr	r3, [r7, #16]
 80107b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80107ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	3308      	adds	r3, #8
 80107c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80107c4:	623a      	str	r2, [r7, #32]
 80107c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107c8:	69f9      	ldr	r1, [r7, #28]
 80107ca:	6a3a      	ldr	r2, [r7, #32]
 80107cc:	e841 2300 	strex	r3, r2, [r1]
 80107d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80107d2:	69bb      	ldr	r3, [r7, #24]
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d1e5      	bne.n	80107a4 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 80107d8:	2300      	movs	r3, #0
}
 80107da:	4618      	mov	r0, r3
 80107dc:	3758      	adds	r7, #88	; 0x58
 80107de:	46bd      	mov	sp, r7
 80107e0:	bd80      	pop	{r7, pc}
 80107e2:	bf00      	nop
 80107e4:	08010941 	.word	0x08010941
 80107e8:	08010a63 	.word	0x08010a63
 80107ec:	08010a9b 	.word	0x08010a9b

080107f0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80107f0:	b480      	push	{r7}
 80107f2:	b08f      	sub	sp, #60	; 0x3c
 80107f4:	af00      	add	r7, sp, #0
 80107f6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107fe:	6a3b      	ldr	r3, [r7, #32]
 8010800:	e853 3f00 	ldrex	r3, [r3]
 8010804:	61fb      	str	r3, [r7, #28]
   return(result);
 8010806:	69fb      	ldr	r3, [r7, #28]
 8010808:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 801080c:	637b      	str	r3, [r7, #52]	; 0x34
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	461a      	mov	r2, r3
 8010814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010816:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010818:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801081a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801081c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801081e:	e841 2300 	strex	r3, r2, [r1]
 8010822:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010826:	2b00      	cmp	r3, #0
 8010828:	d1e6      	bne.n	80107f8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	3308      	adds	r3, #8
 8010830:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	e853 3f00 	ldrex	r3, [r3]
 8010838:	60bb      	str	r3, [r7, #8]
   return(result);
 801083a:	68bb      	ldr	r3, [r7, #8]
 801083c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8010840:	633b      	str	r3, [r7, #48]	; 0x30
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	3308      	adds	r3, #8
 8010848:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801084a:	61ba      	str	r2, [r7, #24]
 801084c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801084e:	6979      	ldr	r1, [r7, #20]
 8010850:	69ba      	ldr	r2, [r7, #24]
 8010852:	e841 2300 	strex	r3, r2, [r1]
 8010856:	613b      	str	r3, [r7, #16]
   return(result);
 8010858:	693b      	ldr	r3, [r7, #16]
 801085a:	2b00      	cmp	r3, #0
 801085c:	d1e5      	bne.n	801082a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	2220      	movs	r2, #32
 8010862:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8010866:	bf00      	nop
 8010868:	373c      	adds	r7, #60	; 0x3c
 801086a:	46bd      	mov	sp, r7
 801086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010870:	4770      	bx	lr
	...

08010874 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010874:	b480      	push	{r7}
 8010876:	b095      	sub	sp, #84	; 0x54
 8010878:	af00      	add	r7, sp, #0
 801087a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010884:	e853 3f00 	ldrex	r3, [r3]
 8010888:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801088a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801088c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010890:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	461a      	mov	r2, r3
 8010898:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801089a:	643b      	str	r3, [r7, #64]	; 0x40
 801089c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801089e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80108a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80108a2:	e841 2300 	strex	r3, r2, [r1]
 80108a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80108a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d1e6      	bne.n	801087c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	3308      	adds	r3, #8
 80108b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108b6:	6a3b      	ldr	r3, [r7, #32]
 80108b8:	e853 3f00 	ldrex	r3, [r3]
 80108bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80108be:	69fa      	ldr	r2, [r7, #28]
 80108c0:	4b1e      	ldr	r3, [pc, #120]	; (801093c <UART_EndRxTransfer+0xc8>)
 80108c2:	4013      	ands	r3, r2
 80108c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	3308      	adds	r3, #8
 80108cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80108ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80108d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80108d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80108d6:	e841 2300 	strex	r3, r2, [r1]
 80108da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80108dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d1e5      	bne.n	80108ae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80108e6:	2b01      	cmp	r3, #1
 80108e8:	d118      	bne.n	801091c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	e853 3f00 	ldrex	r3, [r3]
 80108f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80108f8:	68bb      	ldr	r3, [r7, #8]
 80108fa:	f023 0310 	bic.w	r3, r3, #16
 80108fe:	647b      	str	r3, [r7, #68]	; 0x44
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	461a      	mov	r2, r3
 8010906:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010908:	61bb      	str	r3, [r7, #24]
 801090a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801090c:	6979      	ldr	r1, [r7, #20]
 801090e:	69ba      	ldr	r2, [r7, #24]
 8010910:	e841 2300 	strex	r3, r2, [r1]
 8010914:	613b      	str	r3, [r7, #16]
   return(result);
 8010916:	693b      	ldr	r3, [r7, #16]
 8010918:	2b00      	cmp	r3, #0
 801091a:	d1e6      	bne.n	80108ea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	2220      	movs	r2, #32
 8010920:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	2200      	movs	r2, #0
 8010928:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	2200      	movs	r2, #0
 801092e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8010930:	bf00      	nop
 8010932:	3754      	adds	r7, #84	; 0x54
 8010934:	46bd      	mov	sp, r7
 8010936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801093a:	4770      	bx	lr
 801093c:	effffffe 	.word	0xeffffffe

08010940 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010940:	b580      	push	{r7, lr}
 8010942:	b09c      	sub	sp, #112	; 0x70
 8010944:	af00      	add	r7, sp, #0
 8010946:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801094c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	69db      	ldr	r3, [r3, #28]
 8010952:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010956:	d071      	beq.n	8010a3c <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8010958:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801095a:	2200      	movs	r2, #0
 801095c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010960:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010966:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010968:	e853 3f00 	ldrex	r3, [r3]
 801096c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801096e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010970:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010974:	66bb      	str	r3, [r7, #104]	; 0x68
 8010976:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	461a      	mov	r2, r3
 801097c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801097e:	65bb      	str	r3, [r7, #88]	; 0x58
 8010980:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010982:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010984:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010986:	e841 2300 	strex	r3, r2, [r1]
 801098a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801098c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801098e:	2b00      	cmp	r3, #0
 8010990:	d1e6      	bne.n	8010960 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010992:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	3308      	adds	r3, #8
 8010998:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801099a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801099c:	e853 3f00 	ldrex	r3, [r3]
 80109a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80109a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109a4:	f023 0301 	bic.w	r3, r3, #1
 80109a8:	667b      	str	r3, [r7, #100]	; 0x64
 80109aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	3308      	adds	r3, #8
 80109b0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80109b2:	647a      	str	r2, [r7, #68]	; 0x44
 80109b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80109b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80109ba:	e841 2300 	strex	r3, r2, [r1]
 80109be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80109c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d1e5      	bne.n	8010992 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80109c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	3308      	adds	r3, #8
 80109cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109d0:	e853 3f00 	ldrex	r3, [r3]
 80109d4:	623b      	str	r3, [r7, #32]
   return(result);
 80109d6:	6a3b      	ldr	r3, [r7, #32]
 80109d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80109dc:	663b      	str	r3, [r7, #96]	; 0x60
 80109de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	3308      	adds	r3, #8
 80109e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80109e6:	633a      	str	r2, [r7, #48]	; 0x30
 80109e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80109ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80109ee:	e841 2300 	strex	r3, r2, [r1]
 80109f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80109f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d1e5      	bne.n	80109c6 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80109fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80109fc:	2220      	movs	r2, #32
 80109fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010a02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010a04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a06:	2b01      	cmp	r3, #1
 8010a08:	d118      	bne.n	8010a3c <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010a0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a10:	693b      	ldr	r3, [r7, #16]
 8010a12:	e853 3f00 	ldrex	r3, [r3]
 8010a16:	60fb      	str	r3, [r7, #12]
   return(result);
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	f023 0310 	bic.w	r3, r3, #16
 8010a1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010a20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	461a      	mov	r2, r3
 8010a26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010a28:	61fb      	str	r3, [r7, #28]
 8010a2a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a2c:	69b9      	ldr	r1, [r7, #24]
 8010a2e:	69fa      	ldr	r2, [r7, #28]
 8010a30:	e841 2300 	strex	r3, r2, [r1]
 8010a34:	617b      	str	r3, [r7, #20]
   return(result);
 8010a36:	697b      	ldr	r3, [r7, #20]
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d1e6      	bne.n	8010a0a <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010a3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010a3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a40:	2b01      	cmp	r3, #1
 8010a42:	d107      	bne.n	8010a54 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010a44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010a46:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010a4a:	4619      	mov	r1, r3
 8010a4c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8010a4e:	f7fe fefd 	bl	800f84c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010a52:	e002      	b.n	8010a5a <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 8010a54:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8010a56:	f7fe fedb 	bl	800f810 <HAL_UART_RxCpltCallback>
}
 8010a5a:	bf00      	nop
 8010a5c:	3770      	adds	r7, #112	; 0x70
 8010a5e:	46bd      	mov	sp, r7
 8010a60:	bd80      	pop	{r7, pc}

08010a62 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010a62:	b580      	push	{r7, lr}
 8010a64:	b084      	sub	sp, #16
 8010a66:	af00      	add	r7, sp, #0
 8010a68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a6e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a74:	2b01      	cmp	r3, #1
 8010a76:	d109      	bne.n	8010a8c <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010a7e:	085b      	lsrs	r3, r3, #1
 8010a80:	b29b      	uxth	r3, r3
 8010a82:	4619      	mov	r1, r3
 8010a84:	68f8      	ldr	r0, [r7, #12]
 8010a86:	f7fe fee1 	bl	800f84c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010a8a:	e002      	b.n	8010a92 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8010a8c:	68f8      	ldr	r0, [r7, #12]
 8010a8e:	f7fe fec9 	bl	800f824 <HAL_UART_RxHalfCpltCallback>
}
 8010a92:	bf00      	nop
 8010a94:	3710      	adds	r7, #16
 8010a96:	46bd      	mov	sp, r7
 8010a98:	bd80      	pop	{r7, pc}

08010a9a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010a9a:	b580      	push	{r7, lr}
 8010a9c:	b086      	sub	sp, #24
 8010a9e:	af00      	add	r7, sp, #0
 8010aa0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010aa6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8010aa8:	697b      	ldr	r3, [r7, #20]
 8010aaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010aae:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8010ab0:	697b      	ldr	r3, [r7, #20]
 8010ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010ab6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010ab8:	697b      	ldr	r3, [r7, #20]
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	689b      	ldr	r3, [r3, #8]
 8010abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010ac2:	2b80      	cmp	r3, #128	; 0x80
 8010ac4:	d109      	bne.n	8010ada <UART_DMAError+0x40>
 8010ac6:	693b      	ldr	r3, [r7, #16]
 8010ac8:	2b21      	cmp	r3, #33	; 0x21
 8010aca:	d106      	bne.n	8010ada <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8010acc:	697b      	ldr	r3, [r7, #20]
 8010ace:	2200      	movs	r2, #0
 8010ad0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8010ad4:	6978      	ldr	r0, [r7, #20]
 8010ad6:	f7ff fe8b 	bl	80107f0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8010ada:	697b      	ldr	r3, [r7, #20]
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	689b      	ldr	r3, [r3, #8]
 8010ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010ae4:	2b40      	cmp	r3, #64	; 0x40
 8010ae6:	d109      	bne.n	8010afc <UART_DMAError+0x62>
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	2b22      	cmp	r3, #34	; 0x22
 8010aec:	d106      	bne.n	8010afc <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8010aee:	697b      	ldr	r3, [r7, #20]
 8010af0:	2200      	movs	r2, #0
 8010af2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8010af6:	6978      	ldr	r0, [r7, #20]
 8010af8:	f7ff febc 	bl	8010874 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010afc:	697b      	ldr	r3, [r7, #20]
 8010afe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010b02:	f043 0210 	orr.w	r2, r3, #16
 8010b06:	697b      	ldr	r3, [r7, #20]
 8010b08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010b0c:	6978      	ldr	r0, [r7, #20]
 8010b0e:	f7fe fe93 	bl	800f838 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010b12:	bf00      	nop
 8010b14:	3718      	adds	r7, #24
 8010b16:	46bd      	mov	sp, r7
 8010b18:	bd80      	pop	{r7, pc}

08010b1a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010b1a:	b580      	push	{r7, lr}
 8010b1c:	b084      	sub	sp, #16
 8010b1e:	af00      	add	r7, sp, #0
 8010b20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b26:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	2200      	movs	r2, #0
 8010b2c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	2200      	movs	r2, #0
 8010b34:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010b38:	68f8      	ldr	r0, [r7, #12]
 8010b3a:	f7fe fe7d 	bl	800f838 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010b3e:	bf00      	nop
 8010b40:	3710      	adds	r7, #16
 8010b42:	46bd      	mov	sp, r7
 8010b44:	bd80      	pop	{r7, pc}

08010b46 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010b46:	b580      	push	{r7, lr}
 8010b48:	b088      	sub	sp, #32
 8010b4a:	af00      	add	r7, sp, #0
 8010b4c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	e853 3f00 	ldrex	r3, [r3]
 8010b5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8010b5c:	68bb      	ldr	r3, [r7, #8]
 8010b5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010b62:	61fb      	str	r3, [r7, #28]
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	461a      	mov	r2, r3
 8010b6a:	69fb      	ldr	r3, [r7, #28]
 8010b6c:	61bb      	str	r3, [r7, #24]
 8010b6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b70:	6979      	ldr	r1, [r7, #20]
 8010b72:	69ba      	ldr	r2, [r7, #24]
 8010b74:	e841 2300 	strex	r3, r2, [r1]
 8010b78:	613b      	str	r3, [r7, #16]
   return(result);
 8010b7a:	693b      	ldr	r3, [r7, #16]
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d1e6      	bne.n	8010b4e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	2220      	movs	r2, #32
 8010b84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	2200      	movs	r2, #0
 8010b8c:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010b8e:	6878      	ldr	r0, [r7, #4]
 8010b90:	f7fe fe34 	bl	800f7fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010b94:	bf00      	nop
 8010b96:	3720      	adds	r7, #32
 8010b98:	46bd      	mov	sp, r7
 8010b9a:	bd80      	pop	{r7, pc}

08010b9c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010b9c:	b480      	push	{r7}
 8010b9e:	b083      	sub	sp, #12
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010ba4:	bf00      	nop
 8010ba6:	370c      	adds	r7, #12
 8010ba8:	46bd      	mov	sp, r7
 8010baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bae:	4770      	bx	lr

08010bb0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010bb0:	b480      	push	{r7}
 8010bb2:	b083      	sub	sp, #12
 8010bb4:	af00      	add	r7, sp, #0
 8010bb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010bb8:	bf00      	nop
 8010bba:	370c      	adds	r7, #12
 8010bbc:	46bd      	mov	sp, r7
 8010bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc2:	4770      	bx	lr

08010bc4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010bc4:	b480      	push	{r7}
 8010bc6:	b083      	sub	sp, #12
 8010bc8:	af00      	add	r7, sp, #0
 8010bca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010bcc:	bf00      	nop
 8010bce:	370c      	adds	r7, #12
 8010bd0:	46bd      	mov	sp, r7
 8010bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd6:	4770      	bx	lr

08010bd8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010bd8:	b480      	push	{r7}
 8010bda:	b085      	sub	sp, #20
 8010bdc:	af00      	add	r7, sp, #0
 8010bde:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010be6:	2b01      	cmp	r3, #1
 8010be8:	d101      	bne.n	8010bee <HAL_UARTEx_DisableFifoMode+0x16>
 8010bea:	2302      	movs	r3, #2
 8010bec:	e027      	b.n	8010c3e <HAL_UARTEx_DisableFifoMode+0x66>
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	2201      	movs	r2, #1
 8010bf2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	2224      	movs	r2, #36	; 0x24
 8010bfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	681b      	ldr	r3, [r3, #0]
 8010c02:	681b      	ldr	r3, [r3, #0]
 8010c04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	681a      	ldr	r2, [r3, #0]
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	f022 0201 	bic.w	r2, r2, #1
 8010c14:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010c16:	68fb      	ldr	r3, [r7, #12]
 8010c18:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8010c1c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	2200      	movs	r2, #0
 8010c22:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	68fa      	ldr	r2, [r7, #12]
 8010c2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	2220      	movs	r2, #32
 8010c30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	2200      	movs	r2, #0
 8010c38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010c3c:	2300      	movs	r3, #0
}
 8010c3e:	4618      	mov	r0, r3
 8010c40:	3714      	adds	r7, #20
 8010c42:	46bd      	mov	sp, r7
 8010c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c48:	4770      	bx	lr

08010c4a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010c4a:	b580      	push	{r7, lr}
 8010c4c:	b084      	sub	sp, #16
 8010c4e:	af00      	add	r7, sp, #0
 8010c50:	6078      	str	r0, [r7, #4]
 8010c52:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010c5a:	2b01      	cmp	r3, #1
 8010c5c:	d101      	bne.n	8010c62 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010c5e:	2302      	movs	r3, #2
 8010c60:	e02d      	b.n	8010cbe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	2201      	movs	r2, #1
 8010c66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	2224      	movs	r2, #36	; 0x24
 8010c6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	681a      	ldr	r2, [r3, #0]
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	f022 0201 	bic.w	r2, r2, #1
 8010c88:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	689b      	ldr	r3, [r3, #8]
 8010c90:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	683a      	ldr	r2, [r7, #0]
 8010c9a:	430a      	orrs	r2, r1
 8010c9c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010c9e:	6878      	ldr	r0, [r7, #4]
 8010ca0:	f000 f850 	bl	8010d44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	68fa      	ldr	r2, [r7, #12]
 8010caa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	2220      	movs	r2, #32
 8010cb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	2200      	movs	r2, #0
 8010cb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010cbc:	2300      	movs	r3, #0
}
 8010cbe:	4618      	mov	r0, r3
 8010cc0:	3710      	adds	r7, #16
 8010cc2:	46bd      	mov	sp, r7
 8010cc4:	bd80      	pop	{r7, pc}

08010cc6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010cc6:	b580      	push	{r7, lr}
 8010cc8:	b084      	sub	sp, #16
 8010cca:	af00      	add	r7, sp, #0
 8010ccc:	6078      	str	r0, [r7, #4]
 8010cce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010cd6:	2b01      	cmp	r3, #1
 8010cd8:	d101      	bne.n	8010cde <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010cda:	2302      	movs	r3, #2
 8010cdc:	e02d      	b.n	8010d3a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	2201      	movs	r2, #1
 8010ce2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	2224      	movs	r2, #36	; 0x24
 8010cea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	681a      	ldr	r2, [r3, #0]
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	f022 0201 	bic.w	r2, r2, #1
 8010d04:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	689b      	ldr	r3, [r3, #8]
 8010d0c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	683a      	ldr	r2, [r7, #0]
 8010d16:	430a      	orrs	r2, r1
 8010d18:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010d1a:	6878      	ldr	r0, [r7, #4]
 8010d1c:	f000 f812 	bl	8010d44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	68fa      	ldr	r2, [r7, #12]
 8010d26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	2220      	movs	r2, #32
 8010d2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	2200      	movs	r2, #0
 8010d34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010d38:	2300      	movs	r3, #0
}
 8010d3a:	4618      	mov	r0, r3
 8010d3c:	3710      	adds	r7, #16
 8010d3e:	46bd      	mov	sp, r7
 8010d40:	bd80      	pop	{r7, pc}
	...

08010d44 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010d44:	b480      	push	{r7}
 8010d46:	b085      	sub	sp, #20
 8010d48:	af00      	add	r7, sp, #0
 8010d4a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d108      	bne.n	8010d66 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	2201      	movs	r2, #1
 8010d58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	2201      	movs	r2, #1
 8010d60:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010d64:	e031      	b.n	8010dca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010d66:	2310      	movs	r3, #16
 8010d68:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010d6a:	2310      	movs	r3, #16
 8010d6c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	689b      	ldr	r3, [r3, #8]
 8010d74:	0e5b      	lsrs	r3, r3, #25
 8010d76:	b2db      	uxtb	r3, r3
 8010d78:	f003 0307 	and.w	r3, r3, #7
 8010d7c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	689b      	ldr	r3, [r3, #8]
 8010d84:	0f5b      	lsrs	r3, r3, #29
 8010d86:	b2db      	uxtb	r3, r3
 8010d88:	f003 0307 	and.w	r3, r3, #7
 8010d8c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010d8e:	7bbb      	ldrb	r3, [r7, #14]
 8010d90:	7b3a      	ldrb	r2, [r7, #12]
 8010d92:	4911      	ldr	r1, [pc, #68]	; (8010dd8 <UARTEx_SetNbDataToProcess+0x94>)
 8010d94:	5c8a      	ldrb	r2, [r1, r2]
 8010d96:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010d9a:	7b3a      	ldrb	r2, [r7, #12]
 8010d9c:	490f      	ldr	r1, [pc, #60]	; (8010ddc <UARTEx_SetNbDataToProcess+0x98>)
 8010d9e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010da0:	fb93 f3f2 	sdiv	r3, r3, r2
 8010da4:	b29a      	uxth	r2, r3
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010dac:	7bfb      	ldrb	r3, [r7, #15]
 8010dae:	7b7a      	ldrb	r2, [r7, #13]
 8010db0:	4909      	ldr	r1, [pc, #36]	; (8010dd8 <UARTEx_SetNbDataToProcess+0x94>)
 8010db2:	5c8a      	ldrb	r2, [r1, r2]
 8010db4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010db8:	7b7a      	ldrb	r2, [r7, #13]
 8010dba:	4908      	ldr	r1, [pc, #32]	; (8010ddc <UARTEx_SetNbDataToProcess+0x98>)
 8010dbc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010dbe:	fb93 f3f2 	sdiv	r3, r3, r2
 8010dc2:	b29a      	uxth	r2, r3
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8010dca:	bf00      	nop
 8010dcc:	3714      	adds	r7, #20
 8010dce:	46bd      	mov	sp, r7
 8010dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dd4:	4770      	bx	lr
 8010dd6:	bf00      	nop
 8010dd8:	08014604 	.word	0x08014604
 8010ddc:	0801460c 	.word	0x0801460c

08010de0 <_ZdlPvj>:
 8010de0:	f000 b8a9 	b.w	8010f36 <_ZdlPv>

08010de4 <_Znwj>:
 8010de4:	2801      	cmp	r0, #1
 8010de6:	bf38      	it	cc
 8010de8:	2001      	movcc	r0, #1
 8010dea:	b510      	push	{r4, lr}
 8010dec:	4604      	mov	r4, r0
 8010dee:	4620      	mov	r0, r4
 8010df0:	f000 ff22 	bl	8011c38 <malloc>
 8010df4:	b930      	cbnz	r0, 8010e04 <_Znwj+0x20>
 8010df6:	f000 f8a1 	bl	8010f3c <_ZSt15get_new_handlerv>
 8010dfa:	b908      	cbnz	r0, 8010e00 <_Znwj+0x1c>
 8010dfc:	f000 feea 	bl	8011bd4 <abort>
 8010e00:	4780      	blx	r0
 8010e02:	e7f4      	b.n	8010dee <_Znwj+0xa>
 8010e04:	bd10      	pop	{r4, pc}

08010e06 <_ZSt17__throw_bad_allocv>:
 8010e06:	b508      	push	{r3, lr}
 8010e08:	f000 fee4 	bl	8011bd4 <abort>

08010e0c <_ZSt20__throw_length_errorPKc>:
 8010e0c:	b508      	push	{r3, lr}
 8010e0e:	f000 fee1 	bl	8011bd4 <abort>

08010e12 <_ZSt25__throw_bad_function_callv>:
 8010e12:	b508      	push	{r3, lr}
 8010e14:	f000 fede 	bl	8011bd4 <abort>

08010e18 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj>:
 8010e18:	290d      	cmp	r1, #13
 8010e1a:	b570      	push	{r4, r5, r6, lr}
 8010e1c:	4602      	mov	r2, r0
 8010e1e:	d822      	bhi.n	8010e66 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x4e>
 8010e20:	2900      	cmp	r1, #0
 8010e22:	d03c      	beq.n	8010e9e <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x86>
 8010e24:	4b1f      	ldr	r3, [pc, #124]	; (8010ea4 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x8c>)
 8010e26:	ed92 6a00 	vldr	s12, [r2]
 8010e2a:	5c58      	ldrb	r0, [r3, r1]
 8010e2c:	ee07 0a90 	vmov	s15, r0
 8010e30:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8010e34:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010e38:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010e3c:	febb 7b47 	vrintm.f64	d7, d7
 8010e40:	eebc 7bc7 	vcvt.u32.f64	s14, d7
 8010e44:	ed82 7a01 	vstr	s14, [r2, #4]
 8010e48:	bd70      	pop	{r4, r5, r6, pc}
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	dd0e      	ble.n	8010e6c <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x54>
 8010e4e:	4618      	mov	r0, r3
 8010e50:	1043      	asrs	r3, r0, #1
 8010e52:	eb04 0583 	add.w	r5, r4, r3, lsl #2
 8010e56:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
 8010e5a:	428e      	cmp	r6, r1
 8010e5c:	d2f5      	bcs.n	8010e4a <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x32>
 8010e5e:	1ac3      	subs	r3, r0, r3
 8010e60:	1d2c      	adds	r4, r5, #4
 8010e62:	3b01      	subs	r3, #1
 8010e64:	e7f1      	b.n	8010e4a <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x32>
 8010e66:	4c10      	ldr	r4, [pc, #64]	; (8010ea8 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x90>)
 8010e68:	20f9      	movs	r0, #249	; 0xf9
 8010e6a:	e7f1      	b.n	8010e50 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x38>
 8010e6c:	4b0f      	ldr	r3, [pc, #60]	; (8010eac <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x94>)
 8010e6e:	6820      	ldr	r0, [r4, #0]
 8010e70:	429c      	cmp	r4, r3
 8010e72:	d011      	beq.n	8010e98 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x80>
 8010e74:	ed92 7a00 	vldr	s14, [r2]
 8010e78:	ee07 0a90 	vmov	s15, r0
 8010e7c:	eeb7 6ac7 	vcvt.f64.f32	d6, s14
 8010e80:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8010e84:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010e88:	febb 7b47 	vrintm.f64	d7, d7
 8010e8c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8010e90:	ee17 3a90 	vmov	r3, s15
 8010e94:	6053      	str	r3, [r2, #4]
 8010e96:	e7d7      	b.n	8010e48 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x30>
 8010e98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010e9c:	e7fa      	b.n	8010e94 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x7c>
 8010e9e:	2001      	movs	r0, #1
 8010ea0:	e7d2      	b.n	8010e48 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x30>
 8010ea2:	bf00      	nop
 8010ea4:	08014a18 	.word	0x08014a18
 8010ea8:	0801462c 	.word	0x0801462c
 8010eac:	08014a10 	.word	0x08014a10

08010eb0 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj>:
 8010eb0:	b510      	push	{r4, lr}
 8010eb2:	4604      	mov	r4, r0
 8010eb4:	4608      	mov	r0, r1
 8010eb6:	9902      	ldr	r1, [sp, #8]
 8010eb8:	440b      	add	r3, r1
 8010eba:	6841      	ldr	r1, [r0, #4]
 8010ebc:	428b      	cmp	r3, r1
 8010ebe:	d936      	bls.n	8010f2e <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0x7e>
 8010ec0:	2900      	cmp	r1, #0
 8010ec2:	bf14      	ite	ne
 8010ec4:	2100      	movne	r1, #0
 8010ec6:	210b      	moveq	r1, #11
 8010ec8:	428b      	cmp	r3, r1
 8010eca:	bf38      	it	cc
 8010ecc:	460b      	movcc	r3, r1
 8010ece:	ee06 3a90 	vmov	s13, r3
 8010ed2:	ed90 7a00 	vldr	s14, [r0]
 8010ed6:	eeb8 5b66 	vcvt.f64.u32	d5, s13
 8010eda:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8010ede:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8010ee2:	ee05 2a90 	vmov	s11, r2
 8010ee6:	eeb8 5b65 	vcvt.f64.u32	d5, s11
 8010eea:	eeb4 5bc6 	vcmpe.f64	d5, d6
 8010eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ef2:	d814      	bhi.n	8010f1e <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0x6e>
 8010ef4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8010ef8:	febb 6b46 	vrintm.f64	d6, d6
 8010efc:	ee36 6b07 	vadd.f64	d6, d6, d7
 8010f00:	eefc 7bc6 	vcvt.u32.f64	s15, d6
 8010f04:	0052      	lsls	r2, r2, #1
 8010f06:	ee17 1a90 	vmov	r1, s15
 8010f0a:	4291      	cmp	r1, r2
 8010f0c:	bf38      	it	cc
 8010f0e:	4611      	movcc	r1, r2
 8010f10:	f7ff ff82 	bl	8010e18 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj>
 8010f14:	2301      	movs	r3, #1
 8010f16:	7023      	strb	r3, [r4, #0]
 8010f18:	6060      	str	r0, [r4, #4]
 8010f1a:	4620      	mov	r0, r4
 8010f1c:	bd10      	pop	{r4, pc}
 8010f1e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010f22:	febb 7b47 	vrintm.f64	d7, d7
 8010f26:	eebc 7bc7 	vcvt.u32.f64	s14, d7
 8010f2a:	ed80 7a01 	vstr	s14, [r0, #4]
 8010f2e:	2300      	movs	r3, #0
 8010f30:	e9c4 3300 	strd	r3, r3, [r4]
 8010f34:	e7f1      	b.n	8010f1a <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0x6a>

08010f36 <_ZdlPv>:
 8010f36:	f000 be87 	b.w	8011c48 <free>
	...

08010f3c <_ZSt15get_new_handlerv>:
 8010f3c:	4b02      	ldr	r3, [pc, #8]	; (8010f48 <_ZSt15get_new_handlerv+0xc>)
 8010f3e:	6818      	ldr	r0, [r3, #0]
 8010f40:	f3bf 8f5b 	dmb	ish
 8010f44:	4770      	bx	lr
 8010f46:	bf00      	nop
 8010f48:	240009e8 	.word	0x240009e8
 8010f4c:	00000000 	.word	0x00000000

08010f50 <cos>:
 8010f50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010f52:	eeb0 7b40 	vmov.f64	d7, d0
 8010f56:	ee17 3a90 	vmov	r3, s15
 8010f5a:	4a21      	ldr	r2, [pc, #132]	; (8010fe0 <cos+0x90>)
 8010f5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010f60:	4293      	cmp	r3, r2
 8010f62:	dc06      	bgt.n	8010f72 <cos+0x22>
 8010f64:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8010fd8 <cos+0x88>
 8010f68:	b005      	add	sp, #20
 8010f6a:	f85d eb04 	ldr.w	lr, [sp], #4
 8010f6e:	f000 b9cb 	b.w	8011308 <__kernel_cos>
 8010f72:	4a1c      	ldr	r2, [pc, #112]	; (8010fe4 <cos+0x94>)
 8010f74:	4293      	cmp	r3, r2
 8010f76:	dd04      	ble.n	8010f82 <cos+0x32>
 8010f78:	ee30 0b40 	vsub.f64	d0, d0, d0
 8010f7c:	b005      	add	sp, #20
 8010f7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8010f82:	4668      	mov	r0, sp
 8010f84:	f000 f87c 	bl	8011080 <__ieee754_rem_pio2>
 8010f88:	f000 0003 	and.w	r0, r0, #3
 8010f8c:	2801      	cmp	r0, #1
 8010f8e:	d009      	beq.n	8010fa4 <cos+0x54>
 8010f90:	2802      	cmp	r0, #2
 8010f92:	d010      	beq.n	8010fb6 <cos+0x66>
 8010f94:	b9b0      	cbnz	r0, 8010fc4 <cos+0x74>
 8010f96:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010f9a:	ed9d 0b00 	vldr	d0, [sp]
 8010f9e:	f000 f9b3 	bl	8011308 <__kernel_cos>
 8010fa2:	e7eb      	b.n	8010f7c <cos+0x2c>
 8010fa4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010fa8:	ed9d 0b00 	vldr	d0, [sp]
 8010fac:	f000 fcb0 	bl	8011910 <__kernel_sin>
 8010fb0:	eeb1 0b40 	vneg.f64	d0, d0
 8010fb4:	e7e2      	b.n	8010f7c <cos+0x2c>
 8010fb6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010fba:	ed9d 0b00 	vldr	d0, [sp]
 8010fbe:	f000 f9a3 	bl	8011308 <__kernel_cos>
 8010fc2:	e7f5      	b.n	8010fb0 <cos+0x60>
 8010fc4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010fc8:	ed9d 0b00 	vldr	d0, [sp]
 8010fcc:	2001      	movs	r0, #1
 8010fce:	f000 fc9f 	bl	8011910 <__kernel_sin>
 8010fd2:	e7d3      	b.n	8010f7c <cos+0x2c>
 8010fd4:	f3af 8000 	nop.w
	...
 8010fe0:	3fe921fb 	.word	0x3fe921fb
 8010fe4:	7fefffff 	.word	0x7fefffff

08010fe8 <sin>:
 8010fe8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010fea:	eeb0 7b40 	vmov.f64	d7, d0
 8010fee:	ee17 3a90 	vmov	r3, s15
 8010ff2:	4a21      	ldr	r2, [pc, #132]	; (8011078 <sin+0x90>)
 8010ff4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010ff8:	4293      	cmp	r3, r2
 8010ffa:	dc07      	bgt.n	801100c <sin+0x24>
 8010ffc:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8011070 <sin+0x88>
 8011000:	2000      	movs	r0, #0
 8011002:	b005      	add	sp, #20
 8011004:	f85d eb04 	ldr.w	lr, [sp], #4
 8011008:	f000 bc82 	b.w	8011910 <__kernel_sin>
 801100c:	4a1b      	ldr	r2, [pc, #108]	; (801107c <sin+0x94>)
 801100e:	4293      	cmp	r3, r2
 8011010:	dd04      	ble.n	801101c <sin+0x34>
 8011012:	ee30 0b40 	vsub.f64	d0, d0, d0
 8011016:	b005      	add	sp, #20
 8011018:	f85d fb04 	ldr.w	pc, [sp], #4
 801101c:	4668      	mov	r0, sp
 801101e:	f000 f82f 	bl	8011080 <__ieee754_rem_pio2>
 8011022:	f000 0003 	and.w	r0, r0, #3
 8011026:	2801      	cmp	r0, #1
 8011028:	d00a      	beq.n	8011040 <sin+0x58>
 801102a:	2802      	cmp	r0, #2
 801102c:	d00f      	beq.n	801104e <sin+0x66>
 801102e:	b9c0      	cbnz	r0, 8011062 <sin+0x7a>
 8011030:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011034:	ed9d 0b00 	vldr	d0, [sp]
 8011038:	2001      	movs	r0, #1
 801103a:	f000 fc69 	bl	8011910 <__kernel_sin>
 801103e:	e7ea      	b.n	8011016 <sin+0x2e>
 8011040:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011044:	ed9d 0b00 	vldr	d0, [sp]
 8011048:	f000 f95e 	bl	8011308 <__kernel_cos>
 801104c:	e7e3      	b.n	8011016 <sin+0x2e>
 801104e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011052:	ed9d 0b00 	vldr	d0, [sp]
 8011056:	2001      	movs	r0, #1
 8011058:	f000 fc5a 	bl	8011910 <__kernel_sin>
 801105c:	eeb1 0b40 	vneg.f64	d0, d0
 8011060:	e7d9      	b.n	8011016 <sin+0x2e>
 8011062:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011066:	ed9d 0b00 	vldr	d0, [sp]
 801106a:	f000 f94d 	bl	8011308 <__kernel_cos>
 801106e:	e7f5      	b.n	801105c <sin+0x74>
	...
 8011078:	3fe921fb 	.word	0x3fe921fb
 801107c:	7fefffff 	.word	0x7fefffff

08011080 <__ieee754_rem_pio2>:
 8011080:	b570      	push	{r4, r5, r6, lr}
 8011082:	eeb0 7b40 	vmov.f64	d7, d0
 8011086:	ee17 5a90 	vmov	r5, s15
 801108a:	4b99      	ldr	r3, [pc, #612]	; (80112f0 <__ieee754_rem_pio2+0x270>)
 801108c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011090:	429e      	cmp	r6, r3
 8011092:	b088      	sub	sp, #32
 8011094:	4604      	mov	r4, r0
 8011096:	dc07      	bgt.n	80110a8 <__ieee754_rem_pio2+0x28>
 8011098:	2200      	movs	r2, #0
 801109a:	2300      	movs	r3, #0
 801109c:	ed84 0b00 	vstr	d0, [r4]
 80110a0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80110a4:	2000      	movs	r0, #0
 80110a6:	e01b      	b.n	80110e0 <__ieee754_rem_pio2+0x60>
 80110a8:	4b92      	ldr	r3, [pc, #584]	; (80112f4 <__ieee754_rem_pio2+0x274>)
 80110aa:	429e      	cmp	r6, r3
 80110ac:	dc3b      	bgt.n	8011126 <__ieee754_rem_pio2+0xa6>
 80110ae:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 80110b2:	2d00      	cmp	r5, #0
 80110b4:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 80112b0 <__ieee754_rem_pio2+0x230>
 80110b8:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 80110bc:	dd19      	ble.n	80110f2 <__ieee754_rem_pio2+0x72>
 80110be:	ee30 7b46 	vsub.f64	d7, d0, d6
 80110c2:	429e      	cmp	r6, r3
 80110c4:	d00e      	beq.n	80110e4 <__ieee754_rem_pio2+0x64>
 80110c6:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 80112b8 <__ieee754_rem_pio2+0x238>
 80110ca:	ee37 5b46 	vsub.f64	d5, d7, d6
 80110ce:	ee37 7b45 	vsub.f64	d7, d7, d5
 80110d2:	ed84 5b00 	vstr	d5, [r4]
 80110d6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80110da:	ed84 7b02 	vstr	d7, [r4, #8]
 80110de:	2001      	movs	r0, #1
 80110e0:	b008      	add	sp, #32
 80110e2:	bd70      	pop	{r4, r5, r6, pc}
 80110e4:	ed9f 6b76 	vldr	d6, [pc, #472]	; 80112c0 <__ieee754_rem_pio2+0x240>
 80110e8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80110ec:	ed9f 6b76 	vldr	d6, [pc, #472]	; 80112c8 <__ieee754_rem_pio2+0x248>
 80110f0:	e7eb      	b.n	80110ca <__ieee754_rem_pio2+0x4a>
 80110f2:	429e      	cmp	r6, r3
 80110f4:	ee30 7b06 	vadd.f64	d7, d0, d6
 80110f8:	d00e      	beq.n	8011118 <__ieee754_rem_pio2+0x98>
 80110fa:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 80112b8 <__ieee754_rem_pio2+0x238>
 80110fe:	ee37 5b06 	vadd.f64	d5, d7, d6
 8011102:	ee37 7b45 	vsub.f64	d7, d7, d5
 8011106:	ed84 5b00 	vstr	d5, [r4]
 801110a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801110e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011112:	ed84 7b02 	vstr	d7, [r4, #8]
 8011116:	e7e3      	b.n	80110e0 <__ieee754_rem_pio2+0x60>
 8011118:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80112c0 <__ieee754_rem_pio2+0x240>
 801111c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011120:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80112c8 <__ieee754_rem_pio2+0x248>
 8011124:	e7eb      	b.n	80110fe <__ieee754_rem_pio2+0x7e>
 8011126:	4b74      	ldr	r3, [pc, #464]	; (80112f8 <__ieee754_rem_pio2+0x278>)
 8011128:	429e      	cmp	r6, r3
 801112a:	dc70      	bgt.n	801120e <__ieee754_rem_pio2+0x18e>
 801112c:	f000 fc48 	bl	80119c0 <fabs>
 8011130:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8011134:	ed9f 6b66 	vldr	d6, [pc, #408]	; 80112d0 <__ieee754_rem_pio2+0x250>
 8011138:	eea0 7b06 	vfma.f64	d7, d0, d6
 801113c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8011140:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8011144:	ee17 0a90 	vmov	r0, s15
 8011148:	eeb1 4b45 	vneg.f64	d4, d5
 801114c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 80112b0 <__ieee754_rem_pio2+0x230>
 8011150:	eea5 0b47 	vfms.f64	d0, d5, d7
 8011154:	ed9f 7b58 	vldr	d7, [pc, #352]	; 80112b8 <__ieee754_rem_pio2+0x238>
 8011158:	281f      	cmp	r0, #31
 801115a:	ee25 7b07 	vmul.f64	d7, d5, d7
 801115e:	ee30 6b47 	vsub.f64	d6, d0, d7
 8011162:	dc08      	bgt.n	8011176 <__ieee754_rem_pio2+0xf6>
 8011164:	4b65      	ldr	r3, [pc, #404]	; (80112fc <__ieee754_rem_pio2+0x27c>)
 8011166:	1e42      	subs	r2, r0, #1
 8011168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801116c:	42b3      	cmp	r3, r6
 801116e:	d002      	beq.n	8011176 <__ieee754_rem_pio2+0xf6>
 8011170:	ed84 6b00 	vstr	d6, [r4]
 8011174:	e026      	b.n	80111c4 <__ieee754_rem_pio2+0x144>
 8011176:	ee16 3a90 	vmov	r3, s13
 801117a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801117e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8011182:	2b10      	cmp	r3, #16
 8011184:	ea4f 5226 	mov.w	r2, r6, asr #20
 8011188:	ddf2      	ble.n	8011170 <__ieee754_rem_pio2+0xf0>
 801118a:	eeb0 6b40 	vmov.f64	d6, d0
 801118e:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 80112c0 <__ieee754_rem_pio2+0x240>
 8011192:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 80112c8 <__ieee754_rem_pio2+0x248>
 8011196:	eea4 6b07 	vfma.f64	d6, d4, d7
 801119a:	ee30 0b46 	vsub.f64	d0, d0, d6
 801119e:	eea4 0b07 	vfma.f64	d0, d4, d7
 80111a2:	eeb0 7b40 	vmov.f64	d7, d0
 80111a6:	ee95 7b03 	vfnms.f64	d7, d5, d3
 80111aa:	ee36 3b47 	vsub.f64	d3, d6, d7
 80111ae:	ee13 3a90 	vmov	r3, s7
 80111b2:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80111b6:	1ad3      	subs	r3, r2, r3
 80111b8:	2b31      	cmp	r3, #49	; 0x31
 80111ba:	dc17      	bgt.n	80111ec <__ieee754_rem_pio2+0x16c>
 80111bc:	eeb0 0b46 	vmov.f64	d0, d6
 80111c0:	ed84 3b00 	vstr	d3, [r4]
 80111c4:	ed94 6b00 	vldr	d6, [r4]
 80111c8:	2d00      	cmp	r5, #0
 80111ca:	ee30 0b46 	vsub.f64	d0, d0, d6
 80111ce:	ee30 0b47 	vsub.f64	d0, d0, d7
 80111d2:	ed84 0b02 	vstr	d0, [r4, #8]
 80111d6:	da83      	bge.n	80110e0 <__ieee754_rem_pio2+0x60>
 80111d8:	eeb1 6b46 	vneg.f64	d6, d6
 80111dc:	eeb1 0b40 	vneg.f64	d0, d0
 80111e0:	ed84 6b00 	vstr	d6, [r4]
 80111e4:	ed84 0b02 	vstr	d0, [r4, #8]
 80111e8:	4240      	negs	r0, r0
 80111ea:	e779      	b.n	80110e0 <__ieee754_rem_pio2+0x60>
 80111ec:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 80112d8 <__ieee754_rem_pio2+0x258>
 80111f0:	eeb0 0b46 	vmov.f64	d0, d6
 80111f4:	eea4 0b03 	vfma.f64	d0, d4, d3
 80111f8:	ee36 7b40 	vsub.f64	d7, d6, d0
 80111fc:	ed9f 6b38 	vldr	d6, [pc, #224]	; 80112e0 <__ieee754_rem_pio2+0x260>
 8011200:	eea4 7b03 	vfma.f64	d7, d4, d3
 8011204:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8011208:	ee30 6b47 	vsub.f64	d6, d0, d7
 801120c:	e7b0      	b.n	8011170 <__ieee754_rem_pio2+0xf0>
 801120e:	4b3c      	ldr	r3, [pc, #240]	; (8011300 <__ieee754_rem_pio2+0x280>)
 8011210:	429e      	cmp	r6, r3
 8011212:	dd06      	ble.n	8011222 <__ieee754_rem_pio2+0x1a2>
 8011214:	ee30 7b40 	vsub.f64	d7, d0, d0
 8011218:	ed80 7b02 	vstr	d7, [r0, #8]
 801121c:	ed80 7b00 	vstr	d7, [r0]
 8011220:	e740      	b.n	80110a4 <__ieee754_rem_pio2+0x24>
 8011222:	1532      	asrs	r2, r6, #20
 8011224:	ee10 0a10 	vmov	r0, s0
 8011228:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 801122c:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8011230:	ec41 0b17 	vmov	d7, r0, r1
 8011234:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8011238:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 80112e8 <__ieee754_rem_pio2+0x268>
 801123c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8011240:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011244:	ed8d 6b02 	vstr	d6, [sp, #8]
 8011248:	ee27 7b05 	vmul.f64	d7, d7, d5
 801124c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8011250:	a902      	add	r1, sp, #8
 8011252:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8011256:	ee37 7b46 	vsub.f64	d7, d7, d6
 801125a:	ed8d 6b04 	vstr	d6, [sp, #16]
 801125e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011262:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011266:	2603      	movs	r6, #3
 8011268:	4608      	mov	r0, r1
 801126a:	ed91 7b04 	vldr	d7, [r1, #16]
 801126e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011276:	4633      	mov	r3, r6
 8011278:	f1a1 0108 	sub.w	r1, r1, #8
 801127c:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 8011280:	d0f3      	beq.n	801126a <__ieee754_rem_pio2+0x1ea>
 8011282:	4920      	ldr	r1, [pc, #128]	; (8011304 <__ieee754_rem_pio2+0x284>)
 8011284:	9101      	str	r1, [sp, #4]
 8011286:	2102      	movs	r1, #2
 8011288:	9100      	str	r1, [sp, #0]
 801128a:	4621      	mov	r1, r4
 801128c:	f000 f8a8 	bl	80113e0 <__kernel_rem_pio2>
 8011290:	2d00      	cmp	r5, #0
 8011292:	f6bf af25 	bge.w	80110e0 <__ieee754_rem_pio2+0x60>
 8011296:	ed94 7b00 	vldr	d7, [r4]
 801129a:	eeb1 7b47 	vneg.f64	d7, d7
 801129e:	ed84 7b00 	vstr	d7, [r4]
 80112a2:	ed94 7b02 	vldr	d7, [r4, #8]
 80112a6:	eeb1 7b47 	vneg.f64	d7, d7
 80112aa:	ed84 7b02 	vstr	d7, [r4, #8]
 80112ae:	e79b      	b.n	80111e8 <__ieee754_rem_pio2+0x168>
 80112b0:	54400000 	.word	0x54400000
 80112b4:	3ff921fb 	.word	0x3ff921fb
 80112b8:	1a626331 	.word	0x1a626331
 80112bc:	3dd0b461 	.word	0x3dd0b461
 80112c0:	1a600000 	.word	0x1a600000
 80112c4:	3dd0b461 	.word	0x3dd0b461
 80112c8:	2e037073 	.word	0x2e037073
 80112cc:	3ba3198a 	.word	0x3ba3198a
 80112d0:	6dc9c883 	.word	0x6dc9c883
 80112d4:	3fe45f30 	.word	0x3fe45f30
 80112d8:	2e000000 	.word	0x2e000000
 80112dc:	3ba3198a 	.word	0x3ba3198a
 80112e0:	252049c1 	.word	0x252049c1
 80112e4:	397b839a 	.word	0x397b839a
 80112e8:	00000000 	.word	0x00000000
 80112ec:	41700000 	.word	0x41700000
 80112f0:	3fe921fb 	.word	0x3fe921fb
 80112f4:	4002d97b 	.word	0x4002d97b
 80112f8:	413921fb 	.word	0x413921fb
 80112fc:	08014a28 	.word	0x08014a28
 8011300:	7fefffff 	.word	0x7fefffff
 8011304:	08014aa8 	.word	0x08014aa8

08011308 <__kernel_cos>:
 8011308:	ee10 1a90 	vmov	r1, s1
 801130c:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8011310:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8011314:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8011318:	da05      	bge.n	8011326 <__kernel_cos+0x1e>
 801131a:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801131e:	ee17 3a90 	vmov	r3, s15
 8011322:	2b00      	cmp	r3, #0
 8011324:	d03d      	beq.n	80113a2 <__kernel_cos+0x9a>
 8011326:	ee20 3b00 	vmul.f64	d3, d0, d0
 801132a:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 80113a8 <__kernel_cos+0xa0>
 801132e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80113b0 <__kernel_cos+0xa8>
 8011332:	eea3 6b07 	vfma.f64	d6, d3, d7
 8011336:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80113b8 <__kernel_cos+0xb0>
 801133a:	eea6 7b03 	vfma.f64	d7, d6, d3
 801133e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80113c0 <__kernel_cos+0xb8>
 8011342:	eea7 6b03 	vfma.f64	d6, d7, d3
 8011346:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80113c8 <__kernel_cos+0xc0>
 801134a:	4b23      	ldr	r3, [pc, #140]	; (80113d8 <__kernel_cos+0xd0>)
 801134c:	eea6 7b03 	vfma.f64	d7, d6, d3
 8011350:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 80113d0 <__kernel_cos+0xc8>
 8011354:	4299      	cmp	r1, r3
 8011356:	eea7 6b03 	vfma.f64	d6, d7, d3
 801135a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801135e:	ee26 5b03 	vmul.f64	d5, d6, d3
 8011362:	ee23 7b07 	vmul.f64	d7, d3, d7
 8011366:	ee21 6b40 	vnmul.f64	d6, d1, d0
 801136a:	eea3 6b05 	vfma.f64	d6, d3, d5
 801136e:	dc04      	bgt.n	801137a <__kernel_cos+0x72>
 8011370:	ee37 6b46 	vsub.f64	d6, d7, d6
 8011374:	ee34 0b46 	vsub.f64	d0, d4, d6
 8011378:	4770      	bx	lr
 801137a:	4b18      	ldr	r3, [pc, #96]	; (80113dc <__kernel_cos+0xd4>)
 801137c:	4299      	cmp	r1, r3
 801137e:	dc0d      	bgt.n	801139c <__kernel_cos+0x94>
 8011380:	2200      	movs	r2, #0
 8011382:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8011386:	ec43 2b15 	vmov	d5, r2, r3
 801138a:	ee34 0b45 	vsub.f64	d0, d4, d5
 801138e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8011392:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011396:	ee30 0b47 	vsub.f64	d0, d0, d7
 801139a:	4770      	bx	lr
 801139c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 80113a0:	e7f3      	b.n	801138a <__kernel_cos+0x82>
 80113a2:	eeb0 0b44 	vmov.f64	d0, d4
 80113a6:	4770      	bx	lr
 80113a8:	be8838d4 	.word	0xbe8838d4
 80113ac:	bda8fae9 	.word	0xbda8fae9
 80113b0:	bdb4b1c4 	.word	0xbdb4b1c4
 80113b4:	3e21ee9e 	.word	0x3e21ee9e
 80113b8:	809c52ad 	.word	0x809c52ad
 80113bc:	be927e4f 	.word	0xbe927e4f
 80113c0:	19cb1590 	.word	0x19cb1590
 80113c4:	3efa01a0 	.word	0x3efa01a0
 80113c8:	16c15177 	.word	0x16c15177
 80113cc:	bf56c16c 	.word	0xbf56c16c
 80113d0:	5555554c 	.word	0x5555554c
 80113d4:	3fa55555 	.word	0x3fa55555
 80113d8:	3fd33332 	.word	0x3fd33332
 80113dc:	3fe90000 	.word	0x3fe90000

080113e0 <__kernel_rem_pio2>:
 80113e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113e4:	ed2d 8b06 	vpush	{d8-d10}
 80113e8:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 80113ec:	460f      	mov	r7, r1
 80113ee:	9002      	str	r0, [sp, #8]
 80113f0:	49c5      	ldr	r1, [pc, #788]	; (8011708 <__kernel_rem_pio2+0x328>)
 80113f2:	98a2      	ldr	r0, [sp, #648]	; 0x288
 80113f4:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 80113f8:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 80113fc:	9301      	str	r3, [sp, #4]
 80113fe:	f112 0f14 	cmn.w	r2, #20
 8011402:	bfa8      	it	ge
 8011404:	2018      	movge	r0, #24
 8011406:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 801140a:	bfb8      	it	lt
 801140c:	2000      	movlt	r0, #0
 801140e:	f06f 0417 	mvn.w	r4, #23
 8011412:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 80116f0 <__kernel_rem_pio2+0x310>
 8011416:	bfa4      	itt	ge
 8011418:	f1a2 0a03 	subge.w	sl, r2, #3
 801141c:	fb9a f0f0 	sdivge	r0, sl, r0
 8011420:	fb00 4404 	mla	r4, r0, r4, r4
 8011424:	1a46      	subs	r6, r0, r1
 8011426:	4414      	add	r4, r2
 8011428:	eb09 0c01 	add.w	ip, r9, r1
 801142c:	ad1a      	add	r5, sp, #104	; 0x68
 801142e:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 8011432:	2200      	movs	r2, #0
 8011434:	4562      	cmp	r2, ip
 8011436:	dd10      	ble.n	801145a <__kernel_rem_pio2+0x7a>
 8011438:	9a01      	ldr	r2, [sp, #4]
 801143a:	ab1a      	add	r3, sp, #104	; 0x68
 801143c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8011440:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 8011444:	f04f 0c00 	mov.w	ip, #0
 8011448:	45cc      	cmp	ip, r9
 801144a:	dc26      	bgt.n	801149a <__kernel_rem_pio2+0xba>
 801144c:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 80116f0 <__kernel_rem_pio2+0x310>
 8011450:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8011454:	4616      	mov	r6, r2
 8011456:	2500      	movs	r5, #0
 8011458:	e015      	b.n	8011486 <__kernel_rem_pio2+0xa6>
 801145a:	42d6      	cmn	r6, r2
 801145c:	d409      	bmi.n	8011472 <__kernel_rem_pio2+0x92>
 801145e:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 8011462:	ee07 3a90 	vmov	s15, r3
 8011466:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801146a:	eca5 7b02 	vstmia	r5!, {d7}
 801146e:	3201      	adds	r2, #1
 8011470:	e7e0      	b.n	8011434 <__kernel_rem_pio2+0x54>
 8011472:	eeb0 7b46 	vmov.f64	d7, d6
 8011476:	e7f8      	b.n	801146a <__kernel_rem_pio2+0x8a>
 8011478:	ecb8 5b02 	vldmia	r8!, {d5}
 801147c:	ed96 6b00 	vldr	d6, [r6]
 8011480:	3501      	adds	r5, #1
 8011482:	eea5 7b06 	vfma.f64	d7, d5, d6
 8011486:	428d      	cmp	r5, r1
 8011488:	f1a6 0608 	sub.w	r6, r6, #8
 801148c:	ddf4      	ble.n	8011478 <__kernel_rem_pio2+0x98>
 801148e:	ecaa 7b02 	vstmia	sl!, {d7}
 8011492:	f10c 0c01 	add.w	ip, ip, #1
 8011496:	3208      	adds	r2, #8
 8011498:	e7d6      	b.n	8011448 <__kernel_rem_pio2+0x68>
 801149a:	ab06      	add	r3, sp, #24
 801149c:	ed9f 9b96 	vldr	d9, [pc, #600]	; 80116f8 <__kernel_rem_pio2+0x318>
 80114a0:	ed9f ab97 	vldr	d10, [pc, #604]	; 8011700 <__kernel_rem_pio2+0x320>
 80114a4:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 80114a8:	9303      	str	r3, [sp, #12]
 80114aa:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 80114ae:	464d      	mov	r5, r9
 80114b0:	00eb      	lsls	r3, r5, #3
 80114b2:	9304      	str	r3, [sp, #16]
 80114b4:	ab92      	add	r3, sp, #584	; 0x248
 80114b6:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 80114ba:	f10d 0b18 	add.w	fp, sp, #24
 80114be:	ab6a      	add	r3, sp, #424	; 0x1a8
 80114c0:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 80114c4:	465e      	mov	r6, fp
 80114c6:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 80114ca:	4628      	mov	r0, r5
 80114cc:	2800      	cmp	r0, #0
 80114ce:	f1a2 0208 	sub.w	r2, r2, #8
 80114d2:	dc4c      	bgt.n	801156e <__kernel_rem_pio2+0x18e>
 80114d4:	4620      	mov	r0, r4
 80114d6:	9105      	str	r1, [sp, #20]
 80114d8:	f000 faf2 	bl	8011ac0 <scalbn>
 80114dc:	eeb0 8b40 	vmov.f64	d8, d0
 80114e0:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 80114e4:	ee28 0b00 	vmul.f64	d0, d8, d0
 80114e8:	f000 fa76 	bl	80119d8 <floor>
 80114ec:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 80114f0:	eea0 8b47 	vfms.f64	d8, d0, d7
 80114f4:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 80114f8:	2c00      	cmp	r4, #0
 80114fa:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 80114fe:	ee17 8a90 	vmov	r8, s15
 8011502:	ee38 8b40 	vsub.f64	d8, d8, d0
 8011506:	9905      	ldr	r1, [sp, #20]
 8011508:	dd43      	ble.n	8011592 <__kernel_rem_pio2+0x1b2>
 801150a:	1e68      	subs	r0, r5, #1
 801150c:	ab06      	add	r3, sp, #24
 801150e:	f1c4 0c18 	rsb	ip, r4, #24
 8011512:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8011516:	fa46 f20c 	asr.w	r2, r6, ip
 801151a:	4490      	add	r8, r2
 801151c:	fa02 f20c 	lsl.w	r2, r2, ip
 8011520:	1ab6      	subs	r6, r6, r2
 8011522:	f1c4 0217 	rsb	r2, r4, #23
 8011526:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 801152a:	4116      	asrs	r6, r2
 801152c:	2e00      	cmp	r6, #0
 801152e:	dd3f      	ble.n	80115b0 <__kernel_rem_pio2+0x1d0>
 8011530:	f04f 0c00 	mov.w	ip, #0
 8011534:	f108 0801 	add.w	r8, r8, #1
 8011538:	4660      	mov	r0, ip
 801153a:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 801153e:	4565      	cmp	r5, ip
 8011540:	dc6e      	bgt.n	8011620 <__kernel_rem_pio2+0x240>
 8011542:	2c00      	cmp	r4, #0
 8011544:	dd04      	ble.n	8011550 <__kernel_rem_pio2+0x170>
 8011546:	2c01      	cmp	r4, #1
 8011548:	d07f      	beq.n	801164a <__kernel_rem_pio2+0x26a>
 801154a:	2c02      	cmp	r4, #2
 801154c:	f000 8087 	beq.w	801165e <__kernel_rem_pio2+0x27e>
 8011550:	2e02      	cmp	r6, #2
 8011552:	d12d      	bne.n	80115b0 <__kernel_rem_pio2+0x1d0>
 8011554:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011558:	ee30 8b48 	vsub.f64	d8, d0, d8
 801155c:	b340      	cbz	r0, 80115b0 <__kernel_rem_pio2+0x1d0>
 801155e:	4620      	mov	r0, r4
 8011560:	9105      	str	r1, [sp, #20]
 8011562:	f000 faad 	bl	8011ac0 <scalbn>
 8011566:	9905      	ldr	r1, [sp, #20]
 8011568:	ee38 8b40 	vsub.f64	d8, d8, d0
 801156c:	e020      	b.n	80115b0 <__kernel_rem_pio2+0x1d0>
 801156e:	ee20 7b09 	vmul.f64	d7, d0, d9
 8011572:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8011576:	3801      	subs	r0, #1
 8011578:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 801157c:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8011580:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8011584:	eca6 0a01 	vstmia	r6!, {s0}
 8011588:	ed92 0b00 	vldr	d0, [r2]
 801158c:	ee37 0b00 	vadd.f64	d0, d7, d0
 8011590:	e79c      	b.n	80114cc <__kernel_rem_pio2+0xec>
 8011592:	d105      	bne.n	80115a0 <__kernel_rem_pio2+0x1c0>
 8011594:	1e6a      	subs	r2, r5, #1
 8011596:	ab06      	add	r3, sp, #24
 8011598:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801159c:	15f6      	asrs	r6, r6, #23
 801159e:	e7c5      	b.n	801152c <__kernel_rem_pio2+0x14c>
 80115a0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80115a4:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80115a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115ac:	da36      	bge.n	801161c <__kernel_rem_pio2+0x23c>
 80115ae:	2600      	movs	r6, #0
 80115b0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80115b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115b8:	f040 80aa 	bne.w	8011710 <__kernel_rem_pio2+0x330>
 80115bc:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 80115c0:	4658      	mov	r0, fp
 80115c2:	2200      	movs	r2, #0
 80115c4:	4548      	cmp	r0, r9
 80115c6:	da52      	bge.n	801166e <__kernel_rem_pio2+0x28e>
 80115c8:	2a00      	cmp	r2, #0
 80115ca:	f000 8081 	beq.w	80116d0 <__kernel_rem_pio2+0x2f0>
 80115ce:	ab06      	add	r3, sp, #24
 80115d0:	3c18      	subs	r4, #24
 80115d2:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	f000 8087 	beq.w	80116ea <__kernel_rem_pio2+0x30a>
 80115dc:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80115e0:	4620      	mov	r0, r4
 80115e2:	f000 fa6d 	bl	8011ac0 <scalbn>
 80115e6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80115ea:	ed9f 6b43 	vldr	d6, [pc, #268]	; 80116f8 <__kernel_rem_pio2+0x318>
 80115ee:	a96a      	add	r1, sp, #424	; 0x1a8
 80115f0:	f103 0208 	add.w	r2, r3, #8
 80115f4:	1888      	adds	r0, r1, r2
 80115f6:	4659      	mov	r1, fp
 80115f8:	2900      	cmp	r1, #0
 80115fa:	f280 80b7 	bge.w	801176c <__kernel_rem_pio2+0x38c>
 80115fe:	4659      	mov	r1, fp
 8011600:	2900      	cmp	r1, #0
 8011602:	f2c0 80d5 	blt.w	80117b0 <__kernel_rem_pio2+0x3d0>
 8011606:	a86a      	add	r0, sp, #424	; 0x1a8
 8011608:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 801160c:	ed9f 7b38 	vldr	d7, [pc, #224]	; 80116f0 <__kernel_rem_pio2+0x310>
 8011610:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 801170c <__kernel_rem_pio2+0x32c>
 8011614:	2400      	movs	r4, #0
 8011616:	ebab 0001 	sub.w	r0, fp, r1
 801161a:	e0be      	b.n	801179a <__kernel_rem_pio2+0x3ba>
 801161c:	2602      	movs	r6, #2
 801161e:	e787      	b.n	8011530 <__kernel_rem_pio2+0x150>
 8011620:	f8db 2000 	ldr.w	r2, [fp]
 8011624:	b958      	cbnz	r0, 801163e <__kernel_rem_pio2+0x25e>
 8011626:	b122      	cbz	r2, 8011632 <__kernel_rem_pio2+0x252>
 8011628:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 801162c:	f8cb 2000 	str.w	r2, [fp]
 8011630:	2201      	movs	r2, #1
 8011632:	f10c 0c01 	add.w	ip, ip, #1
 8011636:	f10b 0b04 	add.w	fp, fp, #4
 801163a:	4610      	mov	r0, r2
 801163c:	e77f      	b.n	801153e <__kernel_rem_pio2+0x15e>
 801163e:	ebae 0202 	sub.w	r2, lr, r2
 8011642:	f8cb 2000 	str.w	r2, [fp]
 8011646:	4602      	mov	r2, r0
 8011648:	e7f3      	b.n	8011632 <__kernel_rem_pio2+0x252>
 801164a:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 801164e:	ab06      	add	r3, sp, #24
 8011650:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8011654:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8011658:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 801165c:	e778      	b.n	8011550 <__kernel_rem_pio2+0x170>
 801165e:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 8011662:	ab06      	add	r3, sp, #24
 8011664:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8011668:	f3c2 0215 	ubfx	r2, r2, #0, #22
 801166c:	e7f4      	b.n	8011658 <__kernel_rem_pio2+0x278>
 801166e:	ab06      	add	r3, sp, #24
 8011670:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8011674:	3801      	subs	r0, #1
 8011676:	431a      	orrs	r2, r3
 8011678:	e7a4      	b.n	80115c4 <__kernel_rem_pio2+0x1e4>
 801167a:	f10c 0c01 	add.w	ip, ip, #1
 801167e:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 8011682:	2800      	cmp	r0, #0
 8011684:	d0f9      	beq.n	801167a <__kernel_rem_pio2+0x29a>
 8011686:	9b04      	ldr	r3, [sp, #16]
 8011688:	f503 7312 	add.w	r3, r3, #584	; 0x248
 801168c:	eb0d 0203 	add.w	r2, sp, r3
 8011690:	9b01      	ldr	r3, [sp, #4]
 8011692:	18e8      	adds	r0, r5, r3
 8011694:	ab1a      	add	r3, sp, #104	; 0x68
 8011696:	1c6e      	adds	r6, r5, #1
 8011698:	3a98      	subs	r2, #152	; 0x98
 801169a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 801169e:	4465      	add	r5, ip
 80116a0:	42b5      	cmp	r5, r6
 80116a2:	f6ff af05 	blt.w	80114b0 <__kernel_rem_pio2+0xd0>
 80116a6:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 80116aa:	f8dd e008 	ldr.w	lr, [sp, #8]
 80116ae:	ee07 3a90 	vmov	s15, r3
 80116b2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80116b6:	f04f 0c00 	mov.w	ip, #0
 80116ba:	eca0 7b02 	vstmia	r0!, {d7}
 80116be:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 80116f0 <__kernel_rem_pio2+0x310>
 80116c2:	4680      	mov	r8, r0
 80116c4:	458c      	cmp	ip, r1
 80116c6:	dd07      	ble.n	80116d8 <__kernel_rem_pio2+0x2f8>
 80116c8:	eca2 7b02 	vstmia	r2!, {d7}
 80116cc:	3601      	adds	r6, #1
 80116ce:	e7e7      	b.n	80116a0 <__kernel_rem_pio2+0x2c0>
 80116d0:	9a03      	ldr	r2, [sp, #12]
 80116d2:	f04f 0c01 	mov.w	ip, #1
 80116d6:	e7d2      	b.n	801167e <__kernel_rem_pio2+0x29e>
 80116d8:	ecbe 5b02 	vldmia	lr!, {d5}
 80116dc:	ed38 6b02 	vldmdb	r8!, {d6}
 80116e0:	f10c 0c01 	add.w	ip, ip, #1
 80116e4:	eea5 7b06 	vfma.f64	d7, d5, d6
 80116e8:	e7ec      	b.n	80116c4 <__kernel_rem_pio2+0x2e4>
 80116ea:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80116ee:	e76e      	b.n	80115ce <__kernel_rem_pio2+0x1ee>
	...
 80116fc:	3e700000 	.word	0x3e700000
 8011700:	00000000 	.word	0x00000000
 8011704:	41700000 	.word	0x41700000
 8011708:	08014bf0 	.word	0x08014bf0
 801170c:	08014bb0 	.word	0x08014bb0
 8011710:	4260      	negs	r0, r4
 8011712:	eeb0 0b48 	vmov.f64	d0, d8
 8011716:	f000 f9d3 	bl	8011ac0 <scalbn>
 801171a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 80118f8 <__kernel_rem_pio2+0x518>
 801171e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8011722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011726:	db18      	blt.n	801175a <__kernel_rem_pio2+0x37a>
 8011728:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8011900 <__kernel_rem_pio2+0x520>
 801172c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8011730:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8011734:	aa06      	add	r2, sp, #24
 8011736:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 801173a:	eea5 0b46 	vfms.f64	d0, d5, d6
 801173e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8011742:	f105 0b01 	add.w	fp, r5, #1
 8011746:	ee10 3a10 	vmov	r3, s0
 801174a:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801174e:	ee17 3a10 	vmov	r3, s14
 8011752:	3418      	adds	r4, #24
 8011754:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 8011758:	e740      	b.n	80115dc <__kernel_rem_pio2+0x1fc>
 801175a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801175e:	aa06      	add	r2, sp, #24
 8011760:	ee10 3a10 	vmov	r3, s0
 8011764:	46ab      	mov	fp, r5
 8011766:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801176a:	e737      	b.n	80115dc <__kernel_rem_pio2+0x1fc>
 801176c:	ac06      	add	r4, sp, #24
 801176e:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 8011772:	9401      	str	r4, [sp, #4]
 8011774:	ee07 4a90 	vmov	s15, r4
 8011778:	3901      	subs	r1, #1
 801177a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801177e:	ee27 7b00 	vmul.f64	d7, d7, d0
 8011782:	ee20 0b06 	vmul.f64	d0, d0, d6
 8011786:	ed20 7b02 	vstmdb	r0!, {d7}
 801178a:	e735      	b.n	80115f8 <__kernel_rem_pio2+0x218>
 801178c:	ecbc 5b02 	vldmia	ip!, {d5}
 8011790:	ecb5 6b02 	vldmia	r5!, {d6}
 8011794:	3401      	adds	r4, #1
 8011796:	eea5 7b06 	vfma.f64	d7, d5, d6
 801179a:	454c      	cmp	r4, r9
 801179c:	dc01      	bgt.n	80117a2 <__kernel_rem_pio2+0x3c2>
 801179e:	4284      	cmp	r4, r0
 80117a0:	ddf4      	ble.n	801178c <__kernel_rem_pio2+0x3ac>
 80117a2:	ac42      	add	r4, sp, #264	; 0x108
 80117a4:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 80117a8:	ed80 7b00 	vstr	d7, [r0]
 80117ac:	3901      	subs	r1, #1
 80117ae:	e727      	b.n	8011600 <__kernel_rem_pio2+0x220>
 80117b0:	99a2      	ldr	r1, [sp, #648]	; 0x288
 80117b2:	2902      	cmp	r1, #2
 80117b4:	dc0a      	bgt.n	80117cc <__kernel_rem_pio2+0x3ec>
 80117b6:	2900      	cmp	r1, #0
 80117b8:	dc2c      	bgt.n	8011814 <__kernel_rem_pio2+0x434>
 80117ba:	d045      	beq.n	8011848 <__kernel_rem_pio2+0x468>
 80117bc:	f008 0007 	and.w	r0, r8, #7
 80117c0:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 80117c4:	ecbd 8b06 	vpop	{d8-d10}
 80117c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117cc:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 80117ce:	2a03      	cmp	r2, #3
 80117d0:	d1f4      	bne.n	80117bc <__kernel_rem_pio2+0x3dc>
 80117d2:	aa42      	add	r2, sp, #264	; 0x108
 80117d4:	4413      	add	r3, r2
 80117d6:	461a      	mov	r2, r3
 80117d8:	4619      	mov	r1, r3
 80117da:	4658      	mov	r0, fp
 80117dc:	2800      	cmp	r0, #0
 80117de:	f1a1 0108 	sub.w	r1, r1, #8
 80117e2:	dc54      	bgt.n	801188e <__kernel_rem_pio2+0x4ae>
 80117e4:	4659      	mov	r1, fp
 80117e6:	2901      	cmp	r1, #1
 80117e8:	f1a2 0208 	sub.w	r2, r2, #8
 80117ec:	dc5f      	bgt.n	80118ae <__kernel_rem_pio2+0x4ce>
 80117ee:	ed9f 7b46 	vldr	d7, [pc, #280]	; 8011908 <__kernel_rem_pio2+0x528>
 80117f2:	3308      	adds	r3, #8
 80117f4:	f1bb 0f01 	cmp.w	fp, #1
 80117f8:	dc69      	bgt.n	80118ce <__kernel_rem_pio2+0x4ee>
 80117fa:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 80117fe:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 8011802:	2e00      	cmp	r6, #0
 8011804:	d16a      	bne.n	80118dc <__kernel_rem_pio2+0x4fc>
 8011806:	ed87 5b00 	vstr	d5, [r7]
 801180a:	ed87 6b02 	vstr	d6, [r7, #8]
 801180e:	ed87 7b04 	vstr	d7, [r7, #16]
 8011812:	e7d3      	b.n	80117bc <__kernel_rem_pio2+0x3dc>
 8011814:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8011908 <__kernel_rem_pio2+0x528>
 8011818:	ab42      	add	r3, sp, #264	; 0x108
 801181a:	441a      	add	r2, r3
 801181c:	465b      	mov	r3, fp
 801181e:	2b00      	cmp	r3, #0
 8011820:	da26      	bge.n	8011870 <__kernel_rem_pio2+0x490>
 8011822:	b35e      	cbz	r6, 801187c <__kernel_rem_pio2+0x49c>
 8011824:	eeb1 7b46 	vneg.f64	d7, d6
 8011828:	ed87 7b00 	vstr	d7, [r7]
 801182c:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8011830:	aa44      	add	r2, sp, #272	; 0x110
 8011832:	2301      	movs	r3, #1
 8011834:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011838:	459b      	cmp	fp, r3
 801183a:	da22      	bge.n	8011882 <__kernel_rem_pio2+0x4a2>
 801183c:	b10e      	cbz	r6, 8011842 <__kernel_rem_pio2+0x462>
 801183e:	eeb1 7b47 	vneg.f64	d7, d7
 8011842:	ed87 7b02 	vstr	d7, [r7, #8]
 8011846:	e7b9      	b.n	80117bc <__kernel_rem_pio2+0x3dc>
 8011848:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8011908 <__kernel_rem_pio2+0x528>
 801184c:	ab42      	add	r3, sp, #264	; 0x108
 801184e:	441a      	add	r2, r3
 8011850:	f1bb 0f00 	cmp.w	fp, #0
 8011854:	da05      	bge.n	8011862 <__kernel_rem_pio2+0x482>
 8011856:	b10e      	cbz	r6, 801185c <__kernel_rem_pio2+0x47c>
 8011858:	eeb1 7b47 	vneg.f64	d7, d7
 801185c:	ed87 7b00 	vstr	d7, [r7]
 8011860:	e7ac      	b.n	80117bc <__kernel_rem_pio2+0x3dc>
 8011862:	ed32 6b02 	vldmdb	r2!, {d6}
 8011866:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801186a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801186e:	e7ef      	b.n	8011850 <__kernel_rem_pio2+0x470>
 8011870:	ed32 7b02 	vldmdb	r2!, {d7}
 8011874:	3b01      	subs	r3, #1
 8011876:	ee36 6b07 	vadd.f64	d6, d6, d7
 801187a:	e7d0      	b.n	801181e <__kernel_rem_pio2+0x43e>
 801187c:	eeb0 7b46 	vmov.f64	d7, d6
 8011880:	e7d2      	b.n	8011828 <__kernel_rem_pio2+0x448>
 8011882:	ecb2 6b02 	vldmia	r2!, {d6}
 8011886:	3301      	adds	r3, #1
 8011888:	ee37 7b06 	vadd.f64	d7, d7, d6
 801188c:	e7d4      	b.n	8011838 <__kernel_rem_pio2+0x458>
 801188e:	ed91 7b00 	vldr	d7, [r1]
 8011892:	ed91 5b02 	vldr	d5, [r1, #8]
 8011896:	3801      	subs	r0, #1
 8011898:	ee37 6b05 	vadd.f64	d6, d7, d5
 801189c:	ee37 7b46 	vsub.f64	d7, d7, d6
 80118a0:	ed81 6b00 	vstr	d6, [r1]
 80118a4:	ee37 7b05 	vadd.f64	d7, d7, d5
 80118a8:	ed81 7b02 	vstr	d7, [r1, #8]
 80118ac:	e796      	b.n	80117dc <__kernel_rem_pio2+0x3fc>
 80118ae:	ed92 7b00 	vldr	d7, [r2]
 80118b2:	ed92 5b02 	vldr	d5, [r2, #8]
 80118b6:	3901      	subs	r1, #1
 80118b8:	ee37 6b05 	vadd.f64	d6, d7, d5
 80118bc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80118c0:	ed82 6b00 	vstr	d6, [r2]
 80118c4:	ee37 7b05 	vadd.f64	d7, d7, d5
 80118c8:	ed82 7b02 	vstr	d7, [r2, #8]
 80118cc:	e78b      	b.n	80117e6 <__kernel_rem_pio2+0x406>
 80118ce:	ed33 6b02 	vldmdb	r3!, {d6}
 80118d2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80118d6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80118da:	e78b      	b.n	80117f4 <__kernel_rem_pio2+0x414>
 80118dc:	eeb1 5b45 	vneg.f64	d5, d5
 80118e0:	eeb1 6b46 	vneg.f64	d6, d6
 80118e4:	ed87 5b00 	vstr	d5, [r7]
 80118e8:	eeb1 7b47 	vneg.f64	d7, d7
 80118ec:	ed87 6b02 	vstr	d6, [r7, #8]
 80118f0:	e78d      	b.n	801180e <__kernel_rem_pio2+0x42e>
 80118f2:	bf00      	nop
 80118f4:	f3af 8000 	nop.w
 80118f8:	00000000 	.word	0x00000000
 80118fc:	41700000 	.word	0x41700000
 8011900:	00000000 	.word	0x00000000
 8011904:	3e700000 	.word	0x3e700000
	...

08011910 <__kernel_sin>:
 8011910:	ee10 3a90 	vmov	r3, s1
 8011914:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011918:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801191c:	da04      	bge.n	8011928 <__kernel_sin+0x18>
 801191e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8011922:	ee17 3a90 	vmov	r3, s15
 8011926:	b35b      	cbz	r3, 8011980 <__kernel_sin+0x70>
 8011928:	ee20 6b00 	vmul.f64	d6, d0, d0
 801192c:	ee20 5b06 	vmul.f64	d5, d0, d6
 8011930:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8011988 <__kernel_sin+0x78>
 8011934:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8011990 <__kernel_sin+0x80>
 8011938:	eea6 4b07 	vfma.f64	d4, d6, d7
 801193c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8011998 <__kernel_sin+0x88>
 8011940:	eea4 7b06 	vfma.f64	d7, d4, d6
 8011944:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80119a0 <__kernel_sin+0x90>
 8011948:	eea7 4b06 	vfma.f64	d4, d7, d6
 801194c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80119a8 <__kernel_sin+0x98>
 8011950:	eea4 7b06 	vfma.f64	d7, d4, d6
 8011954:	b930      	cbnz	r0, 8011964 <__kernel_sin+0x54>
 8011956:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80119b0 <__kernel_sin+0xa0>
 801195a:	eea6 4b07 	vfma.f64	d4, d6, d7
 801195e:	eea4 0b05 	vfma.f64	d0, d4, d5
 8011962:	4770      	bx	lr
 8011964:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8011968:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 801196c:	eea1 7b04 	vfma.f64	d7, d1, d4
 8011970:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8011974:	ed9f 7b10 	vldr	d7, [pc, #64]	; 80119b8 <__kernel_sin+0xa8>
 8011978:	eea5 1b07 	vfma.f64	d1, d5, d7
 801197c:	ee30 0b41 	vsub.f64	d0, d0, d1
 8011980:	4770      	bx	lr
 8011982:	bf00      	nop
 8011984:	f3af 8000 	nop.w
 8011988:	5acfd57c 	.word	0x5acfd57c
 801198c:	3de5d93a 	.word	0x3de5d93a
 8011990:	8a2b9ceb 	.word	0x8a2b9ceb
 8011994:	be5ae5e6 	.word	0xbe5ae5e6
 8011998:	57b1fe7d 	.word	0x57b1fe7d
 801199c:	3ec71de3 	.word	0x3ec71de3
 80119a0:	19c161d5 	.word	0x19c161d5
 80119a4:	bf2a01a0 	.word	0xbf2a01a0
 80119a8:	1110f8a6 	.word	0x1110f8a6
 80119ac:	3f811111 	.word	0x3f811111
 80119b0:	55555549 	.word	0x55555549
 80119b4:	bfc55555 	.word	0xbfc55555
 80119b8:	55555549 	.word	0x55555549
 80119bc:	3fc55555 	.word	0x3fc55555

080119c0 <fabs>:
 80119c0:	ec51 0b10 	vmov	r0, r1, d0
 80119c4:	ee10 2a10 	vmov	r2, s0
 80119c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80119cc:	ec43 2b10 	vmov	d0, r2, r3
 80119d0:	4770      	bx	lr
 80119d2:	0000      	movs	r0, r0
 80119d4:	0000      	movs	r0, r0
	...

080119d8 <floor>:
 80119d8:	ee10 1a90 	vmov	r1, s1
 80119dc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80119e0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 80119e4:	2b13      	cmp	r3, #19
 80119e6:	b530      	push	{r4, r5, lr}
 80119e8:	ee10 0a10 	vmov	r0, s0
 80119ec:	ee10 5a10 	vmov	r5, s0
 80119f0:	dc31      	bgt.n	8011a56 <floor+0x7e>
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	da15      	bge.n	8011a22 <floor+0x4a>
 80119f6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8011ab0 <floor+0xd8>
 80119fa:	ee30 0b07 	vadd.f64	d0, d0, d7
 80119fe:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a06:	dd07      	ble.n	8011a18 <floor+0x40>
 8011a08:	2900      	cmp	r1, #0
 8011a0a:	da4e      	bge.n	8011aaa <floor+0xd2>
 8011a0c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011a10:	4318      	orrs	r0, r3
 8011a12:	d001      	beq.n	8011a18 <floor+0x40>
 8011a14:	4928      	ldr	r1, [pc, #160]	; (8011ab8 <floor+0xe0>)
 8011a16:	2000      	movs	r0, #0
 8011a18:	460b      	mov	r3, r1
 8011a1a:	4602      	mov	r2, r0
 8011a1c:	ec43 2b10 	vmov	d0, r2, r3
 8011a20:	e020      	b.n	8011a64 <floor+0x8c>
 8011a22:	4a26      	ldr	r2, [pc, #152]	; (8011abc <floor+0xe4>)
 8011a24:	411a      	asrs	r2, r3
 8011a26:	ea01 0402 	and.w	r4, r1, r2
 8011a2a:	4304      	orrs	r4, r0
 8011a2c:	d01a      	beq.n	8011a64 <floor+0x8c>
 8011a2e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8011ab0 <floor+0xd8>
 8011a32:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011a36:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a3e:	ddeb      	ble.n	8011a18 <floor+0x40>
 8011a40:	2900      	cmp	r1, #0
 8011a42:	bfbe      	ittt	lt
 8011a44:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8011a48:	fa40 f303 	asrlt.w	r3, r0, r3
 8011a4c:	18c9      	addlt	r1, r1, r3
 8011a4e:	ea21 0102 	bic.w	r1, r1, r2
 8011a52:	2000      	movs	r0, #0
 8011a54:	e7e0      	b.n	8011a18 <floor+0x40>
 8011a56:	2b33      	cmp	r3, #51	; 0x33
 8011a58:	dd05      	ble.n	8011a66 <floor+0x8e>
 8011a5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011a5e:	d101      	bne.n	8011a64 <floor+0x8c>
 8011a60:	ee30 0b00 	vadd.f64	d0, d0, d0
 8011a64:	bd30      	pop	{r4, r5, pc}
 8011a66:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8011a6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011a6e:	40e2      	lsrs	r2, r4
 8011a70:	4202      	tst	r2, r0
 8011a72:	d0f7      	beq.n	8011a64 <floor+0x8c>
 8011a74:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8011ab0 <floor+0xd8>
 8011a78:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011a7c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a84:	ddc8      	ble.n	8011a18 <floor+0x40>
 8011a86:	2900      	cmp	r1, #0
 8011a88:	da02      	bge.n	8011a90 <floor+0xb8>
 8011a8a:	2b14      	cmp	r3, #20
 8011a8c:	d103      	bne.n	8011a96 <floor+0xbe>
 8011a8e:	3101      	adds	r1, #1
 8011a90:	ea20 0002 	bic.w	r0, r0, r2
 8011a94:	e7c0      	b.n	8011a18 <floor+0x40>
 8011a96:	2401      	movs	r4, #1
 8011a98:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8011a9c:	fa04 f303 	lsl.w	r3, r4, r3
 8011aa0:	4418      	add	r0, r3
 8011aa2:	42a8      	cmp	r0, r5
 8011aa4:	bf38      	it	cc
 8011aa6:	1909      	addcc	r1, r1, r4
 8011aa8:	e7f2      	b.n	8011a90 <floor+0xb8>
 8011aaa:	2000      	movs	r0, #0
 8011aac:	4601      	mov	r1, r0
 8011aae:	e7b3      	b.n	8011a18 <floor+0x40>
 8011ab0:	8800759c 	.word	0x8800759c
 8011ab4:	7e37e43c 	.word	0x7e37e43c
 8011ab8:	bff00000 	.word	0xbff00000
 8011abc:	000fffff 	.word	0x000fffff

08011ac0 <scalbn>:
 8011ac0:	ee10 1a90 	vmov	r1, s1
 8011ac4:	b510      	push	{r4, lr}
 8011ac6:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8011aca:	b98c      	cbnz	r4, 8011af0 <scalbn+0x30>
 8011acc:	ee10 3a10 	vmov	r3, s0
 8011ad0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8011ad4:	430b      	orrs	r3, r1
 8011ad6:	d011      	beq.n	8011afc <scalbn+0x3c>
 8011ad8:	ed9f 7b31 	vldr	d7, [pc, #196]	; 8011ba0 <scalbn+0xe0>
 8011adc:	4b3c      	ldr	r3, [pc, #240]	; (8011bd0 <scalbn+0x110>)
 8011ade:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011ae2:	4298      	cmp	r0, r3
 8011ae4:	da0b      	bge.n	8011afe <scalbn+0x3e>
 8011ae6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8011ba8 <scalbn+0xe8>
 8011aea:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011aee:	e005      	b.n	8011afc <scalbn+0x3c>
 8011af0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8011af4:	429c      	cmp	r4, r3
 8011af6:	d107      	bne.n	8011b08 <scalbn+0x48>
 8011af8:	ee30 0b00 	vadd.f64	d0, d0, d0
 8011afc:	bd10      	pop	{r4, pc}
 8011afe:	ee10 1a90 	vmov	r1, s1
 8011b02:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8011b06:	3c36      	subs	r4, #54	; 0x36
 8011b08:	4404      	add	r4, r0
 8011b0a:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8011b0e:	429c      	cmp	r4, r3
 8011b10:	dd0d      	ble.n	8011b2e <scalbn+0x6e>
 8011b12:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8011bb0 <scalbn+0xf0>
 8011b16:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8011bb8 <scalbn+0xf8>
 8011b1a:	eeb0 6b47 	vmov.f64	d6, d7
 8011b1e:	ee10 3a90 	vmov	r3, s1
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	fe27 7b05 	vselge.f64	d7, d7, d5
 8011b28:	ee27 0b06 	vmul.f64	d0, d7, d6
 8011b2c:	e7e6      	b.n	8011afc <scalbn+0x3c>
 8011b2e:	2c00      	cmp	r4, #0
 8011b30:	dd0a      	ble.n	8011b48 <scalbn+0x88>
 8011b32:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8011b36:	ec53 2b10 	vmov	r2, r3, d0
 8011b3a:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8011b3e:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 8011b42:	ec43 2b10 	vmov	d0, r2, r3
 8011b46:	e7d9      	b.n	8011afc <scalbn+0x3c>
 8011b48:	f114 0f35 	cmn.w	r4, #53	; 0x35
 8011b4c:	da19      	bge.n	8011b82 <scalbn+0xc2>
 8011b4e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8011b52:	4298      	cmp	r0, r3
 8011b54:	ee10 3a90 	vmov	r3, s1
 8011b58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011b5c:	dd09      	ble.n	8011b72 <scalbn+0xb2>
 8011b5e:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8011bb0 <scalbn+0xf0>
 8011b62:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8011bb8 <scalbn+0xf8>
 8011b66:	eeb0 7b40 	vmov.f64	d7, d0
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	fe00 0b06 	vseleq.f64	d0, d0, d6
 8011b70:	e7bb      	b.n	8011aea <scalbn+0x2a>
 8011b72:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8011ba8 <scalbn+0xe8>
 8011b76:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8011bc0 <scalbn+0x100>
 8011b7a:	eeb0 7b40 	vmov.f64	d7, d0
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	e7f4      	b.n	8011b6c <scalbn+0xac>
 8011b82:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8011b86:	ec53 2b10 	vmov	r2, r3, d0
 8011b8a:	3436      	adds	r4, #54	; 0x36
 8011b8c:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8011b90:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 8011b94:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8011bc8 <scalbn+0x108>
 8011b98:	ec43 2b10 	vmov	d0, r2, r3
 8011b9c:	e7a5      	b.n	8011aea <scalbn+0x2a>
 8011b9e:	bf00      	nop
 8011ba0:	00000000 	.word	0x00000000
 8011ba4:	43500000 	.word	0x43500000
 8011ba8:	c2f8f359 	.word	0xc2f8f359
 8011bac:	01a56e1f 	.word	0x01a56e1f
 8011bb0:	8800759c 	.word	0x8800759c
 8011bb4:	7e37e43c 	.word	0x7e37e43c
 8011bb8:	8800759c 	.word	0x8800759c
 8011bbc:	fe37e43c 	.word	0xfe37e43c
 8011bc0:	c2f8f359 	.word	0xc2f8f359
 8011bc4:	81a56e1f 	.word	0x81a56e1f
 8011bc8:	00000000 	.word	0x00000000
 8011bcc:	3c900000 	.word	0x3c900000
 8011bd0:	ffff3cb0 	.word	0xffff3cb0

08011bd4 <abort>:
 8011bd4:	b508      	push	{r3, lr}
 8011bd6:	2006      	movs	r0, #6
 8011bd8:	f000 fdb0 	bl	801273c <raise>
 8011bdc:	2001      	movs	r0, #1
 8011bde:	f7f4 fad1 	bl	8006184 <_exit>
	...

08011be4 <__errno>:
 8011be4:	4b01      	ldr	r3, [pc, #4]	; (8011bec <__errno+0x8>)
 8011be6:	6818      	ldr	r0, [r3, #0]
 8011be8:	4770      	bx	lr
 8011bea:	bf00      	nop
 8011bec:	24000010 	.word	0x24000010

08011bf0 <__libc_init_array>:
 8011bf0:	b570      	push	{r4, r5, r6, lr}
 8011bf2:	4d0d      	ldr	r5, [pc, #52]	; (8011c28 <__libc_init_array+0x38>)
 8011bf4:	4c0d      	ldr	r4, [pc, #52]	; (8011c2c <__libc_init_array+0x3c>)
 8011bf6:	1b64      	subs	r4, r4, r5
 8011bf8:	10a4      	asrs	r4, r4, #2
 8011bfa:	2600      	movs	r6, #0
 8011bfc:	42a6      	cmp	r6, r4
 8011bfe:	d109      	bne.n	8011c14 <__libc_init_array+0x24>
 8011c00:	4d0b      	ldr	r5, [pc, #44]	; (8011c30 <__libc_init_array+0x40>)
 8011c02:	4c0c      	ldr	r4, [pc, #48]	; (8011c34 <__libc_init_array+0x44>)
 8011c04:	f002 fc90 	bl	8014528 <_init>
 8011c08:	1b64      	subs	r4, r4, r5
 8011c0a:	10a4      	asrs	r4, r4, #2
 8011c0c:	2600      	movs	r6, #0
 8011c0e:	42a6      	cmp	r6, r4
 8011c10:	d105      	bne.n	8011c1e <__libc_init_array+0x2e>
 8011c12:	bd70      	pop	{r4, r5, r6, pc}
 8011c14:	f855 3b04 	ldr.w	r3, [r5], #4
 8011c18:	4798      	blx	r3
 8011c1a:	3601      	adds	r6, #1
 8011c1c:	e7ee      	b.n	8011bfc <__libc_init_array+0xc>
 8011c1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8011c22:	4798      	blx	r3
 8011c24:	3601      	adds	r6, #1
 8011c26:	e7f2      	b.n	8011c0e <__libc_init_array+0x1e>
 8011c28:	08014fe4 	.word	0x08014fe4
 8011c2c:	08014fe4 	.word	0x08014fe4
 8011c30:	08014fe4 	.word	0x08014fe4
 8011c34:	08014ff4 	.word	0x08014ff4

08011c38 <malloc>:
 8011c38:	4b02      	ldr	r3, [pc, #8]	; (8011c44 <malloc+0xc>)
 8011c3a:	4601      	mov	r1, r0
 8011c3c:	6818      	ldr	r0, [r3, #0]
 8011c3e:	f000 b88d 	b.w	8011d5c <_malloc_r>
 8011c42:	bf00      	nop
 8011c44:	24000010 	.word	0x24000010

08011c48 <free>:
 8011c48:	4b02      	ldr	r3, [pc, #8]	; (8011c54 <free+0xc>)
 8011c4a:	4601      	mov	r1, r0
 8011c4c:	6818      	ldr	r0, [r3, #0]
 8011c4e:	f000 b819 	b.w	8011c84 <_free_r>
 8011c52:	bf00      	nop
 8011c54:	24000010 	.word	0x24000010

08011c58 <memcpy>:
 8011c58:	440a      	add	r2, r1
 8011c5a:	4291      	cmp	r1, r2
 8011c5c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8011c60:	d100      	bne.n	8011c64 <memcpy+0xc>
 8011c62:	4770      	bx	lr
 8011c64:	b510      	push	{r4, lr}
 8011c66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011c6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011c6e:	4291      	cmp	r1, r2
 8011c70:	d1f9      	bne.n	8011c66 <memcpy+0xe>
 8011c72:	bd10      	pop	{r4, pc}

08011c74 <memset>:
 8011c74:	4402      	add	r2, r0
 8011c76:	4603      	mov	r3, r0
 8011c78:	4293      	cmp	r3, r2
 8011c7a:	d100      	bne.n	8011c7e <memset+0xa>
 8011c7c:	4770      	bx	lr
 8011c7e:	f803 1b01 	strb.w	r1, [r3], #1
 8011c82:	e7f9      	b.n	8011c78 <memset+0x4>

08011c84 <_free_r>:
 8011c84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011c86:	2900      	cmp	r1, #0
 8011c88:	d044      	beq.n	8011d14 <_free_r+0x90>
 8011c8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011c8e:	9001      	str	r0, [sp, #4]
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	f1a1 0404 	sub.w	r4, r1, #4
 8011c96:	bfb8      	it	lt
 8011c98:	18e4      	addlt	r4, r4, r3
 8011c9a:	f001 fb6b 	bl	8013374 <__malloc_lock>
 8011c9e:	4a1e      	ldr	r2, [pc, #120]	; (8011d18 <_free_r+0x94>)
 8011ca0:	9801      	ldr	r0, [sp, #4]
 8011ca2:	6813      	ldr	r3, [r2, #0]
 8011ca4:	b933      	cbnz	r3, 8011cb4 <_free_r+0x30>
 8011ca6:	6063      	str	r3, [r4, #4]
 8011ca8:	6014      	str	r4, [r2, #0]
 8011caa:	b003      	add	sp, #12
 8011cac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011cb0:	f001 bb66 	b.w	8013380 <__malloc_unlock>
 8011cb4:	42a3      	cmp	r3, r4
 8011cb6:	d908      	bls.n	8011cca <_free_r+0x46>
 8011cb8:	6825      	ldr	r5, [r4, #0]
 8011cba:	1961      	adds	r1, r4, r5
 8011cbc:	428b      	cmp	r3, r1
 8011cbe:	bf01      	itttt	eq
 8011cc0:	6819      	ldreq	r1, [r3, #0]
 8011cc2:	685b      	ldreq	r3, [r3, #4]
 8011cc4:	1949      	addeq	r1, r1, r5
 8011cc6:	6021      	streq	r1, [r4, #0]
 8011cc8:	e7ed      	b.n	8011ca6 <_free_r+0x22>
 8011cca:	461a      	mov	r2, r3
 8011ccc:	685b      	ldr	r3, [r3, #4]
 8011cce:	b10b      	cbz	r3, 8011cd4 <_free_r+0x50>
 8011cd0:	42a3      	cmp	r3, r4
 8011cd2:	d9fa      	bls.n	8011cca <_free_r+0x46>
 8011cd4:	6811      	ldr	r1, [r2, #0]
 8011cd6:	1855      	adds	r5, r2, r1
 8011cd8:	42a5      	cmp	r5, r4
 8011cda:	d10b      	bne.n	8011cf4 <_free_r+0x70>
 8011cdc:	6824      	ldr	r4, [r4, #0]
 8011cde:	4421      	add	r1, r4
 8011ce0:	1854      	adds	r4, r2, r1
 8011ce2:	42a3      	cmp	r3, r4
 8011ce4:	6011      	str	r1, [r2, #0]
 8011ce6:	d1e0      	bne.n	8011caa <_free_r+0x26>
 8011ce8:	681c      	ldr	r4, [r3, #0]
 8011cea:	685b      	ldr	r3, [r3, #4]
 8011cec:	6053      	str	r3, [r2, #4]
 8011cee:	4421      	add	r1, r4
 8011cf0:	6011      	str	r1, [r2, #0]
 8011cf2:	e7da      	b.n	8011caa <_free_r+0x26>
 8011cf4:	d902      	bls.n	8011cfc <_free_r+0x78>
 8011cf6:	230c      	movs	r3, #12
 8011cf8:	6003      	str	r3, [r0, #0]
 8011cfa:	e7d6      	b.n	8011caa <_free_r+0x26>
 8011cfc:	6825      	ldr	r5, [r4, #0]
 8011cfe:	1961      	adds	r1, r4, r5
 8011d00:	428b      	cmp	r3, r1
 8011d02:	bf04      	itt	eq
 8011d04:	6819      	ldreq	r1, [r3, #0]
 8011d06:	685b      	ldreq	r3, [r3, #4]
 8011d08:	6063      	str	r3, [r4, #4]
 8011d0a:	bf04      	itt	eq
 8011d0c:	1949      	addeq	r1, r1, r5
 8011d0e:	6021      	streq	r1, [r4, #0]
 8011d10:	6054      	str	r4, [r2, #4]
 8011d12:	e7ca      	b.n	8011caa <_free_r+0x26>
 8011d14:	b003      	add	sp, #12
 8011d16:	bd30      	pop	{r4, r5, pc}
 8011d18:	240009ec 	.word	0x240009ec

08011d1c <sbrk_aligned>:
 8011d1c:	b570      	push	{r4, r5, r6, lr}
 8011d1e:	4e0e      	ldr	r6, [pc, #56]	; (8011d58 <sbrk_aligned+0x3c>)
 8011d20:	460c      	mov	r4, r1
 8011d22:	6831      	ldr	r1, [r6, #0]
 8011d24:	4605      	mov	r5, r0
 8011d26:	b911      	cbnz	r1, 8011d2e <sbrk_aligned+0x12>
 8011d28:	f000 fcd0 	bl	80126cc <_sbrk_r>
 8011d2c:	6030      	str	r0, [r6, #0]
 8011d2e:	4621      	mov	r1, r4
 8011d30:	4628      	mov	r0, r5
 8011d32:	f000 fccb 	bl	80126cc <_sbrk_r>
 8011d36:	1c43      	adds	r3, r0, #1
 8011d38:	d00a      	beq.n	8011d50 <sbrk_aligned+0x34>
 8011d3a:	1cc4      	adds	r4, r0, #3
 8011d3c:	f024 0403 	bic.w	r4, r4, #3
 8011d40:	42a0      	cmp	r0, r4
 8011d42:	d007      	beq.n	8011d54 <sbrk_aligned+0x38>
 8011d44:	1a21      	subs	r1, r4, r0
 8011d46:	4628      	mov	r0, r5
 8011d48:	f000 fcc0 	bl	80126cc <_sbrk_r>
 8011d4c:	3001      	adds	r0, #1
 8011d4e:	d101      	bne.n	8011d54 <sbrk_aligned+0x38>
 8011d50:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8011d54:	4620      	mov	r0, r4
 8011d56:	bd70      	pop	{r4, r5, r6, pc}
 8011d58:	240009f0 	.word	0x240009f0

08011d5c <_malloc_r>:
 8011d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d60:	1ccd      	adds	r5, r1, #3
 8011d62:	f025 0503 	bic.w	r5, r5, #3
 8011d66:	3508      	adds	r5, #8
 8011d68:	2d0c      	cmp	r5, #12
 8011d6a:	bf38      	it	cc
 8011d6c:	250c      	movcc	r5, #12
 8011d6e:	2d00      	cmp	r5, #0
 8011d70:	4607      	mov	r7, r0
 8011d72:	db01      	blt.n	8011d78 <_malloc_r+0x1c>
 8011d74:	42a9      	cmp	r1, r5
 8011d76:	d905      	bls.n	8011d84 <_malloc_r+0x28>
 8011d78:	230c      	movs	r3, #12
 8011d7a:	603b      	str	r3, [r7, #0]
 8011d7c:	2600      	movs	r6, #0
 8011d7e:	4630      	mov	r0, r6
 8011d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d84:	4e2e      	ldr	r6, [pc, #184]	; (8011e40 <_malloc_r+0xe4>)
 8011d86:	f001 faf5 	bl	8013374 <__malloc_lock>
 8011d8a:	6833      	ldr	r3, [r6, #0]
 8011d8c:	461c      	mov	r4, r3
 8011d8e:	bb34      	cbnz	r4, 8011dde <_malloc_r+0x82>
 8011d90:	4629      	mov	r1, r5
 8011d92:	4638      	mov	r0, r7
 8011d94:	f7ff ffc2 	bl	8011d1c <sbrk_aligned>
 8011d98:	1c43      	adds	r3, r0, #1
 8011d9a:	4604      	mov	r4, r0
 8011d9c:	d14d      	bne.n	8011e3a <_malloc_r+0xde>
 8011d9e:	6834      	ldr	r4, [r6, #0]
 8011da0:	4626      	mov	r6, r4
 8011da2:	2e00      	cmp	r6, #0
 8011da4:	d140      	bne.n	8011e28 <_malloc_r+0xcc>
 8011da6:	6823      	ldr	r3, [r4, #0]
 8011da8:	4631      	mov	r1, r6
 8011daa:	4638      	mov	r0, r7
 8011dac:	eb04 0803 	add.w	r8, r4, r3
 8011db0:	f000 fc8c 	bl	80126cc <_sbrk_r>
 8011db4:	4580      	cmp	r8, r0
 8011db6:	d13a      	bne.n	8011e2e <_malloc_r+0xd2>
 8011db8:	6821      	ldr	r1, [r4, #0]
 8011dba:	3503      	adds	r5, #3
 8011dbc:	1a6d      	subs	r5, r5, r1
 8011dbe:	f025 0503 	bic.w	r5, r5, #3
 8011dc2:	3508      	adds	r5, #8
 8011dc4:	2d0c      	cmp	r5, #12
 8011dc6:	bf38      	it	cc
 8011dc8:	250c      	movcc	r5, #12
 8011dca:	4629      	mov	r1, r5
 8011dcc:	4638      	mov	r0, r7
 8011dce:	f7ff ffa5 	bl	8011d1c <sbrk_aligned>
 8011dd2:	3001      	adds	r0, #1
 8011dd4:	d02b      	beq.n	8011e2e <_malloc_r+0xd2>
 8011dd6:	6823      	ldr	r3, [r4, #0]
 8011dd8:	442b      	add	r3, r5
 8011dda:	6023      	str	r3, [r4, #0]
 8011ddc:	e00e      	b.n	8011dfc <_malloc_r+0xa0>
 8011dde:	6822      	ldr	r2, [r4, #0]
 8011de0:	1b52      	subs	r2, r2, r5
 8011de2:	d41e      	bmi.n	8011e22 <_malloc_r+0xc6>
 8011de4:	2a0b      	cmp	r2, #11
 8011de6:	d916      	bls.n	8011e16 <_malloc_r+0xba>
 8011de8:	1961      	adds	r1, r4, r5
 8011dea:	42a3      	cmp	r3, r4
 8011dec:	6025      	str	r5, [r4, #0]
 8011dee:	bf18      	it	ne
 8011df0:	6059      	strne	r1, [r3, #4]
 8011df2:	6863      	ldr	r3, [r4, #4]
 8011df4:	bf08      	it	eq
 8011df6:	6031      	streq	r1, [r6, #0]
 8011df8:	5162      	str	r2, [r4, r5]
 8011dfa:	604b      	str	r3, [r1, #4]
 8011dfc:	4638      	mov	r0, r7
 8011dfe:	f104 060b 	add.w	r6, r4, #11
 8011e02:	f001 fabd 	bl	8013380 <__malloc_unlock>
 8011e06:	f026 0607 	bic.w	r6, r6, #7
 8011e0a:	1d23      	adds	r3, r4, #4
 8011e0c:	1af2      	subs	r2, r6, r3
 8011e0e:	d0b6      	beq.n	8011d7e <_malloc_r+0x22>
 8011e10:	1b9b      	subs	r3, r3, r6
 8011e12:	50a3      	str	r3, [r4, r2]
 8011e14:	e7b3      	b.n	8011d7e <_malloc_r+0x22>
 8011e16:	6862      	ldr	r2, [r4, #4]
 8011e18:	42a3      	cmp	r3, r4
 8011e1a:	bf0c      	ite	eq
 8011e1c:	6032      	streq	r2, [r6, #0]
 8011e1e:	605a      	strne	r2, [r3, #4]
 8011e20:	e7ec      	b.n	8011dfc <_malloc_r+0xa0>
 8011e22:	4623      	mov	r3, r4
 8011e24:	6864      	ldr	r4, [r4, #4]
 8011e26:	e7b2      	b.n	8011d8e <_malloc_r+0x32>
 8011e28:	4634      	mov	r4, r6
 8011e2a:	6876      	ldr	r6, [r6, #4]
 8011e2c:	e7b9      	b.n	8011da2 <_malloc_r+0x46>
 8011e2e:	230c      	movs	r3, #12
 8011e30:	603b      	str	r3, [r7, #0]
 8011e32:	4638      	mov	r0, r7
 8011e34:	f001 faa4 	bl	8013380 <__malloc_unlock>
 8011e38:	e7a1      	b.n	8011d7e <_malloc_r+0x22>
 8011e3a:	6025      	str	r5, [r4, #0]
 8011e3c:	e7de      	b.n	8011dfc <_malloc_r+0xa0>
 8011e3e:	bf00      	nop
 8011e40:	240009ec 	.word	0x240009ec

08011e44 <__cvt>:
 8011e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e46:	ed2d 8b02 	vpush	{d8}
 8011e4a:	eeb0 8b40 	vmov.f64	d8, d0
 8011e4e:	b085      	sub	sp, #20
 8011e50:	4617      	mov	r7, r2
 8011e52:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8011e54:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8011e56:	ee18 2a90 	vmov	r2, s17
 8011e5a:	f025 0520 	bic.w	r5, r5, #32
 8011e5e:	2a00      	cmp	r2, #0
 8011e60:	bfb6      	itet	lt
 8011e62:	222d      	movlt	r2, #45	; 0x2d
 8011e64:	2200      	movge	r2, #0
 8011e66:	eeb1 8b40 	vneglt.f64	d8, d0
 8011e6a:	2d46      	cmp	r5, #70	; 0x46
 8011e6c:	460c      	mov	r4, r1
 8011e6e:	701a      	strb	r2, [r3, #0]
 8011e70:	d004      	beq.n	8011e7c <__cvt+0x38>
 8011e72:	2d45      	cmp	r5, #69	; 0x45
 8011e74:	d100      	bne.n	8011e78 <__cvt+0x34>
 8011e76:	3401      	adds	r4, #1
 8011e78:	2102      	movs	r1, #2
 8011e7a:	e000      	b.n	8011e7e <__cvt+0x3a>
 8011e7c:	2103      	movs	r1, #3
 8011e7e:	ab03      	add	r3, sp, #12
 8011e80:	9301      	str	r3, [sp, #4]
 8011e82:	ab02      	add	r3, sp, #8
 8011e84:	9300      	str	r3, [sp, #0]
 8011e86:	4622      	mov	r2, r4
 8011e88:	4633      	mov	r3, r6
 8011e8a:	eeb0 0b48 	vmov.f64	d0, d8
 8011e8e:	f000 fcff 	bl	8012890 <_dtoa_r>
 8011e92:	2d47      	cmp	r5, #71	; 0x47
 8011e94:	d101      	bne.n	8011e9a <__cvt+0x56>
 8011e96:	07fb      	lsls	r3, r7, #31
 8011e98:	d51a      	bpl.n	8011ed0 <__cvt+0x8c>
 8011e9a:	2d46      	cmp	r5, #70	; 0x46
 8011e9c:	eb00 0204 	add.w	r2, r0, r4
 8011ea0:	d10c      	bne.n	8011ebc <__cvt+0x78>
 8011ea2:	7803      	ldrb	r3, [r0, #0]
 8011ea4:	2b30      	cmp	r3, #48	; 0x30
 8011ea6:	d107      	bne.n	8011eb8 <__cvt+0x74>
 8011ea8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011eb0:	bf1c      	itt	ne
 8011eb2:	f1c4 0401 	rsbne	r4, r4, #1
 8011eb6:	6034      	strne	r4, [r6, #0]
 8011eb8:	6833      	ldr	r3, [r6, #0]
 8011eba:	441a      	add	r2, r3
 8011ebc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ec4:	bf08      	it	eq
 8011ec6:	9203      	streq	r2, [sp, #12]
 8011ec8:	2130      	movs	r1, #48	; 0x30
 8011eca:	9b03      	ldr	r3, [sp, #12]
 8011ecc:	4293      	cmp	r3, r2
 8011ece:	d307      	bcc.n	8011ee0 <__cvt+0x9c>
 8011ed0:	9b03      	ldr	r3, [sp, #12]
 8011ed2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011ed4:	1a1b      	subs	r3, r3, r0
 8011ed6:	6013      	str	r3, [r2, #0]
 8011ed8:	b005      	add	sp, #20
 8011eda:	ecbd 8b02 	vpop	{d8}
 8011ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ee0:	1c5c      	adds	r4, r3, #1
 8011ee2:	9403      	str	r4, [sp, #12]
 8011ee4:	7019      	strb	r1, [r3, #0]
 8011ee6:	e7f0      	b.n	8011eca <__cvt+0x86>

08011ee8 <__exponent>:
 8011ee8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011eea:	4603      	mov	r3, r0
 8011eec:	2900      	cmp	r1, #0
 8011eee:	bfb8      	it	lt
 8011ef0:	4249      	neglt	r1, r1
 8011ef2:	f803 2b02 	strb.w	r2, [r3], #2
 8011ef6:	bfb4      	ite	lt
 8011ef8:	222d      	movlt	r2, #45	; 0x2d
 8011efa:	222b      	movge	r2, #43	; 0x2b
 8011efc:	2909      	cmp	r1, #9
 8011efe:	7042      	strb	r2, [r0, #1]
 8011f00:	dd2a      	ble.n	8011f58 <__exponent+0x70>
 8011f02:	f10d 0407 	add.w	r4, sp, #7
 8011f06:	46a4      	mov	ip, r4
 8011f08:	270a      	movs	r7, #10
 8011f0a:	46a6      	mov	lr, r4
 8011f0c:	460a      	mov	r2, r1
 8011f0e:	fb91 f6f7 	sdiv	r6, r1, r7
 8011f12:	fb07 1516 	mls	r5, r7, r6, r1
 8011f16:	3530      	adds	r5, #48	; 0x30
 8011f18:	2a63      	cmp	r2, #99	; 0x63
 8011f1a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8011f1e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8011f22:	4631      	mov	r1, r6
 8011f24:	dcf1      	bgt.n	8011f0a <__exponent+0x22>
 8011f26:	3130      	adds	r1, #48	; 0x30
 8011f28:	f1ae 0502 	sub.w	r5, lr, #2
 8011f2c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8011f30:	1c44      	adds	r4, r0, #1
 8011f32:	4629      	mov	r1, r5
 8011f34:	4561      	cmp	r1, ip
 8011f36:	d30a      	bcc.n	8011f4e <__exponent+0x66>
 8011f38:	f10d 0209 	add.w	r2, sp, #9
 8011f3c:	eba2 020e 	sub.w	r2, r2, lr
 8011f40:	4565      	cmp	r5, ip
 8011f42:	bf88      	it	hi
 8011f44:	2200      	movhi	r2, #0
 8011f46:	4413      	add	r3, r2
 8011f48:	1a18      	subs	r0, r3, r0
 8011f4a:	b003      	add	sp, #12
 8011f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011f4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011f52:	f804 2f01 	strb.w	r2, [r4, #1]!
 8011f56:	e7ed      	b.n	8011f34 <__exponent+0x4c>
 8011f58:	2330      	movs	r3, #48	; 0x30
 8011f5a:	3130      	adds	r1, #48	; 0x30
 8011f5c:	7083      	strb	r3, [r0, #2]
 8011f5e:	70c1      	strb	r1, [r0, #3]
 8011f60:	1d03      	adds	r3, r0, #4
 8011f62:	e7f1      	b.n	8011f48 <__exponent+0x60>
 8011f64:	0000      	movs	r0, r0
	...

08011f68 <_printf_float>:
 8011f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f6c:	b08b      	sub	sp, #44	; 0x2c
 8011f6e:	460c      	mov	r4, r1
 8011f70:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8011f74:	4616      	mov	r6, r2
 8011f76:	461f      	mov	r7, r3
 8011f78:	4605      	mov	r5, r0
 8011f7a:	f001 f9f7 	bl	801336c <_localeconv_r>
 8011f7e:	f8d0 b000 	ldr.w	fp, [r0]
 8011f82:	4658      	mov	r0, fp
 8011f84:	f7ee f9ac 	bl	80002e0 <strlen>
 8011f88:	2300      	movs	r3, #0
 8011f8a:	9308      	str	r3, [sp, #32]
 8011f8c:	f8d8 3000 	ldr.w	r3, [r8]
 8011f90:	f894 9018 	ldrb.w	r9, [r4, #24]
 8011f94:	6822      	ldr	r2, [r4, #0]
 8011f96:	3307      	adds	r3, #7
 8011f98:	f023 0307 	bic.w	r3, r3, #7
 8011f9c:	f103 0108 	add.w	r1, r3, #8
 8011fa0:	f8c8 1000 	str.w	r1, [r8]
 8011fa4:	4682      	mov	sl, r0
 8011fa6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011faa:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8011fae:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8012210 <_printf_float+0x2a8>
 8011fb2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8011fb6:	eeb0 6bc0 	vabs.f64	d6, d0
 8011fba:	eeb4 6b47 	vcmp.f64	d6, d7
 8011fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fc2:	dd24      	ble.n	801200e <_printf_float+0xa6>
 8011fc4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fcc:	d502      	bpl.n	8011fd4 <_printf_float+0x6c>
 8011fce:	232d      	movs	r3, #45	; 0x2d
 8011fd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011fd4:	4b90      	ldr	r3, [pc, #576]	; (8012218 <_printf_float+0x2b0>)
 8011fd6:	4891      	ldr	r0, [pc, #580]	; (801221c <_printf_float+0x2b4>)
 8011fd8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8011fdc:	bf94      	ite	ls
 8011fde:	4698      	movls	r8, r3
 8011fe0:	4680      	movhi	r8, r0
 8011fe2:	2303      	movs	r3, #3
 8011fe4:	6123      	str	r3, [r4, #16]
 8011fe6:	f022 0204 	bic.w	r2, r2, #4
 8011fea:	2300      	movs	r3, #0
 8011fec:	6022      	str	r2, [r4, #0]
 8011fee:	9304      	str	r3, [sp, #16]
 8011ff0:	9700      	str	r7, [sp, #0]
 8011ff2:	4633      	mov	r3, r6
 8011ff4:	aa09      	add	r2, sp, #36	; 0x24
 8011ff6:	4621      	mov	r1, r4
 8011ff8:	4628      	mov	r0, r5
 8011ffa:	f000 f9d3 	bl	80123a4 <_printf_common>
 8011ffe:	3001      	adds	r0, #1
 8012000:	f040 808a 	bne.w	8012118 <_printf_float+0x1b0>
 8012004:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012008:	b00b      	add	sp, #44	; 0x2c
 801200a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801200e:	eeb4 0b40 	vcmp.f64	d0, d0
 8012012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012016:	d709      	bvc.n	801202c <_printf_float+0xc4>
 8012018:	ee10 3a90 	vmov	r3, s1
 801201c:	2b00      	cmp	r3, #0
 801201e:	bfbc      	itt	lt
 8012020:	232d      	movlt	r3, #45	; 0x2d
 8012022:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8012026:	487e      	ldr	r0, [pc, #504]	; (8012220 <_printf_float+0x2b8>)
 8012028:	4b7e      	ldr	r3, [pc, #504]	; (8012224 <_printf_float+0x2bc>)
 801202a:	e7d5      	b.n	8011fd8 <_printf_float+0x70>
 801202c:	6863      	ldr	r3, [r4, #4]
 801202e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8012032:	9104      	str	r1, [sp, #16]
 8012034:	1c59      	adds	r1, r3, #1
 8012036:	d13c      	bne.n	80120b2 <_printf_float+0x14a>
 8012038:	2306      	movs	r3, #6
 801203a:	6063      	str	r3, [r4, #4]
 801203c:	2300      	movs	r3, #0
 801203e:	9303      	str	r3, [sp, #12]
 8012040:	ab08      	add	r3, sp, #32
 8012042:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8012046:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801204a:	ab07      	add	r3, sp, #28
 801204c:	6861      	ldr	r1, [r4, #4]
 801204e:	9300      	str	r3, [sp, #0]
 8012050:	6022      	str	r2, [r4, #0]
 8012052:	f10d 031b 	add.w	r3, sp, #27
 8012056:	4628      	mov	r0, r5
 8012058:	f7ff fef4 	bl	8011e44 <__cvt>
 801205c:	9b04      	ldr	r3, [sp, #16]
 801205e:	9907      	ldr	r1, [sp, #28]
 8012060:	2b47      	cmp	r3, #71	; 0x47
 8012062:	4680      	mov	r8, r0
 8012064:	d108      	bne.n	8012078 <_printf_float+0x110>
 8012066:	1cc8      	adds	r0, r1, #3
 8012068:	db02      	blt.n	8012070 <_printf_float+0x108>
 801206a:	6863      	ldr	r3, [r4, #4]
 801206c:	4299      	cmp	r1, r3
 801206e:	dd41      	ble.n	80120f4 <_printf_float+0x18c>
 8012070:	f1a9 0902 	sub.w	r9, r9, #2
 8012074:	fa5f f989 	uxtb.w	r9, r9
 8012078:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801207c:	d820      	bhi.n	80120c0 <_printf_float+0x158>
 801207e:	3901      	subs	r1, #1
 8012080:	464a      	mov	r2, r9
 8012082:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012086:	9107      	str	r1, [sp, #28]
 8012088:	f7ff ff2e 	bl	8011ee8 <__exponent>
 801208c:	9a08      	ldr	r2, [sp, #32]
 801208e:	9004      	str	r0, [sp, #16]
 8012090:	1813      	adds	r3, r2, r0
 8012092:	2a01      	cmp	r2, #1
 8012094:	6123      	str	r3, [r4, #16]
 8012096:	dc02      	bgt.n	801209e <_printf_float+0x136>
 8012098:	6822      	ldr	r2, [r4, #0]
 801209a:	07d2      	lsls	r2, r2, #31
 801209c:	d501      	bpl.n	80120a2 <_printf_float+0x13a>
 801209e:	3301      	adds	r3, #1
 80120a0:	6123      	str	r3, [r4, #16]
 80120a2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d0a2      	beq.n	8011ff0 <_printf_float+0x88>
 80120aa:	232d      	movs	r3, #45	; 0x2d
 80120ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80120b0:	e79e      	b.n	8011ff0 <_printf_float+0x88>
 80120b2:	9904      	ldr	r1, [sp, #16]
 80120b4:	2947      	cmp	r1, #71	; 0x47
 80120b6:	d1c1      	bne.n	801203c <_printf_float+0xd4>
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d1bf      	bne.n	801203c <_printf_float+0xd4>
 80120bc:	2301      	movs	r3, #1
 80120be:	e7bc      	b.n	801203a <_printf_float+0xd2>
 80120c0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80120c4:	d118      	bne.n	80120f8 <_printf_float+0x190>
 80120c6:	2900      	cmp	r1, #0
 80120c8:	6863      	ldr	r3, [r4, #4]
 80120ca:	dd0b      	ble.n	80120e4 <_printf_float+0x17c>
 80120cc:	6121      	str	r1, [r4, #16]
 80120ce:	b913      	cbnz	r3, 80120d6 <_printf_float+0x16e>
 80120d0:	6822      	ldr	r2, [r4, #0]
 80120d2:	07d0      	lsls	r0, r2, #31
 80120d4:	d502      	bpl.n	80120dc <_printf_float+0x174>
 80120d6:	3301      	adds	r3, #1
 80120d8:	440b      	add	r3, r1
 80120da:	6123      	str	r3, [r4, #16]
 80120dc:	2300      	movs	r3, #0
 80120de:	65a1      	str	r1, [r4, #88]	; 0x58
 80120e0:	9304      	str	r3, [sp, #16]
 80120e2:	e7de      	b.n	80120a2 <_printf_float+0x13a>
 80120e4:	b913      	cbnz	r3, 80120ec <_printf_float+0x184>
 80120e6:	6822      	ldr	r2, [r4, #0]
 80120e8:	07d2      	lsls	r2, r2, #31
 80120ea:	d501      	bpl.n	80120f0 <_printf_float+0x188>
 80120ec:	3302      	adds	r3, #2
 80120ee:	e7f4      	b.n	80120da <_printf_float+0x172>
 80120f0:	2301      	movs	r3, #1
 80120f2:	e7f2      	b.n	80120da <_printf_float+0x172>
 80120f4:	f04f 0967 	mov.w	r9, #103	; 0x67
 80120f8:	9b08      	ldr	r3, [sp, #32]
 80120fa:	4299      	cmp	r1, r3
 80120fc:	db05      	blt.n	801210a <_printf_float+0x1a2>
 80120fe:	6823      	ldr	r3, [r4, #0]
 8012100:	6121      	str	r1, [r4, #16]
 8012102:	07d8      	lsls	r0, r3, #31
 8012104:	d5ea      	bpl.n	80120dc <_printf_float+0x174>
 8012106:	1c4b      	adds	r3, r1, #1
 8012108:	e7e7      	b.n	80120da <_printf_float+0x172>
 801210a:	2900      	cmp	r1, #0
 801210c:	bfd4      	ite	le
 801210e:	f1c1 0202 	rsble	r2, r1, #2
 8012112:	2201      	movgt	r2, #1
 8012114:	4413      	add	r3, r2
 8012116:	e7e0      	b.n	80120da <_printf_float+0x172>
 8012118:	6823      	ldr	r3, [r4, #0]
 801211a:	055a      	lsls	r2, r3, #21
 801211c:	d407      	bmi.n	801212e <_printf_float+0x1c6>
 801211e:	6923      	ldr	r3, [r4, #16]
 8012120:	4642      	mov	r2, r8
 8012122:	4631      	mov	r1, r6
 8012124:	4628      	mov	r0, r5
 8012126:	47b8      	blx	r7
 8012128:	3001      	adds	r0, #1
 801212a:	d12a      	bne.n	8012182 <_printf_float+0x21a>
 801212c:	e76a      	b.n	8012004 <_printf_float+0x9c>
 801212e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8012132:	f240 80e2 	bls.w	80122fa <_printf_float+0x392>
 8012136:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801213a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801213e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012142:	d133      	bne.n	80121ac <_printf_float+0x244>
 8012144:	4a38      	ldr	r2, [pc, #224]	; (8012228 <_printf_float+0x2c0>)
 8012146:	2301      	movs	r3, #1
 8012148:	4631      	mov	r1, r6
 801214a:	4628      	mov	r0, r5
 801214c:	47b8      	blx	r7
 801214e:	3001      	adds	r0, #1
 8012150:	f43f af58 	beq.w	8012004 <_printf_float+0x9c>
 8012154:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8012158:	429a      	cmp	r2, r3
 801215a:	db02      	blt.n	8012162 <_printf_float+0x1fa>
 801215c:	6823      	ldr	r3, [r4, #0]
 801215e:	07d8      	lsls	r0, r3, #31
 8012160:	d50f      	bpl.n	8012182 <_printf_float+0x21a>
 8012162:	4653      	mov	r3, sl
 8012164:	465a      	mov	r2, fp
 8012166:	4631      	mov	r1, r6
 8012168:	4628      	mov	r0, r5
 801216a:	47b8      	blx	r7
 801216c:	3001      	adds	r0, #1
 801216e:	f43f af49 	beq.w	8012004 <_printf_float+0x9c>
 8012172:	f04f 0800 	mov.w	r8, #0
 8012176:	f104 091a 	add.w	r9, r4, #26
 801217a:	9b08      	ldr	r3, [sp, #32]
 801217c:	3b01      	subs	r3, #1
 801217e:	4543      	cmp	r3, r8
 8012180:	dc09      	bgt.n	8012196 <_printf_float+0x22e>
 8012182:	6823      	ldr	r3, [r4, #0]
 8012184:	079b      	lsls	r3, r3, #30
 8012186:	f100 8108 	bmi.w	801239a <_printf_float+0x432>
 801218a:	68e0      	ldr	r0, [r4, #12]
 801218c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801218e:	4298      	cmp	r0, r3
 8012190:	bfb8      	it	lt
 8012192:	4618      	movlt	r0, r3
 8012194:	e738      	b.n	8012008 <_printf_float+0xa0>
 8012196:	2301      	movs	r3, #1
 8012198:	464a      	mov	r2, r9
 801219a:	4631      	mov	r1, r6
 801219c:	4628      	mov	r0, r5
 801219e:	47b8      	blx	r7
 80121a0:	3001      	adds	r0, #1
 80121a2:	f43f af2f 	beq.w	8012004 <_printf_float+0x9c>
 80121a6:	f108 0801 	add.w	r8, r8, #1
 80121aa:	e7e6      	b.n	801217a <_printf_float+0x212>
 80121ac:	9b07      	ldr	r3, [sp, #28]
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	dc3c      	bgt.n	801222c <_printf_float+0x2c4>
 80121b2:	4a1d      	ldr	r2, [pc, #116]	; (8012228 <_printf_float+0x2c0>)
 80121b4:	2301      	movs	r3, #1
 80121b6:	4631      	mov	r1, r6
 80121b8:	4628      	mov	r0, r5
 80121ba:	47b8      	blx	r7
 80121bc:	3001      	adds	r0, #1
 80121be:	f43f af21 	beq.w	8012004 <_printf_float+0x9c>
 80121c2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80121c6:	4313      	orrs	r3, r2
 80121c8:	d102      	bne.n	80121d0 <_printf_float+0x268>
 80121ca:	6823      	ldr	r3, [r4, #0]
 80121cc:	07d9      	lsls	r1, r3, #31
 80121ce:	d5d8      	bpl.n	8012182 <_printf_float+0x21a>
 80121d0:	4653      	mov	r3, sl
 80121d2:	465a      	mov	r2, fp
 80121d4:	4631      	mov	r1, r6
 80121d6:	4628      	mov	r0, r5
 80121d8:	47b8      	blx	r7
 80121da:	3001      	adds	r0, #1
 80121dc:	f43f af12 	beq.w	8012004 <_printf_float+0x9c>
 80121e0:	f04f 0900 	mov.w	r9, #0
 80121e4:	f104 0a1a 	add.w	sl, r4, #26
 80121e8:	9b07      	ldr	r3, [sp, #28]
 80121ea:	425b      	negs	r3, r3
 80121ec:	454b      	cmp	r3, r9
 80121ee:	dc01      	bgt.n	80121f4 <_printf_float+0x28c>
 80121f0:	9b08      	ldr	r3, [sp, #32]
 80121f2:	e795      	b.n	8012120 <_printf_float+0x1b8>
 80121f4:	2301      	movs	r3, #1
 80121f6:	4652      	mov	r2, sl
 80121f8:	4631      	mov	r1, r6
 80121fa:	4628      	mov	r0, r5
 80121fc:	47b8      	blx	r7
 80121fe:	3001      	adds	r0, #1
 8012200:	f43f af00 	beq.w	8012004 <_printf_float+0x9c>
 8012204:	f109 0901 	add.w	r9, r9, #1
 8012208:	e7ee      	b.n	80121e8 <_printf_float+0x280>
 801220a:	bf00      	nop
 801220c:	f3af 8000 	nop.w
 8012210:	ffffffff 	.word	0xffffffff
 8012214:	7fefffff 	.word	0x7fefffff
 8012218:	08014c04 	.word	0x08014c04
 801221c:	08014c08 	.word	0x08014c08
 8012220:	08014c10 	.word	0x08014c10
 8012224:	08014c0c 	.word	0x08014c0c
 8012228:	08014c14 	.word	0x08014c14
 801222c:	9a08      	ldr	r2, [sp, #32]
 801222e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012230:	429a      	cmp	r2, r3
 8012232:	bfa8      	it	ge
 8012234:	461a      	movge	r2, r3
 8012236:	2a00      	cmp	r2, #0
 8012238:	4691      	mov	r9, r2
 801223a:	dc38      	bgt.n	80122ae <_printf_float+0x346>
 801223c:	2300      	movs	r3, #0
 801223e:	9305      	str	r3, [sp, #20]
 8012240:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012244:	f104 021a 	add.w	r2, r4, #26
 8012248:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801224a:	9905      	ldr	r1, [sp, #20]
 801224c:	9304      	str	r3, [sp, #16]
 801224e:	eba3 0309 	sub.w	r3, r3, r9
 8012252:	428b      	cmp	r3, r1
 8012254:	dc33      	bgt.n	80122be <_printf_float+0x356>
 8012256:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801225a:	429a      	cmp	r2, r3
 801225c:	db3c      	blt.n	80122d8 <_printf_float+0x370>
 801225e:	6823      	ldr	r3, [r4, #0]
 8012260:	07da      	lsls	r2, r3, #31
 8012262:	d439      	bmi.n	80122d8 <_printf_float+0x370>
 8012264:	9b08      	ldr	r3, [sp, #32]
 8012266:	9a04      	ldr	r2, [sp, #16]
 8012268:	9907      	ldr	r1, [sp, #28]
 801226a:	1a9a      	subs	r2, r3, r2
 801226c:	eba3 0901 	sub.w	r9, r3, r1
 8012270:	4591      	cmp	r9, r2
 8012272:	bfa8      	it	ge
 8012274:	4691      	movge	r9, r2
 8012276:	f1b9 0f00 	cmp.w	r9, #0
 801227a:	dc35      	bgt.n	80122e8 <_printf_float+0x380>
 801227c:	f04f 0800 	mov.w	r8, #0
 8012280:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012284:	f104 0a1a 	add.w	sl, r4, #26
 8012288:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801228c:	1a9b      	subs	r3, r3, r2
 801228e:	eba3 0309 	sub.w	r3, r3, r9
 8012292:	4543      	cmp	r3, r8
 8012294:	f77f af75 	ble.w	8012182 <_printf_float+0x21a>
 8012298:	2301      	movs	r3, #1
 801229a:	4652      	mov	r2, sl
 801229c:	4631      	mov	r1, r6
 801229e:	4628      	mov	r0, r5
 80122a0:	47b8      	blx	r7
 80122a2:	3001      	adds	r0, #1
 80122a4:	f43f aeae 	beq.w	8012004 <_printf_float+0x9c>
 80122a8:	f108 0801 	add.w	r8, r8, #1
 80122ac:	e7ec      	b.n	8012288 <_printf_float+0x320>
 80122ae:	4613      	mov	r3, r2
 80122b0:	4631      	mov	r1, r6
 80122b2:	4642      	mov	r2, r8
 80122b4:	4628      	mov	r0, r5
 80122b6:	47b8      	blx	r7
 80122b8:	3001      	adds	r0, #1
 80122ba:	d1bf      	bne.n	801223c <_printf_float+0x2d4>
 80122bc:	e6a2      	b.n	8012004 <_printf_float+0x9c>
 80122be:	2301      	movs	r3, #1
 80122c0:	4631      	mov	r1, r6
 80122c2:	4628      	mov	r0, r5
 80122c4:	9204      	str	r2, [sp, #16]
 80122c6:	47b8      	blx	r7
 80122c8:	3001      	adds	r0, #1
 80122ca:	f43f ae9b 	beq.w	8012004 <_printf_float+0x9c>
 80122ce:	9b05      	ldr	r3, [sp, #20]
 80122d0:	9a04      	ldr	r2, [sp, #16]
 80122d2:	3301      	adds	r3, #1
 80122d4:	9305      	str	r3, [sp, #20]
 80122d6:	e7b7      	b.n	8012248 <_printf_float+0x2e0>
 80122d8:	4653      	mov	r3, sl
 80122da:	465a      	mov	r2, fp
 80122dc:	4631      	mov	r1, r6
 80122de:	4628      	mov	r0, r5
 80122e0:	47b8      	blx	r7
 80122e2:	3001      	adds	r0, #1
 80122e4:	d1be      	bne.n	8012264 <_printf_float+0x2fc>
 80122e6:	e68d      	b.n	8012004 <_printf_float+0x9c>
 80122e8:	9a04      	ldr	r2, [sp, #16]
 80122ea:	464b      	mov	r3, r9
 80122ec:	4442      	add	r2, r8
 80122ee:	4631      	mov	r1, r6
 80122f0:	4628      	mov	r0, r5
 80122f2:	47b8      	blx	r7
 80122f4:	3001      	adds	r0, #1
 80122f6:	d1c1      	bne.n	801227c <_printf_float+0x314>
 80122f8:	e684      	b.n	8012004 <_printf_float+0x9c>
 80122fa:	9a08      	ldr	r2, [sp, #32]
 80122fc:	2a01      	cmp	r2, #1
 80122fe:	dc01      	bgt.n	8012304 <_printf_float+0x39c>
 8012300:	07db      	lsls	r3, r3, #31
 8012302:	d537      	bpl.n	8012374 <_printf_float+0x40c>
 8012304:	2301      	movs	r3, #1
 8012306:	4642      	mov	r2, r8
 8012308:	4631      	mov	r1, r6
 801230a:	4628      	mov	r0, r5
 801230c:	47b8      	blx	r7
 801230e:	3001      	adds	r0, #1
 8012310:	f43f ae78 	beq.w	8012004 <_printf_float+0x9c>
 8012314:	4653      	mov	r3, sl
 8012316:	465a      	mov	r2, fp
 8012318:	4631      	mov	r1, r6
 801231a:	4628      	mov	r0, r5
 801231c:	47b8      	blx	r7
 801231e:	3001      	adds	r0, #1
 8012320:	f43f ae70 	beq.w	8012004 <_printf_float+0x9c>
 8012324:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8012328:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801232c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012330:	d01b      	beq.n	801236a <_printf_float+0x402>
 8012332:	9b08      	ldr	r3, [sp, #32]
 8012334:	f108 0201 	add.w	r2, r8, #1
 8012338:	3b01      	subs	r3, #1
 801233a:	4631      	mov	r1, r6
 801233c:	4628      	mov	r0, r5
 801233e:	47b8      	blx	r7
 8012340:	3001      	adds	r0, #1
 8012342:	d10e      	bne.n	8012362 <_printf_float+0x3fa>
 8012344:	e65e      	b.n	8012004 <_printf_float+0x9c>
 8012346:	2301      	movs	r3, #1
 8012348:	464a      	mov	r2, r9
 801234a:	4631      	mov	r1, r6
 801234c:	4628      	mov	r0, r5
 801234e:	47b8      	blx	r7
 8012350:	3001      	adds	r0, #1
 8012352:	f43f ae57 	beq.w	8012004 <_printf_float+0x9c>
 8012356:	f108 0801 	add.w	r8, r8, #1
 801235a:	9b08      	ldr	r3, [sp, #32]
 801235c:	3b01      	subs	r3, #1
 801235e:	4543      	cmp	r3, r8
 8012360:	dcf1      	bgt.n	8012346 <_printf_float+0x3de>
 8012362:	9b04      	ldr	r3, [sp, #16]
 8012364:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012368:	e6db      	b.n	8012122 <_printf_float+0x1ba>
 801236a:	f04f 0800 	mov.w	r8, #0
 801236e:	f104 091a 	add.w	r9, r4, #26
 8012372:	e7f2      	b.n	801235a <_printf_float+0x3f2>
 8012374:	2301      	movs	r3, #1
 8012376:	4642      	mov	r2, r8
 8012378:	e7df      	b.n	801233a <_printf_float+0x3d2>
 801237a:	2301      	movs	r3, #1
 801237c:	464a      	mov	r2, r9
 801237e:	4631      	mov	r1, r6
 8012380:	4628      	mov	r0, r5
 8012382:	47b8      	blx	r7
 8012384:	3001      	adds	r0, #1
 8012386:	f43f ae3d 	beq.w	8012004 <_printf_float+0x9c>
 801238a:	f108 0801 	add.w	r8, r8, #1
 801238e:	68e3      	ldr	r3, [r4, #12]
 8012390:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012392:	1a5b      	subs	r3, r3, r1
 8012394:	4543      	cmp	r3, r8
 8012396:	dcf0      	bgt.n	801237a <_printf_float+0x412>
 8012398:	e6f7      	b.n	801218a <_printf_float+0x222>
 801239a:	f04f 0800 	mov.w	r8, #0
 801239e:	f104 0919 	add.w	r9, r4, #25
 80123a2:	e7f4      	b.n	801238e <_printf_float+0x426>

080123a4 <_printf_common>:
 80123a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80123a8:	4616      	mov	r6, r2
 80123aa:	4699      	mov	r9, r3
 80123ac:	688a      	ldr	r2, [r1, #8]
 80123ae:	690b      	ldr	r3, [r1, #16]
 80123b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80123b4:	4293      	cmp	r3, r2
 80123b6:	bfb8      	it	lt
 80123b8:	4613      	movlt	r3, r2
 80123ba:	6033      	str	r3, [r6, #0]
 80123bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80123c0:	4607      	mov	r7, r0
 80123c2:	460c      	mov	r4, r1
 80123c4:	b10a      	cbz	r2, 80123ca <_printf_common+0x26>
 80123c6:	3301      	adds	r3, #1
 80123c8:	6033      	str	r3, [r6, #0]
 80123ca:	6823      	ldr	r3, [r4, #0]
 80123cc:	0699      	lsls	r1, r3, #26
 80123ce:	bf42      	ittt	mi
 80123d0:	6833      	ldrmi	r3, [r6, #0]
 80123d2:	3302      	addmi	r3, #2
 80123d4:	6033      	strmi	r3, [r6, #0]
 80123d6:	6825      	ldr	r5, [r4, #0]
 80123d8:	f015 0506 	ands.w	r5, r5, #6
 80123dc:	d106      	bne.n	80123ec <_printf_common+0x48>
 80123de:	f104 0a19 	add.w	sl, r4, #25
 80123e2:	68e3      	ldr	r3, [r4, #12]
 80123e4:	6832      	ldr	r2, [r6, #0]
 80123e6:	1a9b      	subs	r3, r3, r2
 80123e8:	42ab      	cmp	r3, r5
 80123ea:	dc26      	bgt.n	801243a <_printf_common+0x96>
 80123ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80123f0:	1e13      	subs	r3, r2, #0
 80123f2:	6822      	ldr	r2, [r4, #0]
 80123f4:	bf18      	it	ne
 80123f6:	2301      	movne	r3, #1
 80123f8:	0692      	lsls	r2, r2, #26
 80123fa:	d42b      	bmi.n	8012454 <_printf_common+0xb0>
 80123fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012400:	4649      	mov	r1, r9
 8012402:	4638      	mov	r0, r7
 8012404:	47c0      	blx	r8
 8012406:	3001      	adds	r0, #1
 8012408:	d01e      	beq.n	8012448 <_printf_common+0xa4>
 801240a:	6823      	ldr	r3, [r4, #0]
 801240c:	68e5      	ldr	r5, [r4, #12]
 801240e:	6832      	ldr	r2, [r6, #0]
 8012410:	f003 0306 	and.w	r3, r3, #6
 8012414:	2b04      	cmp	r3, #4
 8012416:	bf08      	it	eq
 8012418:	1aad      	subeq	r5, r5, r2
 801241a:	68a3      	ldr	r3, [r4, #8]
 801241c:	6922      	ldr	r2, [r4, #16]
 801241e:	bf0c      	ite	eq
 8012420:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012424:	2500      	movne	r5, #0
 8012426:	4293      	cmp	r3, r2
 8012428:	bfc4      	itt	gt
 801242a:	1a9b      	subgt	r3, r3, r2
 801242c:	18ed      	addgt	r5, r5, r3
 801242e:	2600      	movs	r6, #0
 8012430:	341a      	adds	r4, #26
 8012432:	42b5      	cmp	r5, r6
 8012434:	d11a      	bne.n	801246c <_printf_common+0xc8>
 8012436:	2000      	movs	r0, #0
 8012438:	e008      	b.n	801244c <_printf_common+0xa8>
 801243a:	2301      	movs	r3, #1
 801243c:	4652      	mov	r2, sl
 801243e:	4649      	mov	r1, r9
 8012440:	4638      	mov	r0, r7
 8012442:	47c0      	blx	r8
 8012444:	3001      	adds	r0, #1
 8012446:	d103      	bne.n	8012450 <_printf_common+0xac>
 8012448:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801244c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012450:	3501      	adds	r5, #1
 8012452:	e7c6      	b.n	80123e2 <_printf_common+0x3e>
 8012454:	18e1      	adds	r1, r4, r3
 8012456:	1c5a      	adds	r2, r3, #1
 8012458:	2030      	movs	r0, #48	; 0x30
 801245a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801245e:	4422      	add	r2, r4
 8012460:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012464:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012468:	3302      	adds	r3, #2
 801246a:	e7c7      	b.n	80123fc <_printf_common+0x58>
 801246c:	2301      	movs	r3, #1
 801246e:	4622      	mov	r2, r4
 8012470:	4649      	mov	r1, r9
 8012472:	4638      	mov	r0, r7
 8012474:	47c0      	blx	r8
 8012476:	3001      	adds	r0, #1
 8012478:	d0e6      	beq.n	8012448 <_printf_common+0xa4>
 801247a:	3601      	adds	r6, #1
 801247c:	e7d9      	b.n	8012432 <_printf_common+0x8e>
	...

08012480 <_printf_i>:
 8012480:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012484:	7e0f      	ldrb	r7, [r1, #24]
 8012486:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012488:	2f78      	cmp	r7, #120	; 0x78
 801248a:	4691      	mov	r9, r2
 801248c:	4680      	mov	r8, r0
 801248e:	460c      	mov	r4, r1
 8012490:	469a      	mov	sl, r3
 8012492:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012496:	d807      	bhi.n	80124a8 <_printf_i+0x28>
 8012498:	2f62      	cmp	r7, #98	; 0x62
 801249a:	d80a      	bhi.n	80124b2 <_printf_i+0x32>
 801249c:	2f00      	cmp	r7, #0
 801249e:	f000 80d8 	beq.w	8012652 <_printf_i+0x1d2>
 80124a2:	2f58      	cmp	r7, #88	; 0x58
 80124a4:	f000 80a3 	beq.w	80125ee <_printf_i+0x16e>
 80124a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80124ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80124b0:	e03a      	b.n	8012528 <_printf_i+0xa8>
 80124b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80124b6:	2b15      	cmp	r3, #21
 80124b8:	d8f6      	bhi.n	80124a8 <_printf_i+0x28>
 80124ba:	a101      	add	r1, pc, #4	; (adr r1, 80124c0 <_printf_i+0x40>)
 80124bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80124c0:	08012519 	.word	0x08012519
 80124c4:	0801252d 	.word	0x0801252d
 80124c8:	080124a9 	.word	0x080124a9
 80124cc:	080124a9 	.word	0x080124a9
 80124d0:	080124a9 	.word	0x080124a9
 80124d4:	080124a9 	.word	0x080124a9
 80124d8:	0801252d 	.word	0x0801252d
 80124dc:	080124a9 	.word	0x080124a9
 80124e0:	080124a9 	.word	0x080124a9
 80124e4:	080124a9 	.word	0x080124a9
 80124e8:	080124a9 	.word	0x080124a9
 80124ec:	08012639 	.word	0x08012639
 80124f0:	0801255d 	.word	0x0801255d
 80124f4:	0801261b 	.word	0x0801261b
 80124f8:	080124a9 	.word	0x080124a9
 80124fc:	080124a9 	.word	0x080124a9
 8012500:	0801265b 	.word	0x0801265b
 8012504:	080124a9 	.word	0x080124a9
 8012508:	0801255d 	.word	0x0801255d
 801250c:	080124a9 	.word	0x080124a9
 8012510:	080124a9 	.word	0x080124a9
 8012514:	08012623 	.word	0x08012623
 8012518:	682b      	ldr	r3, [r5, #0]
 801251a:	1d1a      	adds	r2, r3, #4
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	602a      	str	r2, [r5, #0]
 8012520:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012524:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012528:	2301      	movs	r3, #1
 801252a:	e0a3      	b.n	8012674 <_printf_i+0x1f4>
 801252c:	6820      	ldr	r0, [r4, #0]
 801252e:	6829      	ldr	r1, [r5, #0]
 8012530:	0606      	lsls	r6, r0, #24
 8012532:	f101 0304 	add.w	r3, r1, #4
 8012536:	d50a      	bpl.n	801254e <_printf_i+0xce>
 8012538:	680e      	ldr	r6, [r1, #0]
 801253a:	602b      	str	r3, [r5, #0]
 801253c:	2e00      	cmp	r6, #0
 801253e:	da03      	bge.n	8012548 <_printf_i+0xc8>
 8012540:	232d      	movs	r3, #45	; 0x2d
 8012542:	4276      	negs	r6, r6
 8012544:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012548:	485e      	ldr	r0, [pc, #376]	; (80126c4 <_printf_i+0x244>)
 801254a:	230a      	movs	r3, #10
 801254c:	e019      	b.n	8012582 <_printf_i+0x102>
 801254e:	680e      	ldr	r6, [r1, #0]
 8012550:	602b      	str	r3, [r5, #0]
 8012552:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012556:	bf18      	it	ne
 8012558:	b236      	sxthne	r6, r6
 801255a:	e7ef      	b.n	801253c <_printf_i+0xbc>
 801255c:	682b      	ldr	r3, [r5, #0]
 801255e:	6820      	ldr	r0, [r4, #0]
 8012560:	1d19      	adds	r1, r3, #4
 8012562:	6029      	str	r1, [r5, #0]
 8012564:	0601      	lsls	r1, r0, #24
 8012566:	d501      	bpl.n	801256c <_printf_i+0xec>
 8012568:	681e      	ldr	r6, [r3, #0]
 801256a:	e002      	b.n	8012572 <_printf_i+0xf2>
 801256c:	0646      	lsls	r6, r0, #25
 801256e:	d5fb      	bpl.n	8012568 <_printf_i+0xe8>
 8012570:	881e      	ldrh	r6, [r3, #0]
 8012572:	4854      	ldr	r0, [pc, #336]	; (80126c4 <_printf_i+0x244>)
 8012574:	2f6f      	cmp	r7, #111	; 0x6f
 8012576:	bf0c      	ite	eq
 8012578:	2308      	moveq	r3, #8
 801257a:	230a      	movne	r3, #10
 801257c:	2100      	movs	r1, #0
 801257e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012582:	6865      	ldr	r5, [r4, #4]
 8012584:	60a5      	str	r5, [r4, #8]
 8012586:	2d00      	cmp	r5, #0
 8012588:	bfa2      	ittt	ge
 801258a:	6821      	ldrge	r1, [r4, #0]
 801258c:	f021 0104 	bicge.w	r1, r1, #4
 8012590:	6021      	strge	r1, [r4, #0]
 8012592:	b90e      	cbnz	r6, 8012598 <_printf_i+0x118>
 8012594:	2d00      	cmp	r5, #0
 8012596:	d04d      	beq.n	8012634 <_printf_i+0x1b4>
 8012598:	4615      	mov	r5, r2
 801259a:	fbb6 f1f3 	udiv	r1, r6, r3
 801259e:	fb03 6711 	mls	r7, r3, r1, r6
 80125a2:	5dc7      	ldrb	r7, [r0, r7]
 80125a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80125a8:	4637      	mov	r7, r6
 80125aa:	42bb      	cmp	r3, r7
 80125ac:	460e      	mov	r6, r1
 80125ae:	d9f4      	bls.n	801259a <_printf_i+0x11a>
 80125b0:	2b08      	cmp	r3, #8
 80125b2:	d10b      	bne.n	80125cc <_printf_i+0x14c>
 80125b4:	6823      	ldr	r3, [r4, #0]
 80125b6:	07de      	lsls	r6, r3, #31
 80125b8:	d508      	bpl.n	80125cc <_printf_i+0x14c>
 80125ba:	6923      	ldr	r3, [r4, #16]
 80125bc:	6861      	ldr	r1, [r4, #4]
 80125be:	4299      	cmp	r1, r3
 80125c0:	bfde      	ittt	le
 80125c2:	2330      	movle	r3, #48	; 0x30
 80125c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80125c8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80125cc:	1b52      	subs	r2, r2, r5
 80125ce:	6122      	str	r2, [r4, #16]
 80125d0:	f8cd a000 	str.w	sl, [sp]
 80125d4:	464b      	mov	r3, r9
 80125d6:	aa03      	add	r2, sp, #12
 80125d8:	4621      	mov	r1, r4
 80125da:	4640      	mov	r0, r8
 80125dc:	f7ff fee2 	bl	80123a4 <_printf_common>
 80125e0:	3001      	adds	r0, #1
 80125e2:	d14c      	bne.n	801267e <_printf_i+0x1fe>
 80125e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80125e8:	b004      	add	sp, #16
 80125ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80125ee:	4835      	ldr	r0, [pc, #212]	; (80126c4 <_printf_i+0x244>)
 80125f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80125f4:	6829      	ldr	r1, [r5, #0]
 80125f6:	6823      	ldr	r3, [r4, #0]
 80125f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80125fc:	6029      	str	r1, [r5, #0]
 80125fe:	061d      	lsls	r5, r3, #24
 8012600:	d514      	bpl.n	801262c <_printf_i+0x1ac>
 8012602:	07df      	lsls	r7, r3, #31
 8012604:	bf44      	itt	mi
 8012606:	f043 0320 	orrmi.w	r3, r3, #32
 801260a:	6023      	strmi	r3, [r4, #0]
 801260c:	b91e      	cbnz	r6, 8012616 <_printf_i+0x196>
 801260e:	6823      	ldr	r3, [r4, #0]
 8012610:	f023 0320 	bic.w	r3, r3, #32
 8012614:	6023      	str	r3, [r4, #0]
 8012616:	2310      	movs	r3, #16
 8012618:	e7b0      	b.n	801257c <_printf_i+0xfc>
 801261a:	6823      	ldr	r3, [r4, #0]
 801261c:	f043 0320 	orr.w	r3, r3, #32
 8012620:	6023      	str	r3, [r4, #0]
 8012622:	2378      	movs	r3, #120	; 0x78
 8012624:	4828      	ldr	r0, [pc, #160]	; (80126c8 <_printf_i+0x248>)
 8012626:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801262a:	e7e3      	b.n	80125f4 <_printf_i+0x174>
 801262c:	0659      	lsls	r1, r3, #25
 801262e:	bf48      	it	mi
 8012630:	b2b6      	uxthmi	r6, r6
 8012632:	e7e6      	b.n	8012602 <_printf_i+0x182>
 8012634:	4615      	mov	r5, r2
 8012636:	e7bb      	b.n	80125b0 <_printf_i+0x130>
 8012638:	682b      	ldr	r3, [r5, #0]
 801263a:	6826      	ldr	r6, [r4, #0]
 801263c:	6961      	ldr	r1, [r4, #20]
 801263e:	1d18      	adds	r0, r3, #4
 8012640:	6028      	str	r0, [r5, #0]
 8012642:	0635      	lsls	r5, r6, #24
 8012644:	681b      	ldr	r3, [r3, #0]
 8012646:	d501      	bpl.n	801264c <_printf_i+0x1cc>
 8012648:	6019      	str	r1, [r3, #0]
 801264a:	e002      	b.n	8012652 <_printf_i+0x1d2>
 801264c:	0670      	lsls	r0, r6, #25
 801264e:	d5fb      	bpl.n	8012648 <_printf_i+0x1c8>
 8012650:	8019      	strh	r1, [r3, #0]
 8012652:	2300      	movs	r3, #0
 8012654:	6123      	str	r3, [r4, #16]
 8012656:	4615      	mov	r5, r2
 8012658:	e7ba      	b.n	80125d0 <_printf_i+0x150>
 801265a:	682b      	ldr	r3, [r5, #0]
 801265c:	1d1a      	adds	r2, r3, #4
 801265e:	602a      	str	r2, [r5, #0]
 8012660:	681d      	ldr	r5, [r3, #0]
 8012662:	6862      	ldr	r2, [r4, #4]
 8012664:	2100      	movs	r1, #0
 8012666:	4628      	mov	r0, r5
 8012668:	f7ed fe42 	bl	80002f0 <memchr>
 801266c:	b108      	cbz	r0, 8012672 <_printf_i+0x1f2>
 801266e:	1b40      	subs	r0, r0, r5
 8012670:	6060      	str	r0, [r4, #4]
 8012672:	6863      	ldr	r3, [r4, #4]
 8012674:	6123      	str	r3, [r4, #16]
 8012676:	2300      	movs	r3, #0
 8012678:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801267c:	e7a8      	b.n	80125d0 <_printf_i+0x150>
 801267e:	6923      	ldr	r3, [r4, #16]
 8012680:	462a      	mov	r2, r5
 8012682:	4649      	mov	r1, r9
 8012684:	4640      	mov	r0, r8
 8012686:	47d0      	blx	sl
 8012688:	3001      	adds	r0, #1
 801268a:	d0ab      	beq.n	80125e4 <_printf_i+0x164>
 801268c:	6823      	ldr	r3, [r4, #0]
 801268e:	079b      	lsls	r3, r3, #30
 8012690:	d413      	bmi.n	80126ba <_printf_i+0x23a>
 8012692:	68e0      	ldr	r0, [r4, #12]
 8012694:	9b03      	ldr	r3, [sp, #12]
 8012696:	4298      	cmp	r0, r3
 8012698:	bfb8      	it	lt
 801269a:	4618      	movlt	r0, r3
 801269c:	e7a4      	b.n	80125e8 <_printf_i+0x168>
 801269e:	2301      	movs	r3, #1
 80126a0:	4632      	mov	r2, r6
 80126a2:	4649      	mov	r1, r9
 80126a4:	4640      	mov	r0, r8
 80126a6:	47d0      	blx	sl
 80126a8:	3001      	adds	r0, #1
 80126aa:	d09b      	beq.n	80125e4 <_printf_i+0x164>
 80126ac:	3501      	adds	r5, #1
 80126ae:	68e3      	ldr	r3, [r4, #12]
 80126b0:	9903      	ldr	r1, [sp, #12]
 80126b2:	1a5b      	subs	r3, r3, r1
 80126b4:	42ab      	cmp	r3, r5
 80126b6:	dcf2      	bgt.n	801269e <_printf_i+0x21e>
 80126b8:	e7eb      	b.n	8012692 <_printf_i+0x212>
 80126ba:	2500      	movs	r5, #0
 80126bc:	f104 0619 	add.w	r6, r4, #25
 80126c0:	e7f5      	b.n	80126ae <_printf_i+0x22e>
 80126c2:	bf00      	nop
 80126c4:	08014c16 	.word	0x08014c16
 80126c8:	08014c27 	.word	0x08014c27

080126cc <_sbrk_r>:
 80126cc:	b538      	push	{r3, r4, r5, lr}
 80126ce:	4d06      	ldr	r5, [pc, #24]	; (80126e8 <_sbrk_r+0x1c>)
 80126d0:	2300      	movs	r3, #0
 80126d2:	4604      	mov	r4, r0
 80126d4:	4608      	mov	r0, r1
 80126d6:	602b      	str	r3, [r5, #0]
 80126d8:	f7f3 fdcc 	bl	8006274 <_sbrk>
 80126dc:	1c43      	adds	r3, r0, #1
 80126de:	d102      	bne.n	80126e6 <_sbrk_r+0x1a>
 80126e0:	682b      	ldr	r3, [r5, #0]
 80126e2:	b103      	cbz	r3, 80126e6 <_sbrk_r+0x1a>
 80126e4:	6023      	str	r3, [r4, #0]
 80126e6:	bd38      	pop	{r3, r4, r5, pc}
 80126e8:	240009f4 	.word	0x240009f4

080126ec <_raise_r>:
 80126ec:	291f      	cmp	r1, #31
 80126ee:	b538      	push	{r3, r4, r5, lr}
 80126f0:	4604      	mov	r4, r0
 80126f2:	460d      	mov	r5, r1
 80126f4:	d904      	bls.n	8012700 <_raise_r+0x14>
 80126f6:	2316      	movs	r3, #22
 80126f8:	6003      	str	r3, [r0, #0]
 80126fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80126fe:	bd38      	pop	{r3, r4, r5, pc}
 8012700:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012702:	b112      	cbz	r2, 801270a <_raise_r+0x1e>
 8012704:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012708:	b94b      	cbnz	r3, 801271e <_raise_r+0x32>
 801270a:	4620      	mov	r0, r4
 801270c:	f000 f830 	bl	8012770 <_getpid_r>
 8012710:	462a      	mov	r2, r5
 8012712:	4601      	mov	r1, r0
 8012714:	4620      	mov	r0, r4
 8012716:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801271a:	f000 b817 	b.w	801274c <_kill_r>
 801271e:	2b01      	cmp	r3, #1
 8012720:	d00a      	beq.n	8012738 <_raise_r+0x4c>
 8012722:	1c59      	adds	r1, r3, #1
 8012724:	d103      	bne.n	801272e <_raise_r+0x42>
 8012726:	2316      	movs	r3, #22
 8012728:	6003      	str	r3, [r0, #0]
 801272a:	2001      	movs	r0, #1
 801272c:	e7e7      	b.n	80126fe <_raise_r+0x12>
 801272e:	2400      	movs	r4, #0
 8012730:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012734:	4628      	mov	r0, r5
 8012736:	4798      	blx	r3
 8012738:	2000      	movs	r0, #0
 801273a:	e7e0      	b.n	80126fe <_raise_r+0x12>

0801273c <raise>:
 801273c:	4b02      	ldr	r3, [pc, #8]	; (8012748 <raise+0xc>)
 801273e:	4601      	mov	r1, r0
 8012740:	6818      	ldr	r0, [r3, #0]
 8012742:	f7ff bfd3 	b.w	80126ec <_raise_r>
 8012746:	bf00      	nop
 8012748:	24000010 	.word	0x24000010

0801274c <_kill_r>:
 801274c:	b538      	push	{r3, r4, r5, lr}
 801274e:	4d07      	ldr	r5, [pc, #28]	; (801276c <_kill_r+0x20>)
 8012750:	2300      	movs	r3, #0
 8012752:	4604      	mov	r4, r0
 8012754:	4608      	mov	r0, r1
 8012756:	4611      	mov	r1, r2
 8012758:	602b      	str	r3, [r5, #0]
 801275a:	f7f3 fd03 	bl	8006164 <_kill>
 801275e:	1c43      	adds	r3, r0, #1
 8012760:	d102      	bne.n	8012768 <_kill_r+0x1c>
 8012762:	682b      	ldr	r3, [r5, #0]
 8012764:	b103      	cbz	r3, 8012768 <_kill_r+0x1c>
 8012766:	6023      	str	r3, [r4, #0]
 8012768:	bd38      	pop	{r3, r4, r5, pc}
 801276a:	bf00      	nop
 801276c:	240009f4 	.word	0x240009f4

08012770 <_getpid_r>:
 8012770:	f7f3 bcf0 	b.w	8006154 <_getpid>

08012774 <quorem>:
 8012774:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012778:	6903      	ldr	r3, [r0, #16]
 801277a:	690c      	ldr	r4, [r1, #16]
 801277c:	42a3      	cmp	r3, r4
 801277e:	4607      	mov	r7, r0
 8012780:	f2c0 8081 	blt.w	8012886 <quorem+0x112>
 8012784:	3c01      	subs	r4, #1
 8012786:	f101 0814 	add.w	r8, r1, #20
 801278a:	f100 0514 	add.w	r5, r0, #20
 801278e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012792:	9301      	str	r3, [sp, #4]
 8012794:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012798:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801279c:	3301      	adds	r3, #1
 801279e:	429a      	cmp	r2, r3
 80127a0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80127a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80127a8:	fbb2 f6f3 	udiv	r6, r2, r3
 80127ac:	d331      	bcc.n	8012812 <quorem+0x9e>
 80127ae:	f04f 0e00 	mov.w	lr, #0
 80127b2:	4640      	mov	r0, r8
 80127b4:	46ac      	mov	ip, r5
 80127b6:	46f2      	mov	sl, lr
 80127b8:	f850 2b04 	ldr.w	r2, [r0], #4
 80127bc:	b293      	uxth	r3, r2
 80127be:	fb06 e303 	mla	r3, r6, r3, lr
 80127c2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80127c6:	b29b      	uxth	r3, r3
 80127c8:	ebaa 0303 	sub.w	r3, sl, r3
 80127cc:	f8dc a000 	ldr.w	sl, [ip]
 80127d0:	0c12      	lsrs	r2, r2, #16
 80127d2:	fa13 f38a 	uxtah	r3, r3, sl
 80127d6:	fb06 e202 	mla	r2, r6, r2, lr
 80127da:	9300      	str	r3, [sp, #0]
 80127dc:	9b00      	ldr	r3, [sp, #0]
 80127de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80127e2:	b292      	uxth	r2, r2
 80127e4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80127e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80127ec:	f8bd 3000 	ldrh.w	r3, [sp]
 80127f0:	4581      	cmp	r9, r0
 80127f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80127f6:	f84c 3b04 	str.w	r3, [ip], #4
 80127fa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80127fe:	d2db      	bcs.n	80127b8 <quorem+0x44>
 8012800:	f855 300b 	ldr.w	r3, [r5, fp]
 8012804:	b92b      	cbnz	r3, 8012812 <quorem+0x9e>
 8012806:	9b01      	ldr	r3, [sp, #4]
 8012808:	3b04      	subs	r3, #4
 801280a:	429d      	cmp	r5, r3
 801280c:	461a      	mov	r2, r3
 801280e:	d32e      	bcc.n	801286e <quorem+0xfa>
 8012810:	613c      	str	r4, [r7, #16]
 8012812:	4638      	mov	r0, r7
 8012814:	f001 f83c 	bl	8013890 <__mcmp>
 8012818:	2800      	cmp	r0, #0
 801281a:	db24      	blt.n	8012866 <quorem+0xf2>
 801281c:	3601      	adds	r6, #1
 801281e:	4628      	mov	r0, r5
 8012820:	f04f 0c00 	mov.w	ip, #0
 8012824:	f858 2b04 	ldr.w	r2, [r8], #4
 8012828:	f8d0 e000 	ldr.w	lr, [r0]
 801282c:	b293      	uxth	r3, r2
 801282e:	ebac 0303 	sub.w	r3, ip, r3
 8012832:	0c12      	lsrs	r2, r2, #16
 8012834:	fa13 f38e 	uxtah	r3, r3, lr
 8012838:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801283c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012840:	b29b      	uxth	r3, r3
 8012842:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012846:	45c1      	cmp	r9, r8
 8012848:	f840 3b04 	str.w	r3, [r0], #4
 801284c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012850:	d2e8      	bcs.n	8012824 <quorem+0xb0>
 8012852:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012856:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801285a:	b922      	cbnz	r2, 8012866 <quorem+0xf2>
 801285c:	3b04      	subs	r3, #4
 801285e:	429d      	cmp	r5, r3
 8012860:	461a      	mov	r2, r3
 8012862:	d30a      	bcc.n	801287a <quorem+0x106>
 8012864:	613c      	str	r4, [r7, #16]
 8012866:	4630      	mov	r0, r6
 8012868:	b003      	add	sp, #12
 801286a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801286e:	6812      	ldr	r2, [r2, #0]
 8012870:	3b04      	subs	r3, #4
 8012872:	2a00      	cmp	r2, #0
 8012874:	d1cc      	bne.n	8012810 <quorem+0x9c>
 8012876:	3c01      	subs	r4, #1
 8012878:	e7c7      	b.n	801280a <quorem+0x96>
 801287a:	6812      	ldr	r2, [r2, #0]
 801287c:	3b04      	subs	r3, #4
 801287e:	2a00      	cmp	r2, #0
 8012880:	d1f0      	bne.n	8012864 <quorem+0xf0>
 8012882:	3c01      	subs	r4, #1
 8012884:	e7eb      	b.n	801285e <quorem+0xea>
 8012886:	2000      	movs	r0, #0
 8012888:	e7ee      	b.n	8012868 <quorem+0xf4>
 801288a:	0000      	movs	r0, r0
 801288c:	0000      	movs	r0, r0
	...

08012890 <_dtoa_r>:
 8012890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012894:	ed2d 8b02 	vpush	{d8}
 8012898:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801289a:	b091      	sub	sp, #68	; 0x44
 801289c:	ed8d 0b02 	vstr	d0, [sp, #8]
 80128a0:	ec59 8b10 	vmov	r8, r9, d0
 80128a4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80128a6:	9106      	str	r1, [sp, #24]
 80128a8:	4606      	mov	r6, r0
 80128aa:	9208      	str	r2, [sp, #32]
 80128ac:	930c      	str	r3, [sp, #48]	; 0x30
 80128ae:	b975      	cbnz	r5, 80128ce <_dtoa_r+0x3e>
 80128b0:	2010      	movs	r0, #16
 80128b2:	f7ff f9c1 	bl	8011c38 <malloc>
 80128b6:	4602      	mov	r2, r0
 80128b8:	6270      	str	r0, [r6, #36]	; 0x24
 80128ba:	b920      	cbnz	r0, 80128c6 <_dtoa_r+0x36>
 80128bc:	4baa      	ldr	r3, [pc, #680]	; (8012b68 <_dtoa_r+0x2d8>)
 80128be:	21ea      	movs	r1, #234	; 0xea
 80128c0:	48aa      	ldr	r0, [pc, #680]	; (8012b6c <_dtoa_r+0x2dc>)
 80128c2:	f001 f8fd 	bl	8013ac0 <__assert_func>
 80128c6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80128ca:	6005      	str	r5, [r0, #0]
 80128cc:	60c5      	str	r5, [r0, #12]
 80128ce:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80128d0:	6819      	ldr	r1, [r3, #0]
 80128d2:	b151      	cbz	r1, 80128ea <_dtoa_r+0x5a>
 80128d4:	685a      	ldr	r2, [r3, #4]
 80128d6:	604a      	str	r2, [r1, #4]
 80128d8:	2301      	movs	r3, #1
 80128da:	4093      	lsls	r3, r2
 80128dc:	608b      	str	r3, [r1, #8]
 80128de:	4630      	mov	r0, r6
 80128e0:	f000 fd94 	bl	801340c <_Bfree>
 80128e4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80128e6:	2200      	movs	r2, #0
 80128e8:	601a      	str	r2, [r3, #0]
 80128ea:	f1b9 0300 	subs.w	r3, r9, #0
 80128ee:	bfbb      	ittet	lt
 80128f0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80128f4:	9303      	strlt	r3, [sp, #12]
 80128f6:	2300      	movge	r3, #0
 80128f8:	2201      	movlt	r2, #1
 80128fa:	bfac      	ite	ge
 80128fc:	6023      	strge	r3, [r4, #0]
 80128fe:	6022      	strlt	r2, [r4, #0]
 8012900:	4b9b      	ldr	r3, [pc, #620]	; (8012b70 <_dtoa_r+0x2e0>)
 8012902:	9c03      	ldr	r4, [sp, #12]
 8012904:	43a3      	bics	r3, r4
 8012906:	d11c      	bne.n	8012942 <_dtoa_r+0xb2>
 8012908:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801290a:	f242 730f 	movw	r3, #9999	; 0x270f
 801290e:	6013      	str	r3, [r2, #0]
 8012910:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8012914:	ea53 0308 	orrs.w	r3, r3, r8
 8012918:	f000 84fd 	beq.w	8013316 <_dtoa_r+0xa86>
 801291c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801291e:	b963      	cbnz	r3, 801293a <_dtoa_r+0xaa>
 8012920:	4b94      	ldr	r3, [pc, #592]	; (8012b74 <_dtoa_r+0x2e4>)
 8012922:	e01f      	b.n	8012964 <_dtoa_r+0xd4>
 8012924:	4b94      	ldr	r3, [pc, #592]	; (8012b78 <_dtoa_r+0x2e8>)
 8012926:	9301      	str	r3, [sp, #4]
 8012928:	3308      	adds	r3, #8
 801292a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801292c:	6013      	str	r3, [r2, #0]
 801292e:	9801      	ldr	r0, [sp, #4]
 8012930:	b011      	add	sp, #68	; 0x44
 8012932:	ecbd 8b02 	vpop	{d8}
 8012936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801293a:	4b8e      	ldr	r3, [pc, #568]	; (8012b74 <_dtoa_r+0x2e4>)
 801293c:	9301      	str	r3, [sp, #4]
 801293e:	3303      	adds	r3, #3
 8012940:	e7f3      	b.n	801292a <_dtoa_r+0x9a>
 8012942:	ed9d 8b02 	vldr	d8, [sp, #8]
 8012946:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801294a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801294e:	d10b      	bne.n	8012968 <_dtoa_r+0xd8>
 8012950:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012952:	2301      	movs	r3, #1
 8012954:	6013      	str	r3, [r2, #0]
 8012956:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012958:	2b00      	cmp	r3, #0
 801295a:	f000 84d9 	beq.w	8013310 <_dtoa_r+0xa80>
 801295e:	4887      	ldr	r0, [pc, #540]	; (8012b7c <_dtoa_r+0x2ec>)
 8012960:	6018      	str	r0, [r3, #0]
 8012962:	1e43      	subs	r3, r0, #1
 8012964:	9301      	str	r3, [sp, #4]
 8012966:	e7e2      	b.n	801292e <_dtoa_r+0x9e>
 8012968:	a90f      	add	r1, sp, #60	; 0x3c
 801296a:	aa0e      	add	r2, sp, #56	; 0x38
 801296c:	4630      	mov	r0, r6
 801296e:	eeb0 0b48 	vmov.f64	d0, d8
 8012972:	f001 f833 	bl	80139dc <__d2b>
 8012976:	f3c4 510a 	ubfx	r1, r4, #20, #11
 801297a:	4605      	mov	r5, r0
 801297c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801297e:	2900      	cmp	r1, #0
 8012980:	d046      	beq.n	8012a10 <_dtoa_r+0x180>
 8012982:	ee18 4a90 	vmov	r4, s17
 8012986:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801298a:	ec53 2b18 	vmov	r2, r3, d8
 801298e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8012992:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012996:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801299a:	2400      	movs	r4, #0
 801299c:	ec43 2b16 	vmov	d6, r2, r3
 80129a0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80129a4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8012b50 <_dtoa_r+0x2c0>
 80129a8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80129ac:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8012b58 <_dtoa_r+0x2c8>
 80129b0:	eea7 6b05 	vfma.f64	d6, d7, d5
 80129b4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8012b60 <_dtoa_r+0x2d0>
 80129b8:	ee07 1a90 	vmov	s15, r1
 80129bc:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80129c0:	eeb0 7b46 	vmov.f64	d7, d6
 80129c4:	eea4 7b05 	vfma.f64	d7, d4, d5
 80129c8:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80129cc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80129d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129d4:	ee16 ba90 	vmov	fp, s13
 80129d8:	940a      	str	r4, [sp, #40]	; 0x28
 80129da:	d508      	bpl.n	80129ee <_dtoa_r+0x15e>
 80129dc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80129e0:	eeb4 6b47 	vcmp.f64	d6, d7
 80129e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129e8:	bf18      	it	ne
 80129ea:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 80129ee:	f1bb 0f16 	cmp.w	fp, #22
 80129f2:	d82f      	bhi.n	8012a54 <_dtoa_r+0x1c4>
 80129f4:	4b62      	ldr	r3, [pc, #392]	; (8012b80 <_dtoa_r+0x2f0>)
 80129f6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80129fa:	ed93 7b00 	vldr	d7, [r3]
 80129fe:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8012a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a06:	d501      	bpl.n	8012a0c <_dtoa_r+0x17c>
 8012a08:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8012a0c:	2300      	movs	r3, #0
 8012a0e:	e022      	b.n	8012a56 <_dtoa_r+0x1c6>
 8012a10:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012a12:	4401      	add	r1, r0
 8012a14:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8012a18:	2b20      	cmp	r3, #32
 8012a1a:	bfc1      	itttt	gt
 8012a1c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012a20:	fa04 f303 	lslgt.w	r3, r4, r3
 8012a24:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8012a28:	fa28 f804 	lsrgt.w	r8, r8, r4
 8012a2c:	bfd6      	itet	le
 8012a2e:	f1c3 0320 	rsble	r3, r3, #32
 8012a32:	ea43 0808 	orrgt.w	r8, r3, r8
 8012a36:	fa08 f803 	lslle.w	r8, r8, r3
 8012a3a:	ee07 8a90 	vmov	s15, r8
 8012a3e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8012a42:	3901      	subs	r1, #1
 8012a44:	ee17 4a90 	vmov	r4, s15
 8012a48:	ec53 2b17 	vmov	r2, r3, d7
 8012a4c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8012a50:	2401      	movs	r4, #1
 8012a52:	e7a3      	b.n	801299c <_dtoa_r+0x10c>
 8012a54:	2301      	movs	r3, #1
 8012a56:	930b      	str	r3, [sp, #44]	; 0x2c
 8012a58:	1a43      	subs	r3, r0, r1
 8012a5a:	1e5a      	subs	r2, r3, #1
 8012a5c:	bf45      	ittet	mi
 8012a5e:	f1c3 0301 	rsbmi	r3, r3, #1
 8012a62:	9304      	strmi	r3, [sp, #16]
 8012a64:	2300      	movpl	r3, #0
 8012a66:	2300      	movmi	r3, #0
 8012a68:	9205      	str	r2, [sp, #20]
 8012a6a:	bf54      	ite	pl
 8012a6c:	9304      	strpl	r3, [sp, #16]
 8012a6e:	9305      	strmi	r3, [sp, #20]
 8012a70:	f1bb 0f00 	cmp.w	fp, #0
 8012a74:	db18      	blt.n	8012aa8 <_dtoa_r+0x218>
 8012a76:	9b05      	ldr	r3, [sp, #20]
 8012a78:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8012a7c:	445b      	add	r3, fp
 8012a7e:	9305      	str	r3, [sp, #20]
 8012a80:	2300      	movs	r3, #0
 8012a82:	9a06      	ldr	r2, [sp, #24]
 8012a84:	2a09      	cmp	r2, #9
 8012a86:	d849      	bhi.n	8012b1c <_dtoa_r+0x28c>
 8012a88:	2a05      	cmp	r2, #5
 8012a8a:	bfc4      	itt	gt
 8012a8c:	3a04      	subgt	r2, #4
 8012a8e:	9206      	strgt	r2, [sp, #24]
 8012a90:	9a06      	ldr	r2, [sp, #24]
 8012a92:	f1a2 0202 	sub.w	r2, r2, #2
 8012a96:	bfcc      	ite	gt
 8012a98:	2400      	movgt	r4, #0
 8012a9a:	2401      	movle	r4, #1
 8012a9c:	2a03      	cmp	r2, #3
 8012a9e:	d848      	bhi.n	8012b32 <_dtoa_r+0x2a2>
 8012aa0:	e8df f002 	tbb	[pc, r2]
 8012aa4:	3a2c2e0b 	.word	0x3a2c2e0b
 8012aa8:	9b04      	ldr	r3, [sp, #16]
 8012aaa:	2200      	movs	r2, #0
 8012aac:	eba3 030b 	sub.w	r3, r3, fp
 8012ab0:	9304      	str	r3, [sp, #16]
 8012ab2:	9209      	str	r2, [sp, #36]	; 0x24
 8012ab4:	f1cb 0300 	rsb	r3, fp, #0
 8012ab8:	e7e3      	b.n	8012a82 <_dtoa_r+0x1f2>
 8012aba:	2200      	movs	r2, #0
 8012abc:	9207      	str	r2, [sp, #28]
 8012abe:	9a08      	ldr	r2, [sp, #32]
 8012ac0:	2a00      	cmp	r2, #0
 8012ac2:	dc39      	bgt.n	8012b38 <_dtoa_r+0x2a8>
 8012ac4:	f04f 0a01 	mov.w	sl, #1
 8012ac8:	46d1      	mov	r9, sl
 8012aca:	4652      	mov	r2, sl
 8012acc:	f8cd a020 	str.w	sl, [sp, #32]
 8012ad0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8012ad2:	2100      	movs	r1, #0
 8012ad4:	6079      	str	r1, [r7, #4]
 8012ad6:	2004      	movs	r0, #4
 8012ad8:	f100 0c14 	add.w	ip, r0, #20
 8012adc:	4594      	cmp	ip, r2
 8012ade:	6879      	ldr	r1, [r7, #4]
 8012ae0:	d92f      	bls.n	8012b42 <_dtoa_r+0x2b2>
 8012ae2:	4630      	mov	r0, r6
 8012ae4:	930d      	str	r3, [sp, #52]	; 0x34
 8012ae6:	f000 fc51 	bl	801338c <_Balloc>
 8012aea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012aec:	9001      	str	r0, [sp, #4]
 8012aee:	4602      	mov	r2, r0
 8012af0:	2800      	cmp	r0, #0
 8012af2:	d149      	bne.n	8012b88 <_dtoa_r+0x2f8>
 8012af4:	4b23      	ldr	r3, [pc, #140]	; (8012b84 <_dtoa_r+0x2f4>)
 8012af6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8012afa:	e6e1      	b.n	80128c0 <_dtoa_r+0x30>
 8012afc:	2201      	movs	r2, #1
 8012afe:	e7dd      	b.n	8012abc <_dtoa_r+0x22c>
 8012b00:	2200      	movs	r2, #0
 8012b02:	9207      	str	r2, [sp, #28]
 8012b04:	9a08      	ldr	r2, [sp, #32]
 8012b06:	eb0b 0a02 	add.w	sl, fp, r2
 8012b0a:	f10a 0901 	add.w	r9, sl, #1
 8012b0e:	464a      	mov	r2, r9
 8012b10:	2a01      	cmp	r2, #1
 8012b12:	bfb8      	it	lt
 8012b14:	2201      	movlt	r2, #1
 8012b16:	e7db      	b.n	8012ad0 <_dtoa_r+0x240>
 8012b18:	2201      	movs	r2, #1
 8012b1a:	e7f2      	b.n	8012b02 <_dtoa_r+0x272>
 8012b1c:	2401      	movs	r4, #1
 8012b1e:	2200      	movs	r2, #0
 8012b20:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8012b24:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8012b28:	2100      	movs	r1, #0
 8012b2a:	46d1      	mov	r9, sl
 8012b2c:	2212      	movs	r2, #18
 8012b2e:	9108      	str	r1, [sp, #32]
 8012b30:	e7ce      	b.n	8012ad0 <_dtoa_r+0x240>
 8012b32:	2201      	movs	r2, #1
 8012b34:	9207      	str	r2, [sp, #28]
 8012b36:	e7f5      	b.n	8012b24 <_dtoa_r+0x294>
 8012b38:	f8dd a020 	ldr.w	sl, [sp, #32]
 8012b3c:	46d1      	mov	r9, sl
 8012b3e:	4652      	mov	r2, sl
 8012b40:	e7c6      	b.n	8012ad0 <_dtoa_r+0x240>
 8012b42:	3101      	adds	r1, #1
 8012b44:	6079      	str	r1, [r7, #4]
 8012b46:	0040      	lsls	r0, r0, #1
 8012b48:	e7c6      	b.n	8012ad8 <_dtoa_r+0x248>
 8012b4a:	bf00      	nop
 8012b4c:	f3af 8000 	nop.w
 8012b50:	636f4361 	.word	0x636f4361
 8012b54:	3fd287a7 	.word	0x3fd287a7
 8012b58:	8b60c8b3 	.word	0x8b60c8b3
 8012b5c:	3fc68a28 	.word	0x3fc68a28
 8012b60:	509f79fb 	.word	0x509f79fb
 8012b64:	3fd34413 	.word	0x3fd34413
 8012b68:	08014c45 	.word	0x08014c45
 8012b6c:	08014c5c 	.word	0x08014c5c
 8012b70:	7ff00000 	.word	0x7ff00000
 8012b74:	08014c41 	.word	0x08014c41
 8012b78:	08014c38 	.word	0x08014c38
 8012b7c:	08014c15 	.word	0x08014c15
 8012b80:	08014d50 	.word	0x08014d50
 8012b84:	08014cb7 	.word	0x08014cb7
 8012b88:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8012b8a:	9901      	ldr	r1, [sp, #4]
 8012b8c:	6011      	str	r1, [r2, #0]
 8012b8e:	f1b9 0f0e 	cmp.w	r9, #14
 8012b92:	d86c      	bhi.n	8012c6e <_dtoa_r+0x3de>
 8012b94:	2c00      	cmp	r4, #0
 8012b96:	d06a      	beq.n	8012c6e <_dtoa_r+0x3de>
 8012b98:	f1bb 0f00 	cmp.w	fp, #0
 8012b9c:	f340 80a0 	ble.w	8012ce0 <_dtoa_r+0x450>
 8012ba0:	49c1      	ldr	r1, [pc, #772]	; (8012ea8 <_dtoa_r+0x618>)
 8012ba2:	f00b 020f 	and.w	r2, fp, #15
 8012ba6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8012baa:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8012bae:	ed92 7b00 	vldr	d7, [r2]
 8012bb2:	ea4f 112b 	mov.w	r1, fp, asr #4
 8012bb6:	f000 8087 	beq.w	8012cc8 <_dtoa_r+0x438>
 8012bba:	4abc      	ldr	r2, [pc, #752]	; (8012eac <_dtoa_r+0x61c>)
 8012bbc:	ed92 6b08 	vldr	d6, [r2, #32]
 8012bc0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8012bc4:	ed8d 6b02 	vstr	d6, [sp, #8]
 8012bc8:	f001 010f 	and.w	r1, r1, #15
 8012bcc:	2203      	movs	r2, #3
 8012bce:	48b7      	ldr	r0, [pc, #732]	; (8012eac <_dtoa_r+0x61c>)
 8012bd0:	2900      	cmp	r1, #0
 8012bd2:	d17b      	bne.n	8012ccc <_dtoa_r+0x43c>
 8012bd4:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012bd8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8012bdc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012be0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012be2:	2900      	cmp	r1, #0
 8012be4:	f000 80a2 	beq.w	8012d2c <_dtoa_r+0x49c>
 8012be8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8012bec:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012bf0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bf8:	f140 8098 	bpl.w	8012d2c <_dtoa_r+0x49c>
 8012bfc:	f1b9 0f00 	cmp.w	r9, #0
 8012c00:	f000 8094 	beq.w	8012d2c <_dtoa_r+0x49c>
 8012c04:	f1ba 0f00 	cmp.w	sl, #0
 8012c08:	dd2f      	ble.n	8012c6a <_dtoa_r+0x3da>
 8012c0a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8012c0e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012c12:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012c16:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8012c1a:	3201      	adds	r2, #1
 8012c1c:	4650      	mov	r0, sl
 8012c1e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012c22:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8012c26:	ee07 2a90 	vmov	s15, r2
 8012c2a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012c2e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8012c32:	ee15 4a90 	vmov	r4, s11
 8012c36:	ec52 1b15 	vmov	r1, r2, d5
 8012c3a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8012c3e:	2800      	cmp	r0, #0
 8012c40:	d177      	bne.n	8012d32 <_dtoa_r+0x4a2>
 8012c42:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8012c46:	ee36 6b47 	vsub.f64	d6, d6, d7
 8012c4a:	ec42 1b17 	vmov	d7, r1, r2
 8012c4e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c56:	f300 8263 	bgt.w	8013120 <_dtoa_r+0x890>
 8012c5a:	eeb1 7b47 	vneg.f64	d7, d7
 8012c5e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c66:	f100 8258 	bmi.w	801311a <_dtoa_r+0x88a>
 8012c6a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8012c6e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012c70:	2a00      	cmp	r2, #0
 8012c72:	f2c0 811d 	blt.w	8012eb0 <_dtoa_r+0x620>
 8012c76:	f1bb 0f0e 	cmp.w	fp, #14
 8012c7a:	f300 8119 	bgt.w	8012eb0 <_dtoa_r+0x620>
 8012c7e:	4b8a      	ldr	r3, [pc, #552]	; (8012ea8 <_dtoa_r+0x618>)
 8012c80:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012c84:	ed93 6b00 	vldr	d6, [r3]
 8012c88:	9b08      	ldr	r3, [sp, #32]
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	f280 80b7 	bge.w	8012dfe <_dtoa_r+0x56e>
 8012c90:	f1b9 0f00 	cmp.w	r9, #0
 8012c94:	f300 80b3 	bgt.w	8012dfe <_dtoa_r+0x56e>
 8012c98:	f040 823f 	bne.w	801311a <_dtoa_r+0x88a>
 8012c9c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8012ca0:	ee26 6b07 	vmul.f64	d6, d6, d7
 8012ca4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012ca8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cb0:	464c      	mov	r4, r9
 8012cb2:	464f      	mov	r7, r9
 8012cb4:	f280 8215 	bge.w	80130e2 <_dtoa_r+0x852>
 8012cb8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012cbc:	2331      	movs	r3, #49	; 0x31
 8012cbe:	f808 3b01 	strb.w	r3, [r8], #1
 8012cc2:	f10b 0b01 	add.w	fp, fp, #1
 8012cc6:	e211      	b.n	80130ec <_dtoa_r+0x85c>
 8012cc8:	2202      	movs	r2, #2
 8012cca:	e780      	b.n	8012bce <_dtoa_r+0x33e>
 8012ccc:	07cc      	lsls	r4, r1, #31
 8012cce:	d504      	bpl.n	8012cda <_dtoa_r+0x44a>
 8012cd0:	ed90 6b00 	vldr	d6, [r0]
 8012cd4:	3201      	adds	r2, #1
 8012cd6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012cda:	1049      	asrs	r1, r1, #1
 8012cdc:	3008      	adds	r0, #8
 8012cde:	e777      	b.n	8012bd0 <_dtoa_r+0x340>
 8012ce0:	d022      	beq.n	8012d28 <_dtoa_r+0x498>
 8012ce2:	f1cb 0100 	rsb	r1, fp, #0
 8012ce6:	4a70      	ldr	r2, [pc, #448]	; (8012ea8 <_dtoa_r+0x618>)
 8012ce8:	f001 000f 	and.w	r0, r1, #15
 8012cec:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8012cf0:	ed92 7b00 	vldr	d7, [r2]
 8012cf4:	ee28 7b07 	vmul.f64	d7, d8, d7
 8012cf8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012cfc:	486b      	ldr	r0, [pc, #428]	; (8012eac <_dtoa_r+0x61c>)
 8012cfe:	1109      	asrs	r1, r1, #4
 8012d00:	2400      	movs	r4, #0
 8012d02:	2202      	movs	r2, #2
 8012d04:	b929      	cbnz	r1, 8012d12 <_dtoa_r+0x482>
 8012d06:	2c00      	cmp	r4, #0
 8012d08:	f43f af6a 	beq.w	8012be0 <_dtoa_r+0x350>
 8012d0c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012d10:	e766      	b.n	8012be0 <_dtoa_r+0x350>
 8012d12:	07cf      	lsls	r7, r1, #31
 8012d14:	d505      	bpl.n	8012d22 <_dtoa_r+0x492>
 8012d16:	ed90 6b00 	vldr	d6, [r0]
 8012d1a:	3201      	adds	r2, #1
 8012d1c:	2401      	movs	r4, #1
 8012d1e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012d22:	1049      	asrs	r1, r1, #1
 8012d24:	3008      	adds	r0, #8
 8012d26:	e7ed      	b.n	8012d04 <_dtoa_r+0x474>
 8012d28:	2202      	movs	r2, #2
 8012d2a:	e759      	b.n	8012be0 <_dtoa_r+0x350>
 8012d2c:	465f      	mov	r7, fp
 8012d2e:	4648      	mov	r0, r9
 8012d30:	e775      	b.n	8012c1e <_dtoa_r+0x38e>
 8012d32:	ec42 1b17 	vmov	d7, r1, r2
 8012d36:	4a5c      	ldr	r2, [pc, #368]	; (8012ea8 <_dtoa_r+0x618>)
 8012d38:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8012d3c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8012d40:	9a01      	ldr	r2, [sp, #4]
 8012d42:	1814      	adds	r4, r2, r0
 8012d44:	9a07      	ldr	r2, [sp, #28]
 8012d46:	b352      	cbz	r2, 8012d9e <_dtoa_r+0x50e>
 8012d48:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8012d4c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8012d50:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012d54:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8012d58:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8012d5c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012d60:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012d64:	ee14 2a90 	vmov	r2, s9
 8012d68:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012d6c:	3230      	adds	r2, #48	; 0x30
 8012d6e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012d72:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d7a:	f808 2b01 	strb.w	r2, [r8], #1
 8012d7e:	d439      	bmi.n	8012df4 <_dtoa_r+0x564>
 8012d80:	ee32 5b46 	vsub.f64	d5, d2, d6
 8012d84:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8012d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d8c:	d472      	bmi.n	8012e74 <_dtoa_r+0x5e4>
 8012d8e:	45a0      	cmp	r8, r4
 8012d90:	f43f af6b 	beq.w	8012c6a <_dtoa_r+0x3da>
 8012d94:	ee27 7b03 	vmul.f64	d7, d7, d3
 8012d98:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012d9c:	e7e0      	b.n	8012d60 <_dtoa_r+0x4d0>
 8012d9e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012da2:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012da6:	4621      	mov	r1, r4
 8012da8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8012dac:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012db0:	ee14 2a90 	vmov	r2, s9
 8012db4:	3230      	adds	r2, #48	; 0x30
 8012db6:	f808 2b01 	strb.w	r2, [r8], #1
 8012dba:	45a0      	cmp	r8, r4
 8012dbc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012dc0:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012dc4:	d118      	bne.n	8012df8 <_dtoa_r+0x568>
 8012dc6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8012dca:	ee37 4b05 	vadd.f64	d4, d7, d5
 8012dce:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8012dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dd6:	dc4d      	bgt.n	8012e74 <_dtoa_r+0x5e4>
 8012dd8:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012ddc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012de4:	f57f af41 	bpl.w	8012c6a <_dtoa_r+0x3da>
 8012de8:	4688      	mov	r8, r1
 8012dea:	3901      	subs	r1, #1
 8012dec:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8012df0:	2b30      	cmp	r3, #48	; 0x30
 8012df2:	d0f9      	beq.n	8012de8 <_dtoa_r+0x558>
 8012df4:	46bb      	mov	fp, r7
 8012df6:	e02a      	b.n	8012e4e <_dtoa_r+0x5be>
 8012df8:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012dfc:	e7d6      	b.n	8012dac <_dtoa_r+0x51c>
 8012dfe:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012e02:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8012e06:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012e0a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8012e0e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8012e12:	ee15 3a10 	vmov	r3, s10
 8012e16:	3330      	adds	r3, #48	; 0x30
 8012e18:	f808 3b01 	strb.w	r3, [r8], #1
 8012e1c:	9b01      	ldr	r3, [sp, #4]
 8012e1e:	eba8 0303 	sub.w	r3, r8, r3
 8012e22:	4599      	cmp	r9, r3
 8012e24:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8012e28:	eea3 7b46 	vfms.f64	d7, d3, d6
 8012e2c:	d133      	bne.n	8012e96 <_dtoa_r+0x606>
 8012e2e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8012e32:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e3a:	dc1a      	bgt.n	8012e72 <_dtoa_r+0x5e2>
 8012e3c:	eeb4 7b46 	vcmp.f64	d7, d6
 8012e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e44:	d103      	bne.n	8012e4e <_dtoa_r+0x5be>
 8012e46:	ee15 3a10 	vmov	r3, s10
 8012e4a:	07d9      	lsls	r1, r3, #31
 8012e4c:	d411      	bmi.n	8012e72 <_dtoa_r+0x5e2>
 8012e4e:	4629      	mov	r1, r5
 8012e50:	4630      	mov	r0, r6
 8012e52:	f000 fadb 	bl	801340c <_Bfree>
 8012e56:	2300      	movs	r3, #0
 8012e58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012e5a:	f888 3000 	strb.w	r3, [r8]
 8012e5e:	f10b 0301 	add.w	r3, fp, #1
 8012e62:	6013      	str	r3, [r2, #0]
 8012e64:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	f43f ad61 	beq.w	801292e <_dtoa_r+0x9e>
 8012e6c:	f8c3 8000 	str.w	r8, [r3]
 8012e70:	e55d      	b.n	801292e <_dtoa_r+0x9e>
 8012e72:	465f      	mov	r7, fp
 8012e74:	4643      	mov	r3, r8
 8012e76:	4698      	mov	r8, r3
 8012e78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012e7c:	2a39      	cmp	r2, #57	; 0x39
 8012e7e:	d106      	bne.n	8012e8e <_dtoa_r+0x5fe>
 8012e80:	9a01      	ldr	r2, [sp, #4]
 8012e82:	429a      	cmp	r2, r3
 8012e84:	d1f7      	bne.n	8012e76 <_dtoa_r+0x5e6>
 8012e86:	9901      	ldr	r1, [sp, #4]
 8012e88:	2230      	movs	r2, #48	; 0x30
 8012e8a:	3701      	adds	r7, #1
 8012e8c:	700a      	strb	r2, [r1, #0]
 8012e8e:	781a      	ldrb	r2, [r3, #0]
 8012e90:	3201      	adds	r2, #1
 8012e92:	701a      	strb	r2, [r3, #0]
 8012e94:	e7ae      	b.n	8012df4 <_dtoa_r+0x564>
 8012e96:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012e9a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ea2:	d1b2      	bne.n	8012e0a <_dtoa_r+0x57a>
 8012ea4:	e7d3      	b.n	8012e4e <_dtoa_r+0x5be>
 8012ea6:	bf00      	nop
 8012ea8:	08014d50 	.word	0x08014d50
 8012eac:	08014d28 	.word	0x08014d28
 8012eb0:	9907      	ldr	r1, [sp, #28]
 8012eb2:	2900      	cmp	r1, #0
 8012eb4:	f000 80d0 	beq.w	8013058 <_dtoa_r+0x7c8>
 8012eb8:	9906      	ldr	r1, [sp, #24]
 8012eba:	2901      	cmp	r1, #1
 8012ebc:	f300 80b4 	bgt.w	8013028 <_dtoa_r+0x798>
 8012ec0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012ec2:	2900      	cmp	r1, #0
 8012ec4:	f000 80ac 	beq.w	8013020 <_dtoa_r+0x790>
 8012ec8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8012ecc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8012ed0:	461c      	mov	r4, r3
 8012ed2:	930a      	str	r3, [sp, #40]	; 0x28
 8012ed4:	9b04      	ldr	r3, [sp, #16]
 8012ed6:	4413      	add	r3, r2
 8012ed8:	9304      	str	r3, [sp, #16]
 8012eda:	9b05      	ldr	r3, [sp, #20]
 8012edc:	2101      	movs	r1, #1
 8012ede:	4413      	add	r3, r2
 8012ee0:	4630      	mov	r0, r6
 8012ee2:	9305      	str	r3, [sp, #20]
 8012ee4:	f000 fb4a 	bl	801357c <__i2b>
 8012ee8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012eea:	4607      	mov	r7, r0
 8012eec:	f1b8 0f00 	cmp.w	r8, #0
 8012ef0:	dd0d      	ble.n	8012f0e <_dtoa_r+0x67e>
 8012ef2:	9a05      	ldr	r2, [sp, #20]
 8012ef4:	2a00      	cmp	r2, #0
 8012ef6:	dd0a      	ble.n	8012f0e <_dtoa_r+0x67e>
 8012ef8:	4542      	cmp	r2, r8
 8012efa:	9904      	ldr	r1, [sp, #16]
 8012efc:	bfa8      	it	ge
 8012efe:	4642      	movge	r2, r8
 8012f00:	1a89      	subs	r1, r1, r2
 8012f02:	9104      	str	r1, [sp, #16]
 8012f04:	9905      	ldr	r1, [sp, #20]
 8012f06:	eba8 0802 	sub.w	r8, r8, r2
 8012f0a:	1a8a      	subs	r2, r1, r2
 8012f0c:	9205      	str	r2, [sp, #20]
 8012f0e:	b303      	cbz	r3, 8012f52 <_dtoa_r+0x6c2>
 8012f10:	9a07      	ldr	r2, [sp, #28]
 8012f12:	2a00      	cmp	r2, #0
 8012f14:	f000 80a5 	beq.w	8013062 <_dtoa_r+0x7d2>
 8012f18:	2c00      	cmp	r4, #0
 8012f1a:	dd13      	ble.n	8012f44 <_dtoa_r+0x6b4>
 8012f1c:	4639      	mov	r1, r7
 8012f1e:	4622      	mov	r2, r4
 8012f20:	4630      	mov	r0, r6
 8012f22:	930d      	str	r3, [sp, #52]	; 0x34
 8012f24:	f000 fbea 	bl	80136fc <__pow5mult>
 8012f28:	462a      	mov	r2, r5
 8012f2a:	4601      	mov	r1, r0
 8012f2c:	4607      	mov	r7, r0
 8012f2e:	4630      	mov	r0, r6
 8012f30:	f000 fb3a 	bl	80135a8 <__multiply>
 8012f34:	4629      	mov	r1, r5
 8012f36:	900a      	str	r0, [sp, #40]	; 0x28
 8012f38:	4630      	mov	r0, r6
 8012f3a:	f000 fa67 	bl	801340c <_Bfree>
 8012f3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012f40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012f42:	4615      	mov	r5, r2
 8012f44:	1b1a      	subs	r2, r3, r4
 8012f46:	d004      	beq.n	8012f52 <_dtoa_r+0x6c2>
 8012f48:	4629      	mov	r1, r5
 8012f4a:	4630      	mov	r0, r6
 8012f4c:	f000 fbd6 	bl	80136fc <__pow5mult>
 8012f50:	4605      	mov	r5, r0
 8012f52:	2101      	movs	r1, #1
 8012f54:	4630      	mov	r0, r6
 8012f56:	f000 fb11 	bl	801357c <__i2b>
 8012f5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	4604      	mov	r4, r0
 8012f60:	f340 8081 	ble.w	8013066 <_dtoa_r+0x7d6>
 8012f64:	461a      	mov	r2, r3
 8012f66:	4601      	mov	r1, r0
 8012f68:	4630      	mov	r0, r6
 8012f6a:	f000 fbc7 	bl	80136fc <__pow5mult>
 8012f6e:	9b06      	ldr	r3, [sp, #24]
 8012f70:	2b01      	cmp	r3, #1
 8012f72:	4604      	mov	r4, r0
 8012f74:	dd7a      	ble.n	801306c <_dtoa_r+0x7dc>
 8012f76:	2300      	movs	r3, #0
 8012f78:	930a      	str	r3, [sp, #40]	; 0x28
 8012f7a:	6922      	ldr	r2, [r4, #16]
 8012f7c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8012f80:	6910      	ldr	r0, [r2, #16]
 8012f82:	f000 faab 	bl	80134dc <__hi0bits>
 8012f86:	f1c0 0020 	rsb	r0, r0, #32
 8012f8a:	9b05      	ldr	r3, [sp, #20]
 8012f8c:	4418      	add	r0, r3
 8012f8e:	f010 001f 	ands.w	r0, r0, #31
 8012f92:	f000 808c 	beq.w	80130ae <_dtoa_r+0x81e>
 8012f96:	f1c0 0220 	rsb	r2, r0, #32
 8012f9a:	2a04      	cmp	r2, #4
 8012f9c:	f340 8085 	ble.w	80130aa <_dtoa_r+0x81a>
 8012fa0:	f1c0 001c 	rsb	r0, r0, #28
 8012fa4:	9b04      	ldr	r3, [sp, #16]
 8012fa6:	4403      	add	r3, r0
 8012fa8:	9304      	str	r3, [sp, #16]
 8012faa:	9b05      	ldr	r3, [sp, #20]
 8012fac:	4403      	add	r3, r0
 8012fae:	4480      	add	r8, r0
 8012fb0:	9305      	str	r3, [sp, #20]
 8012fb2:	9b04      	ldr	r3, [sp, #16]
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	dd05      	ble.n	8012fc4 <_dtoa_r+0x734>
 8012fb8:	4629      	mov	r1, r5
 8012fba:	461a      	mov	r2, r3
 8012fbc:	4630      	mov	r0, r6
 8012fbe:	f000 fbf7 	bl	80137b0 <__lshift>
 8012fc2:	4605      	mov	r5, r0
 8012fc4:	9b05      	ldr	r3, [sp, #20]
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	dd05      	ble.n	8012fd6 <_dtoa_r+0x746>
 8012fca:	4621      	mov	r1, r4
 8012fcc:	461a      	mov	r2, r3
 8012fce:	4630      	mov	r0, r6
 8012fd0:	f000 fbee 	bl	80137b0 <__lshift>
 8012fd4:	4604      	mov	r4, r0
 8012fd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d06a      	beq.n	80130b2 <_dtoa_r+0x822>
 8012fdc:	4621      	mov	r1, r4
 8012fde:	4628      	mov	r0, r5
 8012fe0:	f000 fc56 	bl	8013890 <__mcmp>
 8012fe4:	2800      	cmp	r0, #0
 8012fe6:	da64      	bge.n	80130b2 <_dtoa_r+0x822>
 8012fe8:	2300      	movs	r3, #0
 8012fea:	4629      	mov	r1, r5
 8012fec:	220a      	movs	r2, #10
 8012fee:	4630      	mov	r0, r6
 8012ff0:	f000 fa2e 	bl	8013450 <__multadd>
 8012ff4:	9b07      	ldr	r3, [sp, #28]
 8012ff6:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8012ffa:	4605      	mov	r5, r0
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	f000 8191 	beq.w	8013324 <_dtoa_r+0xa94>
 8013002:	4639      	mov	r1, r7
 8013004:	2300      	movs	r3, #0
 8013006:	220a      	movs	r2, #10
 8013008:	4630      	mov	r0, r6
 801300a:	f000 fa21 	bl	8013450 <__multadd>
 801300e:	f1ba 0f00 	cmp.w	sl, #0
 8013012:	4607      	mov	r7, r0
 8013014:	f300 808d 	bgt.w	8013132 <_dtoa_r+0x8a2>
 8013018:	9b06      	ldr	r3, [sp, #24]
 801301a:	2b02      	cmp	r3, #2
 801301c:	dc50      	bgt.n	80130c0 <_dtoa_r+0x830>
 801301e:	e088      	b.n	8013132 <_dtoa_r+0x8a2>
 8013020:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013022:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013026:	e751      	b.n	8012ecc <_dtoa_r+0x63c>
 8013028:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 801302c:	42a3      	cmp	r3, r4
 801302e:	bfbf      	itttt	lt
 8013030:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8013032:	1ae3      	sublt	r3, r4, r3
 8013034:	18d2      	addlt	r2, r2, r3
 8013036:	9209      	strlt	r2, [sp, #36]	; 0x24
 8013038:	bfb6      	itet	lt
 801303a:	4623      	movlt	r3, r4
 801303c:	1b1c      	subge	r4, r3, r4
 801303e:	2400      	movlt	r4, #0
 8013040:	f1b9 0f00 	cmp.w	r9, #0
 8013044:	bfb5      	itete	lt
 8013046:	9a04      	ldrlt	r2, [sp, #16]
 8013048:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 801304c:	eba2 0809 	sublt.w	r8, r2, r9
 8013050:	464a      	movge	r2, r9
 8013052:	bfb8      	it	lt
 8013054:	2200      	movlt	r2, #0
 8013056:	e73c      	b.n	8012ed2 <_dtoa_r+0x642>
 8013058:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801305c:	9f07      	ldr	r7, [sp, #28]
 801305e:	461c      	mov	r4, r3
 8013060:	e744      	b.n	8012eec <_dtoa_r+0x65c>
 8013062:	461a      	mov	r2, r3
 8013064:	e770      	b.n	8012f48 <_dtoa_r+0x6b8>
 8013066:	9b06      	ldr	r3, [sp, #24]
 8013068:	2b01      	cmp	r3, #1
 801306a:	dc18      	bgt.n	801309e <_dtoa_r+0x80e>
 801306c:	9b02      	ldr	r3, [sp, #8]
 801306e:	b9b3      	cbnz	r3, 801309e <_dtoa_r+0x80e>
 8013070:	9b03      	ldr	r3, [sp, #12]
 8013072:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8013076:	b9a2      	cbnz	r2, 80130a2 <_dtoa_r+0x812>
 8013078:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801307c:	0d12      	lsrs	r2, r2, #20
 801307e:	0512      	lsls	r2, r2, #20
 8013080:	b18a      	cbz	r2, 80130a6 <_dtoa_r+0x816>
 8013082:	9b04      	ldr	r3, [sp, #16]
 8013084:	3301      	adds	r3, #1
 8013086:	9304      	str	r3, [sp, #16]
 8013088:	9b05      	ldr	r3, [sp, #20]
 801308a:	3301      	adds	r3, #1
 801308c:	9305      	str	r3, [sp, #20]
 801308e:	2301      	movs	r3, #1
 8013090:	930a      	str	r3, [sp, #40]	; 0x28
 8013092:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013094:	2b00      	cmp	r3, #0
 8013096:	f47f af70 	bne.w	8012f7a <_dtoa_r+0x6ea>
 801309a:	2001      	movs	r0, #1
 801309c:	e775      	b.n	8012f8a <_dtoa_r+0x6fa>
 801309e:	2300      	movs	r3, #0
 80130a0:	e7f6      	b.n	8013090 <_dtoa_r+0x800>
 80130a2:	9b02      	ldr	r3, [sp, #8]
 80130a4:	e7f4      	b.n	8013090 <_dtoa_r+0x800>
 80130a6:	920a      	str	r2, [sp, #40]	; 0x28
 80130a8:	e7f3      	b.n	8013092 <_dtoa_r+0x802>
 80130aa:	d082      	beq.n	8012fb2 <_dtoa_r+0x722>
 80130ac:	4610      	mov	r0, r2
 80130ae:	301c      	adds	r0, #28
 80130b0:	e778      	b.n	8012fa4 <_dtoa_r+0x714>
 80130b2:	f1b9 0f00 	cmp.w	r9, #0
 80130b6:	dc37      	bgt.n	8013128 <_dtoa_r+0x898>
 80130b8:	9b06      	ldr	r3, [sp, #24]
 80130ba:	2b02      	cmp	r3, #2
 80130bc:	dd34      	ble.n	8013128 <_dtoa_r+0x898>
 80130be:	46ca      	mov	sl, r9
 80130c0:	f1ba 0f00 	cmp.w	sl, #0
 80130c4:	d10d      	bne.n	80130e2 <_dtoa_r+0x852>
 80130c6:	4621      	mov	r1, r4
 80130c8:	4653      	mov	r3, sl
 80130ca:	2205      	movs	r2, #5
 80130cc:	4630      	mov	r0, r6
 80130ce:	f000 f9bf 	bl	8013450 <__multadd>
 80130d2:	4601      	mov	r1, r0
 80130d4:	4604      	mov	r4, r0
 80130d6:	4628      	mov	r0, r5
 80130d8:	f000 fbda 	bl	8013890 <__mcmp>
 80130dc:	2800      	cmp	r0, #0
 80130de:	f73f adeb 	bgt.w	8012cb8 <_dtoa_r+0x428>
 80130e2:	9b08      	ldr	r3, [sp, #32]
 80130e4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80130e8:	ea6f 0b03 	mvn.w	fp, r3
 80130ec:	f04f 0900 	mov.w	r9, #0
 80130f0:	4621      	mov	r1, r4
 80130f2:	4630      	mov	r0, r6
 80130f4:	f000 f98a 	bl	801340c <_Bfree>
 80130f8:	2f00      	cmp	r7, #0
 80130fa:	f43f aea8 	beq.w	8012e4e <_dtoa_r+0x5be>
 80130fe:	f1b9 0f00 	cmp.w	r9, #0
 8013102:	d005      	beq.n	8013110 <_dtoa_r+0x880>
 8013104:	45b9      	cmp	r9, r7
 8013106:	d003      	beq.n	8013110 <_dtoa_r+0x880>
 8013108:	4649      	mov	r1, r9
 801310a:	4630      	mov	r0, r6
 801310c:	f000 f97e 	bl	801340c <_Bfree>
 8013110:	4639      	mov	r1, r7
 8013112:	4630      	mov	r0, r6
 8013114:	f000 f97a 	bl	801340c <_Bfree>
 8013118:	e699      	b.n	8012e4e <_dtoa_r+0x5be>
 801311a:	2400      	movs	r4, #0
 801311c:	4627      	mov	r7, r4
 801311e:	e7e0      	b.n	80130e2 <_dtoa_r+0x852>
 8013120:	46bb      	mov	fp, r7
 8013122:	4604      	mov	r4, r0
 8013124:	4607      	mov	r7, r0
 8013126:	e5c7      	b.n	8012cb8 <_dtoa_r+0x428>
 8013128:	9b07      	ldr	r3, [sp, #28]
 801312a:	46ca      	mov	sl, r9
 801312c:	2b00      	cmp	r3, #0
 801312e:	f000 8100 	beq.w	8013332 <_dtoa_r+0xaa2>
 8013132:	f1b8 0f00 	cmp.w	r8, #0
 8013136:	dd05      	ble.n	8013144 <_dtoa_r+0x8b4>
 8013138:	4639      	mov	r1, r7
 801313a:	4642      	mov	r2, r8
 801313c:	4630      	mov	r0, r6
 801313e:	f000 fb37 	bl	80137b0 <__lshift>
 8013142:	4607      	mov	r7, r0
 8013144:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013146:	2b00      	cmp	r3, #0
 8013148:	d05d      	beq.n	8013206 <_dtoa_r+0x976>
 801314a:	6879      	ldr	r1, [r7, #4]
 801314c:	4630      	mov	r0, r6
 801314e:	f000 f91d 	bl	801338c <_Balloc>
 8013152:	4680      	mov	r8, r0
 8013154:	b928      	cbnz	r0, 8013162 <_dtoa_r+0x8d2>
 8013156:	4b82      	ldr	r3, [pc, #520]	; (8013360 <_dtoa_r+0xad0>)
 8013158:	4602      	mov	r2, r0
 801315a:	f240 21ea 	movw	r1, #746	; 0x2ea
 801315e:	f7ff bbaf 	b.w	80128c0 <_dtoa_r+0x30>
 8013162:	693a      	ldr	r2, [r7, #16]
 8013164:	3202      	adds	r2, #2
 8013166:	0092      	lsls	r2, r2, #2
 8013168:	f107 010c 	add.w	r1, r7, #12
 801316c:	300c      	adds	r0, #12
 801316e:	f7fe fd73 	bl	8011c58 <memcpy>
 8013172:	2201      	movs	r2, #1
 8013174:	4641      	mov	r1, r8
 8013176:	4630      	mov	r0, r6
 8013178:	f000 fb1a 	bl	80137b0 <__lshift>
 801317c:	9b01      	ldr	r3, [sp, #4]
 801317e:	3301      	adds	r3, #1
 8013180:	9304      	str	r3, [sp, #16]
 8013182:	9b01      	ldr	r3, [sp, #4]
 8013184:	4453      	add	r3, sl
 8013186:	9308      	str	r3, [sp, #32]
 8013188:	9b02      	ldr	r3, [sp, #8]
 801318a:	f003 0301 	and.w	r3, r3, #1
 801318e:	46b9      	mov	r9, r7
 8013190:	9307      	str	r3, [sp, #28]
 8013192:	4607      	mov	r7, r0
 8013194:	9b04      	ldr	r3, [sp, #16]
 8013196:	4621      	mov	r1, r4
 8013198:	3b01      	subs	r3, #1
 801319a:	4628      	mov	r0, r5
 801319c:	9302      	str	r3, [sp, #8]
 801319e:	f7ff fae9 	bl	8012774 <quorem>
 80131a2:	4603      	mov	r3, r0
 80131a4:	3330      	adds	r3, #48	; 0x30
 80131a6:	9005      	str	r0, [sp, #20]
 80131a8:	4649      	mov	r1, r9
 80131aa:	4628      	mov	r0, r5
 80131ac:	9309      	str	r3, [sp, #36]	; 0x24
 80131ae:	f000 fb6f 	bl	8013890 <__mcmp>
 80131b2:	463a      	mov	r2, r7
 80131b4:	4682      	mov	sl, r0
 80131b6:	4621      	mov	r1, r4
 80131b8:	4630      	mov	r0, r6
 80131ba:	f000 fb85 	bl	80138c8 <__mdiff>
 80131be:	68c2      	ldr	r2, [r0, #12]
 80131c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80131c2:	4680      	mov	r8, r0
 80131c4:	bb0a      	cbnz	r2, 801320a <_dtoa_r+0x97a>
 80131c6:	4601      	mov	r1, r0
 80131c8:	4628      	mov	r0, r5
 80131ca:	f000 fb61 	bl	8013890 <__mcmp>
 80131ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80131d0:	4602      	mov	r2, r0
 80131d2:	4641      	mov	r1, r8
 80131d4:	4630      	mov	r0, r6
 80131d6:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 80131da:	f000 f917 	bl	801340c <_Bfree>
 80131de:	9b06      	ldr	r3, [sp, #24]
 80131e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80131e2:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80131e6:	ea43 0102 	orr.w	r1, r3, r2
 80131ea:	9b07      	ldr	r3, [sp, #28]
 80131ec:	430b      	orrs	r3, r1
 80131ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80131f0:	d10d      	bne.n	801320e <_dtoa_r+0x97e>
 80131f2:	2b39      	cmp	r3, #57	; 0x39
 80131f4:	d029      	beq.n	801324a <_dtoa_r+0x9ba>
 80131f6:	f1ba 0f00 	cmp.w	sl, #0
 80131fa:	dd01      	ble.n	8013200 <_dtoa_r+0x970>
 80131fc:	9b05      	ldr	r3, [sp, #20]
 80131fe:	3331      	adds	r3, #49	; 0x31
 8013200:	9a02      	ldr	r2, [sp, #8]
 8013202:	7013      	strb	r3, [r2, #0]
 8013204:	e774      	b.n	80130f0 <_dtoa_r+0x860>
 8013206:	4638      	mov	r0, r7
 8013208:	e7b8      	b.n	801317c <_dtoa_r+0x8ec>
 801320a:	2201      	movs	r2, #1
 801320c:	e7e1      	b.n	80131d2 <_dtoa_r+0x942>
 801320e:	f1ba 0f00 	cmp.w	sl, #0
 8013212:	db06      	blt.n	8013222 <_dtoa_r+0x992>
 8013214:	9906      	ldr	r1, [sp, #24]
 8013216:	ea41 0a0a 	orr.w	sl, r1, sl
 801321a:	9907      	ldr	r1, [sp, #28]
 801321c:	ea5a 0101 	orrs.w	r1, sl, r1
 8013220:	d120      	bne.n	8013264 <_dtoa_r+0x9d4>
 8013222:	2a00      	cmp	r2, #0
 8013224:	ddec      	ble.n	8013200 <_dtoa_r+0x970>
 8013226:	4629      	mov	r1, r5
 8013228:	2201      	movs	r2, #1
 801322a:	4630      	mov	r0, r6
 801322c:	9304      	str	r3, [sp, #16]
 801322e:	f000 fabf 	bl	80137b0 <__lshift>
 8013232:	4621      	mov	r1, r4
 8013234:	4605      	mov	r5, r0
 8013236:	f000 fb2b 	bl	8013890 <__mcmp>
 801323a:	2800      	cmp	r0, #0
 801323c:	9b04      	ldr	r3, [sp, #16]
 801323e:	dc02      	bgt.n	8013246 <_dtoa_r+0x9b6>
 8013240:	d1de      	bne.n	8013200 <_dtoa_r+0x970>
 8013242:	07da      	lsls	r2, r3, #31
 8013244:	d5dc      	bpl.n	8013200 <_dtoa_r+0x970>
 8013246:	2b39      	cmp	r3, #57	; 0x39
 8013248:	d1d8      	bne.n	80131fc <_dtoa_r+0x96c>
 801324a:	9a02      	ldr	r2, [sp, #8]
 801324c:	2339      	movs	r3, #57	; 0x39
 801324e:	7013      	strb	r3, [r2, #0]
 8013250:	4643      	mov	r3, r8
 8013252:	4698      	mov	r8, r3
 8013254:	3b01      	subs	r3, #1
 8013256:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801325a:	2a39      	cmp	r2, #57	; 0x39
 801325c:	d051      	beq.n	8013302 <_dtoa_r+0xa72>
 801325e:	3201      	adds	r2, #1
 8013260:	701a      	strb	r2, [r3, #0]
 8013262:	e745      	b.n	80130f0 <_dtoa_r+0x860>
 8013264:	2a00      	cmp	r2, #0
 8013266:	dd03      	ble.n	8013270 <_dtoa_r+0x9e0>
 8013268:	2b39      	cmp	r3, #57	; 0x39
 801326a:	d0ee      	beq.n	801324a <_dtoa_r+0x9ba>
 801326c:	3301      	adds	r3, #1
 801326e:	e7c7      	b.n	8013200 <_dtoa_r+0x970>
 8013270:	9a04      	ldr	r2, [sp, #16]
 8013272:	9908      	ldr	r1, [sp, #32]
 8013274:	f802 3c01 	strb.w	r3, [r2, #-1]
 8013278:	428a      	cmp	r2, r1
 801327a:	d02b      	beq.n	80132d4 <_dtoa_r+0xa44>
 801327c:	4629      	mov	r1, r5
 801327e:	2300      	movs	r3, #0
 8013280:	220a      	movs	r2, #10
 8013282:	4630      	mov	r0, r6
 8013284:	f000 f8e4 	bl	8013450 <__multadd>
 8013288:	45b9      	cmp	r9, r7
 801328a:	4605      	mov	r5, r0
 801328c:	f04f 0300 	mov.w	r3, #0
 8013290:	f04f 020a 	mov.w	r2, #10
 8013294:	4649      	mov	r1, r9
 8013296:	4630      	mov	r0, r6
 8013298:	d107      	bne.n	80132aa <_dtoa_r+0xa1a>
 801329a:	f000 f8d9 	bl	8013450 <__multadd>
 801329e:	4681      	mov	r9, r0
 80132a0:	4607      	mov	r7, r0
 80132a2:	9b04      	ldr	r3, [sp, #16]
 80132a4:	3301      	adds	r3, #1
 80132a6:	9304      	str	r3, [sp, #16]
 80132a8:	e774      	b.n	8013194 <_dtoa_r+0x904>
 80132aa:	f000 f8d1 	bl	8013450 <__multadd>
 80132ae:	4639      	mov	r1, r7
 80132b0:	4681      	mov	r9, r0
 80132b2:	2300      	movs	r3, #0
 80132b4:	220a      	movs	r2, #10
 80132b6:	4630      	mov	r0, r6
 80132b8:	f000 f8ca 	bl	8013450 <__multadd>
 80132bc:	4607      	mov	r7, r0
 80132be:	e7f0      	b.n	80132a2 <_dtoa_r+0xa12>
 80132c0:	f1ba 0f00 	cmp.w	sl, #0
 80132c4:	9a01      	ldr	r2, [sp, #4]
 80132c6:	bfcc      	ite	gt
 80132c8:	46d0      	movgt	r8, sl
 80132ca:	f04f 0801 	movle.w	r8, #1
 80132ce:	4490      	add	r8, r2
 80132d0:	f04f 0900 	mov.w	r9, #0
 80132d4:	4629      	mov	r1, r5
 80132d6:	2201      	movs	r2, #1
 80132d8:	4630      	mov	r0, r6
 80132da:	9302      	str	r3, [sp, #8]
 80132dc:	f000 fa68 	bl	80137b0 <__lshift>
 80132e0:	4621      	mov	r1, r4
 80132e2:	4605      	mov	r5, r0
 80132e4:	f000 fad4 	bl	8013890 <__mcmp>
 80132e8:	2800      	cmp	r0, #0
 80132ea:	dcb1      	bgt.n	8013250 <_dtoa_r+0x9c0>
 80132ec:	d102      	bne.n	80132f4 <_dtoa_r+0xa64>
 80132ee:	9b02      	ldr	r3, [sp, #8]
 80132f0:	07db      	lsls	r3, r3, #31
 80132f2:	d4ad      	bmi.n	8013250 <_dtoa_r+0x9c0>
 80132f4:	4643      	mov	r3, r8
 80132f6:	4698      	mov	r8, r3
 80132f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80132fc:	2a30      	cmp	r2, #48	; 0x30
 80132fe:	d0fa      	beq.n	80132f6 <_dtoa_r+0xa66>
 8013300:	e6f6      	b.n	80130f0 <_dtoa_r+0x860>
 8013302:	9a01      	ldr	r2, [sp, #4]
 8013304:	429a      	cmp	r2, r3
 8013306:	d1a4      	bne.n	8013252 <_dtoa_r+0x9c2>
 8013308:	f10b 0b01 	add.w	fp, fp, #1
 801330c:	2331      	movs	r3, #49	; 0x31
 801330e:	e778      	b.n	8013202 <_dtoa_r+0x972>
 8013310:	4b14      	ldr	r3, [pc, #80]	; (8013364 <_dtoa_r+0xad4>)
 8013312:	f7ff bb27 	b.w	8012964 <_dtoa_r+0xd4>
 8013316:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013318:	2b00      	cmp	r3, #0
 801331a:	f47f ab03 	bne.w	8012924 <_dtoa_r+0x94>
 801331e:	4b12      	ldr	r3, [pc, #72]	; (8013368 <_dtoa_r+0xad8>)
 8013320:	f7ff bb20 	b.w	8012964 <_dtoa_r+0xd4>
 8013324:	f1ba 0f00 	cmp.w	sl, #0
 8013328:	dc03      	bgt.n	8013332 <_dtoa_r+0xaa2>
 801332a:	9b06      	ldr	r3, [sp, #24]
 801332c:	2b02      	cmp	r3, #2
 801332e:	f73f aec7 	bgt.w	80130c0 <_dtoa_r+0x830>
 8013332:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013336:	4621      	mov	r1, r4
 8013338:	4628      	mov	r0, r5
 801333a:	f7ff fa1b 	bl	8012774 <quorem>
 801333e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8013342:	f808 3b01 	strb.w	r3, [r8], #1
 8013346:	9a01      	ldr	r2, [sp, #4]
 8013348:	eba8 0202 	sub.w	r2, r8, r2
 801334c:	4592      	cmp	sl, r2
 801334e:	ddb7      	ble.n	80132c0 <_dtoa_r+0xa30>
 8013350:	4629      	mov	r1, r5
 8013352:	2300      	movs	r3, #0
 8013354:	220a      	movs	r2, #10
 8013356:	4630      	mov	r0, r6
 8013358:	f000 f87a 	bl	8013450 <__multadd>
 801335c:	4605      	mov	r5, r0
 801335e:	e7ea      	b.n	8013336 <_dtoa_r+0xaa6>
 8013360:	08014cb7 	.word	0x08014cb7
 8013364:	08014c14 	.word	0x08014c14
 8013368:	08014c38 	.word	0x08014c38

0801336c <_localeconv_r>:
 801336c:	4800      	ldr	r0, [pc, #0]	; (8013370 <_localeconv_r+0x4>)
 801336e:	4770      	bx	lr
 8013370:	24000164 	.word	0x24000164

08013374 <__malloc_lock>:
 8013374:	4801      	ldr	r0, [pc, #4]	; (801337c <__malloc_lock+0x8>)
 8013376:	f000 bbd4 	b.w	8013b22 <__retarget_lock_acquire_recursive>
 801337a:	bf00      	nop
 801337c:	240009f8 	.word	0x240009f8

08013380 <__malloc_unlock>:
 8013380:	4801      	ldr	r0, [pc, #4]	; (8013388 <__malloc_unlock+0x8>)
 8013382:	f000 bbcf 	b.w	8013b24 <__retarget_lock_release_recursive>
 8013386:	bf00      	nop
 8013388:	240009f8 	.word	0x240009f8

0801338c <_Balloc>:
 801338c:	b570      	push	{r4, r5, r6, lr}
 801338e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013390:	4604      	mov	r4, r0
 8013392:	460d      	mov	r5, r1
 8013394:	b976      	cbnz	r6, 80133b4 <_Balloc+0x28>
 8013396:	2010      	movs	r0, #16
 8013398:	f7fe fc4e 	bl	8011c38 <malloc>
 801339c:	4602      	mov	r2, r0
 801339e:	6260      	str	r0, [r4, #36]	; 0x24
 80133a0:	b920      	cbnz	r0, 80133ac <_Balloc+0x20>
 80133a2:	4b18      	ldr	r3, [pc, #96]	; (8013404 <_Balloc+0x78>)
 80133a4:	4818      	ldr	r0, [pc, #96]	; (8013408 <_Balloc+0x7c>)
 80133a6:	2166      	movs	r1, #102	; 0x66
 80133a8:	f000 fb8a 	bl	8013ac0 <__assert_func>
 80133ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80133b0:	6006      	str	r6, [r0, #0]
 80133b2:	60c6      	str	r6, [r0, #12]
 80133b4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80133b6:	68f3      	ldr	r3, [r6, #12]
 80133b8:	b183      	cbz	r3, 80133dc <_Balloc+0x50>
 80133ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80133bc:	68db      	ldr	r3, [r3, #12]
 80133be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80133c2:	b9b8      	cbnz	r0, 80133f4 <_Balloc+0x68>
 80133c4:	2101      	movs	r1, #1
 80133c6:	fa01 f605 	lsl.w	r6, r1, r5
 80133ca:	1d72      	adds	r2, r6, #5
 80133cc:	0092      	lsls	r2, r2, #2
 80133ce:	4620      	mov	r0, r4
 80133d0:	f000 fb60 	bl	8013a94 <_calloc_r>
 80133d4:	b160      	cbz	r0, 80133f0 <_Balloc+0x64>
 80133d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80133da:	e00e      	b.n	80133fa <_Balloc+0x6e>
 80133dc:	2221      	movs	r2, #33	; 0x21
 80133de:	2104      	movs	r1, #4
 80133e0:	4620      	mov	r0, r4
 80133e2:	f000 fb57 	bl	8013a94 <_calloc_r>
 80133e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80133e8:	60f0      	str	r0, [r6, #12]
 80133ea:	68db      	ldr	r3, [r3, #12]
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	d1e4      	bne.n	80133ba <_Balloc+0x2e>
 80133f0:	2000      	movs	r0, #0
 80133f2:	bd70      	pop	{r4, r5, r6, pc}
 80133f4:	6802      	ldr	r2, [r0, #0]
 80133f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80133fa:	2300      	movs	r3, #0
 80133fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013400:	e7f7      	b.n	80133f2 <_Balloc+0x66>
 8013402:	bf00      	nop
 8013404:	08014c45 	.word	0x08014c45
 8013408:	08014cc8 	.word	0x08014cc8

0801340c <_Bfree>:
 801340c:	b570      	push	{r4, r5, r6, lr}
 801340e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013410:	4605      	mov	r5, r0
 8013412:	460c      	mov	r4, r1
 8013414:	b976      	cbnz	r6, 8013434 <_Bfree+0x28>
 8013416:	2010      	movs	r0, #16
 8013418:	f7fe fc0e 	bl	8011c38 <malloc>
 801341c:	4602      	mov	r2, r0
 801341e:	6268      	str	r0, [r5, #36]	; 0x24
 8013420:	b920      	cbnz	r0, 801342c <_Bfree+0x20>
 8013422:	4b09      	ldr	r3, [pc, #36]	; (8013448 <_Bfree+0x3c>)
 8013424:	4809      	ldr	r0, [pc, #36]	; (801344c <_Bfree+0x40>)
 8013426:	218a      	movs	r1, #138	; 0x8a
 8013428:	f000 fb4a 	bl	8013ac0 <__assert_func>
 801342c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013430:	6006      	str	r6, [r0, #0]
 8013432:	60c6      	str	r6, [r0, #12]
 8013434:	b13c      	cbz	r4, 8013446 <_Bfree+0x3a>
 8013436:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013438:	6862      	ldr	r2, [r4, #4]
 801343a:	68db      	ldr	r3, [r3, #12]
 801343c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013440:	6021      	str	r1, [r4, #0]
 8013442:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013446:	bd70      	pop	{r4, r5, r6, pc}
 8013448:	08014c45 	.word	0x08014c45
 801344c:	08014cc8 	.word	0x08014cc8

08013450 <__multadd>:
 8013450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013454:	690d      	ldr	r5, [r1, #16]
 8013456:	4607      	mov	r7, r0
 8013458:	460c      	mov	r4, r1
 801345a:	461e      	mov	r6, r3
 801345c:	f101 0c14 	add.w	ip, r1, #20
 8013460:	2000      	movs	r0, #0
 8013462:	f8dc 3000 	ldr.w	r3, [ip]
 8013466:	b299      	uxth	r1, r3
 8013468:	fb02 6101 	mla	r1, r2, r1, r6
 801346c:	0c1e      	lsrs	r6, r3, #16
 801346e:	0c0b      	lsrs	r3, r1, #16
 8013470:	fb02 3306 	mla	r3, r2, r6, r3
 8013474:	b289      	uxth	r1, r1
 8013476:	3001      	adds	r0, #1
 8013478:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801347c:	4285      	cmp	r5, r0
 801347e:	f84c 1b04 	str.w	r1, [ip], #4
 8013482:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013486:	dcec      	bgt.n	8013462 <__multadd+0x12>
 8013488:	b30e      	cbz	r6, 80134ce <__multadd+0x7e>
 801348a:	68a3      	ldr	r3, [r4, #8]
 801348c:	42ab      	cmp	r3, r5
 801348e:	dc19      	bgt.n	80134c4 <__multadd+0x74>
 8013490:	6861      	ldr	r1, [r4, #4]
 8013492:	4638      	mov	r0, r7
 8013494:	3101      	adds	r1, #1
 8013496:	f7ff ff79 	bl	801338c <_Balloc>
 801349a:	4680      	mov	r8, r0
 801349c:	b928      	cbnz	r0, 80134aa <__multadd+0x5a>
 801349e:	4602      	mov	r2, r0
 80134a0:	4b0c      	ldr	r3, [pc, #48]	; (80134d4 <__multadd+0x84>)
 80134a2:	480d      	ldr	r0, [pc, #52]	; (80134d8 <__multadd+0x88>)
 80134a4:	21b5      	movs	r1, #181	; 0xb5
 80134a6:	f000 fb0b 	bl	8013ac0 <__assert_func>
 80134aa:	6922      	ldr	r2, [r4, #16]
 80134ac:	3202      	adds	r2, #2
 80134ae:	f104 010c 	add.w	r1, r4, #12
 80134b2:	0092      	lsls	r2, r2, #2
 80134b4:	300c      	adds	r0, #12
 80134b6:	f7fe fbcf 	bl	8011c58 <memcpy>
 80134ba:	4621      	mov	r1, r4
 80134bc:	4638      	mov	r0, r7
 80134be:	f7ff ffa5 	bl	801340c <_Bfree>
 80134c2:	4644      	mov	r4, r8
 80134c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80134c8:	3501      	adds	r5, #1
 80134ca:	615e      	str	r6, [r3, #20]
 80134cc:	6125      	str	r5, [r4, #16]
 80134ce:	4620      	mov	r0, r4
 80134d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134d4:	08014cb7 	.word	0x08014cb7
 80134d8:	08014cc8 	.word	0x08014cc8

080134dc <__hi0bits>:
 80134dc:	0c03      	lsrs	r3, r0, #16
 80134de:	041b      	lsls	r3, r3, #16
 80134e0:	b9d3      	cbnz	r3, 8013518 <__hi0bits+0x3c>
 80134e2:	0400      	lsls	r0, r0, #16
 80134e4:	2310      	movs	r3, #16
 80134e6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80134ea:	bf04      	itt	eq
 80134ec:	0200      	lsleq	r0, r0, #8
 80134ee:	3308      	addeq	r3, #8
 80134f0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80134f4:	bf04      	itt	eq
 80134f6:	0100      	lsleq	r0, r0, #4
 80134f8:	3304      	addeq	r3, #4
 80134fa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80134fe:	bf04      	itt	eq
 8013500:	0080      	lsleq	r0, r0, #2
 8013502:	3302      	addeq	r3, #2
 8013504:	2800      	cmp	r0, #0
 8013506:	db05      	blt.n	8013514 <__hi0bits+0x38>
 8013508:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801350c:	f103 0301 	add.w	r3, r3, #1
 8013510:	bf08      	it	eq
 8013512:	2320      	moveq	r3, #32
 8013514:	4618      	mov	r0, r3
 8013516:	4770      	bx	lr
 8013518:	2300      	movs	r3, #0
 801351a:	e7e4      	b.n	80134e6 <__hi0bits+0xa>

0801351c <__lo0bits>:
 801351c:	6803      	ldr	r3, [r0, #0]
 801351e:	f013 0207 	ands.w	r2, r3, #7
 8013522:	4601      	mov	r1, r0
 8013524:	d00b      	beq.n	801353e <__lo0bits+0x22>
 8013526:	07da      	lsls	r2, r3, #31
 8013528:	d423      	bmi.n	8013572 <__lo0bits+0x56>
 801352a:	0798      	lsls	r0, r3, #30
 801352c:	bf49      	itett	mi
 801352e:	085b      	lsrmi	r3, r3, #1
 8013530:	089b      	lsrpl	r3, r3, #2
 8013532:	2001      	movmi	r0, #1
 8013534:	600b      	strmi	r3, [r1, #0]
 8013536:	bf5c      	itt	pl
 8013538:	600b      	strpl	r3, [r1, #0]
 801353a:	2002      	movpl	r0, #2
 801353c:	4770      	bx	lr
 801353e:	b298      	uxth	r0, r3
 8013540:	b9a8      	cbnz	r0, 801356e <__lo0bits+0x52>
 8013542:	0c1b      	lsrs	r3, r3, #16
 8013544:	2010      	movs	r0, #16
 8013546:	b2da      	uxtb	r2, r3
 8013548:	b90a      	cbnz	r2, 801354e <__lo0bits+0x32>
 801354a:	3008      	adds	r0, #8
 801354c:	0a1b      	lsrs	r3, r3, #8
 801354e:	071a      	lsls	r2, r3, #28
 8013550:	bf04      	itt	eq
 8013552:	091b      	lsreq	r3, r3, #4
 8013554:	3004      	addeq	r0, #4
 8013556:	079a      	lsls	r2, r3, #30
 8013558:	bf04      	itt	eq
 801355a:	089b      	lsreq	r3, r3, #2
 801355c:	3002      	addeq	r0, #2
 801355e:	07da      	lsls	r2, r3, #31
 8013560:	d403      	bmi.n	801356a <__lo0bits+0x4e>
 8013562:	085b      	lsrs	r3, r3, #1
 8013564:	f100 0001 	add.w	r0, r0, #1
 8013568:	d005      	beq.n	8013576 <__lo0bits+0x5a>
 801356a:	600b      	str	r3, [r1, #0]
 801356c:	4770      	bx	lr
 801356e:	4610      	mov	r0, r2
 8013570:	e7e9      	b.n	8013546 <__lo0bits+0x2a>
 8013572:	2000      	movs	r0, #0
 8013574:	4770      	bx	lr
 8013576:	2020      	movs	r0, #32
 8013578:	4770      	bx	lr
	...

0801357c <__i2b>:
 801357c:	b510      	push	{r4, lr}
 801357e:	460c      	mov	r4, r1
 8013580:	2101      	movs	r1, #1
 8013582:	f7ff ff03 	bl	801338c <_Balloc>
 8013586:	4602      	mov	r2, r0
 8013588:	b928      	cbnz	r0, 8013596 <__i2b+0x1a>
 801358a:	4b05      	ldr	r3, [pc, #20]	; (80135a0 <__i2b+0x24>)
 801358c:	4805      	ldr	r0, [pc, #20]	; (80135a4 <__i2b+0x28>)
 801358e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8013592:	f000 fa95 	bl	8013ac0 <__assert_func>
 8013596:	2301      	movs	r3, #1
 8013598:	6144      	str	r4, [r0, #20]
 801359a:	6103      	str	r3, [r0, #16]
 801359c:	bd10      	pop	{r4, pc}
 801359e:	bf00      	nop
 80135a0:	08014cb7 	.word	0x08014cb7
 80135a4:	08014cc8 	.word	0x08014cc8

080135a8 <__multiply>:
 80135a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135ac:	4691      	mov	r9, r2
 80135ae:	690a      	ldr	r2, [r1, #16]
 80135b0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80135b4:	429a      	cmp	r2, r3
 80135b6:	bfb8      	it	lt
 80135b8:	460b      	movlt	r3, r1
 80135ba:	460c      	mov	r4, r1
 80135bc:	bfbc      	itt	lt
 80135be:	464c      	movlt	r4, r9
 80135c0:	4699      	movlt	r9, r3
 80135c2:	6927      	ldr	r7, [r4, #16]
 80135c4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80135c8:	68a3      	ldr	r3, [r4, #8]
 80135ca:	6861      	ldr	r1, [r4, #4]
 80135cc:	eb07 060a 	add.w	r6, r7, sl
 80135d0:	42b3      	cmp	r3, r6
 80135d2:	b085      	sub	sp, #20
 80135d4:	bfb8      	it	lt
 80135d6:	3101      	addlt	r1, #1
 80135d8:	f7ff fed8 	bl	801338c <_Balloc>
 80135dc:	b930      	cbnz	r0, 80135ec <__multiply+0x44>
 80135de:	4602      	mov	r2, r0
 80135e0:	4b44      	ldr	r3, [pc, #272]	; (80136f4 <__multiply+0x14c>)
 80135e2:	4845      	ldr	r0, [pc, #276]	; (80136f8 <__multiply+0x150>)
 80135e4:	f240 115d 	movw	r1, #349	; 0x15d
 80135e8:	f000 fa6a 	bl	8013ac0 <__assert_func>
 80135ec:	f100 0514 	add.w	r5, r0, #20
 80135f0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80135f4:	462b      	mov	r3, r5
 80135f6:	2200      	movs	r2, #0
 80135f8:	4543      	cmp	r3, r8
 80135fa:	d321      	bcc.n	8013640 <__multiply+0x98>
 80135fc:	f104 0314 	add.w	r3, r4, #20
 8013600:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8013604:	f109 0314 	add.w	r3, r9, #20
 8013608:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801360c:	9202      	str	r2, [sp, #8]
 801360e:	1b3a      	subs	r2, r7, r4
 8013610:	3a15      	subs	r2, #21
 8013612:	f022 0203 	bic.w	r2, r2, #3
 8013616:	3204      	adds	r2, #4
 8013618:	f104 0115 	add.w	r1, r4, #21
 801361c:	428f      	cmp	r7, r1
 801361e:	bf38      	it	cc
 8013620:	2204      	movcc	r2, #4
 8013622:	9201      	str	r2, [sp, #4]
 8013624:	9a02      	ldr	r2, [sp, #8]
 8013626:	9303      	str	r3, [sp, #12]
 8013628:	429a      	cmp	r2, r3
 801362a:	d80c      	bhi.n	8013646 <__multiply+0x9e>
 801362c:	2e00      	cmp	r6, #0
 801362e:	dd03      	ble.n	8013638 <__multiply+0x90>
 8013630:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013634:	2b00      	cmp	r3, #0
 8013636:	d05a      	beq.n	80136ee <__multiply+0x146>
 8013638:	6106      	str	r6, [r0, #16]
 801363a:	b005      	add	sp, #20
 801363c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013640:	f843 2b04 	str.w	r2, [r3], #4
 8013644:	e7d8      	b.n	80135f8 <__multiply+0x50>
 8013646:	f8b3 a000 	ldrh.w	sl, [r3]
 801364a:	f1ba 0f00 	cmp.w	sl, #0
 801364e:	d024      	beq.n	801369a <__multiply+0xf2>
 8013650:	f104 0e14 	add.w	lr, r4, #20
 8013654:	46a9      	mov	r9, r5
 8013656:	f04f 0c00 	mov.w	ip, #0
 801365a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801365e:	f8d9 1000 	ldr.w	r1, [r9]
 8013662:	fa1f fb82 	uxth.w	fp, r2
 8013666:	b289      	uxth	r1, r1
 8013668:	fb0a 110b 	mla	r1, sl, fp, r1
 801366c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8013670:	f8d9 2000 	ldr.w	r2, [r9]
 8013674:	4461      	add	r1, ip
 8013676:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801367a:	fb0a c20b 	mla	r2, sl, fp, ip
 801367e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013682:	b289      	uxth	r1, r1
 8013684:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013688:	4577      	cmp	r7, lr
 801368a:	f849 1b04 	str.w	r1, [r9], #4
 801368e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013692:	d8e2      	bhi.n	801365a <__multiply+0xb2>
 8013694:	9a01      	ldr	r2, [sp, #4]
 8013696:	f845 c002 	str.w	ip, [r5, r2]
 801369a:	9a03      	ldr	r2, [sp, #12]
 801369c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80136a0:	3304      	adds	r3, #4
 80136a2:	f1b9 0f00 	cmp.w	r9, #0
 80136a6:	d020      	beq.n	80136ea <__multiply+0x142>
 80136a8:	6829      	ldr	r1, [r5, #0]
 80136aa:	f104 0c14 	add.w	ip, r4, #20
 80136ae:	46ae      	mov	lr, r5
 80136b0:	f04f 0a00 	mov.w	sl, #0
 80136b4:	f8bc b000 	ldrh.w	fp, [ip]
 80136b8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80136bc:	fb09 220b 	mla	r2, r9, fp, r2
 80136c0:	4492      	add	sl, r2
 80136c2:	b289      	uxth	r1, r1
 80136c4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80136c8:	f84e 1b04 	str.w	r1, [lr], #4
 80136cc:	f85c 2b04 	ldr.w	r2, [ip], #4
 80136d0:	f8be 1000 	ldrh.w	r1, [lr]
 80136d4:	0c12      	lsrs	r2, r2, #16
 80136d6:	fb09 1102 	mla	r1, r9, r2, r1
 80136da:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80136de:	4567      	cmp	r7, ip
 80136e0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80136e4:	d8e6      	bhi.n	80136b4 <__multiply+0x10c>
 80136e6:	9a01      	ldr	r2, [sp, #4]
 80136e8:	50a9      	str	r1, [r5, r2]
 80136ea:	3504      	adds	r5, #4
 80136ec:	e79a      	b.n	8013624 <__multiply+0x7c>
 80136ee:	3e01      	subs	r6, #1
 80136f0:	e79c      	b.n	801362c <__multiply+0x84>
 80136f2:	bf00      	nop
 80136f4:	08014cb7 	.word	0x08014cb7
 80136f8:	08014cc8 	.word	0x08014cc8

080136fc <__pow5mult>:
 80136fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013700:	4615      	mov	r5, r2
 8013702:	f012 0203 	ands.w	r2, r2, #3
 8013706:	4606      	mov	r6, r0
 8013708:	460f      	mov	r7, r1
 801370a:	d007      	beq.n	801371c <__pow5mult+0x20>
 801370c:	4c25      	ldr	r4, [pc, #148]	; (80137a4 <__pow5mult+0xa8>)
 801370e:	3a01      	subs	r2, #1
 8013710:	2300      	movs	r3, #0
 8013712:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013716:	f7ff fe9b 	bl	8013450 <__multadd>
 801371a:	4607      	mov	r7, r0
 801371c:	10ad      	asrs	r5, r5, #2
 801371e:	d03d      	beq.n	801379c <__pow5mult+0xa0>
 8013720:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013722:	b97c      	cbnz	r4, 8013744 <__pow5mult+0x48>
 8013724:	2010      	movs	r0, #16
 8013726:	f7fe fa87 	bl	8011c38 <malloc>
 801372a:	4602      	mov	r2, r0
 801372c:	6270      	str	r0, [r6, #36]	; 0x24
 801372e:	b928      	cbnz	r0, 801373c <__pow5mult+0x40>
 8013730:	4b1d      	ldr	r3, [pc, #116]	; (80137a8 <__pow5mult+0xac>)
 8013732:	481e      	ldr	r0, [pc, #120]	; (80137ac <__pow5mult+0xb0>)
 8013734:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8013738:	f000 f9c2 	bl	8013ac0 <__assert_func>
 801373c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013740:	6004      	str	r4, [r0, #0]
 8013742:	60c4      	str	r4, [r0, #12]
 8013744:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013748:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801374c:	b94c      	cbnz	r4, 8013762 <__pow5mult+0x66>
 801374e:	f240 2171 	movw	r1, #625	; 0x271
 8013752:	4630      	mov	r0, r6
 8013754:	f7ff ff12 	bl	801357c <__i2b>
 8013758:	2300      	movs	r3, #0
 801375a:	f8c8 0008 	str.w	r0, [r8, #8]
 801375e:	4604      	mov	r4, r0
 8013760:	6003      	str	r3, [r0, #0]
 8013762:	f04f 0900 	mov.w	r9, #0
 8013766:	07eb      	lsls	r3, r5, #31
 8013768:	d50a      	bpl.n	8013780 <__pow5mult+0x84>
 801376a:	4639      	mov	r1, r7
 801376c:	4622      	mov	r2, r4
 801376e:	4630      	mov	r0, r6
 8013770:	f7ff ff1a 	bl	80135a8 <__multiply>
 8013774:	4639      	mov	r1, r7
 8013776:	4680      	mov	r8, r0
 8013778:	4630      	mov	r0, r6
 801377a:	f7ff fe47 	bl	801340c <_Bfree>
 801377e:	4647      	mov	r7, r8
 8013780:	106d      	asrs	r5, r5, #1
 8013782:	d00b      	beq.n	801379c <__pow5mult+0xa0>
 8013784:	6820      	ldr	r0, [r4, #0]
 8013786:	b938      	cbnz	r0, 8013798 <__pow5mult+0x9c>
 8013788:	4622      	mov	r2, r4
 801378a:	4621      	mov	r1, r4
 801378c:	4630      	mov	r0, r6
 801378e:	f7ff ff0b 	bl	80135a8 <__multiply>
 8013792:	6020      	str	r0, [r4, #0]
 8013794:	f8c0 9000 	str.w	r9, [r0]
 8013798:	4604      	mov	r4, r0
 801379a:	e7e4      	b.n	8013766 <__pow5mult+0x6a>
 801379c:	4638      	mov	r0, r7
 801379e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80137a2:	bf00      	nop
 80137a4:	08014e18 	.word	0x08014e18
 80137a8:	08014c45 	.word	0x08014c45
 80137ac:	08014cc8 	.word	0x08014cc8

080137b0 <__lshift>:
 80137b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80137b4:	460c      	mov	r4, r1
 80137b6:	6849      	ldr	r1, [r1, #4]
 80137b8:	6923      	ldr	r3, [r4, #16]
 80137ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80137be:	68a3      	ldr	r3, [r4, #8]
 80137c0:	4607      	mov	r7, r0
 80137c2:	4691      	mov	r9, r2
 80137c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80137c8:	f108 0601 	add.w	r6, r8, #1
 80137cc:	42b3      	cmp	r3, r6
 80137ce:	db0b      	blt.n	80137e8 <__lshift+0x38>
 80137d0:	4638      	mov	r0, r7
 80137d2:	f7ff fddb 	bl	801338c <_Balloc>
 80137d6:	4605      	mov	r5, r0
 80137d8:	b948      	cbnz	r0, 80137ee <__lshift+0x3e>
 80137da:	4602      	mov	r2, r0
 80137dc:	4b2a      	ldr	r3, [pc, #168]	; (8013888 <__lshift+0xd8>)
 80137de:	482b      	ldr	r0, [pc, #172]	; (801388c <__lshift+0xdc>)
 80137e0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80137e4:	f000 f96c 	bl	8013ac0 <__assert_func>
 80137e8:	3101      	adds	r1, #1
 80137ea:	005b      	lsls	r3, r3, #1
 80137ec:	e7ee      	b.n	80137cc <__lshift+0x1c>
 80137ee:	2300      	movs	r3, #0
 80137f0:	f100 0114 	add.w	r1, r0, #20
 80137f4:	f100 0210 	add.w	r2, r0, #16
 80137f8:	4618      	mov	r0, r3
 80137fa:	4553      	cmp	r3, sl
 80137fc:	db37      	blt.n	801386e <__lshift+0xbe>
 80137fe:	6920      	ldr	r0, [r4, #16]
 8013800:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013804:	f104 0314 	add.w	r3, r4, #20
 8013808:	f019 091f 	ands.w	r9, r9, #31
 801380c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013810:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8013814:	d02f      	beq.n	8013876 <__lshift+0xc6>
 8013816:	f1c9 0e20 	rsb	lr, r9, #32
 801381a:	468a      	mov	sl, r1
 801381c:	f04f 0c00 	mov.w	ip, #0
 8013820:	681a      	ldr	r2, [r3, #0]
 8013822:	fa02 f209 	lsl.w	r2, r2, r9
 8013826:	ea42 020c 	orr.w	r2, r2, ip
 801382a:	f84a 2b04 	str.w	r2, [sl], #4
 801382e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013832:	4298      	cmp	r0, r3
 8013834:	fa22 fc0e 	lsr.w	ip, r2, lr
 8013838:	d8f2      	bhi.n	8013820 <__lshift+0x70>
 801383a:	1b03      	subs	r3, r0, r4
 801383c:	3b15      	subs	r3, #21
 801383e:	f023 0303 	bic.w	r3, r3, #3
 8013842:	3304      	adds	r3, #4
 8013844:	f104 0215 	add.w	r2, r4, #21
 8013848:	4290      	cmp	r0, r2
 801384a:	bf38      	it	cc
 801384c:	2304      	movcc	r3, #4
 801384e:	f841 c003 	str.w	ip, [r1, r3]
 8013852:	f1bc 0f00 	cmp.w	ip, #0
 8013856:	d001      	beq.n	801385c <__lshift+0xac>
 8013858:	f108 0602 	add.w	r6, r8, #2
 801385c:	3e01      	subs	r6, #1
 801385e:	4638      	mov	r0, r7
 8013860:	612e      	str	r6, [r5, #16]
 8013862:	4621      	mov	r1, r4
 8013864:	f7ff fdd2 	bl	801340c <_Bfree>
 8013868:	4628      	mov	r0, r5
 801386a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801386e:	f842 0f04 	str.w	r0, [r2, #4]!
 8013872:	3301      	adds	r3, #1
 8013874:	e7c1      	b.n	80137fa <__lshift+0x4a>
 8013876:	3904      	subs	r1, #4
 8013878:	f853 2b04 	ldr.w	r2, [r3], #4
 801387c:	f841 2f04 	str.w	r2, [r1, #4]!
 8013880:	4298      	cmp	r0, r3
 8013882:	d8f9      	bhi.n	8013878 <__lshift+0xc8>
 8013884:	e7ea      	b.n	801385c <__lshift+0xac>
 8013886:	bf00      	nop
 8013888:	08014cb7 	.word	0x08014cb7
 801388c:	08014cc8 	.word	0x08014cc8

08013890 <__mcmp>:
 8013890:	b530      	push	{r4, r5, lr}
 8013892:	6902      	ldr	r2, [r0, #16]
 8013894:	690c      	ldr	r4, [r1, #16]
 8013896:	1b12      	subs	r2, r2, r4
 8013898:	d10e      	bne.n	80138b8 <__mcmp+0x28>
 801389a:	f100 0314 	add.w	r3, r0, #20
 801389e:	3114      	adds	r1, #20
 80138a0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80138a4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80138a8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80138ac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80138b0:	42a5      	cmp	r5, r4
 80138b2:	d003      	beq.n	80138bc <__mcmp+0x2c>
 80138b4:	d305      	bcc.n	80138c2 <__mcmp+0x32>
 80138b6:	2201      	movs	r2, #1
 80138b8:	4610      	mov	r0, r2
 80138ba:	bd30      	pop	{r4, r5, pc}
 80138bc:	4283      	cmp	r3, r0
 80138be:	d3f3      	bcc.n	80138a8 <__mcmp+0x18>
 80138c0:	e7fa      	b.n	80138b8 <__mcmp+0x28>
 80138c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80138c6:	e7f7      	b.n	80138b8 <__mcmp+0x28>

080138c8 <__mdiff>:
 80138c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138cc:	460c      	mov	r4, r1
 80138ce:	4606      	mov	r6, r0
 80138d0:	4611      	mov	r1, r2
 80138d2:	4620      	mov	r0, r4
 80138d4:	4690      	mov	r8, r2
 80138d6:	f7ff ffdb 	bl	8013890 <__mcmp>
 80138da:	1e05      	subs	r5, r0, #0
 80138dc:	d110      	bne.n	8013900 <__mdiff+0x38>
 80138de:	4629      	mov	r1, r5
 80138e0:	4630      	mov	r0, r6
 80138e2:	f7ff fd53 	bl	801338c <_Balloc>
 80138e6:	b930      	cbnz	r0, 80138f6 <__mdiff+0x2e>
 80138e8:	4b3a      	ldr	r3, [pc, #232]	; (80139d4 <__mdiff+0x10c>)
 80138ea:	4602      	mov	r2, r0
 80138ec:	f240 2132 	movw	r1, #562	; 0x232
 80138f0:	4839      	ldr	r0, [pc, #228]	; (80139d8 <__mdiff+0x110>)
 80138f2:	f000 f8e5 	bl	8013ac0 <__assert_func>
 80138f6:	2301      	movs	r3, #1
 80138f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80138fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013900:	bfa4      	itt	ge
 8013902:	4643      	movge	r3, r8
 8013904:	46a0      	movge	r8, r4
 8013906:	4630      	mov	r0, r6
 8013908:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801390c:	bfa6      	itte	ge
 801390e:	461c      	movge	r4, r3
 8013910:	2500      	movge	r5, #0
 8013912:	2501      	movlt	r5, #1
 8013914:	f7ff fd3a 	bl	801338c <_Balloc>
 8013918:	b920      	cbnz	r0, 8013924 <__mdiff+0x5c>
 801391a:	4b2e      	ldr	r3, [pc, #184]	; (80139d4 <__mdiff+0x10c>)
 801391c:	4602      	mov	r2, r0
 801391e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8013922:	e7e5      	b.n	80138f0 <__mdiff+0x28>
 8013924:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013928:	6926      	ldr	r6, [r4, #16]
 801392a:	60c5      	str	r5, [r0, #12]
 801392c:	f104 0914 	add.w	r9, r4, #20
 8013930:	f108 0514 	add.w	r5, r8, #20
 8013934:	f100 0e14 	add.w	lr, r0, #20
 8013938:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801393c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8013940:	f108 0210 	add.w	r2, r8, #16
 8013944:	46f2      	mov	sl, lr
 8013946:	2100      	movs	r1, #0
 8013948:	f859 3b04 	ldr.w	r3, [r9], #4
 801394c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013950:	fa1f f883 	uxth.w	r8, r3
 8013954:	fa11 f18b 	uxtah	r1, r1, fp
 8013958:	0c1b      	lsrs	r3, r3, #16
 801395a:	eba1 0808 	sub.w	r8, r1, r8
 801395e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013962:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013966:	fa1f f888 	uxth.w	r8, r8
 801396a:	1419      	asrs	r1, r3, #16
 801396c:	454e      	cmp	r6, r9
 801396e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013972:	f84a 3b04 	str.w	r3, [sl], #4
 8013976:	d8e7      	bhi.n	8013948 <__mdiff+0x80>
 8013978:	1b33      	subs	r3, r6, r4
 801397a:	3b15      	subs	r3, #21
 801397c:	f023 0303 	bic.w	r3, r3, #3
 8013980:	3304      	adds	r3, #4
 8013982:	3415      	adds	r4, #21
 8013984:	42a6      	cmp	r6, r4
 8013986:	bf38      	it	cc
 8013988:	2304      	movcc	r3, #4
 801398a:	441d      	add	r5, r3
 801398c:	4473      	add	r3, lr
 801398e:	469e      	mov	lr, r3
 8013990:	462e      	mov	r6, r5
 8013992:	4566      	cmp	r6, ip
 8013994:	d30e      	bcc.n	80139b4 <__mdiff+0xec>
 8013996:	f10c 0203 	add.w	r2, ip, #3
 801399a:	1b52      	subs	r2, r2, r5
 801399c:	f022 0203 	bic.w	r2, r2, #3
 80139a0:	3d03      	subs	r5, #3
 80139a2:	45ac      	cmp	ip, r5
 80139a4:	bf38      	it	cc
 80139a6:	2200      	movcc	r2, #0
 80139a8:	441a      	add	r2, r3
 80139aa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80139ae:	b17b      	cbz	r3, 80139d0 <__mdiff+0x108>
 80139b0:	6107      	str	r7, [r0, #16]
 80139b2:	e7a3      	b.n	80138fc <__mdiff+0x34>
 80139b4:	f856 8b04 	ldr.w	r8, [r6], #4
 80139b8:	fa11 f288 	uxtah	r2, r1, r8
 80139bc:	1414      	asrs	r4, r2, #16
 80139be:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80139c2:	b292      	uxth	r2, r2
 80139c4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80139c8:	f84e 2b04 	str.w	r2, [lr], #4
 80139cc:	1421      	asrs	r1, r4, #16
 80139ce:	e7e0      	b.n	8013992 <__mdiff+0xca>
 80139d0:	3f01      	subs	r7, #1
 80139d2:	e7ea      	b.n	80139aa <__mdiff+0xe2>
 80139d4:	08014cb7 	.word	0x08014cb7
 80139d8:	08014cc8 	.word	0x08014cc8

080139dc <__d2b>:
 80139dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80139e0:	4689      	mov	r9, r1
 80139e2:	2101      	movs	r1, #1
 80139e4:	ec57 6b10 	vmov	r6, r7, d0
 80139e8:	4690      	mov	r8, r2
 80139ea:	f7ff fccf 	bl	801338c <_Balloc>
 80139ee:	4604      	mov	r4, r0
 80139f0:	b930      	cbnz	r0, 8013a00 <__d2b+0x24>
 80139f2:	4602      	mov	r2, r0
 80139f4:	4b25      	ldr	r3, [pc, #148]	; (8013a8c <__d2b+0xb0>)
 80139f6:	4826      	ldr	r0, [pc, #152]	; (8013a90 <__d2b+0xb4>)
 80139f8:	f240 310a 	movw	r1, #778	; 0x30a
 80139fc:	f000 f860 	bl	8013ac0 <__assert_func>
 8013a00:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8013a04:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013a08:	bb35      	cbnz	r5, 8013a58 <__d2b+0x7c>
 8013a0a:	2e00      	cmp	r6, #0
 8013a0c:	9301      	str	r3, [sp, #4]
 8013a0e:	d028      	beq.n	8013a62 <__d2b+0x86>
 8013a10:	4668      	mov	r0, sp
 8013a12:	9600      	str	r6, [sp, #0]
 8013a14:	f7ff fd82 	bl	801351c <__lo0bits>
 8013a18:	9900      	ldr	r1, [sp, #0]
 8013a1a:	b300      	cbz	r0, 8013a5e <__d2b+0x82>
 8013a1c:	9a01      	ldr	r2, [sp, #4]
 8013a1e:	f1c0 0320 	rsb	r3, r0, #32
 8013a22:	fa02 f303 	lsl.w	r3, r2, r3
 8013a26:	430b      	orrs	r3, r1
 8013a28:	40c2      	lsrs	r2, r0
 8013a2a:	6163      	str	r3, [r4, #20]
 8013a2c:	9201      	str	r2, [sp, #4]
 8013a2e:	9b01      	ldr	r3, [sp, #4]
 8013a30:	61a3      	str	r3, [r4, #24]
 8013a32:	2b00      	cmp	r3, #0
 8013a34:	bf14      	ite	ne
 8013a36:	2202      	movne	r2, #2
 8013a38:	2201      	moveq	r2, #1
 8013a3a:	6122      	str	r2, [r4, #16]
 8013a3c:	b1d5      	cbz	r5, 8013a74 <__d2b+0x98>
 8013a3e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013a42:	4405      	add	r5, r0
 8013a44:	f8c9 5000 	str.w	r5, [r9]
 8013a48:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013a4c:	f8c8 0000 	str.w	r0, [r8]
 8013a50:	4620      	mov	r0, r4
 8013a52:	b003      	add	sp, #12
 8013a54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013a58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013a5c:	e7d5      	b.n	8013a0a <__d2b+0x2e>
 8013a5e:	6161      	str	r1, [r4, #20]
 8013a60:	e7e5      	b.n	8013a2e <__d2b+0x52>
 8013a62:	a801      	add	r0, sp, #4
 8013a64:	f7ff fd5a 	bl	801351c <__lo0bits>
 8013a68:	9b01      	ldr	r3, [sp, #4]
 8013a6a:	6163      	str	r3, [r4, #20]
 8013a6c:	2201      	movs	r2, #1
 8013a6e:	6122      	str	r2, [r4, #16]
 8013a70:	3020      	adds	r0, #32
 8013a72:	e7e3      	b.n	8013a3c <__d2b+0x60>
 8013a74:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013a78:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013a7c:	f8c9 0000 	str.w	r0, [r9]
 8013a80:	6918      	ldr	r0, [r3, #16]
 8013a82:	f7ff fd2b 	bl	80134dc <__hi0bits>
 8013a86:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013a8a:	e7df      	b.n	8013a4c <__d2b+0x70>
 8013a8c:	08014cb7 	.word	0x08014cb7
 8013a90:	08014cc8 	.word	0x08014cc8

08013a94 <_calloc_r>:
 8013a94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013a96:	fba1 2402 	umull	r2, r4, r1, r2
 8013a9a:	b94c      	cbnz	r4, 8013ab0 <_calloc_r+0x1c>
 8013a9c:	4611      	mov	r1, r2
 8013a9e:	9201      	str	r2, [sp, #4]
 8013aa0:	f7fe f95c 	bl	8011d5c <_malloc_r>
 8013aa4:	9a01      	ldr	r2, [sp, #4]
 8013aa6:	4605      	mov	r5, r0
 8013aa8:	b930      	cbnz	r0, 8013ab8 <_calloc_r+0x24>
 8013aaa:	4628      	mov	r0, r5
 8013aac:	b003      	add	sp, #12
 8013aae:	bd30      	pop	{r4, r5, pc}
 8013ab0:	220c      	movs	r2, #12
 8013ab2:	6002      	str	r2, [r0, #0]
 8013ab4:	2500      	movs	r5, #0
 8013ab6:	e7f8      	b.n	8013aaa <_calloc_r+0x16>
 8013ab8:	4621      	mov	r1, r4
 8013aba:	f7fe f8db 	bl	8011c74 <memset>
 8013abe:	e7f4      	b.n	8013aaa <_calloc_r+0x16>

08013ac0 <__assert_func>:
 8013ac0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013ac2:	4614      	mov	r4, r2
 8013ac4:	461a      	mov	r2, r3
 8013ac6:	4b09      	ldr	r3, [pc, #36]	; (8013aec <__assert_func+0x2c>)
 8013ac8:	681b      	ldr	r3, [r3, #0]
 8013aca:	4605      	mov	r5, r0
 8013acc:	68d8      	ldr	r0, [r3, #12]
 8013ace:	b14c      	cbz	r4, 8013ae4 <__assert_func+0x24>
 8013ad0:	4b07      	ldr	r3, [pc, #28]	; (8013af0 <__assert_func+0x30>)
 8013ad2:	9100      	str	r1, [sp, #0]
 8013ad4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013ad8:	4906      	ldr	r1, [pc, #24]	; (8013af4 <__assert_func+0x34>)
 8013ada:	462b      	mov	r3, r5
 8013adc:	f000 f80e 	bl	8013afc <fiprintf>
 8013ae0:	f7fe f878 	bl	8011bd4 <abort>
 8013ae4:	4b04      	ldr	r3, [pc, #16]	; (8013af8 <__assert_func+0x38>)
 8013ae6:	461c      	mov	r4, r3
 8013ae8:	e7f3      	b.n	8013ad2 <__assert_func+0x12>
 8013aea:	bf00      	nop
 8013aec:	24000010 	.word	0x24000010
 8013af0:	08014e24 	.word	0x08014e24
 8013af4:	08014e31 	.word	0x08014e31
 8013af8:	08014e5f 	.word	0x08014e5f

08013afc <fiprintf>:
 8013afc:	b40e      	push	{r1, r2, r3}
 8013afe:	b503      	push	{r0, r1, lr}
 8013b00:	4601      	mov	r1, r0
 8013b02:	ab03      	add	r3, sp, #12
 8013b04:	4805      	ldr	r0, [pc, #20]	; (8013b1c <fiprintf+0x20>)
 8013b06:	f853 2b04 	ldr.w	r2, [r3], #4
 8013b0a:	6800      	ldr	r0, [r0, #0]
 8013b0c:	9301      	str	r3, [sp, #4]
 8013b0e:	f000 f845 	bl	8013b9c <_vfiprintf_r>
 8013b12:	b002      	add	sp, #8
 8013b14:	f85d eb04 	ldr.w	lr, [sp], #4
 8013b18:	b003      	add	sp, #12
 8013b1a:	4770      	bx	lr
 8013b1c:	24000010 	.word	0x24000010

08013b20 <__retarget_lock_init_recursive>:
 8013b20:	4770      	bx	lr

08013b22 <__retarget_lock_acquire_recursive>:
 8013b22:	4770      	bx	lr

08013b24 <__retarget_lock_release_recursive>:
 8013b24:	4770      	bx	lr

08013b26 <__ascii_mbtowc>:
 8013b26:	b082      	sub	sp, #8
 8013b28:	b901      	cbnz	r1, 8013b2c <__ascii_mbtowc+0x6>
 8013b2a:	a901      	add	r1, sp, #4
 8013b2c:	b142      	cbz	r2, 8013b40 <__ascii_mbtowc+0x1a>
 8013b2e:	b14b      	cbz	r3, 8013b44 <__ascii_mbtowc+0x1e>
 8013b30:	7813      	ldrb	r3, [r2, #0]
 8013b32:	600b      	str	r3, [r1, #0]
 8013b34:	7812      	ldrb	r2, [r2, #0]
 8013b36:	1e10      	subs	r0, r2, #0
 8013b38:	bf18      	it	ne
 8013b3a:	2001      	movne	r0, #1
 8013b3c:	b002      	add	sp, #8
 8013b3e:	4770      	bx	lr
 8013b40:	4610      	mov	r0, r2
 8013b42:	e7fb      	b.n	8013b3c <__ascii_mbtowc+0x16>
 8013b44:	f06f 0001 	mvn.w	r0, #1
 8013b48:	e7f8      	b.n	8013b3c <__ascii_mbtowc+0x16>

08013b4a <__sfputc_r>:
 8013b4a:	6893      	ldr	r3, [r2, #8]
 8013b4c:	3b01      	subs	r3, #1
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	b410      	push	{r4}
 8013b52:	6093      	str	r3, [r2, #8]
 8013b54:	da08      	bge.n	8013b68 <__sfputc_r+0x1e>
 8013b56:	6994      	ldr	r4, [r2, #24]
 8013b58:	42a3      	cmp	r3, r4
 8013b5a:	db01      	blt.n	8013b60 <__sfputc_r+0x16>
 8013b5c:	290a      	cmp	r1, #10
 8013b5e:	d103      	bne.n	8013b68 <__sfputc_r+0x1e>
 8013b60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013b64:	f000 b94a 	b.w	8013dfc <__swbuf_r>
 8013b68:	6813      	ldr	r3, [r2, #0]
 8013b6a:	1c58      	adds	r0, r3, #1
 8013b6c:	6010      	str	r0, [r2, #0]
 8013b6e:	7019      	strb	r1, [r3, #0]
 8013b70:	4608      	mov	r0, r1
 8013b72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013b76:	4770      	bx	lr

08013b78 <__sfputs_r>:
 8013b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b7a:	4606      	mov	r6, r0
 8013b7c:	460f      	mov	r7, r1
 8013b7e:	4614      	mov	r4, r2
 8013b80:	18d5      	adds	r5, r2, r3
 8013b82:	42ac      	cmp	r4, r5
 8013b84:	d101      	bne.n	8013b8a <__sfputs_r+0x12>
 8013b86:	2000      	movs	r0, #0
 8013b88:	e007      	b.n	8013b9a <__sfputs_r+0x22>
 8013b8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b8e:	463a      	mov	r2, r7
 8013b90:	4630      	mov	r0, r6
 8013b92:	f7ff ffda 	bl	8013b4a <__sfputc_r>
 8013b96:	1c43      	adds	r3, r0, #1
 8013b98:	d1f3      	bne.n	8013b82 <__sfputs_r+0xa>
 8013b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013b9c <_vfiprintf_r>:
 8013b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ba0:	460d      	mov	r5, r1
 8013ba2:	b09d      	sub	sp, #116	; 0x74
 8013ba4:	4614      	mov	r4, r2
 8013ba6:	4698      	mov	r8, r3
 8013ba8:	4606      	mov	r6, r0
 8013baa:	b118      	cbz	r0, 8013bb4 <_vfiprintf_r+0x18>
 8013bac:	6983      	ldr	r3, [r0, #24]
 8013bae:	b90b      	cbnz	r3, 8013bb4 <_vfiprintf_r+0x18>
 8013bb0:	f000 fb0c 	bl	80141cc <__sinit>
 8013bb4:	4b89      	ldr	r3, [pc, #548]	; (8013ddc <_vfiprintf_r+0x240>)
 8013bb6:	429d      	cmp	r5, r3
 8013bb8:	d11b      	bne.n	8013bf2 <_vfiprintf_r+0x56>
 8013bba:	6875      	ldr	r5, [r6, #4]
 8013bbc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013bbe:	07d9      	lsls	r1, r3, #31
 8013bc0:	d405      	bmi.n	8013bce <_vfiprintf_r+0x32>
 8013bc2:	89ab      	ldrh	r3, [r5, #12]
 8013bc4:	059a      	lsls	r2, r3, #22
 8013bc6:	d402      	bmi.n	8013bce <_vfiprintf_r+0x32>
 8013bc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013bca:	f7ff ffaa 	bl	8013b22 <__retarget_lock_acquire_recursive>
 8013bce:	89ab      	ldrh	r3, [r5, #12]
 8013bd0:	071b      	lsls	r3, r3, #28
 8013bd2:	d501      	bpl.n	8013bd8 <_vfiprintf_r+0x3c>
 8013bd4:	692b      	ldr	r3, [r5, #16]
 8013bd6:	b9eb      	cbnz	r3, 8013c14 <_vfiprintf_r+0x78>
 8013bd8:	4629      	mov	r1, r5
 8013bda:	4630      	mov	r0, r6
 8013bdc:	f000 f96e 	bl	8013ebc <__swsetup_r>
 8013be0:	b1c0      	cbz	r0, 8013c14 <_vfiprintf_r+0x78>
 8013be2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013be4:	07dc      	lsls	r4, r3, #31
 8013be6:	d50e      	bpl.n	8013c06 <_vfiprintf_r+0x6a>
 8013be8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013bec:	b01d      	add	sp, #116	; 0x74
 8013bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bf2:	4b7b      	ldr	r3, [pc, #492]	; (8013de0 <_vfiprintf_r+0x244>)
 8013bf4:	429d      	cmp	r5, r3
 8013bf6:	d101      	bne.n	8013bfc <_vfiprintf_r+0x60>
 8013bf8:	68b5      	ldr	r5, [r6, #8]
 8013bfa:	e7df      	b.n	8013bbc <_vfiprintf_r+0x20>
 8013bfc:	4b79      	ldr	r3, [pc, #484]	; (8013de4 <_vfiprintf_r+0x248>)
 8013bfe:	429d      	cmp	r5, r3
 8013c00:	bf08      	it	eq
 8013c02:	68f5      	ldreq	r5, [r6, #12]
 8013c04:	e7da      	b.n	8013bbc <_vfiprintf_r+0x20>
 8013c06:	89ab      	ldrh	r3, [r5, #12]
 8013c08:	0598      	lsls	r0, r3, #22
 8013c0a:	d4ed      	bmi.n	8013be8 <_vfiprintf_r+0x4c>
 8013c0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013c0e:	f7ff ff89 	bl	8013b24 <__retarget_lock_release_recursive>
 8013c12:	e7e9      	b.n	8013be8 <_vfiprintf_r+0x4c>
 8013c14:	2300      	movs	r3, #0
 8013c16:	9309      	str	r3, [sp, #36]	; 0x24
 8013c18:	2320      	movs	r3, #32
 8013c1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013c1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8013c22:	2330      	movs	r3, #48	; 0x30
 8013c24:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013de8 <_vfiprintf_r+0x24c>
 8013c28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013c2c:	f04f 0901 	mov.w	r9, #1
 8013c30:	4623      	mov	r3, r4
 8013c32:	469a      	mov	sl, r3
 8013c34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013c38:	b10a      	cbz	r2, 8013c3e <_vfiprintf_r+0xa2>
 8013c3a:	2a25      	cmp	r2, #37	; 0x25
 8013c3c:	d1f9      	bne.n	8013c32 <_vfiprintf_r+0x96>
 8013c3e:	ebba 0b04 	subs.w	fp, sl, r4
 8013c42:	d00b      	beq.n	8013c5c <_vfiprintf_r+0xc0>
 8013c44:	465b      	mov	r3, fp
 8013c46:	4622      	mov	r2, r4
 8013c48:	4629      	mov	r1, r5
 8013c4a:	4630      	mov	r0, r6
 8013c4c:	f7ff ff94 	bl	8013b78 <__sfputs_r>
 8013c50:	3001      	adds	r0, #1
 8013c52:	f000 80aa 	beq.w	8013daa <_vfiprintf_r+0x20e>
 8013c56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013c58:	445a      	add	r2, fp
 8013c5a:	9209      	str	r2, [sp, #36]	; 0x24
 8013c5c:	f89a 3000 	ldrb.w	r3, [sl]
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	f000 80a2 	beq.w	8013daa <_vfiprintf_r+0x20e>
 8013c66:	2300      	movs	r3, #0
 8013c68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013c6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013c70:	f10a 0a01 	add.w	sl, sl, #1
 8013c74:	9304      	str	r3, [sp, #16]
 8013c76:	9307      	str	r3, [sp, #28]
 8013c78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013c7c:	931a      	str	r3, [sp, #104]	; 0x68
 8013c7e:	4654      	mov	r4, sl
 8013c80:	2205      	movs	r2, #5
 8013c82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013c86:	4858      	ldr	r0, [pc, #352]	; (8013de8 <_vfiprintf_r+0x24c>)
 8013c88:	f7ec fb32 	bl	80002f0 <memchr>
 8013c8c:	9a04      	ldr	r2, [sp, #16]
 8013c8e:	b9d8      	cbnz	r0, 8013cc8 <_vfiprintf_r+0x12c>
 8013c90:	06d1      	lsls	r1, r2, #27
 8013c92:	bf44      	itt	mi
 8013c94:	2320      	movmi	r3, #32
 8013c96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013c9a:	0713      	lsls	r3, r2, #28
 8013c9c:	bf44      	itt	mi
 8013c9e:	232b      	movmi	r3, #43	; 0x2b
 8013ca0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013ca4:	f89a 3000 	ldrb.w	r3, [sl]
 8013ca8:	2b2a      	cmp	r3, #42	; 0x2a
 8013caa:	d015      	beq.n	8013cd8 <_vfiprintf_r+0x13c>
 8013cac:	9a07      	ldr	r2, [sp, #28]
 8013cae:	4654      	mov	r4, sl
 8013cb0:	2000      	movs	r0, #0
 8013cb2:	f04f 0c0a 	mov.w	ip, #10
 8013cb6:	4621      	mov	r1, r4
 8013cb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013cbc:	3b30      	subs	r3, #48	; 0x30
 8013cbe:	2b09      	cmp	r3, #9
 8013cc0:	d94e      	bls.n	8013d60 <_vfiprintf_r+0x1c4>
 8013cc2:	b1b0      	cbz	r0, 8013cf2 <_vfiprintf_r+0x156>
 8013cc4:	9207      	str	r2, [sp, #28]
 8013cc6:	e014      	b.n	8013cf2 <_vfiprintf_r+0x156>
 8013cc8:	eba0 0308 	sub.w	r3, r0, r8
 8013ccc:	fa09 f303 	lsl.w	r3, r9, r3
 8013cd0:	4313      	orrs	r3, r2
 8013cd2:	9304      	str	r3, [sp, #16]
 8013cd4:	46a2      	mov	sl, r4
 8013cd6:	e7d2      	b.n	8013c7e <_vfiprintf_r+0xe2>
 8013cd8:	9b03      	ldr	r3, [sp, #12]
 8013cda:	1d19      	adds	r1, r3, #4
 8013cdc:	681b      	ldr	r3, [r3, #0]
 8013cde:	9103      	str	r1, [sp, #12]
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	bfbb      	ittet	lt
 8013ce4:	425b      	neglt	r3, r3
 8013ce6:	f042 0202 	orrlt.w	r2, r2, #2
 8013cea:	9307      	strge	r3, [sp, #28]
 8013cec:	9307      	strlt	r3, [sp, #28]
 8013cee:	bfb8      	it	lt
 8013cf0:	9204      	strlt	r2, [sp, #16]
 8013cf2:	7823      	ldrb	r3, [r4, #0]
 8013cf4:	2b2e      	cmp	r3, #46	; 0x2e
 8013cf6:	d10c      	bne.n	8013d12 <_vfiprintf_r+0x176>
 8013cf8:	7863      	ldrb	r3, [r4, #1]
 8013cfa:	2b2a      	cmp	r3, #42	; 0x2a
 8013cfc:	d135      	bne.n	8013d6a <_vfiprintf_r+0x1ce>
 8013cfe:	9b03      	ldr	r3, [sp, #12]
 8013d00:	1d1a      	adds	r2, r3, #4
 8013d02:	681b      	ldr	r3, [r3, #0]
 8013d04:	9203      	str	r2, [sp, #12]
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	bfb8      	it	lt
 8013d0a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013d0e:	3402      	adds	r4, #2
 8013d10:	9305      	str	r3, [sp, #20]
 8013d12:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013df8 <_vfiprintf_r+0x25c>
 8013d16:	7821      	ldrb	r1, [r4, #0]
 8013d18:	2203      	movs	r2, #3
 8013d1a:	4650      	mov	r0, sl
 8013d1c:	f7ec fae8 	bl	80002f0 <memchr>
 8013d20:	b140      	cbz	r0, 8013d34 <_vfiprintf_r+0x198>
 8013d22:	2340      	movs	r3, #64	; 0x40
 8013d24:	eba0 000a 	sub.w	r0, r0, sl
 8013d28:	fa03 f000 	lsl.w	r0, r3, r0
 8013d2c:	9b04      	ldr	r3, [sp, #16]
 8013d2e:	4303      	orrs	r3, r0
 8013d30:	3401      	adds	r4, #1
 8013d32:	9304      	str	r3, [sp, #16]
 8013d34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013d38:	482c      	ldr	r0, [pc, #176]	; (8013dec <_vfiprintf_r+0x250>)
 8013d3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013d3e:	2206      	movs	r2, #6
 8013d40:	f7ec fad6 	bl	80002f0 <memchr>
 8013d44:	2800      	cmp	r0, #0
 8013d46:	d03f      	beq.n	8013dc8 <_vfiprintf_r+0x22c>
 8013d48:	4b29      	ldr	r3, [pc, #164]	; (8013df0 <_vfiprintf_r+0x254>)
 8013d4a:	bb1b      	cbnz	r3, 8013d94 <_vfiprintf_r+0x1f8>
 8013d4c:	9b03      	ldr	r3, [sp, #12]
 8013d4e:	3307      	adds	r3, #7
 8013d50:	f023 0307 	bic.w	r3, r3, #7
 8013d54:	3308      	adds	r3, #8
 8013d56:	9303      	str	r3, [sp, #12]
 8013d58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d5a:	443b      	add	r3, r7
 8013d5c:	9309      	str	r3, [sp, #36]	; 0x24
 8013d5e:	e767      	b.n	8013c30 <_vfiprintf_r+0x94>
 8013d60:	fb0c 3202 	mla	r2, ip, r2, r3
 8013d64:	460c      	mov	r4, r1
 8013d66:	2001      	movs	r0, #1
 8013d68:	e7a5      	b.n	8013cb6 <_vfiprintf_r+0x11a>
 8013d6a:	2300      	movs	r3, #0
 8013d6c:	3401      	adds	r4, #1
 8013d6e:	9305      	str	r3, [sp, #20]
 8013d70:	4619      	mov	r1, r3
 8013d72:	f04f 0c0a 	mov.w	ip, #10
 8013d76:	4620      	mov	r0, r4
 8013d78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013d7c:	3a30      	subs	r2, #48	; 0x30
 8013d7e:	2a09      	cmp	r2, #9
 8013d80:	d903      	bls.n	8013d8a <_vfiprintf_r+0x1ee>
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	d0c5      	beq.n	8013d12 <_vfiprintf_r+0x176>
 8013d86:	9105      	str	r1, [sp, #20]
 8013d88:	e7c3      	b.n	8013d12 <_vfiprintf_r+0x176>
 8013d8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8013d8e:	4604      	mov	r4, r0
 8013d90:	2301      	movs	r3, #1
 8013d92:	e7f0      	b.n	8013d76 <_vfiprintf_r+0x1da>
 8013d94:	ab03      	add	r3, sp, #12
 8013d96:	9300      	str	r3, [sp, #0]
 8013d98:	462a      	mov	r2, r5
 8013d9a:	4b16      	ldr	r3, [pc, #88]	; (8013df4 <_vfiprintf_r+0x258>)
 8013d9c:	a904      	add	r1, sp, #16
 8013d9e:	4630      	mov	r0, r6
 8013da0:	f7fe f8e2 	bl	8011f68 <_printf_float>
 8013da4:	4607      	mov	r7, r0
 8013da6:	1c78      	adds	r0, r7, #1
 8013da8:	d1d6      	bne.n	8013d58 <_vfiprintf_r+0x1bc>
 8013daa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013dac:	07d9      	lsls	r1, r3, #31
 8013dae:	d405      	bmi.n	8013dbc <_vfiprintf_r+0x220>
 8013db0:	89ab      	ldrh	r3, [r5, #12]
 8013db2:	059a      	lsls	r2, r3, #22
 8013db4:	d402      	bmi.n	8013dbc <_vfiprintf_r+0x220>
 8013db6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013db8:	f7ff feb4 	bl	8013b24 <__retarget_lock_release_recursive>
 8013dbc:	89ab      	ldrh	r3, [r5, #12]
 8013dbe:	065b      	lsls	r3, r3, #25
 8013dc0:	f53f af12 	bmi.w	8013be8 <_vfiprintf_r+0x4c>
 8013dc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013dc6:	e711      	b.n	8013bec <_vfiprintf_r+0x50>
 8013dc8:	ab03      	add	r3, sp, #12
 8013dca:	9300      	str	r3, [sp, #0]
 8013dcc:	462a      	mov	r2, r5
 8013dce:	4b09      	ldr	r3, [pc, #36]	; (8013df4 <_vfiprintf_r+0x258>)
 8013dd0:	a904      	add	r1, sp, #16
 8013dd2:	4630      	mov	r0, r6
 8013dd4:	f7fe fb54 	bl	8012480 <_printf_i>
 8013dd8:	e7e4      	b.n	8013da4 <_vfiprintf_r+0x208>
 8013dda:	bf00      	nop
 8013ddc:	08014f9c 	.word	0x08014f9c
 8013de0:	08014fbc 	.word	0x08014fbc
 8013de4:	08014f7c 	.word	0x08014f7c
 8013de8:	08014e6a 	.word	0x08014e6a
 8013dec:	08014e74 	.word	0x08014e74
 8013df0:	08011f69 	.word	0x08011f69
 8013df4:	08013b79 	.word	0x08013b79
 8013df8:	08014e70 	.word	0x08014e70

08013dfc <__swbuf_r>:
 8013dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013dfe:	460e      	mov	r6, r1
 8013e00:	4614      	mov	r4, r2
 8013e02:	4605      	mov	r5, r0
 8013e04:	b118      	cbz	r0, 8013e0e <__swbuf_r+0x12>
 8013e06:	6983      	ldr	r3, [r0, #24]
 8013e08:	b90b      	cbnz	r3, 8013e0e <__swbuf_r+0x12>
 8013e0a:	f000 f9df 	bl	80141cc <__sinit>
 8013e0e:	4b21      	ldr	r3, [pc, #132]	; (8013e94 <__swbuf_r+0x98>)
 8013e10:	429c      	cmp	r4, r3
 8013e12:	d12b      	bne.n	8013e6c <__swbuf_r+0x70>
 8013e14:	686c      	ldr	r4, [r5, #4]
 8013e16:	69a3      	ldr	r3, [r4, #24]
 8013e18:	60a3      	str	r3, [r4, #8]
 8013e1a:	89a3      	ldrh	r3, [r4, #12]
 8013e1c:	071a      	lsls	r2, r3, #28
 8013e1e:	d52f      	bpl.n	8013e80 <__swbuf_r+0x84>
 8013e20:	6923      	ldr	r3, [r4, #16]
 8013e22:	b36b      	cbz	r3, 8013e80 <__swbuf_r+0x84>
 8013e24:	6923      	ldr	r3, [r4, #16]
 8013e26:	6820      	ldr	r0, [r4, #0]
 8013e28:	1ac0      	subs	r0, r0, r3
 8013e2a:	6963      	ldr	r3, [r4, #20]
 8013e2c:	b2f6      	uxtb	r6, r6
 8013e2e:	4283      	cmp	r3, r0
 8013e30:	4637      	mov	r7, r6
 8013e32:	dc04      	bgt.n	8013e3e <__swbuf_r+0x42>
 8013e34:	4621      	mov	r1, r4
 8013e36:	4628      	mov	r0, r5
 8013e38:	f000 f934 	bl	80140a4 <_fflush_r>
 8013e3c:	bb30      	cbnz	r0, 8013e8c <__swbuf_r+0x90>
 8013e3e:	68a3      	ldr	r3, [r4, #8]
 8013e40:	3b01      	subs	r3, #1
 8013e42:	60a3      	str	r3, [r4, #8]
 8013e44:	6823      	ldr	r3, [r4, #0]
 8013e46:	1c5a      	adds	r2, r3, #1
 8013e48:	6022      	str	r2, [r4, #0]
 8013e4a:	701e      	strb	r6, [r3, #0]
 8013e4c:	6963      	ldr	r3, [r4, #20]
 8013e4e:	3001      	adds	r0, #1
 8013e50:	4283      	cmp	r3, r0
 8013e52:	d004      	beq.n	8013e5e <__swbuf_r+0x62>
 8013e54:	89a3      	ldrh	r3, [r4, #12]
 8013e56:	07db      	lsls	r3, r3, #31
 8013e58:	d506      	bpl.n	8013e68 <__swbuf_r+0x6c>
 8013e5a:	2e0a      	cmp	r6, #10
 8013e5c:	d104      	bne.n	8013e68 <__swbuf_r+0x6c>
 8013e5e:	4621      	mov	r1, r4
 8013e60:	4628      	mov	r0, r5
 8013e62:	f000 f91f 	bl	80140a4 <_fflush_r>
 8013e66:	b988      	cbnz	r0, 8013e8c <__swbuf_r+0x90>
 8013e68:	4638      	mov	r0, r7
 8013e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e6c:	4b0a      	ldr	r3, [pc, #40]	; (8013e98 <__swbuf_r+0x9c>)
 8013e6e:	429c      	cmp	r4, r3
 8013e70:	d101      	bne.n	8013e76 <__swbuf_r+0x7a>
 8013e72:	68ac      	ldr	r4, [r5, #8]
 8013e74:	e7cf      	b.n	8013e16 <__swbuf_r+0x1a>
 8013e76:	4b09      	ldr	r3, [pc, #36]	; (8013e9c <__swbuf_r+0xa0>)
 8013e78:	429c      	cmp	r4, r3
 8013e7a:	bf08      	it	eq
 8013e7c:	68ec      	ldreq	r4, [r5, #12]
 8013e7e:	e7ca      	b.n	8013e16 <__swbuf_r+0x1a>
 8013e80:	4621      	mov	r1, r4
 8013e82:	4628      	mov	r0, r5
 8013e84:	f000 f81a 	bl	8013ebc <__swsetup_r>
 8013e88:	2800      	cmp	r0, #0
 8013e8a:	d0cb      	beq.n	8013e24 <__swbuf_r+0x28>
 8013e8c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8013e90:	e7ea      	b.n	8013e68 <__swbuf_r+0x6c>
 8013e92:	bf00      	nop
 8013e94:	08014f9c 	.word	0x08014f9c
 8013e98:	08014fbc 	.word	0x08014fbc
 8013e9c:	08014f7c 	.word	0x08014f7c

08013ea0 <__ascii_wctomb>:
 8013ea0:	b149      	cbz	r1, 8013eb6 <__ascii_wctomb+0x16>
 8013ea2:	2aff      	cmp	r2, #255	; 0xff
 8013ea4:	bf85      	ittet	hi
 8013ea6:	238a      	movhi	r3, #138	; 0x8a
 8013ea8:	6003      	strhi	r3, [r0, #0]
 8013eaa:	700a      	strbls	r2, [r1, #0]
 8013eac:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8013eb0:	bf98      	it	ls
 8013eb2:	2001      	movls	r0, #1
 8013eb4:	4770      	bx	lr
 8013eb6:	4608      	mov	r0, r1
 8013eb8:	4770      	bx	lr
	...

08013ebc <__swsetup_r>:
 8013ebc:	4b32      	ldr	r3, [pc, #200]	; (8013f88 <__swsetup_r+0xcc>)
 8013ebe:	b570      	push	{r4, r5, r6, lr}
 8013ec0:	681d      	ldr	r5, [r3, #0]
 8013ec2:	4606      	mov	r6, r0
 8013ec4:	460c      	mov	r4, r1
 8013ec6:	b125      	cbz	r5, 8013ed2 <__swsetup_r+0x16>
 8013ec8:	69ab      	ldr	r3, [r5, #24]
 8013eca:	b913      	cbnz	r3, 8013ed2 <__swsetup_r+0x16>
 8013ecc:	4628      	mov	r0, r5
 8013ece:	f000 f97d 	bl	80141cc <__sinit>
 8013ed2:	4b2e      	ldr	r3, [pc, #184]	; (8013f8c <__swsetup_r+0xd0>)
 8013ed4:	429c      	cmp	r4, r3
 8013ed6:	d10f      	bne.n	8013ef8 <__swsetup_r+0x3c>
 8013ed8:	686c      	ldr	r4, [r5, #4]
 8013eda:	89a3      	ldrh	r3, [r4, #12]
 8013edc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013ee0:	0719      	lsls	r1, r3, #28
 8013ee2:	d42c      	bmi.n	8013f3e <__swsetup_r+0x82>
 8013ee4:	06dd      	lsls	r5, r3, #27
 8013ee6:	d411      	bmi.n	8013f0c <__swsetup_r+0x50>
 8013ee8:	2309      	movs	r3, #9
 8013eea:	6033      	str	r3, [r6, #0]
 8013eec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013ef0:	81a3      	strh	r3, [r4, #12]
 8013ef2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013ef6:	e03e      	b.n	8013f76 <__swsetup_r+0xba>
 8013ef8:	4b25      	ldr	r3, [pc, #148]	; (8013f90 <__swsetup_r+0xd4>)
 8013efa:	429c      	cmp	r4, r3
 8013efc:	d101      	bne.n	8013f02 <__swsetup_r+0x46>
 8013efe:	68ac      	ldr	r4, [r5, #8]
 8013f00:	e7eb      	b.n	8013eda <__swsetup_r+0x1e>
 8013f02:	4b24      	ldr	r3, [pc, #144]	; (8013f94 <__swsetup_r+0xd8>)
 8013f04:	429c      	cmp	r4, r3
 8013f06:	bf08      	it	eq
 8013f08:	68ec      	ldreq	r4, [r5, #12]
 8013f0a:	e7e6      	b.n	8013eda <__swsetup_r+0x1e>
 8013f0c:	0758      	lsls	r0, r3, #29
 8013f0e:	d512      	bpl.n	8013f36 <__swsetup_r+0x7a>
 8013f10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013f12:	b141      	cbz	r1, 8013f26 <__swsetup_r+0x6a>
 8013f14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013f18:	4299      	cmp	r1, r3
 8013f1a:	d002      	beq.n	8013f22 <__swsetup_r+0x66>
 8013f1c:	4630      	mov	r0, r6
 8013f1e:	f7fd feb1 	bl	8011c84 <_free_r>
 8013f22:	2300      	movs	r3, #0
 8013f24:	6363      	str	r3, [r4, #52]	; 0x34
 8013f26:	89a3      	ldrh	r3, [r4, #12]
 8013f28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013f2c:	81a3      	strh	r3, [r4, #12]
 8013f2e:	2300      	movs	r3, #0
 8013f30:	6063      	str	r3, [r4, #4]
 8013f32:	6923      	ldr	r3, [r4, #16]
 8013f34:	6023      	str	r3, [r4, #0]
 8013f36:	89a3      	ldrh	r3, [r4, #12]
 8013f38:	f043 0308 	orr.w	r3, r3, #8
 8013f3c:	81a3      	strh	r3, [r4, #12]
 8013f3e:	6923      	ldr	r3, [r4, #16]
 8013f40:	b94b      	cbnz	r3, 8013f56 <__swsetup_r+0x9a>
 8013f42:	89a3      	ldrh	r3, [r4, #12]
 8013f44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013f48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013f4c:	d003      	beq.n	8013f56 <__swsetup_r+0x9a>
 8013f4e:	4621      	mov	r1, r4
 8013f50:	4630      	mov	r0, r6
 8013f52:	f000 f9fd 	bl	8014350 <__smakebuf_r>
 8013f56:	89a0      	ldrh	r0, [r4, #12]
 8013f58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013f5c:	f010 0301 	ands.w	r3, r0, #1
 8013f60:	d00a      	beq.n	8013f78 <__swsetup_r+0xbc>
 8013f62:	2300      	movs	r3, #0
 8013f64:	60a3      	str	r3, [r4, #8]
 8013f66:	6963      	ldr	r3, [r4, #20]
 8013f68:	425b      	negs	r3, r3
 8013f6a:	61a3      	str	r3, [r4, #24]
 8013f6c:	6923      	ldr	r3, [r4, #16]
 8013f6e:	b943      	cbnz	r3, 8013f82 <__swsetup_r+0xc6>
 8013f70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013f74:	d1ba      	bne.n	8013eec <__swsetup_r+0x30>
 8013f76:	bd70      	pop	{r4, r5, r6, pc}
 8013f78:	0781      	lsls	r1, r0, #30
 8013f7a:	bf58      	it	pl
 8013f7c:	6963      	ldrpl	r3, [r4, #20]
 8013f7e:	60a3      	str	r3, [r4, #8]
 8013f80:	e7f4      	b.n	8013f6c <__swsetup_r+0xb0>
 8013f82:	2000      	movs	r0, #0
 8013f84:	e7f7      	b.n	8013f76 <__swsetup_r+0xba>
 8013f86:	bf00      	nop
 8013f88:	24000010 	.word	0x24000010
 8013f8c:	08014f9c 	.word	0x08014f9c
 8013f90:	08014fbc 	.word	0x08014fbc
 8013f94:	08014f7c 	.word	0x08014f7c

08013f98 <__sflush_r>:
 8013f98:	898a      	ldrh	r2, [r1, #12]
 8013f9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f9e:	4605      	mov	r5, r0
 8013fa0:	0710      	lsls	r0, r2, #28
 8013fa2:	460c      	mov	r4, r1
 8013fa4:	d458      	bmi.n	8014058 <__sflush_r+0xc0>
 8013fa6:	684b      	ldr	r3, [r1, #4]
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	dc05      	bgt.n	8013fb8 <__sflush_r+0x20>
 8013fac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	dc02      	bgt.n	8013fb8 <__sflush_r+0x20>
 8013fb2:	2000      	movs	r0, #0
 8013fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013fb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013fba:	2e00      	cmp	r6, #0
 8013fbc:	d0f9      	beq.n	8013fb2 <__sflush_r+0x1a>
 8013fbe:	2300      	movs	r3, #0
 8013fc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013fc4:	682f      	ldr	r7, [r5, #0]
 8013fc6:	602b      	str	r3, [r5, #0]
 8013fc8:	d032      	beq.n	8014030 <__sflush_r+0x98>
 8013fca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013fcc:	89a3      	ldrh	r3, [r4, #12]
 8013fce:	075a      	lsls	r2, r3, #29
 8013fd0:	d505      	bpl.n	8013fde <__sflush_r+0x46>
 8013fd2:	6863      	ldr	r3, [r4, #4]
 8013fd4:	1ac0      	subs	r0, r0, r3
 8013fd6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013fd8:	b10b      	cbz	r3, 8013fde <__sflush_r+0x46>
 8013fda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013fdc:	1ac0      	subs	r0, r0, r3
 8013fde:	2300      	movs	r3, #0
 8013fe0:	4602      	mov	r2, r0
 8013fe2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013fe4:	6a21      	ldr	r1, [r4, #32]
 8013fe6:	4628      	mov	r0, r5
 8013fe8:	47b0      	blx	r6
 8013fea:	1c43      	adds	r3, r0, #1
 8013fec:	89a3      	ldrh	r3, [r4, #12]
 8013fee:	d106      	bne.n	8013ffe <__sflush_r+0x66>
 8013ff0:	6829      	ldr	r1, [r5, #0]
 8013ff2:	291d      	cmp	r1, #29
 8013ff4:	d82c      	bhi.n	8014050 <__sflush_r+0xb8>
 8013ff6:	4a2a      	ldr	r2, [pc, #168]	; (80140a0 <__sflush_r+0x108>)
 8013ff8:	40ca      	lsrs	r2, r1
 8013ffa:	07d6      	lsls	r6, r2, #31
 8013ffc:	d528      	bpl.n	8014050 <__sflush_r+0xb8>
 8013ffe:	2200      	movs	r2, #0
 8014000:	6062      	str	r2, [r4, #4]
 8014002:	04d9      	lsls	r1, r3, #19
 8014004:	6922      	ldr	r2, [r4, #16]
 8014006:	6022      	str	r2, [r4, #0]
 8014008:	d504      	bpl.n	8014014 <__sflush_r+0x7c>
 801400a:	1c42      	adds	r2, r0, #1
 801400c:	d101      	bne.n	8014012 <__sflush_r+0x7a>
 801400e:	682b      	ldr	r3, [r5, #0]
 8014010:	b903      	cbnz	r3, 8014014 <__sflush_r+0x7c>
 8014012:	6560      	str	r0, [r4, #84]	; 0x54
 8014014:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014016:	602f      	str	r7, [r5, #0]
 8014018:	2900      	cmp	r1, #0
 801401a:	d0ca      	beq.n	8013fb2 <__sflush_r+0x1a>
 801401c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014020:	4299      	cmp	r1, r3
 8014022:	d002      	beq.n	801402a <__sflush_r+0x92>
 8014024:	4628      	mov	r0, r5
 8014026:	f7fd fe2d 	bl	8011c84 <_free_r>
 801402a:	2000      	movs	r0, #0
 801402c:	6360      	str	r0, [r4, #52]	; 0x34
 801402e:	e7c1      	b.n	8013fb4 <__sflush_r+0x1c>
 8014030:	6a21      	ldr	r1, [r4, #32]
 8014032:	2301      	movs	r3, #1
 8014034:	4628      	mov	r0, r5
 8014036:	47b0      	blx	r6
 8014038:	1c41      	adds	r1, r0, #1
 801403a:	d1c7      	bne.n	8013fcc <__sflush_r+0x34>
 801403c:	682b      	ldr	r3, [r5, #0]
 801403e:	2b00      	cmp	r3, #0
 8014040:	d0c4      	beq.n	8013fcc <__sflush_r+0x34>
 8014042:	2b1d      	cmp	r3, #29
 8014044:	d001      	beq.n	801404a <__sflush_r+0xb2>
 8014046:	2b16      	cmp	r3, #22
 8014048:	d101      	bne.n	801404e <__sflush_r+0xb6>
 801404a:	602f      	str	r7, [r5, #0]
 801404c:	e7b1      	b.n	8013fb2 <__sflush_r+0x1a>
 801404e:	89a3      	ldrh	r3, [r4, #12]
 8014050:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014054:	81a3      	strh	r3, [r4, #12]
 8014056:	e7ad      	b.n	8013fb4 <__sflush_r+0x1c>
 8014058:	690f      	ldr	r7, [r1, #16]
 801405a:	2f00      	cmp	r7, #0
 801405c:	d0a9      	beq.n	8013fb2 <__sflush_r+0x1a>
 801405e:	0793      	lsls	r3, r2, #30
 8014060:	680e      	ldr	r6, [r1, #0]
 8014062:	bf08      	it	eq
 8014064:	694b      	ldreq	r3, [r1, #20]
 8014066:	600f      	str	r7, [r1, #0]
 8014068:	bf18      	it	ne
 801406a:	2300      	movne	r3, #0
 801406c:	eba6 0807 	sub.w	r8, r6, r7
 8014070:	608b      	str	r3, [r1, #8]
 8014072:	f1b8 0f00 	cmp.w	r8, #0
 8014076:	dd9c      	ble.n	8013fb2 <__sflush_r+0x1a>
 8014078:	6a21      	ldr	r1, [r4, #32]
 801407a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801407c:	4643      	mov	r3, r8
 801407e:	463a      	mov	r2, r7
 8014080:	4628      	mov	r0, r5
 8014082:	47b0      	blx	r6
 8014084:	2800      	cmp	r0, #0
 8014086:	dc06      	bgt.n	8014096 <__sflush_r+0xfe>
 8014088:	89a3      	ldrh	r3, [r4, #12]
 801408a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801408e:	81a3      	strh	r3, [r4, #12]
 8014090:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014094:	e78e      	b.n	8013fb4 <__sflush_r+0x1c>
 8014096:	4407      	add	r7, r0
 8014098:	eba8 0800 	sub.w	r8, r8, r0
 801409c:	e7e9      	b.n	8014072 <__sflush_r+0xda>
 801409e:	bf00      	nop
 80140a0:	20400001 	.word	0x20400001

080140a4 <_fflush_r>:
 80140a4:	b538      	push	{r3, r4, r5, lr}
 80140a6:	690b      	ldr	r3, [r1, #16]
 80140a8:	4605      	mov	r5, r0
 80140aa:	460c      	mov	r4, r1
 80140ac:	b913      	cbnz	r3, 80140b4 <_fflush_r+0x10>
 80140ae:	2500      	movs	r5, #0
 80140b0:	4628      	mov	r0, r5
 80140b2:	bd38      	pop	{r3, r4, r5, pc}
 80140b4:	b118      	cbz	r0, 80140be <_fflush_r+0x1a>
 80140b6:	6983      	ldr	r3, [r0, #24]
 80140b8:	b90b      	cbnz	r3, 80140be <_fflush_r+0x1a>
 80140ba:	f000 f887 	bl	80141cc <__sinit>
 80140be:	4b14      	ldr	r3, [pc, #80]	; (8014110 <_fflush_r+0x6c>)
 80140c0:	429c      	cmp	r4, r3
 80140c2:	d11b      	bne.n	80140fc <_fflush_r+0x58>
 80140c4:	686c      	ldr	r4, [r5, #4]
 80140c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	d0ef      	beq.n	80140ae <_fflush_r+0xa>
 80140ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80140d0:	07d0      	lsls	r0, r2, #31
 80140d2:	d404      	bmi.n	80140de <_fflush_r+0x3a>
 80140d4:	0599      	lsls	r1, r3, #22
 80140d6:	d402      	bmi.n	80140de <_fflush_r+0x3a>
 80140d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80140da:	f7ff fd22 	bl	8013b22 <__retarget_lock_acquire_recursive>
 80140de:	4628      	mov	r0, r5
 80140e0:	4621      	mov	r1, r4
 80140e2:	f7ff ff59 	bl	8013f98 <__sflush_r>
 80140e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80140e8:	07da      	lsls	r2, r3, #31
 80140ea:	4605      	mov	r5, r0
 80140ec:	d4e0      	bmi.n	80140b0 <_fflush_r+0xc>
 80140ee:	89a3      	ldrh	r3, [r4, #12]
 80140f0:	059b      	lsls	r3, r3, #22
 80140f2:	d4dd      	bmi.n	80140b0 <_fflush_r+0xc>
 80140f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80140f6:	f7ff fd15 	bl	8013b24 <__retarget_lock_release_recursive>
 80140fa:	e7d9      	b.n	80140b0 <_fflush_r+0xc>
 80140fc:	4b05      	ldr	r3, [pc, #20]	; (8014114 <_fflush_r+0x70>)
 80140fe:	429c      	cmp	r4, r3
 8014100:	d101      	bne.n	8014106 <_fflush_r+0x62>
 8014102:	68ac      	ldr	r4, [r5, #8]
 8014104:	e7df      	b.n	80140c6 <_fflush_r+0x22>
 8014106:	4b04      	ldr	r3, [pc, #16]	; (8014118 <_fflush_r+0x74>)
 8014108:	429c      	cmp	r4, r3
 801410a:	bf08      	it	eq
 801410c:	68ec      	ldreq	r4, [r5, #12]
 801410e:	e7da      	b.n	80140c6 <_fflush_r+0x22>
 8014110:	08014f9c 	.word	0x08014f9c
 8014114:	08014fbc 	.word	0x08014fbc
 8014118:	08014f7c 	.word	0x08014f7c

0801411c <std>:
 801411c:	2300      	movs	r3, #0
 801411e:	b510      	push	{r4, lr}
 8014120:	4604      	mov	r4, r0
 8014122:	e9c0 3300 	strd	r3, r3, [r0]
 8014126:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801412a:	6083      	str	r3, [r0, #8]
 801412c:	8181      	strh	r1, [r0, #12]
 801412e:	6643      	str	r3, [r0, #100]	; 0x64
 8014130:	81c2      	strh	r2, [r0, #14]
 8014132:	6183      	str	r3, [r0, #24]
 8014134:	4619      	mov	r1, r3
 8014136:	2208      	movs	r2, #8
 8014138:	305c      	adds	r0, #92	; 0x5c
 801413a:	f7fd fd9b 	bl	8011c74 <memset>
 801413e:	4b05      	ldr	r3, [pc, #20]	; (8014154 <std+0x38>)
 8014140:	6263      	str	r3, [r4, #36]	; 0x24
 8014142:	4b05      	ldr	r3, [pc, #20]	; (8014158 <std+0x3c>)
 8014144:	62a3      	str	r3, [r4, #40]	; 0x28
 8014146:	4b05      	ldr	r3, [pc, #20]	; (801415c <std+0x40>)
 8014148:	62e3      	str	r3, [r4, #44]	; 0x2c
 801414a:	4b05      	ldr	r3, [pc, #20]	; (8014160 <std+0x44>)
 801414c:	6224      	str	r4, [r4, #32]
 801414e:	6323      	str	r3, [r4, #48]	; 0x30
 8014150:	bd10      	pop	{r4, pc}
 8014152:	bf00      	nop
 8014154:	080143d1 	.word	0x080143d1
 8014158:	080143f3 	.word	0x080143f3
 801415c:	0801442b 	.word	0x0801442b
 8014160:	0801444f 	.word	0x0801444f

08014164 <_cleanup_r>:
 8014164:	4901      	ldr	r1, [pc, #4]	; (801416c <_cleanup_r+0x8>)
 8014166:	f000 b8af 	b.w	80142c8 <_fwalk_reent>
 801416a:	bf00      	nop
 801416c:	080140a5 	.word	0x080140a5

08014170 <__sfmoreglue>:
 8014170:	b570      	push	{r4, r5, r6, lr}
 8014172:	2268      	movs	r2, #104	; 0x68
 8014174:	1e4d      	subs	r5, r1, #1
 8014176:	4355      	muls	r5, r2
 8014178:	460e      	mov	r6, r1
 801417a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801417e:	f7fd fded 	bl	8011d5c <_malloc_r>
 8014182:	4604      	mov	r4, r0
 8014184:	b140      	cbz	r0, 8014198 <__sfmoreglue+0x28>
 8014186:	2100      	movs	r1, #0
 8014188:	e9c0 1600 	strd	r1, r6, [r0]
 801418c:	300c      	adds	r0, #12
 801418e:	60a0      	str	r0, [r4, #8]
 8014190:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014194:	f7fd fd6e 	bl	8011c74 <memset>
 8014198:	4620      	mov	r0, r4
 801419a:	bd70      	pop	{r4, r5, r6, pc}

0801419c <__sfp_lock_acquire>:
 801419c:	4801      	ldr	r0, [pc, #4]	; (80141a4 <__sfp_lock_acquire+0x8>)
 801419e:	f7ff bcc0 	b.w	8013b22 <__retarget_lock_acquire_recursive>
 80141a2:	bf00      	nop
 80141a4:	240009f9 	.word	0x240009f9

080141a8 <__sfp_lock_release>:
 80141a8:	4801      	ldr	r0, [pc, #4]	; (80141b0 <__sfp_lock_release+0x8>)
 80141aa:	f7ff bcbb 	b.w	8013b24 <__retarget_lock_release_recursive>
 80141ae:	bf00      	nop
 80141b0:	240009f9 	.word	0x240009f9

080141b4 <__sinit_lock_acquire>:
 80141b4:	4801      	ldr	r0, [pc, #4]	; (80141bc <__sinit_lock_acquire+0x8>)
 80141b6:	f7ff bcb4 	b.w	8013b22 <__retarget_lock_acquire_recursive>
 80141ba:	bf00      	nop
 80141bc:	240009fa 	.word	0x240009fa

080141c0 <__sinit_lock_release>:
 80141c0:	4801      	ldr	r0, [pc, #4]	; (80141c8 <__sinit_lock_release+0x8>)
 80141c2:	f7ff bcaf 	b.w	8013b24 <__retarget_lock_release_recursive>
 80141c6:	bf00      	nop
 80141c8:	240009fa 	.word	0x240009fa

080141cc <__sinit>:
 80141cc:	b510      	push	{r4, lr}
 80141ce:	4604      	mov	r4, r0
 80141d0:	f7ff fff0 	bl	80141b4 <__sinit_lock_acquire>
 80141d4:	69a3      	ldr	r3, [r4, #24]
 80141d6:	b11b      	cbz	r3, 80141e0 <__sinit+0x14>
 80141d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80141dc:	f7ff bff0 	b.w	80141c0 <__sinit_lock_release>
 80141e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80141e4:	6523      	str	r3, [r4, #80]	; 0x50
 80141e6:	4b13      	ldr	r3, [pc, #76]	; (8014234 <__sinit+0x68>)
 80141e8:	4a13      	ldr	r2, [pc, #76]	; (8014238 <__sinit+0x6c>)
 80141ea:	681b      	ldr	r3, [r3, #0]
 80141ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80141ee:	42a3      	cmp	r3, r4
 80141f0:	bf04      	itt	eq
 80141f2:	2301      	moveq	r3, #1
 80141f4:	61a3      	streq	r3, [r4, #24]
 80141f6:	4620      	mov	r0, r4
 80141f8:	f000 f820 	bl	801423c <__sfp>
 80141fc:	6060      	str	r0, [r4, #4]
 80141fe:	4620      	mov	r0, r4
 8014200:	f000 f81c 	bl	801423c <__sfp>
 8014204:	60a0      	str	r0, [r4, #8]
 8014206:	4620      	mov	r0, r4
 8014208:	f000 f818 	bl	801423c <__sfp>
 801420c:	2200      	movs	r2, #0
 801420e:	60e0      	str	r0, [r4, #12]
 8014210:	2104      	movs	r1, #4
 8014212:	6860      	ldr	r0, [r4, #4]
 8014214:	f7ff ff82 	bl	801411c <std>
 8014218:	68a0      	ldr	r0, [r4, #8]
 801421a:	2201      	movs	r2, #1
 801421c:	2109      	movs	r1, #9
 801421e:	f7ff ff7d 	bl	801411c <std>
 8014222:	68e0      	ldr	r0, [r4, #12]
 8014224:	2202      	movs	r2, #2
 8014226:	2112      	movs	r1, #18
 8014228:	f7ff ff78 	bl	801411c <std>
 801422c:	2301      	movs	r3, #1
 801422e:	61a3      	str	r3, [r4, #24]
 8014230:	e7d2      	b.n	80141d8 <__sinit+0xc>
 8014232:	bf00      	nop
 8014234:	08014c00 	.word	0x08014c00
 8014238:	08014165 	.word	0x08014165

0801423c <__sfp>:
 801423c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801423e:	4607      	mov	r7, r0
 8014240:	f7ff ffac 	bl	801419c <__sfp_lock_acquire>
 8014244:	4b1e      	ldr	r3, [pc, #120]	; (80142c0 <__sfp+0x84>)
 8014246:	681e      	ldr	r6, [r3, #0]
 8014248:	69b3      	ldr	r3, [r6, #24]
 801424a:	b913      	cbnz	r3, 8014252 <__sfp+0x16>
 801424c:	4630      	mov	r0, r6
 801424e:	f7ff ffbd 	bl	80141cc <__sinit>
 8014252:	3648      	adds	r6, #72	; 0x48
 8014254:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014258:	3b01      	subs	r3, #1
 801425a:	d503      	bpl.n	8014264 <__sfp+0x28>
 801425c:	6833      	ldr	r3, [r6, #0]
 801425e:	b30b      	cbz	r3, 80142a4 <__sfp+0x68>
 8014260:	6836      	ldr	r6, [r6, #0]
 8014262:	e7f7      	b.n	8014254 <__sfp+0x18>
 8014264:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014268:	b9d5      	cbnz	r5, 80142a0 <__sfp+0x64>
 801426a:	4b16      	ldr	r3, [pc, #88]	; (80142c4 <__sfp+0x88>)
 801426c:	60e3      	str	r3, [r4, #12]
 801426e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014272:	6665      	str	r5, [r4, #100]	; 0x64
 8014274:	f7ff fc54 	bl	8013b20 <__retarget_lock_init_recursive>
 8014278:	f7ff ff96 	bl	80141a8 <__sfp_lock_release>
 801427c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014280:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014284:	6025      	str	r5, [r4, #0]
 8014286:	61a5      	str	r5, [r4, #24]
 8014288:	2208      	movs	r2, #8
 801428a:	4629      	mov	r1, r5
 801428c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014290:	f7fd fcf0 	bl	8011c74 <memset>
 8014294:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014298:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801429c:	4620      	mov	r0, r4
 801429e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80142a0:	3468      	adds	r4, #104	; 0x68
 80142a2:	e7d9      	b.n	8014258 <__sfp+0x1c>
 80142a4:	2104      	movs	r1, #4
 80142a6:	4638      	mov	r0, r7
 80142a8:	f7ff ff62 	bl	8014170 <__sfmoreglue>
 80142ac:	4604      	mov	r4, r0
 80142ae:	6030      	str	r0, [r6, #0]
 80142b0:	2800      	cmp	r0, #0
 80142b2:	d1d5      	bne.n	8014260 <__sfp+0x24>
 80142b4:	f7ff ff78 	bl	80141a8 <__sfp_lock_release>
 80142b8:	230c      	movs	r3, #12
 80142ba:	603b      	str	r3, [r7, #0]
 80142bc:	e7ee      	b.n	801429c <__sfp+0x60>
 80142be:	bf00      	nop
 80142c0:	08014c00 	.word	0x08014c00
 80142c4:	ffff0001 	.word	0xffff0001

080142c8 <_fwalk_reent>:
 80142c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80142cc:	4606      	mov	r6, r0
 80142ce:	4688      	mov	r8, r1
 80142d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80142d4:	2700      	movs	r7, #0
 80142d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80142da:	f1b9 0901 	subs.w	r9, r9, #1
 80142de:	d505      	bpl.n	80142ec <_fwalk_reent+0x24>
 80142e0:	6824      	ldr	r4, [r4, #0]
 80142e2:	2c00      	cmp	r4, #0
 80142e4:	d1f7      	bne.n	80142d6 <_fwalk_reent+0xe>
 80142e6:	4638      	mov	r0, r7
 80142e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80142ec:	89ab      	ldrh	r3, [r5, #12]
 80142ee:	2b01      	cmp	r3, #1
 80142f0:	d907      	bls.n	8014302 <_fwalk_reent+0x3a>
 80142f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80142f6:	3301      	adds	r3, #1
 80142f8:	d003      	beq.n	8014302 <_fwalk_reent+0x3a>
 80142fa:	4629      	mov	r1, r5
 80142fc:	4630      	mov	r0, r6
 80142fe:	47c0      	blx	r8
 8014300:	4307      	orrs	r7, r0
 8014302:	3568      	adds	r5, #104	; 0x68
 8014304:	e7e9      	b.n	80142da <_fwalk_reent+0x12>

08014306 <__swhatbuf_r>:
 8014306:	b570      	push	{r4, r5, r6, lr}
 8014308:	460e      	mov	r6, r1
 801430a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801430e:	2900      	cmp	r1, #0
 8014310:	b096      	sub	sp, #88	; 0x58
 8014312:	4614      	mov	r4, r2
 8014314:	461d      	mov	r5, r3
 8014316:	da08      	bge.n	801432a <__swhatbuf_r+0x24>
 8014318:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801431c:	2200      	movs	r2, #0
 801431e:	602a      	str	r2, [r5, #0]
 8014320:	061a      	lsls	r2, r3, #24
 8014322:	d410      	bmi.n	8014346 <__swhatbuf_r+0x40>
 8014324:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014328:	e00e      	b.n	8014348 <__swhatbuf_r+0x42>
 801432a:	466a      	mov	r2, sp
 801432c:	f000 f8b6 	bl	801449c <_fstat_r>
 8014330:	2800      	cmp	r0, #0
 8014332:	dbf1      	blt.n	8014318 <__swhatbuf_r+0x12>
 8014334:	9a01      	ldr	r2, [sp, #4]
 8014336:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801433a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801433e:	425a      	negs	r2, r3
 8014340:	415a      	adcs	r2, r3
 8014342:	602a      	str	r2, [r5, #0]
 8014344:	e7ee      	b.n	8014324 <__swhatbuf_r+0x1e>
 8014346:	2340      	movs	r3, #64	; 0x40
 8014348:	2000      	movs	r0, #0
 801434a:	6023      	str	r3, [r4, #0]
 801434c:	b016      	add	sp, #88	; 0x58
 801434e:	bd70      	pop	{r4, r5, r6, pc}

08014350 <__smakebuf_r>:
 8014350:	898b      	ldrh	r3, [r1, #12]
 8014352:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014354:	079d      	lsls	r5, r3, #30
 8014356:	4606      	mov	r6, r0
 8014358:	460c      	mov	r4, r1
 801435a:	d507      	bpl.n	801436c <__smakebuf_r+0x1c>
 801435c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014360:	6023      	str	r3, [r4, #0]
 8014362:	6123      	str	r3, [r4, #16]
 8014364:	2301      	movs	r3, #1
 8014366:	6163      	str	r3, [r4, #20]
 8014368:	b002      	add	sp, #8
 801436a:	bd70      	pop	{r4, r5, r6, pc}
 801436c:	ab01      	add	r3, sp, #4
 801436e:	466a      	mov	r2, sp
 8014370:	f7ff ffc9 	bl	8014306 <__swhatbuf_r>
 8014374:	9900      	ldr	r1, [sp, #0]
 8014376:	4605      	mov	r5, r0
 8014378:	4630      	mov	r0, r6
 801437a:	f7fd fcef 	bl	8011d5c <_malloc_r>
 801437e:	b948      	cbnz	r0, 8014394 <__smakebuf_r+0x44>
 8014380:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014384:	059a      	lsls	r2, r3, #22
 8014386:	d4ef      	bmi.n	8014368 <__smakebuf_r+0x18>
 8014388:	f023 0303 	bic.w	r3, r3, #3
 801438c:	f043 0302 	orr.w	r3, r3, #2
 8014390:	81a3      	strh	r3, [r4, #12]
 8014392:	e7e3      	b.n	801435c <__smakebuf_r+0xc>
 8014394:	4b0d      	ldr	r3, [pc, #52]	; (80143cc <__smakebuf_r+0x7c>)
 8014396:	62b3      	str	r3, [r6, #40]	; 0x28
 8014398:	89a3      	ldrh	r3, [r4, #12]
 801439a:	6020      	str	r0, [r4, #0]
 801439c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80143a0:	81a3      	strh	r3, [r4, #12]
 80143a2:	9b00      	ldr	r3, [sp, #0]
 80143a4:	6163      	str	r3, [r4, #20]
 80143a6:	9b01      	ldr	r3, [sp, #4]
 80143a8:	6120      	str	r0, [r4, #16]
 80143aa:	b15b      	cbz	r3, 80143c4 <__smakebuf_r+0x74>
 80143ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80143b0:	4630      	mov	r0, r6
 80143b2:	f000 f885 	bl	80144c0 <_isatty_r>
 80143b6:	b128      	cbz	r0, 80143c4 <__smakebuf_r+0x74>
 80143b8:	89a3      	ldrh	r3, [r4, #12]
 80143ba:	f023 0303 	bic.w	r3, r3, #3
 80143be:	f043 0301 	orr.w	r3, r3, #1
 80143c2:	81a3      	strh	r3, [r4, #12]
 80143c4:	89a0      	ldrh	r0, [r4, #12]
 80143c6:	4305      	orrs	r5, r0
 80143c8:	81a5      	strh	r5, [r4, #12]
 80143ca:	e7cd      	b.n	8014368 <__smakebuf_r+0x18>
 80143cc:	08014165 	.word	0x08014165

080143d0 <__sread>:
 80143d0:	b510      	push	{r4, lr}
 80143d2:	460c      	mov	r4, r1
 80143d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80143d8:	f000 f894 	bl	8014504 <_read_r>
 80143dc:	2800      	cmp	r0, #0
 80143de:	bfab      	itete	ge
 80143e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80143e2:	89a3      	ldrhlt	r3, [r4, #12]
 80143e4:	181b      	addge	r3, r3, r0
 80143e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80143ea:	bfac      	ite	ge
 80143ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80143ee:	81a3      	strhlt	r3, [r4, #12]
 80143f0:	bd10      	pop	{r4, pc}

080143f2 <__swrite>:
 80143f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143f6:	461f      	mov	r7, r3
 80143f8:	898b      	ldrh	r3, [r1, #12]
 80143fa:	05db      	lsls	r3, r3, #23
 80143fc:	4605      	mov	r5, r0
 80143fe:	460c      	mov	r4, r1
 8014400:	4616      	mov	r6, r2
 8014402:	d505      	bpl.n	8014410 <__swrite+0x1e>
 8014404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014408:	2302      	movs	r3, #2
 801440a:	2200      	movs	r2, #0
 801440c:	f000 f868 	bl	80144e0 <_lseek_r>
 8014410:	89a3      	ldrh	r3, [r4, #12]
 8014412:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014416:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801441a:	81a3      	strh	r3, [r4, #12]
 801441c:	4632      	mov	r2, r6
 801441e:	463b      	mov	r3, r7
 8014420:	4628      	mov	r0, r5
 8014422:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014426:	f000 b817 	b.w	8014458 <_write_r>

0801442a <__sseek>:
 801442a:	b510      	push	{r4, lr}
 801442c:	460c      	mov	r4, r1
 801442e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014432:	f000 f855 	bl	80144e0 <_lseek_r>
 8014436:	1c43      	adds	r3, r0, #1
 8014438:	89a3      	ldrh	r3, [r4, #12]
 801443a:	bf15      	itete	ne
 801443c:	6560      	strne	r0, [r4, #84]	; 0x54
 801443e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014442:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014446:	81a3      	strheq	r3, [r4, #12]
 8014448:	bf18      	it	ne
 801444a:	81a3      	strhne	r3, [r4, #12]
 801444c:	bd10      	pop	{r4, pc}

0801444e <__sclose>:
 801444e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014452:	f000 b813 	b.w	801447c <_close_r>
	...

08014458 <_write_r>:
 8014458:	b538      	push	{r3, r4, r5, lr}
 801445a:	4d07      	ldr	r5, [pc, #28]	; (8014478 <_write_r+0x20>)
 801445c:	4604      	mov	r4, r0
 801445e:	4608      	mov	r0, r1
 8014460:	4611      	mov	r1, r2
 8014462:	2200      	movs	r2, #0
 8014464:	602a      	str	r2, [r5, #0]
 8014466:	461a      	mov	r2, r3
 8014468:	f7f1 feb3 	bl	80061d2 <_write>
 801446c:	1c43      	adds	r3, r0, #1
 801446e:	d102      	bne.n	8014476 <_write_r+0x1e>
 8014470:	682b      	ldr	r3, [r5, #0]
 8014472:	b103      	cbz	r3, 8014476 <_write_r+0x1e>
 8014474:	6023      	str	r3, [r4, #0]
 8014476:	bd38      	pop	{r3, r4, r5, pc}
 8014478:	240009f4 	.word	0x240009f4

0801447c <_close_r>:
 801447c:	b538      	push	{r3, r4, r5, lr}
 801447e:	4d06      	ldr	r5, [pc, #24]	; (8014498 <_close_r+0x1c>)
 8014480:	2300      	movs	r3, #0
 8014482:	4604      	mov	r4, r0
 8014484:	4608      	mov	r0, r1
 8014486:	602b      	str	r3, [r5, #0]
 8014488:	f7f1 febf 	bl	800620a <_close>
 801448c:	1c43      	adds	r3, r0, #1
 801448e:	d102      	bne.n	8014496 <_close_r+0x1a>
 8014490:	682b      	ldr	r3, [r5, #0]
 8014492:	b103      	cbz	r3, 8014496 <_close_r+0x1a>
 8014494:	6023      	str	r3, [r4, #0]
 8014496:	bd38      	pop	{r3, r4, r5, pc}
 8014498:	240009f4 	.word	0x240009f4

0801449c <_fstat_r>:
 801449c:	b538      	push	{r3, r4, r5, lr}
 801449e:	4d07      	ldr	r5, [pc, #28]	; (80144bc <_fstat_r+0x20>)
 80144a0:	2300      	movs	r3, #0
 80144a2:	4604      	mov	r4, r0
 80144a4:	4608      	mov	r0, r1
 80144a6:	4611      	mov	r1, r2
 80144a8:	602b      	str	r3, [r5, #0]
 80144aa:	f7f1 feba 	bl	8006222 <_fstat>
 80144ae:	1c43      	adds	r3, r0, #1
 80144b0:	d102      	bne.n	80144b8 <_fstat_r+0x1c>
 80144b2:	682b      	ldr	r3, [r5, #0]
 80144b4:	b103      	cbz	r3, 80144b8 <_fstat_r+0x1c>
 80144b6:	6023      	str	r3, [r4, #0]
 80144b8:	bd38      	pop	{r3, r4, r5, pc}
 80144ba:	bf00      	nop
 80144bc:	240009f4 	.word	0x240009f4

080144c0 <_isatty_r>:
 80144c0:	b538      	push	{r3, r4, r5, lr}
 80144c2:	4d06      	ldr	r5, [pc, #24]	; (80144dc <_isatty_r+0x1c>)
 80144c4:	2300      	movs	r3, #0
 80144c6:	4604      	mov	r4, r0
 80144c8:	4608      	mov	r0, r1
 80144ca:	602b      	str	r3, [r5, #0]
 80144cc:	f7f1 feb9 	bl	8006242 <_isatty>
 80144d0:	1c43      	adds	r3, r0, #1
 80144d2:	d102      	bne.n	80144da <_isatty_r+0x1a>
 80144d4:	682b      	ldr	r3, [r5, #0]
 80144d6:	b103      	cbz	r3, 80144da <_isatty_r+0x1a>
 80144d8:	6023      	str	r3, [r4, #0]
 80144da:	bd38      	pop	{r3, r4, r5, pc}
 80144dc:	240009f4 	.word	0x240009f4

080144e0 <_lseek_r>:
 80144e0:	b538      	push	{r3, r4, r5, lr}
 80144e2:	4d07      	ldr	r5, [pc, #28]	; (8014500 <_lseek_r+0x20>)
 80144e4:	4604      	mov	r4, r0
 80144e6:	4608      	mov	r0, r1
 80144e8:	4611      	mov	r1, r2
 80144ea:	2200      	movs	r2, #0
 80144ec:	602a      	str	r2, [r5, #0]
 80144ee:	461a      	mov	r2, r3
 80144f0:	f7f1 feb2 	bl	8006258 <_lseek>
 80144f4:	1c43      	adds	r3, r0, #1
 80144f6:	d102      	bne.n	80144fe <_lseek_r+0x1e>
 80144f8:	682b      	ldr	r3, [r5, #0]
 80144fa:	b103      	cbz	r3, 80144fe <_lseek_r+0x1e>
 80144fc:	6023      	str	r3, [r4, #0]
 80144fe:	bd38      	pop	{r3, r4, r5, pc}
 8014500:	240009f4 	.word	0x240009f4

08014504 <_read_r>:
 8014504:	b538      	push	{r3, r4, r5, lr}
 8014506:	4d07      	ldr	r5, [pc, #28]	; (8014524 <_read_r+0x20>)
 8014508:	4604      	mov	r4, r0
 801450a:	4608      	mov	r0, r1
 801450c:	4611      	mov	r1, r2
 801450e:	2200      	movs	r2, #0
 8014510:	602a      	str	r2, [r5, #0]
 8014512:	461a      	mov	r2, r3
 8014514:	f7f1 fe40 	bl	8006198 <_read>
 8014518:	1c43      	adds	r3, r0, #1
 801451a:	d102      	bne.n	8014522 <_read_r+0x1e>
 801451c:	682b      	ldr	r3, [r5, #0]
 801451e:	b103      	cbz	r3, 8014522 <_read_r+0x1e>
 8014520:	6023      	str	r3, [r4, #0]
 8014522:	bd38      	pop	{r3, r4, r5, pc}
 8014524:	240009f4 	.word	0x240009f4

08014528 <_init>:
 8014528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801452a:	bf00      	nop
 801452c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801452e:	bc08      	pop	{r3}
 8014530:	469e      	mov	lr, r3
 8014532:	4770      	bx	lr

08014534 <_fini>:
 8014534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014536:	bf00      	nop
 8014538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801453a:	bc08      	pop	{r3}
 801453c:	469e      	mov	lr, r3
 801453e:	4770      	bx	lr
